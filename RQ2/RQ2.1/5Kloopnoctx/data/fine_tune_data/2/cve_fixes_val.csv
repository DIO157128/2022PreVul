,source,target
0,"<S2SV_StartBug> void f2fs_wait_discard_bios ( struct f2fs_sb_info * sbi ) <S2SV_EndBug> <S2SV_StartBug> __wait_discard_cmd ( sbi , false ) ; <S2SV_EndBug> ","<S2SV_ModStart> , bool umount <S2SV_ModStart> ! umount <S2SV_ModEnd> "
1,"<S2SV_StartBug> dprintk ( ""%s:<S2SV_blank>write<S2SV_blank>%Zd<S2SV_blank>bytes\\n"" , bd -> name , count ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; if ( unlikely ( segment_eq ( get_fs ( ) , KERNEL_DS ) ) ) return - EINVAL "
2,"<S2SV_StartBug> if ( check_stack_guard_page ( vma , address ) < 0 ) <S2SV_EndBug> ",<S2SV_ModStart> vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if ( 
3,<S2SV_StartBug> if ( ! mm ) <S2SV_EndBug> ,<S2SV_ModStart> || ! mm -> env_end 
4,"<S2SV_StartBug> static void buffer_pipe_buf_get ( struct pipe_inode_info * pipe , <S2SV_EndBug> <S2SV_StartBug> ref -> ref ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> bool <S2SV_ModEnd> <S2SV_ModStart> if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> return true ; 
5,<S2SV_StartBug> cork -> length += length ; <S2SV_EndBug> <S2SV_StartBug> if ( length > mtu ) { <S2SV_EndBug> <S2SV_StartBug> if ( dontfrag && ( proto == IPPROTO_UDP || proto == IPPROTO_RAW ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( proto == IPPROTO_UDP && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart> sk -> sk_protocol <S2SV_ModEnd> <S2SV_ModStart> sk -> sk_protocol <S2SV_ModEnd> <S2SV_ModStart> skb = skb_peek_tail ( & sk -> sk_write_queue ) ; cork -> length += length ; if ( ( ( length > mtu ) || ( skb && skb_is_gso ( skb ) ) ) && ( sk -> sk_protocol == IPPROTO_UDP ) <S2SV_ModEnd> <S2SV_ModStart> if ( ! skb <S2SV_ModEnd> 
6,<S2SV_StartBug> INST_HANDLER ( sts ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( len < 4 ) { return ; } 
7,<S2SV_StartBug> if ( ( image_info -> ping != MagickFalse ) && ( image_info -> number_scenes != 0 ) ) <S2SV_EndBug> ,"<S2SV_ModStart> EOFBlob ( image ) != MagickFalse ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; if ( "
8,"<S2SV_StartBug> return kvm_x86_ops -> set_msr ( vcpu , msr ) ; <S2SV_EndBug> ",<S2SV_ModStart> switch ( msr -> index ) { case MSR_FS_BASE : case MSR_GS_BASE : case MSR_KERNEL_GS_BASE : case MSR_CSTAR : case MSR_LSTAR : if ( is_noncanonical_address ( msr -> data ) ) return 1 ; break ; case MSR_IA32_SYSENTER_EIP : case MSR_IA32_SYSENTER_ESP : msr -> data = get_canonical ( msr -> data ) ; } 
9,"<S2SV_StartBug> char file [ PATH_MAX ] ; <S2SV_EndBug> <S2SV_StartBug> while ( fscanf ( maps , ""%*x-%*x<S2SV_blank>%*s<S2SV_blank>%zx<S2SV_blank>%s<S2SV_blank>%ld<S2SV_blank>%s\\n"" , & offset , device , & inode , <S2SV_EndBug> ","<S2SV_ModStart> 1024 <S2SV_ModEnd> <S2SV_ModStart> ""%*x-%*x<S2SV_blank>%*s<S2SV_blank>%zx<S2SV_blank>%5s<S2SV_blank>%ld<S2SV_blank>%1023s\\n"" <S2SV_ModEnd> "
10,"<S2SV_StartBug> int is_pdf ; <S2SV_EndBug> <S2SV_StartBug> header = get_header ( fp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( header && strstr ( header , ""%PDF-"" ) ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! ( <S2SV_ModStart> ) ) return 0 ; const char * c = <S2SV_ModEnd> <S2SV_ModStart> ; const int is_pdf = c && ( ( c - header + strlen ( ""%PDF-M.m"" ) ) < 1024 ) <S2SV_ModEnd> "
11,"<S2SV_StartBug> uint dblocks = XFS_B_TO_FSB ( mp , valuelen ) ; <S2SV_EndBug> ",<S2SV_ModStart> xfs_attr3_rmt_blocks <S2SV_ModEnd> 
12,"<S2SV_StartBug> archive_check_magic ( & a -> archive , ARCHIVE_WRITE_MAGIC , <S2SV_EndBug> <S2SV_StartBug> ARCHIVE_STATE_DATA , ""archive_write_data"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> const size_t max_write = INT_MAX ; <S2SV_ModStart> ; if ( s > max_write ) s = max_write 
13,<S2SV_StartBug> case RAPTOR_OPTION_RELATIVE_URIS : <S2SV_EndBug> ,<S2SV_ModStart> RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES : case 
14,"<S2SV_StartBug> if ( PyArena_AddPyObject ( c -> c_arena , str ) < 0 ) { <S2SV_EndBug> ",<S2SV_ModStart> ! str ) return NULL ; if ( 
15,"<S2SV_StartBug> if ( ( error_code >> 16 ) != 0x8009 ) <S2SV_EndBug> <S2SV_StartBug> return ""None<S2SV_blank>of<S2SV_blank>the<S2SV_blank>signers<S2SV_blank>of<S2SV_blank>the<S2SV_blank>cryptographic<S2SV_blank>message<S2SV_blank>or<S2SV_blank>certificate<S2SV_blank>trust<S2SV_blank>list<S2SV_blank>is<S2SV_blank>trusted."" ; <S2SV_EndBug> ","<S2SV_ModStart> ( <S2SV_ModStart> && ( ( error_code >> 16 ) != 0x800B ) ) <S2SV_ModStart> ; case CERT_E_UNTRUSTEDROOT : return ""The<S2SV_blank>root<S2SV_blank>certificate<S2SV_blank>is<S2SV_blank>not<S2SV_blank>trusted."" ; case TRUST_E_NOSIGNATURE : return ""Not<S2SV_blank>digitally<S2SV_blank>signed."" ; case TRUST_E_EXPLICIT_DISTRUST : return ""One<S2SV_blank>of<S2SV_blank>the<S2SV_blank>certificates<S2SV_blank>used<S2SV_blank>was<S2SV_blank>marked<S2SV_blank>as<S2SV_blank>untrusted<S2SV_blank>by<S2SV_blank>the<S2SV_blank>user."" "
16,"<S2SV_StartBug> if ( perf_event_overflow ( event , 1 , & data , regs ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
17,<S2SV_StartBug> int_fb_list -> int_fb [ i ] . size = min_size ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( int_fb_list -> int_fb [ i ] . data , 0 , min_size ) ; "
18,<S2SV_StartBug> box -> info = boxinfo ; <S2SV_EndBug> <S2SV_StartBug> box -> ops = & jp2_boxinfo_unk . ops ; <S2SV_EndBug> <S2SV_StartBug> jas_stream_rewind ( tmpstream ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; box -> ops = & boxinfo -> ops 
19,"<S2SV_StartBug> __evtchn_fifo_handle_events ( cpu , true ) ; <S2SV_EndBug> ",<S2SV_ModStart> NULL <S2SV_ModEnd> 
20,"<S2SV_StartBug> ASN1err ( ASN1_F_ASN1_VERIFY , ASN1_R_INVALID_BIT_STRING_BITS_LEFT ) ; <S2SV_EndBug> ",<S2SV_ModStart> ASN1_F_ASN1_ITEM_VERIFY <S2SV_ModEnd> 
21,"<S2SV_StartBug> l_current_pi -> include = ( OPJ_INT16 * ) opj_calloc ( ( l_tcp -> numlayers + 1 ) * l_step_l , sizeof ( OPJ_INT16 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if <S2SV_EndBug> ",<S2SV_ModStart> 00 ; if ( l_step_l <= ( SIZE_MAX / ( l_tcp -> numlayers + 1U ) ) ) { l_current_pi -> include = <S2SV_ModStart> } 
22,"<S2SV_StartBug> ( void ) fputc ( c , file ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> != c ) break 
23,"<S2SV_StartBug> if ( ! test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) { <S2SV_EndBug> <S2SV_StartBug> set_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ; <S2SV_EndBug> ","<S2SV_ModStart> key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> <S2SV_ModStart> mark_key_instantiated ( key , 0 <S2SV_ModEnd> "
24,"<S2SV_StartBug> const int sb_cols = mi_cols_aligned_to_sb ( mi_cols ) >> MI_BLOCK_SIZE_LOG2 ; <S2SV_EndBug> <S2SV_StartBug> int min_log2 = 0 , max_log2 = 0 ; <S2SV_EndBug> <S2SV_StartBug> * min_log2_tile_cols = min_log2 ; <S2SV_EndBug> <S2SV_StartBug> * max_log2_tile_cols = max_log2 ; <S2SV_EndBug> ",<S2SV_ModStart> sb64_cols <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> get_min_log2_tile_cols ( sb64_cols ) <S2SV_ModEnd> <S2SV_ModStart> get_max_log2_tile_cols ( sb64_cols ) ; assert ( * min_log2_tile_cols <= * max_log2_tile_cols ) <S2SV_ModEnd> 
25,"<S2SV_StartBug> if ( vp9_segfeature_active ( seg , seg_id , SEG_LVL_ALT_LF ) ) { <S2SV_EndBug> <S2SV_StartBug> const int data = vp9_get_segdata ( seg , seg_id , SEG_LVL_ALT_LF ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( lfi -> lvl [ seg_id ] , lvl_seg , sizeof ( lfi -> lvl [ seg_id ] ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> segfeature_active <S2SV_ModEnd> <S2SV_ModStart> get_segdata <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
26,"<S2SV_StartBug> dev_net_set ( dev , net ) ; <S2SV_EndBug> ","<S2SV_ModStart> err = dev_get_valid_name ( net , dev , name ) ; if ( err ) goto err_free_dev ; "
27,"<S2SV_StartBug> ctxt -> dst . type = OP_REG ; <S2SV_EndBug> <S2SV_StartBug> rc = emulate_pop ( ctxt , & ctxt -> dst . val , ctxt -> op_bytes ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned long eip <S2SV_ModEnd> <S2SV_ModStart> eip <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( rc != X86EMUL_CONTINUE ) return rc ; rc = assign_eip_near ( ctxt , eip "
28,<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( pool ) ; 
29,<S2SV_StartBug> size = INT_MAX ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( unlikely ( ! access_ok ( VERIFY_WRITE , ubuf , size ) ) ) return - EFAULT "
30,<S2SV_StartBug> if ( attr >= 0 ) { <S2SV_EndBug> ,"<S2SV_ModStart> && xhash_get ( in -> states , rkey ) == ( void * ) conn_INPROGRESS "
31,"<S2SV_StartBug> n = r -> iov . iov_len / 512 ; <S2SV_EndBug> <S2SV_StartBug> qemu_iovec_init_external ( & r -> qiov , & r -> iov , 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> qiov . size <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
32,"<S2SV_StartBug> src_devid , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> NULL , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> , true <S2SV_ModStart> , true "
33,<S2SV_StartBug> if ( ( rsa = RSA_new ( ) ) == NULL ) <S2SV_EndBug> ,"<S2SV_ModStart> ! SSL_C_IS_EXPORT ( s -> s3 -> tmp . new_cipher ) ) { al = SSL_AD_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_UNEXPECTED_MESSAGE ) ; goto f_err ; } if ( "
34,<S2SV_StartBug> if ( header_len > LEVEL_3_MAX_HEADER_LEN ) { <S2SV_EndBug> ,<S2SV_ModStart> || header_len < RAW_DATA_LEN ( header ) 
35,<S2SV_StartBug> crypto_free_skcipher ( private ) ; <S2SV_EndBug> ,<S2SV_ModStart> struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> 
36,"<S2SV_StartBug> static void restore_context ( VP9_COMP * cpi , int mi_row , int mi_col , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( xd -> above_seg_context + mi_col , sa , <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( xd -> left_seg_context + ( mi_row & MI_MASK ) , sl , <S2SV_EndBug> ",<S2SV_ModStart> MACROBLOCK * const x <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
37,<S2SV_StartBug> ND_TCHECK ( dp [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> dp += 3 ; <S2SV_EndBug> ,"<S2SV_ModStart> 4 <S2SV_ModEnd> <S2SV_ModStart> ND_PRINT ( ( ndo , ""<S2SV_blank><%s>"" , tok2str ( nfsv3_writemodes , NULL , EXTRACT_32BITS ( & dp [ 3 ] <S2SV_ModEnd> "
38,"<S2SV_StartBug> isoclns_print ( ndo , p , length , caplen ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
39,<S2SV_StartBug> if ( name == NULL ) { <S2SV_EndBug> ,<S2SV_ModStart> ctxt -> instate == XML_PARSER_EOF ) return ; if ( 
40,"<S2SV_StartBug> pfkey_broadcast ( skb_out , GFP_ATOMIC , BROADCAST_ALL , NULL , c -> net ) ; <S2SV_EndBug> ",<S2SV_ModStart> hdr -> sadb_msg_reserved = 0 ; 
41,<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug> ,<S2SV_ModStart> void 
42,"<S2SV_StartBug> l_current_pi -> include = ( OPJ_INT16 * ) opj_calloc ( ( l_tcp -> numlayers + 1 ) * l_step_l , sizeof ( OPJ_INT16 ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> size_t ) ( <S2SV_ModStart> 1U <S2SV_ModEnd> 
43,<S2SV_StartBug> assert ( dev -> lintr . pin > 0 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> <= 0 ) { pr_warn ( ""%s:<S2SV_blank>Invalid<S2SV_blank>intr<S2SV_blank>pin<S2SV_blank>on<S2SV_blank>dev<S2SV_blank>[%s]\\n"" , __func__ , dev -> name ) ; return ; } <S2SV_ModEnd> "
44,"<S2SV_StartBug> ""InvalidGeometry"" , ""`%s\'"" , option ) ; <S2SV_EndBug> ",<S2SV_ModStart> ) ; geometry = DestroyString ( geometry 
45,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""who-has<S2SV_blank>%s"" , ipaddr_string ( ndo , ATMTPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""tell<S2SV_blank>%s"" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%s<S2SV_blank>is-at<S2SV_blank>"" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""at<S2SV_blank>%s"" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""for<S2SV_blank>%s"" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""who-has<S2SV_blank>"" ) ) ; atmarp_tpaddr_print ( ndo , ap , pro <S2SV_ModEnd> <S2SV_ModStart> ""<S2SV_blank>tell<S2SV_blank>"" ) ) ; atmarp_spaddr_print ( ndo , ap , pro <S2SV_ModEnd> <S2SV_ModStart> atmarp_spaddr_print ( ndo , ap , pro ) ; ND_PRINT ( ( ndo , ""<S2SV_blank>is-at<S2SV_blank>"" <S2SV_ModEnd> <S2SV_ModStart> ""at<S2SV_blank>"" ) ) ; atmarp_spaddr_print ( ndo , ap , pro <S2SV_ModEnd> <S2SV_ModStart> ""for<S2SV_blank>"" ) ) ; atmarp_spaddr_print ( ndo , ap , pro <S2SV_ModEnd> "
46,<S2SV_StartBug> if ( ! ext_dp -> icmp_length ) { <S2SV_EndBug> <S2SV_StartBug> vec [ 0 ] . ptr = ( const uint8_t * ) ( const void * ) & ext_dp -> icmp_ext_version_res ; <S2SV_EndBug> <S2SV_StartBug> hlen -= 4 ; <S2SV_EndBug> ,"<S2SV_ModStart> && ND_TTEST2 ( ext_dp -> icmp_ext_version_res , plen - ICMP_EXTD_MINLEN ) <S2SV_ModStart> if ( ND_TTEST2 ( ext_dp -> icmp_ext_version_res , hlen ) ) { <S2SV_ModStart> } "
47,"<S2SV_StartBug> struct strbuf * path , const char * component ) <S2SV_EndBug> <S2SV_StartBug> free ( name ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name ) { const <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
48,<S2SV_StartBug> usleep ( us_delay ) ; <S2SV_EndBug> ,<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
49,"<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> struct frag_hdr fhdr ; <S2SV_EndBug> <S2SV_StartBug> skb -> ip_summed = CHECKSUM_PARTIAL ; <S2SV_EndBug> <S2SV_StartBug> __skb_queue_tail ( & sk -> sk_write_queue , skb ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct frag_hdr fhdr ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> csum = 0 ; __skb_queue_tail ( & sk -> sk_write_queue , skb ) ; } else if ( skb_is_gso ( skb ) ) { goto append ; } skb -> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> append : <S2SV_ModEnd> "
50,<S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0xc0 ) <S2SV_EndBug> <S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0x40 ) <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 0xc0 ) ND_PRINT ( ( ndo , ""<S2SV_blank>"" <S2SV_ModEnd> <S2SV_ModStart> 0x80 ) ND_PRINT ( ( ndo , ""M"" ) ) ; if ( dp -> icmp6_data16 [ 1 ] & "
51,<S2SV_StartBug> PureFileInfo * r ; <S2SV_EndBug> <S2SV_StartBug> while ( opt_R && r != s ) { <S2SV_EndBug> <S2SV_StartBug> char * alloca_subdir ; <S2SV_EndBug> <S2SV_StartBug> ALLOCA_FREE ( alloca_subdir ) ; <S2SV_EndBug> <S2SV_StartBug> free ( names ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; char * alloca_subdir ; size_t sizeof_subdir <S2SV_ModStart> sizeof_subdir = PATH_MAX + 1U ; if ( ( alloca_subdir = ALLOCA ( sizeof_subdir ) ) == NULL ) { goto toomany ; } <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ALLOCA_FREE ( alloca_subdir ) ; 
52,"<S2SV_StartBug> if ( getenv_int ( ""STRIP"" ) ) { <S2SV_EndBug> ","<S2SV_ModStart> getenv ( ""HASHSEED"" ) ) json_object_seed ( getenv_int ( ""HASHSEED"" ) ) ; if ( "
53,"<S2SV_StartBug> oe_errno = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! sock ) <S2SV_EndBug> <S2SV_StartBug> if ( addrlen ) <S2SV_EndBug> <S2SV_StartBug> ( struct oe_sockaddr * ) addr , <S2SV_EndBug> <S2SV_StartBug> addrlen ) != OE_OK ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ",<S2SV_ModStart> oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> || ! addr || ! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; if ( addrlen_in < 0 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> & addrlen_out <S2SV_ModEnd> <S2SV_ModStart> if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in >= addrlen_out ) * addrlen = addrlen_out ; 
54,<S2SV_StartBug> u32 mode = ( * ( u32 * ) valp ) & PSR_AA32_MODE_MASK ; <S2SV_EndBug> <S2SV_StartBug> case PSR_AA32_MODE_FIQ : <S2SV_EndBug> <S2SV_StartBug> case PSR_MODE_EL0t : <S2SV_EndBug> <S2SV_StartBug> case PSR_MODE_EL1h : <S2SV_EndBug> ,<S2SV_ModStart> u64 <S2SV_ModEnd> <S2SV_ModStart> u64 <S2SV_ModEnd> <S2SV_ModStart> if ( ! system_supports_32bit_el0 ( ) ) return - EINVAL ; break ; <S2SV_ModStart> if ( ! vcpu_el1_is_32bit ( vcpu ) ) return - EINVAL ; break ; <S2SV_ModStart> if ( vcpu_el1_is_32bit ( vcpu ) ) return - EINVAL ; 
55,<S2SV_StartBug> return ret ; <S2SV_EndBug> ,<S2SV_ModStart> goto out_controller_put <S2SV_ModEnd> 
56,<S2SV_StartBug> for ( i = scm -> fp -> count - 1 ; i >= 0 ; i -- ) { <S2SV_EndBug> <S2SV_StartBug> if ( unix_sock_count ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( too_many_unix_fds ( current ) ) return - ETOOMANYREFS ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
57,<S2SV_StartBug> register const u_char * ep ; <S2SV_EndBug> <S2SV_StartBug> ep = ( const u_char * ) ndo -> ndo_snapend ; <S2SV_EndBug> <S2SV_StartBug> if ( ndo -> ndo_vflag ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { if ( len < 8 ) goto trunc ; <S2SV_ModStart> } 
58,"<S2SV_StartBug> if ( offset != 0 ) <S2SV_EndBug> <S2SV_StartBug> csum_partial ( skb_transport_header ( skb ) + tlen , <S2SV_EndBug> <S2SV_StartBug> offset , 0 ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> skb_checksum ( skb , tend_off , <S2SV_ModEnd> <S2SV_ModStart> } "
59,"<S2SV_StartBug> size_t input_size , <S2SV_EndBug> <S2SV_StartBug> int max_bytes_matched = input_size ; <S2SV_EndBug> ","<S2SV_ModStart> input_forwards_size , size_t input_backwards_size <S2SV_ModEnd> <S2SV_ModStart> ; max_bytes_matched = flags & RE_FLAGS_BACKWARDS ? input_backwards_size : input_forwards_size <S2SV_ModEnd> "
60,"<S2SV_StartBug> set_string ( ""foo"" , module_object , ""string_array[%i]"" , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> set_integer ( 256 , module_object , ""integer_array[%i]"" , 256 ) ; "
61,"<S2SV_StartBug> file = kmalloc ( sizeof ( * file ) , GFP_NOIO ) ; <S2SV_EndBug> ",<S2SV_ModStart> kzalloc <S2SV_ModEnd> 
62,"<S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( user_password , ( char * ) crypt ( password , user_password ) ) != 0 ) <S2SV_EndBug> ","<S2SV_ModStart> char * crypt_password ; <S2SV_ModStart> crypt_password = crypt ( password , user_password ) ; if ( crypt_password == NULL ) { pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , ""Authentication<S2SV_blank>failed"" ) ; return - 1 ; } <S2SV_ModStart> crypt_password <S2SV_ModEnd> "
63,<S2SV_StartBug> if ( atomic_dec_and_test ( & ucounts -> count ) ) { <S2SV_EndBug> <S2SV_StartBug> hlist_del_init ( & ucounts -> node ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ucounts -> count -= 1 ; if ( ! ucounts -> count ) <S2SV_ModStart> ; else ucounts = NULL <S2SV_ModStart>  <S2SV_ModEnd> 
64,<S2SV_StartBug> length += len ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( length > ( size_t ) ( length + len ) ) ) goto _output_error ; 
65,<S2SV_StartBug> if ( ( flags & 0x01 ) && ! ( flags & 0x02 ) ) <S2SV_EndBug> ,"<S2SV_ModStart> ( void ) ResetMagickMemory ( pixels , 0 , pixel_info_length ) ; "
66,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( pid == INT_MIN ) return - ESRCH ; 
67,<S2SV_StartBug> free ( mem ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( mem ) { <S2SV_ModStart> mem = NULL ; } return ; 
68,"<S2SV_StartBug> size_t pos = luaL_optinteger ( L , 3 , 1 ) - 1 ; <S2SV_EndBug> <S2SV_StartBug> luaL_argcheck ( L , pos + size <= ld , 2 , ""data<S2SV_blank>string<S2SV_blank>too<S2SV_blank>short"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; luaL_argcheck ( L , pos > 0 , 3 , ""offset<S2SV_blank>must<S2SV_blank>be<S2SV_blank>1<S2SV_blank>or<S2SV_blank>greater"" ) ; pos -- <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && pos <= ld - size , <S2SV_ModEnd> "
69,"<S2SV_StartBug> if ( send ( common -> ctrl_fd , & cmd , 1 , MSG_NOSIGNAL ) == - 1 ) <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
70,<S2SV_StartBug> bin -> dyld_info = malloc ( sizeof ( struct dyld_info_command ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( off + sizeof ( struct dyld_info_command ) > bin -> size ) { <S2SV_EndBug> <S2SV_StartBug> free ( bin -> dyld_info ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> calloc ( 1 , <S2SV_ModEnd> <S2SV_ModStart> bin -> dyld_info ) { if ( <S2SV_ModStart> R_FREE <S2SV_ModEnd> <S2SV_ModStart> } "
71,"<S2SV_StartBug> COM_DefaultExtension ( filename , sizeof ( filename ) , "".txt"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! COM_CompareExtension ( filename , "".txt"" ) ) { Com_Printf ( ""Con_Dump_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\"".txt\\""<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"" ) ; return ; } "
72,"<S2SV_StartBug> vpx_memset ( q , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> 
73,"<S2SV_StartBug> unix_state_double_unlock ( sk , other ) ; <S2SV_EndBug> ","<S2SV_ModStart> unix_dgram_peer_wake_disconnect_wakeup ( sk , old_peer ) ; "
74,"<S2SV_StartBug> void Huff_offsetReceive ( node_t * node , int * ch , byte * fin , int * offset ) { <S2SV_EndBug> <S2SV_StartBug> while ( node && node -> symbol == INTERNAL_NODE ) { <S2SV_EndBug> ","<S2SV_ModStart> , int maxoffset <S2SV_ModStart> if ( bloc >= maxoffset ) { * ch = 0 ; * offset = maxoffset + 1 ; return ; } "
75,<S2SV_StartBug> if ( ! ctx -> established ) { <S2SV_EndBug> ,<S2SV_ModStart> ctx -> terminated || 
76,<S2SV_StartBug> if ( enable_apicv ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
77,"<S2SV_StartBug> state -> frame [ 0 ] = kzalloc ( sizeof ( struct bpf_func_state ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> verbose ( env , ""\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d:<S2SV_blank>safe\\n"" , <S2SV_EndBug> <S2SV_StartBug> env -> prev_insn_idx , env -> insn_idx ) ; <S2SV_EndBug> <S2SV_StartBug> verbose ( env , ""\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d:"" , <S2SV_EndBug> <S2SV_StartBug> env -> prev_insn_idx , env -> insn_idx ) ; <S2SV_EndBug> ","<S2SV_ModStart> speculative = false ; state -> <S2SV_ModStart> ""\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d%s:<S2SV_blank>safe\\n"" <S2SV_ModEnd> <S2SV_ModStart> , env -> cur_state -> speculative ? ""<S2SV_blank>(speculative<S2SV_blank>execution)"" : """" <S2SV_ModStart> ""\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d%s:"" <S2SV_ModEnd> <S2SV_ModStart> , env -> cur_state -> speculative ? ""<S2SV_blank>(speculative<S2SV_blank>execution)"" : """" "
78,"<S2SV_StartBug> if ( in ) { <S2SV_EndBug> <S2SV_StartBug> dev -> out_pipe = usb_sndbulkpipe ( udev , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( out ) <S2SV_ModStart>  <S2SV_ModEnd> 
79,<S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * addr_len = sizeof ( * sin ) ; 
80,<S2SV_StartBug> VM_SHARED | VM_MAYSHARE | <S2SV_EndBug> <S2SV_StartBug> VM_SHARED | VM_MAYSHARE | <S2SV_EndBug> ,<S2SV_ModStart> VM_NO_THP <S2SV_ModEnd> <S2SV_ModStart> VM_NO_THP <S2SV_ModEnd> 
81,<S2SV_StartBug> ops -> destroy ( dev ) ; <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & kvm -> lock ) ; list_del ( & dev -> vm_node ) ; mutex_unlock ( & kvm -> lock ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
82,"<S2SV_StartBug> if ( ! flatpak_bwrap_bundle_args ( bwrap , 1 , - 1 , FALSE , error ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! g_spawn_async ( NULL , <S2SV_EndBug> <S2SV_StartBug> if ( execvpe ( flatpak_get_bwrap ( ) , ( char * * ) bwrap -> argv -> pdata , bwrap -> envp ) == - 1 ) <S2SV_EndBug> ",<S2SV_ModStart> flatpak_bwrap_envp_to_args ( bwrap ) ; <S2SV_ModStart> g_assert ( bwrap -> envp != NULL ) ; g_assert ( bwrap -> envp [ 0 ] == NULL ) ; <S2SV_ModStart> g_assert ( bwrap -> envp != NULL ) ; g_assert ( bwrap -> envp [ 0 ] == NULL ) ; 
83,"<S2SV_StartBug> record_and_restart ( event , val , regs , nmi ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
84,"<S2SV_StartBug> static vpx_codec_err_t vp8_get_last_ref_updates ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
85,<S2SV_StartBug> if ( ! new_buffer ) <S2SV_EndBug> <S2SV_StartBug> return AVERROR ( ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! new_buffer ) <S2SV_EndBug> <S2SV_StartBug> return AVERROR ( ENOMEM ) ; <S2SV_EndBug> ,<S2SV_ModStart> { pc -> index = 0 ; <S2SV_ModStart> } <S2SV_ModStart> { pc -> overread_index = pc -> index = 0 ; <S2SV_ModStart> } 
86,"<S2SV_StartBug> struct fsnotify_group * group ; <S2SV_EndBug> <S2SV_StartBug> user = get_current_user ( ) ; <S2SV_EndBug> <S2SV_StartBug> group = inotify_new_group ( user , inotify_max_queued_events ) ; <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( group ) ) { <S2SV_EndBug> <S2SV_StartBug> ret = PTR_ERR ( group ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret >= 0 ) <S2SV_EndBug> <S2SV_StartBug> fsnotify_put_group ( group ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> < 0 ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
87,"<S2SV_StartBug> vp9_writer * w , TOKENEXTRA * * tok , TOKENEXTRA * tok_end , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * const cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> set_mi_row_col ( xd , tile , <S2SV_EndBug> <S2SV_StartBug> write_mb_modes_kf ( cpi , xd -> mi , w ) ; <S2SV_EndBug> <S2SV_StartBug> pack_mb_tokens ( w , tok , tok_end ) ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> const TOKENEXTRA * const <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> td . <S2SV_ModStart> cpi -> td . mb . mbmi_ext = cpi -> td . mb . mbmi_ext_base + ( mi_row * cm -> mi_cols + mi_col ) ; <S2SV_ModStart> cm , xd <S2SV_ModEnd> <S2SV_ModStart> , cm -> bit_depth "
88,"<S2SV_StartBug> mlx4_dbg ( dev , ""Free<S2SV_blank>MAC<S2SV_blank>index<S2SV_blank>is<S2SV_blank>%d\\n"" , free ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( free < 0 ) { err = - ENOMEM ; goto out ; } 
89,<S2SV_StartBug> aof_fsync ( server . appendfd ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
90,"<S2SV_StartBug> byte readBuffer [ TC_SECTOR_SIZE_BIOS ] ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> offset . QuadPart = 0 ; <S2SV_EndBug> <S2SV_StartBug> sizeof ( readBuffer ) , <S2SV_EndBug> <S2SV_StartBug> if ( NT_SUCCESS ( ntStatus ) ) <S2SV_EndBug> <S2SV_StartBug> Irp -> IoStatus . Status = ntStatus ; <S2SV_EndBug> <S2SV_StartBug> Irp -> IoStatus . Information = 0 ; <S2SV_EndBug> ","<S2SV_ModStart> size_t devicePathLen = 0 <S2SV_ModEnd> <S2SV_ModStart> if ( ! NT_SUCCESS ( RtlUnalignedStringCchLengthW ( request -> DevicePath , TC_MAX_PATH , & devicePathLen ) ) || ( devicePathLen < 28 ) || ( devicePathLen > 30 ) || ( memcmp ( request -> DevicePath , L""\\\\Device\\\\Harddisk"" , 16 * sizeof ( WCHAR ) ) ) || ( memcmp ( & request -> DevicePath [ devicePathLen - 11 ] , L""\\\\Partition0"" , 11 * sizeof ( WCHAR ) ) ) ) { Irp -> IoStatus . Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus . Information = 0 ; break ; } <S2SV_ModStart> byte * readBuffer = TCalloc ( TC_MAX_VOLUME_SECTOR_SIZE ) ; if ( ! readBuffer ) { Irp -> IoStatus . Status = STATUS_INSUFFICIENT_RESOURCES ; Irp -> IoStatus . Information = 0 ; } else { <S2SV_ModStart> TC_MAX_VOLUME_SECTOR_SIZE <S2SV_ModEnd> <S2SV_ModStart> ) { if ( IoStatus . Information >= TC_SECTOR_SIZE_BIOS <S2SV_ModStart> STATUS_INVALID_PARAMETER ; Irp -> IoStatus . Information = 0 ; } } else { Irp -> IoStatus . Status = <S2SV_ModStart> ; } TCfree ( readBuffer ) "
91,<S2SV_StartBug> fh32 [ 2 ] = inode -> i_generation ; <S2SV_EndBug> ,<S2SV_ModStart> fh16 [ 3 ] = 0 ; 
92,<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> daddr = inet -> inet_daddr ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt && inet -> opt -> srr ) <S2SV_EndBug> ,<S2SV_ModStart> struct ip_options_rcu * inet_opt ; <S2SV_ModStart> rcu_read_lock ( ) ; inet_opt = rcu_dereference ( inet -> inet_opt ) ; <S2SV_ModStart> inet_opt && inet_opt -> opt . srr ) daddr = inet_opt -> opt . faddr ; rcu_read_unlock ( ) <S2SV_ModEnd> 
93,"<S2SV_StartBug> static inline void mcryptd_check_internal ( struct rtattr * * tb , u32 * type , <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( ( algt -> type & CRYPTO_ALG_INTERNAL ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( algt -> mask & CRYPTO_ALG_INTERNAL ) ) <S2SV_EndBug> ",<S2SV_ModStart> bool <S2SV_ModEnd> <S2SV_ModStart> false ; * type |= <S2SV_ModEnd> <S2SV_ModStart> ; * mask |= algt -> mask & <S2SV_ModEnd> <S2SV_ModStart> * type & * <S2SV_ModEnd> <S2SV_ModStart> return true ; else return false <S2SV_ModEnd> 
94,"<S2SV_StartBug> priv = kzalloc ( sizeof ( struct cypress_private ) , GFP_KERNEL ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! port -> interrupt_out_urb || ! port -> interrupt_in_urb ) { dev_err ( & port -> dev , ""required<S2SV_blank>endpoint<S2SV_blank>is<S2SV_blank>missing\\n"" ) ; return - ENODEV ; } "
95,"<S2SV_StartBug> int yy , mm , dd , hr , min , sec , csec ; <S2SV_EndBug> <S2SV_StartBug> ""%4d-%2d-%2d,%2d:%2d:%2d.%9d:<S2SV_blank>%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9u,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]"" , <S2SV_EndBug> <S2SV_StartBug> ""%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9u,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]"" , <S2SV_EndBug> <S2SV_StartBug> yy = mm = dd = hr = min = sec = csec = 0 ; <S2SV_EndBug> ","<S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> ""%4d-%2d-%2d,%2d:%2d:%2d.%9d:<S2SV_blank>%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9d,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]"" <S2SV_ModEnd> <S2SV_ModStart> ""%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9d,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]"" <S2SV_ModEnd> <S2SV_ModStart> ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""cosine:<S2SV_blank>packet<S2SV_blank>header<S2SV_blank>has<S2SV_blank>a<S2SV_blank>negative<S2SV_blank>packet<S2SV_blank>length"" ) ; return FALSE "
96,<S2SV_StartBug> ND_TCHECK ( dp -> ip6f_offlg ) ; <S2SV_EndBug> ,<S2SV_ModStart> * dp <S2SV_ModEnd> 
97,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""seq<S2SV_blank>0x%03x,<S2SV_blank>Flags<S2SV_blank>[%s],<S2SV_blank>length<S2SV_blank>%u"" , <S2SV_EndBug> ","<S2SV_ModStart> if ( length < 2 ) { ND_PRINT ( ( ndo , ""[|mlppp]"" ) ) ; return ; } if ( ! ND_TTEST_16BITS ( p ) ) { ND_PRINT ( ( ndo , ""[|mlppp]"" ) ) ; return ; } "
98,"<S2SV_StartBug> return vp8_get4x4sse_cs ( sptr , be -> src_stride , dptr , 16 ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_get4x4sse_cs <S2SV_ModEnd> 
99,"<S2SV_StartBug> if ( sk_filter ( sk , skb ) ) <S2SV_EndBug> <S2SV_StartBug> goto discard_and_relse ; <S2SV_EndBug> ",<S2SV_ModStart> tcp_filter <S2SV_ModEnd> <S2SV_ModStart> ; th = ( const struct tcphdr * ) skb -> data ; hdr = ipv6_hdr ( skb ) 
100,<S2SV_StartBug> if ( keyring ) <S2SV_EndBug> ,<S2SV_ModStart> && link_ret == 0 
101,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( s -> codec_id == AV_CODEC_ID_MPEG4 ) s -> idsp . mpeg4_studio_profile = s -> studio_profile ; 
102,<S2SV_StartBug> numSamples = pWTIntFrame -> numSamples ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( numSamples <= 0 ) { ALOGE ( ""b/26366256"" ) ; return ; } "
103,"<S2SV_StartBug> split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ? <S2SV_EndBug> <S2SV_StartBug> err = ext4_split_extent_at ( handle , inode , path , <S2SV_EndBug> <S2SV_StartBug> split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ? <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( split_flag & EXT4_EXT_DATA_VALID2 ) split_flag1 |= EXT4_EXT_DATA_VALID1 ; <S2SV_ModStart> ( EXT4_EXT_MAY_ZEROOUT | EXT4_EXT_DATA_VALID2 ) <S2SV_ModEnd> 
104,<S2SV_StartBug> user = key_user_lookup ( current_fsuid ( ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ctx -> index_key . type == & key_type_keyring ) return ERR_PTR ( - EPERM ) ; 
105,"<S2SV_StartBug> BIO * cmsbio = NULL , * tmpin = NULL ; <S2SV_EndBug> <S2SV_StartBug> cmsbio = CMS_dataInit ( cms , tmpin ) ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> if ( dcont && ( tmpin == dcont ) ) <S2SV_EndBug> <S2SV_StartBug> if ( cms_certs ) <S2SV_EndBug> ","<S2SV_ModStart> = NULL , * tmpout <S2SV_ModStart> if ( ! ( flags & SMIME_BINARY ) && dcont ) { tmpout = cms_get_text_bio ( out , flags ) ; if ( ! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY , ERR_R_MALLOC_FAILURE ) ; goto err ; } <S2SV_ModStart> tmpout ) ; if ( ! cmsbio ) goto err ; SMIME_crlf_copy ( dcont , cmsbio , flags & ~ SMIME_TEXT ) ; if ( flags & CMS_TEXT ) { if ( ! SMIME_text ( tmpout , out ) ) { CMSerr ( CMS_F_CMS_VERIFY , CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } } } else { cmsbio = CMS_dataInit ( cms , <S2SV_ModStart> } <S2SV_ModStart> ! ( flags & SMIME_BINARY ) && dcont ) { do_free_upto ( cmsbio , tmpout ) ; if ( tmpin != dcont ) BIO_free ( tmpin ) ; } else { if ( <S2SV_ModStart> } if ( tmpout && out != tmpout ) BIO_free_all ( tmpout ) ; "
106,"<S2SV_StartBug> __ip_vs_get_timeouts ( net , & t ) ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( & t , 0 , sizeof ( t ) ) ; "
107,"<S2SV_StartBug> if ( cfg -> g_w != ctx -> cfg . g_w || cfg -> g_h != ctx -> cfg . g_h ) <S2SV_EndBug> <S2SV_StartBug> ERROR ( ""Cannot<S2SV_blank>change<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>after<S2SV_blank>initialization"" ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_change_config ( ctx -> cpi , & ctx -> oxcf ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int force_key = 0 ; if ( cfg -> g_w != ctx -> cfg . g_w || cfg -> g_h != ctx -> cfg . g_h ) { if ( cfg -> g_lag_in_frames > 1 || cfg -> g_pass != VPX_RC_ONE_PASS <S2SV_ModEnd> <S2SV_ModStart> if ( ! valid_ref_frame_size ( ctx -> cfg . g_w , ctx -> cfg . g_h , cfg -> g_w , cfg -> g_h ) || ( ctx -> cpi -> initial_width && ( int ) cfg -> g_w > ctx -> cpi -> initial_width ) || ( ctx -> cpi -> initial_height && ( int ) cfg -> g_h > ctx -> cpi -> initial_height ) ) force_key = 1 ; } <S2SV_ModStart> force_key |= ctx -> cpi -> common . profile != ctx -> oxcf . profile ; <S2SV_ModStart> if ( force_key ) ctx -> next_frame_flags |= VPX_EFLAG_FORCE_KF ; "
108,<S2SV_StartBug> fp -> protocol = altsd -> bInterfaceProtocol ; <S2SV_EndBug> ,<S2SV_ModStart> if ( altsd -> bNumEndpoints < 1 ) { kfree ( fp ) ; kfree ( rate_table ) ; return - EINVAL ; } 
109,<S2SV_StartBug> if ( pkt == NULL ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
110,"<S2SV_StartBug> int err = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> for ( idx = 0 ; idx < kcontrol -> count ; idx ++ , id . index ++ , id . numid ++ ) <S2SV_EndBug> ",<S2SV_ModStart> unsigned int count ; <S2SV_ModStart> count = kcontrol -> count ; <S2SV_ModStart>  <S2SV_ModEnd> 
111,<S2SV_StartBug> while ( c ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> i ++ , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
112,<S2SV_StartBug> time_t then ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( strlen ( stamp ) != 2 ) return SRS_ETIMESTAMPOUTOFDATE 
113,"<S2SV_StartBug> xmlNode * <S2SV_EndBug> <S2SV_StartBug> crm_recv_remote_msg ( void * session , gboolean encrypted ) <S2SV_EndBug> <S2SV_StartBug> xmlNode * xml = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( encrypted ) { <S2SV_EndBug> ","<S2SV_ModStart> gboolean <S2SV_ModEnd> <S2SV_ModStart> , char * * recv_buf <S2SV_ModStart> , int total_timeout , int * disconnected ) { int ret ; size_t request_len = 0 ; time_t start = time ( NULL ) ; char * raw_request <S2SV_ModEnd> <S2SV_ModStart> int remaining_timeout = 0 ; if ( total_timeout == 0 ) { total_timeout = 10000 ; } else if ( total_timeout < 0 ) { total_timeout = 60000 ; } * disconnected = 0 ; remaining_timeout = total_timeout ; while ( ( remaining_timeout > 0 ) && ! ( * disconnected ) ) { crm_trace ( ""waiting<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>remote<S2SV_blank>msg,<S2SV_blank>starting<S2SV_blank>timeout<S2SV_blank>%d,<S2SV_blank>remaining_timeout<S2SV_blank>%d"" , total_timeout , remaining_timeout ) ; ret = crm_recv_remote_ready ( session , encrypted , remaining_timeout ) ; raw_request <S2SV_ModEnd> <S2SV_ModStart> ret == 0 ) { crm_err ( ""poll<S2SV_blank>timed<S2SV_blank>out<S2SV_blank>(%d<S2SV_blank>ms)<S2SV_blank>while<S2SV_blank>waiting<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>msg"" , remaining_timeout ) ; return FALSE ; } else if ( ret < 0 ) { if ( errno != EINTR ) { crm_debug ( ""poll<S2SV_blank>returned<S2SV_blank>error<S2SV_blank>while<S2SV_blank>waiting<S2SV_blank>for<S2SV_blank>msg,<S2SV_blank>rc:<S2SV_blank>%d,<S2SV_blank>errno:<S2SV_blank>%d"" , ret , errno ) ; * disconnected = 1 ; return FALSE ; } crm_debug ( ""poll<S2SV_blank>EINTR<S2SV_blank>encountered<S2SV_blank>during<S2SV_blank>poll,<S2SV_blank>retrying"" ) ; } else { raw_request = crm_recv_remote_raw ( session , encrypted , 0 , & request_len , disconnected ) ; } remaining_timeout = remaining_timeout - ( ( time ( NULL ) - start ) * 1000 ) ; if ( ! raw_request ) { crm_debug ( ""Empty<S2SV_blank>msg<S2SV_blank>received<S2SV_blank>after<S2SV_blank>poll"" ) ; continue ; } if ( * recv_buf ) { int old_len = strlen ( * recv_buf ) ; crm_trace ( ""Expanding<S2SV_blank>recv<S2SV_blank>buffer<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d"" , old_len , old_len + request_len ) ; * recv_buf = realloc ( * recv_buf , old_len + request_len + 1 ) ; memcpy ( * recv_buf + old_len , raw_request , request_len ) ; * ( * recv_buf + old_len + request_len ) = '\\0' ; free ( raw_request ) ; } else { * recv_buf = raw_request ; } if ( strstr ( * recv_buf , REMOTE_MSG_TERMINATOR ) ) { return TRUE ; } } return FALSE <S2SV_ModEnd> "
114,"<S2SV_StartBug> int r , len , group = 0 ; <S2SV_EndBug> <S2SV_StartBug> Node * * tp ; <S2SV_EndBug> <S2SV_StartBug> goto end_of_token ; <S2SV_EndBug> <S2SV_StartBug> qn = node_new_quantifier ( tok -> u . repeat . lower , tok -> u . repeat . upper , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; unsigned int parse_depth ; group = 0 <S2SV_ModStart> ; parse_depth = env -> parse_depth <S2SV_ModStart> parse_depth ++ ; if ( parse_depth > ParseDepthLimit ) return ONIGERR_PARSE_DEPTH_LIMIT_OVER ; 
115,"<S2SV_StartBug> if ( ! ND_TTEST2 ( * ar_tpa ( ap ) , PROTO_LEN ( ap ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""who-has<S2SV_blank>%s"" , ipaddr_string ( ndo , TPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>tell<S2SV_blank>%s"" , ipaddr_string ( ndo , SPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%s<S2SV_blank>is-at<S2SV_blank>%s"" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%s<S2SV_blank>at<S2SV_blank>%s"" , <S2SV_EndBug> <S2SV_StartBug> linkaddr_string ( ndo , THA ( ap ) , linkaddr , HRD_LEN ( ap ) ) , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%s<S2SV_blank>at<S2SV_blank>%s"" , <S2SV_EndBug> <S2SV_StartBug> linkaddr_string ( ndo , SHA ( ap ) , linkaddr , HRD_LEN ( ap ) ) , <S2SV_EndBug> ","<S2SV_ModStart> TPA <S2SV_ModEnd> <S2SV_ModStart> ""who-has<S2SV_blank>"" ) ) ; tpaddr_print_ip ( ndo , ap , pro <S2SV_ModEnd> <S2SV_ModStart> ""<S2SV_blank>tell<S2SV_blank>"" ) ) ; spaddr_print_ip ( ndo , ap , pro <S2SV_ModEnd> <S2SV_ModStart> spaddr_print_ip ( ndo , ap , pro ) ; ND_PRINT ( ( ndo , ""<S2SV_blank>is-at<S2SV_blank>%s"" <S2SV_ModEnd> <S2SV_ModStart> ""%s<S2SV_blank>at<S2SV_blank>"" <S2SV_ModEnd> <S2SV_ModStart> ) ) ; tpaddr_print_ip ( ndo , ap , pro <S2SV_ModEnd> <S2SV_ModStart> ""%s<S2SV_blank>at<S2SV_blank>"" <S2SV_ModEnd> <S2SV_ModStart> ) ) ; spaddr_print_ip ( ndo , ap , pro <S2SV_ModEnd> "
116,<S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( image -> number_meta_channels > MaxPixelChannels ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; "
117,<S2SV_StartBug> if ( ! EXT4_SB ( inode -> i_sb ) -> s_journal ) <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) && ! ( EXT4_SB ( inode -> i_sb ) -> s_mount_state & EXT4_ORPHAN_FS ) 
118,<S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug> ,"<S2SV_ModStart> buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.W64<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } "
119,"<S2SV_StartBug> if ( ! proc_parse_options ( options , ns ) ) { <S2SV_EndBug> ",<S2SV_ModStart> sb -> s_stack_depth = FILESYSTEM_MAX_STACK_DEPTH ; 
120,<S2SV_StartBug> SSL_USE_ETM ( s ) ) ) { <S2SV_EndBug> ,<S2SV_ModStart> s -> tlsext_use_etm <S2SV_ModEnd> 
121,<S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug> ,<S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> 
122,"<S2SV_StartBug> skb = skb_recv_datagram ( sk , flags , noblock , & err ) ; <S2SV_EndBug> <S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ",<S2SV_ModStart> msg -> msg_namelen = 0 ; <S2SV_ModStart>  <S2SV_ModEnd> 
123,"<S2SV_StartBug> static bool tailmatch ( const char * little , const char * bigone ) <S2SV_EndBug> <S2SV_StartBug> size_t littlelen = strlen ( little ) ; <S2SV_EndBug> <S2SV_StartBug> size_t biglen = strlen ( bigone ) ; <S2SV_EndBug> <S2SV_StartBug> if ( littlelen > biglen ) <S2SV_EndBug> <S2SV_StartBug> return Curl_raw_equal ( little , bigone + biglen - littlelen ) ? TRUE : FALSE ; <S2SV_EndBug> ","<S2SV_ModStart> cooke_domain <S2SV_ModEnd> <S2SV_ModStart> hostname <S2SV_ModEnd> <S2SV_ModStart> cookie_domain_len <S2SV_ModEnd> <S2SV_ModStart> cooke_domain <S2SV_ModEnd> <S2SV_ModStart> hostname_len <S2SV_ModEnd> <S2SV_ModStart> hostname <S2SV_ModEnd> <S2SV_ModStart> hostname_len < cookie_domain_len <S2SV_ModEnd> <S2SV_ModStart> if ( ! Curl_raw_equal ( cooke_domain , hostname + hostname_len - cookie_domain_len ) ) return FALSE ; if ( hostname_len == cookie_domain_len ) return TRUE ; if ( '.' == * ( hostname + hostname_len - cookie_domain_len - 1 ) ) return TRUE ; return <S2SV_ModEnd> "
124,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> seg -> update_map = 0 ; seg -> update_data = 0 ; 
125,<S2SV_StartBug> for ( i = scm -> fp -> count - 1 ; i >= 0 ; i -- ) { <S2SV_EndBug> <S2SV_StartBug> if ( unix_sock_count ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( too_many_unix_fds ( current ) ) return - ETOOMANYREFS ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
126,<S2SV_StartBug> if ( ! ( ( pi -> y % ( OPJ_INT32 ) ( comp -> dy << rpy ) == 0 ) || ( ( pi -> y == pi -> ty0 ) && <S2SV_EndBug> ,<S2SV_ModStart> rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx ) != comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy ) != comp -> dy ) { continue ; } if ( 
127,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> source -> id = 0 ; 
128,<S2SV_StartBug> if ( user -> uid_keyring ) { <S2SV_EndBug> ,<S2SV_ModStart> && user -> session_keyring 
129,<S2SV_StartBug> for ( i = 0 ; mechbuf [ i ] ; i ++ ) mechbuf [ i ] = tolower ( mechbuf [ i ] ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; log_debug ( ZONE , ""sx<S2SV_blank>sasl<S2SV_blank>callback:<S2SV_blank>check<S2SV_blank>mech<S2SV_blank>(mech=%s)"" , mechbuf "
130,"<S2SV_StartBug> static void __evtchn_fifo_handle_events ( unsigned cpu , bool drop ) <S2SV_EndBug> <S2SV_StartBug> consume_one_event ( cpu , control_block , q , & ready , drop ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct evtchn_loop_ctrl * ctrl <S2SV_ModEnd> <S2SV_ModStart> ctrl , <S2SV_ModStart>  <S2SV_ModEnd> "
131,"<S2SV_StartBug> if ( spwd && spwd -> sp_expire > 0 && <S2SV_EndBug> <S2SV_StartBug> ( request -> timestamp / 86400 ) > spwd -> sp_expire ) { <S2SV_EndBug> <S2SV_StartBug> radlog_request ( L_AUTH , 0 , request , ""[%s]:<S2SV_blank>password<S2SV_blank>has<S2SV_blank>expired"" , name ) ; <S2SV_EndBug> ","<S2SV_ModStart> sp_lstchg > 0 && spwd -> sp_max >= <S2SV_ModEnd> <S2SV_ModStart> ( spwd -> sp_lstchg + spwd -> sp_max ) ) { radlog_request ( L_AUTH , 0 , request , ""[%s]:<S2SV_blank>password<S2SV_blank>has<S2SV_blank>expired"" , name ) ; return RLM_MODULE_REJECT ; } if ( spwd && <S2SV_ModStart> > 0 && ( request -> timestamp / 86400 ) > spwd -> sp_expire <S2SV_ModStart> ""[%s]:<S2SV_blank>account<S2SV_blank>has<S2SV_blank>expired"" <S2SV_ModEnd> "
132,<S2SV_StartBug> dev -> netdev_ops = & ieee80211_dataif_ops ; <S2SV_EndBug> ,<S2SV_ModStart> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> 
133,"<S2SV_StartBug> case 'l' : RBININFO ( ""libs"" , R_CORE_BIN_ACC_LIBS , NULL , obj ? r_list_length ( obj -> libs ) : 0 ) ; break ; <S2SV_EndBug> <S2SV_StartBug> case 'i' : RBININFO ( ""imports"" , R_CORE_BIN_ACC_IMPORTS , NULL , obj ? r_list_length ( obj -> imports ) : 0 ) ; break ; <S2SV_EndBug> ",<S2SV_ModStart> { RBinObject * obj = r_bin_cur_object ( core -> bin ) ; <S2SV_ModStart> } <S2SV_ModStart> { RBinObject * obj = r_bin_cur_object ( core -> bin ) ; <S2SV_ModStart> } 
134,"<S2SV_StartBug> uint8_t i ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Priority:<S2SV_blank>%d,<S2SV_blank>RES:<S2SV_blank>%d,<S2SV_blank>Sel:<S2SV_blank>%d"" , <S2SV_EndBug> <S2SV_StartBug> tval >> 5 , ( tval >> 3 ) & 0x03 , ( tval & 0x07 ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> u_int <S2SV_ModEnd> <S2SV_ModStart> ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>RES:<S2SV_blank>%u,<S2SV_blank>Sel:<S2SV_blank>%u,<S2SV_blank>Protocol<S2SV_blank>ID:<S2SV_blank>%u"" <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> "
135,"<S2SV_StartBug> futex_wait_queue_me ( hb , & q , to ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( match_futex ( & q . key , & key2 ) ) { ret = - EINVAL ; goto out_put_keys ; } "
136,<S2SV_StartBug> if ( ( e -> target_offset == sizeof ( struct ipt_entry ) && <S2SV_EndBug> <S2SV_StartBug> t -> verdict < 0 && unconditional ( & e -> ip ) ) || <S2SV_EndBug> ,<S2SV_ModStart> unconditional ( e <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
137,"<S2SV_StartBug> struct { <S2SV_EndBug> <S2SV_StartBug> if ( ip_options_echo ( & replyopts . opt , skb ) ) <S2SV_EndBug> <S2SV_StartBug> if ( replyopts . opt . optlen ) { <S2SV_EndBug> <S2SV_StartBug> if ( ipc . opt -> srr ) <S2SV_EndBug> <S2SV_StartBug> daddr = replyopts . opt . faddr ; <S2SV_EndBug> ",<S2SV_ModStart> ip_options_data <S2SV_ModEnd> <S2SV_ModStart> . opt <S2SV_ModStart> opt . <S2SV_ModStart> replyopts . opt . opt . <S2SV_ModEnd> <S2SV_ModStart> . opt 
138,<S2SV_StartBug> struct svc_rqst * rqstp = vrqstp ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> ; struct net * net = & init_net ; struct lockd_net * ln = net_generic ( net , lockd_net_id ) <S2SV_ModStart> cancel_delayed_work_sync ( & ln -> grace_period_end ) ; locks_end_grace ( & ln -> lockd_manager ) ; "
139,"<S2SV_StartBug> ( ep < ep2 ) ? ep : ep2 , map , nmap ) ; <S2SV_EndBug> ","<S2SV_ModStart> ep2 <S2SV_ModEnd> <S2SV_ModStart> if ( cp == NULL ) { ND_PRINT ( ( ndo , "")"" ) ) ; goto trunc ; } "
140,"<S2SV_StartBug> # line 94 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 95 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 96 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 97 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 100 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 99 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 98 ""hex_grammar.y"" <S2SV_EndBug> ","<S2SV_ModStart> 101 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1030 <S2SV_ModEnd> <S2SV_ModStart> 102 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1036 <S2SV_ModEnd> <S2SV_ModStart> 103 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1042 <S2SV_ModEnd> <S2SV_ModStart> 104 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1048 <S2SV_ModEnd> <S2SV_ModStart> 107 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1054 <S2SV_ModEnd> <S2SV_ModStart> 106 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1060 <S2SV_ModEnd> <S2SV_ModStart> 105 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1066 <S2SV_ModEnd> "
141,<S2SV_StartBug> pch -> chan_net = net ; <S2SV_EndBug> ,<S2SV_ModStart> get_net ( net ) <S2SV_ModEnd> 
142,<S2SV_StartBug> image -> columns = ( size_t ) ( metrics . width + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> columns = ( size_t ) ( metrics . width + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> columns = ( size_t ) ( draw_info -> pointsize + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> rows = ( size_t ) ( metrics . ascent - metrics . descent + <S2SV_EndBug> <S2SV_StartBug> image -> rows = ( size_t ) ( draw_info -> pointsize + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> ,<S2SV_ModStart> floor <S2SV_ModStart> floor <S2SV_ModStart> floor <S2SV_ModStart> floor <S2SV_ModStart> floor 
143,<S2SV_StartBug> offset = saio -> offsets [ 0 ] + moof_offset ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < gf_list_count ( traf -> sai_sizes ) ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( saio -> offsets && saio -> entry_count ) { <S2SV_ModStart> saio = NULL ; } <S2SV_ModStart> saiz = NULL ; 
144,<S2SV_StartBug> int target = rc -> av_per_frame_bandwidth ; <S2SV_EndBug> <S2SV_StartBug> ( cm -> frame_flags & FRAMEFLAGS_KEY ) || <S2SV_EndBug> <S2SV_StartBug> cpi -> key_frame_frequency == 0 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> pass == 0 && cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) { <S2SV_EndBug> ,"<S2SV_ModStart> avg_frame_bandwidth ; const int layer = LAYER_IDS_TO_IDX ( cpi -> svc . spatial_layer_id , cpi -> svc . temporal_layer_id , cpi -> svc . number_temporal_layers ) <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> oxcf . key_freq <S2SV_ModEnd> <S2SV_ModStart> is_two_pass_svc ( cpi ) ) { cpi -> svc . layer_context [ layer ] . is_key_frame = 1 ; cpi -> ref_frame_flags &= ( ~ VP9_LAST_FLAG & ~ VP9_GOLD_FLAG & ~ VP9_ALT_FLAG ) ; } else if ( is_one_pass_cbr_svc ( cpi ) ) { cpi -> svc . layer_context [ layer ] . is_key_frame = 1 ; reset_temporal_layer_to_zero ( cpi ) ; cpi -> ref_frame_flags &= ( ~ VP9_LAST_FLAG & ~ VP9_GOLD_FLAG & ~ VP9_ALT_FLAG ) ; target = calc_iframe_target_size_one_pass_cbr ( cpi ) ; } } else { cm -> frame_type = INTER_FRAME ; if ( is_two_pass_svc ( cpi ) ) { LAYER_CONTEXT * lc = & cpi -> svc . layer_context [ layer ] ; if ( cpi -> svc . spatial_layer_id == 0 ) { lc -> is_key_frame = 0 ; } else { lc -> is_key_frame = cpi -> svc . layer_context [ cpi -> svc . temporal_layer_id ] . is_key_frame ; if ( lc -> is_key_frame ) cpi -> ref_frame_flags &= ( ~ VP9_LAST_FLAG ) ; } cpi -> ref_frame_flags &= ( ~ VP9_ALT_FLAG ) ; } else if ( is_one_pass_cbr_svc ( cpi ) ) { LAYER_CONTEXT * lc = & cpi -> svc . layer_context [ layer ] ; if ( cpi -> svc . spatial_layer_id == 0 ) { lc -> is_key_frame = 0 ; } else { lc -> is_key_frame = cpi -> svc . layer_context [ cpi -> svc . temporal_layer_id ] . is_key_frame ; } target = calc_pframe_target_size_one_pass_cbr ( cpi ) ; } } if ( <S2SV_ModEnd> <S2SV_ModStart> aq_mode == CYCLIC_REFRESH_AQ ) vp9_cyclic_refresh_update_parameters ( cpi ) ; <S2SV_ModEnd> "
145,"<S2SV_StartBug> if ( used_address && used_address -> name_len == msg_sys -> msg_namelen && <S2SV_EndBug> <S2SV_StartBug> ! memcmp ( & used_address -> name , msg -> msg_name , <S2SV_EndBug> <S2SV_StartBug> memcpy ( & used_address -> name , msg -> msg_name , <S2SV_EndBug> ",<S2SV_ModStart> msg_sys -> msg_name && <S2SV_ModStart> msg_sys <S2SV_ModEnd> <S2SV_ModStart> if ( msg_sys -> msg_name ) <S2SV_ModStart> msg_sys <S2SV_ModEnd> 
146,"<S2SV_StartBug> static void read_mv_probs ( nmv_context * ctx , int allow_hp , vp9_reader * r ) { <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> 
147,"<S2SV_StartBug> commonlen = COMPUTESIZE ( state . num , state . sumlen ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( LTXTQUERY_TOO_BIG ( state . num , state . sumlen ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""ltxtquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large"" ) ) ) ; "
148,"<S2SV_StartBug> send ( uipc_main . signal_fds [ 1 ] , & sig_on , sizeof ( sig_on ) , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
149,<S2SV_StartBug> * ( buf + insertpos ) = x2c ( & buf [ editpos + 3 ] ) ; <S2SV_EndBug> ,<S2SV_ModStart> _x2c <S2SV_ModEnd> 
150,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> case RMT_NONE : break ; 
151,"<S2SV_StartBug> static void nonrd_pick_partition ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int mi_col , BLOCK_SIZE bsize , int * rate , <S2SV_EndBug> <S2SV_StartBug> int64_t * dist , int do_recon , int64_t best_rd ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> PICK_MODE_CONTEXT * ctx = get_block_context ( x , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> BLOCK_SIZE subsize ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize < BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> x -> in_active_map = check_active_map ( cpi , x , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> partition_none_allowed &= ( bsize <= cpi -> sf . max_partition_size && <S2SV_EndBug> <S2SV_StartBug> bsize >= cpi -> sf . min_partition_size ) ; <S2SV_EndBug> <S2SV_StartBug> partition_horz_allowed &= ( ( bsize <= cpi -> sf . max_partition_size && <S2SV_EndBug> <S2SV_StartBug> bsize > cpi -> sf . min_partition_size ) || <S2SV_EndBug> <S2SV_StartBug> partition_vert_allowed &= ( ( bsize <= cpi -> sf . max_partition_size && <S2SV_EndBug> <S2SV_StartBug> bsize > cpi -> sf . min_partition_size ) || <S2SV_EndBug> <S2SV_StartBug> do_split &= bsize > cpi -> sf . min_partition_size ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> in_active_map && ( partition_horz_allowed || partition_vert_allowed ) ) <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_sb_modes ( cpi , tile , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> & this_rate , & this_dist , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( this_rate != INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> this_rate += x -> partition_cost [ pl ] [ PARTITION_NONE ] ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , this_rate , this_dist ) ; <S2SV_EndBug> <S2SV_StartBug> int64_t stop_thresh = 4096 ; <S2SV_EndBug> <S2SV_StartBug> stop_thresh_rd = RDCOST ( x -> rdmult , x -> rddiv , 0 , stop_thresh ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> e_mbd . lossless && best_rd < stop_thresh_rd ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> in_active_map ) { <S2SV_EndBug> <S2SV_StartBug> sum_rate += x -> partition_cost [ pl ] [ PARTITION_SPLIT ] ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 4 && sum_rd < best_rd ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = i ; <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_partition ( cpi , tile , tp , mi_row + y_idx , mi_col + x_idx , <S2SV_EndBug> <S2SV_StartBug> subsize , & this_rate , & this_dist , 0 , <S2SV_EndBug> <S2SV_StartBug> sum_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> sum_rate += this_rate ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . less_rectangular_check ) <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , sum_rate , sum_dist ) ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 1 ; <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_sb_modes ( cpi , tile , mi_row + ms , mi_col , <S2SV_EndBug> <S2SV_StartBug> & this_rate , & this_dist , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( this_rate == INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> sum_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> this_rate += x -> partition_cost [ pl ] [ PARTITION_HORZ ] ; <S2SV_EndBug> <S2SV_StartBug> sum_rate += this_rate ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , sum_rate , sum_dist ) ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , sum_rate , sum_dist ) ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 1 ; <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_sb_modes ( cpi , tile , mi_row , mi_col + ms , <S2SV_EndBug> <S2SV_StartBug> & this_rate , & this_dist , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( this_rate == INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> sum_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> this_rate += x -> partition_cost [ pl ] [ PARTITION_VERT ] ; <S2SV_EndBug> <S2SV_StartBug> sum_rate += this_rate ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , sum_rate , sum_dist ) ; <S2SV_EndBug> <S2SV_StartBug> if ( best_rate == INT_MAX ) <S2SV_EndBug> <S2SV_StartBug> * ( get_sb_partitioning ( x , bsize ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( best_rate < INT_MAX && best_dist < INT64_MAX && do_recon ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( cpi -> oxcf . aq_mode == COMPLEXITY_AQ ) && cm -> seg . update_map ) { <S2SV_EndBug> <S2SV_StartBug> best_rate ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize == BLOCK_64X64 ) { <S2SV_EndBug> <S2SV_StartBug> assert ( best_rate < INT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( best_dist < INT64_MAX ) ; <S2SV_EndBug> ","<S2SV_ModStart> ThreadData * td , TileDataEnc * tile_data <S2SV_ModEnd> <S2SV_ModStart> RD_COST * rd_cost , <S2SV_ModEnd> <S2SV_ModStart> , PC_TREE * pc_tree ) { const SPEED_FEATURES * const sf = & cpi -> sf ; <S2SV_ModEnd> <S2SV_ModStart> TileInfo * const tile_info = & tile_data -> tile_info ; <S2SV_ModStart> td <S2SV_ModEnd> <S2SV_ModStart> & pc_tree -> none <S2SV_ModEnd> <S2SV_ModStart> = bsize ; RD_COST this_rdc , sum_rdc , best_rdc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vp9_rd_cost_init ( & sum_rdc ) ; vp9_rd_cost_reset ( & best_rdc ) ; best_rdc . rdcost = best_rd ; if ( sf -> <S2SV_ModEnd> <S2SV_ModStart> x -> <S2SV_ModEnd> <S2SV_ModStart> x -> <S2SV_ModEnd> <S2SV_ModStart> x -> <S2SV_ModEnd> <S2SV_ModStart> x -> <S2SV_ModEnd> <S2SV_ModStart> x -> <S2SV_ModEnd> <S2SV_ModStart> x -> <S2SV_ModEnd> <S2SV_ModStart> x -> min_partition_size ; } if ( sf -> <S2SV_ModEnd> <S2SV_ModStart> ctx -> pred_pixel_ready = ! ( partition_vert_allowed || partition_horz_allowed || do_split ) <S2SV_ModEnd> <S2SV_ModStart> tile_data , x <S2SV_ModEnd> <S2SV_ModStart> this_rdc , bsize , ctx ) ; ctx <S2SV_ModEnd> <S2SV_ModStart> ctx -> mbmi_ext = * x -> mbmi_ext ; ctx -> skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; ctx -> skip = x -> skip ; if ( this_rdc . rate <S2SV_ModEnd> <S2SV_ModStart> this_rdc . rate += cpi <S2SV_ModEnd> <S2SV_ModStart> this_rdc . rdcost <S2SV_ModEnd> <S2SV_ModStart> this_rdc . rate , this_rdc . dist ) ; if ( this_rdc . rdcost < best_rdc . rdcost <S2SV_ModEnd> <S2SV_ModStart> dist_breakout_thr = sf -> partition_search_breakout_dist_thr ; int64_t rate_breakout_thr = sf -> partition_search_breakout_rate_thr ; dist_breakout_thr <S2SV_ModEnd> <S2SV_ModStart> rate_breakout_thr *= num_pels_log2_lookup [ bsize ] ; best_rdc = this_rdc ; if ( bsize >= BLOCK_8X8 ) pc_tree -> partitioning = PARTITION_NONE <S2SV_ModEnd> <S2SV_ModStart> this_rdc . rate < rate_breakout_thr && this_rdc . dist < dist_breakout_thr <S2SV_ModEnd> <S2SV_ModStart> } store_pred_mv ( x , ctx ) ; if ( do_split <S2SV_ModEnd> <S2SV_ModStart> sum_rdc . rate += cpi <S2SV_ModEnd> <S2SV_ModStart> ; sum_rdc . rdcost = RDCOST ( x -> rdmult , x -> rddiv , sum_rdc . rate , sum_rdc . dist ) <S2SV_ModStart> sum_rdc . rdcost < best_rdc . rdcost <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> td , tile_data <S2SV_ModEnd> <S2SV_ModStart> this_rdc , 0 , best_rdc . rdcost - sum_rdc . rdcost , pc_tree -> split [ i ] ) ; if ( this_rdc . rate <S2SV_ModEnd> <S2SV_ModStart> vp9_rd_cost_reset ( & sum_rdc ) <S2SV_ModEnd> <S2SV_ModStart> sum_rdc . rate += this_rdc . rate ; sum_rdc . dist += this_rdc . dist ; sum_rdc . rdcost += this_rdc . rdcost ; } } if ( sum_rdc . rdcost < best_rdc . rdcost ) { best_rdc = sum_rdc ; pc_tree -> partitioning = PARTITION_SPLIT <S2SV_ModEnd> <S2SV_ModStart> sf -> <S2SV_ModEnd> <S2SV_ModStart> if ( sf -> adaptive_motion_search ) load_pred_mv ( x , ctx ) ; pc_tree -> horizontal [ 0 ] . pred_pixel_ready = 1 ; nonrd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & sum_rdc , subsize , & pc_tree -> horizontal [ 0 ] ) ; pc_tree -> horizontal [ 0 ] . <S2SV_ModEnd> <S2SV_ModStart> pc_tree -> horizontal [ 0 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> horizontal [ 0 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> horizontal [ 0 ] . skip = x -> skip ; if ( sum_rdc . rdcost < best_rdc . rdcost <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pc_tree -> horizontal [ 1 ] . pred_pixel_ready = 1 ; <S2SV_ModStart> tile_data , x <S2SV_ModEnd> <S2SV_ModStart> this_rdc , subsize , & pc_tree -> horizontal [ 1 ] ) ; pc_tree -> horizontal [ 1 ] . <S2SV_ModEnd> <S2SV_ModStart> pc_tree -> horizontal [ 1 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> horizontal [ 1 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> horizontal [ 1 ] . skip = x -> skip ; if ( this_rdc . rate <S2SV_ModEnd> <S2SV_ModStart> vp9_rd_cost_reset ( & sum_rdc ) <S2SV_ModEnd> <S2SV_ModStart> this_rdc . rate += cpi <S2SV_ModEnd> <S2SV_ModStart> sum_rdc . rate += this_rdc . rate ; sum_rdc . dist += this_rdc . dist ; sum_rdc . rdcost <S2SV_ModEnd> <S2SV_ModStart> sum_rdc . rate , sum_rdc . dist ) ; } } if ( sum_rdc . rdcost < best_rdc . rdcost ) { best_rdc = sum_rdc ; pc_tree -> partitioning = PARTITION_HORZ ; } else { pred_pixel_ready_reset ( pc_tree , bsize ) <S2SV_ModEnd> <S2SV_ModStart> if ( sf -> adaptive_motion_search ) load_pred_mv ( x , ctx ) ; pc_tree -> vertical [ 0 ] . pred_pixel_ready = 1 ; nonrd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & sum_rdc , subsize , & pc_tree -> vertical [ 0 ] ) ; pc_tree -> vertical [ 0 ] . <S2SV_ModEnd> <S2SV_ModStart> pc_tree -> vertical [ 0 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> vertical [ 0 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> vertical [ 0 ] . skip = x -> skip ; if ( sum_rdc . rdcost < best_rdc . rdcost <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pc_tree -> vertical [ 1 ] . pred_pixel_ready = 1 ; <S2SV_ModStart> tile_data , x <S2SV_ModEnd> <S2SV_ModStart> this_rdc , subsize , & pc_tree -> vertical [ 1 ] ) ; pc_tree -> vertical [ 1 ] . <S2SV_ModEnd> <S2SV_ModStart> pc_tree -> vertical [ 1 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> vertical [ 1 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> vertical [ 1 ] . skip = x -> skip ; if ( this_rdc . rate <S2SV_ModEnd> <S2SV_ModStart> vp9_rd_cost_reset ( & sum_rdc ) <S2SV_ModEnd> <S2SV_ModStart> sum_rdc . rate += cpi <S2SV_ModEnd> <S2SV_ModStart> sum_rdc . rate += this_rdc . rate ; sum_rdc . dist += this_rdc . dist ; sum_rdc . rdcost <S2SV_ModEnd> <S2SV_ModStart> sum_rdc . rate , sum_rdc . dist ) ; } } if ( sum_rdc . rdcost < best_rdc . rdcost ) { best_rdc = sum_rdc ; pc_tree -> partitioning = PARTITION_VERT ; } else { pred_pixel_ready_reset ( pc_tree , bsize ) ; } } * rd_cost = best_rdc ; if ( best_rdc . rate <S2SV_ModEnd> <S2SV_ModStart> { vp9_rd_cost_reset ( rd_cost ) ; return ; } <S2SV_ModEnd> <S2SV_ModStart> pc_tree ) ; if ( best_rdc . rate <S2SV_ModEnd> <S2SV_ModStart> best_rdc . dist <S2SV_ModEnd> <S2SV_ModStart> encode_sb_rt ( cpi , td , tile_info , tp <S2SV_ModEnd> <S2SV_ModStart> bsize , pc_tree <S2SV_ModEnd> <S2SV_ModStart> && do_recon <S2SV_ModStart> best_rdc . rate <S2SV_ModEnd> <S2SV_ModStart> best_rdc . dist <S2SV_ModEnd> "
152,"<S2SV_StartBug> if ( ! ND_TTEST2 ( * tptr , 1 ) ) <S2SV_EndBug> ",<S2SV_ModStart> 2 <S2SV_ModEnd> 
153,"<S2SV_StartBug> static int scsi_disk_emulate_command ( SCSIDiskReq * r , uint8_t * outbuf ) <S2SV_EndBug> ","<S2SV_ModStart> ) { SCSIRequest * req = & r -> req ; SCSIDiskState * s = DO_UPCAST ( SCSIDiskState , qdev , req -> dev ) ; uint64_t nb_sectors ; <S2SV_ModEnd> <S2SV_ModStart> ; int buflen = 0 ; if ( ! r -> iov . iov_base ) { if ( req -> cmd . xfer > 65536 ) { goto illegal_request ; } r -> buflen = MAX ( 4096 , req -> cmd . xfer ) ; r -> iov . iov_base = qemu_blockalign ( s -> bs , r -> buflen ) ; } outbuf = r -> iov . iov_base <S2SV_ModEnd> "
154,<S2SV_StartBug> __enable_irq ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> FLASH -> CR |= FLASH_CR_OBL_LAUNCH ; while ( true <S2SV_ModEnd> 
155,<S2SV_StartBug> size_t val_len ; <S2SV_EndBug> ,<S2SV_ModStart> = 0 
156,"<S2SV_StartBug> pipe_buf_get ( ipipe , ibuf ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! <S2SV_ModStart> ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> 
157,<S2SV_StartBug> addr -> sap_family = AF_ATMPVC ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( addr , 0 , sizeof ( * addr ) ) ; "
158,<S2SV_StartBug> else <S2SV_EndBug> ,"<S2SV_ModStart> else if ( strcmp ( filetype [ i ] . ext , "".SVG"" ) == 0 ) { rsprintf ( ""Content-Type:<S2SV_blank>%s\\r\\n"" , filetype [ i ] . type ) ; if ( strrchr ( file_name , '/' ) ) strlcpy ( str , strrchr ( file_name , '/' ) + 1 , sizeof ( str ) ) ; else strlcpy ( str , file_name , sizeof ( str ) ) ; if ( str [ 6 ] == '_' && str [ 13 ] == '_' ) rsprintf ( ""Content-Disposition:<S2SV_blank>attachment;<S2SV_blank>filename=\\""%s\\""\\r\\n"" , str + 14 ) ; else rsprintf ( ""Content-Disposition:<S2SV_blank>attachment;<S2SV_blank>filename=\\""%s\\""\\r\\n"" , str ) ; } "
159,<S2SV_StartBug> return ret ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ci -> platdata -> flags & CI13XXX_DISABLE_STREAMING ) hw_write ( ci , OP_USBMODE , USBMODE_CI_SDIS , USBMODE_CI_SDIS ) ; "
160,<S2SV_StartBug> long elements ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( * p >= max - 2 ) { zend_error ( E_WARNING , ""Bad<S2SV_blank>unserialize<S2SV_blank>data"" ) ; return - 1 ; } <S2SV_ModStart> - 1 <S2SV_ModEnd> "
161,<S2SV_StartBug> token ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too<S2SV_blank>many<S2SV_blank>operands\\n"" ) ; return false "
162,<S2SV_StartBug> void impeg2d_dec_p_mb_params ( dec_state_t * ps_dec ) <S2SV_EndBug> <S2SV_StartBug> ps_dec_mb_params -> pf_func_mb_params ( ps_dec ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> WORD32 <S2SV_ModEnd> <S2SV_ModStart> if ( NULL == ps_dec_mb_params -> pf_func_mb_params ) return - 1 ; <S2SV_ModStart> return 0 ; 
163,<S2SV_StartBug> int row8x8_remaining = tile -> mi_row_end - mi_row ; <S2SV_EndBug> <S2SV_StartBug> int col8x8_remaining = tile -> mi_col_end - mi_col ; <S2SV_EndBug> <S2SV_StartBug> for ( block_row = 0 ; block_row < MI_BLOCK_SIZE ; block_row += bh ) { <S2SV_EndBug> ,"<S2SV_ModStart> const <S2SV_ModStart> const <S2SV_ModStart> set_partial_b64x64_partition ( mi_upper_left , mis , bh , bw , row8x8_remaining , col8x8_remaining , bsize , mi_8x8 ) ; <S2SV_ModEnd> "
164,<S2SV_StartBug> if ( info . si_code >= 0 ) <S2SV_EndBug> <S2SV_StartBug> return - EPERM ; <S2SV_EndBug> ,<S2SV_ModStart> != SI_QUEUE ) { WARN_ON_ONCE ( info . si_code < 0 ) ; <S2SV_ModEnd> <S2SV_ModStart> } 
165,<S2SV_StartBug> else if ( verify & GNUTLS_CERT_INVALID ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> } if ( error == NULL ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
166,"<S2SV_StartBug> return ! inode_capable ( inode , CAP_FOWNER ) ; <S2SV_EndBug> ",<S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> 
167,"<S2SV_StartBug> if ( ( opt_len != mp_dss_len ( mdss , 1 ) && <S2SV_EndBug> <S2SV_StartBug> if ( mdss -> flags & MP_DSS_A ) { <S2SV_EndBug> <S2SV_StartBug> if ( mdss -> flags & MP_DSS_a ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%u"" , EXTRACT_32BITS ( opt ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( mdss -> flags & MP_DSS_m ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%u"" , EXTRACT_32BITS ( opt ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>len<S2SV_blank>%u"" , EXTRACT_16BITS ( opt ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_len == mp_dss_len ( mdss , 1 ) ) <S2SV_EndBug> ","<S2SV_ModStart> opt_len < 4 ) return 0 ; if ( <S2SV_ModEnd> <S2SV_ModStart> opt_len -= 4 ; <S2SV_ModStart> if ( opt_len < 8 ) return 0 ; <S2SV_ModStart> opt_len -= 8 ; <S2SV_ModStart> if ( opt_len < 4 ) return 0 ; <S2SV_ModStart> opt_len -= 4 ; <S2SV_ModStart> if ( opt_len < 8 ) return 0 ; <S2SV_ModStart> opt_len -= 8 ; <S2SV_ModStart> if ( opt_len < 4 ) return 0 ; <S2SV_ModStart> opt_len -= 4 ; } if ( opt_len < 4 ) return 0 ; <S2SV_ModEnd> <S2SV_ModStart> opt_len -= 4 ; if ( opt_len < 2 ) return 0 ; <S2SV_ModStart> opt_len -= 2 ; if ( opt_len >= 2 ) { ND_PRINT ( ( ndo , ""<S2SV_blank>csum<S2SV_blank>0x%x"" , EXTRACT_16BITS ( opt ) ) ) ; opt_len -= 2 ; } } if ( opt_len != 0 ) return 0 ; return 1 <S2SV_ModEnd> "
168,"<S2SV_StartBug> fprintf ( fpfile , ""%12.0f<S2SV_blank>%12.0f<S2SV_blank>%12.0f<S2SV_blank>%12.0f<S2SV_blank>%12.0f<S2SV_blank>%12.4f<S2SV_blank>%12.4f"" <S2SV_EndBug> <S2SV_StartBug> stats -> intra_error , <S2SV_EndBug> <S2SV_StartBug> stats -> ssim_weighted_pred_err , <S2SV_EndBug> <S2SV_StartBug> stats -> pcnt_neutral , <S2SV_EndBug> ","<S2SV_ModStart> ""%12.0lf<S2SV_blank>%12.4lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf"" ""%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf"" ""%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.4lf\\n"" <S2SV_ModEnd> <S2SV_ModStart> weight , stats -> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , stats -> intra_skip_pct , stats -> inactive_zone_rows , stats -> inactive_zone_cols "
169,<S2SV_StartBug> int_fb -> in_use = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( int_fb ) 
170,<S2SV_StartBug> inbuf = _TIFFmalloc ( scanlinesizein ) ; <S2SV_EndBug> ,"<S2SV_ModStart> uint16 bps = 0 ; ( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ; if ( bps != 8 ) { TIFFError ( TIFFFileName ( in ) , ""Error,<S2SV_blank>can<S2SV_blank>only<S2SV_blank>handle<S2SV_blank>BitsPerSample=8<S2SV_blank>in<S2SV_blank>%s"" , ""cpSeparate2ContigByRow"" ) ; return 0 ; } "
171,<S2SV_StartBug> if ( skb_headlen ( chunk -> skb ) < sizeof ( sctp_chunkhdr_t ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( chunk -> chunk_end < skb_tail_pointer ( chunk -> skb ) ) { <S2SV_EndBug> <S2SV_StartBug> sctp_chunk_free ( chunk ) ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> + sizeof ( sctp_chunkhdr_t ) <S2SV_ModStart> chunk -> pdiscard = 1 ; chunk -> chunk_end = skb_tail_pointer ( chunk -> skb ) ; } else { chunk -> end_of_packet = 1 ; } pr_debug ( ""+++sctp_inq_pop+++<S2SV_blank>chunk:%p[%s],<S2SV_blank>length:%d,<S2SV_blank>skb->len:%d\\n"" , chunk , sctp_cname ( SCTP_ST_CHUNK ( chunk -> chunk_hdr -> type ) ) , ntohs ( chunk -> chunk_hdr -> length ) , chunk -> skb -> len ) ; return <S2SV_ModEnd> "
172,<S2SV_StartBug> err = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> ds = salg -> digestsize ; <S2SV_EndBug> <S2SV_StartBug> ss = salg -> statesize ; <S2SV_EndBug> ,<S2SV_ModStart> alg = & salg -> base ; <S2SV_ModStart> if ( crypto_shash_alg_has_setkey ( salg ) ) goto out_put_alg ; <S2SV_ModStart>  <S2SV_ModEnd> 
173,"<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horAcc32 ( tif , cp0 , cc ) ; <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return 
174,<S2SV_StartBug> if ( atomic_read ( & kvm -> online_vcpus ) == KVM_MAX_VCPUS ) { <S2SV_EndBug> ,<S2SV_ModStart> ! kvm_vcpu_compatible ( vcpu ) ) { r = - EINVAL ; goto unlock_vcpu_destroy ; } if ( 
175,<S2SV_StartBug> struct cred * cred ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cred ) <S2SV_EndBug> <S2SV_StartBug> return create_user_ns ( cred ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; int err = - ENOMEM <S2SV_ModStart> cred ) { err = create_user_ns ( cred ) ; if ( err ) put_cred ( cred ) ; else <S2SV_ModEnd> <S2SV_ModStart> } return err <S2SV_ModEnd> 
176,<S2SV_StartBug> if ( peer ) { <S2SV_EndBug> ,<S2SV_ModStart> lsa -> l2tp_unused = 0 ; 
177,<S2SV_StartBug> if ( * rsize >= 60 && rdesc [ 39 ] == 0x2a && rdesc [ 40 ] == 0xf5 && <S2SV_EndBug> ,<S2SV_ModStart> 62 <S2SV_ModEnd> 
178,<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt && inet -> opt -> srr ) { <S2SV_EndBug> <S2SV_StartBug> nexthop = inet -> opt -> faddr ; <S2SV_EndBug> <S2SV_StartBug> if ( ! inet -> opt || ! inet -> opt -> srr ) <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt ) <S2SV_EndBug> ,"<S2SV_ModStart> ; struct ip_options_rcu * inet_opt <S2SV_ModStart> inet_opt = rcu_dereference_protected ( inet -> inet_opt , sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> inet_opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> inet_opt || ! inet_opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> inet_opt ) inet_csk ( sk ) -> icsk_ext_hdr_len = inet_opt -> opt . <S2SV_ModEnd> "
179,<S2SV_StartBug> drop_futex_key_refs ( & q -> key ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
180,<S2SV_StartBug> if ( test_tsk_need_resched ( rq -> curr ) ) <S2SV_EndBug> ,<S2SV_ModStart> rq -> curr -> se . on_rq && 
181,<S2SV_StartBug> dh_clnt = EVP_PKEY_get0_DH ( ckey ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ckey == NULL ) { SSLerr ( SSL_F_TLS_CONSTRUCT_CKE_DHE , ERR_R_INTERNAL_ERROR ) ; return 0 ; } "
182,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
183,"<S2SV_StartBug> ! inode_capable ( inode , CAP_FSETID ) ) <S2SV_EndBug> ",<S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> 
184,"<S2SV_StartBug> int offs , int count , int pmgr_flag ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & ( ( char * ) & sysex ) [ offs ] , & ( addr ) [ offs ] , hdr_size - offs ) ) <S2SV_EndBug> <S2SV_StartBug> if ( count < sysex . len ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sysex , addr , hdr_size <S2SV_ModEnd> <S2SV_ModStart> ( unsigned ) count < ( unsigned ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
185,<S2SV_StartBug> mk_vhost_close ( sr ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( sr -> fd_is_fdt == MK_TRUE ) { <S2SV_ModStart> } else { close ( sr -> fd_file ) ; } 
186,<S2SV_StartBug> } else { <S2SV_EndBug> ,<S2SV_ModStart> rdev -> ena_pin = NULL ; return ; 
187,<S2SV_StartBug> int chars_processed ; <S2SV_EndBug> <S2SV_StartBug> int data_size = ndo -> ndo_snapend - bp ; <S2SV_EndBug> <S2SV_StartBug> chars_processed = 1 ; <S2SV_EndBug> <S2SV_StartBug> cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; <S2SV_EndBug> <S2SV_StartBug> chars_processed ++ ; <S2SV_EndBug> <S2SV_StartBug> chars_processed += l ; <S2SV_EndBug> <S2SV_StartBug> chars_processed ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> elt ; u_int offset , max_offset ; if ( ( l = labellen ( ndo , cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ! ND_TTEST2 ( * cp , 1 ) ) return ( NULL ) ; max_offset = ( u_int ) ( cp - bp ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK ) != INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i != 0 ) while ( i && cp < <S2SV_ModEnd> <S2SV_ModStart> ) { if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if ( ! compress ) { rp = cp + 1 ; compress = 1 ; } <S2SV_ModEnd> <S2SV_ModStart> offset = ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( offset >= max_offset ) { ND_PRINT ( ( ndo , ""<BAD<S2SV_blank>PTR>"" ) ) ; return ( NULL ) ; } max_offset = offset ; cp = bp + offset ; if ( ( l = labellen ( ndo , cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
188,<S2SV_StartBug> if ( ! valid_localpart ( maddr -> user ) || <S2SV_EndBug> <S2SV_StartBug> ! valid_domainpart ( maddr -> domain ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> mailfrom && maddr -> user [ 0 ] == '\\0' && maddr -> domain [ 0 ] == '\\0' ) return ( 1 ) ; if ( maddr -> user [ 0 ] == '\\0' || <S2SV_ModStart> ) return ( 0 ) ; if ( maddr -> domain [ 0 ] == '\\0' ) { ( void ) strlcpy ( maddr -> domain , domain , sizeof ( maddr -> domain ) ) ; } if ( <S2SV_ModEnd> <S2SV_ModStart> return ( 0 ) ; <S2SV_ModEnd> "
189,"<S2SV_StartBug> return send ( socket -> fd , buf , count , MSG_DONTWAIT ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
190,"<S2SV_StartBug> static int input_stats ( struct twopass_rc * p , FIRSTPASS_STATS * fps ) { <S2SV_EndBug> ",<S2SV_ModStart> TWO_PASS <S2SV_ModEnd> 
191,<S2SV_StartBug> # ifdef CONFIG_SWAP <S2SV_EndBug> <S2SV_StartBug> * prev = vma ; <S2SV_EndBug> <S2SV_StartBug> * prev = vma ; <S2SV_EndBug> <S2SV_StartBug> * prev = vma ; <S2SV_EndBug> ,<S2SV_ModStart> * prev = vma ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
192,<S2SV_StartBug> if ( image -> debug != MagickFalse ) <S2SV_EndBug> ,"<S2SV_ModStart> EOFBlob ( image ) != MagickFalse ) { layer_info = DestroyLayerInfo ( layer_info , number_layers ) ; ThrowBinaryException ( CorruptImageError , ""InsufficientImageDataInFile"" , image -> filename ) ; } if ( "
193,<S2SV_StartBug> struct static_key * done_key ) <S2SV_EndBug> <S2SV_StartBug> __net_random_once_disable_jump ( done_key ) ; <S2SV_EndBug> ,<S2SV_ModStart> once_key <S2SV_ModEnd> <S2SV_ModStart> once_key <S2SV_ModEnd> 
194,"
","
"
195,"<S2SV_StartBug> unsigned int var = block_variance ( cpi , x , bs ) ; <S2SV_EndBug> ",<S2SV_ModStart> double energy_midpoint ; vpx_clear_system_state ( ) ; energy_midpoint = ( cpi -> oxcf . pass == 2 ) ? cpi -> twopass . mb_av_energy : DEFAULT_E_MIDPOINT ; energy = vp9_log_block_var <S2SV_ModEnd> <S2SV_ModStart> - energy_midpoint <S2SV_ModEnd> 
196,"<S2SV_StartBug> static vpx_codec_err_t ctrl_set_svc_layer_id ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
197,<S2SV_StartBug> srose -> srose_family = AF_ROSE ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( srose , 0 , msg -> msg_namelen ) ; "
198,"<S2SV_StartBug> static int ecryptfs_parse_options ( struct ecryptfs_sb_info * sbi , char * options ) <S2SV_EndBug> <S2SV_StartBug> if ( ! options ) { <S2SV_EndBug> <S2SV_StartBug> case ecryptfs_opt_err : <S2SV_EndBug> ","<S2SV_ModStart> , uid_t * check_ruid <S2SV_ModStart> * check_ruid = 0 ; <S2SV_ModStart> ecryptfs_opt_check_dev_ruid : * check_ruid = 1 ; break ; case "
199,"<S2SV_StartBug> cJSON_AddFloatToObject ( j , ""cpu_util_total"" , test -> cpu_util [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddFloatToObject ( j , ""cpu_util_user"" , test -> cpu_util [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddFloatToObject ( j , ""cpu_util_system"" , test -> cpu_util [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j , ""sender_has_retransmits"" , sender_has_retransmits ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j_stream , ""id"" , sp -> id ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j_stream , ""bytes"" , bytes_transferred ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j_stream , ""retransmits"" , retransmits ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddFloatToObject ( j_stream , ""jitter"" , sp -> jitter ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j_stream , ""errors"" , sp -> cnt_error ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j_stream , ""packets"" , sp -> packet_count ) ; <S2SV_EndBug> ",<S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> <S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> <S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> <S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> <S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> <S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> <S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> <S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> <S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> <S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> 
200,"<S2SV_StartBug> memset ( & rinfo [ val ] , 0 , SZ_SG_REQ_INFO ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
201,<S2SV_StartBug> u32 mode = ( * ( u32 * ) valp ) & PSR_AA32_MODE_MASK ; <S2SV_EndBug> <S2SV_StartBug> case PSR_AA32_MODE_FIQ : <S2SV_EndBug> <S2SV_StartBug> case PSR_MODE_EL0t : <S2SV_EndBug> <S2SV_StartBug> case PSR_MODE_EL1h : <S2SV_EndBug> ,<S2SV_ModStart> u64 <S2SV_ModEnd> <S2SV_ModStart> u64 <S2SV_ModEnd> <S2SV_ModStart> if ( ! system_supports_32bit_el0 ( ) ) return - EINVAL ; break ; <S2SV_ModStart> if ( ! vcpu_el1_is_32bit ( vcpu ) ) return - EINVAL ; break ; <S2SV_ModStart> if ( vcpu_el1_is_32bit ( vcpu ) ) return - EINVAL ; 
202,"<S2SV_StartBug> int64_t tx_cache [ TX_MODES ] , <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE mode ; <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> intra_super_block_yrd ( cpi , x , & this_rate_tokenonly , & this_distortion , <S2SV_EndBug> <S2SV_StartBug> & s , NULL , bsize , local_tx_cache , best_rd ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . tx_size_search_method == USE_FULL_RD && this_rd < INT64_MAX ) { <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> PREDICTION_MODE mode ; PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> * bmode_costs ; const MODE_INFO * above_mi = xd -> above_mi ; const MODE_INFO * left_mi = xd -> left_mi ; const PREDICTION_MODE A = vp9_above_block_mode ( mic , above_mi , 0 ) ; const PREDICTION_MODE L = vp9_left_block_mode ( mic , left_mi , 0 ) ; bmode_costs = cpi <S2SV_ModEnd> <S2SV_ModStart> memset ( x -> skip_txfm , SKIP_TXFM_NONE , sizeof ( x -> skip_txfm ) ) ; for ( mode = DC_PRED ; mode <= TM_PRED ; mode ++ ) { if ( cpi -> sf . use_nonrd_pick_mode ) { if ( conditional_skipintra ( mode , mode_selected ) ) continue ; if ( * skippable ) break ; <S2SV_ModStart> super_block_yrd <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
203,<S2SV_StartBug> CurrentColorSpace = ColorSpaceOut ; <S2SV_EndBug> <S2SV_StartBug> cmsPipelineFree ( Lut ) ; <S2SV_EndBug> ,<S2SV_ModStart> Lut = NULL ; <S2SV_ModStart> if ( Lut != NULL ) 
204,"<S2SV_StartBug> len = curl_msnprintf ( fptr , left , ""%ld"" , width ) ; <S2SV_EndBug> <S2SV_StartBug> len = curl_msnprintf ( fptr , left , "".%ld"" , prec ) ; <S2SV_EndBug> <S2SV_StartBug> for ( fptr = work ; * fptr ; fptr ++ ) <S2SV_EndBug> ",<S2SV_ModStart> if ( width >= ( long ) sizeof ( work ) ) width = sizeof ( work ) - 1 ; <S2SV_ModStart> size_t maxprec = sizeof ( work ) - 2 ; double val = p -> data . dnum ; while ( val >= 10.0 ) { val /= 10 ; maxprec -- ; } if ( prec > ( long ) maxprec ) prec = maxprec - 1 ; <S2SV_ModStart> # ifdef CURLDEBUG assert ( strlen ( work ) <= sizeof ( work ) ) ; # endif 
205,<S2SV_StartBug> int vert_causal_ctx_csty_symbol = codsty -> cblk_style & JPEG2000_CBLK_VSC ; <S2SV_EndBug> ,<S2SV_ModStart> ; av_assert0 ( width <= JPEG2000_MAX_CBLKW ) ; av_assert0 ( height <= JPEG2000_MAX_CBLKH ) 
206,<S2SV_StartBug> if ( sk -> sk_shutdown & RCV_SHUTDOWN ) { <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> ,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
207,<S2SV_StartBug> CollSeq * p4 ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( pParse -> nErr ) return 0 
208,"<S2SV_StartBug> mc -> id = idr_alloc ( & multicast_idr , mc , 0 , 0 , GFP_KERNEL ) ; <S2SV_EndBug> ",<S2SV_ModStart> NULL <S2SV_ModEnd> 
209,<S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> memset ( p , 0 , sizeof ( * p ) ) ; "
210,<S2SV_StartBug> continue ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( len >= FPM_LOG_BUFFER ) { zlog ( ZLOG_NOTICE , ""the<S2SV_blank>log<S2SV_blank>buffer<S2SV_blank>is<S2SV_blank>full<S2SV_blank>(%d).<S2SV_blank>The<S2SV_blank>access<S2SV_blank>log<S2SV_blank>request<S2SV_blank>has<S2SV_blank>been<S2SV_blank>truncated."" , FPM_LOG_BUFFER ) ; len = FPM_LOG_BUFFER ; break ; } "
211,"<S2SV_StartBug> if ( ! fc_may_access ( fc , controller , path1 , path2 , fi -> flags ) ) { <S2SV_EndBug> ","<S2SV_ModStart> caller_may_see_dir ( fc -> pid , controller , path1 ) ) { ret = - ENOENT ; goto out ; } if ( ! "
212,"<S2SV_StartBug> CYCLIC_REFRESH * vp9_cyclic_refresh_alloc ( int mi_rows , int mi_cols ) { <S2SV_EndBug> <S2SV_StartBug> return cr ; <S2SV_EndBug> ","<S2SV_ModStart> size_t last_coded_q_map_size ; <S2SV_ModStart> last_coded_q_map_size = mi_rows * mi_cols * sizeof ( * cr -> last_coded_q_map ) ; cr -> last_coded_q_map = vpx_malloc ( last_coded_q_map_size ) ; if ( cr -> last_coded_q_map == NULL ) { vpx_free ( cr ) ; return NULL ; } assert ( MAXQ <= 255 ) ; memset ( cr -> last_coded_q_map , MAXQ , last_coded_q_map_size ) ; "
213,"<S2SV_StartBug> dm9000WriteReg ( DM9000_REG_MWCMDX , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> DM9000_INDEX_REG = DM9000_REG_MWCMD ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_TXPLL , LSB ( length ) ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_TXPLH , MSB ( length ) ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_ISR , ISR_PT ) ; <S2SV_EndBug> ","<S2SV_ModStart> DM9000_MWCMDX <S2SV_ModEnd> <S2SV_ModStart> DM9000_MWCMD <S2SV_ModEnd> <S2SV_ModStart> DM9000_TXPLL <S2SV_ModEnd> <S2SV_ModStart> DM9000_TXPLH <S2SV_ModEnd> <S2SV_ModStart> DM9000_ISR , DM9000_ISR_PT ) ; dm9000WriteReg ( DM9000_TCR , DM9000_TCR_TXREQ <S2SV_ModEnd> "
214,<S2SV_StartBug> inbuf = _TIFFmalloc ( scanlinesizein ) ; <S2SV_EndBug> ,"<S2SV_ModStart> uint16 bps = 0 ; ( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ; if ( bps != 8 ) { TIFFError ( TIFFFileName ( in ) , ""Error,<S2SV_blank>can<S2SV_blank>only<S2SV_blank>handle<S2SV_blank>BitsPerSample=8<S2SV_blank>in<S2SV_blank>%s"" , ""cpContig2SeparateByRow"" ) ; return 0 ; } "
215,<S2SV_StartBug> if ( ! SSL_USE_ETM ( s ) && EVP_MD_CTX_md ( s -> read_hash ) != NULL ) <S2SV_EndBug> ,<S2SV_ModStart> SSL_READ_ETM <S2SV_ModEnd> 
216,<S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> if ( vmx_get_cpl ( vcpu ) ) { kvm_queue_exception ( vcpu , UD_VECTOR ) ; return 0 ; } "
217,"<S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> err = ip6_xmit ( sk , skb , & fl6 , np -> opt , np -> tclass ) ; <S2SV_EndBug> ","<S2SV_ModStart> rcu_read_lock ( ) ; <S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) <S2SV_ModStart> ) ; rcu_read_unlock ( <S2SV_ModStart> rcu_read_lock ( ) ; <S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) , <S2SV_ModEnd> <S2SV_ModStart> ) ; rcu_read_unlock ( "
218,"<S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 3 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_24BITS ( p + 2 <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( p + <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_32BITS ( p + 2 <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( p + <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( p + <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_32BITS ( p + 2 <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( p + <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 
219,"<S2SV_StartBug> pynum = parsenumber ( c , s ) ; <S2SV_EndBug> ",<S2SV_ModStart> STR ( ch ) <S2SV_ModEnd> 
220,"<S2SV_StartBug> udf_pc_to_char ( inode -> i_sb , symlink , inode -> i_size , p ) ; <S2SV_EndBug> <S2SV_StartBug> brelse ( bh ) ; <S2SV_EndBug> ","<S2SV_ModStart> err = <S2SV_ModStart> , PAGE_SIZE <S2SV_ModStart> ; if ( err ) goto out_unlock_inode "
221,<S2SV_StartBug> const MB_PREDICTION_MODE y_mode = mi -> mbmi . mode ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE uv_mode = mi -> mbmi . uv_mode ; <S2SV_EndBug> ,<S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> 
222,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % stride ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""horAcc8"" , ""%s"" , ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> return 1 ; "
223,"<S2SV_StartBug> env = g_environ_setenv ( env , var , val , TRUE ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( var [ 0 ] == '\\0' ) { g_dbus_method_invocation_return_error ( invocation , G_DBUS_ERROR , G_DBUS_ERROR_INVALID_ARGS , ""Environment<S2SV_blank>variable<S2SV_blank>cannot<S2SV_blank>have<S2SV_blank>empty<S2SV_blank>name"" ) ; return G_DBUS_METHOD_INVOCATION_HANDLED ; } if ( strchr ( var , '=' ) != NULL ) { g_dbus_method_invocation_return_error ( invocation , G_DBUS_ERROR , G_DBUS_ERROR_INVALID_ARGS , ""Environment<S2SV_blank>variable<S2SV_blank>name<S2SV_blank>cannot<S2SV_blank>contain<S2SV_blank>\'=\'"" ) ; return G_DBUS_METHOD_INVOCATION_HANDLED ; } g_string_append ( env_string , var ) ; g_string_append_c ( env_string , '=' ) ; g_string_append ( env_string , val ) ; g_string_append_c ( env_string , '\\0' <S2SV_ModEnd> "
224,<S2SV_StartBug> goto errout_locked ; <S2SV_EndBug> <S2SV_StartBug> kfree ( family -> attrbuf ) ; <S2SV_EndBug> ,<S2SV_ModStart> errout_free <S2SV_ModEnd> <S2SV_ModStart> errout_free : 
225,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 2 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""horDiff8"" , ""%s"" , ""(cc%(2*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> return 1 ; "
226,"<S2SV_StartBug> up_read ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> snd_ctl_notify ( card , SNDRV_CTL_EVENT_MASK_TLV , & kctl -> id ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct snd_ctl_elem_id id = kctl -> id ; <S2SV_ModStart>  <S2SV_ModEnd> 
227,"<S2SV_StartBug> ""InvalidGeometry"" , ""`%s\'"" , option ) ; <S2SV_EndBug> ",<S2SV_ModStart> ) ; geometry = DestroyString ( geometry 
228,"<S2SV_StartBug> static inline bool unconditional ( const struct arpt_arp * arp ) <S2SV_EndBug> <S2SV_StartBug> return memcmp ( arp , & uncond , sizeof ( uncond ) ) == 0 ; <S2SV_EndBug> ",<S2SV_ModStart> arpt_entry * e <S2SV_ModEnd> <S2SV_ModStart> e -> target_offset == sizeof ( struct arpt_entry ) && memcmp ( & e -> <S2SV_ModEnd> 
229,<S2SV_StartBug> if ( user_alloc && ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) ) <S2SV_EndBug> ,"<S2SV_ModStart> ( <S2SV_ModStart> ) ) || ! access_ok ( VERIFY_WRITE , mem -> userspace_addr , mem -> memory_size "
230,"<S2SV_StartBug> size_t ofs = CDF_GETUINT32 ( p , ( i << 1 ) + 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> tail = <S2SV_ModEnd> <S2SV_ModStart> ; if ( cdf_check_stream_offset ( sst , h , p , tail * sizeof ( uint32_t ) , __LINE__ ) == - 1 ) goto out ; size_t ofs = CDF_GETUINT32 ( p , tail "
231,<S2SV_StartBug> err = - EMSGSIZE ; <S2SV_EndBug> <S2SV_StartBug> ipc . opt = inet -> opt ; <S2SV_EndBug> <S2SV_StartBug> if ( ipc . opt -> srr ) { <S2SV_EndBug> <S2SV_StartBug> daddr = ipc . opt -> faddr ; <S2SV_EndBug> ,"<S2SV_ModStart> struct ip_options_data opt_copy ; <S2SV_ModStart> { struct ip_options_rcu * inet_opt ; rcu_read_lock ( ) ; inet_opt = rcu_dereference ( inet -> inet_opt ) ; if ( inet_opt ) { memcpy ( & opt_copy , inet_opt , sizeof ( * inet_opt ) + inet_opt -> opt . optlen ) ; ipc . opt = & opt_copy . opt ; } rcu_read_unlock ( ) ; } <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . "
232,<S2SV_StartBug> img = ctx -> iface -> enc . get_preview ( ctx -> priv -> alg_priv ) ; <S2SV_EndBug> ,<S2SV_ModStart> get_alg_priv ( ctx ) <S2SV_ModEnd> 
233,<S2SV_StartBug> static void follow_dotdot ( struct nameidata * nd ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if ( unlikely ( ! path_connected ( & nd -> path ) ) ) return - ENOENT ; <S2SV_ModStart> return 0 ; 
234,<S2SV_StartBug> else if ( rc == - ENODATA ) <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug> ,<S2SV_ModStart> && inode -> i_op -> removexattr ) { <S2SV_ModEnd> <S2SV_ModStart> } 
235,<S2SV_StartBug> MP4_READBOX_ENTER ( MP4_Box_data_string_t ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; if ( p_box -> i_size < 8 || p_box -> i_size > SIZE_MAX ) MP4_READBOX_EXIT ( 0 
236,"<S2SV_StartBug> u8 obuf [ 0x40 ] , ibuf [ 0x40 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( mutex_lock_interruptible ( & d -> i2c_mutex ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> switch ( num ) { <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = msg [ 0 ] . buf [ 0 ] + 0x36 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 3 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 0 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x10 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 1 , ibuf , 2 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> msg [ 0 ] . buf [ 1 ] = ibuf [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> msg [ 0 ] . buf [ 0 ] = ibuf [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x08 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = msg [ 0 ] . addr ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = msg [ 0 ] . len ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & obuf [ 3 ] , msg [ 0 ] . buf , msg [ 0 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , msg [ 0 ] . len + 3 , <S2SV_EndBug> <S2SV_StartBug> ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x09 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = msg [ 0 ] . len ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 3 ] = msg [ 0 ] . addr ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & obuf [ 4 ] , msg [ 0 ] . buf , msg [ 0 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , msg [ 0 ] . len + 4 , <S2SV_EndBug> <S2SV_StartBug> ibuf , msg [ 1 ] . len + 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( msg [ 1 ] . buf , & ibuf [ 1 ] , msg [ 1 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & d -> i2c_mutex ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct dw2102_state * state <S2SV_ModEnd> <S2SV_ModStart> state = d -> priv ; <S2SV_ModStart> if ( mutex_lock_interruptible ( & d -> data_mutex ) < 0 ) { mutex_unlock ( & d -> i2c_mutex ) ; return - EAGAIN ; } <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data , 1 , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data [ 1 ] = msg [ 0 ] . len ; state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> data_mutex ) ; mutex_unlock ( & d -> "
237,"<S2SV_StartBug> if ( yych != ':' ) goto yy18 ; <S2SV_EndBug> <S2SV_StartBug> # line 804 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 836 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 881 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 936 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 989 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1086 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1161 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1214 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1228 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1237 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1285 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1334 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> ",<S2SV_ModStart> <= '/' ) goto yy18 ; if ( yych >= ';' <S2SV_ModEnd> <S2SV_ModStart> 805 <S2SV_ModEnd> <S2SV_ModStart> 837 <S2SV_ModEnd> <S2SV_ModStart> 882 <S2SV_ModEnd> <S2SV_ModStart> 937 <S2SV_ModEnd> <S2SV_ModStart> 990 <S2SV_ModEnd> <S2SV_ModStart> 1087 <S2SV_ModEnd> <S2SV_ModStart> 1162 <S2SV_ModEnd> <S2SV_ModStart> 1215 <S2SV_ModEnd> <S2SV_ModStart> 1229 <S2SV_ModEnd> <S2SV_ModStart> 1238 <S2SV_ModEnd> <S2SV_ModStart> 1286 <S2SV_ModEnd> <S2SV_ModStart> 1335 <S2SV_ModEnd> 
238,"<S2SV_StartBug> if ( timeri -> master ) <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & slave_active_lock , flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> && timeri -> timer ) { spin_lock ( & timeri -> timer -> lock ) ; <S2SV_ModEnd> <S2SV_ModStart> spin_unlock ( & timeri -> timer -> lock ) ; } 
239,<S2SV_StartBug> int n = * pnEntry ; <S2SV_EndBug> <S2SV_StartBug> int sz = ( n == 0 ) ? 1 : 2 * n ; <S2SV_EndBug> ,<S2SV_ModStart> sqlite3_int64 <S2SV_ModEnd> <S2SV_ModStart> sqlite3_int64 <S2SV_ModEnd> 
240,<S2SV_StartBug> if ( NFCT_FRAG6_CB ( fp ) -> orig == NULL ) <S2SV_EndBug> ,<S2SV_ModStart> fp && 
241,<S2SV_StartBug> sbi -> s_mb_cache = ext4_xattr_create_cache ( sb -> s_id ) ; <S2SV_EndBug> <S2SV_StartBug> failed_mount_wq : <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( sbi -> s_mb_cache ) { ext4_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } 
242,"<S2SV_StartBug> const InterpKernel * kernel = vp9_get_interp_kernel ( mi -> mbmi . interp_filter ) ; <S2SV_EndBug> <S2SV_StartBug> ? ( plane == 0 ? mi -> bmi [ block ] . as_mv [ ref ] . as_mv <S2SV_EndBug> <S2SV_StartBug> if ( vp9_is_scaled ( sf ) ) { <S2SV_EndBug> <S2SV_StartBug> inter_predictor ( pre , pre_buf -> stride , dst , dst_buf -> stride , <S2SV_EndBug> <S2SV_StartBug> subpel_x , subpel_y , sf , w , h , ref , kernel , xs , ys ) ; <S2SV_EndBug> ","<S2SV_ModStart> vp9_filter_kernels [ <S2SV_ModEnd> <S2SV_ModStart> ] <S2SV_ModEnd> <S2SV_ModStart> average_split_mvs ( pd , mi , ref , block <S2SV_ModEnd> <S2SV_ModStart> const int is_scaled = vp9_is_scaled ( sf ) ; if ( is_scaled <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { high_inter_predictor ( pre , pre_buf -> stride , dst , dst_buf -> stride , subpel_x , subpel_y , sf , w , h , ref , kernel , xs , ys , xd -> bd ) ; } else { <S2SV_ModStart> } # else inter_predictor ( pre , pre_buf -> stride , dst , dst_buf -> stride , subpel_x , subpel_y , sf , w , h , ref , kernel , xs , ys ) ; # endif "
243,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> i1_intra_pred = CLIP3 ( 0 , 8 , i1_intra_pred ) ; <S2SV_ModStart> i1_intra_pred = CLIP3 ( 0 , 8 , i1_intra_pred ) ; "
244,<S2SV_StartBug> assert ( caplen > 0 ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
245,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK2 ( * s , 1 ) ; "
246,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( image -> colors < tga_info . colormap_index ) image -> colors = tga_info . colormap_index ; 
247,<S2SV_StartBug> res . acl_len ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
248,<S2SV_StartBug> mutex_unlock ( & file -> mut ) ; <S2SV_EndBug> ,"<S2SV_ModStart> mutex_lock ( & mut ) ; idr_replace ( & multicast_idr , mc , mc -> id ) ; mutex_unlock ( & mut ) ; "
249,"<S2SV_StartBug> timeri = list_entry ( timer -> open_list_head . next , <S2SV_EndBug> <S2SV_StartBug> if ( timeri -> flags & SNDRV_TIMER_IFLG_EXCLUSIVE ) { <S2SV_EndBug> <S2SV_StartBug> err = - EBUSY ; <S2SV_EndBug> ",<S2SV_ModStart> struct snd_timer_instance * t = <S2SV_ModEnd> <S2SV_ModStart> t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
250,<S2SV_StartBug> d0u8 = vdup_n_u8 ( ( uint8_t ) bifilter4_coeff [ xoffset ] [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> d1u8 = vdup_n_u8 ( ( uint8_t ) bifilter4_coeff [ xoffset ] [ 1 ] ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
251,"<S2SV_StartBug> static void buffer_pipe_buf_get ( struct pipe_inode_info * pipe , <S2SV_EndBug> <S2SV_StartBug> ref -> ref ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> bool <S2SV_ModEnd> <S2SV_ModStart> if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> return true ; 
252,"<S2SV_StartBug> int is_rf64 = ! strncmp ( fourcc , ""RF64"" , 4 ) , got_ds64 = 0 ; <S2SV_EndBug> <S2SV_StartBug> int supported = TRUE , format ; <S2SV_EndBug> ","<S2SV_ModStart> = 0 , format_chunk <S2SV_ModStart> if ( format_chunk ++ ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.WAV<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } "
253,<S2SV_StartBug> l2info -> proto = EXTRACT_16BITS ( p + l2info -> cookie_len ) ; <S2SV_EndBug> ,<S2SV_ModStart> ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ; 
254,"<S2SV_StartBug> if ( JAS_CAST ( uint , jas_stream_read ( in , ppm -> data , ppm -> len ) ) != ppm -> len ) { <S2SV_EndBug> ",<S2SV_ModStart> jas_uint <S2SV_ModEnd> 
255,"<S2SV_StartBug> ( mutt_bcache_exists ( pop_data -> bcache , ctx -> hdrs [ i ] -> data ) == 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> cache_id ( ctx -> hdrs [ i ] -> data ) <S2SV_ModEnd> 
256,<S2SV_StartBug> int nNew = ( v -> nOpAlloc >= 512 ? v -> nOpAlloc * 2 : v -> nOpAlloc + nOp ) ; <S2SV_EndBug> <S2SV_StartBug> int nNew = ( v -> nOpAlloc ? v -> nOpAlloc * 2 : ( int ) ( 1024 / sizeof ( Op ) ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> sqlite3_int64 <S2SV_ModEnd> <S2SV_ModStart> 2 * ( sqlite3_int64 ) v -> nOpAlloc : ( sqlite3_int64 ) <S2SV_ModEnd> <S2SV_ModStart> sqlite3_int64 <S2SV_ModEnd> <S2SV_ModStart> 2 * ( sqlite3_int64 ) v -> nOpAlloc : ( sqlite3_int64 ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
257,<S2SV_StartBug> if ( key -> type -> destroy ) <S2SV_EndBug> ,"<S2SV_ModStart> test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) && ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) && "
258,"<S2SV_StartBug> int mi_row ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 = cm -> mi_grid_visible ; <S2SV_EndBug> <S2SV_StartBug> log_frame_info ( cm , descriptor , file ) ; <S2SV_EndBug> <S2SV_StartBug> * ( ( int * ) ( ( char * ) ( & mi_8x8 [ mi_index ] -> mbmi ) + <S2SV_EndBug> <S2SV_StartBug> mi_index ++ ; <S2SV_EndBug> <S2SV_StartBug> mi_index += 8 ; <S2SV_EndBug> ","<S2SV_ModStart> , mi_col <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mi [ 0 <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> "
259,"<S2SV_StartBug> FIRSTPASS_STATS this_frame ; <S2SV_EndBug> <S2SV_StartBug> if ( read_frame_stats ( twopass , & this_frame , ( i + offset ) ) == EOF ) <S2SV_EndBug> <S2SV_StartBug> accumulate_frame_motion_stats ( & this_frame , <S2SV_EndBug> <S2SV_StartBug> decay_accumulator *= get_prediction_decay_rate ( & cpi -> common , & this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> boost_score += ( decay_accumulator * <S2SV_EndBug> <S2SV_StartBug> calc_frame_boost ( cpi , & this_frame , this_frame_mv_in_out ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( read_frame_stats ( twopass , & this_frame , ( i + offset ) ) == EOF ) <S2SV_EndBug> <S2SV_StartBug> accumulate_frame_motion_stats ( & this_frame , <S2SV_EndBug> <S2SV_StartBug> decay_accumulator *= get_prediction_decay_rate ( & cpi -> common , & this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> boost_score += ( decay_accumulator * <S2SV_EndBug> <S2SV_StartBug> calc_frame_boost ( cpi , & this_frame , this_frame_mv_in_out ) ) ; <S2SV_EndBug> <S2SV_StartBug> arf_boost = ( ( b_frames + f_frames ) * 20 ) ; <S2SV_EndBug> ","<S2SV_ModStart> TWO_PASS <S2SV_ModEnd> <S2SV_ModStart> const FIRSTPASS_STATS * this_frame = read_frame_stats ( twopass , i + offset ) ; if ( this_frame == NULL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cpi , <S2SV_ModEnd> <S2SV_ModStart> decay_accumulator * <S2SV_ModEnd> <S2SV_ModStart> this_frame , this_frame_mv_in_out , GF_MAX_BOOST <S2SV_ModEnd> <S2SV_ModStart> const FIRSTPASS_STATS * this_frame = read_frame_stats ( twopass , i + offset ) ; if ( this_frame == NULL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cpi , <S2SV_ModEnd> <S2SV_ModStart> decay_accumulator * <S2SV_ModEnd> <S2SV_ModStart> this_frame , this_frame_mv_in_out , GF_MAX_BOOST <S2SV_ModEnd> <S2SV_ModStart> ) ; arf_boost = MAX ( arf_boost , MIN_ARF_GF_BOOST "
260,"<S2SV_StartBug> emsg ( _ ( ""E145:<S2SV_blank>Shell<S2SV_blank>commands<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>in<S2SV_blank>rvim"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""E145:<S2SV_blank>Shell<S2SV_blank>commands<S2SV_blank>and<S2SV_blank>some<S2SV_blank>functionality<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>in<S2SV_blank>rvim"" <S2SV_ModEnd> "
261,<S2SV_StartBug> goto read_error ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
262,"<S2SV_StartBug> vpx_memset ( lfi -> lfthr [ lvl ] . hev_thr , ( lvl >> 4 ) , SIMD_WIDTH ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> 
263,"<S2SV_StartBug> static void print_bpf_insn ( struct bpf_insn * insn ) <S2SV_EndBug> <S2SV_StartBug> } else if ( BPF_MODE ( insn -> code ) == BPF_IMM ) { <S2SV_EndBug> <S2SV_StartBug> insn -> code , insn -> dst_reg , insn -> imm ) ; <S2SV_EndBug> ","<S2SV_ModStart> const struct bpf_verifier_env * env , const <S2SV_ModStart> && BPF_SIZE ( insn -> code ) == BPF_DW ) { u64 imm = ( ( u64 ) ( insn + 1 ) -> imm << 32 ) | ( u32 ) insn -> imm ; bool map_ptr = insn -> src_reg == BPF_PSEUDO_MAP_FD ; if ( map_ptr && ! env -> allow_ptr_leaks ) imm = 0 ; verbose ( ""(%02x)<S2SV_blank>r%d<S2SV_blank>=<S2SV_blank>0x%llx\\n"" , insn -> code , <S2SV_ModEnd> <S2SV_ModStart> ( unsigned long long ) <S2SV_ModEnd> "
264,"<S2SV_StartBug> static INLINE void read_mv ( vp9_reader * r , MV * mv , const MV * ref , <S2SV_EndBug> <S2SV_StartBug> ( MV_JOINT_TYPE ) vp9_read_tree ( r , vp9_mv_joint_tree , ctx -> joints ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> <S2SV_ModStart> vpx_read_tree <S2SV_ModEnd> 
265,"<S2SV_StartBug> virCheckDomainReturn ( dom , - 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; virCheckReadOnlyGoto ( dom -> conn -> flags , error "
266,<S2SV_StartBug> if ( ! data ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> || len < 2 ) { <S2SV_ModEnd> <S2SV_ModStart> } 
267,"<S2SV_StartBug> const char * value = NULL ; <S2SV_EndBug> <S2SV_StartBug> cib_client_t * client = data ; <S2SV_EndBug> <S2SV_StartBug> command = crm_recv_remote_msg ( client -> session , client -> encrypted ) ; <S2SV_EndBug> <S2SV_StartBug> value = crm_element_name ( command ) ; <S2SV_EndBug> <S2SV_StartBug> crm_xml_add ( command , F_CIB_USER , client -> user ) ; <S2SV_EndBug> <S2SV_StartBug> crm_xml_add ( command , F_CIB_CALLID , call_uuid ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; int disconnected = 0 ; int timeout = client -> remote_auth ? - 1 : 1000 <S2SV_ModStart> # ifdef HAVE_GNUTLS_GNUTLS_H if ( client -> encrypted && ( client -> handshake_complete == FALSE ) ) { int rc = 0 ; do { rc = gnutls_handshake ( * <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( rc < 0 && rc != GNUTLS_E_AGAIN ) { crm_err ( ""Remote<S2SV_blank>cib<S2SV_blank>tls<S2SV_blank>handshake<S2SV_blank>failed"" ) ; <S2SV_ModEnd> <S2SV_ModStart> } while ( rc == GNUTLS_E_INTERRUPTED ) ; if ( rc == 0 ) { crm_debug ( ""Remote<S2SV_blank>cib<S2SV_blank>tls<S2SV_blank>handshake<S2SV_blank>completed"" ) ; client -> handshake_complete = TRUE ; if ( client -> remote_auth_timeout ) { g_source_remove ( client -> remote_auth_timeout ) ; } client -> remote_auth_timeout = g_timeout_add ( REMOTE_AUTH_TIMEOUT , remote_auth_timeout_cb , client ) ; } return 0 ; } # endif crm_recv_remote_msg ( client -> session , & client -> recv_buf , client -> encrypted , timeout , & disconnected ) ; if ( client -> remote_auth == FALSE ) { xmlNode * reg <S2SV_ModEnd> <S2SV_ModStart> const char * user = NULL ; # endif command = crm_parse_remote_buffer ( & client -> recv_buf ) ; if ( cib_remote_auth ( command ) == FALSE ) { free_xml ( command ) ; return - 1 ; } crm_debug ( ""remote<S2SV_blank>connection<S2SV_blank>authenticated<S2SV_blank>successfully"" ) ; client -> remote_auth = TRUE ; g_source_remove ( client -> remote_auth_timeout ) ; client -> remote_auth_timeout = 0 ; client -> name = crm_element_value_copy ( command , ""name"" ) ; # if ENABLE_ACL user = crm_element_value ( command , ""user"" ) ; if ( user ) { new_client -> user = strdup ( user ) ; } # endif reg = create_xml_node ( NULL , ""cib_result"" <S2SV_ModEnd> <S2SV_ModStart> reg , F_CIB_OPERATION , CRM_OP_REGISTER ) ; crm_xml_add ( reg , F_CIB_CLIENTID , client -> id ) ; crm_send_remote_msg ( client -> session , reg , client -> encrypted ) ; free_xml ( reg ) ; free_xml ( command ) ; } command = crm_parse_remote_buffer ( & client -> recv_buf ) ; while ( command ) { crm_trace ( ""command<S2SV_blank>received"" ) ; cib_handle_remote_msg ( client , command ) ; free_xml ( command ) ; command = crm_parse_remote_buffer ( & client -> recv_buf ) ; } if ( disconnected ) { crm_trace ( ""disconnected<S2SV_blank>while<S2SV_blank>receiving<S2SV_blank>remote<S2SV_blank>cib<S2SV_blank>msg."" ) ; return - 1 ; } return <S2SV_ModEnd> "
268,"<S2SV_StartBug> if ( ! ( self -> mt_used * 3 >= ( self -> mt_mask + 1 ) * 2 ) ) <S2SV_EndBug> <S2SV_StartBug> return _PyMemoTable_ResizeTable ( self , <S2SV_EndBug> <S2SV_StartBug> ( self -> mt_used > 50000 ? 2 : 4 ) * self -> mt_used ) ; <S2SV_EndBug> ","<S2SV_ModStart> SIZE_MAX / 3 >= self -> mt_used && <S2SV_ModEnd> <S2SV_ModStart> < self -> mt_allocated <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModEnd> <S2SV_ModStart> } size_t desired_size = <S2SV_ModEnd> <S2SV_ModStart> ; return _PyMemoTable_ResizeTable ( self , desired_size "
269,<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * param_count ) ; <S2SV_EndBug> ,"<S2SV_ModStart> size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , param_count , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> alloc_size <S2SV_ModEnd> "
270,"<S2SV_StartBug> vpx_memset ( segment_counts , 0 , sizeof ( segment_counts ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> mb_segment_tree_probs , 255 , sizeof ( xd -> mb_segment_tree_probs ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
271,"<S2SV_StartBug> const char command5 [ ] = { 0x05 , 0x00 } ; <S2SV_EndBug> <S2SV_StartBug> close ( s ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> } ; const char bad_command4 [ ] = { 0x04 , 0x01 , 0x60 , 0x8f , 0xff , 0xff , 0xff , 0x7f <S2SV_ModStart> if ( n == 0 ) { <S2SV_ModStart> s = connect_unix_socket ( sockpath ) ; } n = SENDCOMMAND ( bad_command4 , sizeof ( bad_command4 ) ) ; n = read ( s , buf , sizeof ( buf ) ) ; printf ( ""Response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n"" , ( int ) n ) ; printresponse ( buf , n ) ; close ( s ) ; "
272,<S2SV_StartBug> return self ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( p_key ) rb_ivar_set ( self , id_key_set , Qtrue ) ; "
273,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && frame -> linesize [ plane ] 
274,"<S2SV_StartBug> struct flowi4 fl4 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! __sk_dst_get ( sk ) || __sk_dst_check ( sk , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! IS_ERR ( rt ) ) <S2SV_EndBug> <S2SV_StartBug> __sk_dst_set ( sk , & rt -> dst ) ; <S2SV_EndBug> ","<S2SV_ModStart> dst_entry * dst ; struct <S2SV_ModStart> rcu_read_lock ( ) ; dst = __sk_dst_get ( sk ) ; <S2SV_ModStart> dst || ! dst -> obsolete || dst -> ops -> check ( dst <S2SV_ModEnd> <S2SV_ModStart> { rcu_read_unlock ( ) ; return ; } <S2SV_ModEnd> <S2SV_ModStart> dst = <S2SV_ModEnd> <S2SV_ModStart> ? <S2SV_ModEnd> <S2SV_ModStart> dst : NULL ; sk_dst_set ( sk , "
275,"<S2SV_StartBug> c -> framebuf_stride = FFALIGN ( c -> width * 3 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> aligned_height = FFALIGN ( c -> height , 16 ) ; <S2SV_EndBug> ",<S2SV_ModStart> + 15 <S2SV_ModEnd> <S2SV_ModStart> * 3 ; aligned_height = <S2SV_ModEnd> <S2SV_ModStart> + 15 <S2SV_ModEnd> 
276,"<S2SV_StartBug> bool tsonly ; <S2SV_EndBug> <S2SV_StartBug> sk -> sk_type == SOCK_STREAM ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> __skb_complete_tx_timestamp ( skb , sk , tstype ) ; <S2SV_EndBug> ","<S2SV_ModStart> , opt_stats = false <S2SV_ModStart> { <S2SV_ModStart> opt_stats = true ; } <S2SV_ModStart> , opt_stats "
277,<S2SV_StartBug> if ( * rsize >= 107 && rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && <S2SV_EndBug> ,<S2SV_ModStart> 112 <S2SV_ModEnd> 
278,"<S2SV_StartBug> static vpx_codec_err_t vp8e_set_reference ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
279,<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> <S2SV_ModStart> { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> "
280,"<S2SV_StartBug> size_t ss = CDF_SEC_SIZE ( h ) , i , j ; <S2SV_EndBug> ",<S2SV_ModStart> CDF_SHORT_SEC_SIZE <S2SV_ModEnd> 
281,"<S2SV_StartBug> return send ( signal_fds [ 1 ] , & sig_on , sizeof ( sig_on ) , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
282,"<S2SV_StartBug> a = 1.0f / MaxF ( w . x , MaxF ( w . y , w . z ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> MagickMax ( w . x , MagickMax <S2SV_ModEnd> "
283,"<S2SV_StartBug> static int jas_iccgetuint ( jas_stream_t * in , int n , ulonglong * val ) <S2SV_EndBug> <S2SV_StartBug> ulonglong v ; <S2SV_EndBug> ",<S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> <S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> 
284,<S2SV_StartBug> int n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! body -> unit_size ) break ; n 
285,<S2SV_StartBug> uint32 nstrips ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
286,"<S2SV_StartBug> memccpy ( result , ptr , 0 , len ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
287,"<S2SV_StartBug> imap_quote_string ( dest , dlen , buf ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false "
288,<S2SV_StartBug> ifd ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( len > 2560000 || ! ( cbuf = ( char * ) malloc ( len ) ) ) <S2SV_EndBug> ,<S2SV_ModStart> # ifdef LIBRAW_LIBRARY_BUILD if ( ifd >= sizeof tiff_ifd / sizeof tiff_ifd [ 0 ] ) throw LIBRAW_EXCEPTION_IO_CORRUPT ; # endif <S2SV_ModStart> < 1 || len 
289,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> trace_kvm_emulate_insn_failed ( vcpu ) ; <S2SV_EndBug> <S2SV_StartBug> kvm_queue_exception ( vcpu , UD_VECTOR ) ; <S2SV_EndBug> <S2SV_StartBug> return EMULATE_FAIL ; <S2SV_EndBug> ",<S2SV_ModStart> int r = EMULATE_DONE ; <S2SV_ModStart> if ( ! is_guest_mode ( vcpu ) ) { <S2SV_ModStart> r = EMULATE_FAIL ; } <S2SV_ModStart> r <S2SV_ModEnd> 
290,"<S2SV_StartBug> # define COPY_PORT ( dest , src ) do { int i ; for ( i = 0 ; i < ARRAY_SIZE ( src -> read_urbs ) ; ++ i ) { dest -> read_urbs [ i ] = src -> read_urbs [ i ] ; dest -> read_urbs [ i ] -> context = dest ; dest -> bulk_in_buffers [ i ] = src -> bulk_in_buffers [ i ] ; } dest -> read_urb = src -> read_urb ; dest -> bulk_in_endpointAddress = src -> bulk_in_endpointAddress ; dest -> bulk_in_buffer = src -> bulk_in_buffer ; dest -> bulk_in_size = src -> bulk_in_size ; dest -> interrupt_in_urb = src -> interrupt_in_urb ; dest -> interrupt_in_urb -> context = dest ; dest -> interrupt_in_endpointAddress = src -> interrupt_in_endpointAddress ; dest -> interrupt_in_buffer = src -> interrupt_in_buffer ; } while ( 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( serial -> num_bulk_in < 2 || serial -> num_interrupt_in < 2 ) { dev_err ( & serial -> interface -> dev , ""missing<S2SV_blank>endpoints\\n"" ) ; return - ENODEV ; } "
291,<S2SV_StartBug> err = 0 ; <S2SV_EndBug> <S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> msg -> msg_namelen = 0 ; <S2SV_ModStart>  <S2SV_ModEnd> 
292,"<S2SV_StartBug> pixs = pixRead ( ""cat.035.jpg"" ) ; <S2SV_EndBug> <S2SV_StartBug> lept_stderr ( ""pdf<S2SV_blank>file<S2SV_blank>made:<S2SV_blank>/tmp/lept/model/dewarptest1.pdf\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> lept_rmdir ( ""lept/dewmod"" ) ; lept_mkdir ( ""lept/dewmod"" ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
293,<S2SV_StartBug> endpoint = & intf -> altsetting [ 0 ] . endpoint [ 0 ] . desc ; <S2SV_EndBug> <S2SV_StartBug> goto fail3 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( intf -> altsetting [ 0 ] . desc . bNumEndpoints < 1 ) { dev_err ( & intf -> dev , ""interface<S2SV_blank>has<S2SV_blank>%d<S2SV_blank>endpoints,<S2SV_blank>but<S2SV_blank>must<S2SV_blank>have<S2SV_blank>minimum<S2SV_blank>1\\n"" , intf -> altsetting [ 0 ] . desc . bNumEndpoints ) ; err = - EINVAL ; goto fail3 ; } <S2SV_ModStart> err = - EINVAL ; "
294,<S2SV_StartBug> long newpos ; <S2SV_EndBug> ,<S2SV_ModStart> size_t <S2SV_ModEnd> 
295,"<S2SV_StartBug> set_header ( res , ""Content-Type"" , mime ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , "
296,"<S2SV_StartBug> int net ; <S2SV_EndBug> <S2SV_StartBug> CLIENT * client ; <S2SV_EndBug> <S2SV_StartBug> if ( ( net = accept ( sock , ( struct sockaddr * ) & addrin , & addrinlen ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> client = negotiate ( net , NULL , servers , NEG_INIT | NEG_MODERN ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> handle_modern_connection ( servers , sock ) ; } for ( i = 0 ; i < servers -> len ; i ++ ) { int net ; SERVER * serve ; serve = & ( g_array_index ( servers , SERVER , i ) ) ; if ( serve -> socket < 0 ) { continue ; } if ( FD_ISSET ( serve -> socket , & rset ) ) { <S2SV_ModEnd> <S2SV_ModStart> serve -> socket <S2SV_ModEnd> <S2SV_ModStart> handle_connection ( servers , net , serve , NULL <S2SV_ModEnd> "
297,<S2SV_StartBug> sc -> drefs = av_mallocz ( entries * sizeof ( * sc -> drefs ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> drefs_count = 0 ; sc -> 
298,"<S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , sizeof ( struct in_addr ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 6 ] , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned_relts_print ( ndo , EXTRACT_16BITS ( & bp [ 6 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> bp += 8 ; <S2SV_EndBug> <S2SV_StartBug> len -= 8 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , sizeof ( struct in_addr ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 4 ] , sizeof ( struct in_addr ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( EXTRACT_32BITS ( & bp [ 4 ] ) != 0xffffffff ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""/%s"" , ipaddr_string ( ndo , & bp [ 4 ] ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 8 ] , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> njoin = EXTRACT_16BITS ( & bp [ 8 ] ) ; <S2SV_EndBug> <S2SV_StartBug> nprune = EXTRACT_16BITS ( & bp [ 10 ] ) ; <S2SV_EndBug> <S2SV_StartBug> bp += 12 ; <S2SV_EndBug> <S2SV_StartBug> len -= 12 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , 6 ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( len < sizeof ( struct in_addr ) ) goto trunc ; <S2SV_ModStart> bp += 4 ; len -= 4 ; if ( len < 4 ) goto trunc ; <S2SV_ModStart> 2 <S2SV_ModEnd> <S2SV_ModStart> 2 <S2SV_ModEnd> <S2SV_ModStart> 4 <S2SV_ModEnd> <S2SV_ModStart> 4 ; if ( len < 4 ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> if ( len < 4 ) goto trunc ; <S2SV_ModStart> bp += 4 ; len -= 4 ; if ( len < 4 ) goto trunc ; <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> 0 ] ) ) ) ; bp += 4 ; len -= 4 ; if ( len < 4 ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> 2 <S2SV_ModEnd> <S2SV_ModStart> 4 <S2SV_ModEnd> <S2SV_ModStart> 4 <S2SV_ModEnd> <S2SV_ModStart> if ( len < 6 ) goto trunc ; 
299,"<S2SV_StartBug> static void sas_destruct_devices ( struct work_struct * work ) <S2SV_EndBug> <S2SV_StartBug> struct domain_device * dev , * n ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> asd_sas_port * port <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
300,"<S2SV_StartBug> int number_bidders , i , bid , best_bid ; <S2SV_EndBug> <S2SV_StartBug> for ( ; ; ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , n <S2SV_ModStart> n = 0 ; n < 25 ; ++ n <S2SV_ModEnd> <S2SV_ModStart> archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , ""Input<S2SV_blank>requires<S2SV_blank>too<S2SV_blank>many<S2SV_blank>filters<S2SV_blank>for<S2SV_blank>decoding"" ) ; return ( ARCHIVE_FATAL ) ; "
301,"<S2SV_StartBug> flush_dcache_page ( page ) ; <S2SV_EndBug> <S2SV_StartBug> iov_iter_advance ( ii , tmp ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; iov_iter_advance ( ii , tmp <S2SV_ModStart>  <S2SV_ModEnd> "
302,<S2SV_StartBug> numSamples = pWTIntFrame -> numSamples ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( numSamples <= 0 ) { ALOGE ( ""b/26366256"" ) ; return ; } "
303,"<S2SV_StartBug> netdev_dbg ( vif -> dev , ""Need<S2SV_blank>more<S2SV_blank>frags\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , ""Too<S2SV_blank>many<S2SV_blank>frags\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , ""Frags<S2SV_blank>galore\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , ""txp->offset:<S2SV_blank>%x,<S2SV_blank>size:<S2SV_blank>%u\\n"" , <S2SV_EndBug> <S2SV_StartBug> txp -> offset , txp -> size ) ; <S2SV_EndBug> ","<S2SV_ModStart> netdev_err <S2SV_ModEnd> <S2SV_ModStart> ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> netdev_err <S2SV_ModEnd> <S2SV_ModStart> ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> netdev_err ( vif -> dev , ""Frag<S2SV_blank>is<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>frame.\\n"" ) ; netbk_fatal_tx_err ( vif <S2SV_ModEnd> <S2SV_ModStart> netdev_err <S2SV_ModEnd> <S2SV_ModStart> ) ; netbk_fatal_tx_err ( vif "
304,<S2SV_StartBug> qemu_vfree ( r -> iov . iov_base ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( r -> iov . iov_base ) { <S2SV_ModStart> } 
305,<S2SV_StartBug> if ( ! ( dev -> flags & IFF_UP ) ) <S2SV_EndBug> <S2SV_StartBug> if ( skb -> len > ( dev -> mtu + dev -> hard_header_len ) ) <S2SV_EndBug> <S2SV_StartBug> return NET_RX_DROP ; <S2SV_EndBug> ,<S2SV_ModStart> || <S2SV_ModEnd> <S2SV_ModStart> ) { kfree_skb ( skb ) ; <S2SV_ModStart> } 
306,"<S2SV_StartBug> int ret , n ; <S2SV_EndBug> <S2SV_StartBug> hid -> version = le16_to_cpu ( hdesc -> bcdHID ) ; <S2SV_EndBug> <S2SV_StartBug> hid -> country = hdesc -> bCountryCode ; <S2SV_EndBug> <S2SV_StartBug> for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) <S2SV_EndBug> ","<S2SV_ModStart> ; int num_descriptors ; size_t offset = offsetof ( struct hid_descriptor , desc ) <S2SV_ModStart> if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid<S2SV_blank>descriptor<S2SV_blank>is<S2SV_blank>too<S2SV_blank>short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> ; num_descriptors = min_t ( int , hdesc -> bNumDescriptors , ( hdesc -> bLength - offset ) / sizeof ( struct hid_class_descriptor ) ) <S2SV_ModStart> num_descriptors <S2SV_ModEnd> "
307,"<S2SV_StartBug> void vp9_iht16x16_256_add_c ( const int16_t * input , uint8_t * dest , int stride , <S2SV_EndBug> <S2SV_StartBug> int16_t out [ 16 * 16 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t * outptr = out ; <S2SV_EndBug> <S2SV_StartBug> int16_t temp_in [ 16 ] , temp_out [ 16 ] ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < 16 ; ++ j ) <S2SV_EndBug> <S2SV_StartBug> dest [ j * stride + i ] = clip_pixel ( ROUND_POWER_OF_TWO ( temp_out [ j ] , 6 ) <S2SV_EndBug> <S2SV_StartBug> + dest [ j * stride + i ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> clip_pixel_add ( <S2SV_ModEnd> <S2SV_ModStart> , ROUND_POWER_OF_TWO ( temp_out [ j ] , 6 ) ) ; } <S2SV_ModEnd> "
308,"<S2SV_StartBug> memset ( sax , 0 , sizeof ( sax ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> * 
309,<S2SV_StartBug> for ( j = 0 ; j < book -> dim ; j ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < book -> dim ; j ++ ) <S2SV_EndBug> ,<S2SV_ModStart> && i < n <S2SV_ModStart> && i < n 
310,<S2SV_StartBug> zip_object_handlers . get_properties = php_zip_get_properties ; <S2SV_EndBug> ,<S2SV_ModStart> get_gc = php_zip_get_gc ; zip_object_handlers . 
311,"<S2SV_StartBug> ND_TCHECK2 ( pptr [ 0 ] , BGP_VPN_RD_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> pptr += BGP_VPN_RD_LEN ; <S2SV_EndBug> ",<S2SV_ModStart> + 4 <S2SV_ModStart> + 4 
312,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> if ( TSQUERY_TOO_BIG ( list_length ( state . polstr ) , state . sumlen ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""tsquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large"" ) ) ) ; "
313,<S2SV_StartBug> if ( ent != NULL ) { <S2SV_EndBug> <S2SV_StartBug> cleanup : <S2SV_EndBug> ,"<S2SV_ModStart> == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> <S2SV_ModStart> st = populate_policy ( context , ld , ent , pol_name , * policy ) ; "
314,"<S2SV_StartBug> static void sas_probe_devices ( struct work_struct * work ) <S2SV_EndBug> <S2SV_StartBug> struct domain_device * dev , * n ; <S2SV_EndBug> ",<S2SV_ModStart> asd_sas_port * port <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
315,<S2SV_StartBug> if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > <S2SV_EndBug> <S2SV_StartBug> pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
316,"<S2SV_StartBug> char * ext_name = NULL ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> if ( ( r = sshbuf_get_cstring ( m , & ext_name , NULL ) ) != 0 ) { <S2SV_EndBug> <S2SV_StartBug> err : <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> <S2SV_ModStart> r = SSH_ERR_INVALID_FORMAT ; goto out <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> <S2SV_ModStart> r = SSH_ERR_INVALID_FORMAT ; goto out <S2SV_ModEnd> <S2SV_ModStart> r = SSH_ERR_INVALID_FORMAT ; goto out <S2SV_ModEnd> <S2SV_ModStart> r = SSH_ERR_INVALID_FORMAT ; goto out <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> <S2SV_ModStart> parse_key_constraint_extension ( m , sk_providerp ) ) != 0 ) goto out ; break ; default : error_f ( <S2SV_ModEnd> <S2SV_ModStart> r = SSH_ERR_FEATURE_UNSUPPORTED ; goto out ; } } r = 0 ; out : return r <S2SV_ModEnd> "
317,"<S2SV_StartBug> sprintf ( url_address , ""%.*s"" , url_len , url_begin ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( url_len >= sizeof ( url_address ) ) { applog ( LOG_WARNING , ""%s:<S2SV_blank>Truncating<S2SV_blank>overflowed<S2SV_blank>address<S2SV_blank>\'%.*s\'"" , __func__ , url_len , url_begin ) ; url_len = sizeof ( url_address ) - 1 ; } "
318,"<S2SV_StartBug> vp8_decrypt_cb * decrypt_cb , <S2SV_EndBug> <S2SV_StartBug> int n = data_sz > 10 ? 10 : data_sz ; <S2SV_EndBug> <S2SV_StartBug> res = VPX_CODEC_UNSUP_BITSTREAM ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_decrypt_cb <S2SV_ModEnd> <S2SV_ModStart> MIN ( sizeof ( clear_buffer ) , data_sz ) <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> "
319,<S2SV_StartBug> addr . sun_family = AF_UNIX ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( strlen ( sockFile ) + 1 > sizeof ( addr . sun_path ) ) { rfbClientErr ( ""ConnectToUnixSock:<S2SV_blank>socket<S2SV_blank>file<S2SV_blank>name<S2SV_blank>too<S2SV_blank>long\\n"" ) ; return - 1 ; } "
320,<S2SV_StartBug> prev = NULL ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & mm -> mmap_sem ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! mmget_still_valid ( mm ) ) goto skip_mm ; <S2SV_ModStart> skip_mm : 
321,<S2SV_StartBug> return IMPEG2D_MB_TEX_DECODE_ERR ; <S2SV_EndBug> ,<S2SV_ModStart> if ( 0 >= ps_dec -> u2_num_mbs_left ) { break ; } 
322,"<S2SV_StartBug> vpx_memset ( a , has_eob , sizeof ( ENTROPY_CONTEXT ) * tx_size_in_blocks ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( l , has_eob , sizeof ( ENTROPY_CONTEXT ) * tx_size_in_blocks ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
323,"<S2SV_StartBug> vpx_memset ( q , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( q + 16 , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( q + 32 , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( q + 48 , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
324,<S2SV_StartBug> ENSURE_BITS ( 16 ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( bits_left == 0 ) <S2SV_ModStart>  <S2SV_ModEnd> 
325,"<S2SV_StartBug> static void nsc_rle_decompress_data ( NSC_CONTEXT * context ) <S2SV_EndBug> <S2SV_StartBug> rle = context -> Planes ; <S2SV_EndBug> <S2SV_StartBug> FillMemory ( context -> priv -> PlaneBuffers [ i ] , originalSize , 0xFF ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( planeSize < originalSize ) <S2SV_EndBug> <S2SV_StartBug> nsc_rle_decode ( rle , context -> priv -> PlaneBuffers [ i ] , originalSize ) ; <S2SV_EndBug> <S2SV_StartBug> rle += planeSize ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> if ( ! context ) return FALSE ; <S2SV_ModStart> { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> } <S2SV_ModStart> { if ( ! <S2SV_ModStart> context -> priv -> PlaneBuffersLength , originalSize ) ) return FALSE ; } else { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> return TRUE ; "
326,<S2SV_StartBug> local_bh_disable ( ) ; <S2SV_EndBug> <S2SV_StartBug> local_bh_enable ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> spin_lock_bh ( & net -> sctp . addr_wq_lock <S2SV_ModEnd> <S2SV_ModStart> spin_unlock_bh ( & net -> sctp . addr_wq_lock <S2SV_ModEnd> 
327,<S2SV_StartBug> for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 1 ) ; x += 4 ) <S2SV_EndBug> <S2SV_StartBug> p ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ( image -> columns % 4 ) >= 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( image -> columns % 4 ) >= 2 ) <S2SV_EndBug> ,<S2SV_ModStart> 3 <S2SV_ModEnd> <S2SV_ModStart> q += GetPixelChannels ( image ) ; p ++ <S2SV_ModEnd> <S2SV_ModStart> > <S2SV_ModEnd> <S2SV_ModStart> > <S2SV_ModEnd> 
328,"<S2SV_StartBug> const struct ipv6_pinfo * np = inet6_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( np -> opt ) <S2SV_EndBug> <S2SV_StartBug> newnp -> opt = ipv6_dup_options ( newsk , np -> opt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( newnp -> opt ) <S2SV_EndBug> <S2SV_StartBug> inet_csk ( newsk ) -> icsk_ext_hdr_len = ( newnp -> opt -> opt_nflen + <S2SV_EndBug> <S2SV_StartBug> newnp -> opt -> opt_flen ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; struct ipv6_txoptions * opt <S2SV_ModStart> opt = rcu_dereference <S2SV_ModEnd> <S2SV_ModStart> ; if ( opt ) { <S2SV_ModEnd> <S2SV_ModStart> opt ) ; RCU_INIT_POINTER ( newnp -> opt , opt ) ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
329,"<S2SV_StartBug> static int cost_mv_ref ( const VP9_COMP * cpi , MB_PREDICTION_MODE mode , <S2SV_EndBug> <S2SV_StartBug> int mode_context ) { <S2SV_EndBug> <S2SV_StartBug> return x -> inter_mode_cost [ mode_context ] [ INTER_OFFSET ( mode ) ] ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> ",<S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
330,"<S2SV_StartBug> register u_int amt ; <S2SV_EndBug> <S2SV_StartBug> j = length / sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 <S2SV_EndBug> <S2SV_StartBug> if ( j * sizeof ( * ni ) != length - 4 ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>ripng-req<S2SV_blank>%d:"" , j ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> i -= sizeof ( * ni ) , ++ ni ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> j = length / sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> if ( j * sizeof ( * ni ) != length - 4 ) <S2SV_EndBug> <S2SV_StartBug> trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; <S2SV_EndBug> <S2SV_StartBug> for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> i -= sizeof ( * ni ) , ++ ni ) { <S2SV_EndBug> <S2SV_StartBug> if ( trunc ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> unsigned int length_left ; u_int j ; ND_TCHECK ( rp -> rip6_cmd <S2SV_ModEnd> <S2SV_ModStart> length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) goto trunc ; length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; j = length_left <S2SV_ModEnd> <S2SV_ModStart> ) { ND_TCHECK ( rp -> rip6_nets ) ; if ( <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> length_left ) ND_PRINT ( ( ndo , ""<S2SV_blank>ripng-req<S2SV_blank>%u[%u]:"" , j , length <S2SV_ModEnd> <S2SV_ModStart> ""<S2SV_blank>ripng-req<S2SV_blank>%u:"" , j ) <S2SV_ModEnd> <S2SV_ModStart> length_left <S2SV_ModEnd> <S2SV_ModStart> length_left <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( * ni ) ; <S2SV_ModStart> if ( length_left != 0 ) goto trunc ; <S2SV_ModStart> length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) goto trunc ; length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; j = length_left <S2SV_ModEnd> <S2SV_ModStart> length_left ) ND_PRINT ( ( ndo , ""<S2SV_blank>ripng-resp<S2SV_blank>%d[%u]:"" , j , length <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> length_left <S2SV_ModEnd> <S2SV_ModStart> length_left <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( * ni ) ; <S2SV_ModStart> length_left != 0 ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( rp -> rip6_vers ) ; <S2SV_ModStart> return ; trunc : ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; return ; "
331,<S2SV_StartBug> if ( ! alt ) <S2SV_EndBug> ,<S2SV_ModStart> ) return - ENODEV ; if ( alt -> desc . bNumEndpoints < 1 
332,<S2SV_StartBug> if ( q > e ) { <S2SV_EndBug> ,<S2SV_ModStart> < p || q 
333,<S2SV_StartBug> if ( ( ldblk > 9999 ) || ( ldblk < 0 ) ) <S2SV_EndBug> ,<S2SV_ModStart> EOFBlob ( image ) ) break ; if ( 
334,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> if ( ( size_t ) len >= sizeof ( icon_buf ) ) { logger ( Protocol , Warning , ""seamless_process_line(),<S2SV_blank>icon<S2SV_blank>data<S2SV_blank>would<S2SV_blank>overrun<S2SV_blank>icon_buf"" ) ; break ; } "
335,<S2SV_StartBug> uint8 * tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; 
336,<S2SV_StartBug> if ( cmd == TUNSETIFF || _IOC_TYPE ( cmd ) == 0x89 ) <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> ,"<S2SV_ModStart> { <S2SV_ModStart> ; } else memset ( & ifr , 0 , sizeof ( ifr ) ) "
337,"<S2SV_StartBug> char src [ PATH_MAX + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( src , dir , dir_len ) ; <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> if ( dir_len > PATH_MAX ) { uwsgi_log ( ""invalid<S2SV_blank>path<S2SV_blank>size:<S2SV_blank>%d<S2SV_blank>(max<S2SV_blank>%d)\\n"" , dir_len , PATH_MAX ) ; return NULL ; } char * src = uwsgi_concat2n ( <S2SV_ModEnd> <S2SV_ModStart> , """" , 0 ) <S2SV_ModEnd> <S2SV_ModStart> free ( src ) ; <S2SV_ModStart> free ( src ) ; "
338,"<S2SV_StartBug> const int w = vpx_img_plane_width ( img , plane ) ; <S2SV_EndBug> ",<S2SV_ModStart> * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 ) 
339,<S2SV_StartBug> put_device ( & bus -> dev ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
340,"<S2SV_StartBug> vpx_memcpy ( ctx -> pred_mv , x -> pred_mv , sizeof ( x -> pred_mv ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> 
341,<S2SV_StartBug> OVS_NOT_REACHED ( ) ; <S2SV_EndBug> <S2SV_StartBug> OVS_NOT_REACHED ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> return OFPERR_OFPGMFC_BAD_TYPE <S2SV_ModEnd> <S2SV_ModStart> return OFPERR_OFPGMFC_BAD_COMMAND <S2SV_ModEnd> 
342,<S2SV_StartBug> if ( ack -> subh . addip_hdr -> serial == serial ) { <S2SV_EndBug> ,<S2SV_ModStart> sctp_chunk_pending ( ack ) ) continue ; if ( 
343,"<S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_find_first ( ext2_xattr_cache , inode -> i_sb -> s_bdev , <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> inode -> i_ino , ( unsigned long ) ce -> e_block ) ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_release ( ce ) ; <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_find_next ( ce , inode -> i_sb -> s_bdev , hash ) ; <S2SV_EndBug> ","<S2SV_ModStart> mb2_cache_entry * ce ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( inode -> i_sb ) -> s_mb_cache <S2SV_ModEnd> <S2SV_ModStart> mb2_cache_entry_find_first ( ext2_mb_cache , hash ) ; while ( ce ) { struct buffer_head * bh ; bh = sb_bread ( <S2SV_ModEnd> <S2SV_ModStart> , ce -> e_block ) ; if ( ! bh ) { ext2_error ( inode -> i_sb , ""ext2_xattr_cache_find"" , ""inode<S2SV_blank>%ld:<S2SV_blank>block<S2SV_blank>%ld<S2SV_blank>read<S2SV_blank>error"" , inode -> i_ino , ( unsigned long ) ce -> e_block ) ; } else { lock_buffer ( bh ) ; if ( hlist_bl_unhashed ( & ce -> e_hash_list ) ) { mb2_cache_entry_put ( ext2_mb_cache , ce ) ; unlock_buffer ( bh ) ; brelse ( bh ) ; <S2SV_ModEnd> <S2SV_ModStart> } else if ( le32_to_cpu ( HDR ( bh ) -> h_refcount ) > EXT2_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode , ""block<S2SV_blank>%ld<S2SV_blank>refcount<S2SV_blank>%d>%d"" , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mb2_cache_entry_touch ( ext2_mb_cache , ce ) ; mb2_cache_entry_put ( ext2_mb_cache , <S2SV_ModEnd> <S2SV_ModStart> mb2_cache_entry_find_next ( ext2_mb_cache , ce <S2SV_ModEnd> "
344,"<S2SV_StartBug> if ( sk_filter ( sk , skb ) ) <S2SV_EndBug> ",<S2SV_ModStart> tcp_filter <S2SV_ModEnd> 
345,<S2SV_StartBug> for ( plane = 0 ; plane < MAX_MB_PLANE ; ++ plane ) { <S2SV_EndBug> <S2SV_StartBug> const TX_SIZE tx_size = plane ? get_uv_tx_size ( mbmi ) : mbmi -> tx_size ; <S2SV_EndBug> ,"<S2SV_ModStart> mbmi -> skip = 1 ; if ( x -> skip ) return ; <S2SV_ModStart> , pd "
346,"<S2SV_StartBug> memmove ( s + j , s + qs , blen - qs ) ; <S2SV_EndBug> <S2SV_StartBug> j += blen - qs ; <S2SV_EndBug> ",<S2SV_ModStart> const int qslen = blen - qs ; <S2SV_ModStart> ( size_t ) qslen ) ; qs = j <S2SV_ModEnd> <S2SV_ModStart> qslen <S2SV_ModEnd> 
347,<S2SV_StartBug> if ( sec_attr == NULL ) { <S2SV_EndBug> ,<S2SV_ModStart> || sec_attr_len 
348,<S2SV_StartBug> U2FHID_INIT_RESP initresp ; <S2SV_EndBug> <S2SV_StartBug> if ( resplen > sizeof ( initresp ) ) <S2SV_EndBug> <S2SV_StartBug> dev -> cid = initresp . cid ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionInterface = initresp . versionInterface ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionMajor = initresp . versionMajor ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionMinor = initresp . versionMinor ; <S2SV_EndBug> <S2SV_StartBug> dev -> capFlags = initresp . capFlags ; <S2SV_EndBug> ,"<S2SV_ModStart> int offs = sizeof ( nonce ) <S2SV_ModEnd> <S2SV_ModStart> < 17 ) { return U2FH_SIZE_ERROR ; } if ( memcmp ( nonce , resp , sizeof ( nonce ) ) != 0 ) { return U2FH_TRANSPORT_ERROR ; } <S2SV_ModEnd> <S2SV_ModStart> resp [ offs ] << 24 | resp [ offs + 1 ] << 16 | resp [ offs + 2 ] << 8 | resp [ offs + 3 ] ; offs += 4 <S2SV_ModEnd> <S2SV_ModStart> resp [ offs ++ ] <S2SV_ModEnd> <S2SV_ModStart> resp [ offs ++ ] <S2SV_ModEnd> <S2SV_ModStart> resp [ offs ++ ] ; dev -> versionBuild = resp [ offs ++ ] <S2SV_ModEnd> <S2SV_ModStart> resp [ offs ++ ] <S2SV_ModEnd> "
349,<S2SV_StartBug> while ( f != upto ) ; <S2SV_EndBug> ,<S2SV_ModStart> && f 
350,<S2SV_StartBug> hash_param . data = 0 ; <S2SV_EndBug> <S2SV_StartBug> hash_param . len = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> instance -> private_key <S2SV_ModEnd> <S2SV_ModStart> instance -> private_key_len <S2SV_ModEnd> 
351,<S2SV_StartBug> ctxt -> dst . type = OP_REG ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> dst . bytes = ctxt -> op_bytes ; <S2SV_EndBug> ,"<S2SV_ModStart> int rc ; unsigned long eip ; rc = emulate_pop ( ctxt , & eip , <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( rc != X86EMUL_CONTINUE ) return rc ; return assign_eip_near ( ctxt , eip <S2SV_ModEnd> "
352,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug> ",<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : <S2SV_ModStart>  <S2SV_ModEnd> 
353,<S2SV_StartBug> key_user_put ( key -> user ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( key -> type -> destroy ) key -> type -> destroy ( key ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
354,"<S2SV_StartBug> static int expandRegular ( rpmfi fi , const char * dest , rpmpsm psm , int nodigest , int nocontent ) <S2SV_EndBug> <S2SV_StartBug> wfd = Fopen ( dest , ""w.ufdio"" ) ; <S2SV_EndBug> <S2SV_StartBug> umask ( old_umask ) ; <S2SV_EndBug> ","<S2SV_ModStart> , int exclusive <S2SV_ModStart> exclusive ? ""wx.ufdio"" : ""a.ufdio"" <S2SV_ModEnd> <S2SV_ModStart> if ( ! exclusive && wfd != NULL && ! linkSane ( wfd , dest ) ) { rc = RPMERR_OPEN_FAILED ; goto exit ; } "
355,"<S2SV_StartBug> int rose_parse_facilities ( unsigned char * p , <S2SV_EndBug> <S2SV_StartBug> if ( facilities_len == 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( facilities_len > 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( len < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( len < 0 ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ","<S2SV_ModStart> , unsigned packet_len <S2SV_ModStart> || ( unsigned ) facilities_len > packet_len <S2SV_ModStart> >= 3 && <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> break ; default : printk ( KERN_DEBUG ""ROSE:<S2SV_blank>rose_parse_facilities<S2SV_blank>-<S2SV_blank>unknown<S2SV_blank>facilities<S2SV_blank>family<S2SV_blank>%02X\\n"" , * p ) ; len = 1 ; break ; } <S2SV_ModStart> ) return 0 ; if ( WARN_ON ( len >= facilities_len ) <S2SV_ModStart> } return facilities_len == 0 <S2SV_ModEnd> "
356,"<S2SV_StartBug> tcpSendSegment ( socket , TCP_FLAG_ACK , socket -> sndNxt , socket -> rcvNxt , 0 , FALSE ) ; <S2SV_EndBug> ",<S2SV_ModStart> { <S2SV_ModStart> } 
357,"<S2SV_StartBug> vpx_img_fmt_t fmt ) { <S2SV_EndBug> <S2SV_StartBug> const char * const color = fmt == VPX_IMG_FMT_444A ? ""C444alpha\\n"" : <S2SV_EndBug> <S2SV_StartBug> ""C420jpeg\\n"" ; <S2SV_EndBug> ","<S2SV_ModStart> , unsigned int bit_depth <S2SV_ModStart> color ; switch ( bit_depth ) { case 8 : <S2SV_ModEnd> <S2SV_ModStart> break ; case 9 : color = fmt == VPX_IMG_FMT_I44416 ? ""C444p9<S2SV_blank>XYSCSS=444P9\\n"" : fmt == VPX_IMG_FMT_I42216 ? ""C422p9<S2SV_blank>XYSCSS=422P9\\n"" : ""C420p9<S2SV_blank>XYSCSS=420P9\\n"" ; break ; case 10 : color = fmt == VPX_IMG_FMT_I44416 ? ""C444p10<S2SV_blank>XYSCSS=444P10\\n"" : fmt == VPX_IMG_FMT_I42216 ? ""C422p10<S2SV_blank>XYSCSS=422P10\\n"" : ""C420p10<S2SV_blank>XYSCSS=420P10\\n"" ; break ; case 12 : color = fmt == VPX_IMG_FMT_I44416 ? ""C444p12<S2SV_blank>XYSCSS=444P12\\n"" : fmt == VPX_IMG_FMT_I42216 ? ""C422p12<S2SV_blank>XYSCSS=422P12\\n"" : ""C420p12<S2SV_blank>XYSCSS=420P12\\n"" ; break ; case 14 : color = fmt == VPX_IMG_FMT_I44416 ? ""C444p14<S2SV_blank>XYSCSS=444P14\\n"" : fmt == VPX_IMG_FMT_I42216 ? ""C422p14<S2SV_blank>XYSCSS=422P14\\n"" : ""C420p14<S2SV_blank>XYSCSS=420P14\\n"" ; break ; case 16 : color = fmt == VPX_IMG_FMT_I44416 ? ""C444p16<S2SV_blank>XYSCSS=444P16\\n"" : fmt == VPX_IMG_FMT_I42216 ? ""C422p16<S2SV_blank>XYSCSS=422P16\\n"" : ""C420p16<S2SV_blank>XYSCSS=420P16\\n"" ; break ; default : color = NULL ; assert ( 0 ) ; } "
358,<S2SV_StartBug> const VP9_CONFIG * oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> const int max_rate = rc -> av_per_frame_bandwidth * <S2SV_EndBug> ,<S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> 
359,"<S2SV_StartBug> if ( nad_find_attr ( nad , 0 , - 1 , ""type"" , ""valid"" ) >= 0 ) { <S2SV_EndBug> ","<S2SV_ModStart> && xhash_get ( out -> states , rkey ) == ( void * ) conn_INPROGRESS "
360,<S2SV_StartBug> if ( flags & __GFP_ZERO ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
361,<S2SV_StartBug> static SvcInternal * get_svc_internal ( SvcContext * svc_ctx ) { <S2SV_EndBug> <S2SV_StartBug> SvcInternal * const si = ( SvcInternal * ) malloc ( sizeof ( * si ) ) ; <S2SV_EndBug> <S2SV_StartBug> return ( SvcInternal * ) svc_ctx -> internal ; <S2SV_EndBug> ,<S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> <S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> <S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> <S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> 
362,"<S2SV_StartBug> baswap ( ( void * ) dst , & l2cap_pi ( sock -> sk ) -> chan -> dst ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! l2cap_is_socket ( sock ) ) return - EBADFD ; 
363,"<S2SV_StartBug> jsWarn ( ""vertical_byte<S2SV_blank>only<S2SV_blank>works<S2SV_blank>for<S2SV_blank>1bpp<S2SV_blank>ArrayBuffers\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> { jsExceptionHere ( JSET_ERROR , <S2SV_ModEnd> <S2SV_ModStart> return 0 ; } if ( gfx . data . height & 7 ) { jsExceptionHere ( JSET_ERROR , ""height<S2SV_blank>must<S2SV_blank>be<S2SV_blank>a<S2SV_blank>multiple<S2SV_blank>of<S2SV_blank>8<S2SV_blank>when<S2SV_blank>using<S2SV_blank>vertical_byte\\n"" ) ; return 0 ; } "
364,"<S2SV_StartBug> vp9_prob oldp , vp9_prob * bestp , <S2SV_EndBug> <S2SV_StartBug> vp9_prob upd ) { <S2SV_EndBug> <S2SV_StartBug> vp9_prob newp , bestnewp = oldp ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_prob oldp , vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> "
365,<S2SV_StartBug> if ( x & ( 1 << i ) ) return i ; <S2SV_EndBug> ,<S2SV_ModStart> 1U << ( unsigned int ) <S2SV_ModEnd> 
366,"<S2SV_StartBug> if ( secure_decrypt ( data , sizeof ( * header ) , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return secure_decrypt ( file , header -> file_size , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> int ret = - 1 ; <S2SV_ModStart> goto secure_wipe_keys <S2SV_ModEnd> <S2SV_ModStart> goto secure_wipe_keys <S2SV_ModEnd> <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> secure_wipe_keys : wipe_keys ( ) ; return ret ; 
367,<S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> if ( ! signal_pending ( current ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> out_put_key : <S2SV_EndBug> ,<S2SV_ModStart> out <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
368,<S2SV_StartBug> u16 offset = sizeof ( struct ipv6hdr ) ; <S2SV_EndBug> <S2SV_StartBug> while ( offset + 1 <= packet_len ) { <S2SV_EndBug> <S2SV_StartBug> switch ( * * nexthdr ) { <S2SV_EndBug> <S2SV_StartBug> offset += ipv6_optlen ( exthdr ) ; <S2SV_EndBug> <S2SV_StartBug> exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> } return - EINVAL <S2SV_ModEnd> 
369,"<S2SV_StartBug> mm_segment_t old_fs ; <S2SV_EndBug> <S2SV_StartBug> ret = sys_wait4 ( pid , ustatus , options , ( struct rusage __user * ) & r ) ; <S2SV_EndBug> <S2SV_StartBug> err |= __put_user ( r . ru_utime . tv_sec , & ur -> ru_utime . tv_sec ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned int status = 0 ; <S2SV_ModStart> ( unsigned int __user * ) & status <S2SV_ModEnd> <S2SV_ModStart> put_user ( status , ustatus ) ; err |= "
370,"<S2SV_StartBug> int get_vp9_frame_buffer ( void * cb_priv , size_t min_size , <S2SV_EndBug> <S2SV_StartBug> ext_fb_list -> ext_fb [ i ] . data = ( uint8_t * ) malloc ( min_size ) ; <S2SV_EndBug> ","<S2SV_ModStart> static <S2SV_ModStart> calloc ( min_size , sizeof ( uint8_t ) <S2SV_ModEnd> "
371,"<S2SV_StartBug> SkipRGBMipmaps ( image , dds_info , 4 ) ; <S2SV_EndBug> ","<S2SV_ModStart> return ( <S2SV_ModStart> , exception ) ) <S2SV_ModEnd> "
372,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( s == 0 ) return ( ( void * ) NULL ) ; 
373,<S2SV_StartBug> & dec_tables ) ; <S2SV_EndBug> <S2SV_StartBug> & dec_tables ) ; <S2SV_EndBug> ,<S2SV_ModStart> dec_tables . T <S2SV_ModEnd> <S2SV_ModStart> dec_tables . T <S2SV_ModEnd> 
374,<S2SV_StartBug> if ( ret < 0 ) <S2SV_EndBug> ,<S2SV_ModStart> && ! p -> skip_release_on_error 
375,"<S2SV_StartBug> Com_Printf ( ""Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; return ; } if ( ! COM_CompareExtension ( filename , "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\"".cfg\\""<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"" "
376,<S2SV_StartBug> if ( ! ( skb -> dev -> flags & IFF_LOOPBACK ) ) { <S2SV_EndBug> ,<S2SV_ModStart> skb == NULL || 
377,"<S2SV_StartBug> height , <S2SV_EndBug> <S2SV_StartBug> if ( bytes_per_line == 0 ) <S2SV_EndBug> <S2SV_StartBug> bytes_per_line = image -> columns ; <S2SV_EndBug> <S2SV_StartBug> length = image -> rows * ( image -> columns + image -> columns % 2 ) ; <S2SV_EndBug> <S2SV_StartBug> SetPixelIndex ( image , * p ++ , q ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( image -> columns % 2 ) != 0 ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) { q = QueueAuthenticPixels ( image , 0 , y , <S2SV_ModEnd> <S2SV_ModStart> , 1 , exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ssize_t ) <S2SV_ModEnd> <S2SV_ModStart> ; x ++ ) { SetPixelIndex ( image , * p ++ , q ) ; q += GetPixelChannels ( image ) ; } if ( ( <S2SV_ModEnd> <S2SV_ModStart> != 0 ) p ++ ; if ( SyncAuthenticPixels ( image , exception ) == MagickFalse ) break ; if ( image -> previous == ( Image * ) NULL ) { status = SetImageProgress ( image , LoadImageTag , ( MagickOffsetType ) y , image -> rows ) ; if ( status == MagickFalse ) break ; } } } else { size_t bytes_per_pixel ; bytes_per_pixel = 3 ; if ( image -> alpha_trait != UndefinedPixelTrait ) bytes_per_pixel ++ ; if ( bytes_per_line == 0 ) bytes_per_line = bytes_per_pixel * image -> columns <S2SV_ModEnd> <S2SV_ModStart> if ( image -> alpha_trait != UndefinedPixelTrait ) SetPixelAlpha ( image , ScaleCharToQuantum ( <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> if ( sun_info . type == RT_STANDARD ) { SetPixelBlue ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelGreen ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelRed ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; } else { SetPixelRed ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelGreen ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelBlue ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; } if ( image -> colors != 0 ) { SetPixelRed ( image , ClampToQuantum ( image -> colormap [ ( ssize_t ) GetPixelRed ( image , q ) ] . red ) , q ) ; SetPixelGreen ( image , ClampToQuantum ( image -> colormap [ ( ssize_t ) GetPixelGreen ( image , q ) ] . green ) , q ) ; SetPixelBlue ( image , ClampToQuantum ( image -> colormap [ ( ssize_t ) GetPixelBlue ( image , q ) ] . blue ) , q ) ; } <S2SV_ModStart>  <S2SV_ModEnd> "
378,<S2SV_StartBug> if ( L_ICANON ( tty ) ) <S2SV_EndBug> ,<S2SV_ModStart> && ! L_EXTPROC ( tty ) 
379,"<S2SV_StartBug> slapi_pblock_set ( pb , SLAPI_PB_RESULT_TEXT , ""at<S2SV_blank>least<S2SV_blank>one<S2SV_blank>required<S2SV_blank>attribute<S2SV_blank>has<S2SV_blank>been<S2SV_blank>moved<S2SV_blank>to<S2SV_blank>the<S2SV_blank>BDB<S2SV_blank>scecific<S2SV_blank>configuration<S2SV_blank>entry"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> SLAPI_RESULT_TEXT <S2SV_ModEnd> 
380,<S2SV_StartBug> ipc_lock_object ( & shp -> shm_perm ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( shp -> shm_file == NULL ) { ipc_unlock_object ( & shp -> shm_perm ) ; err = - EIDRM ; goto out_unlock ; } 
381,"<S2SV_StartBug> af -> from_addr_param ( & addr , addr_param , <S2SV_EndBug> ",<S2SV_ModStart> if ( af == NULL ) break ; 
382,"<S2SV_StartBug> ih264d_create_op_t * ps_create_op ; <S2SV_EndBug> <S2SV_StartBug> WORD32 ret ; <S2SV_EndBug> <S2SV_StartBug> ret = ih264d_allocate_static_bufs ( & dec_hdl , pv_api_ip , pv_api_op ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( IV_FAIL == ret ) && ( NULL != dec_hdl ) ) <S2SV_EndBug> <S2SV_StartBug> ih264d_free_static_bufs ( dec_hdl ) ; <S2SV_EndBug> ","<S2SV_ModStart> ih264d_create_ip_t * ps_create_ip ; <S2SV_ModStart> ; ps_create_ip = ( ih264d_create_ip_t * ) pv_api_ip <S2SV_ModStart> dec_hdl = NULL ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { if ( dec_hdl ) { if ( dec_hdl -> pv_codec_handle <S2SV_ModEnd> <S2SV_ModStart> } else { void ( * pf_aligned_free ) ( void * pv_mem_ctxt , void * pv_buf ) ; void * pv_mem_ctxt ; pf_aligned_free = ps_create_ip -> s_ivd_create_ip_t . pf_aligned_free ; pv_mem_ctxt = ps_create_ip -> s_ivd_create_ip_t . pv_mem_ctxt ; pf_aligned_free ( pv_mem_ctxt , dec_hdl ) ; } } "
383,<S2SV_StartBug> ip6_rt_put ( rt ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! ( arg -> flags & FIB_LOOKUP_NOREF ) ) 
384,<S2SV_StartBug> if ( rm -> m_inc . i_hdr . h_flags & RDS_FLAG_CONG_BITMAP ) { <S2SV_EndBug> <S2SV_StartBug> return sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ; <S2SV_EndBug> <S2SV_StartBug> return sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc . i_hdr . h_len ) ; <S2SV_EndBug> ,"<S2SV_ModStart> struct scatterlist * sgp = & rm -> data . op_sg [ sg ] ; int ret = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc . i_hdr . h_len ) ; <S2SV_ModStart> ret = min_t ( int , ret , sgp -> length - conn -> c_xmit_data_off ) ; goto out <S2SV_ModEnd> <S2SV_ModStart> out : return ret <S2SV_ModEnd> "
385,<S2SV_StartBug> arg_allow_debuggers = 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> struct utsname u ; int rv = uname ( & u ) ; if ( rv != 0 ) errExit ( ""uname"" ) ; int major ; int minor ; if ( 2 != sscanf ( u . release , ""%d.%d"" , & major , & minor ) ) { fprintf ( stderr , ""Error:<S2SV_blank>cannot<S2SV_blank>extract<S2SV_blank>Linux<S2SV_blank>kernel<S2SV_blank>version:<S2SV_blank>%s\\n"" , u . version ) ; exit ( 1 ) ; } if ( major < 4 || ( major == 4 && minor < 8 ) ) { fprintf ( stderr , ""Error:<S2SV_blank>--allow-debuggers<S2SV_blank>is<S2SV_blank>disabled<S2SV_blank>on<S2SV_blank>Linux<S2SV_blank>kernels<S2SV_blank>prior<S2SV_blank>to<S2SV_blank>4.8.<S2SV_blank>"" ""A<S2SV_blank>bug<S2SV_blank>in<S2SV_blank>ptrace<S2SV_blank>call<S2SV_blank>allows<S2SV_blank>a<S2SV_blank>full<S2SV_blank>bypass<S2SV_blank>of<S2SV_blank>the<S2SV_blank>seccomp<S2SV_blank>filter.<S2SV_blank>"" ""Your<S2SV_blank>current<S2SV_blank>kernel<S2SV_blank>version<S2SV_blank>is<S2SV_blank>%d.%d.\\n"" , major , minor ) ; exit ( 1 ) ; } "
386,<S2SV_StartBug> } else <S2SV_EndBug> ,"<S2SV_ModStart> else if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) && ! in_group_p ( inode -> i_gid ) && ! capable_wrt_inode_uidgid ( dir , CAP_FSETID ) ) mode &= ~ S_ISGID ; "
387,<S2SV_StartBug> if ( ( ! ( sfp = ( Sg_fd * ) filp -> private_data ) ) || ( ! ( sdp = sfp -> parentdp ) ) ) <S2SV_EndBug> ,"<S2SV_ModStart> unlikely ( segment_eq ( get_fs ( ) , KERNEL_DS ) ) ) return - EINVAL ; if ( "
388,<S2SV_StartBug> long newpos ; <S2SV_EndBug> ,<S2SV_ModStart> size_t <S2SV_ModEnd> 
389,"<S2SV_StartBug> uint16_t hmi_bpm = 0 ; <S2SV_EndBug> <S2SV_StartBug> } * note ; <S2SV_EndBug> <S2SV_StartBug> if ( hmi_data [ 0 ] == 0xfe ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( hmi_data [ 1 ] == 0x15 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( ( setup_ret = _WM_SetupMidiEvent ( hmi_mdi , hmi_data , hmi_running_event [ i ] ) ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> note [ hmi_tmp ] . length = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( * hmi_data > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> hmi_track_offset [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> } while ( * hmi_data > 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> hmi_track_offset [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> hmi_delta [ i ] = ( hmi_delta [ i ] << 7 ) | ( * hmi_data & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> hmi_track_offset [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> hmi_delta [ i ] = ( hmi_delta [ i ] << 7 ) | ( * hmi_data & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> hmi_data ++ ; <S2SV_EndBug> ","<S2SV_ModStart> uint32_t data_siz ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> hmi_track_offset [ i ] >= hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , ""file<S2SV_blank>too<S2SV_blank>short"" , 0 ) ; goto _hmi_end ; } data_siz = hmi_size - hmi_track_offset [ i ] ; if ( <S2SV_ModStart> hmi_tmp += 4 ; <S2SV_ModStart> hmi_tmp = 8 ; } else { hmi_tmp = 4 ; } hmi_data <S2SV_ModEnd> <S2SV_ModStart> hmi_track_offset [ i ] += 4 ; if ( hmi_tmp > data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , ""file<S2SV_blank>too<S2SV_blank>short"" , 0 ) ; goto _hmi_end ; } data_siz -= hmi_tmp ; <S2SV_ModStart> , data_siz <S2SV_ModStart> data_siz -= setup_ret ; <S2SV_ModStart> data_siz && <S2SV_ModStart> if ( ! data_siz ) break ; <S2SV_ModStart> data_siz -- ; <S2SV_ModStart> ; } if ( ! data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , ""file<S2SV_blank>too<S2SV_blank>short"" , 0 ) ; goto _hmi_end <S2SV_ModStart> data_siz -- ; <S2SV_ModStart> data_siz -= setup_ret ; } } if ( data_siz && <S2SV_ModEnd> <S2SV_ModStart> if ( ! data_siz ) break ; <S2SV_ModStart> data_siz -- ; <S2SV_ModStart> if ( ! data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , ""file<S2SV_blank>too<S2SV_blank>short"" , 0 ) ; goto _hmi_end ; } <S2SV_ModStart> ; data_siz -- "
390,"<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>title<S2SV_blank>\'%s\'"" , gplot -> title ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>xlabel<S2SV_blank>\'%s\'"" , gplot -> xlabel ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>ylabel<S2SV_blank>\'%s\'"" , gplot -> ylabel ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>terminal<S2SV_blank>png;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>terminal<S2SV_blank>postscript;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>terminal<S2SV_blank>latex;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>logscale<S2SV_blank>x"" ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>logscale<S2SV_blank>y"" ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s"" , <S2SV_EndBug> ",<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> 
391,<S2SV_StartBug> struct rt6_info * rt = ( struct rt6_info * ) dst ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( dst -> ops -> family != AF_INET6 ) { dst_release ( dst ) ; return NULL ; } rt = ( struct rt6_info * ) dst 
392,"<S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> ea_bdebug ( bh , ""modifying<S2SV_blank>in-place"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ce ) <S2SV_EndBug> <S2SV_StartBug> int offset ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> __u32 hash = le32_to_cpu ( header -> h_hash ) ; <S2SV_ModStart> mb2_cache_entry_delete_block ( EXT2_SB ( sb ) -> s_mb_cache , hash , bh -> b_blocknr <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
393,"<S2SV_StartBug> u8 ip_proto = 0 ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return true ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> key_basic -> n_proto = proto ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> key_basic -> n_proto = proto ; <S2SV_EndBug> <S2SV_StartBug> if ( skb_flow_dissector_uses_key ( flow_dissector , <S2SV_EndBug> ","<S2SV_ModStart> ; bool ret = false <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> goto out_good <S2SV_ModEnd> <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> goto out_good ; } goto out_good <S2SV_ModEnd> <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> goto out_bad <S2SV_ModEnd> <S2SV_ModStart> if ( skb_flow_dissector_uses_key ( flow_dissector , FLOW_DISSECTOR_KEY_PORTS ) ) { key_ports = skb_flow_dissector_target ( flow_dissector , FLOW_DISSECTOR_KEY_PORTS , target_container ) ; key_ports -> ports = __skb_flow_get_ports ( skb , nhoff , ip_proto , data , hlen ) ; } out_good : ret = true ; out_bad : <S2SV_ModStart> return ret <S2SV_ModEnd> "
394,<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug> ,<S2SV_ModStart> Py_RETURN_NONE <S2SV_ModEnd> 
395,"<S2SV_StartBug> VP8Frame * av_uninit ( curframe ) , * prev_frame ; <S2SV_EndBug> ",<S2SV_ModStart> ; av_assert0 ( avctx -> pix_fmt == AV_PIX_FMT_YUVA420P || avctx -> pix_fmt == AV_PIX_FMT_YUV420P ) 
396,"<S2SV_StartBug> show ( obj , base , name , cb_data ) ; <S2SV_EndBug> ","<S2SV_ModStart> strbuf_addstr ( base , name ) ; <S2SV_ModStart> -> buf , cb_data <S2SV_ModEnd> "
397,"<S2SV_StartBug> int64_t off = s -> off ; <S2SV_EndBug> <S2SV_StartBug> ""Range:<S2SV_blank>bytes=%"" PRId64 ""-"" , s -> off ) ; <S2SV_EndBug> <S2SV_StartBug> s -> filesize = - 1 ; <S2SV_EndBug> ",<S2SV_ModStart> uint64_t <S2SV_ModEnd> <S2SV_ModStart> PRIu64 <S2SV_ModEnd> <S2SV_ModStart> UINT64_MAX <S2SV_ModEnd> 
398,"<S2SV_StartBug> number_planes , <S2SV_EndBug> <S2SV_StartBug> if ( ( number_pixels * number_planes ) != ( size_t ) ( number_pixels * number_planes ) ) <S2SV_EndBug> <S2SV_StartBug> pixel_info_length = image -> columns * image -> rows * MagickMax ( number_planes , 4 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , number_planes_filled <S2SV_ModStart> number_planes_filled = ( number_planes % 2 == 0 ) ? number_planes : number_planes + 1 ; <S2SV_ModStart> number_planes_filled <S2SV_ModEnd> <S2SV_ModStart> number_planes_filled <S2SV_ModEnd> <S2SV_ModStart> number_planes_filled <S2SV_ModEnd> "
399,"<S2SV_StartBug> uint32 rows , uint32 cols , int outskew , int inskew ) <S2SV_EndBug> ",<S2SV_ModStart> int64 <S2SV_ModEnd> 
400,"<S2SV_StartBug> if ( pos + 8 > len ) { <S2SV_EndBug> <S2SV_StartBug> int min_val = ( ut32 ) ( UINT ( data , pos + 4 ) ) , <S2SV_EndBug> ",<S2SV_ModStart> + 8 <S2SV_ModStart> const <S2SV_ModStart> ; const int <S2SV_ModEnd> 
401,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""%04x:%s<S2SV_blank>"" , panid , le64addr_string ( ndo , p + 2 ) ) ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
402,<S2SV_StartBug> interface = intf -> cur_altsetting ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( interface -> desc . bNumEndpoints < 1 ) return - EINVAL 
403,<S2SV_StartBug> const char * bufptr ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( cnt < 0 ) { jas_deprecated ( ""negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_write"" ) ; } "
404,"<S2SV_StartBug> static void update_read_synchronize ( rdpUpdate * update , wStream * s ) <S2SV_EndBug> <S2SV_StartBug> Stream_Seek_UINT16 ( s ) ; <S2SV_EndBug> ","<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> return Stream_SafeSeek ( s , 2 <S2SV_ModEnd> "
405,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""[|icmp6]"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , icmp6_tstr <S2SV_ModEnd> "
406,<S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
407,<S2SV_StartBug> uchar buf [ JPG_MAGICLEN ] ; <S2SV_EndBug> ,<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
408,<S2SV_StartBug> ps_dec -> pf_vld_inv_quant = impeg2d_vld_inv_quant_mpeg1 ; <S2SV_EndBug> ,<S2SV_ModStart> u2_forw_f_code = 7 ; ps_dec -> u2_back_f_code = 7 ; ps_dec -> 
409,"<S2SV_StartBug> memcpy ( vs_param_set -> ie , priv -> vs_ie [ id ] . ie , <S2SV_EndBug> ","<S2SV_ModStart> if ( le16_to_cpu ( vs_param_set -> header . len ) > MWIFIEX_MAX_VSIE_LEN ) { mwifiex_dbg ( priv -> adapter , ERROR , ""Invalid<S2SV_blank>param<S2SV_blank>length!\\n"" ) ; break ; } "
410,"<S2SV_StartBug> static int match ( Reinst * pc , const char * sp , const char * bol , int flags , Resub * out ) <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> for ( ; ; ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( match ( pc -> x , sp , bol , flags , & scratch ) ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! match ( pc -> x , sp , bol , flags , out ) ) <S2SV_EndBug> <S2SV_StartBug> if ( match ( pc -> x , sp , bol , flags , & scratch ) ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> , int depth <S2SV_ModStart> result ; int <S2SV_ModStart> if ( depth > MAXREC ) return - 1 ; <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> result = <S2SV_ModEnd> <S2SV_ModStart> , depth + 1 ) ; if ( result == - 1 ) return - 1 ; if ( result == 0 <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> result = <S2SV_ModEnd> <S2SV_ModStart> , depth + 1 ) ; if ( result == - 1 ) return - 1 ; if ( result == 1 ) return 1 <S2SV_ModEnd> <S2SV_ModStart> result = <S2SV_ModEnd> <S2SV_ModStart> , depth + 1 ) ; if ( result == - 1 ) return - 1 ; if ( result == 0 ) return 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> "
411,<S2SV_StartBug> m -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
412,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> ","<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : gss_release_buffer ( & minor_stat , & client_name ) ; gss_release_buffer ( & minor_stat , & service_name ) ; <S2SV_ModEnd> "
413,"<S2SV_StartBug> _ ( ""_Launch<S2SV_blank>Anyway"" ) , RESPONSE_RUN ) ; <S2SV_EndBug> <S2SV_StartBug> _ ( ""Mark<S2SV_blank>as<S2SV_blank>_Trusted"" ) , RESPONSE_MARK_TRUSTED ) ; <S2SV_EndBug> <S2SV_StartBug> gtk_dialog_add_button ( GTK_DIALOG ( dialog ) , <S2SV_EndBug> ","<S2SV_ModStart> ""_Cancel"" ) , GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ) , GTK_RESPONSE_CANCEL <S2SV_ModEnd> <S2SV_ModStart> ""Trust<S2SV_blank>and<S2SV_blank>_Launch"" ) , GTK_RESPONSE_OK <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
414,<S2SV_StartBug> size_t size = ( alignment - MALLOC_ALIGNMENT ) + bytes ; <S2SV_EndBug> ,<S2SV_ModStart> if ( size < bytes ) { return NULL ; } 
415,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> hook_del_nick_can_register ( check_registration_keywords ) ; hook_del_user_can_register ( check_registration_keywords ) ; del_conf_item ( ""ANOPE_FLAGS_COMPAT"" , & chansvs . me -> conf_table ) ; "
416,"<S2SV_StartBug> skb -> ip_summed = CHECKSUM_PARTIAL ; <S2SV_EndBug> <S2SV_StartBug> __skb_queue_tail ( queue , skb ) ; <S2SV_EndBug> ","<S2SV_ModStart> csum = 0 ; __skb_queue_tail ( queue , skb ) ; } else if ( skb_is_gso ( skb ) ) { goto append ; } skb -> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> append : <S2SV_ModEnd> "
417,<S2SV_StartBug> r = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
418,"<S2SV_StartBug> FIRSTPASS_STATS this_frame ; <S2SV_EndBug> <S2SV_StartBug> const int is_spatial_svc = ( svc -> number_spatial_layers > 1 ) && <S2SV_EndBug> <S2SV_StartBug> ( svc -> number_temporal_layers == 1 ) ; <S2SV_EndBug> <S2SV_StartBug> double frame_rate ; <S2SV_EndBug> <S2SV_StartBug> twopass = & svc -> layer_context [ svc -> spatial_layer_id ] . twopass ; <S2SV_EndBug> <S2SV_StartBug> twopass -> total_stats = * twopass -> stats_in_end ; <S2SV_EndBug> <S2SV_StartBug> twopass -> total_left_stats = twopass -> total_stats ; <S2SV_EndBug> <S2SV_StartBug> frame_rate = 10000000.0 * twopass -> total_stats . count / <S2SV_EndBug> <S2SV_StartBug> if ( is_spatial_svc ) { <S2SV_EndBug> <S2SV_StartBug> ( int64_t ) ( twopass -> total_stats . duration * <S2SV_EndBug> <S2SV_StartBug> twopass -> bits_left = ( int64_t ) ( twopass -> total_stats . duration * <S2SV_EndBug> <S2SV_StartBug> cpi -> output_framerate = oxcf -> framerate ; <S2SV_EndBug> <S2SV_StartBug> double sum_iiratio = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> start_pos = twopass -> stats_in ; <S2SV_EndBug> <S2SV_StartBug> while ( input_stats ( twopass , & this_frame ) != EOF ) { <S2SV_EndBug> <S2SV_StartBug> calculate_modified_err ( cpi , & this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> twopass -> modified_error_left = twopass -> modified_error_total ; <S2SV_EndBug> ","<S2SV_ModStart> const VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> is_two_pass_svc <S2SV_ModEnd> <S2SV_ModStart> || <S2SV_ModEnd> <S2SV_ModStart> > <S2SV_ModEnd> <S2SV_ModStart> TWO_PASS * const twopass = is_two_pass_svc ? <S2SV_ModEnd> <S2SV_ModStart> : & cpi -> twopass ; double frame_rate ; FIRSTPASS_STATS * stats ; <S2SV_ModEnd> <S2SV_ModStart> stats = & <S2SV_ModStart> ; * stats <S2SV_ModStart> * stats <S2SV_ModEnd> <S2SV_ModStart> stats -> count / stats -> <S2SV_ModEnd> <S2SV_ModStart> is_two_pass_svc <S2SV_ModEnd> <S2SV_ModStart> stats -> <S2SV_ModEnd> <S2SV_ModStart> stats -> <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const double avg_error = stats -> coded_error / DOUBLE_DIVIDE_CHECK ( stats -> count ) ; const FIRSTPASS_STATS * s = twopass -> stats_in ; double modified_error_total <S2SV_ModEnd> <S2SV_ModStart> twopass -> modified_error_min = ( avg_error * oxcf -> two_pass_vbrmin_section ) / 100 ; twopass -> modified_error_max = ( avg_error * oxcf -> two_pass_vbrmax_section ) / 100 <S2SV_ModEnd> <S2SV_ModStart> s < twopass -> stats_in_end ) { <S2SV_ModEnd> <S2SV_ModStart> twopass , oxcf , s ) ; ++ s <S2SV_ModEnd> <S2SV_ModStart> modified_error_total ; } cpi -> rc . vbr_bits_off_target = 0 ; cpi -> rc . vbr_bits_off_target_fast = 0 ; cpi -> rc . rate_error_estimate = 0 ; twopass -> kf_zeromotion_pct = 100 ; twopass -> last_kfgroup_zeromotion_pct = 100 ; if ( oxcf -> resize_mode != RESIZE_NONE ) { vp9_init_subsampling ( cpi <S2SV_ModEnd> "
419,<S2SV_StartBug> int overflow_error = 0 ; <S2SV_EndBug> <S2SV_StartBug> res = ( LineContribType * ) gdMalloc ( sizeof ( LineContribType ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( u = 0 ; u < line_length ; u ++ ) { <S2SV_EndBug> <S2SV_StartBug> res -> ContribRow [ u ] . Weights = ( double * ) gdMalloc ( windows_size * sizeof ( double ) ) ; <S2SV_EndBug> <S2SV_StartBug> u -- ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i <= u ; i ++ ) { <S2SV_EndBug> ,"<S2SV_ModStart> size_t weights_size ; if ( overflow2 ( windows_size , sizeof ( double ) ) ) { return NULL ; } else { weights_size = windows_size * sizeof ( double ) ; } res = ( LineContribType * ) gdMalloc ( sizeof ( LineContribType ) ) ; if ( ! res ) { return NULL ; } res -> WindowSize = windows_size ; res -> LineLength = line_length ; if ( overflow2 ( line_length , sizeof ( ContributionType ) ) ) { gdFree ( res ) ; return NULL ; } res -> ContribRow = ( ContributionType * ) gdMalloc ( line_length * sizeof ( ContributionType ) ) ; if ( res -> ContribRow == NULL ) { gdFree ( res ) ; return NULL ; } for ( u <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> weights_size ) ; if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> < <S2SV_ModEnd> "
420,"<S2SV_StartBug> Stream_Read_UINT16 ( s , <S2SV_EndBug> ",<S2SV_ModStart> if ( Stream_GetRemainingLength ( s ) < 8 ) return FALSE ; 
421,<S2SV_StartBug> struct siginfo info ; <S2SV_EndBug> ,<S2SV_ModStart> = { } 
422,"<S2SV_StartBug> DRM_DEBUG ( ""clip<S2SV_blank>rectangles<S2SV_blank>are<S2SV_blank>only<S2SV_blank>valid<S2SV_blank>with<S2SV_blank>the<S2SV_blank>render<S2SV_blank>ring\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; return - EINVAL ; } if ( args -> num_cliprects > UINT_MAX / sizeof ( * cliprects ) ) { DRM_DEBUG ( ""execbuf<S2SV_blank>with<S2SV_blank>%u<S2SV_blank>cliprects\\n"" , args -> num_cliprects "
423,"<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_lineno ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_lineno ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_int ( tmp , & lineno , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_op ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_op ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( values , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_left ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_left ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & left , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_op ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_op ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_args ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_args ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_test ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_test ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & test , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( keys , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( values , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( elts , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_elt ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_elt ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> comprehension_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_comprehension ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( generators , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_elt ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_elt ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> comprehension_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_comprehension ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( generators , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_key ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_key ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & key , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> comprehension_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_comprehension ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( generators , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_elt ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_elt ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> comprehension_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_comprehension ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( generators , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_left ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_left ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> cmpop_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_cmpop ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( ops , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( comparators , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_func ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_func ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( args , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> keyword_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_keyword ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( keywords , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_n ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_n ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_s ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_s ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( values , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_s ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_s ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_attr ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_slice ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_id ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_id ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_elts ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( elts , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_ctx ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_elts ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( elts , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""elts\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Tuple"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""lineno\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>expr"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_int ( tmp , & lineno , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_col_offset , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""col_offset\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>expr"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> col_offset <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""op\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>BoolOp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_boolop ( tmp , & op , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_values , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""values\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>BoolOp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""left\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>BinOp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & left , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_op , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""op\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>BinOp"" ) ; return 1 ; } else { int res ; res = obj2ast_operator ( tmp , & op , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj , & PyId_right , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""right\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>BinOp"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> right <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""op\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>UnaryOp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_unaryop ( tmp , & op , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_operand , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""operand\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>UnaryOp"" ) ; return 1 ; } else { int res ; res = obj2ast_expr ( tmp , & operand <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""args\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Lambda"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_arguments ( tmp , & args , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Lambda"" ) ; return 1 ; } else { int res ; res = obj2ast_expr ( tmp , & body <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""test\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>IfExp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & test , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>IfExp"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> body , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj , & PyId_orelse , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""orelse\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>IfExp"" ) ; return 1 ; } else { int res ; res = obj2ast_expr ( tmp , & orelse , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } * out = IfExp ( test , body , orelse , lineno , col_offset , arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = PyObject_IsInstance ( obj , ( PyObject * ) Dict_type ) ; if ( isinstance == - 1 ) { return 1 ; } if ( isinstance ) { asdl_seq * keys ; asdl_seq * values ; if ( lookup_attr_id ( obj , & PyId_keys , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""keys\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Dict"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_values , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""values\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Dict"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> * out = Dict ( keys , values , lineno , col_offset , arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = PyObject_IsInstance ( obj , ( PyObject * ) Set_type ) ; if ( isinstance == - 1 ) { return 1 ; } if ( isinstance ) { asdl_seq * elts ; if ( lookup_attr_id ( obj , & PyId_elts , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""elts\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Set"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""elt\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ListComp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & elt , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_generators , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""generators\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ListComp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""elt\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>SetComp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & elt , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_generators , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""generators\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>SetComp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""key\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>DictComp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & key , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_value , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>DictComp"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> value <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_generators , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""generators\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>DictComp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""elt\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>GeneratorExp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & elt , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_generators , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""generators\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>GeneratorExp"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Await"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; value = NULL ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>YieldFrom"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""left\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Compare"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & left , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_ops , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""ops\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Compare"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_comparators , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""comparators\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Compare"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""func\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Call"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & func , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_args , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""args\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Call"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_keywords , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""keywords\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Call"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""n\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Num"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""s\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Str"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>FormattedValue"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & value , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_conversion , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; conversion = 0 ; } else { int res ; res = obj2ast_int ( tmp , & conversion , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj , & PyId_format_spec , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; format_spec = NULL ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> format_spec , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } * out = FormattedValue ( value , conversion , format_spec , lineno , col_offset , arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = PyObject_IsInstance ( obj , ( PyObject * ) JoinedStr_type ) ; if ( isinstance == - 1 ) { return 1 ; } if ( isinstance ) { asdl_seq * values ; if ( lookup_attr_id ( obj , & PyId_values , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""values\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>JoinedStr"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""s\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Bytes"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>NameConstant"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Constant"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Attribute"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & value , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_attr , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""attr\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Attribute"" ) ; return 1 ; } else { int res ; res = obj2ast_identifier ( tmp , & attr <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_ctx , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""ctx\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Attribute"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr_context ( tmp , & ctx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Subscript"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & value , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_slice , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""slice\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Subscript"" ) ; return 1 ; } else { int res ; res = obj2ast_slice ( tmp , & slice <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_ctx , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""ctx\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Subscript"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr_context ( tmp , & ctx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Starred"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & value , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_ctx , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""ctx\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Starred"" ) ; return 1 ; } else { int res ; res = obj2ast_expr_context ( tmp , & ctx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""id\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Name"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_identifier ( tmp , & id , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_ctx , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""ctx\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Name"" ) ; return 1 ; } else { int res ; res = obj2ast_expr_context ( tmp , & ctx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""elts\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>List"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_ctx , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""ctx\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>List"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""elts\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Tuple"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_ctx , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""ctx\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Tuple"" ) ; return 1 ; } else { int res ; res = obj2ast_expr_context ( tmp , & ctx , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } * out = Tuple ( elts , ctx , lineno , col_offset , arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } PyErr_Format <S2SV_ModEnd> <S2SV_ModStart> ""expected<S2SV_blank>some<S2SV_blank>sort<S2SV_blank>of<S2SV_blank>expr,<S2SV_blank>but<S2SV_blank>got<S2SV_blank>%R"" , obj <S2SV_ModEnd> "
424,"<S2SV_StartBug> parse_field ( netdissect_options * ndo , const char * * pptr , int * len ) <S2SV_EndBug> <S2SV_StartBug> if ( * len <= 0 || ! pptr || ! * pptr ) <S2SV_EndBug> <S2SV_StartBug> while ( * pptr <= ( const char * ) ndo -> ndo_snapend && * len >= 0 && * * pptr ) { <S2SV_EndBug> <S2SV_StartBug> if ( * len < 0 || * pptr > ( const char * ) ndo -> ndo_snapend ) <S2SV_EndBug> ","<S2SV_ModStart> , int * truncated <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> for ( ; ; ) { if ( * len == 0 ) { return NULL ; } if ( ! ND_TTEST ( <S2SV_ModEnd> <S2SV_ModStart> ) { * truncated = 1 ; return NULL ; } if ( * * pptr == '\\0' ) { break ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
425,<S2SV_StartBug> if ( ! ( assigned_dev -> flags & KVM_DEV_ASSIGN_ENABLE_IOMMU ) ) <S2SV_EndBug> <S2SV_StartBug> if ( pci_enable_device ( dev ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> u8 header_type ; <S2SV_ModStart> pci_read_config_byte ( dev , PCI_HEADER_TYPE , & header_type ) ; if ( ( header_type & PCI_HEADER_TYPE ) != PCI_HEADER_TYPE_NORMAL ) { r = - EPERM ; goto out_put ; } r = probe_sysfs_permissions ( dev ) ; if ( r ) goto out_put ; "
426,<S2SV_StartBug> flush_rq -> mq_ctx = first_rq -> mq_ctx ; <S2SV_EndBug> <S2SV_StartBug> flush_rq -> tag = first_rq -> tag ; <S2SV_EndBug> ,"<S2SV_ModStart> struct blk_mq_hw_ctx * hctx ; <S2SV_ModStart> ; fq -> orig_rq = first_rq ; hctx = q -> mq_ops -> map_queue ( q , first_rq -> mq_ctx -> cpu ) ; blk_mq_tag_set_rq ( hctx , first_rq -> tag , flush_rq ) "
427,<S2SV_StartBug> struct kvm_lapic * apic = vcpu -> arch . apic ; <S2SV_EndBug> <S2SV_StartBug> vapic = kmap_atomic ( vcpu -> arch . apic -> vapic_page ) ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> kvm_write_guest_cached ( vcpu -> kvm , & <S2SV_ModEnd> <S2SV_ModStart> vapic_cache , & data , sizeof ( u32 ) <S2SV_ModEnd> "
428,"<S2SV_StartBug> dtls1_process_buffered_records ( s ) ; <S2SV_EndBug> <S2SV_StartBug> dtls1_buffer_record ( s , & ( s -> d1 -> unprocessed_rcds ) , rr -> seq_num ) ; <S2SV_EndBug> <S2SV_StartBug> return ( 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( <S2SV_ModStart> < 0 ) return - 1 <S2SV_ModStart> if ( <S2SV_ModStart> ) < 0 ) return - 1 ; dtls1_record_bitmap_update ( s , bitmap <S2SV_ModStart> dtls1_record_bitmap_update ( s , bitmap ) ; "
429,<S2SV_StartBug> if ( ctx -> img_avail ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( * iter ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> frame_parallel_decode && ctx -> available_threads > 0 && ! ctx -> flushed ) { return NULL ; } if ( ctx -> num_cache_frames > 0 ) { release_last_output_frame ( ctx ) ; ctx -> last_show_frame = ctx -> frame_cache [ ctx -> frame_cache_read ] . fb_idx ; if ( ctx -> need_resync ) return NULL ; img = & ctx -> frame_cache [ ctx -> frame_cache_read ] . img ; ctx -> frame_cache_read = ( ctx -> frame_cache_read + 1 ) % FRAME_CACHE_SIZE ; -- ctx -> num_cache_frames ; return img ; } if <S2SV_ModEnd> <S2SV_ModStart> == NULL && ctx -> frame_workers != NULL ) { do { YV12_BUFFER_CONFIG sd ; vp9_ppflags_t flags = { 0 , 0 , 0 } ; const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) ; VPxWorker * const worker = & ctx -> frame_workers [ ctx -> next_output_worker_id ] ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; ctx -> next_output_worker_id = ( ctx -> next_output_worker_id + 1 ) % ctx -> num_frame_workers ; if ( ctx -> base . init_flags & VPX_CODEC_USE_POSTPROC ) set_ppflags ( ctx , & flags ) ; if ( winterface -> sync ( worker ) ) { if ( frame_worker_data -> received_frame == 1 ) { ++ ctx -> available_threads ; frame_worker_data -> received_frame = 0 ; check_resync ( ctx , frame_worker_data -> pbi ) ; } if ( vp9_get_raw_frame ( frame_worker_data -> pbi , & sd , & flags ) == 0 ) { VP9_COMMON * const cm = & frame_worker_data -> pbi -> common ; RefCntBuffer * const frame_bufs = cm -> buffer_pool -> frame_bufs ; release_last_output_frame ( ctx ) ; ctx -> last_show_frame = frame_worker_data -> pbi -> common . new_fb_idx ; if ( ctx -> need_resync ) return NULL ; yuvconfig2image ( & ctx -> img , & sd , frame_worker_data -> user_priv ) ; ctx -> img . fb_priv = frame_bufs [ cm -> new_fb_idx ] . raw_frame_buffer . priv ; img = & ctx -> img ; return img ; } } else { frame_worker_data -> received_frame = 0 ; ++ ctx -> available_threads ; ctx -> need_resync = 1 ; if ( ctx -> flushed != 1 ) return NULL ; } } while ( ctx -> next_output_worker_id != ctx -> next_submit_worker_id ) ; } return NULL <S2SV_ModEnd> "
430,"<S2SV_StartBug> . match_data . cmp = type -> match , <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> ",<S2SV_ModStart> key_default_cmp <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
431,<S2SV_StartBug> pairs = palloc ( count * sizeof ( Pairs ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , count , ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ; "
432,"<S2SV_StartBug> ptr = realloc ( priv -> EF_C_DevAut , len ) ; <S2SV_EndBug> <S2SV_StartBug> priv -> EF_C_DevAut_len = len ; <S2SV_EndBug> ",<S2SV_ModStart> if ( len > 0 ) { <S2SV_ModStart> } 
433,"<S2SV_StartBug> DBG_ENTER ( ""php_mysqlnd_rowp_read_text_protocol_aux"" ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned long len = php_mysqlnd_net_field_length ( & p ) ; <S2SV_EndBug> ","<S2SV_ModStart> const zend_uchar * const packet_end = ( zend_uchar * ) row_buffer -> ptr + data_size ; <S2SV_ModStart> const <S2SV_ModStart> if ( len != MYSQLND_NULL_LENGTH && ( ( p + len ) > packet_end ) ) { php_error_docref ( NULL , E_WARNING , ""Malformed<S2SV_blank>server<S2SV_blank>packet.<S2SV_blank>Field<S2SV_blank>length<S2SV_blank>pointing<S2SV_blank>"" MYSQLND_SZ_T_SPEC ""<S2SV_blank>bytes<S2SV_blank>after<S2SV_blank>end<S2SV_blank>of<S2SV_blank>packet"" , ( p + len ) - packet_end - 1 ) ; DBG_RETURN ( FAIL ) ; } "
434,<S2SV_StartBug> return ; <S2SV_EndBug> ,<S2SV_ModStart> 0 
435,<S2SV_StartBug> kfree ( rm -> atomic . op_notifier ) ; <S2SV_EndBug> ,<S2SV_ModStart> rm -> atomic . op_active = 0 ; 
436,<S2SV_StartBug> idata -> status = IMAP_FATAL ; <S2SV_EndBug> ,"<S2SV_ModStart> ; return ; } if ( strlen ( idata -> buf ) < litlen ) { mutt_debug ( 1 , ""Error<S2SV_blank>parsing<S2SV_blank>STATUS<S2SV_blank>mailbox\\n"" ) "
437,"<S2SV_StartBug> l_current_data = p_j2k -> m_specific_param . m_encoder . m_header_tile_data ; <S2SV_EndBug> <S2SV_StartBug> opj_write_bytes ( l_current_data , J2K_MS_MCO , 2 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> l_current_data = p_j2k -> m_specific_param . m_encoder . m_header_tile_data ; 
438,<S2SV_StartBug> return true ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( IS ( req -> method , METHOD_POST ) ) { const char * cookie = get_header ( req , ""Cookie"" ) ; const char * token = get_parameter ( req , ""securitytoken"" ) ; if ( ! cookie ) { LogError ( ""HttpRequest:<S2SV_blank>access<S2SV_blank>denied<S2SV_blank>--<S2SV_blank>client<S2SV_blank>[%s]:<S2SV_blank>missing<S2SV_blank>CSRF<S2SV_blank>token<S2SV_blank>cookie\\n"" , NVLSTR ( Socket_getRemoteHost ( req -> S ) ) ) ; send_error ( req , res , SC_FORBIDDEN , ""Invalid<S2SV_blank>CSRF<S2SV_blank>Token"" ) ; return false ; } if ( ! token ) { LogError ( ""HttpRequest:<S2SV_blank>access<S2SV_blank>denied<S2SV_blank>--<S2SV_blank>client<S2SV_blank>[%s]:<S2SV_blank>missing<S2SV_blank>CSRF<S2SV_blank>token<S2SV_blank>in<S2SV_blank>HTTP<S2SV_blank>parameter\\n"" , NVLSTR ( Socket_getRemoteHost ( req -> S ) ) ) ; send_error ( req , res , SC_FORBIDDEN , ""Invalid<S2SV_blank>CSRF<S2SV_blank>Token"" ) ; return false ; } if ( ! Str_startsWith ( cookie , ""securitytoken="" ) ) { LogError ( ""HttpRequest:<S2SV_blank>access<S2SV_blank>denied<S2SV_blank>--<S2SV_blank>client<S2SV_blank>[%s]:<S2SV_blank>no<S2SV_blank>CSRF<S2SV_blank>token<S2SV_blank>in<S2SV_blank>cookie\\n"" , NVLSTR ( Socket_getRemoteHost ( req -> S ) ) ) ; send_error ( req , res , SC_FORBIDDEN , ""Invalid<S2SV_blank>CSRF<S2SV_blank>Token"" ) ; return false ; } if ( Str_compareConstantTime ( cookie + 14 , token ) ) { LogError ( ""HttpRequest:<S2SV_blank>access<S2SV_blank>denied<S2SV_blank>--<S2SV_blank>client<S2SV_blank>[%s]:<S2SV_blank>CSRF<S2SV_blank>token<S2SV_blank>mismatch\\n"" , NVLSTR ( Socket_getRemoteHost ( req -> S ) ) ) ; send_error ( req , res , SC_FORBIDDEN , ""Invalid<S2SV_blank>CSRF<S2SV_blank>Token"" ) ; return false ; } } "
439,"<S2SV_StartBug> int n = 0 , size = 0 , ret = - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> struct perf_event_context * ctx = leader -> ctx ; <S2SV_EndBug> <S2SV_StartBug> ret = - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> goto unlock ; <S2SV_EndBug> <S2SV_StartBug> unlock : <S2SV_EndBug> ","<S2SV_ModStart> struct perf_event_context * ctx = leader -> ctx ; <S2SV_ModStart> ; u64 count , enabled , running ; u64 values [ 5 ] ; lockdep_assert_held ( & ctx -> mutex ) ; count = perf_event_read_value ( leader , & enabled , & running ) ; values [ n ++ ] = 1 + leader -> nr_siblings ; if ( read_format & PERF_FORMAT_TOTAL_TIME_ENABLED ) values [ n ++ ] = enabled ; if ( read_format & PERF_FORMAT_TOTAL_TIME_RUNNING ) values [ n ++ ] = running ; values [ n ++ ] = count ; if ( read_format & PERF_FORMAT_ID ) values [ n ++ ] = primary_event_id ( leader ) ; size = n * sizeof ( u64 ) ; if ( copy_to_user ( buf , values , size ) ) return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
440,"<S2SV_StartBug> int setpwnam ( struct passwd * pwd ) <S2SV_EndBug> <S2SV_StartBug> char * atomic_dir = ""/etc"" ; <S2SV_EndBug> <S2SV_StartBug> if ( ( fp = xfmkstemp ( & tmpname , atomic_dir ) ) == NULL ) <S2SV_EndBug> ","<S2SV_ModStart> , const char * prefix <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""/etc"" , prefix <S2SV_ModEnd> "
441,<S2SV_StartBug> PCI_DMA_FROMDEVICE ) ) <S2SV_EndBug> <S2SV_StartBug> buf_pa = MWIFIEX_SKB_DMA_ADDR ( skb ) ; <S2SV_EndBug> ,<S2SV_ModStart> { kfree_skb ( skb ) ; kfree ( card -> evtbd_ring_vbase ) ; <S2SV_ModStart> } 
442,<S2SV_StartBug> if ( count < sizeof ( cmd . type ) ) { <S2SV_EndBug> ,<S2SV_ModStart> WARN_ON_ONCE ( ! ib_safe_file_access ( fp ) ) ) return - EACCES ; if ( 
443,<S2SV_StartBug> done = EAS_TRUE ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( pWTIntFrame -> numSamples < 0 ) { ALOGE ( ""b/26366256"" ) ; pWTIntFrame -> numSamples = 0 ; } "
444,<S2SV_StartBug> max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; <S2SV_EndBug> <S2SV_StartBug> max_packets = ( size_t ) ( number_pixels * viff_info . number_data_bands ) ; <S2SV_EndBug> ,"<S2SV_ModStart> { if ( CheckMemoryOverflow <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> ) != MagickFalse ) ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; } else { if ( CheckMemoryOverflow ( number_pixels , viff_info . number_data_bands ) != MagickFalse ) ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> <S2SV_ModStart> } "
445,"<S2SV_StartBug> struct strbuf * path , const char * last , <S2SV_EndBug> <S2SV_StartBug> char * name = path_name ( path , last ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ( char * ) name ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
446,<S2SV_StartBug> cdf_secid_t maxsector = ( cdf_secid_t ) ( sat -> sat_len * size ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sid > maxsector ) { <S2SV_EndBug> ,"<S2SV_ModStart> ( <S2SV_ModStart> / sizeof ( maxsector ) ) <S2SV_ModStart> >= maxsector ) { DPRINTF ( ( ""Sector<S2SV_blank>%d<S2SV_blank>>=<S2SV_blank>%d\\n"" <S2SV_ModEnd> "
447,"<S2SV_StartBug> makewhite ( g , o ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( g -> gckind == KGC_INC ) 
448,<S2SV_StartBug> if ( ( wp -> path = websNormalizeUriPath ( path ) ) == 0 ) { <S2SV_EndBug> ,<S2SV_ModStart> websValidateUriPath <S2SV_ModEnd> 
449,<S2SV_StartBug> while ( ibuf [ ind ] == 0x01 ) { <S2SV_EndBug> ,<S2SV_ModStart> && i < gemsafe_cert_max 
450,<S2SV_StartBug> if ( src_end - src < zsize ) <S2SV_EndBug> <S2SV_StartBug> bitbuf = * src ++ ; <S2SV_EndBug> ,<S2SV_ModStart> + ( sub_type != 2 ) <S2SV_ModStart> if ( src >= src_end ) return AVERROR_INVALIDDATA ; 
451,<S2SV_StartBug> if ( ! prev_pkt [ channel_id ] . read ) { <S2SV_EndBug> ,"<S2SV_ModStart> prev_pkt [ channel_id ] . read && size != prev_pkt [ channel_id ] . size ) { av_log ( NULL , AV_LOG_ERROR , ""RTMP<S2SV_blank>packet<S2SV_blank>size<S2SV_blank>mismatch<S2SV_blank>%d<S2SV_blank>!=<S2SV_blank>%d\\n"" , size , prev_pkt [ channel_id ] . size ) ; ff_rtmp_packet_destroy ( & prev_pkt [ channel_id ] ) ; prev_pkt [ channel_id ] . read = 0 ; } if ( "
452,<S2SV_StartBug> int nAlloc = pSrc -> nSrc * 2 + nExtra ; <S2SV_EndBug> ,<S2SV_ModStart> sqlite3_int64 nAlloc = 2 * ( sqlite3_int64 ) pSrc -> nSrc <S2SV_ModEnd> 
453,<S2SV_StartBug> get_page ( * page ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( ! try_get_page ( * page ) ) ) { ret = - ENOMEM ; goto unmap ; } <S2SV_ModEnd> 
454,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && in -> linesize [ plane ] 
455,<S2SV_StartBug> len = dp -> ip6r_len ; <S2SV_EndBug> ,<S2SV_ModStart> ep = ndo -> ndo_snapend ; ND_TCHECK ( dp -> ip6r_segleft ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
456,"<S2SV_StartBug> if ( js_regexec ( re -> prog , source , & m , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! js_regexec ( re -> prog , source , & m , REG_NOTBOL ) ) <S2SV_EndBug> ","<S2SV_ModStart> js_doregexec ( J , <S2SV_ModEnd> <S2SV_ModStart> js_doregexec ( J , <S2SV_ModEnd> "
457,"<S2SV_StartBug> struct oabi_flock64 user ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & user , ( struct oabi_flock64 __user * ) arg , <S2SV_EndBug> <S2SV_StartBug> ret = sys_fcntl64 ( fd , cmd , local_arg ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return do_locks ( fd , cmd , arg ) ; default : return <S2SV_ModEnd> <S2SV_ModStart> arg <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
458,<S2SV_StartBug> if ( err ) <S2SV_EndBug> ,<S2SV_ModStart> < 0 
459,<S2SV_StartBug> if ( chm -> index_root != 0xFFFFFFFF && chm -> index_root > chm -> num_chunks ) { <S2SV_EndBug> <S2SV_StartBug> name = p ; p += name_len ; <S2SV_EndBug> ,<S2SV_ModStart> >= <S2SV_ModEnd> <S2SV_ModStart> if ( name_len == 0 ) goto chunk_end ; 
460,<S2SV_StartBug> if ( ! file ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ,<S2SV_ModStart> || count > OE_SSIZE_MAX <S2SV_ModStart> if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } 
461,"<S2SV_StartBug> memcpy ( res , dbg_data , nb10sz ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
462,"<S2SV_StartBug> if ( istreq ( str , ""all"" ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ! str ) return false ; if ( 
463,<S2SV_StartBug> conn -> c_trans = trans ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab , conn ) ; conn = ERR_PTR ( - ENODEV ) ; goto out ; } "
464,<S2SV_StartBug> release_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> msg -> msg_namelen = 0 ; 
465,<S2SV_StartBug> if ( NCH ( n ) == 1 ) <S2SV_EndBug> <S2SV_StartBug> l = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 2 ; i < ( NCH ( n ) - 1 ) ; i ++ ) <S2SV_EndBug> ,"<S2SV_ModStart> case func_body_suite : <S2SV_ModStart> i = 2 ; l = 0 ; if ( TYPE ( CHILD ( n , 1 ) ) == TYPE_COMMENT ) i += 2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
466,"<S2SV_StartBug> struct reloc_struct_t * got_table = calloc ( 1 , n_got * sizeof ( ut32 ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct reloc_struct_t <S2SV_ModEnd> 
467,"<S2SV_StartBug> void vp9_loop_filter_rows ( const YV12_BUFFER_CONFIG * frame_buffer , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * cm , MACROBLOCKD * xd , <S2SV_EndBug> <S2SV_StartBug> int mi_row , mi_col ; <S2SV_EndBug> <S2SV_StartBug> int use_420 = y_only || ( xd -> plane [ 1 ] . subsampling_y == 1 && <S2SV_EndBug> <S2SV_StartBug> xd -> plane [ 1 ] . subsampling_x == 1 ) ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 = cm -> mi_grid_visible + mi_row * cm -> mi_stride ; <S2SV_EndBug> <S2SV_StartBug> vp9_setup_dst_planes ( xd , frame_buffer , mi_row , mi_col ) ; <S2SV_EndBug> <S2SV_StartBug> if ( use_420 ) <S2SV_EndBug> <S2SV_StartBug> vp9_setup_mask ( cm , mi_row , mi_col , mi_8x8 + mi_col , cm -> mi_stride , <S2SV_EndBug> <S2SV_StartBug> for ( plane = 0 ; plane < num_planes ; ++ plane ) { <S2SV_EndBug> <S2SV_StartBug> if ( use_420 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> struct macroblockd_plane planes [ MAX_MB_PLANE ] <S2SV_ModEnd> <S2SV_ModStart> enum lf_path path <S2SV_ModEnd> <S2SV_ModStart> mi_row , mi_col ; if ( y_only ) path = LF_PATH_444 ; else if ( planes <S2SV_ModEnd> <S2SV_ModStart> planes <S2SV_ModEnd> <S2SV_ModStart> path = LF_PATH_420 ; else if ( planes [ 1 ] . subsampling_y == 0 && planes [ 1 ] . subsampling_x == 0 ) path = LF_PATH_444 ; else path = LF_PATH_SLOW <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> planes <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> vp9_filter_block_plane_ss00 ( cm , & planes [ 0 ] , mi_row , & lfm ) ; <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> switch ( path ) { case LF_PATH_420 : vp9_filter_block_plane_ss11 ( cm , & planes [ plane ] , mi_row , & lfm ) ; break ; case LF_PATH_444 : vp9_filter_block_plane_ss00 ( cm , & planes [ plane ] , mi_row , & lfm ) ; break ; case LF_PATH_SLOW : vp9_filter_block_plane_non420 ( cm , & planes [ plane ] , mi <S2SV_ModEnd> <S2SV_ModStart> break ; } "
468,<S2SV_StartBug> if ( ! ( quirks & CP_RDESC_SWAPPED_MIN_MAX ) ) <S2SV_EndBug> ,<S2SV_ModStart> ) return rdesc ; if ( * rsize < 4 
469,<S2SV_StartBug> config -> listeners [ config -> listener_count - 1 ] . security_options . password_file = config -> default_listener . security_options . password_file ; <S2SV_EndBug> ,<S2SV_ModStart> acl_file = config -> default_listener . security_options . acl_file ; config -> listeners [ config -> listener_count - 1 ] . security_options . 
470,<S2SV_StartBug> EXT4_DESC_PER_BLOCK ( sb ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ext4_has_feature_meta_bg ( sb ) ) { if ( le32_to_cpu ( es -> s_first_meta_bg ) >= db_count ) { ext4_msg ( sb , KERN_WARNING , ""first<S2SV_blank>meta<S2SV_blank>block<S2SV_blank>group<S2SV_blank>too<S2SV_blank>large:<S2SV_blank>%u<S2SV_blank>"" ""(group<S2SV_blank>descriptor<S2SV_blank>block<S2SV_blank>count<S2SV_blank>%u)"" , le32_to_cpu ( es -> s_first_meta_bg ) , db_count ) ; goto failed_mount ; } } "
471,"<S2SV_StartBug> int j , len = apdu . resp [ i + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( file -> name , d , len ) ; <S2SV_EndBug> <S2SV_StartBug> file -> namelen = len ; <S2SV_EndBug> ","<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> file -> namelen = MIN ( sizeof file -> name , len ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModEnd> "
472,"<S2SV_StartBug> dtls1_buffer_record ( s , & ( s -> d1 -> processed_rcds ) , <S2SV_EndBug> <S2SV_StartBug> s -> s3 -> rrec . seq_num ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( <S2SV_ModStart> < 0 ) return - 1 
473,"<S2SV_StartBug> if ( ( event -> sigev_notify & SIGEV_THREAD_ID ) && <S2SV_EndBug> <S2SV_StartBug> ( ! ( rtn = find_task_by_vpid ( event -> sigev_notify_thread_id ) ) || <S2SV_EndBug> <S2SV_StartBug> ! same_thread_group ( rtn , current ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( ( event -> sigev_notify & ~ SIGEV_THREAD_ID ) != SIGEV_NONE ) && <S2SV_EndBug> <S2SV_StartBug> ( ( event -> sigev_signo <= 0 ) || ( event -> sigev_signo > SIGRTMAX ) ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> switch <S2SV_ModEnd> <S2SV_ModStart> ) { case SIGEV_SIGNAL | SIGEV_THREAD_ID : <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! rtn <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> case SIGEV_SIGNAL : case SIGEV_THREAD : if <S2SV_ModEnd> <S2SV_ModStart> || <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> case SIGEV_NONE : <S2SV_ModStart> default : return NULL ; } 
474,<S2SV_StartBug> if ( vcpu -> mmio_cur_fragment == vcpu -> mmio_nr_fragments ) { <S2SV_EndBug> ,<S2SV_ModStart> >= <S2SV_ModEnd> 
475,"<S2SV_StartBug> r = parse_gid ( e + 1 , & gid ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ; 
476,<S2SV_StartBug> pch -> file . dead = 1 ; <S2SV_EndBug> ,<S2SV_ModStart> put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ; 
477,"<S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPDRL , LSB ( data ) ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPDRH , MSB ( data ) ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRW ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; <S2SV_EndBug> ","<S2SV_ModStart> DM9000_EPAR <S2SV_ModEnd> <S2SV_ModStart> DM9000_EPDRL <S2SV_ModEnd> <S2SV_ModStart> DM9000_EPDRH <S2SV_ModEnd> <S2SV_ModStart> DM9000_EPCR , DM9000_EPCR_EPOS | DM9000_EPCR_ERPRW <S2SV_ModEnd> <S2SV_ModStart> DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> <S2SV_ModStart> DM9000_EPCR , DM9000_EPCR_EPOS <S2SV_ModEnd> "
478,"<S2SV_StartBug> if ( sk_filter ( sk , skb ) ) <S2SV_EndBug> <S2SV_StartBug> goto discard_and_relse ; <S2SV_EndBug> ",<S2SV_ModStart> tcp_filter <S2SV_ModEnd> <S2SV_ModStart> ; th = ( const struct tcphdr * ) skb -> data ; iph = ip_hdr ( skb ) 
479,<S2SV_StartBug> goto retry ; <S2SV_EndBug> ,"<S2SV_ModStart> err = fuse_verify_ioctl_iov ( in_iov , in_iovs ) ; if ( err ) goto out ; err = fuse_verify_ioctl_iov ( out_iov , out_iovs ) ; if ( err ) goto out ; "
480,<S2SV_StartBug> if ( retval != 0 ) <S2SV_EndBug> ,<S2SV_ModStart> == 0 && server_ptr == NULL ) retval = KRB5_KDB_NOENTRY ; if ( retval 
481,"<S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> if ( pmd_none_or_clear_bad ( pmd ) ) <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> next = zap_pte_range ( tlb , vma , pmd , addr , next , details ) ; <S2SV_EndBug> ",<S2SV_ModStart> goto next <S2SV_ModEnd> <S2SV_ModStart> pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> <S2SV_ModStart> goto next <S2SV_ModEnd> <S2SV_ModStart> next : 
482,"<S2SV_StartBug> REQ ( CHILD ( n , 0 ) , ASYNC ) ; <S2SV_EndBug> <S2SV_StartBug> return ast_for_funcdef_impl ( c , CHILD ( n , 1 ) , NULL , <S2SV_EndBug> <S2SV_StartBug> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> return ast_for_with_stmt ( c , CHILD ( n , 1 ) , <S2SV_EndBug> <S2SV_StartBug> return ast_for_for_stmt ( c , CHILD ( n , 1 ) , <S2SV_EndBug> ","<S2SV_ModStart> NAME ) ; assert ( strcmp ( STR ( CHILD ( n , 0 ) ) , ""async"" ) == 0 <S2SV_ModEnd> <S2SV_ModStart> n <S2SV_ModEnd> <S2SV_ModStart> true <S2SV_ModEnd> <S2SV_ModStart> n , true <S2SV_ModEnd> <S2SV_ModStart> n , true <S2SV_ModEnd> "
483,<S2SV_StartBug> bw . i = EXTRACT_32BITS ( obj_tptr + offset + 4 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ND_TCHECK_32BITS ( obj_tptr + offset + 4 ) ; <S2SV_ModStart> trunc : return - 1 ; 
484,"<S2SV_StartBug> metadatalength = GetDuration ( mp4 ) ; <S2SV_EndBug> <S2SV_StartBug> float in = 0.0 , out = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> uint32_t fourcc = GPMF_Key ( ms ) ; <S2SV_EndBug> <S2SV_StartBug> double rate = GetGPMFSampleRate ( mp4 , fourcc , GPMF_SAMPLE_RATE_PRECISE ) ; <S2SV_EndBug> <S2SV_StartBug> printf ( ""%c%c%c%c<S2SV_blank>sampling<S2SV_blank>rate<S2SV_blank>=<S2SV_blank>%f<S2SV_blank>Hz\\n"" , PRINTF_4CC ( fourcc ) , rate ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( mp4 == 0 ) { printf ( ""error:<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>MP4/MOV\\n"" , argv [ 1 ] ) ; return - 1 ; } <S2SV_ModStart> double <S2SV_ModEnd> <S2SV_ModStart> double in = 0.0 , out = 0.0 ; <S2SV_ModStart> , & in , & out ) ; printf ( ""%c%c%c%c<S2SV_blank>sampling<S2SV_blank>rate<S2SV_blank>=<S2SV_blank>%f<S2SV_blank>Hz<S2SV_blank>(from<S2SV_blank>%f<S2SV_blank>to<S2SV_blank>%f)\\n"" <S2SV_ModEnd> <S2SV_ModStart> , in , out "
485,"<S2SV_StartBug> For ( expr_ty target , expr_ty iter , asdl_seq * body , asdl_seq * orelse , int <S2SV_EndBug> <S2SV_StartBug> p -> v . For . orelse = orelse ; <S2SV_EndBug> ","<S2SV_ModStart> string type_comment , int <S2SV_ModEnd> <S2SV_ModStart> ; p -> v . For . type_comment = type_comment "
486,"<S2SV_StartBug> strcpy ( the_url , evt -> navigate . to_url ) ; <S2SV_EndBug> ","<S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> , sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 <S2SV_ModEnd> "
487,"<S2SV_StartBug> int i , attr_id = 0 , nattr ; <S2SV_EndBug> ",<S2SV_ModStart> ; tagname [ 0 ] = '\\0' 
488,"<S2SV_StartBug> DWORD nbWritten = 0 ; <S2SV_EndBug> <S2SV_StartBug> Stream_Seek ( irp -> input , 20 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( CommWriteFile ( serial -> hComm , Stream_Pointer ( irp -> input ) , Length , & nbWritten , NULL ) ) <S2SV_EndBug> ","<S2SV_ModStart> void * ptr ; <S2SV_ModStart> if ( ! Stream_SafeSeek <S2SV_ModEnd> <S2SV_ModStart> ) return ERROR_INVALID_DATA <S2SV_ModStart> ptr = Stream_Pointer ( irp -> input ) ; if ( ! Stream_SafeSeek ( irp -> input , Length ) ) return ERROR_INVALID_DATA ; <S2SV_ModStart> ptr <S2SV_ModEnd> "
489,<S2SV_StartBug> char * buf ; <S2SV_EndBug> ,"<S2SV_ModStart> struct stream packet = * s ; if ( ! s_check ( s ) ) { rdp_protocol_error ( ""seamless_process(),<S2SV_blank>stream<S2SV_blank>is<S2SV_blank>in<S2SV_blank>unstable<S2SV_blank>state"" , & packet ) ; } "
490,"<S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug> ",<S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) 
491,"<S2SV_StartBug> ret = hermes_enable_port ( hw , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> hermes_disable_port ( hw , 0 ) ; } else { priv -> tkip_cm_active = 0 ; ret = hermes_enable_port <S2SV_ModEnd> "
492,<S2SV_StartBug> bool slow ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * addr_len = sizeof ( * sin6 ) ; 
493,<S2SV_StartBug> count = Z_LVAL_P ( pcount ) ; <S2SV_EndBug> <S2SV_StartBug> if ( Z_TYPE ( entry ) != IS_OBJECT ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> ,<S2SV_ModStart> ) ; ZVAL_UNDEF ( & entry ) ; ZVAL_UNDEF ( & inf <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( Z_TYPE ( entry ) != IS_OBJECT ) { zval_ptr_dtor ( & entry ) ; zval_ptr_dtor ( & inf ) ; goto outexcept <S2SV_ModEnd> 
494,<S2SV_StartBug> uri -> port = port & INT_MAX ; <S2SV_EndBug> ,<S2SV_ModStart> USHRT_MAX <S2SV_ModEnd> 
495,<S2SV_StartBug> pch -> chan_net = net ; <S2SV_EndBug> ,<S2SV_ModStart> get_net ( net ) <S2SV_ModEnd> 
496,"<S2SV_StartBug> RETVAL_STRINGL ( replaced , ( int ) new_len , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; } 
497,"<S2SV_StartBug> ret = hermes_enable_port ( hw , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> hermes_disable_port ( hw , 0 ) ; } else { priv -> tkip_cm_active = 0 ; ret = hermes_enable_port <S2SV_ModEnd> "
498,<S2SV_StartBug> tunnel_type = * ( tptr + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> tlen = len ; <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK2 ( tptr [ 0 ] , 5 ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
499,"<S2SV_StartBug> NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> GSTD_GSS_ERROR ( maj , min , NULL , ""gss_accept_sec_context"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; gss_release_buffer ( & min , & in <S2SV_ModStart> gss_release_buffer ( & min , & out ) ; "
500,"<S2SV_StartBug> xref -> entries = calloc ( 1 , xref -> n_entries * sizeof ( struct _xref_entry ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> safe_calloc ( <S2SV_ModEnd> 
501,<S2SV_StartBug> pairs = palloc ( ncolumns * sizeof ( Pairs ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> Assert ( ncolumns <= MaxTupleAttributeNumber ) ; 
502,<S2SV_StartBug> assert ( ( cc0 % rowsize ) == 0 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""PredictorEncodeTile"" , ""%s"" , ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> "
503,"<S2SV_StartBug> int procfd ; <S2SV_EndBug> <S2SV_StartBug> pid_t to_cleanup_pid = pid ; <S2SV_EndBug> <S2SV_StartBug> status = 0 ; <S2SV_EndBug> <S2SV_StartBug> ret = lxc_read_nointr_expect ( ipc_sockets [ 0 ] , & attached_pid , sizeof ( attached_pid ) , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret != 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( options -> stdin_fd == 0 ) { <S2SV_EndBug> <S2SV_StartBug> ERROR ( ""error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>(1)"" ) ; <S2SV_EndBug> <S2SV_StartBug> ERROR ( ""error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(2)"" ) ; <S2SV_EndBug> <S2SV_StartBug> shutdown ( ipc_sockets [ 0 ] , SHUT_RDWR ) ; <S2SV_EndBug> <S2SV_StartBug> cleanup_error : <S2SV_EndBug> <S2SV_StartBug> procfd = open ( ""/proc"" , O_DIRECTORY | O_RDONLY ) ; <S2SV_EndBug> <S2SV_StartBug> . procfd = procfd <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int procfd = - 1 ; <S2SV_ModStart> procfd = open ( ""/proc"" , O_DIRECTORY | O_RDONLY | O_CLOEXEC ) ; if ( procfd < 0 ) { SYSERROR ( ""Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>/proc."" <S2SV_ModEnd> <S2SV_ModStart> status = 0 ; ret = lxc_write_nointr ( ipc_sockets [ 0 ] , & status <S2SV_ModEnd> <S2SV_ModStart> status ) <S2SV_ModEnd> <S2SV_ModStart> ERROR ( ""error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(0)"" <S2SV_ModEnd> <S2SV_ModStart> ret = lxc_read_nointr_expect ( ipc_sockets [ 0 ] , & attached_pid , sizeof ( attached_pid ) , NULL ) ; if ( ret <= 0 ) { if ( ret != 0 ) ERROR ( ""error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>pid<S2SV_blank>of<S2SV_blank>attached<S2SV_blank>process"" ) ; goto cleanup_error ; } <S2SV_ModStart> ""error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>"" ""from<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>(1)"" <S2SV_ModEnd> <S2SV_ModStart> ""Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>for<S2SV_blank>"" ""initialization<S2SV_blank>(2):<S2SV_blank>%s."" , strerror ( errno ) <S2SV_ModEnd> <S2SV_ModStart> expected = 3 ; ret = lxc_read_nointr_expect ( ipc_sockets [ 0 ] , & status , sizeof ( status ) , & expected ) ; if ( ret <= 0 ) { ERROR ( ""Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>for<S2SV_blank>the<S2SV_blank>child<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>us<S2SV_blank>to<S2SV_blank>open<S2SV_blank>LSM<S2SV_blank>fd<S2SV_blank>(3):<S2SV_blank>%s."" , strerror ( errno ) ) ; goto cleanup_error ; } if ( ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_LSM ) && init_ctx -> lsm_label ) { int on_exec , labelfd ; on_exec = options -> attach_flags & LXC_ATTACH_LSM_EXEC ? 1 : 0 ; labelfd = lsm_openat ( procfd , attached_pid , on_exec ) ; if ( labelfd < 0 ) goto cleanup_error ; ret = lxc_abstract_unix_send_fd ( ipc_sockets [ 0 ] , labelfd , NULL , 0 ) ; if ( ret <= 0 ) { ERROR ( ""Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>send<S2SV_blank>child<S2SV_blank>LSM<S2SV_blank>fd<S2SV_blank>(4):<S2SV_blank>%s."" , strerror ( errno ) ) ; goto cleanup_error ; } } <S2SV_ModStart> if ( procfd >= 0 ) close ( procfd ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
504,"<S2SV_StartBug> static int try_filter_frame ( const YV12_BUFFER_CONFIG * sd , VP9_COMP * const cpi , <S2SV_EndBug> <S2SV_StartBug> int filt_err ; <S2SV_EndBug> <S2SV_StartBug> vp9_loop_filter_frame ( cm , & cpi -> mb . e_mbd , filt_level , 1 , partial_frame ) ; <S2SV_EndBug> <S2SV_StartBug> filt_err = vp9_get_y_sse ( sd , cm -> frame_to_show ) ; <S2SV_EndBug> ","<S2SV_ModStart> int64_t <S2SV_ModEnd> <S2SV_ModStart> int64_t filt_err ; if ( cpi -> num_workers > 1 ) vp9_loop_filter_frame_mt ( cm -> frame_to_show , cm , cpi -> td . mb . e_mbd . plane , filt_level , 1 , partial_frame , cpi -> workers , cpi -> num_workers , & cpi -> lf_row_sync ) ; else vp9_loop_filter_frame ( cm -> frame_to_show , <S2SV_ModEnd> <S2SV_ModStart> td . <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> use_highbitdepth ) { filt_err = vp9_highbd_get_y_sse ( sd , cm -> frame_to_show ) ; } else { <S2SV_ModStart> } # else filt_err = vp9_get_y_sse ( sd , cm -> frame_to_show ) ; # endif "
505,"<S2SV_StartBug> ! test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) <S2SV_EndBug> ",<S2SV_ModStart> key_read_state ( key ) == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> 
506,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> ( void ) cpi ; ( void ) fullpixel ; 
507,"<S2SV_StartBug> void vp9_update_mv_count ( VP9_COMMON * cm , const MACROBLOCKD * xd ) { <S2SV_EndBug> <S2SV_StartBug> const MB_MODE_INFO * const mbmi = & mi -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> inc_mvs ( mbmi , mi -> bmi [ i ] . as_mv , & cm -> counts . mv ) ; <S2SV_EndBug> <S2SV_StartBug> inc_mvs ( mbmi , mbmi -> mv , & cm -> counts . mv ) ; <S2SV_EndBug> ","<S2SV_ModStart> ThreadData * td ) { <S2SV_ModEnd> <S2SV_ModStart> = & td -> mb . e_mbd ; <S2SV_ModEnd> <S2SV_ModStart> ; const MB_MODE_INFO_EXT * mbmi_ext = td -> mb . mbmi_ext <S2SV_ModStart> mbmi_ext , <S2SV_ModStart> td -> counts -> <S2SV_ModEnd> <S2SV_ModStart> mbmi_ext , <S2SV_ModStart> td -> counts -> <S2SV_ModEnd> "
508,"<S2SV_StartBug> static bool <S2SV_EndBug> <S2SV_StartBug> bool success = NS_TRUE ; <S2SV_EndBug> <S2SV_StartBug> size_t chunk_length ; <S2SV_EndBug> <S2SV_StartBug> success = NS_FALSE ; <S2SV_EndBug> <S2SV_StartBug> chunk_length = ( size_t ) strtol ( chunkStart , NULL , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( p + 2 + chunk_length > end ) { <S2SV_EndBug> <S2SV_StartBug> success = NS_FALSE ; <S2SV_EndBug> <S2SV_StartBug> memmove ( writeBuffer , p + 2 , chunk_length ) ; <S2SV_EndBug> <S2SV_StartBug> reqPtr -> chunkWriteOff += chunk_length ; <S2SV_EndBug> <S2SV_StartBug> * ( writeBuffer + chunk_length ) = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> reqPtr -> chunkStartOff += ( size_t ) ( p - chunkStart ) + 4u + chunk_length ; <S2SV_EndBug> <S2SV_StartBug> return success ; <S2SV_EndBug> ","<S2SV_ModStart> SockState <S2SV_ModEnd> <S2SV_ModStart> SockState result = SOCK_READY <S2SV_ModEnd> <S2SV_ModStart> long chunkLength <S2SV_ModEnd> <S2SV_ModStart> result = SOCK_MORE <S2SV_ModEnd> <S2SV_ModStart> chunkLength = <S2SV_ModEnd> <S2SV_ModStart> chunkLength < 0 ) { Ns_Log ( Warning , ""ChunkedDecode:<S2SV_blank>negative<S2SV_blank>chunk<S2SV_blank>length"" ) ; result = SOCK_BADREQUEST ; break ; } * p = '\\r' ; if ( <S2SV_ModStart> chunkLength <S2SV_ModEnd> <S2SV_ModStart> result = SOCK_MORE <S2SV_ModEnd> <S2SV_ModStart> ( size_t ) chunkLength <S2SV_ModEnd> <S2SV_ModStart> ( size_t ) chunkLength <S2SV_ModEnd> <S2SV_ModStart> chunkLength <S2SV_ModEnd> <S2SV_ModStart> ( size_t ) chunkLength <S2SV_ModEnd> <S2SV_ModStart> result <S2SV_ModEnd> "
509,"<S2SV_StartBug> static int jas_iccgetuint ( jas_stream_t * in , int n , ulonglong * val ) <S2SV_EndBug> <S2SV_StartBug> ulonglong v ; <S2SV_EndBug> ",<S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> <S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> 
510,<S2SV_StartBug> char * buf ; <S2SV_EndBug> ,"<S2SV_ModStart> struct stream packet = * s ; if ( ! s_check ( s ) ) { rdp_protocol_error ( ""lspci_process(),<S2SV_blank>stream<S2SV_blank>is<S2SV_blank>in<S2SV_blank>unstable<S2SV_blank>state"" , & packet ) ; } "
511,"<S2SV_StartBug> PyObject * bufobj = PyObject_CallObject ( readline , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart> _PyObject_CallNoArg ( readline <S2SV_ModEnd> 
512,"<S2SV_StartBug> u16 selector , int seg , u8 cpl , bool in_task_switch ) <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug> ","<S2SV_ModStart> , struct desc_struct * desc <S2SV_ModStart> if ( desc ) * desc = seg_desc ; "
513,<S2SV_StartBug> data [ l ++ ] = SEG_REG_PREFIXES [ op -> operands [ 1 ] . regs [ 0 ] ] ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = 0x8b ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = offset ; <S2SV_EndBug> <S2SV_StartBug> return l ; <S2SV_EndBug> <S2SV_StartBug> if ( a -> bits == 64 ) { <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = 0x25 ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 0x5 ; <S2SV_EndBug> <S2SV_StartBug> if ( op -> operands [ 1 ] . scale [ 0 ] > 1 ) { <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 4 ; <S2SV_EndBug> ,<S2SV_ModStart> % 6 <S2SV_ModStart> data [ l ++ ] = ( ( ( ut32 ) op -> operands [ 0 ] . reg ) << 3 ) | 0x5 ; data [ l ++ ] = offset ; data [ l ++ ] = offset >> 8 ; data [ l ++ ] = offset >> 16 ; data [ l ++ ] = offset >> 24 ; return l ; } if ( a -> bits == 64 ) { if ( op -> operands [ 0 ] . type & OT_QWORD ) { if ( ! ( op -> operands [ 1 ] . type & OT_QWORD ) ) { if ( op -> operands [ 1 ] . regs [ 0 ] != - 1 ) { data [ l ++ ] = 0x67 ; } data [ l ++ ] = 0x48 ; } } else if ( op -> operands [ 1 ] . type & OT_DWORD ) { data [ l ++ ] = 0x44 ; } else if ( ! ( op -> operands [ 1 ] . type & OT_QWORD ) ) { data [ l ++ ] = 0x67 ; } if ( op -> operands [ 1 ] . type & OT_QWORD && op -> operands [ 0 ] . type & OT_QWORD ) { data [ l ++ ] = 0x48 ; } } if ( op -> operands [ 0 ] . type & OT_WORD ) { data [ l ++ ] = 0x66 ; data [ l ++ ] = op -> operands [ 1 ] . type & OT_BYTE ? 0x8a : 0x8b ; } else { data [ l ++ ] = ( op -> operands [ 1 ] . type & OT_BYTE || op -> operands [ 0 ] . type & OT_BYTE ) ? 0x8a : 0x8b ; } if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_UNDEFINED ) { if ( a -> bits == 64 ) { data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 0x4 ; data [ l ++ ] = 0x25 ; } else { <S2SV_ModStart> } <S2SV_ModStart> } else { if ( op -> operands [ 1 ] . scale [ 0 ] > 1 ) { data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 4 ; if ( op -> operands [ 1 ] . scale [ 0 ] >= 2 ) { base = 5 ; } if ( base ) { data [ l ++ ] = getsib ( op -> operands [ 1 ] . scale [ 0 ] ) << 6 | op -> operands [ 1 ] . regs [ 0 ] << 3 | base ; } else { data [ l ++ ] = getsib ( op -> operands [ 1 ] . scale [ 0 ] ) << 3 | op -> operands [ 1 ] . regs [ 0 ] ; } if ( offset || base ) { data [ l ++ ] = offset ; data [ l ++ ] = offset >> 8 ; data [ l ++ ] = offset >> 16 ; data [ l ++ ] = offset >> 24 ; } <S2SV_ModStart> op -> operands [ 1 ] . regs [ 1 ] != X86R_UNDEFINED <S2SV_ModEnd> <S2SV_ModStart> op -> operands [ 1 ] . regs [ 1 ] << 3 | op -> operands [ 1 ] . regs [ 0 ] ; return l ; } if ( offset || op -> operands [ 1 ] . regs [ 0 ] == X86R_EBP ) { mod = 0x2 ; if ( op -> operands [ 1 ] . offset > 127 ) { mod = 0x4 ; } } if ( a -> bits == 64 && offset && op -> operands [ 0 ] . type & OT_QWORD ) { if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_RIP ) { data [ l ++ ] = 0x5 <S2SV_ModEnd> <S2SV_ModStart> if ( op -> operands [ 1 ] . offset > 127 ) { data [ l ++ ] = 0x80 | <S2SV_ModEnd> <S2SV_ModStart> op -> operands [ 1 ] . regs [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> data [ l ++ ] = 0x40 | op -> operands [ 1 ] . regs [ 0 ] ; } } if ( op -> operands [ 1 ] . offset > 127 ) { mod = 0x1 ; } } else { if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_EIP && ( op -> operands [ 0 ] . type & OT_DWORD ) ) { data [ l ++ ] = 0x0d ; } else if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_RIP && ( op -> operands [ 0 ] . type & OT_QWORD ) ) { data [ l ++ ] = 0x05 ; } else { data [ l ++ ] = mod << 5 | <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
514,<S2SV_StartBug> unsigned long size ) <S2SV_EndBug> <S2SV_StartBug> end_gfn = gfn + ( size >> PAGE_SHIFT ) ; <S2SV_EndBug> ,<S2SV_ModStart> npages <S2SV_ModEnd> <S2SV_ModStart> npages <S2SV_ModEnd> 
515,"<S2SV_StartBug> int lpc = 0 ; <S2SV_EndBug> <S2SV_StartBug> unsigned laddr ; <S2SV_EndBug> <S2SV_StartBug> # ifdef HAVE_GNUTLS_GNUTLS_H <S2SV_EndBug> <S2SV_StartBug> xmlNode * login = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ssock == remote_tls_fd ) { <S2SV_EndBug> <S2SV_StartBug> session = create_tls_session ( csock , GNUTLS_SERVER ) ; <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> login = crm_recv_remote_msg ( session , TRUE ) ; <S2SV_EndBug> <S2SV_StartBug> login = crm_recv_remote_msg ( GINT_TO_POINTER ( csock ) , FALSE ) ; <S2SV_EndBug> <S2SV_StartBug> bail : <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int flag ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( flag = fcntl ( csock , F_GETFL ) ) >= 0 ) { if ( fcntl ( csock , F_SETFL , flag | O_NONBLOCK ) < 0 ) { crm_err ( ""fcntl()<S2SV_blank>write<S2SV_blank>failed"" ) ; close ( csock ) ; return TRUE ; } } else { crm_err ( ""fcntl()<S2SV_blank>read<S2SV_blank>failed"" ) ; close ( csock ) ; return TRUE ; } if ( <S2SV_ModStart> crm_create_anon_tls_session <S2SV_ModEnd> <S2SV_ModStart> , anon_cred_s <S2SV_ModStart> num_clients ++ ; new_client = calloc ( 1 , sizeof ( cib_client_t ) ) ; new_client -> id = crm_generate_uuid ( ) ; new_client -> callback_id = NULL ; new_client -> remote_auth_timeout = g_timeout_add ( REMOTE_AUTH_TIMEOUT , remote_auth_timeout_cb , new_client <S2SV_ModEnd> <S2SV_ModStart> new_client -> encrypted = TRUE ; new_client -> session = session <S2SV_ModEnd> <S2SV_ModStart> new_client -> session = <S2SV_ModEnd> <S2SV_ModStart> ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
516,<S2SV_StartBug> if ( serial -> num_ports < 2 ) <S2SV_EndBug> ,"<S2SV_ModStart> num_bulk_out <S2SV_ModEnd> <S2SV_ModStart> { dev_err ( & serial -> interface -> dev , ""missing<S2SV_blank>bulk<S2SV_blank>out<S2SV_blank>endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> "
517,<S2SV_StartBug> int n ; <S2SV_EndBug> <S2SV_StartBug> if ( ! body -> unit_size ) <S2SV_EndBug> <S2SV_StartBug> n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) <S2SV_EndBug> ,<S2SV_ModStart> unsigned <S2SV_ModStart> || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> ( <S2SV_ModStart> - 1 ) <S2SV_ModEnd> 
518,"<S2SV_StartBug> ""<td><form<S2SV_blank>method=POST<S2SV_blank>action=%s>"" <S2SV_EndBug> <S2SV_StartBug> ""<td><form<S2SV_blank>method=POST<S2SV_blank>action=%s>"" <S2SV_EndBug> <S2SV_StartBug> ""<td><form<S2SV_blank>method=POST<S2SV_blank>action=%s>"" <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ""<td>"" ""<form<S2SV_blank>method=POST<S2SV_blank>action=%s>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>name=\'securitytoken\'<S2SV_blank>value=\'%s\'>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>value=\'start\'<S2SV_blank>name=action>"" ""<input<S2SV_blank>type=submit<S2SV_blank>value=\'Start<S2SV_blank>service\'>"" ""</form>"" ""</td>"" , s -> name , res -> token <S2SV_ModEnd> <S2SV_ModStart> ""<td>"" ""<form<S2SV_blank>method=POST<S2SV_blank>action=%s>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>name=\'securitytoken\'<S2SV_blank>value=\'%s\'>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>value=\'stop\'<S2SV_blank>name=action>"" ""<input<S2SV_blank>type=submit<S2SV_blank>value=\'Stop<S2SV_blank>service\'>"" ""</form>"" ""</td>"" , s -> name , res -> token <S2SV_ModEnd> <S2SV_ModStart> ""<td>"" ""<form<S2SV_blank>method=POST<S2SV_blank>action=%s>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>name=\'securitytoken\'<S2SV_blank>value=\'%s\'>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>value=\'restart\'<S2SV_blank>name=action>"" ""<input<S2SV_blank>type=submit<S2SV_blank>value=\'Restart<S2SV_blank>service\'>"" ""</form>"" ""</td>"" , s -> name , res -> token ) ; StringBuffer_append ( res -> outputbuffer , ""<td>"" ""<form<S2SV_blank>method=POST<S2SV_blank>action=%s>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>name=\'securitytoken\'<S2SV_blank>value=\'%s\'>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>value=\'%s\'<S2SV_blank>name=action>"" ""<input<S2SV_blank>type=submit<S2SV_blank>value=\'%s\'>"" ""</form>"" ""</td>"" , s -> name , res -> token <S2SV_ModEnd> <S2SV_ModStart> StringBuffer_append ( res -> outputbuffer , ""</tr></table>"" ) ; "
519,"<S2SV_StartBug> ! inode_capable ( inode , CAP_FSETID ) ) <S2SV_EndBug> ",<S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> 
520,"<S2SV_StartBug> void * * p , void * end , void * obuf , size_t olen ) <S2SV_EndBug> <S2SV_StartBug> ret = ceph_decrypt2 ( secret , & head , & head_len , obuf , & olen , <S2SV_EndBug> ","<S2SV_ModStart> * <S2SV_ModStart> if ( * obuf == NULL ) { * obuf = kmalloc ( len , GFP_NOFS ) ; if ( ! * obuf ) return - ENOMEM ; olen = len ; } <S2SV_ModStart> * "
521,"<S2SV_StartBug> static void ptrace_triggered ( struct perf_event * bp , int nmi , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
522,<S2SV_StartBug> int mapping_address = address - mb_mapping -> start_bits ; <S2SV_EndBug> <S2SV_StartBug> if ( nb < 1 || MODBUS_MAX_WRITE_BITS < nb ) { <S2SV_EndBug> <S2SV_StartBug> int nb = ( req [ offset + 3 ] << 8 ) + req [ offset + 4 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( nb < 1 || MODBUS_MAX_WRITE_REGISTERS < nb ) { <S2SV_EndBug> ,<S2SV_ModStart> nb_bits = req [ offset + 5 ] ; int <S2SV_ModStart> || nb_bits * 8 < nb <S2SV_ModStart> ] ; int nb_bytes = req [ offset + 5 <S2SV_ModStart> < nb || nb_bytes * 8 
523,<S2SV_StartBug> if ( net != c_net || ! tc -> t_sock ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
524,"<S2SV_StartBug> struct resv_map * reservations = vma_resv_map ( vma ) ; <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( vma -> vm_file -> f_mapping , reserve ) ; <S2SV_EndBug> ",<S2SV_ModStart> ( vma ) ; struct hugepage_subpool * spool = subpool_vma <S2SV_ModStart> hugepage_subpool_put_pages ( spool <S2SV_ModEnd> 
525,<S2SV_StartBug> sc = create_spnego_ctx ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> 0 
526,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> } else if ( request_size < 0 ) { rc = - EINVAL ; goto out_free_buffer ; 
527,<S2SV_StartBug> rfcomm_dlc_accept ( d ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
528,<S2SV_StartBug> case '\\r' : <S2SV_EndBug> ,"<S2SV_ModStart> \'""\' : case '\\\\' : case "
529,<S2SV_StartBug> return in ; <S2SV_EndBug> ,<S2SV_ModStart> NULL <S2SV_ModEnd> 
530,"<S2SV_StartBug> int perf_event_overflow ( struct perf_event * event , int nmi , <S2SV_EndBug> <S2SV_StartBug> return __perf_event_overflow ( event , nmi , 1 , data , regs ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
531,<S2SV_StartBug> size_t i ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
532,"<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> err = crypto_ahash_export ( req , state ) ; <S2SV_EndBug> <S2SV_StartBug> ctx2 -> more = 1 ; <S2SV_EndBug> ",<S2SV_ModStart> bool more ; <S2SV_ModStart> lock_sock ( sk ) ; more = ctx -> more ; err = more ? <S2SV_ModEnd> <S2SV_ModStart> : 0 ; release_sock ( sk ) <S2SV_ModStart> more ; if ( ! more ) return err <S2SV_ModEnd> 
533,<S2SV_StartBug> flags |= EXT4_GET_BLOCKS_PRE_IO ; <S2SV_EndBug> ,<S2SV_ModStart> if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ; 
534,"<S2SV_StartBug> void ntlm_populate_message_header ( NTLM_MESSAGE_HEADER * header , UINT32 MessageType ) <S2SV_EndBug> ",<S2SV_ModStart> static 
535,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( rdp -> rc4_decrypt_key == NULL ) return FALSE ; 
536,<S2SV_StartBug> const char * errstr ; <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> # if ! defined ( __linux__ ) && ! defined ( __NetBSD__ ) <S2SV_ModStart> = NULL ; # else int status ; # endif <S2SV_ModEnd> <S2SV_ModStart> if ( errstr ) return - 1 ; # else status = <S2SV_ModEnd> <S2SV_ModStart> if ( status != 1 <S2SV_ModEnd> <S2SV_ModStart> # endif 
537,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> new_mnemonic [ strlen ( new_mnemonic ) - 1 ] = '\\0' ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! recovery_started ) { recovery_abort ( ) ; fsm_sendFailure ( FailureType_Failure_UnexpectedMessage , ""Not<S2SV_blank>in<S2SV_blank>Recovery<S2SV_blank>mode"" ) ; layoutHome ( ) ; return ; } <S2SV_ModStart> MAX ( 0u , strnlen ( new_mnemonic , sizeof ( new_mnemonic ) <S2SV_ModEnd> <S2SV_ModStart> ) "
538,"<S2SV_StartBug> Fp = fopen ( filename , ""wb"" ) ; <S2SV_EndBug> <S2SV_StartBug> return HTTP_UNAUTHORIZED ; <S2SV_EndBug> ",<S2SV_ModStart> # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> # else return HTTP_NOT_FOUND ; # endif 
539,<S2SV_StartBug> inbuf = _TIFFmalloc ( scanlinesizein ) ; <S2SV_EndBug> ,"<S2SV_ModStart> uint16 bps = 0 ; ( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ; if ( bps != 8 ) { TIFFError ( TIFFFileName ( in ) , ""Error,<S2SV_blank>can<S2SV_blank>only<S2SV_blank>handle<S2SV_blank>BitsPerSample=8<S2SV_blank>in<S2SV_blank>%s"" , ""cpSeparate2ContigByRow"" ) ; return 0 ; } "
540,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> * addr_len = sizeof ( * saddr ) ; } <S2SV_ModEnd> 
541,<S2SV_StartBug> if ( iterator -> next ) rfbDecrClientRef ( iterator -> next ) ; <S2SV_EndBug> ,<S2SV_ModStart> iterator && 
542,<S2SV_StartBug> if ( key -> type -> destroy ) <S2SV_EndBug> ,"<S2SV_ModStart> test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) && ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) && "
543,<S2SV_StartBug> if ( pbi -> decoding_thread_count > num_token_partitions - 1 ) <S2SV_EndBug> <S2SV_StartBug> pbi -> decoding_thread_count = num_token_partitions - 1 ; <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> } if ( pbi -> decoding_thread_count > pbi -> common . mb_rows - 1 ) { pbi -> decoding_thread_count = pbi -> common . mb_rows - 1 ; } 
544,<S2SV_StartBug> if ( fileblock < INDIRECT_BLOCKS ) <S2SV_EndBug> <S2SV_StartBug> else if ( fileblock < INDIRECT_BLOCKS + blksz / 4 ) <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> } 
545,"<S2SV_StartBug> int32_t leftoverblock , int32_t ntbytes , int32_t maxbytes , <S2SV_EndBug> <S2SV_StartBug> _sw32 ( dest - 4 , - value ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ntbytes + maxout > maxbytes ) { <S2SV_EndBug> <S2SV_StartBug> maxout = ( int64_t ) maxbytes - ( int64_t ) ntbytes ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ntbytes + neblock ) > maxbytes ) { <S2SV_EndBug> ",<S2SV_ModStart> destsize <S2SV_ModEnd> <S2SV_ModStart> if ( ntbytes > destsize ) { return - 1 ; } <S2SV_ModStart> destsize <S2SV_ModEnd> <S2SV_ModStart> destsize <S2SV_ModEnd> <S2SV_ModStart> destsize <S2SV_ModEnd> 
546,<S2SV_StartBug> zval_ptr_dtor ( value ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
547,<S2SV_StartBug> BIO * tmpout = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmpout = BIO_new ( BIO_s_mem ( ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ; tmpout = cms_get_text_bio ( out , flags ) ; if ( ! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT , ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in , buf , sizeof ( buf ) ) ; if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if ( ! BIO_get_cipher_status ( in ) ) goto err ; } if ( i < 0 ) goto err ; break ; } if ( tmpout && ( BIO_write ( tmpout , buf , i ) != i ) ) goto err ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
548,<S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> buffer_size -= ( size_t ) pkg_length ; <S2SV_ModStart> buffer_size -= ( size_t ) pkg_length ; <S2SV_ModStart> buffer_size -= ( size_t ) pkg_length ; 
549,"
","
"
550,"<S2SV_StartBug> isoclns_print ( ndo , p + 1 , length - 1 , ndo -> ndo_snapend - p - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> isoclns_print ( ndo , p , length , ndo -> ndo_snapend - p ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
551,"<S2SV_StartBug> int copylen ; <S2SV_EndBug> <S2SV_StartBug> if ( m && m -> msg_control && sock_flag ( & q -> sk , SOCK_ZEROCOPY ) ) <S2SV_EndBug> <S2SV_StartBug> copylen = vnet_hdr . hdr_len ; <S2SV_EndBug> ","<S2SV_ModStart> = 0 <S2SV_ModStart> err = - EMSGSIZE ; if ( unlikely ( count > UIO_MAXIOV ) ) goto err ; <S2SV_ModStart> if ( count > MAX_SKB_FRAGS ) { copylen = iov_length ( iv , count - MAX_SKB_FRAGS ) ; if ( copylen < vnet_hdr_len ) copylen = 0 ; else copylen -= vnet_hdr_len ; } if ( copylen < vnet_hdr . hdr_len ) "
552,<S2SV_StartBug> problem_data_reload_from_dump_dir ( ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
553,"<S2SV_StartBug> return kvm_x86_ops -> set_msr ( vcpu , msr ) ; <S2SV_EndBug> ",<S2SV_ModStart> switch ( msr -> index ) { case MSR_FS_BASE : case MSR_GS_BASE : case MSR_KERNEL_GS_BASE : case MSR_CSTAR : case MSR_LSTAR : if ( is_noncanonical_address ( msr -> data ) ) return 1 ; break ; case MSR_IA32_SYSENTER_EIP : case MSR_IA32_SYSENTER_ESP : msr -> data = get_canonical ( msr -> data ) ; } 
554,"<S2SV_StartBug> struct perf_event_context * ctx ; <S2SV_EndBug> <S2SV_StartBug> struct perf_event_context * gctx = group_leader -> ctx ; <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & gctx -> mutex ) ; <S2SV_EndBug> <S2SV_StartBug> perf_remove_from_context ( group_leader , false ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & gctx -> mutex ) ; <S2SV_EndBug> ","<S2SV_ModStart> , * uninitialized_var ( gctx ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_lock_double ( & gctx -> mutex , & ctx -> mutex ) ; perf_remove_from_context ( group_leader , false ) ; perf_event__state_init ( group_leader ) ; list_for_each_entry ( sibling , & group_leader -> sibling_list , group_entry ) { perf_remove_from_context ( sibling , false ) ; perf_event__state_init ( sibling ) ; put_ctx ( gctx ) ; } } else { <S2SV_ModStart> ctx -> mutex ) ; } WARN_ON_ONCE ( ctx -> parent_ctx ) ; if ( move_group ) { synchronize_rcu ( ) ; perf_install_in_context ( ctx , group_leader , group_leader -> cpu ) ; get_ctx ( ctx ) ; list_for_each_entry ( sibling , & group_leader -> sibling_list , group_entry ) { perf_install_in_context ( ctx , sibling , sibling -> cpu ) ; get_ctx ( ctx ) ; } } perf_install_in_context ( ctx , event , event -> cpu ) ; perf_unpin_context ( ctx ) ; if ( move_group ) { mutex_unlock ( & <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
555,"<S2SV_StartBug> return crypto_alloc_skcipher ( name , type , mask ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> struct skcipher_tfm * tfm ; struct crypto_skcipher * skcipher ; tfm = kzalloc ( sizeof ( * tfm ) , GFP_KERNEL ) ; if ( ! tfm ) return ERR_PTR ( - ENOMEM ) ; skcipher = <S2SV_ModEnd> <S2SV_ModStart> if ( IS_ERR ( skcipher ) ) { kfree ( tfm ) ; return ERR_CAST ( skcipher ) ; } tfm -> skcipher = skcipher ; return tfm ; "
556,<S2SV_StartBug> if ( x & ( 1 << i ) ) return i ; <S2SV_EndBug> ,<S2SV_ModStart> 1U << ( unsigned int ) <S2SV_ModEnd> 
557,<S2SV_StartBug> if ( attr >= 0 ) { <S2SV_EndBug> ,"<S2SV_ModStart> && xhash_get ( in -> states , rkey ) == ( void * ) conn_INPROGRESS "
558,<S2SV_StartBug> int req_len ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> ,<S2SV_ModStart> unsigned <S2SV_ModStart> ; if ( req_len > ( QETH_BUFSIZE - IPA_PDU_HEADER_SIZE - sizeof ( struct qeth_ipacmd_hdr ) - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) ) ) return - EINVAL 
559,"<S2SV_StartBug> separator = strchr ( connection -> buffer , '=' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> 
560,"<S2SV_StartBug> const int min_frame_target = MAX ( rc -> min_frame_bandwidth , <S2SV_EndBug> <S2SV_StartBug> rc -> av_per_frame_bandwidth >> 5 ) ; <S2SV_EndBug> <S2SV_StartBug> return target ; <S2SV_EndBug> ","<S2SV_ModStart> VP9EncoderConfig * oxcf = & cpi -> oxcf ; const <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_ModStart> if ( oxcf -> rc_max_inter_bitrate_pct ) { const int max_rate = rc -> avg_frame_bandwidth * oxcf -> rc_max_inter_bitrate_pct / 100 ; target = MIN ( target , max_rate ) ; } "
561,<S2SV_StartBug> if ( ! ( ( pi -> y % ( OPJ_INT32 ) ( comp -> dy << rpy ) == 0 ) || ( ( pi -> y == pi -> ty0 ) && <S2SV_EndBug> ,<S2SV_ModStart> rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx ) != comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy ) != comp -> dy ) { continue ; } if ( 
562,"<S2SV_StartBug> & key_datums , & key_nulls , & key_count ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; if ( key_count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , key_count , ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) "
563,<S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> if ( ! signal_pending ( current ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> out_put_key : <S2SV_EndBug> ,<S2SV_ModStart> out <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
564,"
","
"
565,<S2SV_StartBug> xstep = picomp -> hsamp * ( 1 << <S2SV_EndBug> <S2SV_StartBug> ystep = picomp -> vsamp * ( 1 << <S2SV_EndBug> <S2SV_StartBug> if ( ( ( pi -> x == pi -> xstart && ( ( trx0 << r ) % ( 1 << rpx ) ) ) || <S2SV_EndBug> <S2SV_StartBug> ( ( pi -> y == pi -> ystart && ( ( try0 << r ) % ( 1 << rpy ) ) ) || <S2SV_EndBug> ,"<S2SV_ModStart> if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> "
566,"<S2SV_StartBug> static char * print_value ( cJSON * item , int depth , int fmt ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> case cJSON_NULL : out = cJSON_strdup ( ""null"" ) ; break ; <S2SV_EndBug> <S2SV_StartBug> case cJSON_Number : out = print_number ( item ) ; break ; <S2SV_EndBug> <S2SV_StartBug> case cJSON_String : out = print_string ( item ) ; break ; <S2SV_EndBug> <S2SV_StartBug> case cJSON_Array : out = print_array ( item , depth , fmt ) ; break ; <S2SV_EndBug> <S2SV_StartBug> case cJSON_Object : out = print_object ( item , depth , fmt ) ; break ; <S2SV_EndBug> ","<S2SV_ModStart> , printbuffer * p <S2SV_ModStart> if ( p ) { <S2SV_ModStart> { out = ensure ( p , 5 ) ; if ( out ) strcpy ( out , ""null"" ) ; break ; } case cJSON_False : { out = ensure ( p , 6 ) ; if ( out ) strcpy ( out , ""false"" ) ; break ; } case cJSON_True : { out = ensure ( p , 5 ) ; if ( out ) strcpy ( out , ""true"" ) ; break ; } case cJSON_Number : out = print_number ( item , p ) ; break ; case cJSON_String : out = print_string ( item , p ) ; break ; case cJSON_Array : out = print_array ( item , depth , fmt , p ) ; break ; case cJSON_Object : out = print_object ( item , depth , fmt , p ) ; break ; } } else { switch ( ( item -> type ) & 255 ) { case cJSON_NULL : <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 ) ; break ; } <S2SV_ModEnd> "
567,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> ( void ) cpi ; ( void ) fullpixel ; 
568,"<S2SV_StartBug> static void update_coef_probs ( VP9_COMP * cpi , vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> vp9_coeff_stats frame_branch_ct [ TX_SIZES ] [ PLANE_TYPES ] ; <S2SV_EndBug> <S2SV_StartBug> for ( tx_size = TX_4X4 ; tx_size <= max_tx_size ; ++ tx_size ) <S2SV_EndBug> <S2SV_StartBug> update_coef_probs_common ( w , cpi , tx_size , frame_branch_ct [ tx_size ] ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { vp9_coeff_stats frame_branch_ct [ PLANE_TYPES ] ; vp9_coeff_probs_model frame_coef_probs [ PLANE_TYPES ] ; if ( cpi -> td . counts -> tx . tx_totals [ tx_size ] <= 20 || ( tx_size >= TX_16X16 && cpi -> sf . tx_size_search_method == USE_TX_8X8 ) ) { vpx_write_bit ( w , 0 ) ; } else { build_tree_distribution ( cpi , tx_size , frame_branch_ct , frame_coef_probs ) ; <S2SV_ModStart> , frame_coef_probs <S2SV_ModEnd> <S2SV_ModStart> } } "
569,"<S2SV_StartBug> ptr = strchr ( ptr + 1 , '/' ) + 1 ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> 
570,<S2SV_StartBug> ( unsigned char * ) e + sizeof ( struct ipt_entry ) >= limit ) { <S2SV_EndBug> ,<S2SV_ModStart> limit || ( unsigned char * ) e + e -> next_offset > 
571,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> assert_regexp_syntax_error ( ""\\\\x0"" ) ; assert_regexp_syntax_error ( ""\\\\x"" ) ; assert_regexp_syntax_error ( ""\\\\xxy"" ) ; "
572,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> L -> oldpc = 0 ; 
573,"<S2SV_StartBug> const u_char * ep , uint32_t phase , uint32_t doi0 _U_ , <S2SV_EndBug> <S2SV_StartBug> uint32_t proto0 _U_ , int depth ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>orig=("" ) ) ; <S2SV_EndBug> <S2SV_StartBug> size_t nmap = sizeof ( oakley_t_map ) / sizeof ( oakley_t_map [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case IPSECDOI_NTYPE_REPLAY_STATUS : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> isakmp_print ( ndo , cp , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "")"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> _U_ <S2SV_ModStart> _U_ <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) ; ND_PRINT ( ( ndo , ""<S2SV_blank>attrs=("" ) <S2SV_ModStart> ND_PRINT ( ( ndo , "")"" ) ) ; <S2SV_ModStart> ND_PRINT ( ( ndo , ""<S2SV_blank>status=("" ) ) ; <S2SV_ModStart> ND_PRINT ( ( ndo , "")"" ) ) <S2SV_ModEnd> <S2SV_ModStart> if ( ndo -> ndo_vflag > 3 ) { ND_PRINT ( ( ndo , ""<S2SV_blank>data=("" ) ) ; if ( ! rawprint ( ndo , ( const uint8_t * ) ( cp ) , ep - cp ) ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> } else { if ( ! ike_show_somedata ( ndo , cp , ep ) ) goto trunc ; } break ; } "
574,<S2SV_StartBug> if ( filter [ i ] . jf ) <S2SV_EndBug> <S2SV_StartBug> t_offset += is_near ( f_offset ) ? 2 : 6 ; <S2SV_EndBug> ,<S2SV_ModStart> && f_offset <S2SV_ModStart> 5 <S2SV_ModEnd> 
575,"<S2SV_StartBug> if ( test_bit ( DMF_FREEING , & md -> flags ) || <S2SV_EndBug> <S2SV_StartBug> dm_deleting_md ( md ) ) <S2SV_EndBug> <S2SV_StartBug> dm_get ( md ) ; <S2SV_EndBug> ",<S2SV_ModStart> spin_lock ( & _minor_lock ) ; <S2SV_ModStart> { md = NULL ; goto out ; } <S2SV_ModEnd> <S2SV_ModStart> ) ; out : spin_unlock ( & _minor_lock 
576,<S2SV_StartBug> if ( ! ps_dec -> u1_first_slice_in_stream && ( ps_dec -> u4_first_slice_in_pic == 2 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ps_dec -> u4_first_slice_in_pic != 2 ) <S2SV_EndBug> <S2SV_StartBug> else if ( ps_dec -> u4_first_slice_in_pic == 2 ) <S2SV_EndBug> <S2SV_StartBug> if ( ps_dec -> u4_first_slice_in_pic ) <S2SV_EndBug> <S2SV_StartBug> num_mb_skipped = u2_first_mb_in_slice << u1_mbaff ; <S2SV_EndBug> <S2SV_StartBug> num_mb_skipped = ( ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) <S2SV_EndBug> <S2SV_StartBug> if ( ( u2_first_mb_in_slice << u1_mbaff ) > ps_dec -> u2_total_mbs_coded ) <S2SV_EndBug> <S2SV_StartBug> - ps_dec -> u2_total_mbs_coded ; <S2SV_EndBug> <S2SV_StartBug> if ( ps_dec -> u4_first_slice_in_pic == 2 ) <S2SV_EndBug> <S2SV_StartBug> if ( ps_dec -> u4_first_slice_in_pic == 2 ) <S2SV_EndBug> <S2SV_StartBug> ps_dec -> u4_first_slice_in_pic = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> == 0 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> prev_slice_err = 2 <S2SV_ModEnd> <S2SV_ModStart> ( ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) - ps_dec -> u2_total_mbs_coded ; ps_cur_poc = & s_tmp_poc ; } } else { if ( ( <S2SV_ModStart> ) > ps_dec -> u2_total_mbs_coded ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> - <S2SV_ModEnd> <S2SV_ModStart> ; ps_cur_poc = & s_tmp_poc ; } else if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
577,<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( s -> codec_id == AV_CODEC_ID_JV ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( s -> codec_id == AV_CODEC_ID_INTERPLAY_VIDEO ) { w_align = 8 ; h_align = 8 ; } <S2SV_ModStart> || s -> codec_id == AV_CODEC_ID_INTERPLAY_VIDEO 
578,<S2SV_StartBug> if ( L_ICANON ( tty ) ) <S2SV_EndBug> ,<S2SV_ModStart> && ! L_EXTPROC ( tty ) 
579,"<S2SV_StartBug> sun_data = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) sun_info . length , <S2SV_EndBug> <S2SV_StartBug> sizeof ( * sun_data ) ) ; <S2SV_EndBug> <S2SV_StartBug> height = sun_info . height ; <S2SV_EndBug> ","<S2SV_ModStart> bytes_per_line = sun_info . width * sun_info . depth ; <S2SV_ModStart> MagickMax ( <S2SV_ModStart> bytes_per_line * sun_info . width ) , <S2SV_ModStart>  <S2SV_ModEnd> "
580,"<S2SV_StartBug> int release_vp9_frame_buffer ( void * cb_priv , <S2SV_EndBug> ",<S2SV_ModStart> static 
581,"<S2SV_StartBug> void vp9_cost_tokens ( int * costs , const vp9_prob * probs , vp9_tree tree ) { <S2SV_EndBug> ",<S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_tree <S2SV_ModEnd> 
582,"<S2SV_StartBug> vmcs_writel ( HOST_CR0 , read_cr0 ( ) & ~ X86_CR0_TS ) ; <S2SV_EndBug> <S2SV_StartBug> vmcs_writel ( HOST_CR4 , read_cr4 ( ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned long cr4 ; <S2SV_ModStart> HOST_CR3 , read_cr3 ( ) ) ; cr4 = read_cr4 ( ) ; vmcs_writel ( HOST_CR4 , cr4 ) ; vmx -> host_state . vmcs_host_cr4 = cr4 <S2SV_ModEnd> "
583,<S2SV_StartBug> value = ( unsigned short ) ( ( buffer [ 1 ] << 8 ) | buffer [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffff ) ; <S2SV_EndBug> <S2SV_StartBug> value = ( unsigned short ) ( ( ( ( unsigned char * ) buffer ) [ 0 ] << 8 ) | <S2SV_EndBug> <S2SV_StartBug> ( ( unsigned char * ) buffer ) [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffff ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; value |= ( unsigned short ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> buffer <S2SV_ModEnd> <S2SV_ModStart> ; value |= ( unsigned short ) buffer <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
584,"<S2SV_StartBug> code = validate_as_request ( kdc_active_realm , request , * princ , <S2SV_EndBug> ","<S2SV_ModStart> princ -> pw_expiration = 0 ; clear ( princ -> attributes , KRB5_KDB_REQUIRES_PWCHANGE ) ; "
585,"<S2SV_StartBug> dprintk ( 2 , ""vm_open<S2SV_blank>%p<S2SV_blank>[count=%d,vma=%08lx-%08lx]\\n"" , map , <S2SV_EndBug> ","<S2SV_ModStart> ""vm_open<S2SV_blank>%p<S2SV_blank>[count=%u,vma=%08lx-%08lx]\\n"" <S2SV_ModEnd> "
586,"<S2SV_StartBug> u8 obuf [ 0x40 ] , ibuf [ 0x40 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( mutex_lock_interruptible ( & d -> i2c_mutex ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> switch ( num ) { <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = msg [ 0 ] . buf [ 0 ] + 0x36 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 3 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 0 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x10 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 1 , ibuf , 2 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> msg [ 0 ] . buf [ 1 ] = ibuf [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> msg [ 0 ] . buf [ 0 ] = ibuf [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x08 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = msg [ 0 ] . addr ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = msg [ 0 ] . len ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & obuf [ 3 ] , msg [ 0 ] . buf , msg [ 0 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , msg [ 0 ] . len + 3 , <S2SV_EndBug> <S2SV_StartBug> ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x09 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = msg [ 0 ] . len ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 3 ] = msg [ 0 ] . addr ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & obuf [ 4 ] , msg [ 0 ] . buf , msg [ 0 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , msg [ 0 ] . len + 4 , <S2SV_EndBug> <S2SV_StartBug> ibuf , msg [ 1 ] . len + 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( msg [ 1 ] . buf , & ibuf [ 1 ] , msg [ 1 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & d -> i2c_mutex ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct dw2102_state * state <S2SV_ModEnd> <S2SV_ModStart> state = d -> priv ; <S2SV_ModStart> if ( mutex_lock_interruptible ( & d -> data_mutex ) < 0 ) { mutex_unlock ( & d -> i2c_mutex ) ; return - EAGAIN ; } <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data , 1 , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data [ 1 ] = msg [ 0 ] . len ; state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> data_mutex ) ; mutex_unlock ( & d -> "
587,<S2SV_StartBug> blockcnt = ( ( len + pos ) + blocksize - 1 ) >> <S2SV_EndBug> ,<S2SV_ModStart> if ( len < 1 || len == 0xffffffff ) { return - 1 ; } 
588,<S2SV_StartBug> struct cred * cred ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cred ) <S2SV_EndBug> <S2SV_StartBug> return create_user_ns ( cred ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; int err = - ENOMEM <S2SV_ModStart> cred ) { err = create_user_ns ( cred ) ; if ( err ) put_cred ( cred ) ; else <S2SV_ModEnd> <S2SV_ModStart> } return err <S2SV_ModEnd> 
589,<S2SV_StartBug> status = sctp_v4_protosw_init ( ) ; <S2SV_EndBug> <S2SV_StartBug> status = register_pernet_subsys ( & sctp_net_ops ) ; <S2SV_EndBug> <S2SV_StartBug> unregister_pernet_subsys ( & sctp_net_ops ) ; <S2SV_EndBug> <S2SV_StartBug> err_protosw_init : <S2SV_EndBug> ,<S2SV_ModStart> register_pernet_subsys ( & sctp_defaults_ops ) ; if ( status ) goto err_register_defaults ; status = <S2SV_ModStart> sctp_ctrlsock_ops ) ; if ( status ) goto err_register_ctrlsock <S2SV_ModEnd> <S2SV_ModStart> sctp_ctrlsock_ops ) ; err_register_ctrlsock <S2SV_ModEnd> <S2SV_ModStart> : unregister_pernet_subsys ( & sctp_defaults_ops ) ; err_register_defaults 
590,<S2SV_StartBug> if ( ! chip -> num_interfaces ) <S2SV_EndBug> <S2SV_StartBug> atomic_dec ( & chip -> active ) ; <S2SV_EndBug> ,<S2SV_ModStart> atomic_dec ( & chip -> active ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
591,"<S2SV_StartBug> cntsize ( in , & sumlen , & nnode ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; if ( TSQUERY_TOO_BIG ( nnode , sumlen ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""tsquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large"" ) ) "
592,<S2SV_StartBug> s -> decode_mb = mpeg4_decode_studio_mb ; <S2SV_EndBug> ,<S2SV_ModStart> interlaced_dct = 0 ; s -> 
593,"<S2SV_StartBug> ret = read ( p_dev -> fd , & ev , sizeof ( ev ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
594,"<S2SV_StartBug> int status = 0 ; <S2SV_EndBug> <S2SV_StartBug> state = nfs4_do_open ( dir , & path , flags , sattr , cred ) ; <S2SV_EndBug> <S2SV_StartBug> status = nfs4_intent_set_file ( nd , & path , state ) ; <S2SV_EndBug> <S2SV_StartBug> nfs4_close_sync ( & path , state , flags ) ; <S2SV_EndBug> ","<S2SV_ModStart> fmode_t fmode = flags & ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart> , fmode <S2SV_ModStart> , fmode <S2SV_ModStart> fmode <S2SV_ModEnd> "
595,<S2SV_StartBug> struct key * keyring ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( new -> thread_keyring ) return 0 
596,<S2SV_StartBug> if ( index > glyphCache -> glyphCache [ id ] . number ) <S2SV_EndBug> ,<S2SV_ModStart> >= <S2SV_ModEnd> 
597,"<S2SV_StartBug> end = strchr ( * value + 1 , \'""\' ) ; <S2SV_EndBug> <S2SV_StartBug> end ++ ; <S2SV_EndBug> ","<S2SV_ModStart> char * p = end = <S2SV_ModEnd> <S2SV_ModStart> ; while ( * p ) { if ( * p == '\\\\' ) { p ++ ; * end = * p ; } else { * end = * p ; if ( * p == \'""\' ) break ; } p ++ ; end ++ ; } if ( * end != \'""\' <S2SV_ModEnd> <S2SV_ModStart> = ++ p <S2SV_ModEnd> "
598,"<S2SV_StartBug> timr -> it_overrun += ( unsigned int ) hrtimer_forward ( timer , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
599,<S2SV_StartBug> if ( ! file ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ,<S2SV_ModStart> || count > OE_SSIZE_MAX <S2SV_ModStart> if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } 
600,"<S2SV_StartBug> cmpt -> stream_ = ( inmem ) ? jas_stream_memopen ( 0 , size ) : <S2SV_EndBug> ",<S2SV_ModStart> jas_stream_memopen2 <S2SV_ModEnd> 
601,"<S2SV_StartBug> checkstackp ( L , 1 , ra ) ; <S2SV_EndBug> ",<S2SV_ModStart> checkstackGCp <S2SV_ModEnd> 
602,<S2SV_StartBug> vpx_active_map_t map = { 0 } ; <S2SV_EndBug> ,"<S2SV_ModStart> 0 , 0 , "
603,<S2SV_StartBug> nPath = ( int ) strlen ( zPath ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( zPath == 0 ) zPath = """" ; "
604,"<S2SV_StartBug> union sctp_addr_param * addr_param ; <S2SV_EndBug> <S2SV_StartBug> addr_param = ( union sctp_addr_param * ) hdr -> params ; <S2SV_EndBug> <S2SV_StartBug> ( sctp_paramhdr_t * ) ( ( void * ) addr_param + length ) , <S2SV_EndBug> ","<S2SV_ModStart> __u32 serial <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> chunk , true , <S2SV_ModEnd> "
605,<S2SV_StartBug> vstart += entry -> vn_aux ; <S2SV_EndBug> ,<S2SV_ModStart> st32 vnaux = entry -> vn_aux ; if ( vnaux < 1 ) { goto beach ; } vstart += vnaux <S2SV_ModEnd> 
606,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && src -> data [ plane ] ; plane ++ ) <S2SV_EndBug> ,<S2SV_ModStart> [ plane ] && src -> linesize 
607,"<S2SV_StartBug> n = r -> sector_count ; <S2SV_EndBug> <S2SV_StartBug> r -> iov . iov_len = n * 512 ; <S2SV_EndBug> <S2SV_StartBug> qemu_iovec_init_external ( & r -> qiov , & r -> iov , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> r -> req . aiocb = bdrv_aio_readv ( s -> bs , r -> sector , & r -> qiov , n , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> n = scsi_init_iovec ( r ) ; bdrv_acct_start ( s -> bs , & r -> acct , n * BDRV_SECTOR_SIZE , BDRV_ACCT_READ ) ; r -> req . aiocb = bdrv_aio_readv ( s -> bs , r -> sector , <S2SV_ModEnd> <S2SV_ModStart> n , scsi_read_complete , r ) ; if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
608,"<S2SV_StartBug> vpx_memset ( ybf -> y_buffer - 1 - ybf -> y_stride , 127 , ybf -> y_width + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ybf -> u_buffer - 1 - ybf -> uv_stride , 127 , ybf -> uv_width + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ybf -> v_buffer - 1 - ybf -> uv_stride , 127 , ybf -> uv_width + 5 ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
609,<S2SV_StartBug> char added ; <S2SV_EndBug> <S2SV_StartBug> pair -> added = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
610,<S2SV_StartBug> int vm_shared = dst_vma -> vm_flags & VM_SHARED ; <S2SV_EndBug> <S2SV_StartBug> if ( vm_shared ) { <S2SV_EndBug> <S2SV_StartBug> struct address_space * mapping = dst_vma -> vm_file -> f_mapping ; <S2SV_EndBug> <S2SV_StartBug> spin_lock ( ptl ) ; <S2SV_EndBug> ,"<S2SV_ModStart> struct address_space * mapping ; pgoff_t idx ; unsigned long size ; <S2SV_ModStart> mapping = dst_vma -> vm_file -> f_mapping ; idx = vma_hugecache_offset ( h , dst_vma , dst_addr ) ; <S2SV_ModStart> size = i_size_read ( mapping -> host ) >> huge_page_shift ( h ) ; ret = - EFAULT ; if ( idx >= size ) goto out_release_nounlock <S2SV_ModEnd> <S2SV_ModStart> ; size = i_size_read ( mapping -> host ) >> huge_page_shift ( h ) ; ret = - EFAULT ; if ( idx >= size ) goto out_release_unlock "
611,"<S2SV_StartBug> error = xfs_da_shrink_inode ( args , 0 , bp ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( bp && ( <S2SV_ModEnd> <S2SV_ModStart> != 0 ) <S2SV_ModEnd> 
612,<S2SV_StartBug> if ( ! stream -> config . cfg . g_w || ! stream -> config . cfg . g_h ) <S2SV_EndBug> <S2SV_StartBug> if ( stream -> config . cfg . g_profile != 0 && ! global -> experimental_bitstream ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! streami -> config . out_fn ) <S2SV_EndBug> <S2SV_StartBug> const char * a = stream -> config . out_fn ; <S2SV_EndBug> <S2SV_StartBug> const char * a = stream -> config . stats_fn ; <S2SV_EndBug> ,"<S2SV_ModStart> ( void ) global ; <S2SV_ModStart> g_input_bit_depth > ( unsigned int ) stream -> config . cfg . g_bit_depth ) { fatal ( ""Stream<S2SV_blank>%d:<S2SV_blank>codec<S2SV_blank>bit<S2SV_blank>depth<S2SV_blank>(%d)<S2SV_blank>less<S2SV_blank>than<S2SV_blank>input<S2SV_blank>bit<S2SV_blank>depth<S2SV_blank>(%d)"" , stream -> index , ( int ) stream -> config . cfg . g_bit_depth , stream -> config . cfg . g_input_bit_depth ) ; } for ( streami = stream ; streami ; streami = streami -> next ) { if ( ! streami -> config . out_fn ) fatal ( ""Stream<S2SV_blank>%d:<S2SV_blank>Output<S2SV_blank>file<S2SV_blank>is<S2SV_blank>required<S2SV_blank>(specify<S2SV_blank>with<S2SV_blank>-o)"" , streami -> index ) ; if ( streami != stream ) { const char * a = stream <S2SV_ModEnd> <S2SV_ModStart> ; const char * b = streami -> config . out_fn ; if ( ! strcmp ( a , b ) && strcmp ( a , ""/dev/null"" ) && strcmp ( a , "":nul"" ) ) fatal ( ""Stream<S2SV_blank>%d:<S2SV_blank>duplicate<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(from<S2SV_blank>stream<S2SV_blank>%d)"" , streami -> index , stream -> index ) ; } <S2SV_ModEnd> <S2SV_ModStart> stats_fn ; const char * b = streami -> config . stats_fn ; if ( a && b && ! strcmp ( a , b ) ) fatal ( ""Stream<S2SV_blank>%d:<S2SV_blank>duplicate<S2SV_blank>stats<S2SV_blank>file<S2SV_blank>(from<S2SV_blank>stream<S2SV_blank>%d)"" , streami -> index , stream -> index ) ; } # if CONFIG_FP_MB_STATS <S2SV_ModEnd> <S2SV_ModStart> fpmb_stats_fn ; const char * b = streami -> config . fpmb_stats_fn ; if ( a && b && ! strcmp ( a , b ) ) fatal ( ""Stream<S2SV_blank>%d:<S2SV_blank>duplicate<S2SV_blank>mb<S2SV_blank>stats<S2SV_blank>file<S2SV_blank>(from<S2SV_blank>stream<S2SV_blank>%d)"" , streami -> index , stream -> index ) ; } # endif <S2SV_ModEnd> "
613,"<S2SV_StartBug> ip_printroute ( ndo , cp , option_len ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( <S2SV_ModStart> == - 1 ) goto trunc 
614,"<S2SV_StartBug> if ( ! kvm_read_cr4_bits ( vcpu , X86_CR4_VMXE ) ) { <S2SV_EndBug> ","<S2SV_ModStart> ) ) { kvm_queue_exception ( vcpu , UD_VECTOR ) ; return 1 ; } if ( vmx_get_cpl ( vcpu "
615,"<S2SV_StartBug> bool issrc , isneg ; <S2SV_EndBug> <S2SV_StartBug> off_reg = issrc ? insn -> src_reg : insn -> dst_reg ; <S2SV_EndBug> <S2SV_StartBug> if ( isneg ) <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_IMM ( BPF_MUL , off_reg , - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_MOV32_IMM ( BPF_REG_AX , aux -> alu_limit ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_REG ( BPF_SUB , BPF_REG_AX , off_reg ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_REG ( BPF_OR , BPF_REG_AX , off_reg ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_IMM ( BPF_NEG , BPF_REG_AX , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_IMM ( BPF_ARSH , BPF_REG_AX , 63 ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_REG ( BPF_AND , BPF_REG_AX , off_reg ) ; <S2SV_EndBug> <S2SV_StartBug> if ( issrc && isneg ) <S2SV_EndBug> ","<S2SV_ModStart> , isimm <S2SV_ModStart> isimm = aux -> alu_state & BPF_ALU_IMMEDIATE ; <S2SV_ModStart> isimm ) { <S2SV_ModEnd> <S2SV_ModStart> BPF_MOV32_IMM ( BPF_REG_AX , aux -> alu_limit ) ; } else { if ( isneg ) <S2SV_ModEnd> <S2SV_ModStart> BPF_ALU64_IMM ( BPF_MUL , off_reg , - 1 <S2SV_ModEnd> <S2SV_ModStart> BPF_MOV32_IMM ( BPF_REG_AX , aux -> alu_limit <S2SV_ModEnd> <S2SV_ModStart> BPF_SUB <S2SV_ModEnd> <S2SV_ModStart> BPF_ALU64_REG ( BPF_OR <S2SV_ModEnd> <S2SV_ModStart> off_reg <S2SV_ModEnd> <S2SV_ModStart> BPF_NEG <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> BPF_ALU64_IMM ( BPF_ARSH , BPF_REG_AX , 63 ) ; * patch ++ = <S2SV_ModStart> } <S2SV_ModStart> && ! isimm "
616,<S2SV_StartBug> err = 0 ; <S2SV_EndBug> <S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> msg -> msg_namelen = 0 ; <S2SV_ModStart>  <S2SV_ModEnd> 
617,"<S2SV_StartBug> size_t i , maxcount ; <S2SV_EndBug> <S2SV_StartBug> ssi -> si_count = CDF_TOLE2 ( si -> si_count ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < CDF_TOLE4 ( si -> si_count ) ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> info , count , & maxcount ) == - 1 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> CDF_TOLE4 <S2SV_ModEnd> <S2SV_ModStart> if ( cdf_read_property_info ( sst , h , CDF_TOLE4 ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
618,"<S2SV_StartBug> for ( j = 0 ; j < size ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> r_cons_printf ( ""%02x"" , buf [ j + idx ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( op . val != UT64_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( op . ptr != UT64_MAX ) <S2SV_EndBug> <S2SV_StartBug> printline ( ""ptr"" , ""0x%08"" PFMT64x ""\\n"" , op . ptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( op . refptr != - 1 ) <S2SV_EndBug> <S2SV_StartBug> printline ( ""refptr"" , ""%d\\n"" , op . refptr ) ; <S2SV_EndBug> ","<S2SV_ModStart> int minsz = R_MIN ( len , size ) ; minsz = R_MAX ( minsz , 0 ) ; <S2SV_ModStart> minsz <S2SV_ModEnd> <S2SV_ModStart> ut8 ch = ( ( j + idx - 1 ) > minsz ) ? 0xff : <S2SV_ModEnd> <S2SV_ModStart> ; r_cons_printf ( ""%02x"" , ch <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } "
619,"<S2SV_StartBug> int pidfd = creat ( pid_file , S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH ) ; <S2SV_EndBug> ","<S2SV_ModStart> open ( pid_file , O_NOFOLLOW | O_CREAT | O_WRONLY | O_TRUNC <S2SV_ModEnd> "
620,<S2SV_StartBug> if ( ret < 0 ) { <S2SV_EndBug> ,<S2SV_ModStart> goto error ; <S2SV_ModEnd> 
621,"<S2SV_StartBug> REQ ( CHILD ( n , 0 ) , ASYNC ) ; <S2SV_EndBug> <S2SV_StartBug> return ast_for_funcdef_impl ( c , CHILD ( n , 1 ) , decorator_seq , <S2SV_EndBug> <S2SV_StartBug> 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> NAME ) ; assert ( strcmp ( STR ( CHILD ( n , 0 ) ) , ""async"" ) == 0 <S2SV_ModEnd> <S2SV_ModStart> n <S2SV_ModEnd> <S2SV_ModStart> true <S2SV_ModEnd> "
622,"<S2SV_StartBug> sprintf ( buf , ""%s.conf"" , set ) ; <S2SV_EndBug> <S2SV_StartBug> printf ( ""\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>\\n\\n"" , <S2SV_EndBug> ","<S2SV_ModStart> snprintf ( buf , sizeof ( buf ) <S2SV_ModEnd> <S2SV_ModStart> ""\\\n<S2SV_blank><S2SV_blank><S2SV_blank>\\n\\n"" <S2SV_ModEnd> "
623,<S2SV_StartBug> hdr = ( void * ) p - head -> iov_base ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( hdr > head -> iov_len ) return 0 
624,"<S2SV_StartBug> char * p , * q , * r ; <S2SV_EndBug> <S2SV_StartBug> printf ( ""Copyright<S2SV_blank>(C)<S2SV_blank>1992-2010<S2SV_blank>I.<S2SV_blank>Lee<S2SV_blank>Hetherington,<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\n<S2SV_blank>This<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\n<S2SV_blank>There<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\n<S2SV_blank>particular<S2SV_blank>purpose.\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( strncmp ( line , ""currentfile<S2SV_blank>eexec"" , 17 ) == 0 && isspace ( line [ 17 ] ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( p = line + 18 ; isspace ( * p ) ; p ++ ) <S2SV_EndBug> <S2SV_StartBug> lenIV = atoi ( line + 6 ) ; <S2SV_EndBug> <S2SV_StartBug> && strstr ( line , ""readstring"" ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( p = strstr ( line , ""/Subrs"" ) ) && isdigit ( p [ 7 ] ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( ( p = strstr ( line , ""/CharStrings"" ) ) && isdigit ( p [ 13 ] ) ) <S2SV_EndBug> <S2SV_StartBug> for ( q = p ; isspace ( * q ) && * q != '\\n' ; q ++ ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""Copyright<S2SV_blank>(C)<S2SV_blank>1992-2010<S2SV_blank>I.<S2SV_blank>Lee<S2SV_blank>Hetherington,<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\nThis<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\nThere<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\nparticular<S2SV_blank>purpose.\\n"" <S2SV_ModEnd> <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> set_lenIV ( line <S2SV_ModEnd> <S2SV_ModStart> ) { set_cs_start ( line ) <S2SV_ModEnd> <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) "
625,"<S2SV_StartBug> if ( * p ) { <S2SV_EndBug> <S2SV_StartBug> * q = 0 ; <S2SV_EndBug> <S2SV_StartBug> cmd = p + 1 ; <S2SV_EndBug> <S2SV_StartBug> * p = \'""\' ; <S2SV_EndBug> ",<S2SV_ModStart> char op0 = 0 ; <S2SV_ModStart> op0 = * q ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> op0 <S2SV_ModEnd> 
626,<S2SV_StartBug> ( mysql -> options . extension && mysql -> options . extension -> ssl_crlpath ) ) <S2SV_EndBug> <S2SV_StartBug> mysql -> options . use_ssl = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( mysql -> client_flag & CLIENT_SSL ) <S2SV_EndBug> <S2SV_StartBug> unsigned long ssl_error ; <S2SV_EndBug> ,"<S2SV_ModStart> || ( mysql -> options . extension && mysql -> options . extension -> ssl_enforce ) <S2SV_ModStart> TRUE <S2SV_ModEnd> <S2SV_ModStart> options . extension && mysql -> options . extension -> ssl_enforce ) { DBUG_ASSERT ( mysql -> options . use_ssl ) ; if ( ! ( mysql -> server_capabilities & CLIENT_SSL ) ) { set_mysql_extended_error ( mysql , CR_SSL_CONNECTION_ERROR , unknown_sqlstate , ER ( CR_SSL_CONNECTION_ERROR ) , ""SSL<S2SV_blank>is<S2SV_blank>required<S2SV_blank>but<S2SV_blank>the<S2SV_blank>server<S2SV_blank>doesn\'t<S2SV_blank>"" ""support<S2SV_blank>it"" ) ; goto error ; } } if ( ( mysql -> server_capabilities & CLIENT_SSL ) && mysql -> options . use_ssl <S2SV_ModEnd> <S2SV_ModStart> if ( ! mysql -> options . ssl_cipher ) { SET_OPTION ( ssl_cipher , default_ssl_cipher ) ; } "
627,<S2SV_StartBug> if ( header -> biSize >= 40U ) { <S2SV_EndBug> ,"<S2SV_ModStart> biBitCount == 0 ) { fprintf ( stderr , ""Error,<S2SV_blank>invalid<S2SV_blank>biBitCount<S2SV_blank>%d\\n"" , 0 ) ; return OPJ_FALSE ; } if ( header -> "
628,"<S2SV_StartBug> int abrt_core_fd = xopen3 ( path , O_WRONLY | O_CREAT | O_TRUNC , 0600 ) ; <S2SV_EndBug> ",<S2SV_ModStart> unlink ( path ) ; <S2SV_ModStart> O_EXCL <S2SV_ModEnd> 
629,<S2SV_StartBug> return - ETIMEDOUT ; <S2SV_EndBug> ,<S2SV_ModStart> kfree_skb ( skb ) ; 
630,<S2SV_StartBug> vp8_clear_system_state ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> ctx -> si . w = 0 ; ctx -> si . h = 0 ; 
631,"<S2SV_StartBug> if ( ! test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) { <S2SV_EndBug> <S2SV_StartBug> set_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ; <S2SV_EndBug> ","<S2SV_ModStart> key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> <S2SV_ModStart> mark_key_instantiated ( key , 0 <S2SV_ModEnd> "
632,"<S2SV_StartBug> ldblk , sizeof ( * BImgBuff ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> + 1 
633,<S2SV_StartBug> if ( cmd == TUNSETIFF || _IOC_TYPE ( cmd ) == 0x89 ) <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> ,"<S2SV_ModStart> { <S2SV_ModStart> ; } else memset ( & ifr , 0 , sizeof ( ifr ) ) "
634,<S2SV_StartBug> if ( gfs ) <S2SV_EndBug> ,<S2SV_ModStart> last_name = 0 ; 
635,"<S2SV_StartBug> void bpf_map_inc ( struct bpf_map * map , bool uref ) <S2SV_EndBug> <S2SV_StartBug> atomic_inc ( & map -> refcnt ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> struct bpf_map * <S2SV_ModEnd> <S2SV_ModStart> if ( atomic_inc_return ( & map -> refcnt ) > BPF_MAX_REFCNT ) { atomic_dec <S2SV_ModEnd> <S2SV_ModStart> return ERR_PTR ( - EBUSY ) ; } <S2SV_ModStart> return map ; 
636,<S2SV_StartBug> usb_conv_info -> class_data = u3v_conv_info ; <S2SV_EndBug> ,<S2SV_ModStart> ; usb_conv_info -> class_data_type = USB_CONV_U3V ; } else if ( usb_conv_info -> class_data_type != USB_CONV_U3V ) { return 0 
637,"<S2SV_StartBug> if ( plen == 0 ) { <S2SV_EndBug> <S2SV_StartBug> phdr = sctp_get_next_param ( m , offset , <S2SV_EndBug> ",<S2SV_ModStart> < sizeof ( struct sctp_paramhdr ) <S2SV_ModEnd> <S2SV_ModStart> if ( plen < sizeof ( struct sctp_asconf_addrv4_param ) ) { return ( - 101 ) ; } 
638,<S2SV_StartBug> else if ( verify & GNUTLS_CERT_INVALID ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> } if ( error == NULL ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
639,"<S2SV_StartBug> str = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) count , sizeof ( * str ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> + 1 
640,"<S2SV_StartBug> PyObject * logical = NULL ; <S2SV_EndBug> <S2SV_StartBug> FriBidiParType base = FRIBIDI_TYPE_RTL ; <S2SV_EndBug> <S2SV_StartBug> { ""logical"" , ""base_direction"" , ""encoding"" , ""clean"" , ""reordernsm"" , NULL } ; <S2SV_EndBug> <S2SV_StartBug> if ( ! PyArg_ParseTupleAndKeywords ( args , kw , ""O|isii"" , kwargs , <S2SV_EndBug> <S2SV_StartBug> & logical , & base , & encoding , & clean , & reordernsm ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> base == FRIBIDI_TYPE_LTR || base == FRIBIDI_TYPE_ON ) ) <S2SV_EndBug> <S2SV_StartBug> if ( PyUnicode_Check ( logical ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( PyString_Check ( logical ) ) <S2SV_EndBug> ","<S2SV_ModStart> PyUnicodeObject <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""U|iii"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } return unicode_log2vis <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
641,<S2SV_StartBug> nfca_poll -> nfcid1_len = * data ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> min_t ( __u8 , <S2SV_ModStart> , NFC_NFCID1_MAXSIZE ) "
642,"<S2SV_StartBug> int zero_bits = * in & 0x07 ; <S2SV_EndBug> <S2SV_StartBug> size_t octets_left = inlen - 1 ; <S2SV_EndBug> <S2SV_StartBug> int i , count = 0 ; <S2SV_EndBug> ","<S2SV_ModStart> i , count = 0 ; int zero_bits ; size_t octets_left ; if ( outlen < octets_left ) return SC_ERROR_BUFFER_TOO_SMALL ; if ( inlen < 1 ) return SC_ERROR_INVALID_ASN1_OBJECT ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> in ++ ; memset ( outbuf , 0 , outlen ) ; while ( octets_left ) { int bits_to_go ; * out = 0 ; if ( octets_left == 1 ) bits_to_go = 8 - zero_bits ; else bits_to_go = 8 ; if ( invert ) for ( i = 0 ; i < bits_to_go ; i ++ ) { * out |= ( ( * in >> ( 7 - i ) ) & 1 ) << i ; } else { * out = * in ; } out ++ ; in ++ ; octets_left -- ; count ++ ; } return ( count * 8 <S2SV_ModEnd> "
643,<S2SV_StartBug> if ( uid >= AID_APP ) { <S2SV_EndBug> ,<S2SV_ModStart> multiuser_get_app_id ( uid ) <S2SV_ModEnd> 
644,"<S2SV_StartBug> ret = get_tag ( asn1 , len , & inner_tag , & asn1 , & len , & rem , & rlen ) ; <S2SV_EndBug> ","<S2SV_ModStart> , 0 "
645,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK2 ( * s , 1 ) ; "
646,"<S2SV_StartBug> if ( ( ret = av_image_check_size ( s -> width , s -> height , 0 , avctx ) ) < 0 ) { <S2SV_EndBug> ","<S2SV_ModStart> ff_set_dimensions ( avctx , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
647,"<S2SV_StartBug> pipe_write ( struct kiocb * iocb , const struct iovec * _iov , <S2SV_EndBug> <S2SV_StartBug> ssize_t ret ; <S2SV_EndBug> <S2SV_StartBug> int do_wakeup ; <S2SV_EndBug> <S2SV_StartBug> size_t total_len ; <S2SV_EndBug> <S2SV_StartBug> total_len = iov_length ( iov , nr_segs ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> int error , atomic = 1 ; <S2SV_EndBug> <S2SV_StartBug> iov_fault_in_pages_read ( iov , chars ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> total_len -= chars ; <S2SV_EndBug> <S2SV_StartBug> char * src ; <S2SV_EndBug> <S2SV_StartBug> chars = PAGE_SIZE ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( error ) ) { <S2SV_EndBug> <S2SV_StartBug> ret += chars ; <S2SV_EndBug> <S2SV_StartBug> buf -> len = chars ; <S2SV_EndBug> <S2SV_StartBug> total_len -= chars ; <S2SV_EndBug> ","<S2SV_ModStart> struct iov_iter * from <S2SV_ModEnd> <S2SV_ModStart> = 0 <S2SV_ModStart> = 0 <S2SV_ModEnd> <S2SV_ModStart> = iov_iter_count ( from ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ret = copy_page_from_iter ( buf -> page , offset , chars , from ) ; if ( unlikely ( ret < chars ) ) { error = - EFAULT ; <S2SV_ModEnd> <S2SV_ModStart> do_wakeup = 1 ; <S2SV_ModStart> ret = chars ; if ( ! iov_iter_count ( from ) <S2SV_ModEnd> <S2SV_ModStart> int copied <S2SV_ModEnd> <S2SV_ModStart> copied = copy_page_from_iter ( page , 0 , PAGE_SIZE , from <S2SV_ModEnd> <S2SV_ModStart> copied < PAGE_SIZE && iov_iter_count ( from ) ) ) { if ( ! ret ) ret = - EFAULT <S2SV_ModEnd> <S2SV_ModStart> copied <S2SV_ModEnd> <S2SV_ModStart> copied <S2SV_ModEnd> <S2SV_ModStart> if ( ! iov_iter_count ( from ) <S2SV_ModEnd> "
648,"<S2SV_StartBug> u64 insn_bitness = ( BPF_CLASS ( insn -> code ) == BPF_ALU64 ) ? 64 : 32 ; <S2SV_EndBug> <S2SV_StartBug> if ( signed_add_overflows ( dst_reg -> smin_value , smin_val ) || <S2SV_EndBug> <S2SV_StartBug> if ( signed_sub_overflows ( dst_reg -> smin_value , smax_val ) || <S2SV_EndBug> ","<S2SV_ModStart> ; u32 dst = insn -> dst_reg ; int ret <S2SV_ModStart> ret = sanitize_val_alu ( env , insn ) ; if ( ret < 0 ) { verbose ( env , ""R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>add<S2SV_blank>from<S2SV_blank>different<S2SV_blank>pointers<S2SV_blank>or<S2SV_blank>scalars\\n"" , dst ) ; return ret ; } <S2SV_ModStart> ret = sanitize_val_alu ( env , insn ) ; if ( ret < 0 ) { verbose ( env , ""R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>sub<S2SV_blank>from<S2SV_blank>different<S2SV_blank>pointers<S2SV_blank>or<S2SV_blank>scalars\\n"" , dst ) ; return ret ; } "
649,"<S2SV_StartBug> tlv = cp + i ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>(%u)"" , optlen + 2 ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( i + 2 > length ) return - 1 ; <S2SV_ModStart> ; if ( i + 2 + optlen > length ) return - 1 
650,<S2SV_StartBug> name_rmt -> valuelen = cpu_to_be32 ( args -> valuelen ) ; <S2SV_EndBug> ,<S2SV_ModStart> rmtvaluelen <S2SV_ModEnd> 
651,<S2SV_StartBug> if ( shdr -> sh_size < 1 ) { <S2SV_EndBug> ,<S2SV_ModStart> || shdr -> sh_size > SIZE_MAX 
652,<S2SV_StartBug> const gchar * to = xmpp_stanza_get_to ( message ) ; <S2SV_EndBug> <S2SV_StartBug> Jid * jid_to = jid_create ( to ) ; <S2SV_EndBug> ,"<S2SV_ModStart> Jid * my_jid = jid_create ( connection_get_fulljid ( ) ) ; const char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; Jid * msg_jid = jid_create ( stanza_from ) ; if ( g_strcmp0 ( my_jid -> barejid , msg_jid -> barejid ) != 0 ) { log_warning ( ""Invalid<S2SV_blank>carbon<S2SV_blank>received,<S2SV_blank>from:<S2SV_blank>%s"" , stanza_from ) ; return TRUE ; } <S2SV_ModStart>  <S2SV_ModEnd> "
653,<S2SV_StartBug> buff [ r ] = '\\0' ; <S2SV_EndBug> ,"<S2SV_ModStart> MIN ( ( size_t ) r , ( sizeof buff ) - 1 ) <S2SV_ModEnd> "
654,<S2SV_StartBug> return error ; <S2SV_EndBug> ,<S2SV_ModStart> < 0 ? error : 0 
655,<S2SV_StartBug> if ( num < 0 ) return ONIGERR_TOO_BIG_NUMBER ; <S2SV_EndBug> ,<S2SV_ModStart> || num >= 256 
656,"<S2SV_StartBug> register const u_char * tptr ) <S2SV_EndBug> <S2SV_StartBug> u_int hexdump = FALSE ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "",<S2SV_blank>%s"" , ipaddr_string ( ndo , tptr + 1 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "",<S2SV_blank>%s"" , ip6addr_string ( ndo , tptr + 1 ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> , const u_int length ) { u_int network_addr_type ; u_int <S2SV_ModEnd> <S2SV_ModStart> if ( length < 1 ) { ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>Network<S2SV_blank>Address<S2SV_blank>Type<S2SV_blank>(invalid,<S2SV_blank>no<S2SV_blank>data"" ) ) ; return hexdump ; } <S2SV_ModStart> if ( length != 1 + 4 ) { ND_PRINT ( ( ndo , ""(invalid<S2SV_blank>IPv4<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)"" , length - 1 ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> if ( length != 1 + 16 ) { ND_PRINT ( ( ndo , ""(invalid<S2SV_blank>IPv6<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)"" , length - 1 ) ) ; hexdump = TRUE ; break ; } "
657,"<S2SV_StartBug> vpx_memcpy ( & t_above , mb -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left , mb -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
658,"<S2SV_StartBug> decoder_info -> log2_sb_size = get_flc ( 3 , stream ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; decoder_info -> log2_sb_size = clip ( decoder_info -> log2_sb_size , log2i ( MIN_BLOCK_SIZE ) , log2i ( MAX_SB_SIZE ) "
659,"<S2SV_StartBug> vpx_memcpy ( & t_above , x -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left , x -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
660,"<S2SV_StartBug> void vp9_write_nmv_probs ( VP9_COMMON * cm , int usehp , vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> nmv_context * const mvc = & cm -> fc . nmvc ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_writer * w , nmv_context_counts * const counts <S2SV_ModEnd> <S2SV_ModStart> -> nmvc ; <S2SV_ModEnd> "
661,"<S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> number_threads = ( size_t ) GetMagickResourceLimit ( ThreadResource ) ; <S2SV_EndBug> <S2SV_StartBug> pixels = ( PixelChannels * * ) AcquireQuantumMemory ( number_threads , <S2SV_EndBug> <S2SV_StartBug> ( void ) memset ( pixels , 0 , number_threads * sizeof ( * pixels ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug> ","<S2SV_ModStart> rows ; rows = MagickMax ( GetImageListLength ( images ) , <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> rows , <S2SV_ModEnd> <S2SV_ModStart> columns = MaxPixelChannels ; for ( next = images ; next != ( Image * ) NULL ; next = next -> next ) columns = MagickMax ( next -> columns , columns ) ; for ( i = 0 <S2SV_ModEnd> <S2SV_ModStart> rows <S2SV_ModEnd> "
662,"<S2SV_StartBug> int frame_count , <S2SV_EndBug> <S2SV_StartBug> int mb_cols = cpi -> common . mb_cols ; <S2SV_EndBug> <S2SV_StartBug> int mb_rows = cpi -> common . mb_rows ; <S2SV_EndBug> <S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , unsigned int , accumulator , 16 * 16 * 3 ) ; <S2SV_EndBug> <S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , uint16_t , count , 16 * 16 * 3 ) ; <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * mbd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> YV12_BUFFER_CONFIG * f = cpi -> frames [ alt_ref_index ] ; <S2SV_EndBug> <S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , uint8_t , predictor , 16 * 16 * 3 ) ; <S2SV_EndBug> <S2SV_StartBug> uint8_t * input_buffer [ MAX_MB_PLANE ] ; <S2SV_EndBug> <S2SV_StartBug> assert ( mbd -> plane [ 1 ] . subsampling_x == mbd -> plane [ 1 ] . subsampling_y ) ; <S2SV_EndBug> <S2SV_StartBug> # if ALT_REF_MC_ENABLED <S2SV_EndBug> <S2SV_StartBug> cpi -> mb . mv_row_max = ( ( cpi -> common . mb_rows - 1 - mb_row ) * 16 ) <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( accumulator , 0 , 16 * 16 * 3 * sizeof ( accumulator [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( count , 0 , 16 * 16 * 3 * sizeof ( count [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> # if ALT_REF_MC_ENABLED <S2SV_EndBug> <S2SV_StartBug> cpi -> mb . mv_col_max = ( ( cpi -> common . mb_cols - 1 - mb_col ) * 16 ) <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> frames [ frame ] == NULL ) <S2SV_EndBug> <S2SV_StartBug> int err = 0 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> frames [ alt_ref_index ] -> y_buffer + mb_y_offset , <S2SV_EndBug> <S2SV_StartBug> cpi -> frames [ frame ] -> y_buffer + mb_y_offset , <S2SV_EndBug> <S2SV_StartBug> cpi -> frames [ frame ] -> y_stride ) ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> filter_weight = err < THRESH_LOW <S2SV_EndBug> <S2SV_StartBug> ? 2 : err < THRESH_HIGH ? 1 : 0 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> frames [ frame ] -> y_buffer + mb_y_offset , <S2SV_EndBug> <S2SV_StartBug> pval *= cpi -> fixed_divide [ count [ k ] ] ; <S2SV_EndBug> <S2SV_StartBug> dst1 [ byte ] = ( uint8_t ) pval ; <S2SV_EndBug> <S2SV_StartBug> stride = cpi -> alt_ref_buffer . uv_stride ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < mb_uv_height ; j ++ , k ++ ) { <S2SV_EndBug> <S2SV_StartBug> pval *= cpi -> fixed_divide [ count [ k ] ] ; <S2SV_EndBug> <S2SV_StartBug> dst1 [ byte ] = ( uint8_t ) pval ; <S2SV_EndBug> <S2SV_StartBug> pval *= cpi -> fixed_divide [ count [ m ] ] ; <S2SV_EndBug> <S2SV_StartBug> dst2 [ byte ] = ( uint8_t ) pval ; <S2SV_EndBug> <S2SV_StartBug> byte += stride - mb_uv_height ; <S2SV_EndBug> <S2SV_StartBug> mb_y_offset += 16 ; <S2SV_EndBug> <S2SV_StartBug> mb_uv_offset += mb_uv_height ; <S2SV_EndBug> <S2SV_StartBug> mb_uv_offset += mb_uv_height * ( f -> uv_stride - mb_cols ) ; <S2SV_EndBug> ","<S2SV_ModStart> YV12_BUFFER_CONFIG * * frames , <S2SV_ModStart> ( frames [ alt_ref_index ] -> y_crop_width + 15 ) >> 4 <S2SV_ModEnd> <S2SV_ModStart> ( frames [ alt_ref_index ] -> y_crop_height + 15 ) >> 4 <S2SV_ModEnd> <S2SV_ModStart> DECLARE_ALIGNED <S2SV_ModEnd> <S2SV_ModStart> [ <S2SV_ModEnd> <S2SV_ModStart> ] ) ; DECLARE_ALIGNED <S2SV_ModEnd> <S2SV_ModStart> [ <S2SV_ModEnd> <S2SV_ModStart> ] <S2SV_ModStart> td . <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH DECLARE_ALIGNED ( 16 , uint16_t , predictor16 [ 16 * 16 * 3 ] ) ; DECLARE_ALIGNED <S2SV_ModEnd> <S2SV_ModStart> predictor8 [ 16 * 16 * 3 ] ) ; uint8_t * predictor ; # else DECLARE_ALIGNED ( 16 , uint8_t , predictor [ <S2SV_ModEnd> <S2SV_ModStart> ] ) ; # endif <S2SV_ModEnd> <S2SV_ModStart> const int mb_uv_width = 16 >> mbd -> plane [ 1 ] . subsampling_x ; <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if <S2SV_ModEnd> <S2SV_ModStart> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { predictor = CONVERT_TO_BYTEPTR ( predictor16 ) ; } else { predictor = predictor8 ; } # endif <S2SV_ModEnd> <S2SV_ModStart> cpi -> td . <S2SV_ModEnd> <S2SV_ModStart> td . <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> cpi -> td . <S2SV_ModEnd> <S2SV_ModStart> td . <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const int thresh_low = 10000 ; const int thresh_high = 20000 ; if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> thresh_low <S2SV_ModEnd> <S2SV_ModStart> thresh_high <S2SV_ModEnd> <S2SV_ModStart> frames [ frame ] -> y_buffer + mb_y_offset , frames [ frame ] -> u_buffer + mb_uv_offset , frames [ frame ] -> v_buffer + mb_uv_offset , frames [ frame ] -> y_stride , mb_uv_width , mb_uv_height , mbd -> mi [ 0 ] -> bmi [ 0 ] . as_mv [ 0 ] . as_mv . row , mbd -> mi [ 0 ] -> bmi [ 0 ] . as_mv [ 0 ] . as_mv . col , predictor , scale , mb_col * 16 , mb_row * 16 ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( mbd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { int adj_strength = strength + 2 * ( mbd -> bd - 8 ) ; vp9_highbd_temporal_filter_apply ( f -> y_buffer + mb_y_offset , f -> y_stride , predictor , 16 , 16 , adj_strength , filter_weight , accumulator , count ) ; vp9_highbd_temporal_filter_apply ( f -> u_buffer + mb_uv_offset , f -> uv_stride , predictor + 256 , mb_uv_width , mb_uv_height , adj_strength , filter_weight , accumulator + 256 , count + 256 ) ; vp9_highbd_temporal_filter_apply ( f -> v_buffer + mb_uv_offset , f -> uv_stride , predictor + 512 , mb_uv_width , mb_uv_height , adj_strength , filter_weight , accumulator + 512 , count + 512 ) ; } else { vp9_temporal_filter_apply ( f -> y_buffer + mb_y_offset , f -> y_stride , predictor , 16 , 16 , strength , filter_weight , accumulator , count ) ; vp9_temporal_filter_apply ( f -> u_buffer + mb_uv_offset , f -> uv_stride , predictor + 256 , mb_uv_width , mb_uv_height , strength , filter_weight , accumulator + 256 , count + 256 ) ; vp9_temporal_filter_apply ( f -> v_buffer + mb_uv_offset , f -> uv_stride , predictor + 512 , mb_uv_width , mb_uv_height , strength , filter_weight , accumulator + 512 , count + 512 ) ; } # else vp9_temporal_filter_apply ( f -> y_buffer + mb_y_offset , f -> y_stride , predictor , 16 , 16 , strength , filter_weight , accumulator , count ) ; vp9_temporal_filter_apply ( f -> u_buffer + mb_uv_offset , f -> uv_stride , predictor + 256 , mb_uv_width , mb_uv_height , strength , filter_weight , accumulator + 256 , count + 256 ) ; vp9_temporal_filter_apply ( f -> v_buffer + mb_uv_offset , f -> uv_stride , predictor + 512 , mb_uv_width , mb_uv_height , strength , filter_weight , accumulator + 512 , count + 512 ) ; # endif } } # if CONFIG_VP9_HIGHBITDEPTH if ( mbd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { uint16_t * dst1_16 ; uint16_t * dst2_16 ; dst1 = cpi -> alt_ref_buffer . y_buffer ; dst1_16 = CONVERT_TO_SHORTPTR ( dst1 ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> dst1_16 [ byte ] = ( uint16_t <S2SV_ModEnd> <S2SV_ModStart> dst1_16 = CONVERT_TO_SHORTPTR ( dst1 ) ; dst2_16 = CONVERT_TO_SHORTPTR ( dst2 ) ; <S2SV_ModStart> mb_uv_width <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> dst1_16 [ byte ] = ( uint16_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> dst2_16 [ byte ] = ( uint16_t <S2SV_ModEnd> <S2SV_ModStart> mb_uv_width ; } } else { dst1 = cpi -> alt_ref_buffer . y_buffer ; stride = cpi -> alt_ref_buffer . y_stride ; byte = mb_y_offset ; for ( i = 0 , k = 0 ; i < 16 ; i ++ ) { for ( j = 0 ; j < 16 ; j ++ , k ++ ) { unsigned int pval = accumulator [ k ] + ( count [ k ] >> 1 ) ; pval *= fixed_divide [ count [ k ] ] ; pval >>= 19 ; dst1 [ byte ] = ( uint8_t ) pval ; byte ++ ; } byte += stride - 16 ; } dst1 = cpi -> alt_ref_buffer . u_buffer ; dst2 = cpi -> alt_ref_buffer . v_buffer ; stride = cpi -> alt_ref_buffer . uv_stride ; byte = mb_uv_offset ; for ( i = 0 , k = 256 ; i < mb_uv_height ; i ++ ) { for ( j = 0 ; j < mb_uv_width ; j ++ , k ++ ) { int m = k + 256 ; unsigned int pval = accumulator [ k ] + ( count [ k ] >> 1 ) ; pval *= fixed_divide [ count [ k ] ] ; pval >>= 19 ; dst1 [ byte ] = ( uint8_t ) pval ; pval = accumulator [ m ] + ( count [ m ] >> 1 ) ; pval *= fixed_divide [ count [ m ] ] ; pval >>= 19 ; dst2 [ byte ] = ( uint8_t ) pval ; byte ++ ; } byte += stride - mb_uv_width ; } } # else dst1 = cpi -> alt_ref_buffer . y_buffer ; stride = cpi -> alt_ref_buffer . y_stride ; byte = mb_y_offset ; for ( i = 0 , k = 0 ; i < 16 ; i ++ ) { for ( j = 0 ; j < 16 ; j ++ , k ++ ) { unsigned int pval = accumulator [ k ] + ( count [ k ] >> 1 ) ; pval *= fixed_divide [ count [ k ] ] ; pval >>= 19 ; dst1 [ byte ] = ( uint8_t ) pval ; byte ++ ; } byte += stride - 16 ; } dst1 = cpi -> alt_ref_buffer . u_buffer ; dst2 = cpi -> alt_ref_buffer . v_buffer ; stride = cpi -> alt_ref_buffer . uv_stride ; byte = mb_uv_offset ; for ( i = 0 , k = 256 ; i < mb_uv_height ; i ++ ) { for ( j = 0 ; j < mb_uv_width ; j ++ , k ++ ) { int m = k + 256 ; unsigned int pval = accumulator [ k ] + ( count [ k ] >> 1 ) ; pval *= fixed_divide [ count [ k ] ] ; pval >>= 19 ; dst1 [ byte ] = ( uint8_t ) pval ; pval = accumulator [ m ] + ( count [ m ] >> 1 ) ; pval *= fixed_divide [ count [ m ] ] ; pval >>= 19 ; dst2 [ byte ] = ( uint8_t ) pval ; byte ++ ; } byte += stride - mb_uv_width ; } # endif <S2SV_ModEnd> <S2SV_ModStart> ; mb_uv_offset += mb_uv_width ; } mb_y_offset += 16 * ( f -> y_stride - mb_cols ) <S2SV_ModStart> * <S2SV_ModEnd> <S2SV_ModStart> mb_uv_width * mb_cols <S2SV_ModEnd> "
663,<S2SV_StartBug> if ( l >= ( len - o ) ) { <S2SV_EndBug> ,<S2SV_ModStart> - 4 
664,<S2SV_StartBug> if ( ! rtlpriv -> usb_data ) <S2SV_EndBug> <S2SV_StartBug> spin_lock_init ( & rtlpriv -> locks . usb_lock ) ; <S2SV_EndBug> <S2SV_StartBug> complete ( & rtlpriv -> firmware_loading_complete ) ; <S2SV_EndBug> ,<S2SV_ModStart> { ieee80211_free_hw ( hw ) ; <S2SV_ModStart> } <S2SV_ModStart> ) ; kfree ( rtlpriv -> usb_data 
665,"<S2SV_StartBug> ihevcd_ref_list ( ps_codec , ps_pps , ps_sps , ps_slice_hdr ) ; <S2SV_EndBug> ",<S2SV_ModStart> ret = <S2SV_ModStart> if ( ( WORD32 ) IHEVCD_SUCCESS != ret ) { return ret ; } 
666,<S2SV_StartBug> while ( collen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( replen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( collen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( replen > 0 ) <S2SV_EndBug> ,<S2SV_ModStart> indexw < width && <S2SV_ModStart> indexw < width && <S2SV_ModStart> indexw < width && <S2SV_ModStart> indexw < width && 
667,<S2SV_StartBug> if ( g -> sect <= 0 || <S2SV_EndBug> <S2SV_StartBug> g -> head <= 0 || <S2SV_EndBug> ,<S2SV_ModStart> ( int ) <S2SV_ModStart> ( int ) <S2SV_ModStart> <= 0 || ( int ) ( g -> sect * g -> head ) 
668,"<S2SV_StartBug> int retval = 0 ; <S2SV_EndBug> <S2SV_StartBug> retval = - ENODEV ; <S2SV_EndBug> <S2SV_StartBug> bytes_read = snprintf ( in_buffer , 20 , ""%lld\\n"" , dev -> bbu ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * ppos < bytes_read ) { <S2SV_EndBug> <S2SV_StartBug> return retval ; <S2SV_EndBug> ","<S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & dev -> io_mutex ) ; return - ENODEV <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> simple_read_from_buffer ( buffer , count , ppos , in_buffer , len ) <S2SV_ModEnd> "
669,<S2SV_StartBug> draw_info -> geometry = AcquireString ( geometry ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ( void ) CloneString ( & <S2SV_ModStart> , <S2SV_ModEnd> "
670,"<S2SV_StartBug> isoclns_print ( ndo , p , length , caplen ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
671,<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> int layer ; <S2SV_EndBug> <S2SV_StartBug> if ( svc -> number_temporal_layers > 1 ) { <S2SV_EndBug> <S2SV_StartBug> LAYER_CONTEXT * const lc = & svc -> layer_context [ layer ] ; <S2SV_EndBug> ,"<S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> sl , tl ; int alt_ref_idx = svc -> number_spatial_layers ; svc -> spatial_layer_id = 0 ; svc -> temporal_layer_id = 0 ; if ( cpi -> oxcf . error_resilient_mode == 0 && cpi -> oxcf . pass == 2 ) { if ( vpx_realloc_frame_buffer ( & cpi -> svc . empty_frame . img , SMALL_FRAME_WIDTH , SMALL_FRAME_HEIGHT , cpi -> common . subsampling_x , cpi -> common . subsampling_y , # if CONFIG_VP9_HIGHBITDEPTH cpi -> common . use_highbitdepth , # endif VP9_ENC_BORDER_IN_PIXELS , cpi -> common . byte_alignment , NULL , NULL , NULL ) ) vpx_internal_error ( & cpi -> common . error , VPX_CODEC_MEM_ERROR , ""Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>empty<S2SV_blank>frame<S2SV_blank>for<S2SV_blank>multiple<S2SV_blank>frame<S2SV_blank>"" ""contexts"" ) ; memset ( cpi -> svc . empty_frame . img . buffer_alloc , 0x80 , cpi -> svc . empty_frame . img . buffer_alloc_sz ) ; } for ( sl = 0 ; sl < oxcf -> ss_number_layers ; ++ sl ) { for ( tl = 0 ; tl < oxcf -> ts_number_layers ; ++ tl ) { int layer = LAYER_IDS_TO_IDX ( sl , tl , oxcf -> ts_number_layers ) ; LAYER_CONTEXT * const lc = & svc -> layer_context [ layer ] ; RATE_CONTROL * const lrc = & lc -> rc ; int i ; lc -> current_video_frame_in_layer = 0 ; lc -> layer_size = 0 ; lc -> frames_from_key_frame = 0 ; lc -> last_frame_type = FRAME_TYPES ; lrc -> ni_av_qi = oxcf -> worst_allowed_q ; lrc -> total_actual_bits = 0 ; lrc -> total_target_vs_actual = 0 ; lrc -> ni_tot_qi = 0 ; lrc -> tot_q = 0.0 ; lrc -> avg_q = 0.0 ; lrc -> ni_frames = 0 ; lrc -> decimation_count = 0 ; lrc -> decimation_factor = 0 ; for ( i = 0 ; i < RATE_FACTOR_LEVELS ; ++ i ) { lrc -> rate_correction_factors [ i ] = 1.0 ; } if ( cpi -> oxcf . rc_mode == VPX_CBR ) { lc -> target_bandwidth = oxcf -> layer_target_bitrate [ layer ] ; lrc -> last_q [ INTER_FRAME ] = oxcf -> worst_allowed_q ; lrc -> avg_frame_qindex [ INTER_FRAME ] = oxcf -> worst_allowed_q ; lrc -> avg_frame_qindex [ KEY_FRAME ] = oxcf -> worst_allowed_q ; } else { lc -> target_bandwidth = oxcf -> layer_target_bitrate [ layer ] ; lrc -> last_q [ KEY_FRAME ] = oxcf -> best_allowed_q ; lrc -> last_q [ INTER_FRAME ] = oxcf -> best_allowed_q ; lrc -> avg_frame_qindex [ KEY_FRAME ] = ( oxcf -> worst_allowed_q + oxcf -> best_allowed_q ) / 2 ; lrc -> avg_frame_qindex [ INTER_FRAME ] = ( oxcf -> worst_allowed_q + oxcf -> best_allowed_q ) / 2 ; if ( oxcf -> ss_enable_auto_arf [ sl ] ) lc -> alt_ref_idx = alt_ref_idx ++ ; else lc -> alt_ref_idx = INVALID_IDX ; lc -> gold_ref_idx = INVALID_IDX ; } lrc -> buffer_level = oxcf -> starting_buffer_level_ms * lc -> target_bandwidth / 1000 ; lrc -> bits_off_target = lrc -> buffer_level ; } } if ( ! <S2SV_ModEnd> <S2SV_ModStart> && cpi -> oxcf . rc_mode == VPX_CBR ) && alt_ref_idx < REF_FRAMES ) <S2SV_ModEnd> <S2SV_ModStart> 0 ] . gold_ref_idx = alt_ref_idx ; <S2SV_ModEnd> "
672,"<S2SV_StartBug> struct inode * inode = page -> mapping -> host ; <S2SV_EndBug> <S2SV_StartBug> ret = f2fs_mpage_readpages ( page -> mapping , NULL , page , 1 , false ) ; <S2SV_EndBug> ",<S2SV_ModStart> page_file_mapping ( page ) <S2SV_ModEnd> <S2SV_ModStart> page_file_mapping ( page ) <S2SV_ModEnd> 
673,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> hook_del_nick_can_register ( check_registration_keywords ) ; hook_del_user_can_register ( check_registration_keywords ) ; del_conf_item ( ""ANOPE_FLAGS_COMPAT"" , & chansvs . me -> conf_table ) ; "
674,<S2SV_StartBug> ddi . dinfo_nboards = dgnc_NumBoards ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & ddi , 0 , sizeof ( ddi ) ) ; "
675,<S2SV_StartBug> if ( po -> fanout ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> lock_sock ( sk ) ; spin_lock ( & po -> bind_lock ) ; rcu_read_lock ( ) ; <S2SV_ModStart> { ret = <S2SV_ModEnd> <S2SV_ModStart> goto out_unlock ; } <S2SV_ModEnd> 
676,<S2SV_StartBug> ps_dec -> u2_total_mbs_coded ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( u1_tfr_n_mb ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ps_dec -> u2_total_mbs_coded += u1_num_mbs ; 
677,"<S2SV_StartBug> if ( list_empty ( & EXT4_I ( inode ) -> i_completed_io_list ) ) { <S2SV_EndBug> <S2SV_StartBug> ext4_debug ( ""Dump<S2SV_blank>inode<S2SV_blank>%lu<S2SV_blank>completed_io<S2SV_blank>list<S2SV_blank>\\n"" , inode -> i_ino ) ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> ","<S2SV_ModStart> unsigned long flags ; <S2SV_ModStart> ) ; spin_lock_irqsave ( & EXT4_I ( inode ) -> i_completed_io_lock , flags <S2SV_ModStart> spin_unlock_irqrestore ( & EXT4_I ( inode ) -> i_completed_io_lock , flags ) ; "
678,"<S2SV_StartBug> static int __perf_event_overflow ( struct perf_event * event , int nmi , <S2SV_EndBug> <S2SV_StartBug> if ( nmi ) { <S2SV_EndBug> <S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> perf_event_output ( event , nmi , data , regs ) ; <S2SV_EndBug> <S2SV_StartBug> if ( nmi ) { <S2SV_EndBug> <S2SV_StartBug> irq_work_queue ( & event -> pending ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( event -> overflow_handler ) event -> overflow_handler ( event , data , regs ) ; else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
679,"<S2SV_StartBug> assert_regexp_syntax_error ( "")"" ) ; <S2SV_EndBug> <S2SV_StartBug> ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>317<S2SV_blank>}"" , <S2SV_EndBug> <S2SV_StartBug> ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}?t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>314<S2SV_blank>}"" , <S2SV_EndBug> ","<S2SV_ModStart> assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""\\ta\\0b\\0c\\0"" ) ; assert_false_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""x\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""x\\ta\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0\\t"" ) ; assert_false_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0x\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0b\\t"" ) ; assert_false_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""abc"" ) ; <S2SV_ModStart> ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>317<S2SV_blank>}"" <S2SV_ModEnd> <S2SV_ModStart> ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}?t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>314<S2SV_blank>}"" <S2SV_ModEnd> "
680,"<S2SV_StartBug> static int jas_iccputsint ( jas_stream_t * out , int n , longlong val ) <S2SV_EndBug> <S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug> ",<S2SV_ModStart> jas_longlong <S2SV_ModEnd> <S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> 
681,"<S2SV_StartBug> rc = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; } break ; case ACL_TYPE_DEFAULT : ea_name = XATTR_NAME_POSIX_ACL_DEFAULT ; break ; default : return - EINVAL ; } if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size , GFP_KERNEL ) ; if ( ! value ) return - ENOMEM ; rc = posix_acl_to_xattr ( & init_user_ns , acl , value , size <S2SV_ModStart>  <S2SV_ModEnd> "
682,<S2SV_StartBug> pirlvl = pi -> picomp -> pirlvls ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( pi -> x == pi -> xstart && ( ( trx0 << r ) % ( 1 << rpx ) ) ) || <S2SV_EndBug> <S2SV_StartBug> ( ( pi -> y == pi -> ystart && ( ( try0 << r ) % ( 1 << rpy ) ) ) || <S2SV_EndBug> ,"<S2SV_ModStart> if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> "
683,"<S2SV_StartBug> static int changedline ( const Proto * p , int oldpc , int newpc ) { <S2SV_EndBug> ",<S2SV_ModStart> if ( p -> lineinfo == NULL ) return 0 ; 
684,"<S2SV_StartBug> p = list_first_entry ( & tmp_list , struct mount , mnt_list ) ; <S2SV_EndBug> <S2SV_StartBug> pin_insert_group ( & p -> mnt_umount , & p -> mnt_parent -> mnt , & unmounted ) ; <S2SV_EndBug> <S2SV_StartBug> umount_mnt ( p ) ; <S2SV_EndBug> <S2SV_StartBug> change_mnt_propagation ( p , MS_PRIVATE ) ; <S2SV_EndBug> ","<S2SV_ModStart> bool disconnect ; <S2SV_ModStart> disconnect = ! IS_MNT_LOCKED_AND_LAZY ( p ) ; <S2SV_ModStart> disconnect ? & unmounted : NULL <S2SV_ModEnd> <S2SV_ModStart> if ( ! disconnect ) { list_add_tail ( & p -> mnt_child , & p -> mnt_parent -> mnt_mounts ) ; } else { <S2SV_ModStart> } "
685,"<S2SV_StartBug> static void encode_frame ( vpx_codec_ctx_t * codec , <S2SV_EndBug> <S2SV_StartBug> VpxVideoWriter * writer ) { <S2SV_EndBug> <S2SV_StartBug> while ( ( pkt = vpx_codec_get_cx_data ( codec , & iter ) ) != NULL ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> int got_pkts = 0 ; <S2SV_ModStart> got_pkts = 1 ; <S2SV_ModStart> return got_pkts ; 
686,<S2SV_StartBug> for ( x = 0 ; x < ( ssize_t ) number_pixels ; x += 2 ) <S2SV_EndBug> ,<S2SV_ModStart> 4 <S2SV_ModEnd> 
687,"<S2SV_StartBug> static VALUE from_document ( VALUE klass , VALUE document ) <S2SV_EndBug> <S2SV_StartBug> return rb_schema ; <S2SV_EndBug> ","<S2SV_ModStart> int argc , VALUE * argv , VALUE klass ) { VALUE document ; VALUE parse_options ; xmlDocPtr doc ; xmlRelaxNGParserCtxtPtr ctx ; xmlRelaxNGPtr schema ; VALUE errors ; VALUE rb_schema ; int scanned_args = 0 ; scanned_args = rb_scan_args ( argc , argv , ""11"" , & document , & parse_options ) ; Data_Get_Struct ( document , xmlDoc , doc ) ; doc = doc -> doc ; if ( scanned_args == 1 ) { parse_options = rb_const_get ( rb_const_get ( mNokogiriXml , rb_intern ( ""ParseOptions"" ) ) , rb_intern ( ""DEFAULT_SCHEMA"" ) ) ; } <S2SV_ModEnd> <S2SV_ModStart> rb_iv_set ( rb_schema , ""@parse_options"" , parse_options ) ; "
688,"<S2SV_StartBug> ops -> get_msr ( ctxt , MSR_EFER , & efer ) ; <S2SV_EndBug> <S2SV_StartBug> setup_syscalls_segments ( ctxt , & cs , & ss ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart> ) ; if ( ! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt 
689,"<S2SV_StartBug> static void send ( node_t * node , node_t * child , byte * fout ) { <S2SV_EndBug> <S2SV_StartBug> send ( node -> parent , node , fout ) ; <S2SV_EndBug> <S2SV_StartBug> if ( child ) { <S2SV_EndBug> ","<S2SV_ModStart> , int maxoffset <S2SV_ModStart> , maxoffset <S2SV_ModStart> if ( bloc >= maxoffset ) { bloc = maxoffset + 1 ; return ; } "
690,"<S2SV_StartBug> int bytes_read = read ( reader -> inbound_fd , buffer -> data , reader -> buffer_size ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
691,"<S2SV_StartBug> if ( ! revs -> blob_objects ) <S2SV_EndBug> <S2SV_StartBug> show ( obj , path , name , cb_data ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> size_t pathlen ; <S2SV_ModStart> pathlen = path -> len ; strbuf_addstr ( path , name ) ; <S2SV_ModStart> -> buf <S2SV_ModEnd> <S2SV_ModStart> strbuf_setlen ( path , pathlen ) ; "
692,"<S2SV_StartBug> yyerror ( yyscanner , lex_env , ""unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer"" ) ; <S2SV_EndBug> <S2SV_StartBug> yyerror ( yyscanner , lex_env , ""unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer"" ) ; <S2SV_EndBug> <S2SV_StartBug> yyerror ( yyscanner , lex_env , ""unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""illegal<S2SV_blank>escape<S2SV_blank>sequence"" <S2SV_ModEnd> <S2SV_ModStart> ""illegal<S2SV_blank>escape<S2SV_blank>sequence"" <S2SV_ModEnd> <S2SV_ModStart> ""illegal<S2SV_blank>escape<S2SV_blank>sequence"" <S2SV_ModEnd> "
693,"<S2SV_StartBug> static bool new_idmap_permitted ( struct user_namespace * ns , int cap_setid , <S2SV_EndBug> <S2SV_StartBug> if ( ns_capable ( ns -> parent , cap_setid ) ) <S2SV_EndBug> ","<S2SV_ModStart> const struct file * file , <S2SV_ModStart> && file_ns_capable ( file , ns -> parent , cap_setid ) "
694,"<S2SV_StartBug> unsigned long cs ; <S2SV_EndBug> <S2SV_StartBug> rc = emulate_pop ( ctxt , & ctxt -> _eip , ctxt -> op_bytes ) ; <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug> <S2SV_StartBug> rc = load_segment_descriptor ( ctxt , ( u16 ) cs , VCPU_SREG_CS ) ; <S2SV_EndBug> ","<S2SV_ModStart> eip , cs ; u16 old_cs <S2SV_ModEnd> <S2SV_ModStart> struct desc_struct old_desc , new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> get_segment ( ctxt , & old_cs , & old_desc , NULL , VCPU_SREG_CS ) ; <S2SV_ModStart> eip <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> __load_segment_descriptor <S2SV_ModEnd> <S2SV_ModStart> , 0 , false , & new_desc ) ; if ( rc != X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt , eip , new_desc . l ) ; if ( rc != X86EMUL_CONTINUE ) { WARN_ON ( ! ctxt -> mode != X86EMUL_MODE_PROT64 ) ; ops -> set_segment ( ctxt , old_cs , & old_desc , 0 , VCPU_SREG_CS ) ; } <S2SV_ModEnd> "
695,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> return body ; <S2SV_EndBug> ,<S2SV_ModStart> { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> } 
696,"<S2SV_StartBug> sc_debug ( card -> ctx , SC_LOG_DEBUG_NORMAL , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> if ( bufLen < 2 ) break ; <S2SV_ModStart> bufLen -= 2 ; 
697,"<S2SV_StartBug> rval = tpm_kdfa ( sapi_context , session -> authHash , & ( key . b ) , label , & ( session -> nonceNewer . b ) , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
698,"<S2SV_StartBug> ( mutt_bcache_exists ( pop_data -> bcache , ctx -> hdrs [ i ] -> data ) == 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> cache_id ( ctx -> hdrs [ i ] -> data ) <S2SV_ModEnd> 
699,<S2SV_StartBug> struct iovec iov ; <S2SV_EndBug> <S2SV_StartBug> if ( ret < local_nr_pages ) { <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < nr_pages ; j ++ ) { <S2SV_EndBug> ,"<S2SV_ModStart> ; struct bio_vec * bvec <S2SV_ModStart> unlikely ( <S2SV_ModStart> ) { for ( j = cur_page ; j < page_limit ; j ++ ) { if ( ! pages [ j ] ) break ; put_page ( pages [ j ] ) ; } <S2SV_ModEnd> <S2SV_ModStart> bio_for_each_segment_all ( bvec , bio , j ) { put_page ( bvec -> bv_page <S2SV_ModEnd> "
700,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , regs -> ARM_pc ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
701,"<S2SV_StartBug> ut8 * buf = calloc ( to - from , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> r_buf_read_at ( bf -> buf , from , buf , to - from ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( to - needle ) > 5 ) { <S2SV_EndBug> <S2SV_StartBug> bool is_wide32 = needle + rc + 2 < to && ! w [ 0 ] && ! w [ 1 ] && ! w [ 2 ] && w [ 3 ] && ! w [ 4 ] ; <S2SV_EndBug> ",<S2SV_ModStart> int len = to - from ; <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> + rc <S2SV_ModStart> ( <S2SV_ModStart> ) && ( <S2SV_ModEnd> <S2SV_ModStart> ) 
702,"
","
"
703,"<S2SV_StartBug> rd_create_ui ( ) ; <S2SV_EndBug> <S2SV_StartBug> in_uint16_le ( s , len_combined_caps ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct stream packet = * s ; <S2SV_ModStart> if ( ! s_check_rem ( s , len_src_descriptor ) ) { rdp_protocol_error ( ""rdp_demand_active(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>source<S2SV_blank>descriptor<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } "
704,<S2SV_StartBug> block_length = data [ i ] * 256 + data [ i + 1 ] ; <S2SV_EndBug> ,<S2SV_ModStart> if ( i + 1 < data_size ) 
705,"<S2SV_StartBug> switch ( type ) <S2SV_EndBug> <S2SV_StartBug> SetPixelIndex ( image , ( ( ( unsigned char ) pixel ) & <S2SV_EndBug> <S2SV_StartBug> ( 0x01 << ( 7 - bit ) ) ) != 0 ? 0 : 255 , q ) ; <S2SV_EndBug> <S2SV_StartBug> x -- ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ","<S2SV_ModStart> if ( image -> depth > 1 ) { SetPSDPixel ( image , channels , type , packet_size , pixel , q , exception ) ; q += GetPixelChannels ( image ) ; } else <S2SV_ModEnd> <S2SV_ModStart> SetPSDPixel ( image , channels , type , packet_size <S2SV_ModEnd> <S2SV_ModStart> , exception <S2SV_ModEnd> <S2SV_ModStart> if ( x != image -> columns ) <S2SV_ModStart>  <S2SV_ModEnd> "
706,<S2SV_StartBug> if ( sock -> type == SOCK_RAW ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> sock -> ops = & rawsock_ops ; <S2SV_EndBug> ,<S2SV_ModStart> { if ( ! capable ( CAP_NET_RAW ) ) return - EPERM ; <S2SV_ModStart> } else { <S2SV_ModEnd> <S2SV_ModStart> } 
707,<S2SV_StartBug> set_caps ( ) ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> fs_rdonly ( RUN_SECCOMP_DIR ) ; # endif set_caps ( ) ; <S2SV_ModEnd> 
708,<S2SV_StartBug> siz -> comps [ i ] . sgnd = ( tmp >> 7 ) & 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( siz -> comps [ i ] . hsamp == 0 || siz -> comps [ i ] . hsamp > 255 ) { jas_eprintf ( ""invalid<S2SV_blank>XRsiz<S2SV_blank>value<S2SV_blank>%d\\n"" , siz -> comps [ i ] . hsamp ) ; jas_free ( siz -> comps ) ; return - 1 ; } if ( siz -> comps [ i ] . vsamp == 0 || siz -> comps [ i ] . vsamp > 255 ) { jas_eprintf ( ""invalid<S2SV_blank>YRsiz<S2SV_blank>value<S2SV_blank>%d\\n"" , siz -> comps [ i ] . vsamp ) ; jas_free ( siz -> comps ) ; return - 1 ; } "
709,<S2SV_StartBug> if ( ( temp_buffer & 0xffffff00 ) != 0x100 ) <S2SV_EndBug> <S2SV_StartBug> else if ( temp_buffer < 0x120 ) <S2SV_EndBug> <S2SV_StartBug> else if ( temp_buffer < 0x130 ) <S2SV_EndBug> ,<S2SV_ModStart> temp_buffer & 0xfffffe00 ) continue ; if ( temp_buffer < 2 <S2SV_ModEnd> <S2SV_ModStart> >= 0x100 && temp_buffer <S2SV_ModStart> temp_buffer >= 0x120 && 
710,<S2SV_StartBug> if ( ! curbuf -> b_p_ma && ( ea . argt & MODIFY ) ) <S2SV_EndBug> ,"<S2SV_ModStart> restricted != 0 && ( ea . argt & RESTRICT ) ) { errormsg = _ ( ""E981:<S2SV_blank>Command<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>in<S2SV_blank>rvim"" ) ; goto doend ; } if ( "
711,"<S2SV_StartBug> chip -> data_buffer = kmalloc ( TPM_BUFSIZE * sizeof ( u8 ) , GFP_KERNEL ) ; <S2SV_EndBug> ",<S2SV_ModStart> kzalloc ( TPM_BUFSIZE <S2SV_ModEnd> 
712,<S2SV_StartBug> unsigned int channo ; <S2SV_EndBug> ,<S2SV_ModStart> ; cdef -> ents = 0 
713,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> } else if ( request_size < 0 ) { rc = - EINVAL ; goto out_free_buffer ; 
714,"<S2SV_StartBug> guchar * match ; <S2SV_EndBug> <S2SV_StartBug> gsize to_match = MIN ( left , buffer -> pos ) ; <S2SV_EndBug> <S2SV_StartBug> if ( memcmp ( buffer -> data , & AUTH_END_STRING [ client -> auth_end_offset ] , to_match ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> return match - buffer -> data + strlen ( AUTH_END_STRING ) ; <S2SV_EndBug> ","<S2SV_ModStart> goffset offset = 0 ; gsize original_size = client -> auth_buffer -> len ; g_byte_array_append ( client -> auth_buffer <S2SV_ModEnd> <S2SV_ModStart> data , buffer -> <S2SV_ModStart> while ( TRUE ) { guint8 * line_start = client -> auth_buffer <S2SV_ModEnd> <S2SV_ModStart> offset ; gsize remaining_data = client -> auth_buffer -> len - offset ; guint8 * line_end ; line_end = memmem ( line_start , remaining_data , AUTH_LINE_SENTINEL , strlen ( AUTH_LINE_SENTINEL ) ) ; if ( line_end ) { offset = ( line_end + strlen ( AUTH_LINE_SENTINEL ) - line_start ) ; if ( ! auth_line_is_valid ( line_start , line_end ) ) return FIND_AUTH_END_ABORT ; * line_end = 0 ; if ( auth_line_is_begin ( line_start ) ) return offset - original_size ; } else { g_byte_array_remove_range ( client -> auth_buffer , 0 , offset ) ; if ( client -> auth_buffer -> len >= 16 * 1024 ) return FIND_AUTH_END_ABORT ; return FIND_AUTH_END_CONTINUE ; } } <S2SV_ModEnd> "
715,<S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart> strict = true ; 
716,<S2SV_StartBug> # if ! ( CONFIG_FAST_UNALIGNED ) <S2SV_EndBug> ,"<S2SV_ModStart> memcpy ( dst , src , 8 ) ; <S2SV_ModEnd> "
717,<S2SV_StartBug> size_t i ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
718,<S2SV_StartBug> ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; <S2SV_EndBug> ,<S2SV_ModStart> { i_temp = ih264d_read_mmco_commands ( ps_dec ) ; if ( i_temp < 0 ) { return ERROR_DBP_MANAGER_T ; } <S2SV_ModStart> i_temp ; } <S2SV_ModEnd> 
719,<S2SV_StartBug> ( Rec2 . RecordLength - 2 - 2 ) / 3 ) <S2SV_EndBug> ,"<S2SV_ModStart> ) ThrowReaderException ( CorruptImageError , ""InvalidColormapIndex"" ) ; if ( WPG_Palette . StartIndex > WPG_Palette . NumOfEntries "
720,<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug> ,<S2SV_ModStart> void 
721,"<S2SV_StartBug> # define PAM_END ( msg ) do { syslog ( LOG_ERR , ""%s:<S2SV_blank>%s"" , msg , pam_strerror ( pamh , pam_err ) ) ; warnx ( ""%s:<S2SV_blank>%s"" , msg , pam_strerror ( pamh , pam_err ) ) ; pam_end ( pamh , pam_err ) ; exit ( EXIT_FAILURE ) ; } while ( 0 ) <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # ifndef HAVE_LOGIN_CAP_H <S2SV_EndBug> ","<S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> else # if defined ( __linux__ ) || defined ( __FreeBSD__ ) || defined ( __NetBSD__ ) if ( setresgid ( target_pw -> pw_gid , target_pw -> pw_gid , target_pw -> pw_gid ) == - 1 ) err ( 1 , ""setresgid"" ) ; # else if ( setregid ( target_pw -> pw_gid , target_pw -> pw_gid ) == - 1 ) err ( 1 , ""setregid"" ) ; # endif if ( initgroups ( target_pw -> pw_name , target_pw -> pw_gid ) == - 1 ) err ( 1 , ""initgroups"" ) ; # if defined ( __linux__ ) || defined ( __FreeBSD__ ) || defined ( __NetBSD__ ) if ( setresuid ( target , target , target ) == - 1 ) err ( 1 , ""setresuid"" ) ; # else if ( setreuid ( target , target ) == - 1 ) err ( 1 , ""setreuid"" ) ; # endif # <S2SV_ModStart>  <S2SV_ModEnd> "
722,<S2SV_StartBug> be32_to_cpu ( agf -> agf_flcount ) <= xfs_agfl_size ( mp ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( bp -> b_pag && be32_to_cpu ( agf -> agf_seqno ) != bp -> b_pag -> pag_agno ) <S2SV_EndBug> <S2SV_StartBug> be32_to_cpu ( agf -> agf_btreeblks ) > be32_to_cpu ( agf -> agf_length ) ) <S2SV_EndBug> ,<S2SV_ModStart> ) ) return __this_address ; if ( be32_to_cpu ( agf -> agf_length ) > mp -> m_sb . sb_dblocks ) return __this_address ; if ( be32_to_cpu ( agf -> agf_freeblks ) < be32_to_cpu ( agf -> agf_longest ) || be32_to_cpu ( agf -> agf_freeblks ) > be32_to_cpu ( agf -> agf_length <S2SV_ModStart> xfs_sb_version_hasrmapbt ( & mp -> m_sb ) && be32_to_cpu ( agf -> agf_rmap_blocks ) > be32_to_cpu ( agf -> agf_length ) ) return __this_address ; if ( <S2SV_ModStart> be32_to_cpu ( agf -> agf_length ) ) return __this_address ; if ( xfs_sb_version_hasreflink ( & mp -> m_sb ) && be32_to_cpu ( agf -> agf_refcount_blocks ) > 
723,"<S2SV_StartBug> skb -> ip_summed = CHECKSUM_PARTIAL ; <S2SV_EndBug> <S2SV_StartBug> __skb_queue_tail ( queue , skb ) ; <S2SV_EndBug> ","<S2SV_ModStart> csum = 0 ; __skb_queue_tail ( queue , skb ) ; } else if ( skb_is_gso ( skb ) ) { goto append ; } skb -> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> append : <S2SV_ModEnd> "
724,"<S2SV_StartBug> int byte_count = 0 , count ; <S2SV_EndBug> <S2SV_StartBug> { switch ( c ) <S2SV_EndBug> <S2SV_StartBug> ucptr = ( unsigned char * ) intptr ; <S2SV_EndBug> <S2SV_StartBug> intptr = va_arg ( argptr , unsigned int * ) ; <S2SV_EndBug> <S2SV_StartBug> if ( count > 0 ) <S2SV_EndBug> <S2SV_StartBug> case 'G' : <S2SV_EndBug> <S2SV_StartBug> if ( count > 0 ) <S2SV_EndBug> <S2SV_StartBug> header_seek ( psf , count , SEEK_SET ) ; <S2SV_EndBug> <S2SV_StartBug> byte_count += count ; <S2SV_EndBug> ","<S2SV_ModStart> = 0 <S2SV_ModStart> if ( psf -> header . indx + 16 >= psf -> header . len && psf_bump_header_allocation ( psf , 16 ) ) return count ; <S2SV_ModStart> * intptr = 0 ; <S2SV_ModStart> ; * intptr = 0 <S2SV_ModStart> memset ( charptr , 0 , count ) ; byte_count += header_read ( psf , charptr , count ) ; break ; case 'G' : charptr = va_arg ( argptr , char * ) ; count = va_arg ( argptr , size_t ) ; memset ( charptr , 0 , count ) ; if ( psf -> header . indx + count >= psf -> header . len && psf_bump_header_allocation ( psf , count ) ) return 0 ; byte_count += header_gets <S2SV_ModEnd> <S2SV_ModStart> 'z' : psf_log_printf ( psf , ""Format<S2SV_blank>conversion<S2SV_blank>\'z\'<S2SV_blank>not<S2SV_blank>implemented<S2SV_blank>yet.\\n"" ) ; break ; case 'p' : <S2SV_ModEnd> <S2SV_ModStart> header_seek ( psf , count , SEEK_SET ) ; byte_count = count ; break ; case 'j' <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
725,<S2SV_StartBug> if ( ! ( info = bmp_getinfo ( in ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> JAS_DBGLOG ( 1 , ( ""BMP<S2SV_blank>header:<S2SV_blank>magic<S2SV_blank>0x%x;<S2SV_blank>siz<S2SV_blank>%d;<S2SV_blank>res1<S2SV_blank>%d;<S2SV_blank>res2<S2SV_blank>%d;<S2SV_blank>off<S2SV_blank>%d\\n"" , hdr . magic , hdr . siz , hdr . reserved1 , hdr . reserved2 , hdr . off ) ) ; <S2SV_ModStart> JAS_DBGLOG ( 1 , ( ""BMP<S2SV_blank>information:<S2SV_blank>len<S2SV_blank>%d;<S2SV_blank>width<S2SV_blank>%d;<S2SV_blank>height<S2SV_blank>%d;<S2SV_blank>numplanes<S2SV_blank>%d;<S2SV_blank>"" ""depth<S2SV_blank>%d;<S2SV_blank>enctype<S2SV_blank>%d;<S2SV_blank>siz<S2SV_blank>%d;<S2SV_blank>hres<S2SV_blank>%d;<S2SV_blank>vres<S2SV_blank>%d;<S2SV_blank>numcolors<S2SV_blank>%d;<S2SV_blank>"" ""mincolors<S2SV_blank>%d\\n"" , info -> len , info -> width , info -> height , info -> numplanes , info -> depth , info -> enctype , info -> siz , info -> hres , info -> vres , info -> numcolors , info -> mincolors ) ) ; "
726,"<S2SV_StartBug> } else if ( ACTION ( RUN ) ) { <S2SV_EndBug> <S2SV_StartBug> handle_run ( req , res ) ; <S2SV_EndBug> <S2SV_StartBug> is_monit_running ( res ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( ACTION ( STATUS ) ) { <S2SV_EndBug> ",<S2SV_ModStart> RUNTIME <S2SV_ModEnd> <S2SV_ModStart> handle_runtime <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { handle_service <S2SV_ModEnd> 
727,"<S2SV_StartBug> btrfs_file_extent_compression ( leaf , fi ) == 0 && <S2SV_EndBug> <S2SV_StartBug> if ( test_bit ( BTRFS_ROOT_REF_COWS , & root -> state ) ) <S2SV_EndBug> <S2SV_StartBug> new_size ) ; <S2SV_EndBug> ","<S2SV_ModStart> btrfs_file_extent_encryption ( leaf , fi ) == 0 && btrfs_file_extent_other_encoding ( leaf , fi ) == 0 ) { if ( <S2SV_ModStart> != BTRFS_COMPRESS_NONE && pending_del_nr ) { err = btrfs_del_items ( trans , root , path , pending_del_slot , pending_del_nr ) ; if ( err ) { btrfs_abort_transaction ( trans , root , err ) ; goto error ; } pending_del_nr = 0 ; } err = truncate_inline_extent ( inode , path , & found_key , item_end , new_size ) ; if ( err ) { btrfs_abort_transaction ( trans , root , err ) ; goto error ; } } else <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart>  <S2SV_ModEnd> "
728,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> vp8_yv12_de_alloc_frame_buffer ( & denoiser -> yv12_last_source ) ; vpx_free ( denoiser -> denoise_state ) ; 
729,"<S2SV_StartBug> struct stat st ; <S2SV_EndBug> <S2SV_StartBug> pr_fs_clear_cache ( ) ; <S2SV_EndBug> <S2SV_StartBug> xerrno = errno ; <S2SV_EndBug> <S2SV_StartBug> pr_log_pri ( PR_LOG_WARNING , ""error:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>check<S2SV_blank>%s:<S2SV_blank>%s"" , path , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> res = is_symlink_path ( p , path , pathlen <S2SV_ModEnd> <S2SV_ModStart> if ( errno == EPERM ) { <S2SV_ModEnd> <S2SV_ModStart> ""error:<S2SV_blank>DefaultRoot<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>a<S2SV_blank>symlink<S2SV_blank>"" ""(denied<S2SV_blank>by<S2SV_blank>AllowChrootSymlinks<S2SV_blank>config)"" , path ) ; } <S2SV_ModEnd> "
730,<S2SV_StartBug> if ( length == 1 && bp [ 0 ] == 0xff ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ND_TCHECK ( bp [ 0 ] ) ; <S2SV_ModStart> ND_TCHECK ( bp [ 3 ] ) ; 
731,"<S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , unsigned short , sad_array8 , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> bestaddress , in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; <S2SV_EndBug> ","<S2SV_ModStart> DECLARE_ALIGNED <S2SV_ModEnd> <S2SV_ModStart> int , sad_array8 [ 8 ] <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
732,<S2SV_StartBug> hlist_del ( & pin -> m_list ) ; <S2SV_EndBug> <S2SV_StartBug> hlist_del ( & pin -> s_list ) ; <S2SV_EndBug> ,<S2SV_ModStart> hlist_del_init <S2SV_ModEnd> <S2SV_ModStart> hlist_del_init <S2SV_ModEnd> 
733,"<S2SV_StartBug> static bool do_write_pids ( pid_t tpid , const char * contrl , const char * cg , const char * file , const char * buf ) <S2SV_EndBug> <S2SV_StartBug> if ( fprintf ( pids_file , ""%d"" , ( int ) cred . pid ) < 0 ) <S2SV_EndBug> ","<S2SV_ModStart> uid_t tuid , <S2SV_ModStart> ! may_move_pid ( tpid , tuid , <S2SV_ModEnd> <S2SV_ModStart> ) { fail = true ; break ; } if ( fprintf ( pids_file , ""%d"" , ( int ) cred . pid ) "
734,"<S2SV_StartBug> u_char * b , * s , * t , c ; <S2SV_EndBug> <S2SV_StartBug> b = ( uint8_t * ) malloc ( length ) ; <S2SV_EndBug> <S2SV_StartBug> for ( s = ( u_char * ) p , t = b , i = length ; i > 0 ; i -- ) { <S2SV_EndBug> <S2SV_StartBug> if ( i > 1 ) { <S2SV_EndBug> <S2SV_StartBug> c = * s ++ ^ 0x20 ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; const u_char * s <S2SV_ModStart> u_char <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && ND_TTEST ( * s ) <S2SV_ModStart> <= 1 || ! ND_TTEST ( * s ) ) break ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
735,<S2SV_StartBug> assert ( dev -> lintr . pin > 0 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> <= 0 ) { pr_warn ( ""%s:<S2SV_blank>Invalid<S2SV_blank>intr<S2SV_blank>pin<S2SV_blank>on<S2SV_blank>dev<S2SV_blank>[%s]\\n"" , __func__ , dev -> name ) ; return ; } <S2SV_ModEnd> "
736,<S2SV_StartBug> BUG_ON ( ret == - EEXIST ) ; <S2SV_EndBug> ,<S2SV_ModStart> || ret == - EOVERFLOW 
737,"<S2SV_StartBug> int opts ; <S2SV_EndBug> <S2SV_StartBug> if ( ! js_regexec ( re -> prog , text , & m , opts ) ) { <S2SV_EndBug> ","<S2SV_ModStart> result ; int <S2SV_ModStart> result = <S2SV_ModEnd> <S2SV_ModStart> ; if ( result < 0 ) js_error ( J , ""regexec<S2SV_blank>failed"" ) ; if ( result == 0 "
738,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> check_stack_depth ( ) ; 
739,"<S2SV_StartBug> int ntlm_read_message_fields ( wStream * s , NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug> ",<S2SV_ModStart> static 
740,"<S2SV_StartBug> if ( ! ctx -> priv ) { <S2SV_EndBug> <S2SV_StartBug> vpx_codec_alg_priv_t * alg_priv = vpx_memalign ( 32 , sizeof ( * alg_priv ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( alg_priv == NULL ) <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_MEM_ERROR ; <S2SV_EndBug> <S2SV_StartBug> ctx -> priv = ( vpx_codec_priv_t * ) alg_priv ; <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> config . dec ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> priv -> alg_priv -> cfg = * ctx -> config . dec ; <S2SV_EndBug> <S2SV_StartBug> ctx -> config . dec = & ctx -> priv -> alg_priv -> cfg ; <S2SV_EndBug> ",<S2SV_ModStart> ( void ) data ; <S2SV_ModStart> const priv = vpx_calloc ( 1 <S2SV_ModEnd> <S2SV_ModStart> priv <S2SV_ModEnd> <S2SV_ModStart> priv <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> priv <S2SV_ModEnd> <S2SV_ModStart> priv -> si . sz = sizeof ( priv -> si ) ; priv -> flushed = 0 ; priv -> frame_parallel_decode = ( ctx -> config . dec && ( ctx -> config . dec -> threads > 1 ) && ( ctx -> init_flags & VPX_CODEC_USE_FRAME_THREADING ) ) ? 1 : 0 ; <S2SV_ModStart> priv <S2SV_ModEnd> <S2SV_ModStart> priv <S2SV_ModEnd> 
741,<S2SV_StartBug> valuelen = be32_to_cpu ( name_rmt -> valuelen ) ; <S2SV_EndBug> <S2SV_StartBug> valuelen ) ; <S2SV_EndBug> <S2SV_StartBug> args -> valuelen = valuelen ; <S2SV_EndBug> <S2SV_StartBug> if ( args -> valuelen < valuelen ) { <S2SV_EndBug> <S2SV_StartBug> args -> valuelen = valuelen ; <S2SV_EndBug> ,<S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> <S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> <S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> <S2SV_ModStart> args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> <S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> 
742,"<S2SV_StartBug> char * sockaddr_url , * stratum_port , * tmp ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_disable_client_reconnect ) { <S2SV_EndBug> <S2SV_StartBug> url = ( char * ) json_string_value ( json_array_get ( val , 0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( address , ""%s:%s"" , url , port ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( opt_disable_client_reconnect ) { applog ( LOG_WARNING , ""Stratum<S2SV_blank>client.reconnect<S2SV_blank>received<S2SV_blank>but<S2SV_blank>is<S2SV_blank>disabled,<S2SV_blank>not<S2SV_blank>reconnecting."" ) ; return false ; } <S2SV_ModEnd> <S2SV_ModStart> char * sockaddr_url , * stratum_port , * tmp ; url = ( char * ) json_string_value ( json_array_get ( val , 0 ) ) ; if ( ! url ) url = pool -> sockaddr_url ; port <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> snprintf ( address , sizeof ( address ) <S2SV_ModEnd> "
743,"<S2SV_StartBug> input ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ! r_fs_mount ( core -> fs , ptr , input , off ) ) <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( ptr = r_fs_name ( core -> fs , core -> offset ) ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! r_fs_mount ( core -> fs , ptr , input , core -> offset ) ) <S2SV_EndBug> <S2SV_StartBug> eprintf ( ""Cannot<S2SV_blank>mount<S2SV_blank>%s\\n"" , input ) ; <S2SV_EndBug> ",<S2SV_ModStart> { input ++ ; } <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } 
744,<S2SV_StartBug> while ( -- n >= 0 && ! ND_TTEST ( * ps ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( ie = io + ps -> nid ; io < ie && ! ND_TTEST ( * io ) ; ++ io ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
745,<S2SV_StartBug> if ( sbi -> s_inode_size > EXT4_GOOD_OLD_INODE_SIZE && <S2SV_EndBug> <S2SV_StartBug> sbi -> s_inode_size ) { <S2SV_EndBug> ,<S2SV_ModStart> unsigned def_extra_isize = sizeof ( struct ext4_inode ) - EXT4_GOOD_OLD_INODE_SIZE ; <S2SV_ModStart> == EXT4_GOOD_OLD_INODE_SIZE ) { sbi -> s_want_extra_isize = 0 ; return ; } if ( sbi -> s_want_extra_isize < 4 ) { sbi -> s_want_extra_isize = def_extra_isize ; if ( ext4_has_feature_extra_isize ( sb ) ) { if ( sbi -> s_want_extra_isize < le16_to_cpu ( es -> s_want_extra_isize ) ) sbi -> s_want_extra_isize = le16_to_cpu ( es -> s_want_extra_isize ) ; if ( sbi -> s_want_extra_isize < le16_to_cpu ( es -> s_min_extra_isize ) ) sbi -> s_want_extra_isize = le16_to_cpu ( es -> s_min_extra_isize ) ; } } if ( ( sbi -> s_want_extra_isize > sbi -> s_inode_size ) || <S2SV_ModEnd> <S2SV_ModStart> ) { sbi -> s_want_extra_isize = def_extra_isize <S2SV_ModEnd> 
746,"<S2SV_StartBug> struct mii_data * miidata = ( struct mii_data * ) & rq -> ifr_ifru ; <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE : <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE + 1 : <S2SV_EndBug> <S2SV_StartBug> miidata -> out_value = mii_read ( dev , phy_addr , miidata -> reg_num ) ; <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE + 2 : <S2SV_EndBug> <S2SV_StartBug> mii_write ( dev , phy_addr , miidata -> reg_num , miidata -> in_value ) ; <S2SV_EndBug> ",<S2SV_ModStart> mii_ioctl_data <S2SV_ModEnd> <S2SV_ModStart> if_mii ( rq ) <S2SV_ModEnd> <S2SV_ModStart> SIOCGMIIPHY : miidata -> phy_id = phy_addr ; <S2SV_ModEnd> <S2SV_ModStart> SIOCGMIIREG <S2SV_ModEnd> <S2SV_ModStart> val_out <S2SV_ModEnd> <S2SV_ModStart> SIOCSMIIREG : if ( ! capable ( CAP_NET_ADMIN ) ) return - EPERM ; <S2SV_ModEnd> <S2SV_ModStart> val_in <S2SV_ModEnd> 
747,"<S2SV_StartBug> int hns_nic_net_xmit_hw ( struct net_device * ndev , <S2SV_EndBug> <S2SV_StartBug> wmb ( ) ; <S2SV_EndBug> ",<S2SV_ModStart> netdev_tx_t <S2SV_ModEnd> <S2SV_ModStart> netif_trans_update ( ndev ) ; ndev -> stats . tx_bytes += skb -> len ; ndev -> stats . tx_packets ++ ; 
748,<S2SV_StartBug> if ( sk_hashed ( sk ) ) { <S2SV_EndBug> <S2SV_StartBug> write_lock_bh ( & ping_table . lock ) ; <S2SV_EndBug> <S2SV_StartBug> write_unlock_bh ( & ping_table . lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> write_lock_bh ( & ping_table . lock ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart>  <S2SV_ModEnd> 
749,"<S2SV_StartBug> char query [ 1024 ] , * end ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( query , ""select<S2SV_blank>count(*)<S2SV_blank>from<S2SV_blank>`%s`"" , table ) ; <S2SV_EndBug> <S2SV_StartBug> end = strmov ( strmov ( strmov ( query , ""show<S2SV_blank>/*!32332<S2SV_blank>FULL<S2SV_blank>*/<S2SV_blank>columns<S2SV_blank>from<S2SV_blank>`"" ) , table ) , ""`"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( wild && wild [ 0 ] ) <S2SV_EndBug> <S2SV_StartBug> end = strmov ( strmov ( strmov ( query , ""show<S2SV_blank>keys<S2SV_blank>from<S2SV_blank>`"" ) , table ) , ""`"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> NAME_LEN + 100 ] ; int len <S2SV_ModEnd> <S2SV_ModStart> my_snprintf ( query , sizeof ( query ) <S2SV_ModEnd> <S2SV_ModStart> len = sizeof ( query ) ; len -= my_snprintf ( query , len , ""show<S2SV_blank>/*!32332<S2SV_blank>FULL<S2SV_blank>*/<S2SV_blank>columns<S2SV_blank>from<S2SV_blank>`%s`"" , table <S2SV_ModEnd> <S2SV_ModStart> && len ) strxnmov ( query + strlen ( query ) , len <S2SV_ModEnd> <S2SV_ModStart> my_snprintf ( query , sizeof ( query ) , ""show<S2SV_blank>keys<S2SV_blank>from<S2SV_blank>`%s`"" , table <S2SV_ModEnd> "
750,"<S2SV_StartBug> VP8Frame * av_uninit ( curframe ) , * prev_frame ; <S2SV_EndBug> ",<S2SV_ModStart> ; av_assert0 ( avctx -> pix_fmt == AV_PIX_FMT_YUVA420P || avctx -> pix_fmt == AV_PIX_FMT_YUV420P ) 
751,<S2SV_StartBug> ssize_t result ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( WARN_ON_ONCE ( ! ib_safe_file_access ( filp ) ) ) return - EACCES 
752,<S2SV_StartBug> img_buf_free ( img -> img_data ) ; <S2SV_EndBug> ,<S2SV_ModStart> vpx_free <S2SV_ModEnd> 
753,"<S2SV_StartBug> l_current_pi -> include = ( OPJ_INT16 * ) opj_calloc ( ( l_tcp -> numlayers + 1 ) * l_step_l , sizeof ( OPJ_INT16 ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> size_t ) ( <S2SV_ModStart> 1U <S2SV_ModEnd> 
754,"<S2SV_StartBug> struct stat st ; <S2SV_EndBug> <S2SV_StartBug> pr_fs_clear_cache2 ( path ) ; <S2SV_EndBug> <S2SV_StartBug> xerrno = errno ; <S2SV_EndBug> <S2SV_StartBug> pr_log_pri ( PR_LOG_WARNING , ""error:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>check<S2SV_blank>%s:<S2SV_blank>%s"" , path , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> res = is_symlink_path ( p , path , pathlen <S2SV_ModEnd> <S2SV_ModStart> if ( errno == EPERM ) { <S2SV_ModEnd> <S2SV_ModStart> ""error:<S2SV_blank>DefaultRoot<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>a<S2SV_blank>symlink<S2SV_blank>"" ""(denied<S2SV_blank>by<S2SV_blank>AllowChrootSymlinks<S2SV_blank>config)"" , path ) ; } <S2SV_ModEnd> "
755,"<S2SV_StartBug> af -> from_addr_param ( & addr , addr_param , <S2SV_EndBug> ",<S2SV_ModStart> if ( af == NULL ) break ; 
756,"<S2SV_StartBug> imbuf = ( unsigned char * ) AcquireQuantumMemory ( imsx * imsy , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( imbuf , background_color_index , imsx * imsy ) ; <S2SV_EndBug> <S2SV_StartBug> dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( dmbuf , background_color_index , dmsx * dmsy ) ; <S2SV_EndBug> <S2SV_StartBug> dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( dmbuf , background_color_index , dmsx * dmsy ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( imbuf + imsx * y + posision_x , color_index , repeat_count ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ) == NULL ) { <S2SV_EndBug> ","<S2SV_ModStart> , imsy <S2SV_ModEnd> <S2SV_ModStart> ( size_t ) <S2SV_ModStart> , dmsy <S2SV_ModEnd> <S2SV_ModStart> ( size_t ) <S2SV_ModStart> , dmsy <S2SV_ModEnd> <S2SV_ModStart> ( size_t ) <S2SV_ModStart> ( size_t ) <S2SV_ModStart> , dmsy <S2SV_ModEnd> "
757,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""replay<S2SV_blank>detection<S2SV_blank>%sabled"" , <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_32BITS ( cp ) ; 
758,"<S2SV_StartBug> ALOGE ( ""b/26366256"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; android_errorWriteLog ( 0x534e4554 , ""26366256"" "
759,"<S2SV_StartBug> u64 base_addr , size ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( get_securelevel ( ) > 0 ) return - EPERM 
760,<S2SV_StartBug> if ( client -> rcSource ) <S2SV_EndBug> ,<S2SV_ModStart> width >= MAX_CURSOR_SIZE || height >= MAX_CURSOR_SIZE ) return FALSE ; if ( 
761,<S2SV_StartBug> if ( bee -> ui -> ft_in_start ) { <S2SV_EndBug> ,<S2SV_ModStart> && bu 
762,<S2SV_StartBug> if ( vps_id >= 16 ) { <S2SV_EndBug> ,<S2SV_ModStart> ( vps_id < 0 ) || ( <S2SV_ModStart> ) 
763,<S2SV_StartBug> ether_setup ( dev ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING 
764,"<S2SV_StartBug> struct key * find_keyring_by_name ( const char * name , bool skip_perm_check ) <S2SV_EndBug> <S2SV_StartBug> if ( ! skip_perm_check && <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> ","<S2SV_ModStart> uid_keyring <S2SV_ModEnd> <S2SV_ModStart> uid_keyring ) { if ( ! test_bit ( KEY_FLAG_UID_KEYRING , & keyring -> flags ) ) continue ; } else { if ( <S2SV_ModEnd> <S2SV_ModStart> } "
765,<S2SV_StartBug> while ( ! kthread_should_stop ( ) ) { <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> kthread_freezable_should_stop ( NULL <S2SV_ModEnd> <S2SV_ModStart> if ( signal_pending ( current ) ) flush_signals ( current ) ; <S2SV_ModStart> svc_exit_thread ( rqstp ) ; module_put_and_exit ( 0 ) ; 
766,"<S2SV_StartBug> PHP_VAR_UNSERIALIZE_INIT ( var_hash ) ; <S2SV_EndBug> <S2SV_StartBug> q = p ; <S2SV_EndBug> <S2SV_StartBug> goto skip ; <S2SV_EndBug> <S2SV_StartBug> php_set_session_var ( name , namelen , current , & var_hash TSRMLS_CC ) ; <S2SV_EndBug> <S2SV_StartBug> PS_ADD_VARL ( name , namelen ) ; <S2SV_EndBug> ",<S2SV_ModStart> int skip = 0 ; <S2SV_ModStart> ; skip = 0 <S2SV_ModStart> skip = 1 <S2SV_ModEnd> <S2SV_ModStart> if ( ! skip ) { <S2SV_ModStart> } <S2SV_ModStart> if ( ! skip ) { <S2SV_ModStart> } 
767,"<S2SV_StartBug> if ( ( child -> ptrace & PT_PTRACED ) && child -> parent == current ) { <S2SV_EndBug> <S2SV_StartBug> spin_lock_irq ( & child -> sighand -> siglock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ignore_state || ( task_is_traced ( child ) && <S2SV_EndBug> <S2SV_StartBug> ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ret && ! ignore_state ) <S2SV_EndBug> <S2SV_StartBug> ret = wait_task_inactive ( child , TASK_TRACED ) ? 0 : - ESRCH ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> WARN_ON ( child -> state == __TASK_TRACED <S2SV_ModEnd> <S2SV_ModStart> ptrace_freeze_traced ( child <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { if ( ! <S2SV_ModEnd> <S2SV_ModStart> __TASK_TRACED ) ) { WARN_ON ( child -> state == __TASK_TRACED ) ; ret = <S2SV_ModEnd> <S2SV_ModStart> } } 
768,"<S2SV_StartBug> int ctrl_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> if ( display_size ) { <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> pbi ) { <S2SV_EndBug> <S2SV_StartBug> const VP9_COMMON * const cm = & ctx -> pbi -> common ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_OK ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ctx -> frame_parallel_decode ) { set_error_detail ( ctx , ""Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode"" ) ; return VPX_CODEC_INCAPABLE ; } if ( <S2SV_ModStart> frame_workers ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModEnd> <S2SV_ModStart> frame_worker_data <S2SV_ModEnd> <S2SV_ModStart> return VPX_CODEC_OK ; <S2SV_ModStart> } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
769,<S2SV_StartBug> altcol = ( altcol / tok -> alttabsize + 1 ) <S2SV_EndBug> <S2SV_StartBug> * tok -> alttabsize ; <S2SV_EndBug> <S2SV_StartBug> if ( indenterror ( tok ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( indenterror ( tok ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( indenterror ( tok ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( tok -> async_def ) { <S2SV_EndBug> ,<S2SV_ModStart> ALTTABSIZE <S2SV_ModEnd> <S2SV_ModStart> * ALTTABSIZE <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart> ; <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart> ; <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart> ; <S2SV_ModEnd> <S2SV_ModStart> tok -> async_always || 
770,"<S2SV_StartBug> # ifndef _MSC_VER <S2SV_EndBug> <S2SV_StartBug> char filename [ dirent . namelen + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> enum grub_fshelp_filetype type = GRUB_FSHELP_UNKNOWN ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( hook ( filename , type , fdiro , closure ) ) <S2SV_EndBug> ",<S2SV_ModStart> char * filename = grub_malloc ( <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> <S2SV_ModStart> if ( ! filename ) { break ; } <S2SV_ModStart> { free ( filename ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> { free ( filename ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> { free ( filename ) ; <S2SV_ModEnd> <S2SV_ModStart> { free ( filename ) ; return 1 ; } free ( filename ) <S2SV_ModEnd> 
771,"<S2SV_StartBug> if ( strncmp ( line , ""currentfile<S2SV_blank>eexec"" , 17 ) == 0 && isspace ( line [ 17 ] ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( line += 18 ; isspace ( * line ) ; line ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( ; line < last && isspace ( * line ) ; line ++ ) <S2SV_EndBug> <S2SV_StartBug> else if ( last >= line + 4 && isxdigit ( line [ 0 ] ) && isxdigit ( line [ 1 ] ) <S2SV_EndBug> <S2SV_StartBug> && isxdigit ( line [ 2 ] ) && isxdigit ( line [ 3 ] ) ) <S2SV_EndBug> ",<S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) 
772,<S2SV_StartBug> if ( transhdrlen ) { <S2SV_EndBug> <S2SV_StartBug> copy = datalen - transhdrlen - fraggap ; <S2SV_EndBug> ,"<S2SV_ModStart> copy = datalen - transhdrlen - fraggap ; if ( copy < 0 ) { err = - EINVAL ; goto error ; } <S2SV_ModStart> if ( copy > 0 && getfrag ( from , data + transhdrlen <S2SV_ModEnd> "
773,<S2SV_StartBug> if ( ! from_buffer ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
774,<S2SV_StartBug> if ( env -> allow_ptr_leaks || BPF_SRC ( insn -> code ) == BPF_K ) <S2SV_EndBug> <S2SV_StartBug> if ( aux -> alu_state && <S2SV_EndBug> <S2SV_StartBug> return - EACCES ; <S2SV_EndBug> ,"<S2SV_ModStart> can_skip_alu_sanitation ( env , insn ) <S2SV_ModEnd> <S2SV_ModStart> update_alu_sanitation_state ( aux , alu_state , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
775,"<S2SV_StartBug> pr_debug ( ""%p<S2SV_blank>%zu\\n"" , sk , len ) ; <S2SV_EndBug> <S2SV_StartBug> sockaddr -> sa_family = AF_NFC ; <S2SV_EndBug> ","<S2SV_ModStart> ; msg -> msg_namelen = 0 <S2SV_ModStart> memset ( sockaddr , 0 , sizeof ( * sockaddr ) ) ; "
776,<S2SV_StartBug> if ( s ) { <S2SV_EndBug> <S2SV_StartBug> struct unix_sock * u = unix_sk ( s ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & unix_gc_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart>  <S2SV_ModEnd> 
777,"<S2SV_StartBug> unsigned char * buf ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( buf = jas_realloc2 ( m -> buf_ , bufsize , sizeof ( unsigned char ) ) ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && bufsize 
778,<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug> ,<S2SV_ModStart> Py_RETURN_NONE <S2SV_ModEnd> 
779,"<S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> set_modeinfo_offsets ( & cpi -> common , xd , mi_row , mi_col ) ; <S2SV_EndBug> <S2SV_StartBug> duplicate_mode_info_in_sb ( & cpi -> common , xd , mi_row , mi_col , bsize ) ; <S2SV_EndBug> ","<S2SV_ModStart> MACROBLOCK * const x , MACROBLOCKD * const xd <S2SV_ModEnd> <S2SV_ModStart> set_mode_info_offsets <S2SV_ModEnd> <S2SV_ModStart> , x <S2SV_ModStart>  <S2SV_ModEnd> "
780,"<S2SV_StartBug> sprintf ( address , ""%s:%s"" , url , port ) ; <S2SV_EndBug> ","<S2SV_ModStart> snprintf ( address , 254 <S2SV_ModEnd> "
781,"<S2SV_StartBug> memset ( global , 0 , sizeof ( * global ) ) ; <S2SV_EndBug> <S2SV_StartBug> global -> codec = get_vpx_encoder_by_index ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> global -> use_i420 = 0 ; <S2SV_EndBug> <S2SV_StartBug> else if ( arg_match ( & arg , & experimental_bitstream , argi ) ) <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_VP9_ENCODER <S2SV_EndBug> ","<S2SV_ModStart> const int num_encoder = get_vpx_encoder_count ( ) ; if ( num_encoder < 1 ) die ( ""Error:<S2SV_blank>no<S2SV_blank>valid<S2SV_blank>encoder<S2SV_blank>available\\n"" ) ; <S2SV_ModStart> num_encoder - 1 ) ; global -> passes = 0 ; global -> color_type = I420 <S2SV_ModEnd> <S2SV_ModStart> color_type = YV12 ; else if ( arg_match ( & arg , & use_i420 , argi ) ) global -> color_type = I420 ; else if ( arg_match ( & arg , & use_i422 , argi ) ) global -> color_type = I422 ; else if ( arg_match ( & arg , & use_i444 , argi ) ) global -> color_type = I444 ; else if ( arg_match ( & arg , & use_i440 , argi ) ) global -> color_type = I440 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> || CONFIG_VP10_ENCODER if ( global -> codec != NULL && global -> codec -> name != NULL ) "
782,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> m -> msg_namelen = 0 ; 
783,<S2SV_StartBug> get_page ( page ) ; <S2SV_EndBug> ,<S2SV_ModStart> { if ( unlikely ( ! try_get_page ( page ) ) ) { page = ERR_PTR ( - ENOMEM ) ; goto out ; } } <S2SV_ModEnd> 
784,<S2SV_StartBug> sixel_buffer = ( char * ) RelinquishMagickMemory ( sixel_buffer ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; sixel_pixels = ( unsigned char * ) RelinquishMagickMemory ( sixel_pixels 
785,<S2SV_StartBug> hndl = sock_diag_lock_handler ( req -> sdiag_family ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( req -> sdiag_family >= AF_MAX ) return - EINVAL ; 
786,"<S2SV_StartBug> static inline ulong encode_twos_comp ( long n , int prec ) <S2SV_EndBug> <S2SV_StartBug> ulong result ; <S2SV_EndBug> ",<S2SV_ModStart> jas_ulong <S2SV_ModEnd> <S2SV_ModStart> jas_ulong <S2SV_ModEnd> 
787,<S2SV_StartBug> mptctl_eventquery ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> struct mpt_ioctl_eventquery karg ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> ,"<S2SV_ModStart> MPT_ADAPTER * ioc , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
788,<S2SV_StartBug> if ( source == target ) <S2SV_EndBug> ,"<S2SV_ModStart> vfs_select_inode ( old_dentry , 0 ) == vfs_select_inode ( new_dentry , 0 ) <S2SV_ModEnd> "
789,<S2SV_StartBug> if ( ! vma -> vm_userfaultfd_ctx . ctx ) <S2SV_EndBug> ,<S2SV_ModStart> WARN_ON ( ! ( vma -> vm_flags & VM_MAYWRITE ) ) ; 
790,"<S2SV_StartBug> static int ecryptfs_parse_options ( struct ecryptfs_sb_info * sbi , char * options ) <S2SV_EndBug> <S2SV_StartBug> if ( ! options ) { <S2SV_EndBug> <S2SV_StartBug> case ecryptfs_opt_err : <S2SV_EndBug> ","<S2SV_ModStart> , uid_t * check_ruid <S2SV_ModStart> * check_ruid = 0 ; <S2SV_ModStart> ecryptfs_opt_check_dev_ruid : * check_ruid = 1 ; break ; case "
791,"<S2SV_StartBug> len = mutt_b64_decode ( obuf , idata -> buf + 2 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , sizeof ( obuf ) "
792,"<S2SV_StartBug> int Downmix_Reset ( downmix_object_t * pDownmixer , bool init ) { <S2SV_EndBug> ",<S2SV_ModStart> __unused <S2SV_ModStart> __unused 
793,<S2SV_StartBug> if ( flags == EXT4_GET_BLOCKS_PRE_IO ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> <S2SV_ModStart> if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ; 
794,<S2SV_StartBug> if ( retval ) { <S2SV_EndBug> ,<S2SV_ModStart> || pname_data . length == 0 || pname_data . data [ pname_data . length - 1 ] != '\\0' 
795,<S2SV_StartBug> block_length = data [ i ] * 256 + data [ i + 1 ] ; <S2SV_EndBug> ,<S2SV_ModStart> if ( i + 1 < data_size ) 
796,<S2SV_StartBug> for ( plane = 0 ; in -> data [ plane ] && plane < 4 ; plane ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( plane = 0 ; in -> data [ plane ] && plane < 4 ; plane ++ ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && in -> data [ plane ] && in -> linesize [ plane ] <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && in -> data [ plane ] && in -> linesize [ plane ] 
797,"<S2SV_StartBug> RATE_CONTROL * const rc = & cpi -> rc ; <S2SV_EndBug> <S2SV_StartBug> VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> struct twopass_rc * const twopass = & cpi -> twopass ; <S2SV_EndBug> <S2SV_StartBug> FIRSTPASS_STATS next_frame = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> const FIRSTPASS_STATS * start_pos ; <S2SV_EndBug> <S2SV_StartBug> double gf_first_frame_err = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> const int max_bits = frame_max_bits ( rc , oxcf ) ; <S2SV_EndBug> <S2SV_StartBug> mv_ratio_accumulator_thresh = ( cpi -> common . width + cpi -> common . height ) / 10.0 ; <S2SV_EndBug> <S2SV_StartBug> active_max_gf_interval = rc -> max_gf_interval ; <S2SV_EndBug> <S2SV_StartBug> mod_frame_err = calculate_modified_err ( cpi , this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> if ( EOF == input_stats ( twopass , & next_frame ) ) <S2SV_EndBug> <S2SV_StartBug> loop_decay_rate = get_prediction_decay_rate ( & cpi -> common , & next_frame ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( next_frame . pcnt_inter - next_frame . pcnt_motion ) < <S2SV_EndBug> <S2SV_StartBug> if ( detect_transition_to_still ( twopass , i , 5 , loop_decay_rate , <S2SV_EndBug> <S2SV_StartBug> boost_score += ( decay_accumulator * <S2SV_EndBug> <S2SV_StartBug> calc_frame_boost ( cpi , & next_frame , this_frame_mv_in_out ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( i >= active_max_gf_interval && ( zero_motion_accumulator < 0.995 ) ) || <S2SV_EndBug> <S2SV_StartBug> ( i > MIN_GF_INTERVAL ) && <S2SV_EndBug> <S2SV_StartBug> ( ( boost_score - old_boost_score ) < IIFACTOR ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( rc -> frames_to_key - i ) < MIN_GF_INTERVAL ) { <S2SV_EndBug> <S2SV_StartBug> while ( i < ( rc -> frames_to_key + ! rc -> next_key_frame_forced ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( i < rc -> frames_to_key ) { <S2SV_EndBug> <S2SV_StartBug> rc -> baseline_gf_interval = i - 1 ; <S2SV_EndBug> <S2SV_StartBug> rc -> baseline_gf_interval = i ; <S2SV_EndBug> <S2SV_StartBug> ( i < cpi -> oxcf . lag_in_frames ) && <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> multi_arf_enabled && ( cpi -> common . frame_type != KEY_FRAME ) ) { <S2SV_EndBug> ","<S2SV_ModStart> VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> TWO_PASS <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const start_pos = twopass -> stats_in <S2SV_ModEnd> <S2SV_ModStart> # if GROUP_ADAPTIVE_MAXQ double gf_group_raw_error = 0.0 ; # endif double gf_group_skip_pct = 0.0 ; double gf_group_inactive_zone_rows = 0.0 ; <S2SV_ModStart> unsigned int allow_alt_ref = is_altref_enabled ( cpi ) ; int f_boost = 0 ; int b_boost = 0 ; int flash_detected ; int active_max_gf_interval ; int active_min_gf_interval ; int64_t gf_group_bits ; double gf_group_error_left ; int gf_arf_bits ; const int is_key_frame = frame_is_intra_only ( cm ) ; const int arf_active_or_kf = is_key_frame || rc -> source_alt_ref_active ; if ( is_key_frame == 0 ) { vp9_zero ( twopass -> gf_group ) ; } vpx_clear_system_state ( ) ; vp9_zero ( next_frame ) ; mod_frame_err = calculate_modified_err ( cpi , twopass , oxcf , this_frame ) ; gf_first_frame_err = mod_frame_err ; if ( arf_active_or_kf ) { <S2SV_ModEnd> <S2SV_ModStart> # if GROUP_ADAPTIVE_MAXQ gf_group_raw_error -= this_frame -> coded_error ; # endif gf_group_skip_pct -= this_frame -> intra_skip_pct ; gf_group_inactive_zone_rows -= this_frame -> inactive_zone_rows ; } mv_ratio_accumulator_thresh = ( cpi -> initial_height + cpi -> initial_width ) / 4.0 ; { int int_max_q = ( int ) ( vp9_convert_qindex_to_q ( twopass -> active_worst_quality , <S2SV_ModEnd> <S2SV_ModStart> bit_depth ) ) ; int int_lbq = ( int ) ( vp9_convert_qindex_to_q ( rc -> last_boosted_qindex , <S2SV_ModEnd> <S2SV_ModStart> bit_depth ) ) ; active_min_gf_interval = rc -> min_gf_interval + MIN ( 2 , int_max_q / 200 ) ; if ( active_min_gf_interval > rc -> max_gf_interval ) active_min_gf_interval = rc -> max_gf_interval ; if ( cpi -> multi_arf_allowed ) { active_max_gf_interval = rc -> max_gf_interval ; } else { active_max_gf_interval = 12 + MIN ( 4 , ( int_lbq / 6 ) ) ; if ( active_max_gf_interval < active_min_gf_interval ) active_max_gf_interval = active_min_gf_interval <S2SV_ModEnd> <S2SV_ModStart> if ( active_max_gf_interval < active_min_gf_interval ) active_max_gf_interval = active_min_gf_interval ; } } <S2SV_ModStart> twopass , oxcf , <S2SV_ModStart> # if GROUP_ADAPTIVE_MAXQ gf_group_raw_error += this_frame -> coded_error ; # endif gf_group_skip_pct += this_frame -> intra_skip_pct ; gf_group_inactive_zone_rows += this_frame -> inactive_zone_rows ; <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> zero_motion_accumulator = MIN ( zero_motion_accumulator , get_zero_motion_factor ( cpi , & next_frame ) ) ; <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , GF_MAX_BOOST <S2SV_ModEnd> <S2SV_ModStart> ( active_max_gf_interval + arf_active_or_kf ) && <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> >= active_min_gf_interval + arf_active_or_kf <S2SV_ModEnd> <S2SV_ModStart> BOOST_BREAKOUT <S2SV_ModEnd> <S2SV_ModStart> rc -> constrained_gf_group = ( i >= <S2SV_ModEnd> <S2SV_ModStart> ) ? 1 : 0 ; if ( allow_alt_ref && <S2SV_ModEnd> <S2SV_ModStart> cpi -> oxcf . lag_in_frames ) && ( i >= rc -> min_gf_interval ) ) { rc -> gfu_boost = calc_arf_boost ( cpi , 0 , ( i - 1 ) , ( i - 1 ) , & f_boost , & b_boost ) ; rc -> source_alt_ref_pending = 1 ; cpi -> multi_arf_enabled = ( cpi -> multi_arf_allowed && ( rc -> baseline_gf_interval >= 6 ) && ( zero_motion_accumulator < 0.995 ) ) ? 1 : 0 ; } else { rc -> gfu_boost = MAX ( ( int ) boost_score , MIN_ARF_GF_BOOST ) ; rc -> source_alt_ref_pending = 0 ; } rc -> baseline_gf_interval = i - ( is_key_frame || rc -> source_alt_ref_pending ) ; if ( is_two_pass_svc ( cpi ) && cpi -> svc . number_temporal_layers > 1 ) { int count = ( 1 << ( cpi -> svc . number_temporal_layers - 1 ) ) - 1 ; int new_gf_interval = ( rc -> baseline_gf_interval + count ) & ( ~ count ) ; int j ; for ( j = 0 ; j < new_gf_interval - rc -> baseline_gf_interval ; ++ j ) { <S2SV_ModEnd> <S2SV_ModStart> gf_group_err += calculate_modified_err ( cpi , twopass , oxcf , this_frame ) ; # if GROUP_ADAPTIVE_MAXQ gf_group_raw_error += this_frame -> coded_error ; # endif gf_group_skip_pct += this_frame -> intra_skip_pct ; gf_group_inactive_zone_rows += this_frame -> inactive_zone_rows ; } <S2SV_ModEnd> <S2SV_ModStart> new_gf_interval ; } rc -> frames_till_gf_update_due = <S2SV_ModEnd> <S2SV_ModStart> ; reset_fpf_position ( twopass , start_pos ) ; gf_group_bits = calculate_total_gf_group_bits ( cpi , gf_group_err ) ; # if GROUP_ADAPTIVE_MAXQ if ( ( <S2SV_ModEnd> <S2SV_ModStart> rc_mode != VPX_Q ) && ( rc -> baseline_gf_interval > 1 ) ) { const int vbr_group_bits_per_frame = ( int ) ( gf_group_bits / rc -> baseline_gf_interval ) ; const double group_av_err = gf_group_raw_error / rc -> baseline_gf_interval ; const double group_av_skip_pct = gf_group_skip_pct / rc -> baseline_gf_interval ; const double group_av_inactive_zone = ( ( gf_group_inactive_zone_rows * 2 ) / ( rc -> baseline_gf_interval * ( double ) cm -> mb_rows ) ) ; int tmp_q ; double rc_factor = 1.0 ; if ( rc -> rate_error_estimate > 0 ) { rc_factor = MAX ( RC_FACTOR_MIN , ( double ) ( 100 - rc -> rate_error_estimate ) / 100.0 ) ; } else { rc_factor = MIN ( RC_FACTOR_MAX , ( double ) ( 100 - rc -> rate_error_estimate ) / 100.0 ) ; } tmp_q = get_twopass_worst_quality ( cpi , group_av_err , ( group_av_skip_pct + group_av_inactive_zone ) , vbr_group_bits_per_frame , twopass -> kfgroup_inter_fraction * rc_factor ) ; twopass -> active_worst_quality = MAX ( tmp_q , twopass -> active_worst_quality >> 1 <S2SV_ModEnd> <S2SV_ModStart> gf_arf_bits = calculate_boost_bits ( rc -> baseline_gf_interval , rc -> gfu_boost , gf_group_bits ) ; twopass -> kf_group_error_left -= ( int64_t ) gf_group_err ; if ( rc -> source_alt_ref_pending ) { gf_group_error_left = gf_group_err - mod_frame_err ; } else if ( is_key_frame == 0 ) { gf_group_error_left = gf_group_err - gf_first_frame_err ; } else { gf_group_error_left = gf_group_err ; } allocate_gf_group_bits ( cpi , gf_group_bits , gf_group_error_left , gf_arf_bits ) ; reset_fpf_position ( twopass , start_pos ) ; if <S2SV_ModEnd> <S2SV_ModStart> { twopass -> section_intra_rating = calculate_section_intra_ratio ( start_pos , twopass -> stats_in_end , rc -> baseline_gf_interval ) ; } if ( oxcf -> resize_mode == RESIZE_DYNAMIC ) { cpi -> rc . next_frame_size_selector = UNSCALED <S2SV_ModEnd> "
798,<S2SV_StartBug> goto err_reprs_clean ; <S2SV_EndBug> <S2SV_StartBug> nfp_repr_free ( repr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( err ) { <S2SV_EndBug> ,<S2SV_ModStart> nfp_repr_free ( repr ) ; <S2SV_ModStart> kfree ( repr_priv ) ; <S2SV_ModStart> kfree ( repr_priv ) ; 
799,"<S2SV_StartBug> err = xt_check_entry_offsets ( e , e -> target_offset , e -> next_offset ) ; <S2SV_EndBug> ","<S2SV_ModStart> elems , e -> "
800,<S2SV_StartBug> if ( sp -> sa_protocol != PX_PROTO_PPTP ) <S2SV_EndBug> ,<S2SV_ModStart> sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if ( 
801,"<S2SV_StartBug> RING_FINAL_CHECK_FOR_REQUESTS ( & vif -> tx , work_to_do ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( work_to_do < 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( ret < 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , <S2SV_EndBug> <S2SV_StartBug> netbk_tx_err ( vif , & txreq , idx ) ; <S2SV_EndBug> <S2SV_StartBug> netbk_tx_err ( vif , & txreq , idx ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( vif -> tx . sring -> req_prod - vif -> tx . req_cons > XEN_NETIF_TX_RING_SIZE ) { netdev_err ( vif -> dev , ""Impossible<S2SV_blank>number<S2SV_blank>of<S2SV_blank>requests.<S2SV_blank>"" ""req_prod<S2SV_blank>%d,<S2SV_blank>req_cons<S2SV_blank>%d,<S2SV_blank>size<S2SV_blank>%ld\\n"" , vif -> tx . sring -> req_prod , vif -> tx . req_cons , XEN_NETIF_TX_RING_SIZE ) ; netbk_fatal_tx_err ( vif ) ; continue ; } <S2SV_ModStart> continue ; <S2SV_ModEnd> <S2SV_ModStart> continue ; <S2SV_ModEnd> <S2SV_ModStart> netdev_err <S2SV_ModEnd> <S2SV_ModStart> netbk_fatal_tx_err ( vif <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
802,"<S2SV_StartBug> ret = vfs_dedupe_file_range ( file , same ) ; <S2SV_EndBug> ",<S2SV_ModStart> same -> dest_count = count ; 
803,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> if ( * i == '\\\\' ) { AM_LOG_RERROR ( APLOG_MARK , APLOG_ERR , HTTP_BAD_REQUEST , r , ""Backslash<S2SV_blank>character<S2SV_blank>detected<S2SV_blank>in<S2SV_blank>URL."" ) ; return HTTP_BAD_REQUEST ; } "
804,"<S2SV_StartBug> char * to , * repl ; <S2SV_EndBug> <S2SV_StartBug> if ( g . decode && ( g . headis & 1 ) != 0 && g . hname != NULL ) { <S2SV_EndBug> <S2SV_StartBug> to = g . hname ; <S2SV_EndBug> <S2SV_StartBug> len = strlen ( g . hname ) ; <S2SV_EndBug> <S2SV_StartBug> repl = g . decode && strcmp ( to + len , "".tgz"" ) ? """" : "".tar"" ; <S2SV_EndBug> <S2SV_StartBug> g . outf = MALLOC ( len + ( g . decode ? strlen ( repl ) : strlen ( g . sufx ) ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( g . outf , to , len ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( g . outf + len , g . decode ? repl : g . sufx ) ; <S2SV_EndBug> ","<S2SV_ModStart> = g . inf , * sufx = """" ; size_t pre = 0 <S2SV_ModEnd> <S2SV_ModStart> ) { if ( <S2SV_ModEnd> <S2SV_ModStart> pre = justname ( g . inf ) - g . inf ; to = justname ( <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> to ) ; } else if ( <S2SV_ModEnd> <S2SV_ModStart> == 0 ) sufx = "".tar"" ; } else sufx = g . sufx ; <S2SV_ModEnd> <S2SV_ModStart> pre + len + strlen ( sufx ) <S2SV_ModEnd> <S2SV_ModStart> g . inf , pre ) ; memcpy <S2SV_ModEnd> <S2SV_ModStart> pre , to , len ) ; strcpy ( g . outf + pre + len , <S2SV_ModEnd> "
805,"<S2SV_StartBug> if ( mi < 0 ) <S2SV_EndBug> <S2SV_StartBug> idev -> info -> mem [ mi ] . addr >> PAGE_SHIFT , <S2SV_EndBug> ",<S2SV_ModStart> struct uio_mem * mem ; <S2SV_ModStart> ) return - EINVAL ; mem = idev -> info -> mem + mi ; if ( vma -> vm_end - vma -> vm_start > mem -> size <S2SV_ModStart> mem -> <S2SV_ModEnd> 
806,<S2SV_StartBug> return 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ( UINT32_MAX - src -> width < ( x > 0 ? x : - x ) ) || ( UINT32_MAX - src -> height < ( y > 0 ? y : - y ) ) ) { # ifdef JBIG2_DEBUG jbig2_error ( ctx , JBIG2_SEVERITY_DEBUG , - 1 , ""overflow<S2SV_blank>in<S2SV_blank>compose_image"" ) ; # endif return 0 ; } "
807,"<S2SV_StartBug> mptctl_do_mpt_command ( struct mpt_ioctl_command karg , void __user * mfPtr ) <S2SV_EndBug> <S2SV_StartBug> MPT_ADAPTER * ioc ; <S2SV_EndBug> <S2SV_StartBug> int iocnum , flagsLength ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( iocnum = mpt_verify_adapter ( karg . hdr . iocnum , & ioc ) ) < 0 ) || <S2SV_EndBug> ","<S2SV_ModStart> MPT_ADAPTER * ioc , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
808,"<S2SV_StartBug> strcpy ( algo -> alg_name , auth -> alg_name ) ; <S2SV_EndBug> ","<S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> , sizeof ( algo -> alg_name ) "
809,<S2SV_StartBug> u8 * output ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! ctx -> opid ) return GF_NON_COMPLIANT_BITSTREAM 
810,<S2SV_StartBug> if ( type == HUB_INIT2 ) <S2SV_EndBug> <S2SV_StartBug> if ( type == HUB_INIT3 ) <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> || type == HUB_INIT3 ) { device_lock ( hub -> intfdev ) ; if ( hub -> disconnected ) { device_unlock ( hub -> intfdev ) ; kref_put ( & hub -> kref , hub_release ) ; return ; } if ( type == HUB_INIT2 <S2SV_ModStart> goto init3 ; } kref_get ( & hub -> kref ) <S2SV_ModEnd> <S2SV_ModStart> device_unlock ( hub -> intfdev ) ; <S2SV_ModStart> if ( type == HUB_INIT2 || type == HUB_INIT3 ) device_unlock ( hub -> intfdev ) ; kref_put ( & hub -> kref , hub_release ) ; "
811,<S2SV_StartBug> param ++ ; <S2SV_EndBug> <S2SV_StartBug> while ( * param == '<S2SV_blank>' ) <S2SV_EndBug> <S2SV_StartBug> param ++ ; <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } 
812,<S2SV_StartBug> if ( code == gcode ) <S2SV_EndBug> ,<S2SV_ModStart> && wordlist [ key ] . index >= 0 
813,"<S2SV_StartBug> char buffer [ 4096 ] ; <S2SV_EndBug> <S2SV_StartBug> char * buf = buffer , * buf2 = buffer2 , * d , * d_url ; <S2SV_EndBug> <S2SV_StartBug> if ( name_len > sizeof ( buffer ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( value ) <= sizeof ( buffer2 ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , * buf2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> efree ( buf ) ; <S2SV_ModEnd> <S2SV_ModStart> buf2 = estrndup ( value , value_len ) ; <S2SV_ModEnd> <S2SV_ModStart> efree ( buf ) ; efree ( buf2 ) ; <S2SV_ModEnd> "
814,"<S2SV_StartBug> GetPixelIndex ( image , q ) , q ) ; <S2SV_EndBug> ","<S2SV_ModStart> ConstrainColormapIndex ( image , <S2SV_ModStart> ) , exception "
815,<S2SV_StartBug> if ( cf_auth_type <= AUTH_TRUST ) { <S2SV_EndBug> ,"<S2SV_ModStart> ! client -> auth_user ) { disconnect_client ( client , true , ""client<S2SV_blank>password<S2SV_blank>pkt<S2SV_blank>before<S2SV_blank>startup<S2SV_blank>packet"" ) ; return false ; } if ( "
816,"<S2SV_StartBug> BUFPUTSL ( ob , ""<q>"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct html_renderopt * options = opaque ; <S2SV_ModStart> if ( options -> flags & HTML_ESCAPE ) escape_html ( ob , text -> data , text -> size ) ; else "
817,"<S2SV_StartBug> if ( cgroup && ! fc_may_access ( fc , controller , cgroup , NULL , O_RDONLY ) ) { <S2SV_EndBug> ","<S2SV_ModStart> ) { if ( ! caller_may_see_dir ( fc -> pid , controller , cgroup ) ) return - ENOENT ; if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
818,"<S2SV_StartBug> void validate_positive_rational ( const char * msg , <S2SV_EndBug> ",<S2SV_ModStart> static 
819,<S2SV_StartBug> continue ; <S2SV_EndBug> ,<S2SV_ModStart> buflen ++ ; 
820,"<S2SV_StartBug> fprintf ( out , ""[URL:<S2SV_blank>%s[StatusCode:<S2SV_blank>%u]"" , <S2SV_EndBug> <S2SV_StartBug> fprintf ( out , ""[ContentType:<S2SV_blank>%s]"" , flow -> http . content_type ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( out , ""[UserAgent:<S2SV_blank>%s]"" , flow -> http . user_agent ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""[URL:<S2SV_blank>%s][StatusCode:<S2SV_blank>%u]"" <S2SV_ModEnd> <S2SV_ModStart> ""[Content-Type:<S2SV_blank>%s]"" <S2SV_ModEnd> <S2SV_ModStart> ""[User-Agent:<S2SV_blank>%s]"" <S2SV_ModEnd> "
821,"<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> indx , & data , 1 , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart> u8 * buf ; int ret ; buf = kmemdup ( & data , 1 , GFP_NOIO ) ; if ( ! buf ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> buf <S2SV_ModEnd> <S2SV_ModStart> kfree ( buf ) ; "
822,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && in -> linesize [ plane ] 
823,<S2SV_StartBug> if ( ( p -> flags & XFRM_STATE_ESN ) && ! rt ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> ,<S2SV_ModStart> struct xfrm_replay_state_esn * rs ; if <S2SV_ModEnd> <S2SV_ModStart> { if ( <S2SV_ModEnd> <S2SV_ModStart> rs = nla_data ( rt ) ; if ( rs -> bmp_len > XFRMA_REPLAY_ESN_MAX / sizeof ( rs -> bmp [ 0 ] ) / 8 ) return - EINVAL ; if ( nla_len ( rt ) < xfrm_replay_state_esn_len ( rs ) && nla_len ( rt ) != sizeof ( * rs ) ) return - EINVAL ; } 
824,"<S2SV_StartBug> static void mark_object ( struct object * obj , struct strbuf * path , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
825,"<S2SV_StartBug> guchar * match ; <S2SV_EndBug> <S2SV_StartBug> gsize to_match = MIN ( left , buffer -> pos ) ; <S2SV_EndBug> <S2SV_StartBug> if ( memcmp ( buffer -> data , & AUTH_END_STRING [ client -> auth_end_offset ] , to_match ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> return match - buffer -> data + strlen ( AUTH_END_STRING ) ; <S2SV_EndBug> ","<S2SV_ModStart> goffset offset = 0 ; gsize original_size = client -> auth_buffer -> len ; g_byte_array_append ( client -> auth_buffer <S2SV_ModEnd> <S2SV_ModStart> data , buffer -> <S2SV_ModStart> while ( TRUE ) { guint8 * line_start = client -> auth_buffer <S2SV_ModEnd> <S2SV_ModStart> offset ; gsize remaining_data = client -> auth_buffer -> len - offset ; guint8 * line_end ; line_end = memmem ( line_start , remaining_data , AUTH_LINE_SENTINEL , strlen ( AUTH_LINE_SENTINEL ) ) ; if ( line_end ) { offset = ( line_end + strlen ( AUTH_LINE_SENTINEL ) - line_start ) ; if ( ! auth_line_is_valid ( line_start , line_end ) ) return FIND_AUTH_END_ABORT ; * line_end = 0 ; if ( auth_line_is_begin ( line_start ) ) return offset - original_size ; } else { g_byte_array_remove_range ( client -> auth_buffer , 0 , offset ) ; if ( client -> auth_buffer -> len >= 16 * 1024 ) return FIND_AUTH_END_ABORT ; return FIND_AUTH_END_CONTINUE ; } } <S2SV_ModEnd> "
826,"<S2SV_StartBug> z . kind = 0 ; <S2SV_EndBug> <S2SV_StartBug> # define PARSE_STRING s = parse_field ( ndo , & parse , & parselen ) ; if ( ! s ) lose = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( lose ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int truncated = 0 ; <S2SV_ModStart> , & truncated ) ; if ( truncated ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> return ; trunc : ND_PRINT ( ( ndo , ""<S2SV_blank>[|zephyr]<S2SV_blank>(%d)"" , length ) ) ; return ; "
827,<S2SV_StartBug> if ( ! mp -> ports && ! mp -> mglist && <S2SV_EndBug> ,<S2SV_ModStart> mp -> timer_armed && 
828,"<S2SV_StartBug> if ( CHECKOVERFLOW ( o , buf_size , 12 ) ) { <S2SV_EndBug> ","<S2SV_ModStart> memset ( & n -> entries [ tcount ] , 0 , sizeof ( MnoteCanonEntry ) ) ; "
829,"<S2SV_StartBug> st = decrease_reservation ( nr_pages , GFP_USER ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( si_mem_available ( ) < nr_pages ) return - ENOMEM ; 
830,<S2SV_StartBug> p += 2 ; <S2SV_EndBug> <S2SV_StartBug> p += 3 ; <S2SV_EndBug> <S2SV_StartBug> p += 4 ; <S2SV_EndBug> <S2SV_StartBug> l = p [ 1 ] ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len < 2 ) return - 1 ; <S2SV_ModStart> if ( len < 3 ) return - 1 ; <S2SV_ModStart> if ( len < 4 ) return - 1 ; <S2SV_ModStart> if ( len < 2 ) return - 1 ; 
831,"<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> skb_free_datagram ( sk , skb ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } 
832,"<S2SV_StartBug> p = strchr ( context -> buffer , '<S2SV_blank>' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> 
833,<S2SV_StartBug> for ( i = 1 ; i <= SYSTEM_ID_LEN ; i ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> int sysid_len ; sysid_len = SYSTEM_ID_LEN ; if ( sysid_len > id_len ) sysid_len = id_len ; <S2SV_ModStart> sysid_len <S2SV_ModEnd> 
834,<S2SV_StartBug> line += PKT_LEN_SIZE ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len != 0 && len < PKT_LEN_SIZE ) return GIT_ERROR ; 
835,"<S2SV_StartBug> DBG_ENTER ( ""php_mysqlnd_rowp_read_text_protocol_aux"" ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned long len = php_mysqlnd_net_field_length ( & p ) ; <S2SV_EndBug> ","<S2SV_ModStart> const zend_uchar * const packet_end = ( zend_uchar * ) row_buffer -> ptr + data_size ; <S2SV_ModStart> const <S2SV_ModStart> if ( len != MYSQLND_NULL_LENGTH && ( ( p + len ) > packet_end ) ) { php_error_docref ( NULL , E_WARNING , ""Malformed<S2SV_blank>server<S2SV_blank>packet.<S2SV_blank>Field<S2SV_blank>length<S2SV_blank>pointing<S2SV_blank>"" MYSQLND_SZ_T_SPEC ""<S2SV_blank>bytes<S2SV_blank>after<S2SV_blank>end<S2SV_blank>of<S2SV_blank>packet"" , ( p + len ) - packet_end - 1 ) ; DBG_RETURN ( FAIL ) ; } "
836,<S2SV_StartBug> u8 odata [ 16 ] ; <S2SV_EndBug> ,<S2SV_ModStart> * odata = pctx -> odata ; u8 * idata = pctx -> idata <S2SV_ModEnd> 
837,"<S2SV_StartBug> void * * p , void * end , void * obuf , size_t olen ) <S2SV_EndBug> <S2SV_StartBug> ret = ceph_decrypt2 ( secret , & head , & head_len , obuf , & olen , <S2SV_EndBug> ","<S2SV_ModStart> * <S2SV_ModStart> if ( * obuf == NULL ) { * obuf = kmalloc ( len , GFP_NOFS ) ; if ( ! * obuf ) return - ENOMEM ; olen = len ; } <S2SV_ModStart> * "
838,<S2SV_StartBug> if ( name_len == 0 ) goto chunk_end ; <S2SV_EndBug> <S2SV_StartBug> READ_ENCINT ( length ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( name_len < 2 || ! name [ 0 ] || ! name [ 1 ] ) continue 
839,"<S2SV_StartBug> xim -> bytes_per_line * xim -> height , IPC_CREAT | 0777 ) ; <S2SV_EndBug> ",<S2SV_ModStart> 0600 <S2SV_ModEnd> 
840,<S2SV_StartBug> if ( event -> attr . inherit || ! is_sampling_event ( event ) ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> struct perf_event_context * ctx ; int ret ; ctx = perf_event_ctx_lock <S2SV_ModEnd> <S2SV_ModStart> ret = _perf_event_refresh ( event , refresh ) ; perf_event_ctx_unlock ( event , ctx ) ; return ret <S2SV_ModEnd> "
841,"<S2SV_StartBug> return udp_prot . setsockopt ( sk , level , optname , optval , optlen ) ; <S2SV_EndBug> ",<S2SV_ModStart> - EINVAL <S2SV_ModEnd> 
842,<S2SV_StartBug> section -> frame = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> section -> sr_coded_error = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> section -> pcnt_neutral = 0.0 ; <S2SV_EndBug> ,<S2SV_ModStart> = 0.0 ; section -> weight <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = 0.0 ; section -> intra_skip_pct = 0.0 ; section -> inactive_zone_rows = 0.0 ; section -> inactive_zone_cols 
843,<S2SV_StartBug> bool off_is_neg = off_reg -> smin_value < 0 ; <S2SV_EndBug> <S2SV_StartBug> alu_state = off_is_neg ? BPF_ALU_NEG_VALUE : 0 ; <S2SV_EndBug> ,<S2SV_ModStart> off_is_imm = tnum_is_const ( off_reg -> var_off ) ; bool <S2SV_ModStart> : 0 ; alu_state |= off_is_imm ? BPF_ALU_IMMEDIATE 
844,"<S2SV_StartBug> while ( * end_ptr != \'\\""\' && * end_ptr && ++ len ) if ( * end_ptr ++ == '\\\\' ) end_ptr ++ ; <S2SV_EndBug> ",<S2SV_ModStart> { <S2SV_ModStart> { if ( * end_ptr == '\\0' ) { return 0 ; } end_ptr ++ ; } } <S2SV_ModEnd> 
845,<S2SV_StartBug> if ( edge_port -> lsr_event ) { <S2SV_EndBug> ,<S2SV_ModStart> urb -> actual_length > 0 && 
846,"<S2SV_StartBug> Rd_WP_DWORD ( image , & Rec . RecordLength ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; if ( Rec . RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" "
847,"<S2SV_StartBug> return reply_msg ( c , MSG_JOB_TOO_BIG ) ; <S2SV_EndBug> ","<S2SV_ModStart> skip ( c , body_size + 2 <S2SV_ModEnd> "
848,<S2SV_StartBug> * d ++ = from_hex ( s [ 1 ] ) << 4 | from_hex ( s [ 2 ] ) ; <S2SV_EndBug> ,<S2SV_ModStart> char t <S2SV_ModEnd> <S2SV_ModStart> ) ; * d ++ = ( char ) ( ( isprint ( t ) ) ? t : '<S2SV_blank>' 
849,<S2SV_StartBug> if ( buf -> pts == AV_NOPTS_VALUE ) { <S2SV_EndBug> ,<S2SV_ModStart> || av_fifo_size ( s -> fifo ) <= 0 
850,"<S2SV_StartBug> if ( fscanf ( f , ""PG%[<S2SV_blank>\\t]%c%c%[<S2SV_blank>\\t+-]%d%[<S2SV_blank>\\t]%d%[<S2SV_blank>\\t]%d"" , temp , & endian1 , <S2SV_EndBug> ","<S2SV_ModStart> ""PG%31[<S2SV_blank>\\t]%c%c%31[<S2SV_blank>\\t+-]%d%31[<S2SV_blank>\\t]%d%31[<S2SV_blank>\\t]%d"" <S2SV_ModEnd> "
851,<S2SV_StartBug> struct crypto_rng * rng = __crypto_rng_cast ( tfm ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
852,"<S2SV_StartBug> if ( value [ strlen ( value ) - 1 ] == ',' ) { <S2SV_EndBug> ",<S2SV_ModStart> * value == 0 || 
