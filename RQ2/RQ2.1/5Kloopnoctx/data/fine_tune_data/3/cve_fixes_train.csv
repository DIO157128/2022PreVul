,source,target
0,"<S2SV_StartBug> if ( ! nonce1 ) { <S2SV_EndBug> <S2SV_StartBug> applog ( LOG_INFO , ""Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>nonce1<S2SV_blank>in<S2SV_blank>initiate_stratum"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! n2size ) { <S2SV_EndBug> <S2SV_StartBug> applog ( LOG_INFO , ""Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>n2size<S2SV_blank>in<S2SV_blank>initiate_stratum"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> valid_hex ( nonce1 ) <S2SV_ModEnd> <S2SV_ModStart> ""Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>valid<S2SV_blank>nonce1<S2SV_blank>in<S2SV_blank>initiate_stratum"" <S2SV_ModEnd> <S2SV_ModStart> n2size < 2 || n2size > 16 <S2SV_ModEnd> <S2SV_ModStart> ""Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>valid<S2SV_blank>n2size<S2SV_blank>in<S2SV_blank>initiate_stratum"" <S2SV_ModEnd> "
1,"<S2SV_StartBug> type = * ( tptr ) ; <S2SV_EndBug> <S2SV_StartBug> subtype = * ( tptr + 4 ) ; <S2SV_EndBug> <S2SV_StartBug> tok2str ( eap_type_values , ""unknown"" , * ( tptr + 4 ) ) , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>%s<S2SV_blank>(%u),"" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>TTLSv%u"" , <S2SV_EndBug> <S2SV_StartBug> case EAP_TYPE_TLS : <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>len<S2SV_blank>%u"" , EXTRACT_32BITS ( tptr + 6 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>FASTv%u"" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>len<S2SV_blank>%u"" , EXTRACT_32BITS ( tptr + 6 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>subtype<S2SV_blank>[%s]<S2SV_blank>0x%02x,"" , <S2SV_EndBug> ","<S2SV_ModStart> ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> ) ; ND_TCHECK_16BITS ( tptr + 2 <S2SV_ModStart> ND_TCHECK_8BITS ( tptr + 4 ) ; <S2SV_ModStart> subtype ) , subtype <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_8BITS ( tptr + count ) ; <S2SV_ModStart> case EAP_TYPE_TLS : ND_TCHECK_8BITS ( tptr + 5 ) ; if ( subtype == EAP_TYPE_TTLS ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_32BITS ( tptr + 6 ) ; <S2SV_ModStart> ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ND_TCHECK_32BITS ( tptr + 6 ) ; <S2SV_ModStart> ND_TCHECK_8BITS ( tptr + 5 ) ; "
2,<S2SV_StartBug> return - ETIMEDOUT ; <S2SV_EndBug> ,<S2SV_ModStart> kfree_skb ( skb ) ; 
3,<S2SV_StartBug> yi . cfg . mask = 0xffffffff ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & yi , 0 , sizeof ( yi ) ) ; "
4,<S2SV_StartBug> if ( skb_headroom ( skb ) < ( tnl_hlen + frag_hdr_sz ) ) { <S2SV_EndBug> ,<S2SV_ModStart> skb -> mac_header <S2SV_ModEnd> 
5,"<S2SV_StartBug> int64_t time , offset ; <S2SV_EndBug> ",<S2SV_ModStart> if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; } 
6,"<S2SV_StartBug> unsigned long tpgt ; <S2SV_EndBug> <S2SV_StartBug> if ( kstrtoul ( name + 5 , 10 , & tpgt ) || tpgt > UINT_MAX ) <S2SV_EndBug> ",<S2SV_ModStart> u16 <S2SV_ModEnd> <S2SV_ModStart> kstrtou16 <S2SV_ModEnd> <S2SV_ModStart> >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> 
7,"<S2SV_StartBug> TrackWriter * writer = ( TrackWriter * ) gf_list_get ( writers , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; gf_list_del_item ( writer -> stbl -> child_boxes , writer -> stco ) ; gf_list_del_item ( writer -> stbl -> child_boxes , writer -> stsc "
8,<S2SV_StartBug> u32 data ; <S2SV_EndBug> <S2SV_StartBug> vapic = kmap_atomic ( vcpu -> arch . apic -> vapic_page ) ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> kvm_read_guest_cached ( vcpu -> kvm , & <S2SV_ModEnd> <S2SV_ModStart> vapic_cache , & data , sizeof ( u32 ) <S2SV_ModEnd> "
9,<S2SV_StartBug> * dst = * src ; <S2SV_EndBug> ,<S2SV_ModStart> __switch_to_tm ( src ) ; tm_recheckpoint_new_task ( src ) ; 
10,<S2SV_StartBug> cJSON * c = array -> child ; <S2SV_EndBug> <S2SV_StartBug> while ( c && item > 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> ? array -> child : 0 <S2SV_ModEnd> <S2SV_ModStart> item -- , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
11,"<S2SV_StartBug> ext3_msg ( sb , ""error:<S2SV_blank>invalid<S2SV_blank>sb<S2SV_blank>specification:<S2SV_blank>%s"" , <S2SV_EndBug> ","<S2SV_ModStart> KERN_ERR , "
12,<S2SV_StartBug> ipv6_select_ident ( fptr ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , ( struct rt6_info * ) skb_dst ( skb ) "
13,"<S2SV_StartBug> void __perf_sw_event ( u32 event_id , u64 nr , int nmi , <S2SV_EndBug> <S2SV_StartBug> do_perf_sw_event ( PERF_TYPE_SOFTWARE , event_id , nr , nmi , & data , regs ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
14,"<S2SV_StartBug> # ifndef _MSC_VER <S2SV_EndBug> <S2SV_StartBug> char buf [ EXT2_BLOCK_SIZE ( data ) ] ; <S2SV_EndBug> <S2SV_StartBug> grub_error ( GRUB_ERR_BAD_FS , ""invalid<S2SV_blank>extent"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( fileblock >= grub_le_to_cpu16 ( ext [ i ] . len ) ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> return fileblock + start ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! indir ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> 0 , blksz , indir ) ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> if ( ! indir ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> 0 , blksz , indir ) ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> 0 , blksz , indir ) ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> ",<S2SV_ModStart> char * buf = grub_malloc ( <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( ! buf ) { return - 1 ; } <S2SV_ModEnd> <S2SV_ModStart> ) ; free ( buf <S2SV_ModStart> { free ( buf ) ; <S2SV_ModStart> } <S2SV_ModStart> free ( buf ) ; <S2SV_ModStart> free ( buf ) ; <S2SV_ModStart> free ( buf ) ; <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } 
15,"<S2SV_StartBug> static void fdct16 ( const int16_t in [ 16 ] , int16_t out [ 16 ] ) { <S2SV_EndBug> <S2SV_StartBug> int step1 [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> int step2 [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> int step3 [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> int input [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> int temp1 , temp2 ; <S2SV_EndBug> <S2SV_StartBug> int s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; <S2SV_EndBug> <S2SV_StartBug> int t0 , t1 , t2 , t3 ; <S2SV_EndBug> <S2SV_StartBug> int x0 , x1 , x2 , x3 ; <S2SV_EndBug> <S2SV_StartBug> out [ 0 ] = fdct_round_shift ( t0 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 4 ] = fdct_round_shift ( t2 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 8 ] = fdct_round_shift ( t1 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 12 ] = fdct_round_shift ( t3 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 2 ] = fdct_round_shift ( t0 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 6 ] = fdct_round_shift ( t2 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 10 ] = fdct_round_shift ( t1 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 14 ] = fdct_round_shift ( t3 ) ; <S2SV_EndBug> <S2SV_StartBug> temp2 = step3 [ 2 ] * - cospi_24_64 - step3 [ 5 ] * cospi_8_64 ; <S2SV_EndBug> <S2SV_StartBug> temp1 = step3 [ 2 ] * - cospi_8_64 + step3 [ 5 ] * cospi_24_64 ; <S2SV_EndBug> <S2SV_StartBug> step1 [ 2 ] = step3 [ 3 ] - step2 [ 2 ] ; <S2SV_EndBug> <S2SV_StartBug> out [ 1 ] = fdct_round_shift ( temp1 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 9 ] = fdct_round_shift ( temp2 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 5 ] = fdct_round_shift ( temp1 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 13 ] = fdct_round_shift ( temp2 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 3 ] = fdct_round_shift ( temp1 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 11 ] = fdct_round_shift ( temp2 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 7 ] = fdct_round_shift ( temp1 ) ; <S2SV_EndBug> <S2SV_StartBug> out [ 15 ] = fdct_round_shift ( temp2 ) ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> cospi_24_64 + <S2SV_ModEnd> <S2SV_ModStart> cospi_8_64 - <S2SV_ModEnd> <S2SV_ModStart> + step2 [ 2 ] ; step1 [ 3 ] = step3 [ 3 ] - step2 [ 2 ] ; step1 [ 4 ] = step3 [ 4 ] - step2 [ 5 ] ; step1 [ 5 ] = step3 [ 4 ] + <S2SV_ModEnd> <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) 
16,<S2SV_StartBug> ret = convert_ctx_accesses ( env ) ; <S2SV_EndBug> ,<S2SV_ModStart> sanitize_dead_code ( env ) ; if ( ret == 0 ) 
17,<S2SV_StartBug> int i ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! config -> sample_rate ) { strcpy ( wpc -> error_message , ""sample<S2SV_blank>rate<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>zero!"" ) ; return FALSE ; } "
18,"<S2SV_StartBug> SDev = cd -> device ; <S2SV_EndBug> <S2SV_StartBug> ( unsigned char * ) cgc -> sense , & sshdr , <S2SV_EndBug> ","<S2SV_ModStart> unsigned char sense_buffer [ SCSI_SENSE_BUFFERSIZE ] , * senseptr = NULL ; <S2SV_ModStart> ; if ( cgc -> sense ) senseptr = sense_buffer <S2SV_ModStart> senseptr , & sshdr , cgc -> timeout , IOCTL_RETRIES , 0 , 0 , NULL ) ; if ( cgc -> sense ) memcpy ( cgc -> sense , sense_buffer , sizeof ( * <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModEnd> "
19,<S2SV_StartBug> if ( get4 ( ) == 0x48454150 ) <S2SV_EndBug> <S2SV_StartBug> imgdata . lens . makernotes . CameraMount = LIBRAW_MOUNT_FixedLens ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && ( save + hlen ) >= 0 && ( save + hlen ) <= ifp -> size ( ) # endif ) { # ifdef LIBRAW_LIBRARY_BUILD 
20,"<S2SV_StartBug> static void search_filter_level ( const YV12_BUFFER_CONFIG * sd , VP9_COMP * cpi , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * const cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> struct loopfilter * const lf = & cm -> lf ; <S2SV_EndBug> <S2SV_StartBug> int best_err ; <S2SV_EndBug> <S2SV_StartBug> int filt_direction = 0 ; <S2SV_EndBug> <S2SV_StartBug> int ss_err [ MAX_LOOP_FILTER + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ss_err , 0xFF , sizeof ( ss_err ) ) ; <S2SV_EndBug> <S2SV_StartBug> int filt_err ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> twopass . section_intra_rating < 20 ) <S2SV_EndBug> <S2SV_StartBug> bias = bias * cpi -> twopass . section_intra_rating / 20 ; <S2SV_EndBug> <S2SV_StartBug> filt_err = try_filter_frame ( sd , cpi , filt_low , partial_frame ) ; <S2SV_EndBug> <S2SV_StartBug> ss_err [ filt_low ] = filt_err ; <S2SV_EndBug> <S2SV_StartBug> if ( filt_err < best_err ) <S2SV_EndBug> <S2SV_StartBug> filt_err = try_filter_frame ( sd , cpi , filt_high , partial_frame ) ; <S2SV_EndBug> <S2SV_StartBug> ss_err [ filt_high ] = filt_err ; <S2SV_EndBug> <S2SV_StartBug> best_err = filt_err ; <S2SV_EndBug> <S2SV_StartBug> lf -> filter_level = filt_best ; <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> const <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; int64_t best_err ; int filt_best <S2SV_ModStart> int64_t <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> int64_t <S2SV_ModEnd> <S2SV_ModStart> ( ( cpi -> oxcf . pass == 2 ) && <S2SV_ModStart> ) bias = ( <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> ss_err [ filt_low ] <S2SV_ModEnd> <S2SV_ModStart> } if ( ( ss_err [ filt_low ] <S2SV_ModEnd> <S2SV_ModStart> ss_err [ filt_low ] < best_err ) best_err = ss_err [ filt_low ] <S2SV_ModEnd> <S2SV_ModStart> ss_err [ filt_high ] <S2SV_ModEnd> <S2SV_ModStart> } if ( ss_err [ filt_high ] <S2SV_ModEnd> <S2SV_ModStart> ss_err [ filt_high ] <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> 
21,"<S2SV_StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <S2SV_EndBug> ","<S2SV_ModStart> luaL_checkstack ( L , 1 , ""in<S2SV_blank>function<S2SV_blank>mp_unpack_full"" ) ; "
22,"<S2SV_StartBug> static void encode_mv_component ( vp9_writer * w , int comp , <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , sign , mvcomp -> sign ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , ( d >> i ) & 1 , mvcomp -> bits [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , hp , <S2SV_EndBug> ",<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> 
23,<S2SV_StartBug> return alg -> cra_rng . rng_make_random ? <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
24,<S2SV_StartBug> if ( sp -> sa_protocol != PX_PROTO_PPTP ) <S2SV_EndBug> ,<S2SV_ModStart> sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if ( 
25,<S2SV_StartBug> request -> rxBlockSzx = COAP_BLOCK_SIZE_16 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 32 ) <S2SV_EndBug> <S2SV_StartBug> request -> rxBlockSzx = COAP_BLOCK_SIZE_32 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 64 ) <S2SV_EndBug> <S2SV_StartBug> request -> rxBlockSzx = COAP_BLOCK_SIZE_64 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 128 ) <S2SV_EndBug> <S2SV_StartBug> request -> rxBlockSzx = COAP_BLOCK_SIZE_128 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 256 ) <S2SV_EndBug> <S2SV_StartBug> request -> rxBlockSzx = COAP_BLOCK_SIZE_256 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 512 ) <S2SV_EndBug> <S2SV_StartBug> request -> rxBlockSzx = COAP_BLOCK_SIZE_512 ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> request -> rxBlockSzx = COAP_BLOCK_SIZE_1024 ; <S2SV_EndBug> <S2SV_StartBug> request -> rxBlockSzx = coapClientGetMaxBlockSize ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } else { <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } 
26,"<S2SV_StartBug> char * fmtname ; <S2SV_EndBug> <S2SV_StartBug> while ( ( id = jas_getopt ( argc , argv , opts ) ) >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> case OPT_INFILE : <S2SV_EndBug> <S2SV_StartBug> if ( infile ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( image = jas_image_decode ( instream , fmtid , 0 ) ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ; int debug <S2SV_ModStart> debug = 0 ; <S2SV_ModStart> OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case <S2SV_ModStart> jas_setdbglevel ( debug ) ; <S2SV_ModStart> jas_stream_close ( instream ) ; 
27,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> die ( ""Oops<S2SV_blank>-<S2SV_blank>bad<S2SV_blank>mode"" , regs , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> siginfo_t info ; void __user * pc = ( void __user * ) instruction_pointer ( regs ) ; <S2SV_ModStart> __show_regs ( regs ) ; info . si_signo = SIGILL ; info . si_errno = 0 ; info . si_code = ILL_ILLOPC ; info . si_addr = pc ; arm64_notify_die <S2SV_ModEnd> <S2SV_ModStart> & info , 0 <S2SV_ModEnd> "
28,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""%04x,<S2SV_blank>"" , EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%04x<S2SV_blank>"" , EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; <S2SV_EndBug> <S2SV_StartBug> ""Direction-#%u"" , * ( ( const u_char * ) ptr ++ ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( length > 5 ) { <S2SV_EndBug> <S2SV_StartBug> print_string ( ndo , ( const u_char * ) ptr , length - 5 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( length < 5 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } <S2SV_ModStart> dat <S2SV_ModEnd> <S2SV_ModStart> dat += 2 ; length -= 2 <S2SV_ModEnd> <S2SV_ModStart> dat <S2SV_ModEnd> <S2SV_ModStart> dat += 2 ; length -= 2 <S2SV_ModEnd> <S2SV_ModStart> EXTRACT_8BITS ( ptr <S2SV_ModEnd> <S2SV_ModStart> ptr ++ ; length -- ; <S2SV_ModStart> != 0 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
29,"<S2SV_StartBug> int alt ; <S2SV_EndBug> <S2SV_StartBug> if ( alt < 0 ) <S2SV_EndBug> <S2SV_StartBug> intf -> altsetting [ 0 ] . desc . bInterfaceNumber , alt ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct usb_host_interface * <S2SV_ModEnd> <S2SV_ModStart> ! alt ) return - ENODEV <S2SV_ModEnd> <S2SV_ModStart> alt -> <S2SV_ModEnd> <S2SV_ModStart> -> desc . bAlternateSetting 
30,"<S2SV_StartBug> static void udf_pc_to_char ( struct super_block * sb , unsigned char * from , <S2SV_EndBug> <S2SV_StartBug> int fromlen , unsigned char * to ) <S2SV_EndBug> <S2SV_StartBug> unsigned char * p = to ; <S2SV_EndBug> <S2SV_StartBug> p = to ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( p , ""./"" , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> p += udf_get_filename ( sb , pc -> componentIdent , p , <S2SV_EndBug> <S2SV_StartBug> * p ++ = '/' ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> , int tolen <S2SV_ModStart> int comp_len ; <S2SV_ModStart> ; tolen -- <S2SV_ModStart> if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> tolen -- ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; <S2SV_ModEnd> <S2SV_ModStart> tolen -= 3 ; <S2SV_ModStart> if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> tolen -= 2 ; <S2SV_ModStart> comp_len = udf_get_filename ( sb , pc -> componentIdent , pc -> lengthComponentIdent , p , tolen ) ; p += comp_len ; tolen -= comp_len ; if ( tolen == 0 ) return - ENAMETOOLONG <S2SV_ModEnd> <S2SV_ModStart> ; tolen -- <S2SV_ModStart> return 0 ; "
31,<S2SV_StartBug> if ( class == - 1 ) { <S2SV_EndBug> ,"<S2SV_ModStart> || class == CLIENT_TYPE_MASTER ) { err = ""Unrecognized<S2SV_blank>client<S2SV_blank>limit<S2SV_blank>class:<S2SV_blank>the<S2SV_blank>user<S2SV_blank>specified<S2SV_blank>"" ""an<S2SV_blank>invalid<S2SV_blank>one,<S2SV_blank>or<S2SV_blank>\'master\'<S2SV_blank>which<S2SV_blank>has<S2SV_blank>no<S2SV_blank>buffer<S2SV_blank>limits."" <S2SV_ModEnd> "
32,<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( qid > NVMET_NR_QUEUES ) return NULL 
33,"<S2SV_StartBug> usb_set_intfdata ( interface , dev ) ; <S2SV_EndBug> <S2SV_StartBug> exit : <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> usb_set_intfdata ( interface , dev ) ; retval = usb_register_dev ( interface , & tower_class ) ; if ( retval ) { dev_err ( idev , ""Not<S2SV_blank>able<S2SV_blank>to<S2SV_blank>get<S2SV_blank>a<S2SV_blank>minor<S2SV_blank>for<S2SV_blank>this<S2SV_blank>device.\\n"" ) ; usb_set_intfdata ( interface , NULL ) ; goto error ; } dev -> minor = interface -> minor ; dev_info ( & interface -> dev , ""LEGO<S2SV_blank>USB<S2SV_blank>Tower<S2SV_blank>#%d<S2SV_blank>now<S2SV_blank>attached<S2SV_blank>to<S2SV_blank>major<S2SV_blank>"" ""%d<S2SV_blank>minor<S2SV_blank>%d\\n"" , ( dev -> minor - LEGO_USB_TOWER_MINOR_BASE ) , USB_MAJOR , dev -> minor ) ; "
34,<S2SV_StartBug> if ( vdaux < 1 || ( char * ) UINTPTR_MAX - vstart < vdaux ) { <S2SV_EndBug> ,<S2SV_ModStart> vstart + vdaux < vstart <S2SV_ModEnd> 
35,"<S2SV_StartBug> static void construct_get_dest_keyring ( struct key * * _dest_keyring ) <S2SV_EndBug> <S2SV_StartBug> kenter ( ""%p"" , dest_keyring ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> int ret ; <S2SV_ModStart> bool do_perm_check = true ; <S2SV_ModStart> { do_perm_check = false ; break ; } <S2SV_ModEnd> <S2SV_ModStart> if ( dest_keyring && do_perm_check ) { ret = key_permission ( make_key_ref ( dest_keyring , 1 ) , KEY_NEED_WRITE ) ; if ( ret ) { key_put ( dest_keyring ) ; return ret ; } } <S2SV_ModStart> 0 "
36,<S2SV_StartBug> sc = create_spnego_ctx ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> 1 
37,"<S2SV_StartBug> if ( ! sock_flag ( sk , SOCK_ZAPPED ) ) <S2SV_EndBug> <S2SV_StartBug> if ( addr_len < sizeof ( struct sockaddr_l2tpip ) ) <S2SV_EndBug> <S2SV_StartBug> if ( addr -> l2tp_family != AF_INET ) <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ","<S2SV_ModStart> addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> <S2SV_ModStart> addr -> l2tp_family != AF_INET <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! sock_flag ( sk , SOCK_ZAPPED ) ) goto out "
38,<S2SV_StartBug> static unsigned int stack_maxrandom_size ( void ) <S2SV_EndBug> <S2SV_StartBug> unsigned int max = 0 ; <S2SV_EndBug> <S2SV_StartBug> max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; <S2SV_EndBug> ,<S2SV_ModStart> long <S2SV_ModEnd> <S2SV_ModStart> long <S2SV_ModEnd> <S2SV_ModStart> 1UL <S2SV_ModEnd> 
39,"<S2SV_StartBug> _ ( ""_Launch<S2SV_blank>Anyway"" ) , RESPONSE_RUN ) ; <S2SV_EndBug> <S2SV_StartBug> _ ( ""Mark<S2SV_blank>as<S2SV_blank>_Trusted"" ) , RESPONSE_MARK_TRUSTED ) ; <S2SV_EndBug> <S2SV_StartBug> gtk_dialog_add_button ( GTK_DIALOG ( dialog ) , <S2SV_EndBug> ","<S2SV_ModStart> ""_Cancel"" ) , GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ) , GTK_RESPONSE_CANCEL <S2SV_ModEnd> <S2SV_ModStart> ""Trust<S2SV_blank>and<S2SV_blank>_Launch"" ) , GTK_RESPONSE_OK <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
40,<S2SV_StartBug> tm = localtime ( & t ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; if ( tm == NULL ) return g_strdup ( ""???"" "
41,"<S2SV_StartBug> memcpy ( hashed , password , strlen ( password ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> length <S2SV_ModEnd> 
42,"<S2SV_StartBug> static int m88rs2000_frontend_attach ( struct dvb_usb_adapter * d ) <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 1 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> d -> fe_adap [ 0 ] . fe = dvb_attach ( m88rs2000_attach , & s421_m88rs2000_config , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap ) ; <S2SV_EndBug> <S2SV_StartBug> if ( d -> fe_adap [ 0 ] . fe == NULL ) <S2SV_EndBug> <S2SV_StartBug> if ( dvb_attach ( ts2020_attach , d -> fe_adap [ 0 ] . fe , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap ) ) { <S2SV_EndBug> ","<S2SV_ModStart> adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> <S2SV_ModStart> , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> adap <S2SV_ModEnd> <S2SV_ModStart> adap <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
43,<S2SV_StartBug> struct net * net = sock_net ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> bh_lock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_owned_by_user ( asoc -> base . sk ) ) { <S2SV_EndBug> <S2SV_StartBug> asoc -> base . sk -> sk_err = - error ; <S2SV_EndBug> <S2SV_StartBug> bh_unlock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> sock * sk = asoc -> base . sk ; struct <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
44,<S2SV_StartBug> if ( ! chart || ! * chart ) { <S2SV_EndBug> ,<S2SV_ModStart> fix_google_param ( google_out ) ; fix_google_param ( google_sig ) ; fix_google_param ( google_reqId ) ; fix_google_param ( google_version ) ; fix_google_param ( responseHandler ) ; fix_google_param ( outFileName ) ; 
45,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % stride ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""horAcc8"" , ""%s"" , ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> return 1 ; "
46,<S2SV_StartBug> inbuf = _TIFFmalloc ( scanlinesizein ) ; <S2SV_EndBug> ,"<S2SV_ModStart> uint16 bps = 0 ; ( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ; if ( bps != 8 ) { TIFFError ( TIFFFileName ( in ) , ""Error,<S2SV_blank>can<S2SV_blank>only<S2SV_blank>handle<S2SV_blank>BitsPerSample=8<S2SV_blank>in<S2SV_blank>%s"" , ""cpContig2SeparateByRow"" ) ; return 0 ; } "
47,<S2SV_StartBug> struct address_space * mapping ; <S2SV_EndBug> <S2SV_StartBug> if ( mapping ) <S2SV_EndBug> ,<S2SV_ModStart> hugepage_subpool * spool = ( struct hugepage_subpool <S2SV_ModEnd> <S2SV_ModStart> hugepage_subpool_put_pages ( spool <S2SV_ModEnd> 
48,<S2SV_StartBug> if ( pes_signal != 1 || pes_header_data_length == 0 ) { <S2SV_EndBug> ,<S2SV_ModStart> avio_feof ( pb ) ) { return AVERROR_EOF ; } if ( 
49,<S2SV_StartBug> if ( ! e || e == p ) <S2SV_EndBug> ,<S2SV_ModStart> ) goto not_found ; if ( e - p > HOST_NAME_MAX - 1 
50,"<S2SV_StartBug> void generic_pipe_buf_get ( struct pipe_inode_info * pipe , struct pipe_buffer * buf ) <S2SV_EndBug> <S2SV_StartBug> get_page ( buf -> page ) ; <S2SV_EndBug> ",<S2SV_ModStart> bool <S2SV_ModEnd> <S2SV_ModStart> return try_get_page <S2SV_ModEnd> 
51,"<S2SV_StartBug> cp = ikev1_attrmap_print ( ndo , cp , ( ep < ep2 ) ? ep : ep2 , <S2SV_EndBug> ","<S2SV_ModStart> ep2 , map , nmap ) ; } else cp = ikev1_attr_print ( ndo , cp , ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart>  <S2SV_ModEnd> "
52,"<S2SV_StartBug> ! inode_capable ( inode , CAP_CHOWN ) ) <S2SV_EndBug> <S2SV_StartBug> ! inode_capable ( inode , CAP_CHOWN ) ) <S2SV_EndBug> <S2SV_StartBug> ! inode_capable ( inode , CAP_FSETID ) ) <S2SV_EndBug> ",<S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> <S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> <S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> 
53,"<S2SV_StartBug> select ( reader -> bytes_available_fd + 1 , & read_fds , NULL , NULL , & timeout ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
54,<S2SV_StartBug> fpm_globals . max_requests = wp -> config -> pm_max_requests ; <S2SV_EndBug> ,<S2SV_ModStart> ; fpm_globals . listening_socket = dup ( wp -> listening_socket ) 
55,"<S2SV_StartBug> static int detect_transition_to_still ( struct twopass_rc * twopass , <S2SV_EndBug> <S2SV_StartBug> int trans_to_still = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( frame_interval > MIN_GF_INTERVAL && <S2SV_EndBug> <S2SV_StartBug> const FIRSTPASS_STATS * position = twopass -> stats_in ; <S2SV_EndBug> <S2SV_StartBug> if ( EOF == input_stats ( twopass , & tmp_next_frame ) ) <S2SV_EndBug> <S2SV_StartBug> if ( tmp_next_frame . pcnt_inter - tmp_next_frame . pcnt_motion < 0.999 ) <S2SV_EndBug> <S2SV_StartBug> reset_fpf_position ( twopass , position ) ; <S2SV_EndBug> <S2SV_StartBug> if ( j == still_interval ) <S2SV_EndBug> <S2SV_StartBug> return trans_to_still ; <S2SV_EndBug> ",<S2SV_ModStart> VP9_COMP * cpi <S2SV_ModEnd> <S2SV_ModStart> TWO_PASS * const twopass = & cpi -> twopass ; RATE_CONTROL * const rc = & cpi -> rc <S2SV_ModEnd> <S2SV_ModStart> rc -> min_gf_interval <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const FIRSTPASS_STATS * stats = & twopass -> stats_in [ j ] ; if ( stats >= twopass -> stats_in_end <S2SV_ModEnd> <S2SV_ModStart> stats -> pcnt_inter - stats -> <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> 
56,<S2SV_StartBug> if ( ! handle -> h_transaction ) { <S2SV_EndBug> <S2SV_StartBug> err = jbd2_journal_stop ( handle ) ; <S2SV_EndBug> <S2SV_StartBug> return handle -> h_err ? handle -> h_err : err ; <S2SV_EndBug> <S2SV_StartBug> sb = handle -> h_transaction -> t_journal -> j_private ; <S2SV_EndBug> ,<S2SV_ModStart> err = handle -> h_err ; <S2SV_ModStart> rc <S2SV_ModEnd> <S2SV_ModStart> err ? err : rc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
57,<S2SV_StartBug> if ( offset + size <= i_size_read ( inode ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
58,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> args -> rmtvaluelen = args -> valuelen ; 
59,"<S2SV_StartBug> request_module ( ""%s"" , name ) ; <S2SV_EndBug> <S2SV_StartBug> request_module ( ""%s-all"" , name ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""crypto-%s"" <S2SV_ModEnd> <S2SV_ModStart> ""crypto-%s-all"" <S2SV_ModEnd> "
60,"<S2SV_StartBug> stlv_type = * ( tptr ++ ) ; <S2SV_EndBug> <S2SV_StartBug> len = len - 2 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> while ( tmp ) <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> len = len - ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ND_TCHECK2 ( * tptr , 2 ) ; <S2SV_ModStart> ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ) , stlv_len ) <S2SV_ModStart> if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; <S2SV_ModStart> if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> - ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ; stlv_len = stlv_len <S2SV_ModStart> if ( stlv_len < 8 ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> tptr += stlv_len ; len -= stlv_len ; "
61,"<S2SV_StartBug> return reply_msg ( c , MSG_JOB_TOO_BIG ) ; <S2SV_EndBug> ","<S2SV_ModStart> skip ( c , body_size + 2 <S2SV_ModEnd> "
62,<S2SV_StartBug> ddi . dinfo_nboards = dgnc_NumBoards ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & ddi , 0 , sizeof ( ddi ) ) ; "
63,<S2SV_StartBug> if ( ! ( opt_len == 12 && flags & TH_SYN ) && <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) 
64,"<S2SV_StartBug> int procfd = payload -> procfd ; <S2SV_EndBug> <S2SV_StartBug> uid_t new_uid ; <S2SV_EndBug> <S2SV_StartBug> ERROR ( ""error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>(0)"" ) ; <S2SV_EndBug> <S2SV_StartBug> ERROR ( ""error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(1)"" ) ; <S2SV_EndBug> <S2SV_StartBug> ERROR ( ""error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>final<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>(2)"" ) ; <S2SV_EndBug> <S2SV_StartBug> rexit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ""gainable<S2SV_blank>privileges."" ) ; <S2SV_EndBug> <S2SV_StartBug> on_exec = options -> attach_flags & LXC_ATTACH_LSM_EXEC ? 1 : 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( lsm_set_label_at ( procfd , on_exec , init_ctx -> lsm_label ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> rexit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> rexit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> close ( procfd ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int lsm_labelfd ; <S2SV_ModStart> ""Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>(0):<S2SV_blank>%s."" , strerror ( errno ) <S2SV_ModEnd> <S2SV_ModStart> ""Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(1):<S2SV_blank>%s."" , strerror ( errno ) <S2SV_ModEnd> <S2SV_ModStart> ""Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>message<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>"" ""that<S2SV_blank>it<S2SV_blank>is<S2SV_blank>done<S2SV_blank>pre-initializing<S2SV_blank>(2):<S2SV_blank>%s"" , strerror ( errno ) ) ; shutdown ( ipc_socket , SHUT_RDWR ) ; rexit ( - 1 ) ; } <S2SV_ModEnd> <S2SV_ModStart> shutdown ( ipc_socket , SHUT_RDWR ) ; <S2SV_ModStart> ) ; } status = 3 ; ret = lxc_write_nointr ( ipc_socket , & status , sizeof ( status ) ) ; if ( ret <= 0 ) { ERROR ( ""Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>parent<S2SV_blank>to<S2SV_blank>set<S2SV_blank>up<S2SV_blank>LSM<S2SV_blank>labels<S2SV_blank>(3):<S2SV_blank>%s."" , strerror ( errno ) ) ; shutdown ( ipc_socket , SHUT_RDWR ) ; rexit ( - 1 <S2SV_ModStart> ret = lxc_abstract_unix_recv_fd ( ipc_socket , & lsm_labelfd , NULL , 0 ) ; if ( ret <= 0 ) { ERROR ( ""Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>for<S2SV_blank>parent<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>us<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>fd<S2SV_blank>(4):<S2SV_blank>%s."" , strerror ( errno ) ) ; shutdown ( ipc_socket , SHUT_RDWR ) ; rexit ( - 1 ) ; } <S2SV_ModStart> lsm_labelfd <S2SV_ModEnd> <S2SV_ModStart> SYSERROR ( ""Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label."" ) ; shutdown ( ipc_socket , SHUT_RDWR ) ; close ( lsm_labelfd ) ; rexit ( - 1 ) ; } close ( lsm_labelfd ) ; <S2SV_ModEnd> <S2SV_ModStart> shutdown ( ipc_socket , SHUT_RDWR ) ; rexit ( - 1 ) ; } shutdown ( ipc_socket , SHUT_RDWR ) ; close ( ipc_socket ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
65,"<S2SV_StartBug> line += 3 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( ptr = strchr ( line , '<S2SV_blank>' ) ) ) <S2SV_EndBug> <S2SV_StartBug> line = ptr + 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( ptr = strchr ( line , '\\n' ) ) ) <S2SV_EndBug> ","<S2SV_ModStart> if ( len < 3 ) goto out_err ; <S2SV_ModStart> len -= 3 ; <S2SV_ModStart> memchr <S2SV_ModEnd> <S2SV_ModStart> , len <S2SV_ModStart> if ( len < 1 ) goto out_err ; <S2SV_ModStart> len -= 1 ; <S2SV_ModStart> memchr <S2SV_ModEnd> <S2SV_ModStart> , len "
66,<S2SV_StartBug> if ( header -> biSize >= 40U ) { <S2SV_EndBug> ,"<S2SV_ModStart> biBitCount == 0 ) { fprintf ( stderr , ""Error,<S2SV_blank>invalid<S2SV_blank>biBitCount<S2SV_blank>%d\\n"" , 0 ) ; return OPJ_FALSE ; } if ( header -> "
67,"<S2SV_StartBug> SAS_DPRINTK ( ""DONE<S2SV_blank>DISCOVERY<S2SV_blank>on<S2SV_blank>port<S2SV_blank>%d,<S2SV_blank>pid:%d,<S2SV_blank>result:%d\\n"" , port -> id , <S2SV_EndBug> ",<S2SV_ModStart> sas_probe_devices ( port ) ; 
68,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( image -> colors < tga_info . colormap_index ) image -> colors = tga_info . colormap_index ; 
69,<S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug> ,<S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> 
70,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & line , 0 , sizeof ( line ) ) ; "
71,"<S2SV_StartBug> return scsi_cmd_ioctl ( bd -> bd_disk -> queue , bd -> bd_disk , mode , cmd , arg ) ; <S2SV_EndBug> ","<S2SV_ModStart> int ret ; ret = scsi_verify_blk_ioctl ( bd , cmd ) ; if ( ret < 0 ) return ret ; "
72,"<S2SV_StartBug> void nego_process_negotiation_request ( rdpNego * nego , wStream * s ) <S2SV_EndBug> <S2SV_StartBug> UINT16 length ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> ; if ( Stream_GetRemainingLength ( s ) < 7 ) return FALSE <S2SV_ModStart> return TRUE ; 
73,<S2SV_StartBug> int req_len ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> ,<S2SV_ModStart> unsigned <S2SV_ModStart> ; if ( req_len > ( QETH_BUFSIZE - IPA_PDU_HEADER_SIZE - sizeof ( struct qeth_ipacmd_hdr ) - sizeof ( struct qeth_ipacmd_setadpparms_hdr ) ) ) return - EINVAL 
74,<S2SV_StartBug> int m ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( n < 0 ) { jas_deprecated ( ""negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_pad"" ) ; } "
75,<S2SV_StartBug> int xd_size = 0 ; <S2SV_EndBug> <S2SV_StartBug> xd_size += len ; <S2SV_EndBug> <S2SV_StartBug> if ( delta > data_len [ j ] ) { <S2SV_EndBug> <S2SV_StartBug> offset += data_len [ j ] ; <S2SV_EndBug> ,"<S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> + 1 + len / 255 ; } ret = ff_alloc_extradata ( st -> codecpar , xd_size <S2SV_ModEnd> <S2SV_ModStart> av_assert0 ( delta <= xd_size - offset ) ; <S2SV_ModEnd> <S2SV_ModStart> av_assert0 ( data_len [ j ] <= xd_size - offset ) ; "
76,"<S2SV_StartBug> av_log ( mxf , AV_LOG_TRACE , ""could<S2SV_blank>not<S2SV_blank>resolve<S2SV_blank>essence<S2SV_blank>container<S2SV_blank>data<S2SV_blank>strong<S2SV_blank>ref\\n"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> -> fc 
77,"<S2SV_StartBug> return mount_entry_on_generic ( mntent , path ) ; <S2SV_EndBug> ","<S2SV_ModStart> , rootfs "
78,"<S2SV_StartBug> psf_binheader_readf ( psf , ""p"" , psf -> fileoffset ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ",<S2SV_ModStart> if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> } ; 
79,<S2SV_StartBug> l2info -> proto = EXTRACT_16BITS ( p + l2info -> cookie_len ) ; <S2SV_EndBug> ,<S2SV_ModStart> ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ; 
80,<S2SV_StartBug> return NF_ACCEPT ; <S2SV_EndBug> ,<S2SV_ModStart> err == 0 ? NF_ACCEPT : NF_DROP <S2SV_ModEnd> 
81,"<S2SV_StartBug> if ( ! rta ) <S2SV_EndBug> <S2SV_StartBug> p = kmemdup ( up , xfrm_replay_state_esn_len ( up ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> pp = kmemdup ( up , xfrm_replay_state_esn_len ( up ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> * replay_esn = p ; <S2SV_EndBug> ","<S2SV_ModStart> int klen , ulen ; <S2SV_ModStart> klen = <S2SV_ModEnd> <S2SV_ModStart> ; ulen = nla_len ( rta ) >= klen ? klen : sizeof ( * up ) ; p = kzalloc ( klen <S2SV_ModStart> kzalloc ( klen <S2SV_ModEnd> <S2SV_ModStart> memcpy ( p , up , ulen ) ; memcpy ( pp , up , ulen ) ; "
82,<S2SV_StartBug> io -> io_cleanup = mem_cleanup ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> io -> io_cleanup = mem_cleanup ; 
83,<S2SV_StartBug> result = ( MagickRealType ) ( ( size_t ) pixel & ( size_t ) ( value + 0.5 ) ) ; <S2SV_EndBug> <S2SV_StartBug> result = ( MagickRealType ) ( ( size_t ) pixel << ( size_t ) ( value + 0.5 ) ) ; <S2SV_EndBug> <S2SV_StartBug> result = ( MagickRealType ) ( ( size_t ) pixel | ( size_t ) ( value + 0.5 ) ) ; <S2SV_EndBug> <S2SV_StartBug> result = ( MagickRealType ) ( ( size_t ) pixel >> ( size_t ) ( value + 0.5 ) ) ; <S2SV_EndBug> <S2SV_StartBug> result = ( MagickRealType ) ( ( size_t ) pixel ^ ( size_t ) ( value + 0.5 ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> ssize_t <S2SV_ModEnd> <S2SV_ModStart> ssize_t <S2SV_ModEnd> <S2SV_ModStart> ssize_t <S2SV_ModEnd> <S2SV_ModStart> ssize_t <S2SV_ModEnd> <S2SV_ModStart> ssize_t <S2SV_ModEnd> <S2SV_ModStart> ssize_t <S2SV_ModEnd> <S2SV_ModStart> ssize_t <S2SV_ModEnd> <S2SV_ModStart> ssize_t <S2SV_ModEnd> <S2SV_ModStart> ssize_t <S2SV_ModEnd> <S2SV_ModStart> ssize_t <S2SV_ModEnd> 
84,<S2SV_StartBug> btif_config_flush ( ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( is_restricted_mode ( ) ) { BTIF_TRACE_WARNING ( ""%s:<S2SV_blank>\'%s\'<S2SV_blank>pairing<S2SV_blank>will<S2SV_blank>be<S2SV_blank>removed<S2SV_blank>if<S2SV_blank>unrestricted"" , __func__ , bdstr ) ; btif_config_set_int ( bdstr , ""Restricted"" , 1 ) ; } "
85,"<S2SV_StartBug> if ( ! ( buf = jas_alloc2 ( bufsize , sizeof ( jpc_fix_t ) ) ) ) { <S2SV_EndBug> ","<S2SV_ModStart> jas_alloc3 ( bufsize , numcols <S2SV_ModEnd> "
86,<S2SV_StartBug> vpx_codec_enc_cfg_map_t * map ; <S2SV_EndBug> <S2SV_StartBug> for ( map = iface -> enc . cfg_maps ; map -> usage >= 0 ; map ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> ; int i <S2SV_ModStart> i = 0 ; i < iface -> enc . cfg_map_count ; ++ i ) { <S2SV_ModStart> + i ; <S2SV_ModEnd> 
87,"<S2SV_StartBug> netdev_dbg ( vif -> dev , ""GSO<S2SV_blank>size<S2SV_blank>must<S2SV_blank>not<S2SV_blank>be<S2SV_blank>zero.\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , ""Bad<S2SV_blank>GSO<S2SV_blank>type<S2SV_blank>%d.\\n"" , gso -> u . gso . type ) ; <S2SV_EndBug> ",<S2SV_ModStart> netdev_err <S2SV_ModEnd> <S2SV_ModStart> ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> netdev_err <S2SV_ModEnd> <S2SV_ModStart> ) ; netbk_fatal_tx_err ( vif 
88,"<S2SV_StartBug> static void show_object ( struct object * object , struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , void * data ) <S2SV_EndBug> <S2SV_StartBug> if ( bitmap_pos < 0 ) { <S2SV_EndBug> <S2SV_StartBug> free ( name ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
89,"<S2SV_StartBug> run_cmd ( tty_fd , xfr_cmd , fname , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
90,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> snd_usb_mixer_disconnect ( mixer ) ; 
91,"<S2SV_StartBug> struct packet_sock * po = pkt_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! po -> running ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> return - EALREADY ; <S2SV_EndBug> <S2SV_StartBug> po -> rollover = kzalloc ( sizeof ( * po -> rollover ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! po -> rollover ) <S2SV_EndBug> <S2SV_StartBug> atomic_long_set ( & po -> rollover -> num , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> atomic_long_set ( & po -> rollover -> num_huge , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> atomic_long_set ( & po -> rollover -> num_failed , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & fanout_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> if ( err ) { <S2SV_EndBug> ",<S2SV_ModStart> packet_rollover * rollover = NULL ; struct <S2SV_ModStart> mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; <S2SV_ModStart> goto out ; err = - EALREADY <S2SV_ModEnd> <S2SV_ModStart> goto out <S2SV_ModEnd> <S2SV_ModStart> err = - ENOMEM ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rollover ) goto out <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> po -> rollover = rollover ; } <S2SV_ModEnd> <S2SV_ModStart> if ( err && rollover ) { kfree ( rollover ) ; po -> rollover = NULL ; } <S2SV_ModStart>  <S2SV_ModEnd> 
92,"<S2SV_StartBug> memcpy ( newnp , np , sizeof ( struct ipv6_pinfo ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; newnp -> ipv6_mc_list = NULL ; newnp -> ipv6_ac_list = NULL ; newnp -> ipv6_fl_list = NULL 
93,<S2SV_StartBug> return NULL ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( table ) ; 
94,"<S2SV_StartBug> void show_progress ( int frame_in , int frame_out , uint64_t dx_time ) { <S2SV_EndBug> ",<S2SV_ModStart> static 
95,<S2SV_StartBug> buffer -> buffer = ( char * ) fbh -> data ; <S2SV_EndBug> ,<S2SV_ModStart> buffer = ( char * ) fbh -> data ; imp_sth -> stmt -> bind [ i ] . buffer_length = fbh -> length ; imp_sth -> stmt -> bind [ i ] . 
96,"<S2SV_StartBug> enc28j60SetBit ( interface , ENC28J60_REG_ECON1 , ECON1_TXRST ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60ClearBit ( interface , ENC28J60_REG_ECON1 , ECON1_TXRST ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60ClearBit ( interface , ENC28J60_REG_EIR , EIR_TXIF | EIR_TXERIF ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ETXSTH , MSB ( ENC28J60_TX_BUFFER_START ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EWRPTL , LSB ( ENC28J60_TX_BUFFER_START ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EWRPTH , MSB ( ENC28J60_TX_BUFFER_START ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ETXNDL , LSB ( ENC28J60_TX_BUFFER_START + length ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ETXNDH , MSB ( ENC28J60_TX_BUFFER_START + length ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60SetBit ( interface , ENC28J60_REG_ECON1 , ECON1_TXRTS ) ; <S2SV_EndBug> ","<S2SV_ModStart> ENC28J60_ECON1 , ENC28J60_ECON1_TXRST <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_ECON1 , ENC28J60_ECON1_TXRST <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EIR , ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60WriteReg ( interface , ENC28J60_ETXSTL <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_ETXSTH <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EWRPTL <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EWRPTH <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_ETXNDL <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_ETXNDH <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_ECON1 , ENC28J60_ECON1_TXRTS <S2SV_ModEnd> "
97,<S2SV_StartBug> value = ast2obj_int ( o -> lineno ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ast2obj_string ( o -> type_comment ) ; if ( ! value ) goto failed ; if ( _PyObject_SetAttrId ( result , & PyId_type_comment , value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = "
98,"<S2SV_StartBug> if ( page && ( access ( page , R_OK ) == 0 ) ) <S2SV_EndBug> <S2SV_StartBug> file_write ( page , wikitext ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( page && ( unlink ( page ) > 0 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( page && ( access ( page , R_OK ) == 0 ) ) <S2SV_EndBug> ",<S2SV_ModStart> page_name_is_good ( page ) && <S2SV_ModStart> if ( page_name_is_good ( page ) ) { <S2SV_ModStart> } <S2SV_ModStart> page_name_is_good ( page ) && <S2SV_ModStart> && page_name_is_good ( page ) 
99,"<S2SV_StartBug> if ( flags == EXT4_GET_BLOCKS_PRE_IO ) { <S2SV_EndBug> <S2SV_StartBug> ext4_set_inode_state ( inode , EXT4_STATE_DIO_UNWRITTEN ) ; <S2SV_EndBug> <S2SV_StartBug> if ( flags == EXT4_GET_BLOCKS_CONVERT ) { <S2SV_EndBug> ",<S2SV_ModStart> ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> 
100,"<S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 
101,"<S2SV_StartBug> if ( ! caller_is_in_ancestor ( fc -> pid , controller , cgroup , NULL ) ) { <S2SV_EndBug> ","<S2SV_ModStart> caller_may_see_dir ( fc -> pid , controller , cgroup ) ) { ret = - ENOENT ; goto out ; } if ( ! "
102,"<S2SV_StartBug> int flag ) <S2SV_EndBug> <S2SV_StartBug> int mb_rows = source -> y_width >> 4 ; <S2SV_EndBug> <S2SV_StartBug> int mb_cols = source -> y_height >> 4 ; <S2SV_EndBug> <S2SV_StartBug> int mbr , mbc ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( limits , ( unsigned char ) ppl , 16 * mb_cols ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_post_proc_down_and_across_mb_row ( <S2SV_EndBug> <S2SV_StartBug> source -> uv_stride , source -> uv_stride , source -> uv_width , limits , 8 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , int uvfilter ) { int mbr ; <S2SV_ModEnd> <S2SV_ModStart> cm -> mb_rows <S2SV_ModEnd> <S2SV_ModStart> cm -> mb_cols <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> if ( uvfilter == 1 ) { <S2SV_ModStart> 8 ) ; } <S2SV_ModEnd> "
103,"<S2SV_StartBug> ret = copy_to_user ( param , ptr , sizeof ( * ptr ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct floppy_raw_cmd cmd = * ptr ; cmd . next = NULL ; cmd . kernel_data = NULL ; <S2SV_ModStart> & cmd <S2SV_ModEnd> <S2SV_ModStart> cmd <S2SV_ModEnd> 
104,<S2SV_StartBug> if ( ( new -> euid != old -> uid || <S2SV_EndBug> ,"<S2SV_ModStart> ! cap_issubset ( new -> cap_permitted , old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if ( "
105,"<S2SV_StartBug> ext4_xattr_cache_insert ( struct mb_cache * ext4_mb_cache , struct buffer_head * bh ) <S2SV_EndBug> <S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_alloc ( ext4_mb_cache , GFP_NOFS ) ; <S2SV_EndBug> <S2SV_StartBug> error = mb_cache_entry_insert ( ce , bh -> b_bdev , bh -> b_blocknr , hash ) ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_free ( ce ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error == - EBUSY ) { <S2SV_EndBug> <S2SV_StartBug> error = 0 ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_release ( ce ) ; <S2SV_EndBug> ","<S2SV_ModStart> mb2_cache <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> error = mb2_cache_entry_create <S2SV_ModEnd> <S2SV_ModStart> , hash , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
106,"<S2SV_StartBug> return r_socket_http_answer ( s , code , rlen ) ; <S2SV_EndBug> ","<S2SV_ModStart> socket_http_answer <S2SV_ModEnd> <S2SV_ModStart> , 0 "
107,"<S2SV_StartBug> tf = ( ( c == LUA_SIGNATURE [ 0 ] ) ? luaU_undump : luaY_parser ) ( L , p -> z , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
108,<S2SV_StartBug> int err ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL 
109,"<S2SV_StartBug> int ip_options_get_from_user ( struct net * net , struct ip_options * * optp , <S2SV_EndBug> <S2SV_StartBug> struct ip_options * opt = ip_options_get_alloc ( optlen ) ; <S2SV_EndBug> <S2SV_StartBug> if ( optlen && copy_from_user ( opt -> __data , data , optlen ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> opt . 
110,"<S2SV_StartBug> dl = kmalloc ( size , GFP_KERNEL ) ; <S2SV_EndBug> ",<S2SV_ModStart> kzalloc <S2SV_ModEnd> 
111,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>[|truncated]"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , rpl_tstr <S2SV_ModEnd> "
112,"<S2SV_StartBug> static int <S2SV_EndBug> <S2SV_StartBug> rpki_rtr_pdu_print ( netdissect_options * ndo , const u_char * tptr , u_int indent ) <S2SV_EndBug> <S2SV_StartBug> pdu_header = ( const rpki_rtr_pdu * ) tptr ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , pdu_len ) ; <S2SV_EndBug> <S2SV_StartBug> pdu_type , pdu_len ) ) ; <S2SV_EndBug> <S2SV_StartBug> case RPKI_RTR_END_OF_DATA_PDU : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case RPKI_RTR_CACHE_RESPONSE_PDU : <S2SV_EndBug> <S2SV_StartBug> pdu = ( const rpki_rtr_pdu_ipv4_prefix * ) tptr ; <S2SV_EndBug> <S2SV_StartBug> pdu = ( const rpki_rtr_pdu_ipv6_prefix * ) tptr ; <S2SV_EndBug> <S2SV_StartBug> pdu = ( const rpki_rtr_pdu_error_report * ) tptr ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , encapsulated_pdu_length ) ; <S2SV_EndBug> <S2SV_StartBug> tptr += sizeof ( * pdu ) ; <S2SV_EndBug> <S2SV_StartBug> if ( encapsulated_pdu_length && <S2SV_EndBug> <S2SV_StartBug> if ( rpki_rtr_pdu_print ( ndo , tptr , indent + 2 ) ) <S2SV_EndBug> <S2SV_StartBug> tlen -= encapsulated_pdu_length ; <S2SV_EndBug> <S2SV_StartBug> text_length = 0 ; <S2SV_EndBug> <S2SV_StartBug> text_length = EXTRACT_32BITS ( tptr ) ; <S2SV_EndBug> <S2SV_StartBug> tlen -= 4 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , text_length ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> ","<S2SV_ModStart> u_int <S2SV_ModEnd> <S2SV_ModStart> const u_int len , const u_char recurse , const <S2SV_ModStart> ND_TCHECK_8BITS ( tptr ) ; if ( * tptr != 0 ) { ND_PRINT ( ( ndo , ""%sRPKI-RTRv%u<S2SV_blank>(unknown)"" , indent_string ( 8 ) , * tptr ) ) ; return len ; } if ( len < sizeof ( rpki_rtr_pdu ) ) { ND_PRINT ( ( ndo , ""(%u<S2SV_blank>bytes<S2SV_blank>is<S2SV_blank>too<S2SV_blank>few<S2SV_blank>to<S2SV_blank>decode)"" , len ) ) ; goto invalid ; } ND_TCHECK2 ( * tptr , sizeof ( rpki_rtr_pdu ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( pdu_len < sizeof ( rpki_rtr_pdu ) || pdu_len > len ) goto invalid <S2SV_ModStart> if ( pdu_len != sizeof ( rpki_rtr_pdu ) + 4 ) goto invalid ; ND_TCHECK2 ( * tptr , pdu_len ) ; <S2SV_ModStart> if ( pdu_len != sizeof ( rpki_rtr_pdu ) ) goto invalid ; <S2SV_ModStart> if ( pdu_len != sizeof ( rpki_rtr_pdu ) ) goto invalid ; <S2SV_ModStart> if ( pdu_len != sizeof ( rpki_rtr_pdu ) + 12 ) goto invalid ; ND_TCHECK2 ( * tptr , pdu_len ) ; <S2SV_ModStart> if ( pdu_len != sizeof ( rpki_rtr_pdu ) + 24 ) goto invalid ; ND_TCHECK2 ( * tptr , pdu_len ) ; <S2SV_ModStart> tlen = sizeof ( rpki_rtr_pdu ) ; if ( pdu_len < tlen + 4 ) goto invalid ; ND_TCHECK2 ( * tptr , tlen + 4 ) ; <S2SV_ModStart> tlen += 4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) { if ( pdu_len < tlen + encapsulated_pdu_length ) goto invalid ; if ( ! recurse ) { ND_TCHECK2 ( * tptr , tlen + encapsulated_pdu_length ) ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> + tlen , encapsulated_pdu_length , 0 <S2SV_ModStart> ; } tlen <S2SV_ModEnd> <S2SV_ModStart> } if ( pdu_len < tlen + 4 ) goto invalid ; ND_TCHECK2 ( * tptr , tlen + 4 ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> + tlen ) ; tlen <S2SV_ModEnd> <S2SV_ModStart> if ( text_length ) { if ( pdu_len < tlen + text_length ) goto invalid ; ND_PRINT ( ( ndo , ""%sError<S2SV_blank>text:<S2SV_blank>"" , indent_string ( indent + 2 ) ) ) ; if ( fn_printn ( ndo , tptr + tlen , text_length , ndo -> ndo_snapend ) ) goto trunc ; } } break ; default : <S2SV_ModEnd> <S2SV_ModStart> pdu_len ) ; <S2SV_ModEnd> <S2SV_ModStart> pdu_len ; invalid : ND_PRINT ( ( ndo , ""%s"" , istr ) ) ; ND_TCHECK2 ( * tptr , len ) ; return len <S2SV_ModEnd> <S2SV_ModStart> ND_PRINT ( ( ndo , ""\\n\\t%s"" , tstr ) ) ; return len <S2SV_ModEnd> "
113,"<S2SV_StartBug> int n , len ; <S2SV_EndBug> <S2SV_StartBug> memset ( & facilities , 0x00 , sizeof ( struct rose_facilities_struct ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! rose_parse_facilities ( skb -> data + len + 4 , & facilities ) ) { <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ROSE_CALL_REQ_FACILITIES_OFF , skb -> len - ROSE_CALL_REQ_FACILITIES_OFF , <S2SV_ModEnd> "
114,<S2SV_StartBug> addr . sin_addr . s_addr = htonl ( INADDR_ANY ) ; <S2SV_EndBug> ,<S2SV_ModStart> INADDR_LOOPBACK <S2SV_ModEnd> 
115,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( ! gui_mch_set_rendering_options ( p_rop ) ) <S2SV_EndBug> ,<S2SV_ModStart> if ( ! valid_filetype ( * varp ) ) errmsg = e_invarg ; else <S2SV_ModStart> ) ) errmsg = e_invarg ; } # endif # ifdef FEAT_AUTOCMD else if ( gvarp == & p_ft ) { if ( ! valid_filetype ( * varp ) ) errmsg = e_invarg ; } # endif # ifdef FEAT_SYN_HL else if ( gvarp == & p_syn ) { if ( ! valid_filetype ( * varp 
116,"<S2SV_StartBug> ret = posix_acl_equiv_mode ( acl , & new_mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode , & new_mode , & acl ) ; if ( ret ) goto out <S2SV_ModEnd> "
117,<S2SV_StartBug> struct o2nm_cluster * cluster = to_o2nm_cluster_from_node ( node ) ; <S2SV_EndBug> <S2SV_StartBug> ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ret ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if ( ! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> o2nm_unlock_subsystem ( ) ; 
118,"<S2SV_StartBug> isoclns_print ( ndo , p , length , caplen ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
119,<S2SV_StartBug> separator = * src ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive , ARCHIVE_ERRNO_MISC , ""Path<S2SV_blank>is<S2SV_blank>absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> "
120,"<S2SV_StartBug> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context , TPMI_ALG_HASH hashAlg , <S2SV_EndBug> <S2SV_StartBug> TPM2B_DIGEST tmpResult ; <S2SV_EndBug> <S2SV_StartBug> TPM_RC rval ; <S2SV_EndBug> <S2SV_StartBug> while ( resultKey -> t . size < bytes ) <S2SV_EndBug> <S2SV_StartBug> i_Swizzled = string_bytes_endian_convert_32 ( i ) ; <S2SV_EndBug> <S2SV_StartBug> bufferList [ j ++ ] = ( TPM2B_DIGEST * ) 0 ; <S2SV_EndBug> <S2SV_StartBug> rval = tpm_hmac ( sapi_context , hashAlg , key , ( TPM2B * * ) & ( bufferList [ 0 ] ) , & tmpResult ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rval != TPM_RC_SUCCESS ) <S2SV_EndBug> <S2SV_StartBug> return TSS2_SYS_RC_BAD_VALUE ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = TPM_RC_SUCCESS <S2SV_ModStart> const EVP_MD * md = tpm_algorithm_to_openssl_digest ( hashAlg ) ; if ( ! md ) { LOG_ERR ( ""Algorithm<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>for<S2SV_blank>hmac:<S2SV_blank>%x"" , hashAlg ) ; return TPM_RC_HASH ; } HMAC_CTX ctx ; HMAC_CTX_init ( & ctx ) ; int rc = HMAC_Init_ex ( & ctx , key -> buffer , key -> size , md , NULL ) ; if ( ! rc ) { LOG_ERR ( ""HMAC<S2SV_blank>Init<S2SV_blank>failed:<S2SV_blank>%s"" , ERR_error_string ( rc , NULL ) ) ; return TPM_RC_MEMORY ; } <S2SV_ModStart> TPM2B_DIGEST tmpResult ; <S2SV_ModStart> ] = ( TPM2B_DIGEST * ) 0 ; int c ; for ( c = 0 ; c < j ; c ++ ) { TPM2B_DIGEST * digest = bufferList [ c ] ; int rc = HMAC_Update ( & ctx , digest -> b . buffer , digest -> b . size ) ; if ( ! rc ) { LOG_ERR ( ""HMAC<S2SV_blank>Update<S2SV_blank>failed:<S2SV_blank>%s"" , ERR_error_string ( rc , NULL ) ) <S2SV_ModEnd> <S2SV_ModStart> TPM_RC_MEMORY ; goto err ; } } unsigned size = sizeof ( tmpResult . t . buffer ) ; int rc = HMAC_Final ( & ctx , tmpResult . t . buffer , & size <S2SV_ModEnd> <S2SV_ModStart> ! rc ) { LOG_ERR ( ""HMAC<S2SV_blank>Final<S2SV_blank>failed:<S2SV_blank>%s"" , ERR_error_string ( rc , NULL ) ) ; rval = TPM_RC_MEMORY ; goto err ; } tmpResult . t . size = size ; <S2SV_ModEnd> <S2SV_ModStart> rval = TSS2_SYS_RC_BAD_VALUE ; goto err ; } } resultKey -> t . size = bytes ; err : HMAC_CTX_cleanup ( & ctx ) ; return rval <S2SV_ModEnd> "
121,"<S2SV_StartBug> cmpt = 0 ; <S2SV_EndBug> <S2SV_StartBug> ! jas_safe_intfast32_add ( tly , height , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! jas_safe_size_mul ( cmpt -> width_ , cmpt -> height_ , & size ) || <S2SV_EndBug> ","<S2SV_ModStart> JAS_DBGLOG ( 100 , ( ""jas_image_cmpt_create(%ld,<S2SV_blank>%ld,<S2SV_blank>%ld,<S2SV_blank>%ld,<S2SV_blank>%ld,<S2SV_blank>%ld,<S2SV_blank>%d,<S2SV_blank>%d,<S2SV_blank>%d)\\n"" , JAS_CAST ( long , tlx ) , JAS_CAST ( long , tly ) , JAS_CAST ( long , hstep ) , JAS_CAST ( long , vstep ) , JAS_CAST ( long , width ) , JAS_CAST ( long , height ) , JAS_CAST ( int , depth ) , sgnd , inmem ) ) ; <S2SV_ModStart> , 0 ) ) { goto error ; } if ( ! jas_safe_intfast32_mul3 ( width , height , depth <S2SV_ModStart> jas_safe_size_mul3 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
122,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( s == 0 ) return ( ( void * ) NULL ) ; 
123,<S2SV_StartBug> if ( count < sizeof ( cmd . type ) ) { <S2SV_EndBug> ,<S2SV_ModStart> WARN_ON_ONCE ( ! ib_safe_file_access ( fp ) ) ) return - EACCES ; if ( 
124,<S2SV_StartBug> MinVal = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> ( void ) ResetMagickMemory ( BImgBuff , 0 , ldblk * sizeof ( double ) ) ; "
125,<S2SV_StartBug> get_net ( peer ) ; <S2SV_EndBug> ,<S2SV_ModStart> peer = maybe_get_net <S2SV_ModEnd> 
126,<S2SV_StartBug> while ( header_buf [ i ] == '\\r' || header_buf [ i ] == '\\n' ) <S2SV_EndBug> ,<S2SV_ModStart> ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ) 
127,<S2SV_StartBug> assert ( proto != LLDP_MGMT_ADDR_NONE ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> 
128,<S2SV_StartBug> dp == datalen ) { <S2SV_EndBug> ,<S2SV_ModStart> ( op & ASN1_OP_MATCH__SKIP && <S2SV_ModStart> ) 
129,"<S2SV_StartBug> list_add_tail ( & sp -> auto_asconf_list , <S2SV_EndBug> <S2SV_StartBug> sp -> do_auto_asconf = 1 ; <S2SV_EndBug> <S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> sp -> do_auto_asconf = 0 ; <S2SV_EndBug> ",<S2SV_ModStart> spin_lock ( & sock_net ( sk ) -> sctp . addr_wq_lock ) ; <S2SV_ModStart> ; spin_unlock ( & sock_net ( sk ) -> sctp . addr_wq_lock ) <S2SV_ModStart> { <S2SV_ModStart> } 
130,"<S2SV_StartBug> static int mpeg4_decode_profile_level ( MpegEncContext * s , GetBitContext * gb ) <S2SV_EndBug> <S2SV_StartBug> s -> avctx -> level = get_bits ( gb , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { <S2SV_EndBug> <S2SV_StartBug> s -> avctx -> level = 0 ; <S2SV_EndBug> ","<S2SV_ModStart> , int * profile , int * level ) { * <S2SV_ModEnd> <S2SV_ModStart> * <S2SV_ModEnd> <S2SV_ModStart> * <S2SV_ModEnd> <S2SV_ModStart> * <S2SV_ModEnd> <S2SV_ModStart> * <S2SV_ModEnd> "
131,"<S2SV_StartBug> spin_lock_irqsave ( & mpu -> input_lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> while ( readw ( mpu -> dev -> MIDQ + JQS_wTail ) != <S2SV_EndBug> <S2SV_StartBug> wTmp = readw ( mpu -> dev -> MIDQ + JQS_wHead ) + 1 ; <S2SV_EndBug> ","<S2SV_ModStart> u16 head , tail , size ; <S2SV_ModStart> head = readw ( mpu -> dev -> MIDQ + JQS_wHead ) ; tail = readw ( mpu -> dev -> MIDQ + JQS_wTail ) ; size = readw ( mpu -> dev -> MIDQ + JQS_wSize ) ; if ( head > size || tail > size ) goto out ; while ( head != tail ) { unsigned char val = readw ( pwMIDQData + 2 * head ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER , & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input , & val <S2SV_ModEnd> <S2SV_ModStart> if ( ++ head > size ) head = 0 ; writew ( head , <S2SV_ModEnd> <S2SV_ModStart> ; } out : <S2SV_ModEnd> "
132,<S2SV_StartBug> return result ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! entry -> lsm [ lsm_rule ] . rule ) return - EINVAL ; 
133,<S2SV_StartBug> file_sb_list_del ( file ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
134,<S2SV_StartBug> passert ( GLOBALS_ARE_RESET ( ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
135,"<S2SV_StartBug> ""<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>timerID<S2SV_blank>=<S2SV_blank>setInterval(\'checkSession()\',<S2SV_blank>%s);\\n"" <S2SV_EndBug> <S2SV_StartBug> if ( s_poll_interval == NULL ) <S2SV_EndBug> <S2SV_StartBug> session_state , op_iframe_id , s_poll_interval , redirect_uri , <S2SV_EndBug> ","<S2SV_ModStart> ""<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>timerID<S2SV_blank>=<S2SV_blank>setInterval(\'checkSession()\',<S2SV_blank>%d);\\n"" <S2SV_ModEnd> <S2SV_ModStart> int poll_interval = s_poll_interval ? strtol ( s_poll_interval , NULL , 10 ) : 0 ; if ( ( poll_interval <= 0 ) || ( poll_interval > 3600 * 24 ) ) poll_interval = 3000 <S2SV_ModEnd> <S2SV_ModStart> poll_interval <S2SV_ModEnd> "
136,"<S2SV_StartBug> size_t * acl_len ) <S2SV_EndBug> <S2SV_StartBug> __be32 * savep ; <S2SV_EndBug> <S2SV_StartBug> * acl_len = 0 ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; <S2SV_EndBug> <S2SV_StartBug> dprintk ( ""NFS:<S2SV_blank>server<S2SV_blank>cheating<S2SV_blank>in<S2SV_blank>getattr"" <S2SV_EndBug> <S2SV_StartBug> * acl_len = attrlen ; <S2SV_EndBug> ","<S2SV_ModStart> struct nfs_getaclres * res <S2SV_ModEnd> <S2SV_ModStart> , * bm_p <S2SV_ModStart> res -> <S2SV_ModEnd> <S2SV_ModStart> ; bm_p = xdr -> p <S2SV_ModStart> xdr -> p = bm_p ; res -> acl_data_offset = be32_to_cpup ( bm_p ) + 2 ; res -> acl_data_offset <<= 2 ; <S2SV_ModStart> ; attrlen += res -> acl_data_offset <S2SV_ModStart> if ( res -> acl_flags & NFS4_ACL_LEN_REQUEST ) { res -> acl_len = attrlen ; goto out ; } dprintk ( ""NFS:<S2SV_blank>acl<S2SV_blank>reply:<S2SV_blank>attrlen<S2SV_blank>%u<S2SV_blank>><S2SV_blank>recvd<S2SV_blank>%u\\n"" <S2SV_ModEnd> <S2SV_ModStart> res -> <S2SV_ModEnd> "
137,<S2SV_StartBug> nexthdr = * prevhdr ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; 
138,<S2SV_StartBug> while ( ( tmpName [ i ] != 0 ) && ( i < to_read ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( i < to_read ) && <S2SV_ModStart>  <S2SV_ModEnd> 
139,"<S2SV_StartBug> long rem ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & rem ) ; <S2SV_EndBug> ",<S2SV_ModStart> u32 <S2SV_ModEnd> <S2SV_ModStart> div_u64_rem <S2SV_ModEnd> 
140,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && in -> linesize [ plane ] 
141,"<S2SV_StartBug> strncpy ( szFileName , sizeof ( szFileName ) - 5 , pszFileName ) ; <S2SV_EndBug> ","<S2SV_ModStart> pszFileName , <S2SV_ModStart>  <S2SV_ModEnd> "
142,"<S2SV_StartBug> owner = stok ( auth , "":"" , & tok ) ; <S2SV_EndBug> <S2SV_StartBug> group = stok ( tok , "":"" , & perms ) ; <S2SV_EndBug> ",<S2SV_ModStart> ssplit <S2SV_ModEnd> <S2SV_ModStart> ssplit <S2SV_ModEnd> 
143,"<S2SV_StartBug> q = ( const uint8_t * ) ( const void * ) <S2SV_EndBug> <S2SV_StartBug> CDF_GETUINT32 ( p , ( i << 1 ) + 1 ) ) - 2 * sizeof ( uint32_t ) ; <S2SV_EndBug> <S2SV_StartBug> DPRINTF ( ( ""%"" SIZE_T_FORMAT ""u)<S2SV_blank>id=%x<S2SV_blank>type=%x<S2SV_blank>offs=0x%tx,0x%x\\n"" , i , <S2SV_EndBug> <S2SV_StartBug> CDF_GETUINT32 ( p , ( i << 1 ) + 1 ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t ofs = CDF_GETUINT32 ( p , ( i << 1 ) + 1 ) ; <S2SV_ModStart> ofs <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> i , <S2SV_ModEnd> <S2SV_ModStart> offs <S2SV_ModEnd> "
144,<S2SV_StartBug> if ( inet -> opt && inet -> opt -> srr ) <S2SV_EndBug> ,"<S2SV_ModStart> struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt , sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt . srr ) daddr = inet_opt -> opt . <S2SV_ModEnd> "
145,"<S2SV_StartBug> pr_err ( ""Underflows<S2SV_blank>must<S2SV_blank>be<S2SV_blank>unconditional<S2SV_blank>and<S2SV_blank>"" <S2SV_EndBug> ",<S2SV_ModStart> pr_debug <S2SV_ModEnd> 
146,"<S2SV_StartBug> tlen = len - sizeof ( struct eigrp_common_header ) ; <S2SV_EndBug> <S2SV_StartBug> tlv_tptr = tptr + sizeof ( struct eigrp_tlv_header ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>holdtime:<S2SV_blank>%us,<S2SV_blank>k1<S2SV_blank>%u,<S2SV_blank>k2<S2SV_blank>%u,<S2SV_blank>k3<S2SV_blank>%u,<S2SV_blank>k4<S2SV_blank>%u,<S2SV_blank>k5<S2SV_blank>%u"" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IOS<S2SV_blank>version:<S2SV_blank>%u.%u,<S2SV_blank>EIGRP<S2SV_blank>version<S2SV_blank>%u.%u"" , <S2SV_EndBug> <S2SV_StartBug> bit_length = tlv_ptr . eigrp_tlv_ip_int -> plen ; <S2SV_EndBug> <S2SV_StartBug> bit_length = tlv_ptr . eigrp_tlv_ip_ext -> plen ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Cable-range:<S2SV_blank>%u-%u,<S2SV_blank>Router-ID<S2SV_blank>%u"" , <S2SV_EndBug> <S2SV_StartBug> tlv_ptr . eigrp_tlv_at_int = ( const struct eigrp_tlv_at_int_t * ) tlv_tptr ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Cable-Range:<S2SV_blank>%u-%u,<S2SV_blank>nexthop:<S2SV_blank>"" , <S2SV_EndBug> ","<S2SV_ModStart> if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo , ""EIGRP<S2SV_blank>%s,<S2SV_blank>length:<S2SV_blank>%u<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)"" , tok2str ( eigrp_opcode_values , ""unknown<S2SV_blank>(%u)"" , eigrp_com_header -> opcode ) , len , ( u_int ) sizeof ( struct eigrp_common_header ) ) ) ; return ; } <S2SV_ModStart> if ( eigrp_tlv_len < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)"" , ( u_int ) sizeof ( struct eigrp_tlv_header ) ) ) ; break ; } <S2SV_ModStart> if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_general_parm ) ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)"" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_general_parm ) ) ) ) ; break ; } <S2SV_ModStart> if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_sw_version ) ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)"" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_sw_version ) ) ) ) ; break ; } <S2SV_ModStart> if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_ip_int ) ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)"" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_ip_int ) ) ) ) ; break ; } <S2SV_ModStart> if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_ip_ext ) ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)"" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_ip_ext ) ) ) ) ; break ; } <S2SV_ModStart> if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_at_cable_setup ) ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)"" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_at_cable_setup ) ) ) ) ; break ; } <S2SV_ModStart> if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_at_int ) ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)"" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_at_int ) ) ) ) ; break ; } <S2SV_ModStart> if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_at_ext ) ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)"" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_at_ext ) ) ) ) ; break ; } "
147,<S2SV_StartBug> # if CONFIG_MEM_MANAGER <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart> addr = malloc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
148,"<S2SV_StartBug> int indexes = SQUASHFS_LOOKUP_BLOCKS ( sBlk . s . inodes ) ; <S2SV_EndBug> <S2SV_StartBug> long long export_index_table [ indexes ] ; <S2SV_EndBug> <S2SV_StartBug> res = read_fs_bytes ( fd , sBlk . s . lookup_table_start , <S2SV_EndBug> ","<S2SV_ModStart> ( long long ) sBlk . s . inodes ) ; int length = SQUASHFS_LOOKUP_BLOCK_BYTES ( ( long long ) <S2SV_ModStart> * export_index_table ; if ( length != ( * table_start - sBlk . s . lookup_table_start ) ) { ERROR ( ""parse_exports_table:<S2SV_blank>Bad<S2SV_blank>inode<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; return FALSE ; } export_index_table = alloc_index_table ( indexes ) <S2SV_ModEnd> <S2SV_ModStart> length , <S2SV_ModEnd> "
149,"<S2SV_StartBug> ptr = strchr ( ptr + 1 , '/' ) + 1 ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> 
150,<S2SV_StartBug> flags |= EXT4_GET_BLOCKS_PRE_IO ; <S2SV_EndBug> ,<S2SV_ModStart> if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ; 
151,"<S2SV_StartBug> ret = posix_acl_equiv_mode ( acl , & new_mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode , & new_mode , & acl ) ; if ( ret ) goto out <S2SV_ModEnd> "
152,"<S2SV_StartBug> else return apr_psprintf ( cmd -> pool , ""ModSecurity:<S2SV_blank>Invalid<S2SV_blank>value<S2SV_blank>for<S2SV_blank>SecRuleEngine:<S2SV_blank>%s"" , p1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""ModSecurity:<S2SV_blank>Invalid<S2SV_blank>value<S2SV_blank>for<S2SV_blank>SexHashEngine:<S2SV_blank>%s"" <S2SV_ModEnd> "
153,"<S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug> ","<S2SV_ModStart> rcu_read_lock ( ) ; <S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) , & final ) ; rcu_read_unlock ( <S2SV_ModEnd> "
154,"<S2SV_StartBug> uint16 nstrips = 0 , ntiles = 0 , planar = 0 ; <S2SV_EndBug> <S2SV_StartBug> read_buff = ( unsigned char * ) _TIFFmalloc ( buffsize + 3 ) ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ","<S2SV_ModStart> uint32 nstrips = 0 , ntiles = 0 ; uint16 <S2SV_ModEnd> <S2SV_ModStart> { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"" , ""Unable<S2SV_blank>to<S2SV_blank>allocate/reallocate<S2SV_blank>read<S2SV_blank>buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> } <S2SV_ModStart> if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"" , ""Unable<S2SV_blank>to<S2SV_blank>allocate/reallocate<S2SV_blank>read<S2SV_blank>buffer"" ) ; return ( - 1 ) ; } "
155,"<S2SV_StartBug> if ( 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( arg_match ( & arg , & stereo_mode , argi ) ) { <S2SV_EndBug> <S2SV_StartBug> config -> stereo_fmt = arg_parse_enum_or_int ( & arg ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( arg_match ( & arg , & resize_up_thresh , argi ) ) { <S2SV_EndBug> <S2SV_StartBug> config -> cfg . kf_mode = VPX_KF_DISABLED ; <S2SV_EndBug> <S2SV_StartBug> if ( config -> arg_ctrls [ j ] [ 0 ] == ctrl_args_map [ i ] ) <S2SV_EndBug> <S2SV_StartBug> assert ( j < ARG_CTRL_CNT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> if ( j < ARG_CTRL_CNT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> return eos_mark_found ; <S2SV_EndBug> ","<S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH int test_16bit_internal = 0 ; # endif <S2SV_ModStart> # if CONFIG_VP10_ENCODER } else if ( strcmp ( global -> codec -> name , ""vp10"" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif <S2SV_ModStart> arg_match ( & arg , & outputfile , argi ) ) { config -> out_fn = arg . val ; } else if ( arg_match ( & arg , & fpf_name , argi ) ) { config -> stats_fn = arg . val ; # if CONFIG_FP_MB_STATS } else if ( arg_match ( & arg , & fpmbf_name , argi ) ) { config -> fpmb_stats_fn = arg . val ; # endif } else if ( arg_match ( & arg , & use_webm , argi ) ) { # if CONFIG_WEBM_IO config -> write_webm = 1 ; # else die ( ""Error:<S2SV_blank>--webm<S2SV_blank>specified<S2SV_blank>but<S2SV_blank>webm<S2SV_blank>is<S2SV_blank>disabled."" ) ; # endif } else if ( arg_match ( & arg , & use_ivf , argi ) ) { config -> write_webm = 0 <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH } else if ( arg_match ( & arg , & bitdeptharg , argi ) ) { config -> cfg . g_bit_depth = arg_parse_enum_or_int ( & arg ) ; } else if ( arg_match ( & arg , & inbitdeptharg , argi ) ) { config -> cfg . g_input_bit_depth = arg_parse_uint ( & arg ) ; # endif # if CONFIG_WEBM_IO <S2SV_ModStart> # endif <S2SV_ModStart> resize_width , argi ) ) { config -> cfg . rc_scaled_width = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg , & resize_height , argi ) ) { config -> cfg . rc_scaled_height = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg , & <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH } else if ( arg_match ( & arg , & test16bitinternalarg , argi ) ) { if ( strcmp ( global -> codec -> name , ""vp9"" ) == 0 || strcmp ( global -> codec -> name , ""vp10"" ) == 0 ) { test_16bit_internal = 1 ; } # endif <S2SV_ModStart> ctrl_args_map != NULL && <S2SV_ModStart> ( int ) <S2SV_ModStart> ctrl_args_map != NULL && j < ( int ) <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( strcmp ( global -> codec -> name , ""vp9"" ) == 0 || strcmp ( global -> codec -> name , ""vp10"" ) == 0 ) { config -> use_16bit_internal = test_16bit_internal | ( config -> cfg . g_profile > 1 ) ; } # endif "
156,<S2SV_StartBug> || no_port_forwarding_flag || options . disable_forwarding ) { <S2SV_EndBug> ,<S2SV_ModStart> || ! use_privsep 
157,<S2SV_StartBug> dev -> netdev_ops = & l2tp_eth_netdev_ops ; <S2SV_EndBug> ,<S2SV_ModStart> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> 
158,<S2SV_StartBug> for ( ; offset < ( MagickOffsetType ) cin . file . image_offset ; offset ++ ) <S2SV_EndBug> ,"<S2SV_ModStart> if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError , ""InsufficientImageDataInFile"" ) ; "
159,"<S2SV_StartBug> if ( ( gr -> gr_ctx . value = mem_alloc ( sizeof ( gss_union_ctx_id_desc ) ) ) == NULL ) { <S2SV_EndBug> <S2SV_StartBug> memcpy ( gr -> gr_ctx . value , gd -> ctx , sizeof ( gss_union_ctx_id_desc ) ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""xxxx"" ; <S2SV_ModEnd> <S2SV_ModStart> length = 4 <S2SV_ModEnd> "
160,"<S2SV_StartBug> if ( ext_depth ( inode ) ) <S2SV_EndBug> <S2SV_StartBug> memmove ( bh -> b_data , EXT4_I ( inode ) -> i_data , <S2SV_EndBug> <S2SV_StartBug> sizeof ( EXT4_I ( inode ) -> i_data ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t ext_size = 0 ; <S2SV_ModStart> ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> ext_size ) ; memset ( bh -> b_data + ext_size , 0 , inode -> i_sb -> s_blocksize - ext_size <S2SV_ModEnd> "
161,"<S2SV_StartBug> if ( verify_checks ( c , preverify_ok , callback_ctx ) ) { <S2SV_EndBug> <S2SV_StartBug> ( void * ) ( - 1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( c -> opt -> option . client || c -> opt -> protocol ) <S2SV_EndBug> <S2SV_StartBug> if ( c -> opt -> redirect_addr . names ) <S2SV_EndBug> ",<S2SV_ModStart> return 1 ; if ( c -> opt -> option . client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr . names ) <S2SV_ModStart> NULL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
162,<S2SV_StartBug> int ret ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( current_chrooted ( ) ) return - EPERM 
163,"<S2SV_StartBug> if ( memcmp ( cmac , computed_cmac , AT91_AES_BLOCK_SIZE_BYTE ) ) <S2SV_EndBug> ",<S2SV_ModStart> ! consttime_memequal <S2SV_ModEnd> 
164,<S2SV_StartBug> if ( c -> nreslevels < s -> reduction_factor ) <S2SV_EndBug> <S2SV_StartBug> c -> nreslevels2decode = 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> <= <S2SV_ModEnd> <S2SV_ModStart> { av_log ( s -> avctx , AV_LOG_ERROR , ""reduction_factor<S2SV_blank>too<S2SV_blank>large<S2SV_blank>for<S2SV_blank>this<S2SV_blank>bitstream,<S2SV_blank>max<S2SV_blank>is<S2SV_blank>%d\\n"" , c -> nreslevels - 1 ) ; s -> reduction_factor = c -> nreslevels - 1 ; return AVERROR ( EINVAL ) ; } <S2SV_ModEnd> "
165,"<S2SV_StartBug> s_alDriver = Cvar_Get ( ""s_alDriver"" , ALDRIVER_DEFAULT , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> <S2SV_StartBug> s_alDevice = Cvar_Get ( ""s_alDevice"" , """" , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> ","<S2SV_ModStart> | CVAR_PROTECTED <S2SV_ModStart> if ( COM_CompareExtension ( s_alDriver -> string , "".pk3"" ) ) { Com_Printf ( ""Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\""%s\\"""" , s_alDriver -> string ) ; return qfalse ; } "
166,<S2SV_StartBug> bool is_drop_n_account = false ; <S2SV_EndBug> <S2SV_StartBug> if ( po -> has_vnet_hdr ) <S2SV_EndBug> <S2SV_StartBug> macoff = netoff - maclen ; <S2SV_EndBug> <S2SV_StartBug> if ( ( int ) snaplen < 0 ) <S2SV_EndBug> <S2SV_StartBug> snaplen = 0 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( po -> has_vnet_hdr ) { <S2SV_EndBug> ,<S2SV_ModStart> = false ; bool do_vnet <S2SV_ModStart> { <S2SV_ModStart> do_vnet = true ; } <S2SV_ModStart> { <S2SV_ModStart> do_vnet = false ; } <S2SV_ModStart> do_vnet = false ; <S2SV_ModStart> do_vnet <S2SV_ModEnd> 
167,<S2SV_StartBug> sctp_auth_key_put ( asoc -> asoc_shared_key ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
168,<S2SV_StartBug> return true ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else 
169,"<S2SV_StartBug> int lsm_set_label_at ( int procfd , int on_exec , char * lsm_label ) { <S2SV_EndBug> <S2SV_StartBug> int labelfd = - 1 ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> if ( on_exec ) { <S2SV_EndBug> <S2SV_StartBug> ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( write ( labelfd , command , size + 1 ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> SYSERROR ( ""Unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label"" ) ; <S2SV_EndBug> <S2SV_StartBug> ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( labelfd != - 1 ) <S2SV_EndBug> <S2SV_StartBug> close ( labelfd ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart> static <S2SV_ModStart> lsm_labelfd <S2SV_ModEnd> <S2SV_ModStart> { int fret <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return 0 <S2SV_ModEnd> <S2SV_ModStart> return 0 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lsm_labelfd <S2SV_ModEnd> <S2SV_ModStart> ""Unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label:<S2SV_blank>%s."" , command ) ; goto out ; } INFO ( ""Set<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>to:<S2SV_blank>%s."" , command ) ; } else if ( strcmp ( name , ""SELinux"" ) == 0 ) { if ( write ( lsm_labelfd , lsm_label , strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( <S2SV_ModStart> goto out ; } INFO ( ""Set<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>to:<S2SV_blank>%s."" , lsm_label ) ; } else <S2SV_ModEnd> <S2SV_ModStart> goto out ; } fret = 0 ; <S2SV_ModEnd> <S2SV_ModStart> lsm_labelfd <S2SV_ModEnd> <S2SV_ModStart> lsm_labelfd <S2SV_ModEnd> <S2SV_ModStart> fret <S2SV_ModEnd> "
170,<S2SV_StartBug> if ( ! ( ( pi -> y % ( OPJ_INT32 ) ( comp -> dy << rpy ) == 0 ) || ( ( pi -> y == pi -> ty0 ) && <S2SV_EndBug> ,<S2SV_ModStart> rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx ) != comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy ) != comp -> dy ) { continue ; } if ( 
171,"<S2SV_StartBug> struct pt_regs * regs , int nmi ) <S2SV_EndBug> <S2SV_StartBug> if ( perf_event_overflow ( event , nmi , & data , regs ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
172,"<S2SV_StartBug> # ifdef DISABLE_RC_LONG_TERM_MEM <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> common . frame_type == KEY_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> cpi -> twopass . gf_group_bits -= bits_used ; <S2SV_EndBug> <S2SV_StartBug> cpi -> twopass . gf_group_bits = MAX ( cpi -> twopass . gf_group_bits , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> TWO_PASS * const twopass = & cpi -> twopass ; RATE_CONTROL * const rc = & cpi -> rc ; const int bits_used = rc -> base_frame_target ; rc -> vbr_bits_off_target += rc -> base_frame_target - rc -> projected_frame_size ; twopass -> bits_left = MAX ( twopass -> bits_left - bits_used , 0 ) ; if ( rc -> total_actual_bits ) { rc -> rate_error_estimate = ( int ) ( ( rc -> vbr_bits_off_target * 100 ) / rc -> total_actual_bits ) ; rc -> rate_error_estimate = clamp ( rc -> rate_error_estimate , - 100 , 100 ) ; } else { rc -> rate_error_estimate = 0 ; } <S2SV_ModEnd> <S2SV_ModStart> != KEY_FRAME && ! vp9_is_upper_layer_key_frame ( cpi ) ) { twopass -> <S2SV_ModEnd> <S2SV_ModStart> twopass -> last_kfgroup_zeromotion_pct = twopass -> kf_zeromotion_pct ; } twopass -> kf_group_bits <S2SV_ModEnd> <S2SV_ModStart> twopass -> kf_group_bits <S2SV_ModEnd> <S2SV_ModStart> ++ twopass -> gf_group . index ; if ( ( cpi -> oxcf . rc_mode != VPX_Q ) && ( cpi -> twopass . gf_zeromotion_pct < VLOW_MOTION_THRESHOLD ) && ! cpi -> rc . is_src_frame_alt_ref ) { const int maxq_adj_limit = rc -> worst_quality - twopass -> active_worst_quality ; const int minq_adj_limit = ( cpi -> oxcf . rc_mode == VPX_CQ ? MINQ_ADJ_LIMIT_CQ : MINQ_ADJ_LIMIT ) ; if ( rc -> rate_error_estimate > cpi -> oxcf . under_shoot_pct ) { -- twopass -> extend_maxq ; if ( rc -> rolling_target_bits >= rc -> rolling_actual_bits ) ++ twopass -> extend_minq ; } else if ( rc -> rate_error_estimate < - cpi -> oxcf . over_shoot_pct ) { -- twopass -> extend_minq ; if ( rc -> rolling_target_bits < rc -> rolling_actual_bits ) ++ twopass -> extend_maxq ; } else { if ( rc -> projected_frame_size > ( 2 * rc -> base_frame_target ) && rc -> projected_frame_size > ( 2 * rc -> avg_frame_bandwidth ) ) ++ twopass -> extend_maxq ; if ( rc -> rolling_target_bits < rc -> rolling_actual_bits ) -- twopass -> extend_minq ; else if ( rc -> rolling_target_bits > rc -> rolling_actual_bits ) -- twopass -> extend_maxq ; } twopass -> extend_minq = clamp ( twopass -> extend_minq , 0 , minq_adj_limit ) ; twopass -> extend_maxq = clamp ( twopass -> extend_maxq , 0 , maxq_adj_limit ) ; if ( ! frame_is_kf_gf_arf ( cpi ) && ! cpi -> rc . is_src_frame_alt_ref ) { int fast_extra_thresh = rc -> base_frame_target / HIGH_UNDERSHOOT_RATIO ; if ( rc -> projected_frame_size < fast_extra_thresh ) { rc -> vbr_bits_off_target_fast += fast_extra_thresh - rc -> projected_frame_size ; rc -> vbr_bits_off_target_fast = MIN ( rc -> vbr_bits_off_target_fast , ( 4 * rc -> avg_frame_bandwidth ) ) ; if ( rc -> avg_frame_bandwidth ) { twopass -> extend_minq_fast = ( int ) ( rc -> vbr_bits_off_target_fast * 8 / rc -> avg_frame_bandwidth ) ; } twopass -> extend_minq_fast = MIN ( twopass -> extend_minq_fast , minq_adj_limit - twopass -> extend_minq ) ; } else if ( rc -> vbr_bits_off_target_fast ) { twopass -> extend_minq_fast = MIN ( twopass -> extend_minq_fast , minq_adj_limit - twopass -> extend_minq ) ; } else { twopass -> extend_minq_fast = 0 ; } } } <S2SV_ModEnd> "
173,<S2SV_StartBug> num ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>levels<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , num , ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) ) "
174,"<S2SV_StartBug> struct mb_cache_entry * * pce ) <S2SV_EndBug> <S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> again : <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_find_first ( ext4_mb_cache , inode -> i_sb -> s_bdev , <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( ce ) ) { <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_find_next ( ce , inode -> i_sb -> s_bdev , hash ) ; <S2SV_EndBug> ","<S2SV_ModStart> mb2_cache_entry <S2SV_ModEnd> <S2SV_ModStart> mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> <S2SV_ModStart> ce = mb2_cache_entry_find_first <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mb2_cache_entry_find_next ( ext4_mb_cache , ce <S2SV_ModEnd> "
175,"<S2SV_StartBug> gint64 offset ; <S2SV_EndBug> <S2SV_StartBug> pkt_len = parse_cosine_rec_hdr ( & wth -> phdr , line , err , err_info ) ; <S2SV_EndBug> <S2SV_StartBug> return parse_cosine_hex_dump ( wth -> fh , & wth -> phdr , pkt_len , <S2SV_EndBug> <S2SV_StartBug> wth -> frame_buffer , err , err_info ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return parse_cosine_packet <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , line "
176,<S2SV_StartBug> if ( pkt == NULL ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
177,<S2SV_StartBug> if ( left > 0 && n > left ) <S2SV_EndBug> ,<S2SV_ModStart> == 0 && extend ) return 0 ; if ( left 
178,"<S2SV_StartBug> # ifndef _MSC_VER <S2SV_EndBug> <S2SV_StartBug> char buf [ EXT2_BLOCK_SIZE ( data ) ] ; <S2SV_EndBug> <S2SV_StartBug> grub_error ( GRUB_ERR_BAD_FS , ""invalid<S2SV_blank>extent"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( fileblock >= grub_le_to_cpu16 ( ext [ i ] . len ) ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> return fileblock + start ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! indir ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> 0 , blksz , indir ) ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> if ( ! indir ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> 0 , blksz , indir ) ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> 0 , blksz , indir ) ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> ",<S2SV_ModStart> char * buf = grub_malloc ( <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( ! buf ) { return - 1 ; } <S2SV_ModEnd> <S2SV_ModStart> ) ; free ( buf <S2SV_ModStart> { free ( buf ) ; <S2SV_ModStart> } <S2SV_ModStart> free ( buf ) ; <S2SV_ModStart> free ( buf ) ; <S2SV_ModStart> free ( buf ) ; <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } 
179,"<S2SV_StartBug> UnpackRaster : <S2SV_EndBug> <S2SV_StartBug> image -> rows = Bitmap2Header1 . Height ; <S2SV_EndBug> <S2SV_StartBug> status = SetImageExtent ( image , image -> columns , image -> rows , exception ) ; <S2SV_EndBug> ","<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows , exception ) ; if ( status == MagickFalse ) break ; <S2SV_ModStart> ; status = SetImageExtent ( image , image -> columns , image -> rows , exception ) ; if ( status == MagickFalse ) break <S2SV_ModStart>  <S2SV_ModEnd> "
180,"<S2SV_StartBug> if ( copy_from_user ( buf , ( void * ) arg , hdr . size_in ) ) { <S2SV_EndBug> ","<S2SV_ModStart> * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> + sizeof ( hdr ) <S2SV_ModStart> + sizeof ( hdr ) , hdr . size_in - sizeof ( hdr ) <S2SV_ModEnd> "
181,"<S2SV_StartBug> int hstartcol ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( buf = jas_alloc2 ( bufsize , sizeof ( jpc_fix_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> hstartcol = ( numrows + 1 - parity ) >> 1 ; <S2SV_EndBug> <S2SV_StartBug> m = numrows - hstartcol ; <S2SV_EndBug> <S2SV_StartBug> dstptr = & a [ hstartcol * stride ] ; <S2SV_EndBug> ","<S2SV_ModStart> hstartrow <S2SV_ModEnd> <S2SV_ModStart> jas_alloc3 <S2SV_ModEnd> <S2SV_ModStart> JPC_QMFB_COLGRPSIZE , <S2SV_ModStart> hstartrow <S2SV_ModEnd> <S2SV_ModStart> hstartrow <S2SV_ModEnd> <S2SV_ModStart> hstartrow <S2SV_ModEnd> "
182,"<S2SV_StartBug> ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_EndBug> <S2SV_StartBug> ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_EndBug> <S2SV_StartBug> ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_EndBug> <S2SV_StartBug> height ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""ImproperImageHeader"" <S2SV_ModEnd> <S2SV_ModStart> ""ImproperImageHeader"" <S2SV_ModEnd> <S2SV_ModStart> ""ImproperImageHeader"" <S2SV_ModEnd> <S2SV_ModStart> else { if ( sun_info . length > ( height * bytes_per_line ) ) ThrowReaderException ( ResourceLimitError , ""ImproperImageHeader"" ) ; ( void ) CopyMagickMemory ( sun_pixels , sun_data , sun_info . length ) ; } "
183,"<S2SV_StartBug> char <S2SV_EndBug> <S2SV_StartBug> count = ReadBlob ( image , 2 , ( unsigned char * ) magick ) ; <S2SV_EndBug> <S2SV_StartBug> image -> page . x = ReadBlobLSBShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> image -> page . y = ReadBlobLSBShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> one = 1 ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> ThrowFileException ( exception , CorruptImageError , ""UnexpectedEndOfFile"" , <S2SV_EndBug> <S2SV_StartBug> colormap = ( unsigned char * ) NULL ; <S2SV_EndBug> <S2SV_StartBug> colormap = ( unsigned char * ) AcquireQuantumMemory ( number_colormaps , <S2SV_EndBug> <S2SV_StartBug> if ( colormap == ( unsigned char * ) NULL ) <S2SV_EndBug> <S2SV_StartBug> ReadBlobLSBShort ( image ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> ThrowFileException ( exception , CorruptImageError , ""UnexpectedEndOfFile"" , <S2SV_EndBug> <S2SV_StartBug> do <S2SV_EndBug> <S2SV_StartBug> if ( opcode & 0x40 ) <S2SV_EndBug> <S2SV_StartBug> operand = ReadBlobLSBSignedShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> plane = ( unsigned char ) operand ; <S2SV_EndBug> <S2SV_StartBug> if ( opcode & 0x40 ) <S2SV_EndBug> <S2SV_StartBug> operand = ReadBlobLSBSignedShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opcode & 0x40 ) <S2SV_EndBug> <S2SV_StartBug> operand = ReadBlobLSBSignedShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> offset = ( ( image -> rows - y - 1 ) * image -> columns * number_planes ) + x * <S2SV_EndBug> <S2SV_StartBug> number_planes + plane ; <S2SV_EndBug> <S2SV_StartBug> ( offset + ( ( size_t ) operand * number_planes ) > pixel_info_length ) ) <S2SV_EndBug> <S2SV_StartBug> if ( opcode & 0x40 ) <S2SV_EndBug> <S2SV_StartBug> operand = ReadBlobLSBSignedShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> offset = ( ( image -> rows - y - 1 ) * image -> columns * number_planes ) + x * <S2SV_EndBug> <S2SV_StartBug> number_planes + plane ; <S2SV_EndBug> <S2SV_StartBug> ( offset + ( ( size_t ) operand * number_planes ) > pixel_info_length ) ) <S2SV_EndBug> <S2SV_StartBug> } while ( ( ( opcode & 0x3f ) != EOFOp ) && ( opcode != EOF ) ) ; <S2SV_EndBug> <S2SV_StartBug> ValidateColormapValue ( image , * p & mask , & index , exception ) ; <S2SV_EndBug> <S2SV_StartBug> ValidateColormapValue ( image , ( size_t ) ( x * map_length + <S2SV_EndBug> <S2SV_StartBug> SetPixelIndex ( image , * p ++ , q ) ; <S2SV_EndBug> ","<S2SV_ModStart> # define ThrowRLEException ( exception , message ) \\\n{ if ( colormap != ( unsigned char * ) NULL ) colormap = ( unsigned char * ) RelinquishMagickMemory ( colormap ) ; if ( pixel_info != ( MemoryInfo * ) NULL ) pixel_info = RelinquishVirtualMemory ( pixel_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; \\\n} <S2SV_ModStart> colormap = ( unsigned char * ) NULL ; pixel_info = ( MemoryInfo * ) NULL ; <S2SV_ModStart> ( ssize_t ) <S2SV_ModStart> ( ssize_t ) <S2SV_ModStart> if ( EOFBlob ( image ) != MagickFalse ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> ThrowRLEException ( <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( number_colormaps != 0 ) { <S2SV_ModEnd> <S2SV_ModStart> AcquireQuantumMemory ( number_colormaps , 3 * map_length * sizeof ( * colormap ) ) ; if ( colormap == <S2SV_ModEnd> <S2SV_ModStart> NULL ) ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; p = colormap ; for ( i = 0 ; i < ( ssize_t ) number_colormaps ; i ++ ) for ( x = 0 ; x < ( ssize_t ) map_length ; x ++ ) { * p ++ = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( EOFBlob ( image ) != MagickFalse ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; } <S2SV_ModStart> ThrowRLEException ( <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; if ( opcode <S2SV_ModStart> { <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; } <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; if ( opcode <S2SV_ModStart> { <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; } <S2SV_ModStart> == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; if ( opcode <S2SV_ModStart> { <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; } offset = ( ssize_t ) ( <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> ( offset + <S2SV_ModEnd> <S2SV_ModStart> ( ssize_t ) <S2SV_ModStart> == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; if ( opcode <S2SV_ModStart> { <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; } <S2SV_ModStart> ( ssize_t ) ( <S2SV_ModStart> ) <S2SV_ModStart> ( offset + <S2SV_ModEnd> <S2SV_ModStart> ( ssize_t ) <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> ( ssize_t ) ( <S2SV_ModStart> ) <S2SV_ModStart> ssize_t <S2SV_ModEnd> <S2SV_ModStart> ( Quantum ) "
184,<S2SV_StartBug> ext2_xattr_put_super ( sb ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> 
185,<S2SV_StartBug> endpoint = & usbinterface -> altsetting [ 0 ] . endpoint [ 0 ] . desc ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( usbinterface -> altsetting [ 0 ] . desc . bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev , ""Invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; } "
186,<S2SV_StartBug> if ( ! cfg . shell ) <S2SV_EndBug> <S2SV_StartBug> arg [ 0 ] = cfg . shell ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""/bin/sh"" <S2SV_ModEnd> "
187,<S2SV_StartBug> return to_o2nm_cluster ( node -> nd_item . ci_parent -> ci_parent ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( node -> nd_item . ci_parent ) <S2SV_ModStart> else return NULL ; 
188,"<S2SV_StartBug> static void nfs_set_open_stateid ( struct nfs4_state * state , nfs4_stateid * stateid , int open_flags ) <S2SV_EndBug> <S2SV_StartBug> nfs_set_open_stateid_locked ( state , stateid , open_flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> fmode_t fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> 
189,<S2SV_StartBug> uint32_t vsize = avio_rb32 ( pb ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA 
190,<S2SV_StartBug> if ( q > e ) { <S2SV_EndBug> ,<S2SV_ModStart> < p || q 
191,<S2SV_StartBug> # ifdef AUTOKEY <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
192,"<S2SV_StartBug> char * dir = ""/etc"" ; <S2SV_EndBug> <S2SV_StartBug> if ( ( fd = xfmkstemp ( & tmpname , dir ) ) == NULL ) { <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""/etc"" , "".vipw"" <S2SV_ModEnd> "
193,"<S2SV_StartBug> attach_shadowed ( mnt , parent , shadows ) ; <S2SV_EndBug> ",<S2SV_ModStart> n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ; 
194,"<S2SV_StartBug> savesegment ( es , prev -> es ) ; <S2SV_EndBug> <S2SV_StartBug> loadsegment ( ds , next -> ds ) ; <S2SV_EndBug> ","<S2SV_ModStart> fs , fsindex ) ; savesegment ( gs , gsindex ) ; load_TLS ( next , cpu ) ; arch_end_context_switch ( next_p ) ; savesegment ( <S2SV_ModStart>  <S2SV_ModEnd> "
195,<S2SV_StartBug> problem_data_reload_from_dump_dir ( ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
196,"<S2SV_StartBug> BITS_PARSE ( ""entropy_coding_sync_enabled_flag"" , value , ps_bitstrm , 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ( ps_pps -> i1_tiles_enabled_flag ) && ( ps_sps -> i1_log2_ctb_size == 4 ) && ( ( ps_sps -> i2_pic_width_in_luma_samples >= 4096 ) || ( ps_sps -> i2_pic_height_in_luma_samples >= 4096 ) ) ) { return IHEVCD_INVALID_HEADER ; } 
197,<S2SV_StartBug> ( 1u << NM_VECTOR ) | ( 1u << DB_VECTOR ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) | ( 1u << AC_VECTOR 
198,"<S2SV_StartBug> static char temp [ NFSX_V3FHMAX + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> strncpy ( temp , sfsname , NFSX_V3FHMAX ) ; <S2SV_EndBug> <S2SV_StartBug> temp [ sizeof ( temp ) - 1 ] = '\\0' ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart> stringlen <S2SV_ModEnd> <S2SV_ModStart> stringlen <S2SV_ModEnd> 
199,"<S2SV_StartBug> int transhdrlen , int mtu , unsigned int flags ) <S2SV_EndBug> <S2SV_StartBug> ipv6_select_ident ( & fhdr ) ; <S2SV_EndBug> ","<S2SV_ModStart> , struct rt6_info * rt <S2SV_ModStart> , rt "
200,<S2SV_StartBug> return res ; <S2SV_EndBug> <S2SV_StartBug> return res ; <S2SV_EndBug> ,<S2SV_ModStart> goto err_add_port <S2SV_ModEnd> <S2SV_ModStart> err_add_port : hsr_del_node ( & hsr -> self_node_db ) ; 
201,<S2SV_StartBug> ( void ) tls_init_new_session ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> flush_cmd ( ) ; 
202,"<S2SV_StartBug> void vp9_setup_dst_planes ( MACROBLOCKD * xd , <S2SV_EndBug> <S2SV_StartBug> uint8_t * const buffers [ 4 ] = { src -> y_buffer , src -> u_buffer , src -> v_buffer , <S2SV_EndBug> <S2SV_StartBug> const int strides [ 4 ] = { src -> y_stride , src -> uv_stride , src -> uv_stride , <S2SV_EndBug> <S2SV_StartBug> struct macroblockd_plane * const pd = & xd -> plane [ i ] ; <S2SV_EndBug> ",<S2SV_ModStart> struct macroblockd_plane planes [ MAX_MB_PLANE ] <S2SV_ModEnd> <S2SV_ModStart> MAX_MB_PLANE <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> MAX_MB_PLANE <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> planes <S2SV_ModEnd> 
203,<S2SV_StartBug> len = args -> len = ntohl ( * p ++ ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ( void * ) p > head -> iov_base + head -> iov_len ) return 0 
204,"<S2SV_StartBug> static inline void assign_eip_near ( struct x86_emulate_ctxt * ctxt , ulong dst ) <S2SV_EndBug> <S2SV_StartBug> switch ( ctxt -> op_bytes ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return assign_eip_far ( ctxt , dst , ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
205,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
206,"<S2SV_StartBug> remaining = tvb_captured_length_remaining ( tvb , offset ) ; <S2SV_EndBug> ",<S2SV_ModStart> tvb_reported_length_remaining <S2SV_ModEnd> 
207,<S2SV_StartBug> get_block = ocfs2_get_block ; <S2SV_EndBug> <S2SV_StartBug> get_block = ocfs2_dio_get_block ; <S2SV_EndBug> ,<S2SV_ModStart> ocfs2_lock_get_block <S2SV_ModEnd> <S2SV_ModStart> ocfs2_dio_wr_get_block <S2SV_ModEnd> 
208,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
209,"<S2SV_StartBug> if ( fscanf ( f , ""%79s<S2SV_blank>%[^\\n]\\n"" , def , strparm ) == 2 ) <S2SV_EndBug> ","<S2SV_ModStart> ""%79s<S2SV_blank>%99[^\\n]\\n"" <S2SV_ModEnd> "
210,<S2SV_StartBug> if ( ( int ) val < 0 ) <S2SV_EndBug> ,<S2SV_ModStart> pmc_overflow ( val ) <S2SV_ModEnd> 
211,"<S2SV_StartBug> len = get_line_size ( * b , * avail , nl ) ; <S2SV_EndBug> ","<S2SV_ModStart> + len , * avail - len <S2SV_ModEnd> "
212,"<S2SV_StartBug> int all_whitespace = 1 ; <S2SV_EndBug> <S2SV_StartBug> mod_ty mod ; <S2SV_EndBug> <S2SV_StartBug> PyObject * o , * fstring_name ; <S2SV_EndBug> <S2SV_StartBug> o = PyUnicode_DecodeUTF8 ( expr_start , expr_end - expr_start , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> fstring_name = PyUnicode_FromString ( ""<fstring>"" ) ; <S2SV_EndBug> <S2SV_StartBug> PyMem_RawFree ( str ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> node * mod_n ; <S2SV_ModStart> Py_ssize_t len ; const char * s ; PyObject * fstring_name <S2SV_ModEnd> <S2SV_ModStart> for ( s = expr_start ; s != expr_end ; s ++ ) { char c = * s ; if ( ! ( c == '<S2SV_blank>' || c == '\\t' || c == '\\n' || c == '\\f' ) ) { break ; } } if ( s == expr_end ) { ast_error ( c , n , ""f-string:<S2SV_blank>empty<S2SV_blank>expression<S2SV_blank>not<S2SV_blank>allowed"" ) ; return NULL ; } len = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { PyErr_NoMemory ( ) ; return NULL ; } <S2SV_ModEnd> <S2SV_ModStart> mod_n = PyParser_SimpleParseStringFlagsFilename ( str , ""<fstring>"" , Py_eval_input , 0 ) ; if ( ! mod_n ) { PyMem_RawFree ( str ) ; return NULL ; } str [ 0 ] = '{' ; str [ len + 1 ] = '}' ; fstring_fix_node_location ( n , mod_n , str ) ; <S2SV_ModStart> ) ; Ta3Node_Free ( mod_n "
213,"<S2SV_StartBug> void ntlm_print_message_fields ( NTLM_MESSAGE_FIELDS * fields , const char * name ) <S2SV_EndBug> ",<S2SV_ModStart> static 
214,<S2SV_StartBug> cJSON * c = object -> child ; <S2SV_EndBug> ,<S2SV_ModStart> ? object -> child : 0 <S2SV_ModEnd> 
215,"<S2SV_StartBug> clear_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ; <S2SV_EndBug> ","<S2SV_ModStart> mark_key_instantiated ( key , 0 <S2SV_ModEnd> "
216,<S2SV_StartBug> assert ( plen <= * len ) ; <S2SV_EndBug> ,<S2SV_ModStart> && plen > 0 
217,"<S2SV_StartBug> args . value = kmem_alloc ( valuelen , KM_SLEEP | KM_NOFS ) ; <S2SV_EndBug> ",<S2SV_ModStart> rmtvaluelen = valuelen ; args . 
218,"<S2SV_StartBug> if ( COMPAT_USE_64BIT_TIME ) <S2SV_EndBug> <S2SV_StartBug> if ( get_compat_timespec ( & ktspec , timeout ) ) <S2SV_EndBug> <S2SV_StartBug> if ( datagrams > 0 && put_compat_timespec ( & ktspec , timeout ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> compat_get_timespec <S2SV_ModEnd> <S2SV_ModStart> compat_put_timespec <S2SV_ModEnd> 
219,<S2SV_StartBug> image -> storage_class = PseudoClass ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> case RMT_NONE : <S2SV_EndBug> <S2SV_StartBug> * sun_colormap ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( AcquireImageColormap ( image , image -> colors , exception ) == MagickFalse ) ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
220,"<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = hns_nic_net_xmit_hw ( ndev , skb , <S2SV_EndBug> <S2SV_StartBug> if ( ret == NETDEV_TX_OK ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
221,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
222,<S2SV_StartBug> if ( tcp_specified && settings . port != 0 && ! udp_specified ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
223,<S2SV_StartBug> RAnalOp next_op ; <S2SV_EndBug> ,<S2SV_ModStart> = { 0 } 
224,<S2SV_StartBug> px -> ft -> data = px ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! px -> ft ) { return FALSE ; } 
225,"<S2SV_StartBug> int ret = 0 , found = 0 ; <S2SV_EndBug> <S2SV_StartBug> repo_config = perf_pathdup ( ""config"" ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
226,"<S2SV_StartBug> validate_event ( struct pmu_hw_events * hw_events , <S2SV_EndBug> <S2SV_StartBug> struct arm_pmu * armpmu = to_arm_pmu ( event -> pmu ) ; <S2SV_EndBug> <S2SV_StartBug> if ( event -> pmu != leader_pmu || event -> state < PERF_EVENT_STATE_OFF ) <S2SV_EndBug> <S2SV_StartBug> return armpmu -> get_event_idx ( hw_events , & fake_event ) >= 0 ; <S2SV_EndBug> ","<S2SV_ModStart> struct pmu * pmu , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pmu ) return 0 ; if ( event -> pmu != <S2SV_ModStart> armpmu = to_arm_pmu ( event -> pmu ) ; "
227,"<S2SV_StartBug> static bool new_idmap_permitted ( struct user_namespace * ns , int cap_setid , <S2SV_EndBug> <S2SV_StartBug> if ( ns_capable ( ns -> parent , cap_setid ) ) <S2SV_EndBug> ","<S2SV_ModStart> const struct file * file , <S2SV_ModStart> && file_ns_capable ( file , ns -> parent , cap_setid ) "
228,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> return body ; <S2SV_EndBug> ,<S2SV_ModStart> { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> } 
229,"<S2SV_StartBug> u8 reset ; <S2SV_EndBug> <S2SV_StartBug> hx = kmalloc ( sizeof ( * hx ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ret = usb_cypress_writemem ( udev , cypress [ type ] . cpu_cs_register , & reset , 1 ) ) != 1 ) <S2SV_EndBug> <S2SV_StartBug> kfree ( hx ) ; <S2SV_EndBug> <S2SV_StartBug> reset = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ret || usb_cypress_writemem ( udev , cypress [ type ] . cpu_cs_register , & reset , 1 ) != 1 ) { <S2SV_EndBug> <S2SV_StartBug> kfree ( hx ) ; <S2SV_EndBug> ","<S2SV_ModStart> * buf <S2SV_ModEnd> <S2SV_ModStart> u16 cpu_cs_register = <S2SV_ModEnd> <S2SV_ModStart> ; buf = kmalloc ( sizeof ( * hx ) , GFP_KERNEL ) ; if ( ! buf ) return - ENOMEM ; hx = ( struct hexline * ) buf ; buf [ 0 ] = 1 ; if ( usb_cypress_writemem ( udev , cpu_cs_register , buf , 1 <S2SV_ModEnd> <S2SV_ModStart> buf <S2SV_ModEnd> <S2SV_ModStart> buf [ 0 ] = 0 ; if ( <S2SV_ModEnd> <S2SV_ModStart> cpu_cs_register , buf <S2SV_ModEnd> <S2SV_ModStart> buf <S2SV_ModEnd> "
230,"<S2SV_StartBug> l2tp_call_errors_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> ptr ++ ; <S2SV_EndBug> <S2SV_StartBug> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_EndBug> <S2SV_StartBug> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_EndBug> <S2SV_StartBug> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_EndBug> <S2SV_StartBug> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_EndBug> <S2SV_StartBug> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_EndBug> ","<S2SV_ModStart> , u_int length <S2SV_ModStart> if ( length < 2 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 <S2SV_ModEnd> <S2SV_ModStart> if ( length < 4 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 <S2SV_ModEnd> <S2SV_ModStart> if ( length < 4 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 <S2SV_ModEnd> <S2SV_ModStart> if ( length < 4 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 <S2SV_ModEnd> <S2SV_ModStart> if ( length < 4 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 <S2SV_ModEnd> <S2SV_ModStart> if ( length < 4 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } "
231,"<S2SV_StartBug> if ( strncmp ( handle -> params . realm , realm -> data , realm -> length ) == 0 <S2SV_EndBug> ","<S2SV_ModStart> success = data_eq_string ( * realm , <S2SV_ModEnd> <S2SV_ModStart> ) && data_eq_string ( * c1 , ""kadmin"" ) && ! data_eq_string ( * c2 , ""history"" ) ; <S2SV_ModEnd> "
232,<S2SV_StartBug> if ( uniforms_offset < shader_rec_offset || <S2SV_EndBug> ,<S2SV_ModStart> shader_rec_offset < args -> bin_cl_size || 
233,<S2SV_StartBug> # if HAVA_LZMA_H && HAVE_LIBLZMA <S2SV_EndBug> ,<S2SV_ModStart> HAVE_LZMA_H <S2SV_ModEnd> 
234,<S2SV_StartBug> file_update_time ( vma -> vm_file ) ; <S2SV_EndBug> <S2SV_StartBug> sb_end_pagefault ( inode -> i_sb ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ; 
235,<S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug> ,<S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> 
236,<S2SV_StartBug> switch ( * arg ) { <S2SV_EndBug> <S2SV_StartBug> case '\\n' : <S2SV_EndBug> <S2SV_StartBug> * b ++ = * arg ; <S2SV_EndBug> ,<S2SV_ModStart> char ch = * arg ; switch ( ch <S2SV_ModEnd> <S2SV_ModStart> '=' : case <S2SV_ModStart> ch <S2SV_ModEnd> 
237,"<S2SV_StartBug> if ( map && nmap ) { <S2SV_EndBug> <S2SV_StartBug> cp = ikev1_attrmap_print ( ndo , cp , ( ep < ep2 ) ? ep : ep2 , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ep2 , map , nmap ) ; else cp = ikev1_attr_print ( ndo , cp , ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart>  <S2SV_ModEnd> "
238,<S2SV_StartBug> static gboolean <S2SV_EndBug> <S2SV_StartBug> ice_conn -> context = client ; <S2SV_EndBug> ,"<S2SV_ModStart> typedef struct { guint watch_id ; guint protocol_timeout ; } GsmIceConnectionWatch ; static void disconnect_ice_connection ( IceConn ice_conn ) { IceSetShutdownNegotiation ( ice_conn , FALSE ) ; IceCloseConnection <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
239,<S2SV_StartBug> if ( ( skb_headroom ( skb ) < frag_hdr_sz ) && <S2SV_EndBug> ,<S2SV_ModStart> skb_mac_header <S2SV_ModEnd> <S2SV_ModStart> skb -> head + 
240,<S2SV_StartBug> # ifdef GIT_WIN32 <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> test_checkout_fails ( ""refs/heads/git_tilde1"" , ""git~1/foobar"" ) ; <S2SV_ModEnd> "
241,"<S2SV_StartBug> v . val = test_bit ( SOCK_PASSCRED , & sock -> flags ) ? 1 : 0 ; <S2SV_EndBug> <S2SV_StartBug> v . val = test_bit ( SOCK_PASSSEC , & sock -> flags ) ? 1 : 0 ; <S2SV_EndBug> ",<S2SV_ModStart> ! ! <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ! ! <S2SV_ModStart>  <S2SV_ModEnd> 
242,<S2SV_StartBug> if ( sk -> sk_shutdown & RCV_SHUTDOWN ) { <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> ,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
243,<S2SV_StartBug> return in ; <S2SV_EndBug> ,<S2SV_ModStart> NULL <S2SV_ModEnd> 
244,"<S2SV_StartBug> uint8_t * const buffers [ 4 ] = { src -> y_buffer , src -> u_buffer , src -> v_buffer , <S2SV_EndBug> <S2SV_StartBug> const int strides [ 4 ] = { src -> y_stride , src -> uv_stride , src -> uv_stride , <S2SV_EndBug> ",<S2SV_ModStart> MAX_MB_PLANE <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> MAX_MB_PLANE <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
245,"<S2SV_StartBug> char buf [ DN_BUF_LEN ] ; <S2SV_EndBug> <S2SV_StartBug> X509_NAME_oneline_ex ( X509_get_subject_name ( cert ) , buf , & bufsize , <S2SV_EndBug> <S2SV_StartBug> md -> subject_dn = strdup ( buf ) ; <S2SV_EndBug> <S2SV_StartBug> X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ) , buf , & bufsize , <S2SV_EndBug> <S2SV_StartBug> md -> issuer_dn = strdup ( buf ) ; <S2SV_EndBug> ","<S2SV_ModStart> * md_out = NULL ; md = calloc ( 1 , sizeof ( <S2SV_ModEnd> <S2SV_ModStart> ret = rfc2253_name <S2SV_ModEnd> <S2SV_ModStart> & <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( ret ) goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> <S2SV_ModStart> & <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( ret ) goto cleanup ; <S2SV_ModEnd> "
246,<S2SV_StartBug> if ( ! npages ) { <S2SV_EndBug> ,<S2SV_ModStart> || base_gfn != old . base_gfn 
247,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
248,<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
249,"<S2SV_StartBug> register u_int amt ; <S2SV_EndBug> <S2SV_StartBug> j = length / sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 <S2SV_EndBug> <S2SV_StartBug> if ( j * sizeof ( * ni ) != length - 4 ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>ripng-req<S2SV_blank>%d:"" , j ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> i -= sizeof ( * ni ) , ++ ni ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> j = length / sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> if ( j * sizeof ( * ni ) != length - 4 ) <S2SV_EndBug> <S2SV_StartBug> trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; <S2SV_EndBug> <S2SV_StartBug> for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> i -= sizeof ( * ni ) , ++ ni ) { <S2SV_EndBug> <S2SV_StartBug> if ( trunc ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> unsigned int length_left ; u_int j ; ND_TCHECK ( rp -> rip6_cmd <S2SV_ModEnd> <S2SV_ModStart> length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) goto trunc ; length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; j = length_left <S2SV_ModEnd> <S2SV_ModStart> ) { ND_TCHECK ( rp -> rip6_nets ) ; if ( <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> length_left ) ND_PRINT ( ( ndo , ""<S2SV_blank>ripng-req<S2SV_blank>%u[%u]:"" , j , length <S2SV_ModEnd> <S2SV_ModStart> ""<S2SV_blank>ripng-req<S2SV_blank>%u:"" , j ) <S2SV_ModEnd> <S2SV_ModStart> length_left <S2SV_ModEnd> <S2SV_ModStart> length_left <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( * ni ) ; <S2SV_ModStart> if ( length_left != 0 ) goto trunc ; <S2SV_ModStart> length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) goto trunc ; length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; j = length_left <S2SV_ModEnd> <S2SV_ModStart> length_left ) ND_PRINT ( ( ndo , ""<S2SV_blank>ripng-resp<S2SV_blank>%d[%u]:"" , j , length <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> length_left <S2SV_ModEnd> <S2SV_ModStart> length_left <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( * ni ) ; <S2SV_ModStart> length_left != 0 ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( rp -> rip6_vers ) ; <S2SV_ModStart> return ; trunc : ND_PRINT ( ( ndo , ""[|ripng]"" ) ) ; return ; "
250,<S2SV_StartBug> if ( ret < 0 ) { <S2SV_EndBug> ,<S2SV_ModStart> goto error ; <S2SV_ModEnd> 
251,"<S2SV_StartBug> vpx_memcpy ( sortlist , cpi -> mb_activity_map , <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> 
252,<S2SV_StartBug> bprm -> interp = iname ; <S2SV_EndBug> ,"<S2SV_ModStart> retval = bprm_change_interp ( iname , bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> "
253,<S2SV_StartBug> int iSrc ; <S2SV_EndBug> <S2SV_StartBug> for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { <S2SV_EndBug> <S2SV_StartBug> dTotalWeight += ( res -> ContribRow [ u ] . Weights [ iSrc - iLeft ] = scale_f_d * ( * pFilter ) ( scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> Left = iLeft ; res -> ContribRow [ u ] . Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ] . 
254,<S2SV_StartBug> _ipmi_destroy_user ( user ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
255,"<S2SV_StartBug> Com_Printf ( ""Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; return ; } if ( ! COM_CompareExtension ( filename , "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\"".cfg\\""<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"" "
256,<S2SV_StartBug> int sl = strlen ( cursor -> ns ) + 1 ; <S2SV_EndBug> ,<S2SV_ModStart> size_t <S2SV_ModEnd> 
257,"<S2SV_StartBug> if ( mobj ) <S2SV_EndBug> <S2SV_StartBug> memset ( mobj_get_va ( mobj , 0 ) , 0 , size ) ; <S2SV_EndBug> ","<S2SV_ModStart> { size_t granularity = BIT ( tee_mm_sec_ddr . shift ) ; <S2SV_ModStart> ROUNDUP ( size , granularity ) ) ; } <S2SV_ModEnd> "
258,<S2SV_StartBug> timer -> it_overrun += 1 << i ; <S2SV_EndBug> ,<S2SV_ModStart> 1LL <S2SV_ModEnd> 
259,"<S2SV_StartBug> int is_async = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( TYPE ( CHILD ( n , 0 ) ) == ASYNC ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> for_ch = CHILD ( n , 1 + is_async ) ; <S2SV_EndBug> <S2SV_StartBug> expression = ast_for_expr ( c , CHILD ( n , 3 + is_async ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( NCH ( n ) == ( 5 + is_async ) ) { <S2SV_EndBug> <S2SV_StartBug> n = CHILD ( n , 4 + is_async ) ; <S2SV_EndBug> ","<S2SV_ModStart> node * sync_n ; <S2SV_ModStart> NCH ( n ) == 2 <S2SV_ModEnd> <S2SV_ModStart> REQ ( CHILD ( n , 0 ) , NAME ) ; assert ( strcmp ( STR ( CHILD ( n , 0 ) ) , ""async"" ) == 0 ) ; sync_n = CHILD ( n , 1 ) ; } else { sync_n = CHILD ( n , 0 ) ; } REQ ( sync_n , sync_comp_for ) ; <S2SV_ModEnd> <S2SV_ModStart> sync_n , 1 <S2SV_ModEnd> <S2SV_ModStart> sync_n , 3 <S2SV_ModEnd> <S2SV_ModStart> sync_n ) == 5 <S2SV_ModEnd> <S2SV_ModStart> sync_n , 4 <S2SV_ModEnd> "
260,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> dst_state -> speculative = src -> speculative ; 
261,"<S2SV_StartBug> static void write_mb_modes_kf ( const VP9_COMP * cpi , MODE_INFO * * mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; <S2SV_EndBug> <S2SV_StartBug> const MODE_INFO * const left_mi = xd -> left_available ? mi_8x8 [ - 1 ] : NULL ; <S2SV_EndBug> <S2SV_StartBug> write_skip ( cpi , mbmi -> segment_id , mi , w ) ; <S2SV_EndBug> <S2SV_StartBug> write_selected_tx_size ( cpi , mbmi -> tx_size , bsize , w ) ; <S2SV_EndBug> ","<S2SV_ModStart> VP9_COMMON * cm , const MACROBLOCKD * xd , <S2SV_ModEnd> <S2SV_ModStart> vpx_writer * w ) { <S2SV_ModEnd> <S2SV_ModStart> xd -> above_mi <S2SV_ModEnd> <S2SV_ModStart> left_mi <S2SV_ModEnd> <S2SV_ModStart> cm , xd <S2SV_ModEnd> <S2SV_ModStart> cm , xd <S2SV_ModEnd> "
262,<S2SV_StartBug> saddr . sin_addr . s_addr = htonl ( INADDR_ANY ) ; <S2SV_EndBug> ,<S2SV_ModStart> INADDR_LOOPBACK <S2SV_ModEnd> 
263,"<S2SV_StartBug> DPRINTF ( ""Data<S2SV_blank>ready<S2SV_blank>tag=0x%x<S2SV_blank>len=%zd\\n"" , r -> req . tag , r -> iov . iov_len ) ; <S2SV_EndBug> <S2SV_StartBug> n = r -> iov . iov_len / 512 ; <S2SV_EndBug> <S2SV_StartBug> scsi_req_data ( & r -> req , r -> iov . iov_len ) ; <S2SV_EndBug> ",<S2SV_ModStart> qiov . size <S2SV_ModEnd> <S2SV_ModStart> qiov . size <S2SV_ModEnd> <S2SV_ModStart> qiov . size <S2SV_ModEnd> 
264,<S2SV_StartBug> if ( cs > CQSPI_MAX_CHIPSELECT ) { <S2SV_EndBug> ,<S2SV_ModStart> >= <S2SV_ModEnd> 
265,"<S2SV_StartBug> if ( n > maxn ) SWF_error ( ""Action<S2SV_blank>overflow!!"" ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( actions [ n ] . SWF_ACTIONRECORD . ActionCode ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> OpCode ( actions , n , maxn ) <S2SV_ModEnd> "
266,"<S2SV_StartBug> memcpy ( ptr , VSB_data ( synth_body ) + o , l ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( l > ll ) l = ll ; 
267,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> } if ( free < 0 ) { err = - ENOMEM ; goto out ; 
268,<S2SV_StartBug> if ( len < sizeof ( * prep ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> || ! ND_TTEST ( * prep ) ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
269,<S2SV_StartBug> rq -> skip_clock_update = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
270,"<S2SV_StartBug> uint8_t value ; <S2SV_EndBug> <S2SV_StartBug> 0 , reg , & value , 1 , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret >= 0 ? value : ret ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> * buffer ; uint8_t value ; buffer = kmalloc ( 1 , GFP_KERNEL ) ; if ( ! buffer ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> buffer <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> <S2SV_ModStart> } "
271,"<S2SV_StartBug> static void addModuleArgument ( sqlite3 * db , Table * pTable , char * zArg ) { <S2SV_EndBug> <S2SV_StartBug> int nBytes = sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ; <S2SV_EndBug> <S2SV_StartBug> char * * azModuleArg ; <S2SV_EndBug> ","<S2SV_ModStart> Parse * pParse <S2SV_ModEnd> <S2SV_ModStart> sqlite3_int64 <S2SV_ModEnd> <S2SV_ModStart> sqlite3 * db = pParse -> db ; if ( pTable -> nModuleArg + 3 >= db -> aLimit [ SQLITE_LIMIT_COLUMN ] ) { sqlite3ErrorMsg ( pParse , ""too<S2SV_blank>many<S2SV_blank>columns<S2SV_blank>on<S2SV_blank>%s"" , pTable -> zName ) ; } "
272,"<S2SV_StartBug> memcpy ( outbuffer , s -> str , XMLRPC_BUFSIZE ) ; <S2SV_EndBug> ","<S2SV_ModStart> s -> append_char ( s , 0 ) ; strncpy <S2SV_ModEnd> "
273,<S2SV_StartBug> CurrentColorSpace = ColorSpaceOut ; <S2SV_EndBug> <S2SV_StartBug> cmsPipelineFree ( Lut ) ; <S2SV_EndBug> ,<S2SV_ModStart> Lut = NULL ; <S2SV_ModStart> if ( Lut != NULL ) 
274,<S2SV_StartBug> for ( i = 0 ; i < sec -> size ; i += 4 ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < sec -> size ; i += 8 ) { <S2SV_EndBug> ,<S2SV_ModStart> ( i + 3 ) <S2SV_ModEnd> <S2SV_ModStart> ( i + 7 ) <S2SV_ModEnd> 
275,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""%sBandwidth<S2SV_blank>Constraints<S2SV_blank>Model<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(%u)"" , <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , 4 ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( subl == 0 ) break ; <S2SV_ModStart>  <S2SV_ModEnd> 
276,"<S2SV_StartBug> if ( ixheaacd_cmplx_anal_fft != NULL ) <S2SV_EndBug> <S2SV_StartBug> ( * ixheaacd_cmplx_anal_fft ) ( u_in , u_out , anal_size * 2 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart> ( ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft ) ) <S2SV_ModEnd> 
277,"<S2SV_StartBug> while ( p < q ) p += enclen ( reg -> enc , p ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( q >= end ) return 0 ; 
278,"<S2SV_StartBug> static void bfq_idle_slice_timer_body ( struct bfq_queue * bfqq ) <S2SV_EndBug> <S2SV_StartBug> struct bfq_data * bfqd = bfqq -> bfqd ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & bfqd -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> struct bfq_data * bfqd , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> bfq_clear_bfqq_wait_request ( bfqq ) ; "
279,<S2SV_StartBug> if ( key_is_instantiated ( key ) && <S2SV_EndBug> ,<S2SV_ModStart> key_is_positive <S2SV_ModEnd> 
280,"<S2SV_StartBug> RING_FINAL_CHECK_FOR_REQUESTS ( & vif -> tx , work_to_do ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( work_to_do < 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( ret < 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , <S2SV_EndBug> <S2SV_StartBug> netbk_tx_err ( vif , & txreq , idx ) ; <S2SV_EndBug> <S2SV_StartBug> netbk_tx_err ( vif , & txreq , idx ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( vif -> tx . sring -> req_prod - vif -> tx . req_cons > XEN_NETIF_TX_RING_SIZE ) { netdev_err ( vif -> dev , ""Impossible<S2SV_blank>number<S2SV_blank>of<S2SV_blank>requests.<S2SV_blank>"" ""req_prod<S2SV_blank>%d,<S2SV_blank>req_cons<S2SV_blank>%d,<S2SV_blank>size<S2SV_blank>%ld\\n"" , vif -> tx . sring -> req_prod , vif -> tx . req_cons , XEN_NETIF_TX_RING_SIZE ) ; netbk_fatal_tx_err ( vif ) ; continue ; } <S2SV_ModStart> continue ; <S2SV_ModEnd> <S2SV_ModStart> continue ; <S2SV_ModEnd> <S2SV_ModStart> netdev_err <S2SV_ModEnd> <S2SV_ModStart> netbk_fatal_tx_err ( vif <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
281,<S2SV_StartBug> ( void ) tls_init_new_session ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> flush_cmd ( ) ; 
282,<S2SV_StartBug> struct xfrm_policy_walk * walk = ( struct xfrm_policy_walk * ) & cb -> args [ 1 ] ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
283,<S2SV_StartBug> parse_input ( conn ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( <S2SV_ModStart> != 0 ) return 
284,"<S2SV_StartBug> struct pending_tx_info * pending_tx_info = netbk -> pending_tx_info ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( err ) ) { <S2SV_EndBug> <S2SV_StartBug> netbk -> pending_ring [ index ] = pending_idx ; <S2SV_EndBug> <S2SV_StartBug> pending_ring_idx_t index ; <S2SV_EndBug> <S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug> <S2SV_StartBug> txp = & netbk -> pending_tx_info [ pending_idx ] . req ; <S2SV_EndBug> <S2SV_StartBug> index = pending_index ( netbk -> pending_prod ++ ) ; <S2SV_EndBug> <S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug> <S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> xen_netbk_idx_release ( netbk , pending_idx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , XEN_NETIF_RSP_OKAY <S2SV_ModStart> xen_netbk_idx_release ( netbk , pending_idx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , XEN_NETIF_RSP_OKAY <S2SV_ModStart> , XEN_NETIF_RSP_OKAY "
285,"
","
"
286,"<S2SV_StartBug> ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> <S2SV_StartBug> ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> ",<S2SV_ModStart> { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> } <S2SV_ModStart> scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> } <S2SV_ModStart> scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; 
287,<S2SV_StartBug> if ( len < 0 || addr . nl_pid ) { <S2SV_EndBug> <S2SV_StartBug> incoming_msg = ( struct nlmsghdr * ) kvp_recv_buffer ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( addr . nl_pid ) { syslog ( LOG_WARNING , ""Received<S2SV_blank>packet<S2SV_blank>from<S2SV_blank>untrusted<S2SV_blank>pid:%u"" , addr . nl_pid ) ; continue ; } "
288,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
289,<S2SV_StartBug> if ( client -> ipc == NULL ) { <S2SV_EndBug> ,<S2SV_ModStart> && client -> session == NULL 
290,"<S2SV_StartBug> diffPtr + x > diffBlock + diffBlockLength || <S2SV_EndBug> <S2SV_StartBug> memcpy ( newData + newpos , diffPtr , x ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError , ""corrupt<S2SV_blank>patch<S2SV_blank>(overflow)"" ) ; return NULL ; } memcpy ( newData + newpos , diffPtr , x ) ; diffPtr += x ; for ( j = 0 ; j < x ; j ++ ) if ( ( oldpos + j >= 0 ) && ( oldpos + j < origDataLength ) ) newData [ newpos + j ] += origData [ oldpos + j ] ; newpos += x ; oldpos += x ; if ( newpos + y > newDataLength <S2SV_ModStart>  <S2SV_ModEnd> "
291,"<S2SV_StartBug> flen = udf_get_filename ( dir -> i_sb , nameptr , fname , lfi ) ; <S2SV_EndBug> ","<S2SV_ModStart> lfi , fname , UDF_NAME_LEN <S2SV_ModEnd> "
292,"<S2SV_StartBug> __ip_vs_get_timeouts ( net , & t ) ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( & t , 0 , sizeof ( t ) ) ; "
293,"<S2SV_StartBug> err = ip6_xmit ( sk , skb , fl6 , np -> opt , np -> tclass ) ; <S2SV_EndBug> ","<S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) , <S2SV_ModEnd> "
294,<S2SV_StartBug> ssize_t result ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( WARN_ON_ONCE ( ! ib_safe_file_access ( filp ) ) ) return - EACCES 
295,"<S2SV_StartBug> char * fpath = NULL , * path1 , * cgdir = NULL , * controller ; <S2SV_EndBug> <S2SV_StartBug> if ( ! fc_may_access ( fc , controller , path1 , NULL , O_RDWR ) ) { <S2SV_EndBug> <S2SV_StartBug> ret = - EACCES ; <S2SV_EndBug> <S2SV_StartBug> if ( ! caller_is_in_ancestor ( fc -> pid , controller , path1 , NULL ) ) { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart> , * next = NULL <S2SV_ModStart> caller_is_in_ancestor ( fc -> pid , controller , path1 , & next <S2SV_ModEnd> <S2SV_ModStart> if ( fpath && strcmp ( next , fpath ) == 0 ) ret = - EEXIST ; else ret = - ENOENT <S2SV_ModEnd> <S2SV_ModStart> fc_may_access ( fc , controller , path1 , NULL , O_RDWR ) ) { ret = - EACCES ; goto out ; } if ( ! <S2SV_ModStart> free ( next ) ; "
296,<S2SV_StartBug> disk -> queue = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> put_disk ( disk ) ; 
297,"<S2SV_StartBug> void ntlm_write_message_header ( wStream * s , NTLM_MESSAGE_HEADER * header ) <S2SV_EndBug> ",<S2SV_ModStart> static 
298,"<S2SV_StartBug> if ( CheckMemoryOverflow ( ( image -> columns + 7UL ) >> 3UL , image -> rows ) != MagickFalse ) <S2SV_EndBug> <S2SV_StartBug> if ( CheckMemoryOverflow ( number_pixels , viff_info . number_data_bands ) != MagickFalse ) <S2SV_EndBug> ",<S2SV_ModStart> HeapOverflowSanityCheck <S2SV_ModEnd> <S2SV_ModStart> HeapOverflowSanityCheck <S2SV_ModEnd> 
299,"<S2SV_StartBug> int64_t index_pts = FFMAX ( av_rescale ( itime , i , 10000 ) - asf -> hdr . preroll , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; } 
300,"<S2SV_StartBug> rinfo = kmalloc ( SZ_SG_REQ_INFO * SG_MAX_QUEUE , <S2SV_EndBug> ",<S2SV_ModStart> kzalloc <S2SV_ModEnd> 
301,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> install_keyword ( ""umask"" , & umask_handler ) ; "
302,<S2SV_StartBug> return encoder_common_init ( ctx ) ; <S2SV_EndBug> ,"<S2SV_ModStart> vpx_codec_err_t res = VPX_CODEC_OK ; ( void ) data ; if ( ctx -> priv == NULL ) { vpx_codec_alg_priv_t * const priv = vpx_calloc ( 1 , sizeof ( * priv ) ) ; if ( priv == NULL ) return VPX_CODEC_MEM_ERROR ; ctx -> priv = ( vpx_codec_priv_t * ) priv ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> enc . total_encoders = 1 ; priv -> buffer_pool = ( BufferPool * ) vpx_calloc ( 1 , sizeof ( BufferPool ) ) ; if ( priv -> buffer_pool == NULL ) return VPX_CODEC_MEM_ERROR ; # if CONFIG_MULTITHREAD if ( pthread_mutex_init ( & priv -> buffer_pool -> pool_mutex , NULL ) ) { return VPX_CODEC_MEM_ERROR ; } # endif if ( ctx -> config . enc ) { priv -> cfg = * ctx -> config . enc ; ctx -> config . enc = & priv -> cfg ; } priv -> extra_cfg = default_extra_cfg ; once ( vp9_initialize_enc ) ; res = validate_config ( priv , & priv -> cfg , & priv -> extra_cfg ) ; if ( res == VPX_CODEC_OK ) { set_encoder_config ( & priv -> oxcf , & priv -> cfg , & priv -> extra_cfg ) ; # if CONFIG_VP9_HIGHBITDEPTH priv -> oxcf . use_highbitdepth = ( ctx -> init_flags & VPX_CODEC_USE_HIGHBITDEPTH ) ? 1 : 0 ; # endif priv -> cpi = vp9_create_compressor ( & priv -> oxcf , priv -> buffer_pool ) ; if ( priv -> cpi == NULL ) res = VPX_CODEC_MEM_ERROR ; else priv -> cpi -> output_pkt_list = & priv -> pkt_list . head ; } } return res <S2SV_ModEnd> "
303,<S2SV_StartBug> char * tmpptr = key + strlen ( key ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
304,"<S2SV_StartBug> touch_file ( t -> stamp_path , true , USEC_INFINITY , UID_INVALID , GID_INVALID , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> MODE_INVALID <S2SV_ModEnd> 
305,"<S2SV_StartBug> if ( ! ( box = jas_malloc ( sizeof ( jp2_box_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ""preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%d\\n"" , <S2SV_EndBug> <S2SV_StartBug> if ( box -> len == 1 ) { <S2SV_EndBug> ","<S2SV_ModStart> jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> <S2SV_ModStart> ""preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>"" ""type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%"" PRIuFAST32 ""\\n"" <S2SV_ModEnd> <S2SV_ModStart> JAS_DBGLOG ( 10 , ( ""big<S2SV_blank>length\\n"" ) ) ; "
306,"<S2SV_StartBug> _Unpickler_ResizeMemoList ( UnpicklerObject * self , Py_ssize_t new_size ) <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> ",<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> 
307,"<S2SV_StartBug> int copylen ; <S2SV_EndBug> <S2SV_StartBug> if ( m && m -> msg_control && sock_flag ( & q -> sk , SOCK_ZEROCOPY ) ) <S2SV_EndBug> <S2SV_StartBug> copylen = vnet_hdr . hdr_len ; <S2SV_EndBug> ","<S2SV_ModStart> = 0 <S2SV_ModStart> err = - EMSGSIZE ; if ( unlikely ( count > UIO_MAXIOV ) ) goto err ; <S2SV_ModStart> if ( count > MAX_SKB_FRAGS ) { copylen = iov_length ( iv , count - MAX_SKB_FRAGS ) ; if ( copylen < vnet_hdr_len ) copylen = 0 ; else copylen -= vnet_hdr_len ; } if ( copylen < vnet_hdr . hdr_len ) "
308,<S2SV_StartBug> u16 offset = sizeof ( struct ipv6hdr ) ; <S2SV_EndBug> <S2SV_StartBug> while ( offset + 1 <= packet_len ) { <S2SV_EndBug> <S2SV_StartBug> switch ( * * nexthdr ) { <S2SV_EndBug> <S2SV_StartBug> offset += ipv6_optlen ( exthdr ) ; <S2SV_EndBug> <S2SV_StartBug> exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> struct ipv6_opt_hdr * exthdr ; <S2SV_ModStart> if ( offset + sizeof ( struct ipv6_opt_hdr ) > packet_len ) return - EINVAL ; exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + offset ) ; <S2SV_ModStart> } return - EINVAL <S2SV_ModEnd> 
309,"<S2SV_StartBug> static void write_delta_q ( struct vp9_write_bit_buffer * wb , int delta_q ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , abs ( delta_q ) , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , delta_q < 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> 
310,<S2SV_StartBug> find = 1 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
311,"<S2SV_StartBug> put_cmsg ( msg , SOL_PACKET , PACKET_AUXDATA , sizeof ( aux ) , & aux ) ; <S2SV_EndBug> ",<S2SV_ModStart> aux . tp_padding = 0 ; 
312,<S2SV_StartBug> if ( ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) || <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
313,"<S2SV_StartBug> pr_err ( ""Underflows<S2SV_blank>must<S2SV_blank>be<S2SV_blank>unconditional<S2SV_blank>and<S2SV_blank>"" <S2SV_EndBug> ",<S2SV_ModStart> pr_debug <S2SV_ModEnd> 
314,<S2SV_StartBug> const int length ) { <S2SV_EndBug> ,<S2SV_ModStart> size_t <S2SV_ModEnd> 
315,"<S2SV_StartBug> sctp_addiphdr_t * hdr ; <S2SV_EndBug> <S2SV_StartBug> int all_param_pass = 1 ; <S2SV_EndBug> <S2SV_StartBug> while ( chunk_len > 0 ) { <S2SV_EndBug> <S2SV_StartBug> asconf_param ) ; <S2SV_EndBug> <S2SV_StartBug> all_param_pass = 0 ; <S2SV_EndBug> <S2SV_StartBug> asconf_param -> crr_id , err_code , <S2SV_EndBug> <S2SV_StartBug> length = ntohs ( asconf_param -> param_hdr . length ) ; <S2SV_EndBug> ","<S2SV_ModStart> sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; bool all_param_pass = true ; union sctp_params param ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sctp_walk_params ( param , addip , addip_hdr . params ) { if ( param . p -> type == SCTP_PARAM_IPV4_ADDRESS || param . p -> type == SCTP_PARAM_IPV6_ADDRESS ) continue ; <S2SV_ModEnd> <S2SV_ModStart> param . addip ) ; if ( err_code != SCTP_ERROR_NO_ERROR <S2SV_ModEnd> <S2SV_ModStart> false <S2SV_ModEnd> <S2SV_ModStart> param . addip <S2SV_ModEnd> <S2SV_ModStart> err_code , param . addip ) ; if ( err_code == SCTP_ERROR_RSRC_LOW <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
316,"<S2SV_StartBug> JAS_DBGLOG ( 101 , ( ""jas_realloc<S2SV_blank>called<S2SV_blank>with<S2SV_blank>%x,%zu\\n"" , ptr , size ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""jas_realloc(%x,<S2SV_blank>%zu)\\n"" <S2SV_ModEnd> "
317,<S2SV_StartBug> m -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
318,<S2SV_StartBug> is_kvmppc_hv_enabled ( kvm ) ; <S2SV_EndBug> ,<S2SV_ModStart> hv_enabled <S2SV_ModEnd> 
319,"<S2SV_StartBug> pci_populate_msicap ( & msicap , msgnum , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> return <S2SV_ModStart> || <S2SV_ModEnd> 
320,"<S2SV_StartBug> keylen = utf8s_to_utf16s ( key_name , strlen ( key_name ) , <S2SV_EndBug> <S2SV_StartBug> ( wchar_t * ) kvp_data -> data . key ) ; <S2SV_EndBug> <S2SV_StartBug> valuelen = utf8s_to_utf16s ( value , strlen ( value ) , <S2SV_EndBug> <S2SV_StartBug> ( wchar_t * ) kvp_data -> data . value ) ; <S2SV_EndBug> ","<S2SV_ModStart> UTF16_HOST_ENDIAN , <S2SV_ModStart> , HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> UTF16_HOST_ENDIAN , <S2SV_ModStart> , HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2 "
321,<S2SV_StartBug> ctx = d -> log_ctx ; <S2SV_EndBug> ,<S2SV_ModStart> d -> log_file = eventfp ; 
322,<S2SV_StartBug> img -> color_space = OPJ_CLRSPC_SRGB ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
323,<S2SV_StartBug> void * parg = NULL ; <S2SV_EndBug> <S2SV_StartBug> int is_ext_ctrl ; <S2SV_EndBug> <S2SV_StartBug> case _IOC_NONE : <S2SV_EndBug> <S2SV_StartBug> case _IOC_WRITE : <S2SV_EndBug> <S2SV_StartBug> if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> ( void * ) arg ; long err = - EINVAL ; bool has_array_args ; size_t array_size = 0 ; void __user * user_ptr = NULL ; void * * kernel_ptr = NULL ; if ( _IOC_DIR ( cmd ) != _IOC_NONE ) { if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ) , GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { unsigned long n = cmd_input_size ( cmd ) ; if ( copy_from_user ( parg , ( void __user * ) arg , n ) ) goto out ; if ( n < _IOC_SIZE ( cmd ) ) memset ( ( u8 * ) parg + n , 0 , _IOC_SIZE ( cmd ) - n ) ; } else { memset ( parg , 0 , _IOC_SIZE ( cmd ) ) ; } } err = check_array_args ( cmd , parg , & array_size , & user_ptr , & kernel_ptr ) ; if ( err < 0 ) goto out ; has_array_args = err ; if ( has_array_args ) { mbuf = kmalloc ( array_size , GFP_KERNEL ) ; err = - ENOMEM ; if ( NULL == mbuf ) goto out_array_args ; err = - EFAULT ; if ( copy_from_user ( mbuf , user_ptr , array_size ) ) goto out_array_args ; * kernel_ptr = mbuf ; } err = func ( file , cmd , parg ) ; if ( err == - ENOIOCTLCMD ) <S2SV_ModEnd> <S2SV_ModStart> if ( has_array_args ) { * kernel_ptr = user_ptr ; if ( copy_to_user ( user_ptr , mbuf , array_size ) ) err = - EFAULT ; goto out_array_args ; } if ( err < 0 ) goto out ; out_array_args : <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
324,<S2SV_StartBug> if ( server . vm_enabled && server . vm_max_threads > 0 && <S2SV_EndBug> ,<S2SV_ModStart> ds_enabled && <S2SV_ModEnd> 
325,"<S2SV_StartBug> static int set_registers ( rtl8150_t * dev , u16 indx , u16 size , void * data ) <S2SV_EndBug> <S2SV_StartBug> return usb_control_msg ( dev -> udev , usb_sndctrlpipe ( dev -> udev , 0 ) , <S2SV_EndBug> <S2SV_StartBug> indx , 0 , data , size , 500 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> const <S2SV_ModStart> void * buf ; int ret ; buf = kmemdup ( data , size , GFP_NOIO ) ; if ( ! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> <S2SV_ModStart> buf <S2SV_ModEnd> <S2SV_ModStart> kfree ( buf ) ; return ret ; "
326,<S2SV_StartBug> endpoint = & usbinterface -> altsetting [ 0 ] . endpoint [ 0 ] . desc ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( usbinterface -> altsetting [ 0 ] . desc . bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev , ""Invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; } "
327,<S2SV_StartBug> case RESPONSE_RUN : <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> GTK_RESPONSE_OK : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file , NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED , NULL , ""yes"" ) ; nautilus_file_mark_desktop_file_executable ( file , parameters -> parent_window , TRUE , NULL , NULL ) ; nautilus_file_invalidate_all_attributes ( parameters -> file ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
328,<S2SV_StartBug> if ( edge_port -> lsr_event ) { <S2SV_EndBug> ,<S2SV_ModStart> urb -> actual_length > 0 && 
329,"<S2SV_StartBug> cifs_find_smb_ses ( struct TCP_Server_Info * server , char * username ) <S2SV_EndBug> <S2SV_StartBug> list_for_each ( tmp , & server -> smb_ses_list ) { <S2SV_EndBug> <S2SV_StartBug> if ( strncmp ( ses -> userName , username , MAX_USERNAME_SIZE ) ) <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> ","<S2SV_ModStart> struct smb_vol * vol ) { <S2SV_ModEnd> <S2SV_ModStart> list_for_each_entry ( ses <S2SV_ModEnd> <S2SV_ModStart> , smb_ses_list ) { switch ( server -> secType ) { case Kerberos : if ( vol -> linux_uid != ses -> linux_uid ) continue ; break ; default : <S2SV_ModEnd> <S2SV_ModStart> vol -> <S2SV_ModStart> if ( strlen ( vol -> username ) != 0 && strncmp ( ses -> password , vol -> password , MAX_PASSWORD_SIZE ) ) continue ; } "
330,"<S2SV_StartBug> if ( ( ( cfg -> g_w != ctx -> cfg . g_w ) || ( cfg -> g_h != ctx -> cfg . g_h ) ) <S2SV_EndBug> <S2SV_StartBug> && ( cfg -> g_lag_in_frames > 1 || cfg -> g_pass != VPX_RC_ONE_PASS ) ) <S2SV_EndBug> <S2SV_StartBug> ERROR ( ""Cannot<S2SV_blank>change<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>after<S2SV_blank>initialization"" ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> || <S2SV_ModEnd> <S2SV_ModStart> { if <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ( ctx -> cpi -> initial_width && ( int ) cfg -> g_w > ctx -> cpi -> initial_width ) || ( ctx -> cpi -> initial_height && ( int ) cfg -> g_h > ctx -> cpi -> initial_height ) ) ERROR ( ""Cannot<S2SV_blank>increase<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>larger<S2SV_blank>than<S2SV_blank>their<S2SV_blank>initial<S2SV_blank>values"" ) ; } "
331,"<S2SV_StartBug> input ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ! r_fs_mount ( core -> fs , ptr , input , off ) ) <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( ptr = r_fs_name ( core -> fs , core -> offset ) ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! r_fs_mount ( core -> fs , ptr , input , core -> offset ) ) <S2SV_EndBug> <S2SV_StartBug> eprintf ( ""Cannot<S2SV_blank>mount<S2SV_blank>%s\\n"" , input ) ; <S2SV_EndBug> ",<S2SV_ModStart> { input ++ ; } <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } 
332,"<S2SV_StartBug> if ( vm_flags & VM_NORESERVE ) <S2SV_EndBug> <S2SV_StartBug> if ( hugetlb_get_quota ( inode -> i_mapping , chg ) ) <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( inode -> i_mapping , chg ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> hugepage_subpool_get_pages ( spool <S2SV_ModEnd> <S2SV_ModStart> hugepage_subpool_put_pages ( spool <S2SV_ModEnd> 
333,<S2SV_StartBug> struct key * keyring ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( new -> thread_keyring ) return 0 
334,<S2SV_StartBug> static size_t scanned ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
335,<S2SV_StartBug> fptr_copy = ( struct mrb_io * ) DATA_PTR ( copy ) ; <S2SV_EndBug> <S2SV_StartBug> fptr_copy = ( struct mrb_io * ) mrb_io_alloc ( mrb ) ; <S2SV_EndBug> ,"<S2SV_ModStart> fptr_orig = io_get_open_fptr ( mrb , orig ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
336,"<S2SV_StartBug> . match_data . cmp = user_match , <S2SV_EndBug> ",<S2SV_ModStart> key_default_cmp <S2SV_ModEnd> 
337,"<S2SV_StartBug> cpi -> zbin_mode_boost = 0 ; <S2SV_EndBug> <S2SV_StartBug> vp9_init_plane_quantizers ( cpi , & cpi -> mb ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> td . 
338,"<S2SV_StartBug> utee_param_to_param ( param , callee_params ) ; <S2SV_EndBug> ","<S2SV_ModStart> res = utee_param_to_param ( utc , <S2SV_ModEnd> <S2SV_ModStart> ; if ( res != TEE_SUCCESS ) return res "
339,"<S2SV_StartBug> old_cs = get_segment_selector ( ctxt , VCPU_SREG_CS ) ; <S2SV_EndBug> <S2SV_StartBug> if ( load_segment_descriptor ( ctxt , sel , VCPU_SREG_CS ) ) <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = 0 ; <S2SV_EndBug> ","<S2SV_ModStart> struct desc_struct old_desc , new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; int cpl = ctxt -> ops -> cpl ( ctxt ) ; old_eip = ctxt -> _eip ; ops -> get_segment ( ctxt , & old_cs , & old_desc , NULL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rc = __load_segment_descriptor <S2SV_ModEnd> <S2SV_ModStart> , cpl , false , & new_desc ) ; if ( rc != X86EMUL_CONTINUE <S2SV_ModEnd> <S2SV_ModStart> rc = assign_eip_far ( ctxt , ctxt -> src . val , new_desc . l ) ; if ( rc != X86EMUL_CONTINUE ) goto fail ; ctxt -> src . val = old_cs ; rc = em_push ( ctxt ) ; if ( rc != X86EMUL_CONTINUE ) goto fail ; ctxt -> src . val = old_eip ; rc = em_push ( ctxt ) ; if ( rc != X86EMUL_CONTINUE ) goto fail ; return rc ; fail : ops -> set_segment ( ctxt , old_cs , & old_desc , 0 , VCPU_SREG_CS ) ; return rc <S2SV_ModEnd> "
340,"<S2SV_StartBug> reslevel -> band = av_malloc_array ( reslevel -> nbands , sizeof ( * reslevel -> band ) ) ; <S2SV_EndBug> <S2SV_StartBug> band -> prec = av_malloc_array ( reslevel -> num_precincts_x * <S2SV_EndBug> ",<S2SV_ModStart> av_calloc <S2SV_ModEnd> <S2SV_ModStart> av_calloc <S2SV_ModEnd> 
341,"<S2SV_StartBug> COM_DefaultExtension ( filename , sizeof ( filename ) , "".txt"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! COM_CompareExtension ( filename , "".txt"" ) ) { Com_Printf ( ""Con_Dump_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\"".txt\\""<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"" ) ; return ; } "
342,"<S2SV_StartBug> struct reloc_struct_t * got_table = calloc ( 1 , n_got * sizeof ( ut32 ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct reloc_struct_t <S2SV_ModEnd> 
343,<S2SV_StartBug> if ( info -> si_code >= 0 ) <S2SV_EndBug> <S2SV_StartBug> return - EPERM ; <S2SV_EndBug> ,<S2SV_ModStart> != SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> <S2SV_ModStart> } 
344,"<S2SV_StartBug> * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ) , ( OPJ_INT32 ) p_image -> x0 ) ; <S2SV_EndBug> <S2SV_StartBug> * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + ( p + 1 ) * p_cp -> tdx ) , ( OPJ_INT32 ) p_image -> x1 ) ; <S2SV_EndBug> <S2SV_StartBug> * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ) , ( OPJ_INT32 ) p_image -> y0 ) ; <S2SV_EndBug> <S2SV_StartBug> * p_ty1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> ty0 + ( q + 1 ) * p_cp -> tdy ) , ( OPJ_INT32 ) p_image -> y1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> "
345,"<S2SV_StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <S2SV_EndBug> <S2SV_StartBug> if ( utf8 ) x *= 3 ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , ""out<S2SV_blank>of<S2SV_blank>memory!\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> while ( * fname == sep ) fname ++ ; <S2SV_EndBug> <S2SV_StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <S2SV_EndBug> <S2SV_StartBug> if ( fname >= fe ) { <S2SV_EndBug> <S2SV_StartBug> x = ( c & 0x1F ) << 6 ; <S2SV_EndBug> <S2SV_StartBug> } while ( x ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) { char * out , * p <S2SV_ModEnd> <S2SV_ModStart> ( out = malloc ( strlen ( fname ) + 1 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> '/' || * fname == '\\\\' <S2SV_ModEnd> <S2SV_ModStart> strcpy ( out , ( * fname ) ? fname : ""x"" ) ; for ( p = out ; * p ; p ++ ) <S2SV_ModEnd> <S2SV_ModStart> p [ 0 ] == '.' && p [ 1 ] == '.' && ( p [ 2 ] == '/' || p [ 2 ] == '\\\\' <S2SV_ModEnd> <S2SV_ModStart> p [ 0 ] = p [ 1 ] = 'x' <S2SV_ModEnd> <S2SV_ModStart> } return out <S2SV_ModEnd> "
346,"<S2SV_StartBug> zval * options = NULL , * classes = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! php_var_unserialize_ex ( return_value , & p , p + buf_len , & var_hash , class_hash ) ) { <S2SV_EndBug> <S2SV_StartBug> zval_ptr_dtor ( return_value ) ; <S2SV_EndBug> <S2SV_StartBug> var_push_dtor ( & var_hash , return_value ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; zval * retval <S2SV_ModStart> retval = var_tmp_var ( & var_hash ) ; <S2SV_ModStart> retval <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ZVAL_COPY ( return_value , retval <S2SV_ModEnd> "
347,<S2SV_StartBug> kfree ( tu -> queue ) ; <S2SV_EndBug> ,<S2SV_ModStart> tu -> qhead = tu -> qtail = tu -> qused = 0 ; 
348,<S2SV_StartBug> tmp_strsize = ( u32 ) ptr -> size - 8 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
349,<S2SV_StartBug> buf = ctx -> iface -> enc . get_glob_hdrs ( ctx -> priv -> alg_priv ) ; <S2SV_EndBug> ,<S2SV_ModStart> get_alg_priv ( ctx ) <S2SV_ModEnd> 
350,"<S2SV_StartBug> else if ( Ustrcmp ( argrest , ""Mr"" ) == 0 ) received_protocol = argv [ ++ i ] ; <S2SV_EndBug> <S2SV_StartBug> uschar * hn = Ustrchr ( argrest , ':' ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( received_protocol ) { fprintf ( stderr , ""received_protocol<S2SV_blank>is<S2SV_blank>set<S2SV_blank>already\\n"" ) ; exit ( EXIT_FAILURE ) ; } else <S2SV_ModStart> hn ; if ( received_protocol ) { fprintf ( stderr , ""received_protocol<S2SV_blank>is<S2SV_blank>set<S2SV_blank>already\\n"" ) ; exit ( EXIT_FAILURE ) ; } "
351,<S2SV_StartBug> if ( info -> si_code >= 0 ) <S2SV_EndBug> <S2SV_StartBug> return - EPERM ; <S2SV_EndBug> ,<S2SV_ModStart> != SI_QUEUE ) { WARN_ON_ONCE ( info -> si_code < 0 ) ; <S2SV_ModEnd> <S2SV_ModStart> } 
352,"<S2SV_StartBug> s -> off = strtoll ( p , NULL , 10 ) ; <S2SV_EndBug> <S2SV_StartBug> s -> filesize = strtoll ( slash + 1 , NULL , 10 ) ; <S2SV_EndBug> ",<S2SV_ModStart> strtoull <S2SV_ModEnd> <S2SV_ModStart> strtoull <S2SV_ModEnd> 
353,"<S2SV_StartBug> unsigned int maxw , maxh , max ; <S2SV_EndBug> <S2SV_StartBug> unsigned int i , j ; <S2SV_EndBug> <S2SV_StartBug> maxw = ( unsigned int ) img -> comps [ 0 ] . w ; maxh = ( unsigned int ) img -> comps [ 0 ] . h ; <S2SV_EndBug> <S2SV_StartBug> d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0U ; i < maxh ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> for ( j = 0U ; j < ( maxw & ~ ( unsigned int ) 1U ) ; j += 2U ) <S2SV_EndBug> <S2SV_StartBug> if ( j < maxw ) { <S2SV_EndBug> <S2SV_StartBug> # if defined ( USE_JPWL ) || defined ( USE_MJ2 ) <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 1 ] . w = maxw ; img -> comps [ 1 ] . h = maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . w = maxw ; img -> comps [ 2 ] . h = maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . w = ( OPJ_UINT32 ) maxw ; img -> comps [ 2 ] . h = ( OPJ_UINT32 ) maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . dy = img -> comps [ 0 ] . dy ; <S2SV_EndBug> <S2SV_StartBug> if ( r ) free ( r ) ; <S2SV_EndBug> <S2SV_StartBug> if ( g ) free ( g ) ; <S2SV_EndBug> <S2SV_StartBug> if ( b ) free ( b ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> , offx , loopmaxw <S2SV_ModStart> size_t i <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> offx = img -> x0 & 1U ; loopmaxw = maxw - offx ; <S2SV_ModStart> size_t j ; if ( offx > 0U ) { sycc_to_rgb ( offset , upb , * y , 0 , 0 , r , g , b ) ; ++ y ; ++ r ; ++ g ; ++ b ; } <S2SV_ModStart> loopmaxw <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> loopmaxw <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> img -> comps [ 2 ] . w = img -> comps [ 0 ] . w ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> h = img -> comps [ 0 ] . h ; img -> comps [ 1 ] . dx = <S2SV_ModEnd> <S2SV_ModStart> dx = img -> comps [ 0 ] . dx ; img -> comps [ 1 ] . dy = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> color_space = OPJ_CLRSPC_SRGB <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
354,"<S2SV_StartBug> nfs4_state_set_mode_locked ( struct nfs4_state * state , mode_t mode ) <S2SV_EndBug> <S2SV_StartBug> if ( state -> state == mode ) <S2SV_EndBug> <S2SV_StartBug> if ( ( mode & FMODE_WRITE ) != ( state -> state & FMODE_WRITE ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( mode & FMODE_WRITE ) <S2SV_EndBug> <S2SV_StartBug> state -> state = mode ; <S2SV_EndBug> ",<S2SV_ModStart> fmode_t fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> 
355,"<S2SV_StartBug> ptr = sshpkt_ptr ( ssh , & dlen ) ; <S2SV_EndBug> ","<S2SV_ModStart> ssh_dispatch_set ( ssh , SSH2_MSG_KEXINIT , NULL ) ; "
356,"<S2SV_StartBug> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , <S2SV_EndBug> <S2SV_StartBug> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , <S2SV_EndBug> <S2SV_StartBug> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , <S2SV_EndBug> <S2SV_StartBug> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , <S2SV_EndBug> ","<S2SV_ModStart> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.foo<S2SV_blank>==<S2SV_blank>\\""foo\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.empty<S2SV_blank>==<S2SV_blank>\\""\\""<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.empty()<S2SV_blank>==<S2SV_blank>\\""\\""<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[1].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>or<S2SV_blank>true<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[0]<S2SV_blank>==<S2SV_blank>0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[1]<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[256]<S2SV_blank>==<S2SV_blank>256<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[0]<S2SV_blank>==<S2SV_blank>\\""foo\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[2]<S2SV_blank>==<S2SV_blank>\\""baz\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\""foo\\""]<S2SV_blank>==<S2SV_blank>\\""foo\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\""bar\\""]<S2SV_blank>==<S2SV_blank>\\""bar\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2,3)<S2SV_blank>==<S2SV_blank>6<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0,3.0)<S2SV_blank>==<S2SV_blank>6.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>==<S2SV_blank>tests.foobar(1)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>!=<S2SV_blank>tests.foobar(2)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.length(\\""dummy\\"")<S2SV_blank>==<S2SV_blank>5<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" <S2SV_ModEnd> <S2SV_ModStart> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" <S2SV_ModEnd> <S2SV_ModStart> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" <S2SV_ModEnd> <S2SV_ModStart> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\""foo\\"")<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\""bar\\"")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/i,\\""FOO\\\\nBAR\\"")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/is,\\""FOO\\\\nBAR\\"")<S2SV_blank>==<S2SV_blank>7\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" <S2SV_ModEnd> "
357,<S2SV_StartBug> ( void ) CloseBlob ( pwp_image ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
358,"<S2SV_StartBug> char lbase [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> char strbase [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> char ltest [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> char strtest [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> int nbase = sscanf ( lbase , ""%255[^\\r\\n]"" , strbase ) ; <S2SV_EndBug> <S2SV_StartBug> int ntest = sscanf ( ltest , ""%255[^\\r\\n]"" , strtest ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( nbase != 255 && ntest != 255 ) ; <S2SV_EndBug> ","<S2SV_ModStart> 512 <S2SV_ModEnd> <S2SV_ModStart> 512 <S2SV_ModEnd> <S2SV_ModStart> 512 <S2SV_ModEnd> <S2SV_ModStart> 512 <S2SV_ModEnd> <S2SV_ModStart> ""%511[^\\r\\n]"" <S2SV_ModEnd> <S2SV_ModStart> ""%511[^\\r\\n]"" <S2SV_ModEnd> <S2SV_ModStart> 511 <S2SV_ModEnd> <S2SV_ModStart> 511 <S2SV_ModEnd> "
359,"<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = cdc_ncm_bind_common ( dev , intf , CDC_NCM_DATA_ALTSETTING_NCM , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> usbnet_link_change ( dev , 0 , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
360,"<S2SV_StartBug> memcpy ( elem . in_sg [ 0 ] . iov_base , buf , len ) ; <S2SV_EndBug> ","<S2SV_ModStart> iov_from_buf <S2SV_ModEnd> <S2SV_ModStart> , elem . in_num , 0 <S2SV_ModEnd> "
361,"<S2SV_StartBug> i , ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms . stepsizes [ i ] ) , <S2SV_EndBug> <S2SV_StartBug> i , ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms . stepsizes [ i ] ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> JAS_CAST ( unsigned , <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> JAS_CAST ( unsigned , <S2SV_ModEnd> <S2SV_ModStart> ) "
362,"<S2SV_StartBug> err = xt_check_entry_offsets ( e , e -> target_offset , e -> next_offset ) ; <S2SV_EndBug> ","<S2SV_ModStart> elems , e -> "
363,<S2SV_StartBug> } else if ( encoding == 1 && ( c -> bpp == 6 || c -> bpp == 8 ) ) { <S2SV_EndBug> ,<S2SV_ModStart> && c -> format != CHUNKY 
364,"<S2SV_StartBug> isoclns_print ( ndo , p + 1 , length - 1 , caplen - 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
365,<S2SV_StartBug> snd_seq_timer_stop ( q -> timer ) ; <S2SV_EndBug> <S2SV_StartBug> snd_seq_timer_close ( q ) ; <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & q -> timer_mutex ) ; <S2SV_ModStart> ) ; mutex_unlock ( & q -> timer_mutex 
366,"<S2SV_StartBug> u64 start = offset >> PAGE_CACHE_SHIFT ; <S2SV_EndBug> <S2SV_StartBug> u64 end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; <S2SV_EndBug> <S2SV_StartBug> ! ( mode & FALLOC_FL_KEEP_SIZE ) ) { <S2SV_EndBug> <S2SV_StartBug> i_size_write ( inode , offset + to ) ; <S2SV_EndBug> <S2SV_StartBug> mark_inode_dirty ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> return error ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned int nr_blks ; sector_t lblock <S2SV_ModEnd> <S2SV_ModStart> inode -> i_blkbits ; error = gfs2_meta_inode_buffer ( ip , & dibh ) ; if ( unlikely ( error ) ) return error ; gfs2_trans_add_bh ( ip -> i_gl , dibh , 1 ) ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip , NULL ) ; if ( unlikely ( error ) ) goto out ; } while ( len ) { struct buffer_head bh_map = { . b_state = 0 , . b_blocknr = 0 } ; bh_map . b_size = len ; set_buffer_zeronew ( & bh_map ) ; error = gfs2_block_map ( inode , lblock , & bh_map , 1 ) ; if ( unlikely ( error ) ) goto out ; len -= bh_map . b_size ; nr_blks = bh_map . b_size >> inode -> i_blkbits ; lblock += nr_blks ; if ( ! buffer_new ( & bh_map ) ) continue ; if ( unlikely ( ! buffer_zeronew ( & bh_map ) ) ) { error = - EIO ; goto out ; } } if <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> len ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> brelse ( dibh ) ; "
367,<S2SV_StartBug> VipsForeignLoadClass * class = VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; <S2SV_EndBug> <S2SV_StartBug> vips_image_pio_input ( load -> real ) ) <S2SV_EndBug> <S2SV_StartBug> return ( NULL ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> || <S2SV_ModEnd> <S2SV_ModStart> { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> 
368,"<S2SV_StartBug> const char * name = fit_get_name ( fit , noffset , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( strchr ( name , '@' ) ) { err_msg = ""Node<S2SV_blank>name<S2SV_blank>contains<S2SV_blank>@"" ; goto error ; } "
369,<S2SV_StartBug> if ( retval ) <S2SV_EndBug> ,<S2SV_ModStart> ! retval ) <S2SV_ModEnd> 
370,"<S2SV_StartBug> if ( kfifo_alloc ( & state -> rx_kfifo , CX23888_IR_RX_KFIFO_SIZE , GFP_KERNEL ) ) <S2SV_EndBug> <S2SV_StartBug> state -> dev = dev ; <S2SV_EndBug> ",<S2SV_ModStart> { kfree ( state ) ; <S2SV_ModStart> } 
371,<S2SV_StartBug> size += service_name_tlv_length ; <S2SV_EndBug> <S2SV_StartBug> size += miux_tlv_length ; <S2SV_EndBug> <S2SV_StartBug> size += rw_tlv_length ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> if ( ! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> if ( ! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; } 
372,<S2SV_StartBug> struct ssh * ssh = active_state ; <S2SV_EndBug> <S2SV_StartBug> if ( options . compression ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
373,"<S2SV_StartBug> vpx_codec_dec_cfg_t * cfg , <S2SV_EndBug> <S2SV_StartBug> else if ( ( flags & VPX_CODEC_USE_XMA ) && ! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) <S2SV_EndBug> <S2SV_StartBug> res = VPX_CODEC_OK ; <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> priv ) <S2SV_EndBug> ",<S2SV_ModStart> const <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
374,<S2SV_StartBug> unsigned int channo ; <S2SV_EndBug> ,<S2SV_ModStart> ; cdef -> ents = 0 
375,<S2SV_StartBug> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; <S2SV_EndBug> ,<S2SV_ModStart> TJA1100_CONFIG1_MII_MODE_RMII_25MHZ_XTAL <S2SV_ModEnd> 
376,"<S2SV_StartBug> if ( ip_options_echo ( & icmp_param . replyopts , skb_in ) ) <S2SV_EndBug> <S2SV_StartBug> ipc . opt = & icmp_param . replyopts ; <S2SV_EndBug> <S2SV_StartBug> room -= sizeof ( struct iphdr ) + icmp_param . replyopts . optlen ; <S2SV_EndBug> ",<S2SV_ModStart> . opt . opt <S2SV_ModStart> . opt <S2SV_ModStart> opt . opt . 
377,"<S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 4 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_32BITS <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
378,<S2SV_StartBug> skb_dst_drop ( skb ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( IPCB ( skb ) -> opt . optlen ) ) skb_dst_force ( skb ) ; else 
379,<S2SV_StartBug> crypto_free_skcipher ( private ) ; <S2SV_EndBug> ,<S2SV_ModStart> struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm <S2SV_ModEnd> 
380,<S2SV_StartBug> struct inode * inode = file_inode ( bprm -> file ) ; <S2SV_EndBug> <S2SV_StartBug> bprm -> cred -> euid = current_euid ( ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> bprm_fill_uid ( bprm ) ; <S2SV_ModEnd> 
381,<S2SV_StartBug> return headcount ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( datalen > 0 ) ) { r = UIO_MAXIOV + 1 ; goto err ; } 
382,<S2SV_StartBug> dlen -= 2 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( dlen < 2 ) break ; <S2SV_ModStart>  <S2SV_ModEnd> 
383,"<S2SV_StartBug> rq = blk_mq_tag_to_rq ( tags , off + bit ) ; <S2SV_EndBug> ",<S2SV_ModStart> tags -> rqs [ <S2SV_ModEnd> <S2SV_ModStart> ] <S2SV_ModEnd> 
384,<S2SV_StartBug> else if ( ( flags & VPX_CODEC_USE_XMA ) && ! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> priv ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
385,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
386,<S2SV_StartBug> if ( skb_is_nonlinear ( skb ) ) <S2SV_EndBug> ,<S2SV_ModStart> ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr 
387,"<S2SV_StartBug> encode_share_access ( xdr , arg -> open_flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> fmode <S2SV_ModEnd> 
388,"<S2SV_StartBug> isoclns_print ( ndo , bp , len , ndo -> ndo_snapend - bp ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo , bp , len <S2SV_ModStart>  <S2SV_ModEnd> "
389,<S2SV_StartBug> tilebuf = _TIFFmalloc ( tile_buffsize ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"" , ""Integer<S2SV_blank>overflow<S2SV_blank>when<S2SV_blank>calculating<S2SV_blank>buffer<S2SV_blank>size."" ) ; exit ( - 1 ) ; } <S2SV_ModStart> + 3 <S2SV_ModStart> 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize + 1 ] = 0 ; tilebuf [ tile_buffsize + 2 ] = "
390,"<S2SV_StartBug> int fd = open ( optarg , O_WRONLY | O_APPEND | O_CREAT , S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH ) ; <S2SV_EndBug> ",<S2SV_ModStart> | O_NOFOLLOW 
391,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> assert ( error == 0 ) ; <S2SV_EndBug> ,<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModStart> return error <S2SV_ModEnd> 
392,<S2SV_StartBug> struct o2nm_cluster * cluster = to_o2nm_cluster_from_node ( node ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tmp && tmp == cluster -> cl_has_local && <S2SV_EndBug> <S2SV_StartBug> return - EBUSY ; <S2SV_EndBug> <S2SV_StartBug> if ( tmp && ! cluster -> cl_has_local ) { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> <S2SV_StartBug> return count ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if ( ! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> { ret = <S2SV_ModEnd> <S2SV_ModStart> goto out ; } <S2SV_ModStart> goto out <S2SV_ModEnd> <S2SV_ModStart> ret = count ; out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> 
393,"<S2SV_StartBug> if ( fscanf ( fp , ""<S2SV_blank>Number<S2SV_blank>of<S2SV_blank>pts<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>format<S2SV_blank>=<S2SV_blank>%s\\n"" , & n , typestr ) != 2 ) <S2SV_EndBug> ","<S2SV_ModStart> ""<S2SV_blank>Number<S2SV_blank>of<S2SV_blank>pts<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>format<S2SV_blank>=<S2SV_blank>%127s\\n"" <S2SV_ModEnd> "
394,<S2SV_StartBug> if ( data [ 1 ] <= 127 ) <S2SV_EndBug> <S2SV_StartBug> else op -> jump = addr - ( 256 - data [ 1 ] ) + op -> size ; <S2SV_EndBug> <S2SV_StartBug> op -> fail = addr + op -> size ; <S2SV_EndBug> ,<S2SV_ModStart> len > 1 ) { if ( <S2SV_ModStart> { <S2SV_ModStart> } else { <S2SV_ModEnd> <S2SV_ModStart> } } else { op -> jump = addr ; } 
395,<S2SV_StartBug> struct net * net = sock_net ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> bh_lock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_owned_by_user ( asoc -> base . sk ) ) { <S2SV_EndBug> <S2SV_StartBug> asoc -> base . sk -> sk_err = - error ; <S2SV_EndBug> <S2SV_StartBug> bh_unlock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> sock * sk = asoc -> base . sk ; struct <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
396,"<S2SV_StartBug> s = strchr ( token , '?' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> 
397,<S2SV_StartBug> return - E_NOTHANDLED ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ninst == 0 ) return - E_INVALID 
398,<S2SV_StartBug> ND_TCHECK ( lshp -> ls_type ) ; <S2SV_EndBug> ,<S2SV_ModStart> ls_length <S2SV_ModEnd> 
399,"<S2SV_StartBug> static int jas_iccputuint ( jas_stream_t * out , int n , ulonglong val ) <S2SV_EndBug> ",<S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> 
400,"<S2SV_StartBug> memcpy ( tim . bitmap , p + ( tim . length - 3 ) , <S2SV_EndBug> <S2SV_StartBug> ( tim . length - 3 ) ) ; <S2SV_EndBug> <S2SV_StartBug> length -= tim . length - 3 ; <S2SV_EndBug> ","<S2SV_ModStart> offset + 3 , <S2SV_ModEnd> <S2SV_ModStart> ; offset += <S2SV_ModEnd> <S2SV_ModStart> ; length -= <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
401,"<S2SV_StartBug> pipe_buf_get ( ipipe , ibuf ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! <S2SV_ModStart> ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> 
402,"<S2SV_StartBug> r_buf_set_bytes ( tbuf , buf , sz ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! tbuf ) { return NULL ; } 
403,"<S2SV_StartBug> mm_segment_t old_fs ; <S2SV_EndBug> <S2SV_StartBug> ret = sys_wait4 ( pid , ustatus , options , ( struct rusage __user * ) & r ) ; <S2SV_EndBug> <S2SV_StartBug> err |= __put_user ( r . ru_utime . tv_sec , & ur -> ru_utime . tv_sec ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned int status = 0 ; <S2SV_ModStart> ( unsigned int __user * ) & status <S2SV_ModEnd> <S2SV_ModStart> put_user ( status , ustatus ) ; err |= "
404,"<S2SV_StartBug> { LXC_AUTO_PROC_MASK , LXC_AUTO_PROC_MIXED , ""%r/proc/sys/net"" , ""%r/proc/net"" , NULL , MS_BIND , NULL } , <S2SV_EndBug> <S2SV_StartBug> { LXC_AUTO_PROC_MASK , LXC_AUTO_PROC_MIXED , ""%r/proc/net"" , ""%r/proc/sys/net"" , NULL , MS_MOVE , NULL } , <S2SV_EndBug> <S2SV_StartBug> r = mount ( source , destination , default_mounts [ i ] . fstype , mflags , default_mounts [ i ] . options ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%r/proc/tty"" <S2SV_ModEnd> <S2SV_ModStart> ""%r/proc/tty"" <S2SV_ModEnd> <S2SV_ModStart> safe_mount ( source , destination , default_mounts [ i ] . fstype , mflags , default_mounts [ i ] . options , conf -> rootfs . path ? conf -> rootfs . mount : NULL <S2SV_ModEnd> "
405,<S2SV_StartBug> ke = & md -> chain [ ISAKMP_NEXT_v2KE ] -> payload . v2ke ; <S2SV_EndBug> <S2SV_StartBug> libreswan_log ( <S2SV_EndBug> <S2SV_StartBug> return v2N_INVALID_KE_PAYLOAD ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! md -> chain [ ISAKMP_NEXT_v2KE ] ) { if ( md -> chain [ ISAKMP_NEXT_v2N ] ) { libreswan_log ( ""Received<S2SV_blank>Notify(%d):<S2SV_blank>%s"" , md -> chain [ ISAKMP_NEXT_v2N ] -> payload . v2n . isan_type , enum_name ( & ikev2_notify_names , md -> chain [ ISAKMP_NEXT_v2N ] -> payload . v2n . isan_type ) ) ; } libreswan_log ( ""rejecting<S2SV_blank>I1<S2SV_blank>from<S2SV_blank>%s:%u,<S2SV_blank>no<S2SV_blank>KE<S2SV_blank>payload<S2SV_blank>present"" , fromname , md -> sender_port ) ; return STF_FAIL + v2N_INVALID_KE_PAYLOAD ; } ke = & md -> chain [ ISAKMP_NEXT_v2KE ] -> payload . v2ke ; st -> st_oakley . group = lookup_group ( ke -> isak_group ) ; if ( st -> st_oakley . group == NULL ) { libreswan_log ( <S2SV_ModEnd> <S2SV_ModStart> STF_FAIL + "
406,"<S2SV_StartBug> void nsc_encode ( NSC_CONTEXT * context , const BYTE * bmpdata , UINT32 rowstride ) <S2SV_EndBug> <S2SV_StartBug> nsc_encode_argb_to_aycocg ( context , bmpdata , rowstride ) ; <S2SV_EndBug> <S2SV_StartBug> nsc_encode_subsampling ( context ) ; <S2SV_EndBug> ",<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> if ( ! context || ! bmpdata || ( rowstride == 0 ) ) return FALSE ; if ( ! <S2SV_ModStart> ) return FALSE <S2SV_ModStart> if ( ! <S2SV_ModStart> ) return FALSE ; } return TRUE ; <S2SV_ModEnd> 
407,"<S2SV_StartBug> void vp9_tree_probs_from_distribution ( vp9_tree tree , <S2SV_EndBug> ",<S2SV_ModStart> vpx_tree <S2SV_ModEnd> 
408,<S2SV_StartBug> if ( stringset == ETH_SS_STATS ) <S2SV_EndBug> ,<S2SV_ModStart> || stringset == ETH_SS_PRIV_FLAGS 
409,<S2SV_StartBug> return ( ( image -> columns + 7 ) / 8 ) ; <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) * GetPSDPacketSize ( image ) 
410,"<S2SV_StartBug> p_dev -> fd = open ( dev_path , O_RDWR | O_CLOEXEC ) ; <S2SV_EndBug> <S2SV_StartBug> p_dev -> fd = open ( dev_path , O_RDWR | O_CLOEXEC ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
411,<S2SV_StartBug> alt = pcu -> ctrl_intf -> cur_altsetting ; <S2SV_EndBug> <S2SV_StartBug> alt = pcu -> data_intf -> cur_altsetting ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> if ( ! pcu -> data_intf ) return - EINVAL ; 
412,"<S2SV_StartBug> const char * name = d -> name ; <S2SV_EndBug> <S2SV_StartBug> struct device dev = d -> udev -> dev ; <S2SV_EndBug> <S2SV_StartBug> dev_info ( & dev , ""%s:<S2SV_blank>\'%s\'<S2SV_blank>successfully<S2SV_blank>deinitialized<S2SV_blank>and<S2SV_blank>disconnected\\n"" , <S2SV_EndBug> <S2SV_StartBug> KBUILD_MODNAME , name ) ; <S2SV_EndBug> ","<S2SV_ModStart> devname = kstrdup ( dev_name ( & <S2SV_ModEnd> <S2SV_ModStart> ) , GFP_KERNEL ) ; const char * drvname = d -> name <S2SV_ModStart> pr_info ( ""%s:<S2SV_blank>\'%s:%s\'<S2SV_blank>successfully<S2SV_blank>deinitialized<S2SV_blank>and<S2SV_blank>disconnected\\n"" <S2SV_ModEnd> <S2SV_ModStart> drvname , devname ) ; kfree ( devname <S2SV_ModEnd> "
413,<S2SV_StartBug> xstep = picomp -> hsamp * ( 1 << <S2SV_EndBug> <S2SV_StartBug> ystep = picomp -> vsamp * ( 1 << <S2SV_EndBug> <S2SV_StartBug> if ( ( ( pi -> x == pi -> xstart && ( ( trx0 << r ) % ( 1 << rpx ) ) ) || <S2SV_EndBug> <S2SV_StartBug> ( ( pi -> y == pi -> ystart && ( ( try0 << r ) % ( 1 << rpy ) ) ) || <S2SV_EndBug> ,"<S2SV_ModStart> if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> "
414,"<S2SV_StartBug> r = conv_encoding ( ci -> pattern_enc , ci -> target_enc , pattern , pattern_end , <S2SV_EndBug> ",<S2SV_ModStart> return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> 
415,"<S2SV_StartBug> static void InsertRow ( Image * image , ssize_t depth , unsigned char * p , ssize_t y , <S2SV_EndBug> <S2SV_StartBug> size_t bit ; ssize_t x ; <S2SV_EndBug> <S2SV_StartBug> register Quantum * q ; <S2SV_EndBug> <S2SV_StartBug> switch ( depth ) <S2SV_EndBug> <S2SV_StartBug> q = QueueAuthenticPixels ( image , 0 , y , image -> columns , 1 , exception ) ; <S2SV_EndBug> <S2SV_StartBug> index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) ) != 0 ) ? 0x01 : 0x00 ) ; <S2SV_EndBug> <S2SV_StartBug> q += GetPixelChannels ( image ) ; <S2SV_EndBug> <S2SV_StartBug> for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) <S2SV_EndBug> <S2SV_StartBug> index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) ) != 0 ) ? 0x01 : 0x00 ) ; <S2SV_EndBug> <S2SV_StartBug> q += GetPixelChannels ( image ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) SyncAuthenticPixels ( image , exception ) ; <S2SV_EndBug> <S2SV_StartBug> q = QueueAuthenticPixels ( image , 0 , y , image -> columns , 1 , exception ) ; <S2SV_EndBug> <S2SV_StartBug> if ( q == ( Quantum * ) NULL ) <S2SV_EndBug> <S2SV_StartBug> index = ConstrainColormapIndex ( image , ( * p >> 6 ) & 0x3 , exception ) ; <S2SV_EndBug> <S2SV_StartBug> q += GetPixelChannels ( image ) ; <S2SV_EndBug> <S2SV_StartBug> index = ConstrainColormapIndex ( image , ( * p >> 4 ) & 0x3 , exception ) ; <S2SV_EndBug> <S2SV_StartBug> q += GetPixelChannels ( image ) ; <S2SV_EndBug> <S2SV_StartBug> index = ConstrainColormapIndex ( image , ( * p >> 4 ) & 0xf , exception ) ; <S2SV_EndBug> <S2SV_StartBug> q += GetPixelChannels ( image ) ; <S2SV_EndBug> <S2SV_StartBug> p ++ ; <S2SV_EndBug> <S2SV_StartBug> q = QueueAuthenticPixels ( image , 0 , y , image -> columns , 1 , exception ) ; <S2SV_EndBug> <S2SV_StartBug> if ( q == ( Quantum * ) NULL ) <S2SV_EndBug> <S2SV_StartBug> index = ConstrainColormapIndex ( image , * p , exception ) ; <S2SV_EndBug> ","<S2SV_ModStart> MagickBooleanType <S2SV_ModEnd> <S2SV_ModStart> bpp <S2SV_ModEnd> <S2SV_ModStart> int bit ; Quantum index <S2SV_ModEnd> <S2SV_ModStart> * q ; ssize_t x ; q = QueueAuthenticPixels ( image , 0 , y , image -> columns , 1 , exception ) ; if ( q == ( Quantum * ) NULL ) return ( MagickFalse ) <S2SV_ModEnd> <S2SV_ModStart> bpp <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; <S2SV_ModStart> ssize_t ) ( <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> for ( x = 0 ; x < ( ( ssize_t ) <S2SV_ModEnd> <S2SV_ModStart> - 3 ) ; x += 4 ) { index = ConstrainColormapIndex ( image , ( * p >> 6 ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; index = ConstrainColormapIndex ( image , ( * p >> 4 ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; index = ConstrainColormapIndex ( image , ( * p >> 2 ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; index = ConstrainColormapIndex ( image , ( * p ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; p ++ ; } if ( ( image -> columns % 4 ) != 0 ) { index = ConstrainColormapIndex ( image , ( * p >> 6 ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; if ( ( image -> columns % 4 ) > 1 ) { index = ConstrainColormapIndex ( image , ( * p >> 4 ) & 0x3 <S2SV_ModEnd> <S2SV_ModStart> SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; if ( ( image -> columns % 4 ) > 2 ) { index = ConstrainColormapIndex ( image , ( * p >> 2 ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; } } p ++ ; } break ; } case 4 : { <S2SV_ModEnd> <S2SV_ModStart> 4 ) & 0x0f <S2SV_ModEnd> <S2SV_ModStart> if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; <S2SV_ModStart> ) & 0x0f <S2SV_ModEnd> <S2SV_ModStart> if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; p ++ ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 0x0f <S2SV_ModEnd> <S2SV_ModStart> if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; p ++ ; <S2SV_ModStart> } <S2SV_ModEnd> <S2SV_ModStart> for ( x = 0 ; x < ( ssize_t ) <S2SV_ModEnd> <S2SV_ModStart> ; x ++ ) { index = ConstrainColormapIndex ( image , * p <S2SV_ModEnd> <S2SV_ModStart> SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; p ++ ; q += GetPixelChannels ( image ) ; } } break ; case 24 : <S2SV_ModEnd> <S2SV_ModStart> SetPixelRed ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelGreen ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelBlue ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; q += GetPixelChannels ( image ) ; } break ; } if ( ! SyncAuthenticPixels ( image <S2SV_ModEnd> <S2SV_ModStart> ) return ( MagickFalse ) ; return ( MagickTrue ) ; <S2SV_ModEnd> "
416,"<S2SV_StartBug> register const u_char * tptr ) <S2SV_EndBug> <S2SV_StartBug> u_int hexdump = FALSE ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "",<S2SV_blank>%s"" , ipaddr_string ( ndo , tptr + 1 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "",<S2SV_blank>%s"" , ip6addr_string ( ndo , tptr + 1 ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> , const u_int length ) { u_int network_addr_type ; u_int <S2SV_ModEnd> <S2SV_ModStart> if ( length < 1 ) { ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>Network<S2SV_blank>Address<S2SV_blank>Type<S2SV_blank>(invalid,<S2SV_blank>no<S2SV_blank>data"" ) ) ; return hexdump ; } <S2SV_ModStart> if ( length != 1 + 4 ) { ND_PRINT ( ( ndo , ""(invalid<S2SV_blank>IPv4<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)"" , length - 1 ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> if ( length != 1 + 16 ) { ND_PRINT ( ( ndo , ""(invalid<S2SV_blank>IPv6<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)"" , length - 1 ) ) ; hexdump = TRUE ; break ; } "
417,"<S2SV_StartBug> u64 msr_data ; <S2SV_EndBug> <S2SV_StartBug> cs . dpl = 3 ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = reg_read ( ctxt , VCPU_REGS_RDX ) ; <S2SV_EndBug> <S2SV_StartBug> * reg_write ( ctxt , VCPU_REGS_RSP ) = reg_read ( ctxt , VCPU_REGS_RCX ) ; <S2SV_EndBug> ","<S2SV_ModStart> , rcx , rdx <S2SV_ModStart> rcx = reg_read ( ctxt , VCPU_REGS_RCX ) ; rdx = reg_read ( ctxt , VCPU_REGS_RDX ) ; <S2SV_ModStart> if ( is_noncanonical_address ( rcx ) || is_noncanonical_address ( rdx ) ) return emulate_gp ( ctxt , 0 ) ; <S2SV_ModStart> rdx <S2SV_ModEnd> <S2SV_ModStart> rcx <S2SV_ModEnd> "
418,"<S2SV_StartBug> return sprintf ( buf , ""%s\\n"" , pdev -> driver_override ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> ssize_t len ; device_lock ( dev ) ; len = <S2SV_ModEnd> <S2SV_ModStart> device_unlock ( dev ) ; return len ; 
419,<S2SV_StartBug> BIO * tmpout = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmpout = BIO_new ( BIO_s_mem ( ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ; tmpout = cms_get_text_bio ( out , flags ) ; if ( ! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT , ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in , buf , sizeof ( buf ) ) ; if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if ( ! BIO_get_cipher_status ( in ) ) goto err ; } if ( i < 0 ) goto err ; break ; } if ( tmpout && ( BIO_write ( tmpout , buf , i ) != i ) ) goto err ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
420,"<S2SV_StartBug> rs . respond ( rs . arg , retval , NULL , NULL , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( retval == 0 ) rs . enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ; 
421,"<S2SV_StartBug> static void cost ( int * costs , vp9_tree tree , const vp9_prob * probs , <S2SV_EndBug> <S2SV_StartBug> const vp9_prob prob = probs [ i / 2 ] ; <S2SV_EndBug> <S2SV_StartBug> const vp9_tree_index ii = tree [ i + b ] ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_tree <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_index <S2SV_ModEnd> 
422,<S2SV_StartBug> create_option_search_table ( ) ; <S2SV_EndBug> ,"<S2SV_ModStart> # ifdef HAVE_MKDTEMP tmp_dir = mkdtemp ( Strnew_m_charp ( tmp_dir , ""/w3m-XXXXXX"" , NULL ) -> ptr ) ; if ( tmp_dir == NULL ) tmp_dir = rc_dir ; # endif "
423,"<S2SV_StartBug> switch ( af ) { <S2SV_EndBug> <S2SV_StartBug> strncpy ( addr_text , <S2SV_EndBug> <S2SV_StartBug> ( ( struct sockaddr_un * ) sock_addr ) -> sun_path , <S2SV_EndBug> ","<S2SV_ModStart> size_t pathlen = 0 ; <S2SV_ModStart> pathlen = sizeof ( <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( MAXPATHLEN <= pathlen ) { pathlen = MAXPATHLEN - 1 ; } strncpy ( addr_text , ( ( struct sockaddr_un * ) sock_addr ) -> sun_path , pathlen ) ; addr_text [ pathlen <S2SV_ModEnd> "
424,"<S2SV_StartBug> static INLINE void write_buffer_16x16 ( int16_t * output , __m128i * in0 , <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> 
425,"<S2SV_StartBug> err = synth_devs [ dev ] -> load_patch ( dev , fmt , buf , p + 4 , c , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> + p <S2SV_ModEnd> 
426,"<S2SV_StartBug> struct hstate * h = hstate_vma ( vma ) ; <S2SV_EndBug> <S2SV_StartBug> struct page * page ; <S2SV_EndBug> <S2SV_StartBug> if ( hugetlb_get_quota ( inode -> i_mapping , chg ) ) <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( inode -> i_mapping , chg ) ; <S2SV_EndBug> <S2SV_StartBug> set_page_private ( page , ( unsigned long ) mapping ) ; <S2SV_EndBug> ",<S2SV_ModStart> hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> hugepage_subpool_get_pages ( spool <S2SV_ModEnd> <S2SV_ModStart> hugepage_subpool_put_pages ( spool <S2SV_ModEnd> <S2SV_ModStart> spool <S2SV_ModEnd> 
427,"<S2SV_StartBug> DPRINTF ( 4 , ( ""enabling<S2SV_blank>filegen<S2SV_blank>for<S2SV_blank>%s<S2SV_blank>statistics<S2SV_blank>\'%s%s\'\\n"" , <S2SV_EndBug> <S2SV_StartBug> filegen_flag = filegen -> flag ; <S2SV_EndBug> ","<S2SV_ModStart> if ( NULL == filegen ) { msyslog ( LOG_ERR , ""stats<S2SV_blank>%s<S2SV_blank>unrecognized"" , filegen_string ) ; continue ; } <S2SV_ModStart> if ( NULL == filegen ) { msyslog ( LOG_ERR , ""filegen<S2SV_blank>category<S2SV_blank>\'%s\'<S2SV_blank>unrecognized"" , filegen_file ) ; continue ; } "
428,"<S2SV_StartBug> touch_file ( t -> stamp_path , true , t -> last_trigger . realtime , UID_INVALID , GID_INVALID , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> MODE_INVALID <S2SV_ModEnd> 
429,"<S2SV_StartBug> static void fadst16 ( const int16_t * input , int16_t * output ) { <S2SV_EndBug> <S2SV_StartBug> int s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 , s8 , s9 , s10 , s11 , s12 , s13 , s14 , s15 ; <S2SV_EndBug> <S2SV_StartBug> int x0 = input [ 15 ] ; <S2SV_EndBug> <S2SV_StartBug> int x1 = input [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> int x2 = input [ 13 ] ; <S2SV_EndBug> <S2SV_StartBug> int x3 = input [ 2 ] ; <S2SV_EndBug> <S2SV_StartBug> int x4 = input [ 11 ] ; <S2SV_EndBug> <S2SV_StartBug> int x5 = input [ 4 ] ; <S2SV_EndBug> <S2SV_StartBug> int x6 = input [ 9 ] ; <S2SV_EndBug> <S2SV_StartBug> int x7 = input [ 6 ] ; <S2SV_EndBug> <S2SV_StartBug> int x8 = input [ 7 ] ; <S2SV_EndBug> <S2SV_StartBug> int x9 = input [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> int x10 = input [ 5 ] ; <S2SV_EndBug> <S2SV_StartBug> int x11 = input [ 10 ] ; <S2SV_EndBug> <S2SV_StartBug> int x12 = input [ 3 ] ; <S2SV_EndBug> <S2SV_StartBug> int x13 = input [ 12 ] ; <S2SV_EndBug> <S2SV_StartBug> int x14 = input [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> int x15 = input [ 14 ] ; <S2SV_EndBug> <S2SV_StartBug> output [ 0 ] = x0 ; <S2SV_EndBug> <S2SV_StartBug> output [ 1 ] = - x8 ; <S2SV_EndBug> <S2SV_StartBug> output [ 2 ] = x12 ; <S2SV_EndBug> <S2SV_StartBug> output [ 3 ] = - x4 ; <S2SV_EndBug> <S2SV_StartBug> output [ 4 ] = x6 ; <S2SV_EndBug> <S2SV_StartBug> output [ 5 ] = x14 ; <S2SV_EndBug> <S2SV_StartBug> output [ 6 ] = x10 ; <S2SV_EndBug> <S2SV_StartBug> output [ 7 ] = x2 ; <S2SV_EndBug> <S2SV_StartBug> output [ 8 ] = x3 ; <S2SV_EndBug> <S2SV_StartBug> output [ 9 ] = x11 ; <S2SV_EndBug> <S2SV_StartBug> output [ 10 ] = x15 ; <S2SV_EndBug> <S2SV_StartBug> output [ 11 ] = x7 ; <S2SV_EndBug> <S2SV_StartBug> output [ 12 ] = x5 ; <S2SV_EndBug> <S2SV_StartBug> output [ 13 ] = - x13 ; <S2SV_EndBug> <S2SV_StartBug> output [ 14 ] = x9 ; <S2SV_EndBug> <S2SV_StartBug> output [ 15 ] = - x1 ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> ; tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) 
430,<S2SV_StartBug> # if HAVE_EDSP <S2SV_EndBug> <S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> || HAVE_NEON_ASM 
431,"<S2SV_StartBug> MB_PREDICTION_MODE vp9_left_block_mode ( const MODE_INFO * cur_mi , <S2SV_EndBug> ",<S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> 
432,"<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horAcc16 ( tif , cp0 , cc ) ; <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return 
433,<S2SV_StartBug> opt2 -> tot_len = tot_len ; <S2SV_EndBug> ,"<S2SV_ModStart> atomic_set ( & opt2 -> refcnt , 1 ) ; "
434,<S2SV_StartBug> for ( i = 0 ; i < st -> duration ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> } 
435,<S2SV_StartBug> dp == datalen ) { <S2SV_EndBug> ,<S2SV_ModStart> ( op & ASN1_OP_MATCH__SKIP && <S2SV_ModStart> ) 
436,"<S2SV_StartBug> char * fpath = NULL , * cgdir = NULL , * controller ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , ""rmdir:<S2SV_blank>verifying<S2SV_blank>access<S2SV_blank>to<S2SV_blank>%s:%s<S2SV_blank>(req<S2SV_blank>path<S2SV_blank>%s)\\n"" , <S2SV_EndBug> <S2SV_StartBug> if ( ! caller_is_in_ancestor ( fc -> pid , controller , cgroup , NULL ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! cgfs_remove ( controller , cgroup ) ) { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart> , * next = NULL <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> & next ) ) { if ( ! fpath || strcmp ( next , fpath ) == 0 ) ret = - EBUSY ; else ret = - ENOENT ; goto out ; } if ( ! fc_may_access ( fc , controller , cgdir , NULL , O_WRONLY <S2SV_ModEnd> <S2SV_ModStart> caller_is_in_ancestor ( fc -> pid , controller , cgroup , NULL ) ) { ret = - EACCES ; goto out ; } if ( ! <S2SV_ModStart> free ( next ) ; "
437,<S2SV_StartBug> if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt . mnt_flags & MNT_READONLY ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & old -> mnt_expire ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { mnt -> mnt . mnt_flags |= MNT_LOCK_ATIME ; if <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mnt -> mnt . mnt_flags & MNT_NODEV ) mnt -> mnt . mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt . mnt_flags & MNT_NOSUID ) mnt -> mnt . mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt . mnt_flags & MNT_NOEXEC ) mnt -> mnt . mnt_flags |= MNT_LOCK_NOEXEC ; } if ( 
438,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
439,<S2SV_StartBug> if ( * rsize >= 107 && rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && <S2SV_EndBug> ,<S2SV_ModStart> 112 <S2SV_ModEnd> 
440,<S2SV_StartBug> if ( ( tot_len - offset - 4 ) < bodyLength ) { <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) || ( bodyLength < sizeof ( EAPOL_RSN_KEY ) ) 
441,<S2SV_StartBug> if ( likely ( port -> exists && ! filtered ) ) <S2SV_EndBug> ,<S2SV_ModStart> serio <S2SV_ModEnd> 
442,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>c<S2SV_blank>%04x"" , EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> { ND_TCHECK ( <S2SV_ModEnd> <S2SV_ModStart> ; ND_PRINT ( ( ndo , ""<S2SV_blank>c<S2SV_blank>%04x"" , EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> "
443,"<S2SV_StartBug> static int udf_translate_to_linux ( uint8_t * newName , uint8_t * udfName , <S2SV_EndBug> <S2SV_StartBug> int udfLen , uint8_t * fidName , <S2SV_EndBug> <S2SV_StartBug> if ( newIndex < 256 ) <S2SV_EndBug> <S2SV_StartBug> maxFilenameLen = 250 - localExtIndex ; <S2SV_EndBug> <S2SV_StartBug> } else if ( newIndex > 250 ) <S2SV_EndBug> ","<S2SV_ModStart> int newLen , <S2SV_ModStart> int udfLen , <S2SV_ModEnd> <S2SV_ModStart> newLen <S2SV_ModEnd> <S2SV_ModStart> newLen - CRC_LEN <S2SV_ModEnd> <S2SV_ModStart> newLen - CRC_LEN ) newIndex = newLen - CRC_LEN <S2SV_ModEnd> "
444,"<S2SV_StartBug> static void count_segs_sb ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> const VP9_COMMON * const cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi . sb_type ] ; <S2SV_EndBug> <S2SV_StartBug> bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi . sb_type ] ; <S2SV_EndBug> <S2SV_StartBug> count_segs ( cpi , tile , mi_8x8 , no_pred_segcounts , temporal_predictor_count , <S2SV_EndBug> <S2SV_StartBug> count_segs ( cpi , tile , mi_8x8 , no_pred_segcounts , temporal_predictor_count , <S2SV_EndBug> <S2SV_StartBug> count_segs ( cpi , tile , mi_8x8 + hbs * mis , no_pred_segcounts , <S2SV_EndBug> <S2SV_StartBug> count_segs ( cpi , tile , mi_8x8 , no_pred_segcounts , temporal_predictor_count , <S2SV_EndBug> <S2SV_StartBug> count_segs ( cpi , tile , mi_8x8 + hbs , <S2SV_EndBug> <S2SV_StartBug> count_segs_sb ( cpi , tile , & mi_8x8 [ mi_dr * mis + mi_dc ] , <S2SV_EndBug> ","<S2SV_ModStart> const VP9_COMMON * cm , MACROBLOCKD * xd , <S2SV_ModEnd> <S2SV_ModStart> tile , <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> cm , xd , tile , mi <S2SV_ModEnd> <S2SV_ModStart> cm , xd , tile , mi <S2SV_ModEnd> <S2SV_ModStart> cm , xd , tile , mi <S2SV_ModEnd> <S2SV_ModStart> cm , xd , tile , mi <S2SV_ModEnd> <S2SV_ModStart> cm , xd , tile , mi <S2SV_ModEnd> <S2SV_ModStart> cm , xd <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> "
445,<S2SV_StartBug> if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; <S2SV_EndBug> ,<S2SV_ModStart> ( CLIENT_CLOSE_AFTER_REPLY | CLIENT_CLOSE_ASAP ) <S2SV_ModEnd> 
446,<S2SV_StartBug> get_blocks_flags = EXT4_GET_BLOCKS_CREATE ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ext4_should_dioread_nolock ( mpd -> inode ) ) get_blocks_flags |= EXT4_GET_BLOCKS_IO_CREATE_EXT 
447,"<S2SV_StartBug> int ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( d2i_DSA_SIG ( & s , & sigbuf , siglen ) == NULL ) goto err ; <S2SV_EndBug> <S2SV_StartBug> DSA_SIG_free ( s ) ; <S2SV_EndBug> ","<S2SV_ModStart> const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> p <S2SV_ModEnd> <S2SV_ModStart> goto err ; derlen = i2d_DSA_SIG ( s , & der ) ; if ( derlen != siglen || memcmp ( sigbuf , der , derlen ) ) <S2SV_ModStart> if ( derlen > 0 ) { OPENSSL_cleanse ( der , derlen ) ; OPENSSL_free ( der ) ; } "
448,"<S2SV_StartBug> gdImageGifCtx ( im , out ) ; <S2SV_EndBug> <S2SV_StartBug> rv = gdDPExtractData ( out , size ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! _gdImageGifCtx <S2SV_ModEnd> <S2SV_ModStart> ) { <S2SV_ModEnd> <S2SV_ModStart> } else { rv = NULL ; } 
449,<S2SV_StartBug> kfree ( bprm ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( bprm -> interp != bprm -> filename ) kfree ( bprm -> interp ) ; 
450,"<S2SV_StartBug> size_t canonnamelen = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( p = oe_calloc ( 1 , sizeof ( struct oe_addrinfo ) ) ) ) <S2SV_EndBug> <S2SV_StartBug> & p -> ai_flags , <S2SV_EndBug> <S2SV_StartBug> & p -> ai_family , <S2SV_EndBug> <S2SV_StartBug> & p -> ai_socktype , <S2SV_EndBug> <S2SV_StartBug> & p -> ai_protocol , <S2SV_EndBug> <S2SV_StartBug> & p -> ai_addrlen , <S2SV_EndBug> <S2SV_StartBug> canonnamelen , <S2SV_EndBug> <S2SV_StartBug> if ( p -> ai_addrlen && ! ( p -> ai_addr = oe_calloc ( 1 , p -> ai_addrlen ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( canonnamelen && ! ( p -> ai_canonname = oe_calloc ( 1 , canonnamelen ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( oe_syscall_getaddrinfo_read_ocall ( <S2SV_EndBug> <S2SV_StartBug> p -> ai_addrlen , <S2SV_EndBug> <S2SV_StartBug> canonnamelen , <S2SV_EndBug> <S2SV_StartBug> if ( tail ) <S2SV_EndBug> ","<S2SV_ModStart> canonnamelen_in <S2SV_ModEnd> <S2SV_ModStart> size_t canonnamelen_out = 0 ; struct oe_addrinfo p_out ; memset ( & p_out , 0 , sizeof ( struct oe_addrinfo ) ) ; <S2SV_ModEnd> <S2SV_ModStart> p_out . <S2SV_ModEnd> <S2SV_ModStart> p_out . <S2SV_ModEnd> <S2SV_ModStart> p_out . <S2SV_ModEnd> <S2SV_ModStart> p_out . ai_protocol , p_out . <S2SV_ModEnd> <S2SV_ModStart> p_out . <S2SV_ModEnd> <S2SV_ModStart> canonnamelen_in , & canonnamelen_out <S2SV_ModEnd> <S2SV_ModStart> switch ( p_out . ai_family ) { case OE_AF_INET : if ( p_out . ai_addrlen != sizeof ( struct oe_sockaddr ) ) { ret = OE_EAI_FAIL ; goto done ; } break ; case OE_AF_INET6 : case OE_AF_INET6_WIN : case OE_AF_UNSPEC : if ( p_out . ai_addrlen != sizeof ( struct oe_sockaddr_in6 ) ) { ret = OE_EAI_FAIL ; goto done ; } break ; default : ret = OE_EAI_FAIL ; goto done ; } if ( ! ( p = oe_calloc ( 1 , sizeof ( struct oe_addrinfo ) ) ) ) { ret = OE_EAI_MEMORY ; goto done ; } if ( p_out . <S2SV_ModEnd> <S2SV_ModStart> p_out . <S2SV_ModEnd> <S2SV_ModStart> canonnamelen_out <S2SV_ModEnd> <S2SV_ModStart> canonnamelen_out <S2SV_ModEnd> <S2SV_ModStart> canonnamelen_in = canonnamelen_out ; <S2SV_ModStart> p_out . <S2SV_ModEnd> <S2SV_ModStart> canonnamelen_in , & canonnamelen_out <S2SV_ModEnd> <S2SV_ModStart> ( p -> ai_flags != p_out . ai_flags ) || ( p -> ai_family != p_out . ai_family ) || ( p -> ai_socktype != p_out . ai_socktype ) || ( p -> ai_protocol != p_out . ai_protocol ) || ( p -> ai_addrlen != p_out . ai_addrlen ) || ( canonnamelen_out != canonnamelen_in ) || ( canonnamelen_out && p -> ai_canonname [ canonnamelen_out - 1 ] != '\\0' ) ) { ret = OE_EAI_FAIL ; goto done ; } if ( tail ) { tail -> ai_next = p ; tail = p ; } else { head = p ; tail = p ; } p = NULL ; } if ( handle ) { int retval = - 1 <S2SV_ModEnd> "
451,"<S2SV_StartBug> separator = strchr ( token , ':' ) ; <S2SV_EndBug> <S2SV_StartBug> separator = strchr ( token , '=' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> osStrchr <S2SV_ModEnd> 
452,<S2SV_StartBug> rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ] ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx , ""Invalid<S2SV_blank>image<S2SV_blank>dimensions"" ) ; goto done ; } "
453,"<S2SV_StartBug> vpx_memcpy ( pc -> fc . coef_probs , default_coef_probs , <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> 
454,"<S2SV_StartBug> static int set_registers ( pegasus_t * pegasus , __u16 indx , __u16 size , void * data ) <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> indx , data , size , 100 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart> const <S2SV_ModStart> u8 * buf ; int ret ; buf = kmemdup ( data , size , GFP_NOIO ) ; if ( ! buf ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> buf <S2SV_ModEnd> <S2SV_ModStart> kfree ( buf ) ; "
455,"<S2SV_StartBug> Module ( asdl_seq * body , PyArena * arena ) <S2SV_EndBug> <S2SV_StartBug> return p ; <S2SV_EndBug> ","<S2SV_ModStart> , asdl_seq * type_ignores <S2SV_ModStart> p -> v . Module . type_ignores = type_ignores ; "
456,"<S2SV_StartBug> sas_discover_event ( dev -> port , DISCE_DESTRUCT ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
457,"<S2SV_StartBug> int64_t ts_start , int64_t ts_end , unsigned int flags ) { <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if USE_PARTIAL_COPY <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> max_sz == 1 && active_map && ! flags ) { <S2SV_EndBug> <S2SV_StartBug> vp9_copy_and_extend_frame ( src , & buf -> img ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH int use_highbitdepth , # endif <S2SV_ModStart> int width = src -> y_crop_width ; int height = src -> y_crop_height ; int uv_width = src -> uv_crop_width ; int uv_height = src -> uv_crop_height ; int subsampling_x = src -> subsampling_x ; int subsampling_y = src -> subsampling_y ; int larger_dimensions , new_dimensions ; <S2SV_ModStart> new_dimensions = width != buf -> img . y_crop_width || height != buf -> img . y_crop_height || uv_width != buf -> img . uv_crop_width || uv_height != buf -> img . uv_crop_height ; larger_dimensions = width > buf -> img . y_width || height > buf -> img . y_height || uv_width > buf -> img . uv_width || uv_height > buf -> img . uv_height ; assert ( ! larger_dimensions || new_dimensions ) ; <S2SV_ModStart> ! new_dimensions && <S2SV_ModStart> # endif if ( larger_dimensions ) { YV12_BUFFER_CONFIG new_img ; memset ( & new_img , 0 , sizeof ( new_img ) ) ; if ( vpx_alloc_frame_buffer ( & new_img , width , height , subsampling_x , subsampling_y , # if CONFIG_VP9_HIGHBITDEPTH use_highbitdepth , # endif VP9_ENC_BORDER_IN_PIXELS , 0 ) ) return 1 ; vpx_free_frame_buffer ( & buf -> img ) ; buf -> img = new_img ; } else if ( new_dimensions ) { buf -> img . y_crop_width = src -> y_crop_width ; buf -> img . y_crop_height = src -> y_crop_height ; buf -> img . uv_crop_width = src -> uv_crop_width ; buf -> img . uv_crop_height = src -> uv_crop_height ; buf -> img . subsampling_x = src -> subsampling_x ; buf -> img . subsampling_y = src -> subsampling_y ; } <S2SV_ModStart> # if USE_PARTIAL_COPY } <S2SV_ModEnd> "
458,"<S2SV_StartBug> rc = fuse_dev_release ( inode , file ) ; <S2SV_EndBug> ",<S2SV_ModStart> fuse_conn_put ( & cc -> fc ) ; 
459,<S2SV_StartBug> return code ; <S2SV_EndBug> ,"<S2SV_ModStart> { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> "
460,"<S2SV_StartBug> static int scsi_disk_emulate_command ( SCSIDiskReq * r , uint8_t * outbuf ) <S2SV_EndBug> ","<S2SV_ModStart> ) { SCSIRequest * req = & r -> req ; SCSIDiskState * s = DO_UPCAST ( SCSIDiskState , qdev , req -> dev ) ; uint64_t nb_sectors ; <S2SV_ModEnd> <S2SV_ModStart> ; int buflen = 0 ; if ( ! r -> iov . iov_base ) { if ( req -> cmd . xfer > 65536 ) { goto illegal_request ; } r -> buflen = MAX ( 4096 , req -> cmd . xfer ) ; r -> iov . iov_base = qemu_blockalign ( s -> bs , r -> buflen ) ; } outbuf = r -> iov . iov_base <S2SV_ModEnd> "
461,<S2SV_StartBug> s -> cur_pic . field_picture || <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
462,<S2SV_StartBug> if ( rm -> m_inc . i_hdr . h_flags & RDS_FLAG_CONG_BITMAP ) { <S2SV_EndBug> <S2SV_StartBug> return sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ; <S2SV_EndBug> <S2SV_StartBug> return sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc . i_hdr . h_len ) ; <S2SV_EndBug> ,"<S2SV_ModStart> struct scatterlist * sgp = & rm -> data . op_sg [ sg ] ; int ret = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc . i_hdr . h_len ) ; <S2SV_ModStart> ret = min_t ( int , ret , sgp -> length - conn -> c_xmit_data_off ) ; goto out <S2SV_ModEnd> <S2SV_ModStart> out : return ret <S2SV_ModEnd> "
463,<S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> { return 0 ; } <S2SV_ModEnd> 
464,"<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> 
465,"<S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bp [ hlen ] & 0xf0 ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""K"" ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mh -> ip6m_data8 [ 1 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 16 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( mh -> ip6m_data8 [ 1 ] <S2SV_ModStart> ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> <S2SV_ModStart> bp [ hlen ] , <S2SV_ModEnd> "
466,<S2SV_StartBug> dev -> netdev_ops = & ieee80211_dataif_ops ; <S2SV_EndBug> ,<S2SV_ModStart> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> 
467,"<S2SV_StartBug> uint16_t hmi_bpm = 0 ; <S2SV_EndBug> <S2SV_StartBug> } * note ; <S2SV_EndBug> <S2SV_StartBug> if ( hmi_data [ 0 ] == 0xfe ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( hmi_data [ 1 ] == 0x15 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( ( setup_ret = _WM_SetupMidiEvent ( hmi_mdi , hmi_data , hmi_running_event [ i ] ) ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> note [ hmi_tmp ] . length = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( * hmi_data > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> hmi_track_offset [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> } while ( * hmi_data > 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> hmi_track_offset [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> hmi_delta [ i ] = ( hmi_delta [ i ] << 7 ) | ( * hmi_data & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> hmi_track_offset [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> hmi_delta [ i ] = ( hmi_delta [ i ] << 7 ) | ( * hmi_data & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> hmi_data ++ ; <S2SV_EndBug> ","<S2SV_ModStart> uint32_t data_siz ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> hmi_track_offset [ i ] >= hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , ""file<S2SV_blank>too<S2SV_blank>short"" , 0 ) ; goto _hmi_end ; } data_siz = hmi_size - hmi_track_offset [ i ] ; if ( <S2SV_ModStart> hmi_tmp += 4 ; <S2SV_ModStart> hmi_tmp = 8 ; } else { hmi_tmp = 4 ; } hmi_data <S2SV_ModEnd> <S2SV_ModStart> hmi_track_offset [ i ] += 4 ; if ( hmi_tmp > data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , ""file<S2SV_blank>too<S2SV_blank>short"" , 0 ) ; goto _hmi_end ; } data_siz -= hmi_tmp ; <S2SV_ModStart> , data_siz <S2SV_ModStart> data_siz -= setup_ret ; <S2SV_ModStart> data_siz && <S2SV_ModStart> if ( ! data_siz ) break ; <S2SV_ModStart> data_siz -- ; <S2SV_ModStart> ; } if ( ! data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , ""file<S2SV_blank>too<S2SV_blank>short"" , 0 ) ; goto _hmi_end <S2SV_ModStart> data_siz -- ; <S2SV_ModStart> data_siz -= setup_ret ; } } if ( data_siz && <S2SV_ModEnd> <S2SV_ModStart> if ( ! data_siz ) break ; <S2SV_ModStart> data_siz -- ; <S2SV_ModStart> if ( ! data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , ""file<S2SV_blank>too<S2SV_blank>short"" , 0 ) ; goto _hmi_end ; } <S2SV_ModStart> ; data_siz -- "
468,<S2SV_StartBug> release_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> haddr -> hci_channel = 0 ; 
469,<S2SV_StartBug> fh32 [ 2 ] = inode -> i_generation ; <S2SV_EndBug> ,<S2SV_ModStart> fh16 [ 3 ] = 0 ; 
470,"<S2SV_StartBug> if ( check_anon ( kdc_active_realm , request -> client , request -> server ) != 0 ) { <S2SV_EndBug> ",<S2SV_ModStart> client . princ <S2SV_ModEnd> 
471,<S2SV_StartBug> if ( dst_reg -> smin_value < 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
472,"<S2SV_StartBug> if ( method == LPF_PICK_FROM_Q ) { <S2SV_EndBug> <S2SV_StartBug> const int q = vp9_ac_quant ( cm -> base_qindex , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158 , 18 ) ; <S2SV_EndBug> <S2SV_StartBug> search_filter_level ( sd , cpi , method == LPF_PICK_FROM_SUBIMAGE ) ; <S2SV_EndBug> ","<S2SV_ModStart> LPF_PICK_MINIMAL_LPF && lf -> filter_level ) { lf -> filter_level = 0 ; } else if ( method >= <S2SV_ModStart> , cm -> bit_depth ) ; # if CONFIG_VP9_HIGHBITDEPTH int filt_guess ; switch ( cm -> bit_depth ) { case VPX_BITS_8 : <S2SV_ModEnd> <S2SV_ModStart> break ; case VPX_BITS_10 : filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 4060632 , 20 ) ; break ; case VPX_BITS_12 : filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 16242526 , 22 ) ; break ; default : assert ( 0 && ""bit_depth<S2SV_blank>should<S2SV_blank>be<S2SV_blank>VPX_BITS_8,<S2SV_blank>VPX_BITS_10<S2SV_blank>"" ""or<S2SV_blank>VPX_BITS_12"" ) ; return ; } # else int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158 , 18 ) ; # endif <S2SV_ModStart> lf -> filter_level = "
473,<S2SV_StartBug> usleep ( 100000 ) ; <S2SV_EndBug> ,<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
474,<S2SV_StartBug> quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; canvas_image = DestroyImage ( canvas_image 
475,"<S2SV_StartBug> int a = getnum ( fmt , MAXALIGN ) ; <S2SV_EndBug> ","<S2SV_ModStart> L , "
476,<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug> ,<S2SV_ModStart> void 
477,"<S2SV_StartBug> if ( sscanf ( l_line , ""%u<S2SV_blank>%u<S2SV_blank>%u"" , o_row_count , o_column_count , o_element_count ) == 3 ) { <S2SV_EndBug> ",<S2SV_ModStart> 3 == <S2SV_ModStart> && 0 != * o_row_count && 0 != * o_column_count && 0 != * o_element_count ) <S2SV_ModEnd> 
478,<S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
479,"<S2SV_StartBug> long rem ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & rem ) ; <S2SV_EndBug> ",<S2SV_ModStart> u32 <S2SV_ModEnd> <S2SV_ModStart> div_u64_rem <S2SV_ModEnd> 
480,"<S2SV_StartBug> if ( ! ctx || ( ! data && data_sz ) ) <S2SV_EndBug> <S2SV_StartBug> res = ctx -> iface -> dec . decode ( ctx -> priv -> alg_priv , data , data_sz , <S2SV_EndBug> ",<S2SV_ModStart> || ( data && ! data_sz ) <S2SV_ModStart> get_alg_priv ( ctx ) <S2SV_ModEnd> 
481,"<S2SV_StartBug> if ( value [ strlen ( value ) - 1 ] == ',' ) { <S2SV_EndBug> ",<S2SV_ModStart> * value == 0 || 
482,"<S2SV_StartBug> static int isofs_read_inode ( struct inode * inode ) <S2SV_EndBug> <S2SV_StartBug> parse_rock_ridge_inode ( de , inode ) ; <S2SV_EndBug> ","<S2SV_ModStart> , int relocated <S2SV_ModStart> , relocated "
483,"<S2SV_StartBug> COM_DefaultExtension ( filename , sizeof ( filename ) , "".txt"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! COM_CompareExtension ( filename , "".txt"" ) ) { Com_Printf ( ""Con_Dump_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\"".txt\\""<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"" ) ; return ; } "
484,"<S2SV_StartBug> if ( netal == 0 ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>%s"" , etheraddr_string ( ndo , snpa ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> snpal == 6 ) ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>SNPA<S2SV_blank>(length:<S2SV_blank>%u):<S2SV_blank>%s"" , snpal , etheraddr_string ( ndo , snpa ) ) ) ; else ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>SNPA<S2SV_blank>(length:<S2SV_blank>%u):<S2SV_blank>%s"" , snpal , linkaddr_string ( ndo , snpa , LINKADDR_OTHER , snpal ) ) ) ; if ( netal != <S2SV_ModEnd> <S2SV_ModStart> ""\\n\\t<S2SV_blank><S2SV_blank>NET<S2SV_blank>(length:<S2SV_blank>%u)<S2SV_blank>%s"" , netal , <S2SV_ModEnd> "
485,"<S2SV_StartBug> outpos += sprintf ( outpos , ""<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>K"" , c , m , y , k ) ; <S2SV_EndBug> <S2SV_StartBug> outpos += sprintf ( outpos , ""<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>k"" , c , m , y , k ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> sprintf ( outputbuffer <S2SV_ModEnd> <S2SV_ModStart> sprintf ( outputbuffer <S2SV_ModEnd> <S2SV_ModStart> sendClean ( outputbuffer ) ; 
486,<S2SV_StartBug> BUG ( ) ; <S2SV_EndBug> <S2SV_StartBug> BUG ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> return false ; } } else if ( r -> CRn == 0 && r -> CRm == 9 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; <S2SV_ModEnd> <S2SV_ModStart> return false <S2SV_ModEnd> 
487,<S2SV_StartBug> convert_to_double_ex ( zval_affine_elem ) ; <S2SV_EndBug> <S2SV_StartBug> affine [ i ] = Z_DVAL_PP ( zval_affine_elem ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . x = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . y = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . width = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . height = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> ,<S2SV_ModStart> { zval dval ; dval = * * zval_affine_elem ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> <S2SV_ModStart> Z_DVAL ( dval ) ; } <S2SV_ModEnd> <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . x = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . y = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . width = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . height = <S2SV_ModStart> } 
488,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> PyObject_GC_UnTrack ( self ) ; 
489,<S2SV_StartBug> free ( szSepLine ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
490,"<S2SV_StartBug> r = copy_from_user ( data , ( void __user * ) addr + offset , len ) ; <S2SV_EndBug> ",<S2SV_ModStart> __copy_from_user <S2SV_ModEnd> 
491,"<S2SV_StartBug> char * p , * q , * r ; <S2SV_EndBug> <S2SV_StartBug> printf ( ""Copyright<S2SV_blank>(C)<S2SV_blank>1992-2010<S2SV_blank>I.<S2SV_blank>Lee<S2SV_blank>Hetherington,<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\n<S2SV_blank>This<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\n<S2SV_blank>There<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\n<S2SV_blank>particular<S2SV_blank>purpose.\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( strncmp ( line , ""currentfile<S2SV_blank>eexec"" , 17 ) == 0 && isspace ( line [ 17 ] ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( p = line + 18 ; isspace ( * p ) ; p ++ ) <S2SV_EndBug> <S2SV_StartBug> lenIV = atoi ( line + 6 ) ; <S2SV_EndBug> <S2SV_StartBug> && strstr ( line , ""readstring"" ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( p = strstr ( line , ""/Subrs"" ) ) && isdigit ( p [ 7 ] ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( ( p = strstr ( line , ""/CharStrings"" ) ) && isdigit ( p [ 13 ] ) ) <S2SV_EndBug> <S2SV_StartBug> for ( q = p ; isspace ( * q ) && * q != '\\n' ; q ++ ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""Copyright<S2SV_blank>(C)<S2SV_blank>1992-2010<S2SV_blank>I.<S2SV_blank>Lee<S2SV_blank>Hetherington,<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\nThis<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\nThere<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\nparticular<S2SV_blank>purpose.\\n"" <S2SV_ModEnd> <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> set_lenIV ( line <S2SV_ModEnd> <S2SV_ModStart> ) { set_cs_start ( line ) <S2SV_ModEnd> <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) "
492,<S2SV_StartBug> usb_autopm_put_interface ( serial -> interface ) ; <S2SV_EndBug> ,<S2SV_ModStart> info -> port = NULL ; 
493,<S2SV_StartBug> cpuctx -> ctx . type = cpu_context ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
494,<S2SV_StartBug> struct iovec * iovec ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> , struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> <S2SV_ModStart> iov_iter_init ( iter , rw , iovec , * nr_segs , len ) ; "
495,<S2SV_StartBug> int groups_per_flex = 0 ; <S2SV_EndBug> <S2SV_StartBug> groups_per_flex = 1 << sbi -> s_log_groups_per_flex ; <S2SV_EndBug> <S2SV_StartBug> if ( groups_per_flex < 2 ) { <S2SV_EndBug> ,<S2SV_ModStart> unsigned <S2SV_ModStart> if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart>  <S2SV_ModEnd> 
496,<S2SV_StartBug> if ( unlikely ( chunk_length < required_length ) ) <S2SV_EndBug> ,<S2SV_ModStart> chunk -> pdiscard ) ) return 0 ; if ( unlikely ( 
497,<S2SV_StartBug> for ( i = 0 ; a && i < count ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! i ) <S2SV_EndBug> ,<S2SV_ModStart> i ++ <S2SV_ModEnd> <S2SV_ModStart> if ( ! n ) { cJSON_Delete ( a ) ; return 0 ; } 
498,<S2SV_StartBug> if ( ! EmptyString ( cli_sslclifp ( cptr ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! EmptyString ( cli_sslclifp ( cptr ) ) ) <S2SV_EndBug> ,"<S2SV_ModStart> * parv [ 1 ] == ':' || strchr ( parv [ 1 ] , '<S2SV_blank>' ) ) return exit_client ( cptr , sptr , sptr , ""Malformed<S2SV_blank>AUTHENTICATE"" ) ; if ( <S2SV_ModStart> * parv [ 1 ] == ':' || strchr ( parv [ 1 ] , '<S2SV_blank>' ) ) return exit_client ( cptr , sptr , sptr , ""Malformed<S2SV_blank>AUTHENTICATE"" ) ; if ( "
499,<S2SV_StartBug> for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( int ) 
500,<S2SV_StartBug> match_length += callback_args -> forward_matches ; <S2SV_EndBug> ,<S2SV_ModStart> ; assert ( match_offset + match_length <= callback_args -> data_size ) 
501,<S2SV_StartBug> ! no_port_forwarding_flag && ! options . disable_forwarding ) { <S2SV_EndBug> ,<S2SV_ModStart> && use_privsep 
502,<S2SV_StartBug> if ( ! bitstream_read_bit ( bc ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL , AV_LOG_ERROR , ""Maximum<S2SV_blank>tree<S2SV_blank>recursion<S2SV_blank>level<S2SV_blank>exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( "
503,<S2SV_StartBug> m -> msg_name = address ; <S2SV_EndBug> ,<S2SV_ModStart> if ( m -> msg_name ) 
504,"<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_body ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> type_ignore_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_type_ignore ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( type_ignores , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_body ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_argtypes ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( argtypes , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""argtypes\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>FunctionType"" ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_returns ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Suite"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Module"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_type_ignores , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""type_ignores\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Module"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> * out = Module ( body , type_ignores , arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = PyObject_IsInstance ( obj , ( PyObject * ) Interactive_type ) ; if ( isinstance == - 1 ) { return 1 ; } if ( isinstance ) { asdl_seq * body ; if ( lookup_attr_id ( obj , & PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Interactive"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> * out = Interactive ( body , arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = PyObject_IsInstance ( obj , ( PyObject * ) Expression_type ) ; if ( isinstance == - 1 ) { return 1 ; } if ( isinstance ) { expr_ty body ; if ( lookup_attr_id ( obj , & PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Expression"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""argtypes\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>FunctionType"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_returns , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""returns\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>FunctionType"" ) ; return 1 ; } else { int res ; res = obj2ast_expr ( tmp , & returns , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } * out = FunctionType ( argtypes , returns , arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = PyObject_IsInstance ( obj , ( PyObject * ) Suite_type ) ; if ( isinstance == - 1 ) { return 1 ; } if ( isinstance ) { asdl_seq * body ; if ( lookup_attr_id ( obj , & PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { <S2SV_ModEnd> <S2SV_ModStart> ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Suite"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> * out = Suite ( body , arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } PyErr_Format <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
505,<S2SV_StartBug> int hstartcol ; <S2SV_EndBug> <S2SV_StartBug> hstartcol = ( numrows + 1 - parity ) >> 1 ; <S2SV_EndBug> <S2SV_StartBug> m = numrows - hstartcol ; <S2SV_EndBug> <S2SV_StartBug> dstptr = & a [ hstartcol * stride ] ; <S2SV_EndBug> ,<S2SV_ModStart> hstartrow <S2SV_ModEnd> <S2SV_ModStart> hstartrow <S2SV_ModEnd> <S2SV_ModStart> hstartrow <S2SV_ModEnd> <S2SV_ModStart> hstartrow <S2SV_ModEnd> 
506,"<S2SV_StartBug> iwl_sta_ucode_activate ( priv , sta_id ) ; <S2SV_EndBug> ","<S2SV_ModStart> ret = iwl_sta_ucode_activate ( priv , sta_id ) <S2SV_ModEnd> "
507,"<S2SV_StartBug> log_file = fopen ( file_name , ""a"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> fopen_safe <S2SV_ModEnd> 
508,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> assert_regexp_syntax_error ( ""\\\\x0"" ) ; assert_regexp_syntax_error ( ""\\\\x"" ) ; assert_regexp_syntax_error ( ""\\\\xxy"" ) ; "
509,<S2SV_StartBug> if ( hashbin -> hb_type & HB_LOCK ) { <S2SV_EndBug> <S2SV_StartBug> queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> while ( queue ) { <S2SV_EndBug> <S2SV_StartBug> ( * free_func ) ( queue ) ; <S2SV_EndBug> <S2SV_StartBug> if ( hashbin -> hb_type & HB_LOCK ) { <S2SV_EndBug> <S2SV_StartBug> # ifdef CONFIG_LOCKDEP <S2SV_EndBug> ,"<S2SV_ModStart> spin_lock_irqsave ( & hashbin -> hb_spinlock , flags ) ; <S2SV_ModEnd> <S2SV_ModStart> while ( 1 ) { <S2SV_ModStart> if ( ! queue ) break ; <S2SV_ModEnd> <S2SV_ModStart> { if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock , flags ) ; free_func ( queue ) ; if ( hashbin -> hb_type & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock , flags ) ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
510,"<S2SV_StartBug> err = security_sb_remount ( sb , data ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ( mnt -> mnt . mnt_flags & MNT_LOCK_NODEV ) && ! ( mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( mnt -> mnt . mnt_flags & MNT_LOCK_NOSUID ) && ! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } if ( ( mnt -> mnt . mnt_flags & MNT_LOCK_NOEXEC ) && ! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt . mnt_flags & MNT_LOCK_ATIME ) && ( ( mnt -> mnt . mnt_flags & MNT_ATIME_MASK ) != ( mnt_flags & MNT_ATIME_MASK ) ) ) { return - EPERM ; } 
511,"<S2SV_StartBug> int copied , err ; <S2SV_EndBug> <S2SV_StartBug> sll = & PACKET_SKB_CB ( skb ) -> sa . ll ; <S2SV_EndBug> <S2SV_StartBug> if ( sock -> type == SOCK_PACKET ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> copied = skb -> len ; <S2SV_EndBug> <S2SV_StartBug> if ( msg -> msg_name ) <S2SV_EndBug> <S2SV_StartBug> msg -> msg_namelen ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> copied = skb -> len ; if ( copied > len ) { copied = len ; msg -> msg_flags |= MSG_TRUNC ; } err = skb_copy_datagram_iovec ( skb , 0 , msg -> msg_iov , copied ) ; if ( err ) goto out_free ; sock_recv_ts_and_drops ( msg , sk , skb ) ; if ( msg -> msg_name ) { <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } else { struct sockaddr_ll * sll = & PACKET_SKB_CB ( skb ) -> sa . ll ; <S2SV_ModEnd> <S2SV_ModStart> } memcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } "
512,<S2SV_StartBug> uchar buf [ RAS_MAGICLEN ] ; <S2SV_EndBug> ,<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
513,<S2SV_StartBug> if ( serial -> num_ports < 2 ) <S2SV_EndBug> ,"<S2SV_ModStart> num_bulk_out <S2SV_ModEnd> <S2SV_ModStart> { dev_err ( & serial -> interface -> dev , ""missing<S2SV_blank>bulk<S2SV_blank>out<S2SV_blank>endpoints\\n"" ) ; return - ENODEV ; } <S2SV_ModEnd> "
514,"<S2SV_StartBug> int do_rf64 = 0 , write_junk = 1 ; <S2SV_EndBug> <S2SV_StartBug> DS64Chunk ds64_chunk ; <S2SV_EndBug> <S2SV_StartBug> if ( write_junk ) total_riff_bytes += sizeof ( junkchunk ) ; <S2SV_EndBug> <S2SV_StartBug> ds64hdr . ckSize = sizeof ( ds64_chunk ) ; <S2SV_EndBug> <S2SV_StartBug> ds64_chunk . sampleCount64 = total_samples ; <S2SV_EndBug> <S2SV_StartBug> WavpackNativeToLittleEndian ( & riffhdr , ChunkHeaderFormat ) ; <S2SV_EndBug> <S2SV_StartBug> ( do_rf64 && ( ! DoWriteFile ( outfile , & ds64_chunk , sizeof ( ds64_chunk ) , & bcount ) || bcount != sizeof ( ds64_chunk ) ) ) || <S2SV_EndBug> ","<S2SV_ModStart> , table_length = 0 <S2SV_ModStart> ; CS64Chunk cs64_chunk <S2SV_ModStart> total_riff_bytes += table_length * sizeof ( CS64Chunk ) ; if ( write_junk ) total_riff_bytes += <S2SV_ModEnd> <S2SV_ModStart> + ( table_length * sizeof ( CS64Chunk ) ) <S2SV_ModStart> ; ds64_chunk . tableLength = table_length <S2SV_ModStart> if ( table_length ) { strncpy ( cs64_chunk . ckID , ""dmmy"" , sizeof ( cs64_chunk . ckID ) ) ; cs64_chunk . chunkSize64 = 12345678 ; WavpackNativeToLittleEndian ( & cs64_chunk , CS64ChunkFormat ) ; } <S2SV_ModStart> ) { error_line ( ""can\'t<S2SV_blank>write<S2SV_blank>.WAV<S2SV_blank>data,<S2SV_blank>disk<S2SV_blank>probably<S2SV_blank>full!"" ) ; return FALSE ; } while ( table_length -- ) if ( ! DoWriteFile ( outfile , & cs64_chunk , sizeof ( cs64_chunk ) , & bcount ) || bcount != sizeof ( cs64_chunk ) ) { error_line ( ""can\'t<S2SV_blank>write<S2SV_blank>.WAV<S2SV_blank>data,<S2SV_blank>disk<S2SV_blank>probably<S2SV_blank>full!"" ) ; return FALSE ; } if ( <S2SV_ModEnd> "
515,<S2SV_StartBug> if ( MSG_CMSG_COMPAT & flags ) { <S2SV_EndBug> <S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; msg_sys -> msg_namelen = 0 
516,<S2SV_StartBug> struct buffer_head * dibh = mp -> mp_bh [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> const unsigned end_of_metadata = height - 1 ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> super_block * sb = sdp -> sd_vfs ; struct <S2SV_ModStart> ; int ret <S2SV_ModStart> if ( buffer_zeronew ( bh_map ) ) { ret = sb_issue_zeroout ( sb , dblock , dblks , GFP_NOFS ) ; if ( ret ) { fs_err ( sdp , ""Failed<S2SV_blank>to<S2SV_blank>zero<S2SV_blank>data<S2SV_blank>buffers\\n"" ) ; clear_buffer_zeronew ( bh_map ) ; } } "
517,"<S2SV_StartBug> vpx_codec_iface_name ( global -> codec -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> input -> use_i420 ? ""I420"" : ""YV12"" ) ; <S2SV_EndBug> <S2SV_StartBug> SHOW ( g_timebase . num ) ; <S2SV_EndBug> <S2SV_StartBug> SHOW ( rc_resize_allowed ) ; <S2SV_EndBug> ","<S2SV_ModStart> codec_interface ( ) ) ) ; fprintf ( stderr , ""Source<S2SV_blank>file:<S2SV_blank>%s<S2SV_blank>File<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>Format:<S2SV_blank>%s\\n"" , <S2SV_ModEnd> <S2SV_ModStart> file_type_to_string ( input -> file_type ) , image_format_to_string ( input -> fmt ) <S2SV_ModEnd> <S2SV_ModStart> g_bit_depth ) ; SHOW ( g_input_bit_depth ) ; SHOW ( <S2SV_ModStart> ) ; SHOW ( rc_scaled_width ) ; SHOW ( rc_scaled_height "
518,<S2SV_StartBug> PROFILER_ENTER ( context -> priv -> prof_nsc_rle_decompress_data ) <S2SV_EndBug> <S2SV_StartBug> nsc_rle_decompress_data ( context ) ; <S2SV_EndBug> <S2SV_StartBug> PROFILER_ENTER ( context -> priv -> prof_nsc_decode ) <S2SV_EndBug> <S2SV_StartBug> context -> decode ( context ) ; <S2SV_EndBug> <S2SV_StartBug> PROFILER_EXIT ( context -> priv -> prof_nsc_decode ) <S2SV_EndBug> ,<S2SV_ModStart> { BOOL rc ; <S2SV_ModStart> rc = <S2SV_ModStart> if ( ! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> rc = <S2SV_ModStart> if ( ! rc ) return FALSE ; } 
519,<S2SV_StartBug> ( target -> doc -> dict == ctxt -> dict ) ) <S2SV_EndBug> ,"<S2SV_ModStart> && xmlDictOwns ( ctxt -> dict , value ) "
520,"<S2SV_StartBug> if ( copy_file ( ""/etc/skel/.zshrc"" , fname , u , g , 0644 ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( copy_file ( ""/etc/skel/.cshrc"" , fname , u , g , 0644 ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( copy_file ( ""/etc/skel/.bashrc"" , fname , u , g , 0644 ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; <S2SV_ModEnd> <S2SV_ModStart> else { touch_file_as_user ( fname , u , g , 0644 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; <S2SV_ModEnd> <S2SV_ModStart> else { touch_file_as_user ( fname , u , g , 0644 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
521,"<S2SV_StartBug> size_t * acl_len ) <S2SV_EndBug> <S2SV_StartBug> __be32 * savep ; <S2SV_EndBug> <S2SV_StartBug> * acl_len = 0 ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; <S2SV_EndBug> <S2SV_StartBug> dprintk ( ""NFS:<S2SV_blank>server<S2SV_blank>cheating<S2SV_blank>in<S2SV_blank>getattr"" <S2SV_EndBug> <S2SV_StartBug> * acl_len = attrlen ; <S2SV_EndBug> ","<S2SV_ModStart> struct nfs_getaclres * res <S2SV_ModEnd> <S2SV_ModStart> , * bm_p <S2SV_ModStart> res -> <S2SV_ModEnd> <S2SV_ModStart> ; bm_p = xdr -> p <S2SV_ModStart> xdr -> p = bm_p ; res -> acl_data_offset = be32_to_cpup ( bm_p ) + 2 ; res -> acl_data_offset <<= 2 ; <S2SV_ModStart> ; attrlen += res -> acl_data_offset <S2SV_ModStart> if ( res -> acl_flags & NFS4_ACL_LEN_REQUEST ) { res -> acl_len = attrlen ; goto out ; } dprintk ( ""NFS:<S2SV_blank>acl<S2SV_blank>reply:<S2SV_blank>attrlen<S2SV_blank>%u<S2SV_blank>><S2SV_blank>recvd<S2SV_blank>%u\\n"" <S2SV_ModEnd> <S2SV_ModStart> res -> <S2SV_ModEnd> "
522,<S2SV_StartBug> if ( fv -> b . nextsame != NULL || fv -> b . sf -> fv != & fv -> b ) { <S2SV_EndBug> ,<S2SV_ModStart> } else if ( warn_script_unsaved && fv -> script_unsaved && AskScriptChanged ( ) == 2 ) { return false ; 
523,<S2SV_StartBug> assert ( msix_tab_size % 4096 == 0 ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
524,<S2SV_StartBug> when = timespec_to_ns ( new_setting -> it_value ) ; <S2SV_EndBug> <S2SV_StartBug> period = timespec_to_ns ( new_setting -> it_interval ) ; <S2SV_EndBug> <S2SV_StartBug> now = timespec_to_ns ( n ) ; <S2SV_EndBug> ,<S2SV_ModStart> & <S2SV_ModStart> & <S2SV_ModStart> & 
525,"<S2SV_StartBug> if ( ! js_regexec ( re -> prog , text , & m , 0 ) ) <S2SV_EndBug> ","<S2SV_ModStart> js_doregexec ( J , <S2SV_ModEnd> "
526,"<S2SV_StartBug> if ( Int_val ( Field ( ( value ) dest , 1 ) ) >= 0 ) <S2SV_EndBug> ",<S2SV_ModStart> Long_val <S2SV_ModEnd> 
527,"<S2SV_StartBug> struct range * range ; <S2SV_EndBug> <S2SV_StartBug> size_t content_length ; <S2SV_EndBug> <S2SV_StartBug> int code = 500 , fd = - 1 , i , nranges , ret ; <S2SV_EndBug> <S2SV_StartBug> if ( ( range = parse_range ( range_str , st -> st_size , & nranges ) ) == NULL ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( evb = evbuffer_new ( ) ) == NULL ) { <S2SV_EndBug> <S2SV_StartBug> ( void ) snprintf ( content_range , sizeof ( content_range ) , <S2SV_EndBug> <S2SV_StartBug> content_length = range -> end - range -> start + 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( buffer_add_range ( fd , evb , range ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> content_length = 0 ; <S2SV_EndBug> <S2SV_StartBug> content_length += i ; <S2SV_EndBug> <S2SV_StartBug> range ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ( i = evbuffer_add_printf ( evb , ""\\r\\n--%ud--\\r\\n"" , <S2SV_EndBug> <S2SV_StartBug> content_length += i ; <S2SV_EndBug> <S2SV_StartBug> ""byteranges;<S2SV_blank>boundary=%ud"" , boundary ) ; <S2SV_EndBug> <S2SV_StartBug> close ( fd ) ; <S2SV_EndBug> <S2SV_StartBug> goto done ; <S2SV_EndBug> <S2SV_StartBug> if ( server_bufferevent_write_buffer ( clt , evb ) == - 1 ) <S2SV_EndBug> <S2SV_StartBug> bufferevent_enable ( clt -> clt_bev , EV_READ | EV_WRITE ) ; <S2SV_EndBug> <S2SV_StartBug> if ( clt -> clt_persist ) <S2SV_EndBug> <S2SV_StartBug> if ( evb != NULL ) <S2SV_EndBug> ","<S2SV_ModStart> range_data * r = & clt -> clt_ranges ; struct range * range <S2SV_ModEnd> <S2SV_ModStart> = 0 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> nranges = parse_ranges ( clt , <S2SV_ModEnd> <S2SV_ModStart> ) ) < 1 <S2SV_ModEnd> <S2SV_ModStart> r -> range_media = media ; <S2SV_ModEnd> <S2SV_ModStart> range = & r -> range [ 0 ] ; <S2SV_ModStart> range = & r -> range [ 0 ] ; content_length += <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> arc4random_buf ( & clt -> clt_boundary , sizeof ( clt -> clt_boundary ) ) ; for ( i = 0 ; i < nranges ; i ++ ) { range = & r -> range [ i ] ; if ( ( ret = snprintf ( NULL , 0 , ""\\r\\n--%llu\\r\\n"" ""Content-Type:<S2SV_blank>%s/%s\\r\\n"" ""Content-Range:<S2SV_blank>bytes<S2SV_blank>%lld-%lld/%lld\\r\\n\\r\\n"" , clt -> clt_boundary , media -> media_type , media -> media_subtype , range -> start , range -> end , st -> st_size ) ) < 0 <S2SV_ModEnd> <S2SV_ModStart> ret + <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ret = snprintf ( NULL , 0 , ""\\r\\n--%llu--\\r\\n"" , clt -> clt_boundary ) ) < 0 <S2SV_ModEnd> <S2SV_ModStart> ret <S2SV_ModEnd> <S2SV_ModStart> ""byteranges;<S2SV_blank>boundary=%llu"" , clt -> clt_boundary <S2SV_ModEnd> <S2SV_ModStart> r -> range_toread = TOREAD_HTTP_RANGE <S2SV_ModEnd> <S2SV_ModStart> close ( fd ) ; <S2SV_ModStart> clt -> clt_fd = fd ; if ( clt -> clt_srvbev != NULL ) bufferevent_free ( clt -> clt_srvbev ) ; clt -> clt_srvbev_throttled = 0 ; clt -> clt_srvbev = bufferevent_new ( clt -> clt_fd , server_read_httprange , server_write , server_file_error , clt ) ; if ( clt -> clt_srvbev == NULL ) { errstr = ""failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>file<S2SV_blank>buffer<S2SV_blank>event"" ; <S2SV_ModEnd> <S2SV_ModStart> } bufferevent_setwatermark ( clt -> clt_srvbev , EV_READ , 0 , clt -> clt_sndbufsiz ) ; bufferevent_settimeout ( clt -> clt_srvbev , srv_conf -> timeout . tv_sec , srv_conf -> timeout . tv_sec ) ; bufferevent_enable ( clt -> clt_srvbev , EV_READ ) ; bufferevent_disable ( clt -> clt_bev , EV_READ ) ; done : server_reset_http ( clt ) ; return ( 0 ) ; fail : bufferevent_disable <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
528,"<S2SV_StartBug> ier = ksz8851ReadReg ( interface , KSZ8851_REG_IER ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_IER , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> isr = ksz8851ReadReg ( interface , KSZ8851_REG_ISR ) ; <S2SV_EndBug> <S2SV_StartBug> ier &= ~ IER_LCIE ; <S2SV_EndBug> <S2SV_StartBug> if ( ( isr & ISR_TXIS ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_ISR , ISR_TXIS ) ; <S2SV_EndBug> <S2SV_StartBug> n = ksz8851ReadReg ( interface , KSZ8851_REG_TXMIR ) & TXMIR_TXMA_MASK ; <S2SV_EndBug> <S2SV_StartBug> if ( ( isr & ISR_RXIS ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> ier &= ~ IER_RXIE ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_IER , ier ) ; <S2SV_EndBug> ","<S2SV_ModStart> KSZ8851_IER <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_IER <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_IER_LCIE <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_ISR_TXIS <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_ISR , KSZ8851_ISR_TXIS <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_TXMIR ) & KSZ8851_TXMIR_TXMA <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_ISR_RXIS <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_IER_RXIE <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_IER <S2SV_ModEnd> "
529,"<S2SV_StartBug> static void encode_quantization ( VP9_COMMON * cm , <S2SV_EndBug> <S2SV_StartBug> struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> base_qindex , QINDEX_BITS ) ; <S2SV_EndBug> ",<S2SV_ModStart> const VP9_COMMON * const <S2SV_ModEnd> <S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> 
530,<S2SV_StartBug> } else if ( encoding == 1 && ( c -> bpp == 6 || c -> bpp == 8 ) ) { <S2SV_EndBug> ,<S2SV_ModStart> && c -> format != CHUNKY 
531,"<S2SV_StartBug> if ( write ( uipc_main . ch [ ch_id ] . fd , p_buf , msglen ) < 0 ) <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
532,<S2SV_StartBug> return tmp ; <S2SV_EndBug> <S2SV_StartBug> return tmp ; <S2SV_EndBug> <S2SV_StartBug> return state -> ptr = tmp ; <S2SV_EndBug> ,<S2SV_ModStart> goto softfail <S2SV_ModEnd> <S2SV_ModStart> goto softfail <S2SV_ModEnd> <S2SV_ModStart> softfail : state -> offset = 0 ; 
533,<S2SV_StartBug> struct fb_vblank vblank ; <S2SV_EndBug> ,"<S2SV_ModStart> ; memset ( & vblank , 0 , sizeof ( vblank ) ) "
534,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } else if ( ctx -> might_cancel ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> spin_lock ( & ctx -> cancel_lock ) ; <S2SV_ModStart> { __timerfd_remove_cancel <S2SV_ModEnd> <S2SV_ModStart> spin_unlock ( & ctx -> cancel_lock ) ; 
535,"<S2SV_StartBug> c16 -> Curves [ i ] = _cmsCalloc ( ContextID , nElements , sizeof ( cmsUInt16Number ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID , c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID , c16 -> Curves ) ; _cmsFree ( ContextID , c16 ) ; return NULL ; } "
536,"<S2SV_StartBug> if ( kern_path ( dev_name , LOOKUP_FOLLOW , & path ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ! dev_name || 
537,"<S2SV_StartBug> isoclns_print ( ndo , p + 1 , length - 1 , caplen - 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
538,"<S2SV_StartBug> if ( peekonly ) { <S2SV_EndBug> <S2SV_StartBug> memcpy ( msg , & msg_tmp , sizeof ( * msg ) ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy_fromio ( msg , bus -> m_pdwGetRing + curr_grp , space_rem ) ; <S2SV_EndBug> <S2SV_StartBug> sizeof ( * msg ) - space_rem ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy_fromio ( buf , bus -> m_pdwGetRing + sizeof ( * msg ) - <S2SV_EndBug> <S2SV_StartBug> } else if ( space_rem == sizeof ( * msg ) ) { <S2SV_EndBug> ","<S2SV_ModStart> memcpy ( msg , & msg_tmp , sizeof ( * msg ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd> <S2SV_ModStart> sizeof ( * msg ) - space_rem , buf_size ) ; } else if ( space_rem == sizeof ( * msg ) ) { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd> <S2SV_ModStart> buf_size ) ; } else { if ( buf ) { <S2SV_ModEnd> <S2SV_ModStart> curr_grp + sizeof ( * msg ) , space_rem - sizeof ( * msg ) ) ; memcpy_fromio ( buf + space_rem - sizeof ( * msg ) , bus -> m_pdwGetRing , bytes_to_read - space_rem ) ; } } } else { if ( buf ) memcpy_fromio ( buf , bus -> m_pdwGetRing + curr_grp + sizeof ( * msg ) , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
539,"<S2SV_StartBug> RETVAL_STRINGL ( replaced , ( int ) new_len , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; } 
540,"<S2SV_StartBug> if ( peerkey && ! EVP_PKEY_cmp ( peerkey , localkey ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> != 1 
541,"<S2SV_StartBug> strcat ( t1_buf_array , t1_line_array ) ; <S2SV_EndBug> ","<S2SV_ModStart> alloc_array ( t1_buf , strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE ) ; <S2SV_ModStart> ) ; alloc_array ( t1_line , strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE "
542,"<S2SV_StartBug> BLOCK_SIZE bsize , BLOCK_SIZE subsize ) { <S2SV_EndBug> <S2SV_StartBug> int bsl = b_width_log2 ( bsize ) , hbs = ( 1 << bsl ) / 4 ; <S2SV_EndBug> <S2SV_StartBug> PARTITION_TYPE partition = partition_lookup [ bsl ] [ subsize ] ; <S2SV_EndBug> <S2SV_StartBug> set_modeinfo_offsets ( cm , xd , mi_row , mi_col ) ; <S2SV_EndBug> <S2SV_StartBug> * ( xd -> mi [ 0 ] ) = get_block_context ( x , subsize ) -> mic ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> * ( xd -> mi [ 0 ] ) = get_block_context ( x , subsize ) -> mic ; <S2SV_EndBug> <S2SV_StartBug> duplicate_mode_info_in_sb ( cm , xd , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 1 ; <S2SV_EndBug> <S2SV_StartBug> duplicate_mode_info_in_sb ( cm , xd , mi_row , mi_col + hbs , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> * ( xd -> mi [ 0 ] ) = get_block_context ( x , subsize ) -> mic ; <S2SV_EndBug> <S2SV_StartBug> duplicate_mode_info_in_sb ( cm , xd , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 1 ; <S2SV_EndBug> <S2SV_StartBug> duplicate_mode_info_in_sb ( cm , xd , mi_row + hbs , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> * ( get_sb_partitioning ( x , subsize ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> fill_mode_info_sb ( cm , x , mi_row , mi_col + hbs , subsize , <S2SV_EndBug> <S2SV_StartBug> fill_mode_info_sb ( cm , x , mi_row + hbs , mi_col , subsize , <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ","<S2SV_ModStart> PC_TREE * pc_tree <S2SV_ModEnd> <S2SV_ModStart> b_width_log2_lookup [ bsize ] <S2SV_ModEnd> <S2SV_ModStart> pc_tree -> partitioning ; BLOCK_SIZE subsize = get_subsize ( bsize , partition ) <S2SV_ModEnd> <S2SV_ModStart> set_mode_info_offsets ( cm , x <S2SV_ModEnd> <S2SV_ModStart> pc_tree -> none . mic ; * ( x -> mbmi_ext ) = pc_tree -> none . mbmi_ext <S2SV_ModEnd> <S2SV_ModStart> set_mode_info_offsets ( cm , x <S2SV_ModEnd> <S2SV_ModStart> pc_tree -> vertical [ 0 ] . mic ; * ( x -> mbmi_ext ) = pc_tree -> vertical [ 0 ] . mbmi_ext ; <S2SV_ModEnd> <S2SV_ModStart> subsize <S2SV_ModEnd> <S2SV_ModStart> set_mode_info_offsets ( cm , x , xd , mi_row , mi_col + hbs ) ; * ( xd -> mi [ 0 ] ) = pc_tree -> vertical [ 1 ] . mic ; * ( x -> mbmi_ext ) = pc_tree -> vertical [ 1 ] . mbmi_ext ; <S2SV_ModEnd> <S2SV_ModStart> subsize <S2SV_ModEnd> <S2SV_ModStart> set_mode_info_offsets ( cm , x <S2SV_ModEnd> <S2SV_ModStart> pc_tree -> horizontal [ 0 ] . mic ; * ( x -> mbmi_ext ) = pc_tree -> horizontal [ 0 ] . mbmi_ext ; <S2SV_ModEnd> <S2SV_ModStart> subsize <S2SV_ModEnd> <S2SV_ModStart> set_mode_info_offsets ( cm , x , xd , mi_row + hbs , mi_col ) ; * ( xd -> mi [ 0 ] ) = pc_tree -> horizontal [ 1 ] . mic ; * ( x -> mbmi_ext ) = pc_tree -> horizontal [ 1 ] . mbmi_ext ; <S2SV_ModEnd> <S2SV_ModStart> subsize <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModEnd> <S2SV_ModStart> pc_tree -> split [ 0 ] ) ; fill_mode_info_sb ( cm , x , mi_row , mi_col + hbs , subsize , pc_tree -> split [ 1 ] ) <S2SV_ModEnd> <S2SV_ModStart> + hbs , mi_col , subsize , pc_tree -> split [ 2 ] ) <S2SV_ModEnd> <S2SV_ModStart> + hbs , subsize , pc_tree -> split [ 3 ] <S2SV_ModEnd> <S2SV_ModStart> } "
543,<S2SV_StartBug> free ( name ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! strcmp ( key , ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options , data -> obj , FSCK_MSG_GITMODULES_URL , ""disallowed<S2SV_blank>submodule<S2SV_blank>url:<S2SV_blank>%s"" , value ) ; "
544,<S2SV_StartBug> int pixel_ptr = 0 ; <S2SV_EndBug> <S2SV_StartBug> block_ptr = row_ptr + pixel_ptr ; <S2SV_EndBug> <S2SV_StartBug> ADVANCE_BLOCK ( ) ; <S2SV_EndBug> <S2SV_StartBug> block_ptr = row_ptr + pixel_ptr ; <S2SV_EndBug> <S2SV_StartBug> ADVANCE_BLOCK ( ) ; <S2SV_EndBug> <S2SV_StartBug> block_ptr = row_ptr + pixel_ptr ; <S2SV_EndBug> <S2SV_StartBug> ADVANCE_BLOCK ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> - 4 <S2SV_ModEnd> <S2SV_ModStart> ADVANCE_BLOCK ( ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ADVANCE_BLOCK ( ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ADVANCE_BLOCK ( ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
545,<S2SV_StartBug> int n ; <S2SV_EndBug> ,<S2SV_ModStart> ssize_t <S2SV_ModEnd> 
546,<S2SV_StartBug> __be16 type ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( NAPI_GRO_CB ( skb ) -> encap_mark ) goto out ; NAPI_GRO_CB ( skb ) -> encap_mark = 1 
547,<S2SV_StartBug> if ( ! ( matrix = jas_malloc ( sizeof ( jas_matrix_t ) ) ) ) { <S2SV_EndBug> ,<S2SV_ModStart> numrows < 0 || numcols < 0 ) { return 0 ; } if ( 
548,"<S2SV_StartBug> rval = tpm_kdfa ( sapi_context , session -> authHash , & ( key . b ) , label , & ( session -> nonceNewer . b ) , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
549,"<S2SV_StartBug> ret = key_permission ( key_ref , KEY_NEED_READ ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; } "
550,<S2SV_StartBug> || ( ret == ERROR_UNAVAIL_MVBUF_T ) ) <S2SV_EndBug> <S2SV_StartBug> || ( ret == ERROR_UNAVAIL_MVBUF_T ) ) <S2SV_EndBug> ,<S2SV_ModStart> || ( ret == ERROR_INV_SPS_PPS_T ) ) { ps_dec -> u4_slice_start_code_found = 0 ; <S2SV_ModEnd> <S2SV_ModStart> || ( ret == ERROR_INV_SPS_PPS_T ) 
551,<S2SV_StartBug> dst_known = tnum_is_const ( dst_reg -> var_off ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! src_known && opcode != BPF_ADD && opcode != BPF_SUB && opcode != BPF_AND ) { __mark_reg_unknown ( dst_reg ) ; return 0 ; } 
552,<S2SV_StartBug> if ( ( rc == 0 ) || ( rc == - ENOENT ) ) <S2SV_EndBug> ,"<S2SV_ModStart> switch ( rc ) { case 0 : if ( newInode && ! S_ISREG ( newInode -> i_mode ) ) { CIFSSMBClose ( xid , pTcon , fileHandle ) ; break ; } case - ENOENT : posix_open = true ; case - EOPNOTSUPP : break ; default : pTcon -> broken_posix_open = true ; } } if ( ! posix_open ) rc = cifs_get_inode_info_unix ( & newInode , full_path , parent_dir_inode -> i_sb , xid ) ; } else rc = cifs_get_inode_info ( & newInode , full_path , NULL , parent_dir_inode -> i_sb , xid , NULL ) ; <S2SV_ModStart> && ( newInode != NULL ) ) { d_add ( direntry , newInode ) ; if ( posix_open ) { filp = lookup_instantiate_filp ( nd , direntry , generic_file_open ) ; if ( IS_ERR ( filp ) ) { rc = PTR_ERR ( filp ) ; CIFSSMBClose ( xid , pTcon , fileHandle ) ; goto lookup_out ; } cfile = cifs_new_fileinfo ( fileHandle , filp , tlink , oplock ) ; if ( cfile == NULL ) { fput ( filp ) ; CIFSSMBClose ( xid , pTcon , fileHandle ) ; rc = - ENOMEM ; goto lookup_out ; } } renew_parental_timestamps ( direntry ) ; } else if <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
553,<S2SV_StartBug> u8 * data = NULL ; <S2SV_EndBug> <S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> hdr . flags & ~ ( VFIO_IRQ_SET_DATA_TYPE_MASK | <S2SV_EndBug> <S2SV_StartBug> if ( ! ( hdr . flags & VFIO_IRQ_SET_DATA_NONE ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( hdr . flags & VFIO_IRQ_SET_DATA_BOOL ) <S2SV_EndBug> <S2SV_StartBug> hdr . start >= max || hdr . start + hdr . count > max ) <S2SV_EndBug> ,"<S2SV_ModStart> size_t size ; <S2SV_ModStart> max , <S2SV_ModStart> count >= ( U32_MAX - hdr . start ) || hdr . <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) return - EINVAL ; switch ( hdr . flags & VFIO_IRQ_SET_DATA_TYPE_MASK ) { case VFIO_IRQ_SET_DATA_NONE : size = 0 ; break ; case VFIO_IRQ_SET_DATA_BOOL : size = sizeof ( uint8_t ) ; break ; case VFIO_IRQ_SET_DATA_EVENTFD : size = sizeof ( int32_t ) ; break ; default : return - EINVAL ; } if ( size ) { if ( hdr . argsz - minsz < hdr . count * size "
554,"<S2SV_StartBug> if ( ext4_test_inode_state ( inode , EXT4_STATE_ORDERED_MODE ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
555,<S2SV_StartBug> s -> filesize = - 1 ; <S2SV_EndBug> ,<S2SV_ModStart> UINT64_MAX <S2SV_ModEnd> 
556,"<S2SV_StartBug> int opt_size = sizeof ( struct ip_options ) + opt -> optlen ; <S2SV_EndBug> <S2SV_StartBug> if ( ireq -> opt != NULL && ip_options_echo ( ireq -> opt , skb ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> & ireq -> opt <S2SV_ModEnd> 
557,"<S2SV_StartBug> int mutt_b64_decode ( char * out , const char * in ) <S2SV_EndBug> <S2SV_StartBug> * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; <S2SV_EndBug> <S2SV_StartBug> * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 2 ) ; <S2SV_EndBug> <S2SV_StartBug> * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | base64val ( digit4 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , size_t olen <S2SV_ModStart> if ( len == olen ) return len ; <S2SV_ModStart> if ( len == olen ) return len ; <S2SV_ModStart> if ( len == olen ) return len ; "
558,<S2SV_StartBug> pinctrl_unregister ( gpio_dev -> pctrl ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
559,"<S2SV_StartBug> size_t copied , len , cur_len ; <S2SV_EndBug> <S2SV_StartBug> copied = min_t ( const size_t , cur_len , PAGE_SIZE ) ; <S2SV_EndBug> <S2SV_StartBug> 0 , copied ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> cur_len = save_len - cur_len ; <S2SV_EndBug> ","<S2SV_ModStart> bytes , <S2SV_ModStart> bytes <S2SV_ModEnd> <S2SV_ModStart> bytes <S2SV_ModEnd> <S2SV_ModStart> if ( copied < bytes ) break ; <S2SV_ModStart> ; if ( ! cur_len ) { for ( i = 0 ; i < nr_pages ; i ++ ) put_page ( wdata -> pages [ i ] ) ; kfree ( wdata ) ; rc = - EFAULT ; break ; } for ( ; nr_pages > i + 1 ; nr_pages -- ) put_page ( wdata -> pages [ nr_pages - 1 ] ) "
560,<S2SV_StartBug> if ( ! ( quirks & CP_RDESC_SWAPPED_MIN_MAX ) ) <S2SV_EndBug> ,<S2SV_ModStart> ) return rdesc ; if ( * rsize < 4 
561,"<S2SV_StartBug> int number_of_frames , number_of_keyframes , encode_frame_count ; <S2SV_EndBug> <S2SV_StartBug> SvcInternal * const si = get_svc_internal ( svc_ctx ) ; <S2SV_EndBug> <S2SV_StartBug> encode_frame_count = si -> encode_frame_count ; <S2SV_EndBug> <S2SV_StartBug> if ( si -> encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; <S2SV_EndBug> <S2SV_StartBug> number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < si -> layers ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> number_of_frames = encode_frame_count ; <S2SV_EndBug> <S2SV_StartBug> si -> encode_frame_count = 0 ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> <S2SV_ModStart> number_of_frames = si -> psnr_pkt_received <S2SV_ModEnd> <S2SV_ModStart> number_of_frames <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> svc_ctx -> spatial_layers <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> psnr_pkt_received <S2SV_ModEnd> 
562,"<S2SV_StartBug> static void nsc_rle_decode ( BYTE * in , BYTE * out , UINT32 originalSize ) <S2SV_EndBug> <S2SV_StartBug> * out ++ = value ; <S2SV_EndBug> <S2SV_StartBug> FillMemory ( out , len , value ) ; <S2SV_EndBug> <S2SV_StartBug> * out ++ = value ; <S2SV_EndBug> ","<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> , UINT32 outSize <S2SV_ModStart> if ( outSize < 1 ) return FALSE ; outSize -- ; <S2SV_ModStart> if ( outSize < len ) return FALSE ; outSize -= len ; <S2SV_ModStart> if ( outSize < 1 ) return FALSE ; outSize -- ; * out ++ = value ; left -- ; } } if ( ( outSize < 4 ) || ( left < 4 ) ) return FALSE ; memcpy ( out , in , 4 ) ; return TRUE <S2SV_ModEnd> "
563,<S2SV_StartBug> if ( screen -> sb_buffer ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
564,"<S2SV_StartBug> const char * literal_start = * str ; <S2SV_EndBug> <S2SV_StartBug> for ( ; * str < end ; ( * str ) ++ ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && <S2SV_EndBug> <S2SV_StartBug> in_named_escape = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( * str + 1 < end && * ( * str + 1 ) == ch ) { <S2SV_EndBug> <S2SV_StartBug> ast_error ( c , n , ""f-string:<S2SV_blank>single<S2SV_blank>\'}\'<S2SV_blank>is<S2SV_blank>not<S2SV_blank>allowed"" ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> literal_end = * str ; <S2SV_EndBug> <S2SV_StartBug> assert ( * str <= end ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( * str == end || * * str == '{' || * * str == '}' ) ; <S2SV_EndBug> <S2SV_StartBug> if ( literal_start != literal_end ) { <S2SV_EndBug> <S2SV_StartBug> literal_end - literal_start , <S2SV_EndBug> <S2SV_StartBug> literal_end - literal_start ) ; <S2SV_EndBug> ","<S2SV_ModStart> s = * str ; const char * literal_start = s <S2SV_ModEnd> <S2SV_ModStart> while ( s < end ) { char ch = * s ++ <S2SV_ModEnd> <S2SV_ModStart> raw && ch == '\\\\' && s < end ) { ch = * s ++ ; if ( ch == 'N' ) { if ( s < end && * s ++ == '{' ) { while ( s < end && * s ++ != <S2SV_ModEnd> <S2SV_ModStart> } continue ; } break ; } if ( ch == '{' && warn_invalid_escape_sequence ( c , n , ch ) < 0 ) { return - 1 ; } } <S2SV_ModEnd> <S2SV_ModStart> s < end && * s == ch ) { * str = s + 1 <S2SV_ModEnd> <S2SV_ModStart> * str = s - 1 ; <S2SV_ModStart> s -- ; <S2SV_ModStart> * str = s <S2SV_ModEnd> <S2SV_ModStart> s <S2SV_ModEnd> <S2SV_ModStart> s <S2SV_ModEnd> <S2SV_ModStart> s <S2SV_ModEnd> <S2SV_ModStart> s <S2SV_ModEnd> <S2SV_ModStart> s <S2SV_ModEnd> <S2SV_ModStart> s <S2SV_ModEnd> <S2SV_ModStart> s <S2SV_ModEnd> "
565,"<S2SV_StartBug> static int mem_resize ( jas_stream_memobj_t * m , int bufsize ) <S2SV_EndBug> <S2SV_StartBug> assert ( bufsize >= 0 ) ; <S2SV_EndBug> <S2SV_StartBug> JAS_DBGLOG ( 100 , ( ""mem_resize(%p,<S2SV_blank>%d)\\n"" , m , bufsize ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""mem_resize(%p,<S2SV_blank>%zu)\\n"" <S2SV_ModEnd> <S2SV_ModStart> if ( ! bufsize ) { jas_eprintf ( ""mem_resize<S2SV_blank>was<S2SV_blank>not<S2SV_blank>really<S2SV_blank>designed<S2SV_blank>to<S2SV_blank>handle<S2SV_blank>a<S2SV_blank>buffer<S2SV_blank>of<S2SV_blank>size<S2SV_blank>0\\n"" ""This<S2SV_blank>may<S2SV_blank>not<S2SV_blank>work.\\n"" ) ; } "
566,"<S2SV_StartBug> struct dump_dir * dd = create_dump_dir_from_problem_data ( pd , g_settings_dump_location ) ; <S2SV_EndBug> ","<S2SV_ModStart> dd = NULL ; if ( g_settings_privatereports ) dd = create_dump_dir_from_problem_data_ext ( pd , g_settings_dump_location , 0 ) ; else "
567,"<S2SV_StartBug> if ( ! LookupString ( symInterpretMatchMaskNames , pred_txt , pred_rtrn ) ) { <S2SV_EndBug> ",<S2SV_ModStart> || ! expr -> action . args 
568,<S2SV_StartBug> static void pcrypt_free ( struct crypto_instance * inst ) <S2SV_EndBug> <S2SV_StartBug> struct pcrypt_instance_ctx * ctx = crypto_instance_ctx ( inst ) ; <S2SV_EndBug> ,<S2SV_ModStart> aead_instance <S2SV_ModEnd> <S2SV_ModStart> aead_instance_ctx <S2SV_ModEnd> 
569,<S2SV_StartBug> pixel_value += ( srcptr2 [ z ] << ( 8 * z ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> ( unsigned long ) 
570,<S2SV_StartBug> if ( ( image_info -> ping != MagickFalse ) && ( image_info -> number_scenes != 0 ) ) <S2SV_EndBug> ,"<S2SV_ModStart> EOFBlob ( image ) != MagickFalse ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; if ( "
571,<S2SV_StartBug> in6_dev -> cnf . hop_limit = ra_msg -> icmph . icmp6_hop_limit ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( <S2SV_ModStart> < <S2SV_ModEnd> <S2SV_ModStart> ) { in6_dev -> cnf . hop_limit = ra_msg -> icmph . icmp6_hop_limit ; } else { ND_PRINTK ( 2 , warn , ""RA:<S2SV_blank>Got<S2SV_blank>route<S2SV_blank>advertisement<S2SV_blank>with<S2SV_blank>lower<S2SV_blank>hop_limit<S2SV_blank>than<S2SV_blank>current\\n"" ) ; } <S2SV_ModEnd> "
572,"<S2SV_StartBug> l2tp_proxy_auth_id_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> const uint16_t * ptr = ( const uint16_t * ) dat ; <S2SV_EndBug> ","<S2SV_ModStart> , u_int length <S2SV_ModStart> if ( length < 2 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } "
573,<S2SV_StartBug> if ( ! replay_esn || ! rp ) <S2SV_EndBug> <S2SV_StartBug> if ( xfrm_replay_state_esn_len ( replay_esn ) != <S2SV_EndBug> <S2SV_StartBug> xfrm_replay_state_esn_len ( up ) ) <S2SV_EndBug> ,<S2SV_ModStart> int ulen ; <S2SV_ModStart> ulen = xfrm_replay_state_esn_len ( up ) ; if ( nla_len ( rp ) < ulen || <S2SV_ModEnd> <S2SV_ModStart> ulen <S2SV_ModEnd> 
574,"<S2SV_StartBug> int ret = proc_dointvec ( table , write , buffer , lenp , ppos ) ; <S2SV_EndBug> ",<S2SV_ModStart> proc_dointvec_minmax <S2SV_ModEnd> 
575,"<S2SV_StartBug> in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
576,"<S2SV_StartBug> l_current_pi -> include = ( OPJ_INT16 * ) opj_calloc ( ( l_tcp -> numlayers + 1 ) * l_step_l , sizeof ( OPJ_INT16 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if <S2SV_EndBug> ",<S2SV_ModStart> 00 ; if ( l_step_l <= ( SIZE_MAX / ( l_tcp -> numlayers + 1U ) ) ) { l_current_pi -> include = <S2SV_ModStart> } 
577,"<S2SV_StartBug> return try_then_request_module ( __crypto_lookup_template ( name ) , ""%s"" , <S2SV_EndBug> ","<S2SV_ModStart> ""crypto-%s"" <S2SV_ModEnd> "
578,"<S2SV_StartBug> int start = 0 ; <S2SV_EndBug> <S2SV_StartBug> kvm_pit_load_count ( kvm , 0 , kvm -> arch . vpit -> pit_state . channels [ 0 ] . count , start ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; int i <S2SV_ModStart> for ( i = 0 ; i < 3 ; i ++ ) <S2SV_ModStart> i <S2SV_ModEnd> <S2SV_ModStart> i <S2SV_ModEnd> 
579,"<S2SV_StartBug> static void encode_nonrd_sb_row ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( & xd -> left_context , 0 , sizeof ( xd -> left_context ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( mi_col = tile -> mi_col_start ; mi_col < tile -> mi_col_end ; <S2SV_EndBug> <S2SV_StartBug> int dummy_rate = 0 ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 = cm -> mi_grid_visible + idx_str ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str ; <S2SV_EndBug> <S2SV_StartBug> BLOCK_SIZE bsize ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( cpi -> mb . pred_mv ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( cpi -> sf . partition_search_type ) { <S2SV_EndBug> <S2SV_StartBug> choose_partitioning ( cpi , tile , mi_row , mi_col ) ; <S2SV_EndBug> <S2SV_StartBug> nonrd_use_partition ( cpi , tile , mi_8x8 , tp , mi_row , mi_col , BLOCK_64X64 , <S2SV_EndBug> <S2SV_StartBug> 1 , & dummy_rate , & dummy_dist ) ; <S2SV_EndBug> <S2SV_StartBug> set_offsets ( cpi , tile , mi_row , mi_col , BLOCK_64X64 ) ; <S2SV_EndBug> <S2SV_StartBug> set_source_var_based_partition ( cpi , tile , mi_8x8 , mi_row , mi_col ) ; <S2SV_EndBug> <S2SV_StartBug> nonrd_use_partition ( cpi , tile , mi_8x8 , tp , mi_row , mi_col , BLOCK_64X64 , <S2SV_EndBug> <S2SV_StartBug> 1 , & dummy_rate , & dummy_dist ) ; <S2SV_EndBug> <S2SV_StartBug> case VAR_BASED_FIXED_PARTITION : <S2SV_EndBug> <S2SV_StartBug> bsize = cpi -> sf . partition_search_type == FIXED_PARTITION ? <S2SV_EndBug> <S2SV_StartBug> set_fixed_partitioning ( cpi , tile , mi_8x8 , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> nonrd_use_partition ( cpi , tile , mi_8x8 , tp , mi_row , mi_col , BLOCK_64X64 , <S2SV_EndBug> <S2SV_StartBug> 1 , & dummy_rate , & dummy_dist ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . partition_check || sb_has_motion ( cm , prev_mi_8x8 ) ) { <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_partition ( cpi , tile , tp , mi_row , mi_col , BLOCK_64X64 , <S2SV_EndBug> <S2SV_StartBug> & dummy_rate , & dummy_dist , 1 , INT64_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> copy_partitioning ( cm , mi_8x8 , prev_mi_8x8 ) ; <S2SV_EndBug> <S2SV_StartBug> nonrd_use_partition ( cpi , tile , mi_8x8 , tp , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> BLOCK_64X64 , 1 , & dummy_rate , & dummy_dist ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ThreadData * td , TileDataEnc * tile_data , int mi_row , TOKENEXTRA * * tp ) { SPEED_FEATURES * const sf = & cpi -> sf ; VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModEnd> <S2SV_ModStart> tile_info = & tile_data -> tile_info ; MACROBLOCK * const x = & td -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; int mi_col ; memset ( & xd -> left_context , 0 , sizeof ( <S2SV_ModEnd> <S2SV_ModStart> ) ) ; memset ( xd -> left_seg_context <S2SV_ModStart> left_seg_context <S2SV_ModEnd> <S2SV_ModStart> tile_info <S2SV_ModEnd> <S2SV_ModStart> tile_info <S2SV_ModEnd> <S2SV_ModStart> const struct segmentation * const seg = & cm -> seg ; RD_COST dummy_rdc <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> PARTITION_SEARCH_TYPE partition_search_type = sf -> partition_search_type <S2SV_ModEnd> <S2SV_ModStart> = BLOCK_64X64 ; int seg_skip = 0 ; x -> <S2SV_ModEnd> <S2SV_ModStart> x -> <S2SV_ModEnd> <S2SV_ModStart> vp9_rd_cost_init ( & dummy_rdc ) ; x -> color_sensitivity [ 0 ] = 0 ; x -> color_sensitivity [ 1 ] = 0 ; if ( seg -> enabled ) { const uint8_t * const map = seg -> update_map ? cpi -> segmentation_map : cm -> last_frame_seg_map ; int segment_id = get_segment_id ( cm , map , BLOCK_64X64 , mi_row , mi_col ) ; seg_skip = segfeature_active ( seg , segment_id , SEG_LVL_SKIP ) ; if ( seg_skip ) { partition_search_type = FIXED_PARTITION ; } } switch ( <S2SV_ModEnd> <S2SV_ModStart> tile_info , x <S2SV_ModEnd> <S2SV_ModStart> td , tile_data , mi <S2SV_ModEnd> <S2SV_ModStart> BLOCK_64X64 , <S2SV_ModEnd> <S2SV_ModStart> dummy_rdc , td -> pc_root <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tile_info , x , mi <S2SV_ModEnd> <S2SV_ModStart> td , tile_data , mi <S2SV_ModEnd> <S2SV_ModStart> BLOCK_64X64 , <S2SV_ModEnd> <S2SV_ModStart> dummy_rdc , td -> pc_root <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! seg_skip ) bsize = sf -> always_this_block_size <S2SV_ModEnd> <S2SV_ModStart> tile_info , mi <S2SV_ModEnd> <S2SV_ModStart> td , tile_data , mi <S2SV_ModEnd> <S2SV_ModStart> BLOCK_64X64 , <S2SV_ModEnd> <S2SV_ModStart> dummy_rdc , td -> pc_root <S2SV_ModEnd> <S2SV_ModStart> set_offsets ( cpi , tile_info , x , mi_row , mi_col , BLOCK_64X64 ) ; <S2SV_ModStart> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cm -> seg . enabled && xd -> mi [ 0 ] -> mbmi . segment_id ) { if ( cm -> width <= 352 && cm -> height <= 288 ) x -> max_partition_size = BLOCK_32X32 ; else x -> max_partition_size = BLOCK_64X64 ; x -> min_partition_size = BLOCK_8X8 ; <S2SV_ModEnd> <S2SV_ModStart> td , tile_data <S2SV_ModEnd> <S2SV_ModStart> BLOCK_64X64 , & dummy_rdc <S2SV_ModEnd> <S2SV_ModStart> , td -> pc_root <S2SV_ModStart> choose_partitioning ( cpi , tile_info , x , mi_row , mi_col ) ; if ( cm -> frame_type == KEY_FRAME ) <S2SV_ModEnd> <S2SV_ModStart> td , tile_data , mi <S2SV_ModEnd> <S2SV_ModStart> dummy_rdc , td -> pc_root ) ; else nonrd_select_partition ( cpi , td , tile_data , mi , tp , mi_row , mi_col , BLOCK_64X64 , 1 , & dummy_rdc , td -> pc_root <S2SV_ModEnd> <S2SV_ModStart> break ; "
580,"<S2SV_StartBug> pipe_buf_get ( ipipe , ibuf ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! <S2SV_ModStart> ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> 
581,"<S2SV_StartBug> dh = skb_header_pointer ( skb , dataoff , sizeof ( _dh ) , & dh ) ; <S2SV_EndBug> ",<S2SV_ModStart> _dh <S2SV_ModEnd> 
582,"<S2SV_StartBug> Fp = fopen ( filename , ""wb"" ) ; <S2SV_EndBug> <S2SV_StartBug> return HTTP_UNAUTHORIZED ; <S2SV_EndBug> ",<S2SV_ModStart> # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> # else return HTTP_NOT_FOUND ; # endif 
583,"<S2SV_StartBug> char * dir = ""/etc"" ; <S2SV_EndBug> <S2SV_StartBug> if ( ( fd = xfmkstemp ( & tmpname , dir ) ) == NULL ) { <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""/etc"" , "".vipw"" <S2SV_ModEnd> "
584,<S2SV_StartBug> if ( IS_ERR ( blkg ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
585,<S2SV_StartBug> if ( pixdepth == 1 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( pixdepth == 8 ) { <S2SV_EndBug> ,<S2SV_ModStart> bpp == 1 && <S2SV_ModStart> bpp == 8 && 
586,"<S2SV_StartBug> krb5_data rspac ; <S2SV_EndBug> <S2SV_StartBug> krbtgt_out , <S2SV_EndBug> ","<S2SV_ModStart> ; const char * tgt_realm = krb5_principal_get_realm ( context , krbtgt -> entry . principal ) <S2SV_ModStart> tgt_realm , "
587,"<S2SV_StartBug> cookie = dentry -> d_inode -> i_op -> follow_link ( dentry , nd ) ; <S2SV_EndBug> ",<S2SV_ModStart> nd -> last_type = LAST_BIND ; 
588,"<S2SV_StartBug> struct usbdevfs_connectinfo ci = { <S2SV_EndBug> <S2SV_StartBug> . devnum = ps -> dev -> devnum , <S2SV_EndBug> <S2SV_StartBug> } ; <S2SV_EndBug> ","<S2SV_ModStart> ; memset ( & ci , 0 , sizeof ( ci ) ) ; ci <S2SV_ModEnd> <S2SV_ModStart> ; ci <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
589,"<S2SV_StartBug> static int ip_options_get_finish ( struct net * net , struct ip_options * * optp , <S2SV_EndBug> <S2SV_StartBug> struct ip_options * opt , int optlen ) <S2SV_EndBug> <S2SV_StartBug> opt -> __data [ optlen ++ ] = IPOPT_END ; <S2SV_EndBug> <S2SV_StartBug> opt -> optlen = optlen ; <S2SV_EndBug> <S2SV_StartBug> if ( optlen && ip_options_compile ( net , opt , NULL ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> & opt -> 
590,<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( args -> rmtblkno ) { <S2SV_EndBug> ,<S2SV_ModStart> args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtblkno = 0 ; args -> rmtblkcnt = 0 ; args -> rmtvaluelen = 0 ; <S2SV_ModStart> args -> rmtvaluelen = args -> rmtvaluelen2 ; 
591,"<S2SV_StartBug> byte readBuffer [ TC_SECTOR_SIZE_BIOS ] ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> offset . QuadPart = 0 ; <S2SV_EndBug> <S2SV_StartBug> sizeof ( readBuffer ) , <S2SV_EndBug> <S2SV_StartBug> if ( NT_SUCCESS ( ntStatus ) ) <S2SV_EndBug> <S2SV_StartBug> Irp -> IoStatus . Status = ntStatus ; <S2SV_EndBug> <S2SV_StartBug> Irp -> IoStatus . Information = 0 ; <S2SV_EndBug> ","<S2SV_ModStart> size_t devicePathLen = 0 <S2SV_ModEnd> <S2SV_ModStart> if ( ! NT_SUCCESS ( RtlUnalignedStringCchLengthW ( request -> DevicePath , TC_MAX_PATH , & devicePathLen ) ) || ( devicePathLen < 28 ) || ( devicePathLen > 30 ) || ( memcmp ( request -> DevicePath , L""\\\\Device\\\\Harddisk"" , 16 * sizeof ( WCHAR ) ) ) || ( memcmp ( & request -> DevicePath [ devicePathLen - 11 ] , L""\\\\Partition0"" , 11 * sizeof ( WCHAR ) ) ) ) { Irp -> IoStatus . Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus . Information = 0 ; break ; } <S2SV_ModStart> byte * readBuffer = TCalloc ( TC_MAX_VOLUME_SECTOR_SIZE ) ; if ( ! readBuffer ) { Irp -> IoStatus . Status = STATUS_INSUFFICIENT_RESOURCES ; Irp -> IoStatus . Information = 0 ; } else { <S2SV_ModStart> TC_MAX_VOLUME_SECTOR_SIZE <S2SV_ModEnd> <S2SV_ModStart> ) { if ( IoStatus . Information >= TC_SECTOR_SIZE_BIOS <S2SV_ModStart> STATUS_INVALID_PARAMETER ; Irp -> IoStatus . Information = 0 ; } } else { Irp -> IoStatus . Status = <S2SV_ModStart> ; } TCfree ( readBuffer ) "
592,<S2SV_StartBug> if ( connection == NULL ) <S2SV_EndBug> ,<S2SV_ModStart> || strlen ( connection ) > UT_WS_SVR_MAX_HEADER_SIZE 
593,"<S2SV_StartBug> uint16 nif = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( d = alldevs ; d != NULL ; d = d -> next ) <S2SV_EndBug> <S2SV_StartBug> plen += strlen ( d -> description ) ; <S2SV_EndBug> <S2SV_StartBug> plen += strlen ( d -> name ) ; <S2SV_EndBug> <S2SV_StartBug> plen += sizeof ( struct rpcap_findalldevs_if ) ; <S2SV_EndBug> <S2SV_StartBug> plen += ( sizeof ( struct rpcap_sockaddr ) * 4 ) ; <S2SV_EndBug> <S2SV_StartBug> RPCAP_MSG_FINDALLIF_REPLY , nif , plen ) ; <S2SV_EndBug> ",<S2SV_ModStart> uint32 replylen ; <S2SV_ModStart> replylen = 0 ; <S2SV_ModStart> replylen <S2SV_ModEnd> <S2SV_ModStart> replylen <S2SV_ModEnd> <S2SV_ModStart> replylen <S2SV_ModEnd> <S2SV_ModStart> replylen <S2SV_ModEnd> <S2SV_ModStart> replylen <S2SV_ModEnd> 
594,"<S2SV_StartBug> struct dump_dir * dd = dd_create ( path , client_uid , DEFAULT_DUMP_DIR_MODE ) ; <S2SV_EndBug> ",<S2SV_ModStart> g_settings_privatereports ? 0 : 
595,<S2SV_StartBug> for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 1 ) ; x += 2 ) <S2SV_EndBug> ,<S2SV_ModStart> 4 <S2SV_ModEnd> 
596,"<S2SV_StartBug> BN_ULONG t1 , t2 ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
597,<S2SV_StartBug> int tstype ) <S2SV_EndBug> <S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> serr -> ee . ee_info = tstype ; <S2SV_EndBug> ,"<S2SV_ModStart> , bool opt_stats <S2SV_ModStart> ; BUILD_BUG_ON ( sizeof ( struct sock_exterr_skb ) > sizeof ( skb -> cb ) ) <S2SV_ModStart> ; serr -> opt_stats = opt_stats "
598,"<S2SV_StartBug> if ( ( decoder ) ( image , & dds_info , exception ) != MagickTrue ) <S2SV_EndBug> ","<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
599,"<S2SV_StartBug> if ( in_cksum ( vec , 1 ) ) <S2SV_EndBug> <S2SV_StartBug> EXTRACT_16BITS ( & bp [ 6 ] ) ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> { ND_TCHECK_16BITS ( & bp [ 6 ] ) ; <S2SV_ModStart> } 
600,"<S2SV_StartBug> run_burl_normalize ( psrc , ptmp , flags , __LINE__ , CONST_STR_LEN ( ""/a%2fb"" ) , CONST_STR_LEN ( ""/a/b"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%2f?"" ) , CONST_STR_LEN ( ""/?"" ) ) ; run_burl_normalize ( psrc , ptmp , flags , __LINE__ , CONST_STR_LEN ( ""/%2f?"" ) , CONST_STR_LEN ( ""//?"" ) ) ; run_burl_normalize ( psrc , ptmp , flags , __LINE__ , CONST_STR_LEN ( "
601,"<S2SV_StartBug> if ( ! dumpable && ! ptrace_has_cap ( __task_cred ( task ) -> user_ns , mode ) ) { <S2SV_EndBug> ",<S2SV_ModStart> dumpable != SUID_DUMP_USER && <S2SV_ModEnd> 
602,<S2SV_StartBug> for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( int ) 
603,<S2SV_StartBug> if ( flags & __GFP_ZERO ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
604,<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> int rowstep ; <S2SV_EndBug> ,<S2SV_ModStart> jas_matind_t i ; jas_matind_t <S2SV_ModEnd> <S2SV_ModStart> jas_matind_t <S2SV_ModEnd> 
605,"<S2SV_StartBug> ihevcd_parse_user_data_registered_itu_t_t35 ( ps_codec , <S2SV_EndBug> <S2SV_StartBug> u4_payload_size ) ; <S2SV_EndBug> <S2SV_StartBug> ihevcd_parse_user_data_registered_itu_t_t35 ( ps_codec , <S2SV_EndBug> <S2SV_StartBug> u4_payload_size ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ps_parse -> s_sei_params . i4_sei_user_data_cnt >= USER_DATA_MAX ) { for ( i = 0 ; i < u4_payload_size / 4 ; i ++ ) { ihevcd_bits_flush ( ps_bitstrm , 4 * 8 ) ; } ihevcd_bits_flush ( ps_bitstrm , ( u4_payload_size - i * 4 ) * 8 ) ; } else { <S2SV_ModStart> } <S2SV_ModStart> if ( ps_parse -> s_sei_params . i4_sei_user_data_cnt >= USER_DATA_MAX ) { for ( i = 0 ; i < u4_payload_size / 4 ; i ++ ) { ihevcd_bits_flush ( ps_bitstrm , 4 * 8 ) ; } ihevcd_bits_flush ( ps_bitstrm , ( u4_payload_size - i * 4 ) * 8 ) ; } else { <S2SV_ModStart> } "
606,"<S2SV_StartBug> priv = kzalloc ( sizeof ( struct cypress_private ) , GFP_KERNEL ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! port -> interrupt_out_urb || ! port -> interrupt_in_urb ) { dev_err ( & port -> dev , ""required<S2SV_blank>endpoint<S2SV_blank>is<S2SV_blank>missing\\n"" ) ; return - ENODEV ; } "
607,<S2SV_StartBug> if ( ret < 0 ) <S2SV_EndBug> <S2SV_StartBug> dd -> sdma_rht = tmp_sdma_rht ; <S2SV_EndBug> ,<S2SV_ModStart> { kfree ( tmp_sdma_rht ) ; <S2SV_ModStart> } 
608,<S2SV_StartBug> put_device ( & dev -> dev ) ; <S2SV_EndBug> ,<S2SV_ModStart> cancel_autoload_drivers ( ) ; 
609,"<S2SV_StartBug> const char * name , int rep_quick ) <S2SV_EndBug> <S2SV_StartBug> mysql_file_close ( new_file , MYF ( 0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( param -> testflag & T_BACKUP_DATA ? <S2SV_EndBug> ","<S2SV_ModStart> , my_bool no_copy_stat <S2SV_ModStart> myf flags = 0 ; if ( param -> testflag & T_BACKUP_DATA ) flags |= MY_REDEL_MAKE_BACKUP ; if ( no_copy_stat ) flags |= MY_REDEL_NO_COPY_STAT ; <S2SV_ModStart> flags <S2SV_ModEnd> "
610,<S2SV_StartBug> if ( p == q || size < 16 || size > 256 ) <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) || ( <S2SV_ModEnd> <S2SV_ModStart> ) || ( <S2SV_ModEnd> <S2SV_ModStart> ) 
611,"<S2SV_StartBug> uint dblocks = XFS_B_TO_FSB ( mp , valuelen ) ; <S2SV_EndBug> ",<S2SV_ModStart> xfs_attr3_rmt_blocks <S2SV_ModEnd> 
612,<S2SV_StartBug> pairs = palloc ( pcount * sizeof ( Pairs ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( pcount < 0 || pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , pcount , ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ; "
613,"<S2SV_StartBug> ruleaddvar ( r , var , val ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( ! val ) continue 
614,<S2SV_StartBug> if ( text [ 1 ] == EOF ) <S2SV_EndBug> <S2SV_StartBug> if ( text [ 2 ] == EOF ) <S2SV_EndBug> <S2SV_StartBug> if ( text [ 3 ] == EOF ) <S2SV_EndBug> ,<S2SV_ModStart> || text [ 1 ] == 0 <S2SV_ModStart> ! isxdigit ( <S2SV_ModStart> ) <S2SV_ModEnd> <S2SV_ModStart> ! isxdigit ( <S2SV_ModStart> ) <S2SV_ModEnd> 
615,<S2SV_StartBug> c -> req -> path . start = c -> req -> msg + ( path . start - c -> buf ) ; <S2SV_EndBug> ,"<S2SV_ModStart> memcpy ( c -> req -> remote , c -> remote , sizeof ( c -> remote ) ) ; "
616,"<S2SV_StartBug> void vp9_fht16x16_c ( const int16_t * input , int16_t * output , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct16x16_c ( input , output , stride ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t out [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t * outptr = & out [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t temp_in [ 16 ] , temp_out [ 16 ] ; <S2SV_EndBug> <S2SV_StartBug> outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> vpx_fdct16x16_c <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> 
617,"<S2SV_StartBug> g_print ( _ ( ""Skipping<S2SV_blank>invalid<S2SV_blank>Exec<S2SV_blank>argument<S2SV_blank>%s\\n"" ) , arg ) ; <S2SV_EndBug> ","<S2SV_ModStart> { flatpak_fail_error ( error , FLATPAK_ERROR_EXPORT_FAILED , _ ( ""Invalid<S2SV_blank>Exec<S2SV_blank>argument<S2SV_blank>%s"" <S2SV_ModEnd> <S2SV_ModStart> goto out ; } "
618,"<S2SV_StartBug> if ( ! IS_POSIXACL ( inode ) || ! inode -> i_op -> set_acl ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> goto out_errno ; <S2SV_EndBug> <S2SV_StartBug> error = inode -> i_op -> set_acl ( inode , argp -> acl_default , <S2SV_EndBug> ","<S2SV_ModStart> error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> <S2SV_ModStart> fh_lock ( fh ) ; error = set_posix_acl ( inode , ACL_TYPE_ACCESS , argp -> acl_access <S2SV_ModEnd> <S2SV_ModStart> out_drop_lock ; error = set_posix_acl ( inode , ACL_TYPE_DEFAULT <S2SV_ModEnd> <S2SV_ModStart> ) ; out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> "
619,<S2SV_StartBug> BUG_IF ( tree_root == NULL ) ; <S2SV_EndBug> ,<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> return 0 
620,"<S2SV_StartBug> char * temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! temp_filename ) { <S2SV_EndBug> <S2SV_StartBug> fprintf ( fp , ""[%s]\\n"" , section -> name ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( fp , ""%s<S2SV_blank>=<S2SV_blank>%s\\n"" , entry -> key , entry -> value ) ; <S2SV_EndBug> <S2SV_StartBug> fputc ( '\\n' , fp ) ; <S2SV_EndBug> <S2SV_StartBug> fclose ( fp ) ; <S2SV_EndBug> <S2SV_StartBug> osi_free ( temp_filename ) ; <S2SV_EndBug> <S2SV_StartBug> error : ; <S2SV_EndBug> <S2SV_StartBug> osi_free ( temp_filename ) ; <S2SV_EndBug> ","<S2SV_ModStart> int dir_fd = - 1 ; FILE * fp = NULL ; static const char * temp_file_ext = "".new"" ; const int filename_len = strlen ( filename ) ; const int temp_filename_len = filename_len + strlen ( temp_file_ext ) + 1 ; char * <S2SV_ModEnd> <S2SV_ModStart> temp_filename_len ) ; snprintf ( temp_filename , temp_filename_len , ""%s%s"" , filename , temp_file_ext ) ; char * temp_dirname = osi_strdup ( filename ) ; const char * directoryname = dirname ( temp_dirname <S2SV_ModEnd> <S2SV_ModStart> directoryname ) { LOG_ERROR ( ""%s<S2SV_blank>error<S2SV_blank>extracting<S2SV_blank>directory<S2SV_blank>from<S2SV_blank>\'%s\':<S2SV_blank>%s"" , __func__ , filename , strerror ( errno ) ) ; goto error ; } dir_fd = TEMP_FAILURE_RETRY ( open ( directoryname , O_RDONLY ) ) ; if ( dir_fd < 0 ) { LOG_ERROR ( ""%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s"" , __func__ , directoryname , strerror ( errno ) ) ; goto error ; } <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModStart> < 0 ) { LOG_ERROR ( ""%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s"" , __func__ , temp_filename , strerror ( errno ) ) ; goto error ; } <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModStart> < 0 ) { LOG_ERROR ( ""%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s"" , __func__ , temp_filename , strerror ( errno ) ) ; goto error ; } <S2SV_ModEnd> <S2SV_ModStart> { if ( <S2SV_ModStart> == EOF ) { LOG_ERROR ( ""%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s"" , __func__ , temp_filename , strerror ( errno ) ) ; goto error ; } } } if ( fsync ( fileno ( fp ) ) < 0 ) { LOG_WARN ( ""%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>fsync<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s"" , __func__ , temp_filename , strerror ( errno ) ) ; } if ( <S2SV_ModEnd> <S2SV_ModStart> == EOF ) { LOG_ERROR ( ""%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>close<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s"" , __func__ , temp_filename , strerror ( errno ) ) ; goto error ; } fp = NULL <S2SV_ModStart> if ( fsync ( dir_fd ) < 0 ) { LOG_WARN ( ""%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>fsync<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s"" , __func__ , directoryname , strerror ( errno ) ) ; } if ( close ( dir_fd ) < 0 ) { LOG_ERROR ( ""%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>close<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s"" , __func__ , directoryname , strerror ( errno ) ) ; goto error ; } <S2SV_ModStart> ) ; osi_free ( temp_dirname <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( fp ) fclose ( fp ) ; if ( dir_fd != - 1 ) close ( dir_fd ) ; <S2SV_ModStart> ) ; osi_free ( temp_dirname "
621,<S2SV_StartBug> switch ( pc -> componentType ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case 5 : <S2SV_EndBug> <S2SV_StartBug> elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; <S2SV_EndBug> ,<S2SV_ModStart> elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> { elen += pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> <S2SV_ModStart> elen += pc -> lengthComponentIdent ; if ( elen > fromlen ) return - EIO ; <S2SV_ModStart>  <S2SV_ModEnd> 
622,<S2SV_StartBug> ND_TCHECK ( dp [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> dp += 3 ; <S2SV_EndBug> ,"<S2SV_ModStart> 4 <S2SV_ModEnd> <S2SV_ModStart> ND_PRINT ( ( ndo , ""<S2SV_blank><%s>"" , tok2str ( nfsv3_writemodes , NULL , EXTRACT_32BITS ( & dp [ 3 ] <S2SV_ModEnd> "
623,"<S2SV_StartBug> ND_TCHECK ( * vtp_vlan ) ; <S2SV_EndBug> <S2SV_StartBug> fn_printzp ( ndo , tptr + VTP_VLAN_INFO_OFFSET , vtp_vlan -> name_len , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> len -= VTP_VLAN_INFO_OFFSET + 4 * ( ( vtp_vlan -> name_len + 3 ) / 4 ) ; <S2SV_EndBug> <S2SV_StartBug> tptr += VTP_VLAN_INFO_OFFSET + 4 * ( ( vtp_vlan -> name_len + 3 ) / 4 ) ; <S2SV_EndBug> <S2SV_StartBug> type = * tptr ; <S2SV_EndBug> <S2SV_StartBug> if ( type == 0 || tlv_len == 0 ) { <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , tlv_len * 2 + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> len -= 2 + tlv_len * 2 ; <S2SV_EndBug> ","<S2SV_ModStart> if ( len < VTP_VLAN_INFO_FIXED_PART_LEN ) goto trunc ; <S2SV_ModStart> len -= VTP_VLAN_INFO_FIXED_PART_LEN ; tptr += VTP_VLAN_INFO_FIXED_PART_LEN ; if ( len < 4 * ( ( <S2SV_ModEnd> <S2SV_ModStart> + 3 ) / 4 ) ) goto trunc ; ND_TCHECK2 ( * tptr , <S2SV_ModEnd> <S2SV_ModStart> ) ; fn_printzp ( ndo , tptr , <S2SV_ModEnd> <S2SV_ModStart> , NULL ) ; len -= 4 * ( ( vtp_vlan -> name_len + 3 ) / 4 ) ; tptr += 4 * ( ( vtp_vlan -> name_len <S2SV_ModStart> if ( len < 2 ) goto trunc ; ND_TCHECK2 ( * tptr , 2 ) ; <S2SV_ModStart> len < tlv_len * 2 + 2 ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(TLV<S2SV_blank>goes<S2SV_blank>past<S2SV_blank>the<S2SV_blank>end<S2SV_blank>of<S2SV_blank>the<S2SV_blank>packet)"" ) ) ; <S2SV_ModEnd> <S2SV_ModStart> if ( tlv_len != 1 ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(invalid<S2SV_blank>TLV<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>!=<S2SV_blank>1)"" , tlv_len ) ) ; return ; } else { <S2SV_ModStart> } "
624,"<S2SV_StartBug> target , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> instate = state ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ctxt -> instate != XML_PARSER_EOF ) <S2SV_ModStart> if ( <S2SV_ModStart> != XML_PARSER_EOF ) ctxt -> instate 
625,<S2SV_StartBug> bool slow ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * addr_len = sizeof ( * sin ) ; 
626,"<S2SV_StartBug> u_int tlen , pdu_type , pdu_len ; <S2SV_EndBug> <S2SV_StartBug> while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( rpki_rtr_pdu_print ( ndo , tptr , 8 ) ) <S2SV_EndBug> <S2SV_StartBug> tptr += pdu_len ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> len ) { u_int pdu_len = <S2SV_ModEnd> <S2SV_ModStart> pptr , len , 1 <S2SV_ModEnd> <S2SV_ModStart> ; len <S2SV_ModEnd> <S2SV_ModStart> pptr <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
627,"<S2SV_StartBug> s = tcp_recv ( NULL , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ber_in_header ( s , & tagval , & length ) || <S2SV_EndBug> <S2SV_StartBug> in_uint8s ( s , length ) ; <S2SV_EndBug> <S2SV_StartBug> token -> end = token -> p = token -> data ; <S2SV_EndBug> ","<S2SV_ModStart> struct stream packet ; <S2SV_ModStart> packet = * s ; <S2SV_ModStart> if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>version<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } <S2SV_ModStart> if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>token<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } s_realloc ( token , length ) ; s_reset ( token ) <S2SV_ModEnd> "
628,<S2SV_StartBug> int chars_processed ; <S2SV_EndBug> <S2SV_StartBug> int data_size = ndo -> ndo_snapend - bp ; <S2SV_EndBug> <S2SV_StartBug> chars_processed = 1 ; <S2SV_EndBug> <S2SV_StartBug> cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; <S2SV_EndBug> <S2SV_StartBug> chars_processed ++ ; <S2SV_EndBug> <S2SV_StartBug> chars_processed += l ; <S2SV_EndBug> <S2SV_StartBug> chars_processed ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> elt ; u_int offset , max_offset ; if ( ( l = labellen ( ndo , cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ! ND_TTEST2 ( * cp , 1 ) ) return ( NULL ) ; max_offset = ( u_int ) ( cp - bp ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK ) != INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i != 0 ) while ( i && cp < <S2SV_ModEnd> <S2SV_ModStart> ) { if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if ( ! compress ) { rp = cp + 1 ; compress = 1 ; } <S2SV_ModEnd> <S2SV_ModStart> offset = ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( offset >= max_offset ) { ND_PRINT ( ( ndo , ""<BAD<S2SV_blank>PTR>"" ) ) ; return ( NULL ) ; } max_offset = offset ; cp = bp + offset ; if ( ( l = labellen ( ndo , cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
629,"<S2SV_StartBug> blkcnt = xfs_attr3_rmt_blocks ( mp , args -> valuelen ) ; <S2SV_EndBug> <S2SV_StartBug> valuelen = args -> valuelen ; <S2SV_EndBug> ",<S2SV_ModStart> rmtvaluelen <S2SV_ModEnd> <S2SV_ModStart> rmtvaluelen <S2SV_ModEnd> 
630,"<S2SV_StartBug> int rv = Socket_print ( S , <S2SV_EndBug> <S2SV_StartBug> ""Content-Length:<S2SV_blank>%d\\r\\n"" <S2SV_EndBug> <S2SV_StartBug> request , <S2SV_EndBug> ","<S2SV_ModStart> MD_T token ; StringBuffer_append ( data , ""%ssecuritytoken=%s"" , StringBuffer_length ( data ) > 0 ? ""&"" : """" , Util_getToken ( token ) ) ; <S2SV_ModStart> ""Cookie:<S2SV_blank>securitytoken=%s\\r\\n"" <S2SV_ModStart> , token "
631,"<S2SV_StartBug> pid_t child = fork ( ) ; <S2SV_EndBug> <S2SV_StartBug> int rv = copy_file ( src , dest ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chown ( dest , getuid ( ) , getgid ( ) ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( chmod ( dest , S_IRUSR | S_IWUSR ) < 0 ) <S2SV_EndBug> ","<S2SV_ModStart> copy_file_as_user <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; fs_logger2 ( ""clone"" , dest <S2SV_ModEnd> "
632,<S2SV_StartBug> if ( rc != BFA_STATUS_OK ) <S2SV_EndBug> <S2SV_StartBug> wait_for_completion ( & fcomp . comp ) ; <S2SV_EndBug> ,<S2SV_ModStart> { kfree ( fcstats ) ; <S2SV_ModStart> } 
633,"<S2SV_StartBug> value -> x = MinF ( 1.0f , MaxF ( 0.0f , value -> x ) ) ; <S2SV_EndBug> <S2SV_StartBug> value -> y = MinF ( 1.0f , MaxF ( 0.0f , value -> y ) ) ; <S2SV_EndBug> <S2SV_StartBug> value -> z = MinF ( 1.0f , MaxF ( 0.0f , value -> z ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> MagickMax <S2SV_ModEnd> <S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> MagickMax <S2SV_ModEnd> <S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> MagickMax <S2SV_ModEnd> 
634,<S2SV_StartBug> * head = NULL ; <S2SV_EndBug> ,"<S2SV_ModStart> giterr_set_str ( GITERR_NET , ""Invalid<S2SV_blank>empty<S2SV_blank>packet"" ) ; return GIT_ERROR <S2SV_ModEnd> "
635,"<S2SV_StartBug> if ( check_stack_guard_page ( vma , address ) < 0 ) <S2SV_EndBug> ",<S2SV_ModStart> vma -> vm_flags & VM_SHARED ) return VM_FAULT_SIGBUS ; if ( 
636,<S2SV_StartBug> rec -> sasl_username = src -> sasl_username ; <S2SV_EndBug> <S2SV_StartBug> rec -> sasl_password = src -> sasl_password ; <S2SV_EndBug> ,<S2SV_ModStart> g_strdup ( <S2SV_ModStart> ) <S2SV_ModStart> g_strdup ( <S2SV_ModStart> ) 
637,"<S2SV_StartBug> struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; <S2SV_EndBug> <S2SV_StartBug> env -> insn_aux_data = new_data ; <S2SV_EndBug> ",<S2SV_ModStart> ; int i <S2SV_ModStart> for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ] . seen = true ; 
638,<S2SV_StartBug> ND_TCHECK ( dp -> ip6f_offlg ) ; <S2SV_EndBug> ,<S2SV_ModStart> * dp <S2SV_ModEnd> 
639,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""(refresh:<S2SV_blank>%u)"" , <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ; 
640,"<S2SV_StartBug> vpx_memset ( cpi -> gf_active_flags , 1 , ( cm -> mb_rows * cm -> mb_cols ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> 
641,"<S2SV_StartBug> assert ( ( occ0 % rowsize ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> ( * sp -> decodepfunc ) ( tif , op0 , rowsize ) ; <S2SV_EndBug> ","<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""PredictorDecodeTile"" , ""%s"" , ""occ0%rowsize<S2SV_blank>!=<S2SV_blank>0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> if ( ! <S2SV_ModStart> ) return 0 "
642,"<S2SV_StartBug> size_t i , tcount , o , datao ; <S2SV_EndBug> <S2SV_StartBug> ++ tcount ; <S2SV_EndBug> ","<S2SV_ModStart> ; long failsafe_size = 0 <S2SV_ModStart> failsafe_size += mnote_canon_entry_count_values ( & n -> entries [ tcount ] ) ; if ( failsafe_size > FAILSAFE_SIZE_MAX ) { exif_mem_free ( ne -> mem , n -> entries [ tcount ] . data ) ; exif_log ( ne -> log , EXIF_LOG_CODE_CORRUPT_DATA , ""ExifMnoteCanon"" , ""Failsafe<S2SV_blank>tag<S2SV_blank>size<S2SV_blank>overflow<S2SV_blank>(%lu<S2SV_blank>><S2SV_blank>%ld)"" , failsafe_size , FAILSAFE_SIZE_MAX ) ; break ; } "
643,<S2SV_StartBug> if ( ! ctx -> established ) { <S2SV_EndBug> ,<S2SV_ModStart> ctx -> terminated || 
644,<S2SV_StartBug> kfree ( sbi ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ; 
645,"<S2SV_StartBug> error = mi_repair_by_sort ( param , info , filename , rep_quick ) ; <S2SV_EndBug> <S2SV_StartBug> error = mi_repair_parallel ( param , info , filename , rep_quick ) ; <S2SV_EndBug> <S2SV_StartBug> error = mi_repair ( param , info , filename , rep_quick ) ; <S2SV_EndBug> <S2SV_StartBug> error = mi_repair_by_sort ( param , info , filename , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> error = mi_sort_index ( param , info , filename ) ; <S2SV_EndBug> ","<S2SV_ModStart> , FALSE <S2SV_ModStart> , FALSE <S2SV_ModStart> , FALSE <S2SV_ModStart> , FALSE <S2SV_ModStart> , FALSE "
646,"<S2SV_StartBug> int alloc = ( length ? length : ( int ) strlen ( string ) ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> CURLcode res ; <S2SV_EndBug> <S2SV_StartBug> res = Curl_convert_from_network ( handle , & in , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( res ) { <S2SV_EndBug> <S2SV_StartBug> * olen = strindex ; <S2SV_EndBug> ","<S2SV_ModStart> char * str = NULL ; size_t inputlen = length ; size_t outputlen <S2SV_ModEnd> <S2SV_ModStart> = Curl_urldecode <S2SV_ModEnd> <S2SV_ModStart> string , inputlen , & str , & outputlen , FALSE <S2SV_ModEnd> <S2SV_ModStart> return NULL <S2SV_ModEnd> <S2SV_ModStart> curlx_uztosi ( outputlen ) ; return str <S2SV_ModEnd> "
647,<S2SV_StartBug> RAnalOp next_op ; <S2SV_EndBug> ,<S2SV_ModStart> = { 0 } 
648,"<S2SV_StartBug> if ( unlikely ( copied == 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> iov_iter_advance ( i , copied ) ; <S2SV_EndBug> ","<S2SV_ModStart> iov_iter_advance ( i , copied ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
649,<S2SV_StartBug> if ( unlikely ( len > ring -> rx_buffersize ) ) { <S2SV_EndBug> ,<S2SV_ModStart> + ring -> frameoffset 
650,<S2SV_StartBug> def -> pdu_free_state_ref = usm_free_usmStateReference ; <S2SV_EndBug> ,<S2SV_ModStart> pdu_clone = usm_clone ; def -> 
651,"<S2SV_StartBug> show_object ( obj , NULL , name , data ) ; <S2SV_EndBug> <S2SV_StartBug> NULL , path , data ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> & base <S2SV_ModEnd> 
652,"<S2SV_StartBug> return ! match ( prog -> start , sp , sp , prog -> flags | eflags , sub ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , 0 "
653,<S2SV_StartBug> if ( src_end - src < zsize ) <S2SV_EndBug> <S2SV_StartBug> bitbuf = * src ++ ; <S2SV_EndBug> ,<S2SV_ModStart> + ( sub_type != 2 ) <S2SV_ModStart> if ( src >= src_end ) return AVERROR_INVALIDDATA ; 
654,<S2SV_StartBug> drop_futex_key_refs ( & q -> key ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
655,<S2SV_StartBug> # ifndef NETSNMP_NO_WRITE_SUPPORT <S2SV_EndBug> ,<S2SV_ModStart> if ! defined ( NETSNMP_NO_WRITE_SUPPORT ) && ENABLE_EXTEND_WRITE_ACCESS <S2SV_ModEnd> 
656,<S2SV_StartBug> switch ( depth ) <S2SV_EndBug> <S2SV_StartBug> CheckNumberCompactPixels ; <S2SV_EndBug> ,<S2SV_ModStart> CheckNumberCompactPixels ; <S2SV_ModStart>  <S2SV_ModEnd> 
657,"<S2SV_StartBug> list_for_each_entry_safe ( slave , tmp , & timeri -> slave_list_head , <S2SV_EndBug> <S2SV_StartBug> spin_lock_irq ( & slave_active_lock ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irq ( & slave_active_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> spin_lock_irq ( & slave_active_lock ) ; spin_lock ( & timer -> lock ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> list_del_init ( & slave -> ack_list ) ; list_del_init ( & slave -> active_list ) ; } spin_unlock ( & timer -> lock ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
658,"<S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> 
659,"<S2SV_StartBug> const char * arch = info -> arch ; <S2SV_EndBug> <S2SV_StartBug> if ( info -> cpu && * info -> cpu ) { <S2SV_EndBug> <S2SV_StartBug> r_config_set ( r -> config , ""anal.cpu"" , info -> cpu ) ; <S2SV_EndBug> <S2SV_StartBug> r_core_bin_set_cur ( r , binfile ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strdup ( info -> arch ) ; char * cpu = info -> cpu ? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) ; free ( cpu ) ; free ( arch 
660,"<S2SV_StartBug> static void sas_probe_devices ( struct work_struct * work ) <S2SV_EndBug> <S2SV_StartBug> struct domain_device * dev , * n ; <S2SV_EndBug> ",<S2SV_ModStart> asd_sas_port * port <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
661,<S2SV_StartBug> ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( <S2SV_EndBug> ,<S2SV_ModStart> { i_temp = ih264d_read_mmco_commands ( ps_dec ) ; if ( i_temp < 0 ) { return ERROR_DBP_MANAGER_T ; } <S2SV_ModStart> i_temp ; } <S2SV_ModEnd> 
662,"<S2SV_StartBug> int pkt_len ; <S2SV_EndBug> <S2SV_StartBug> char line [ NETSCREEN_LINE_LENGTH ] ; <S2SV_EndBug> <S2SV_StartBug> pkt_len = parse_netscreen_rec_hdr ( & wth -> phdr , line , cap_int , & cap_dir , <S2SV_EndBug> <S2SV_StartBug> if ( ! parse_netscreen_hex_dump ( wth -> fh , pkt_len , cap_int , <S2SV_EndBug> <S2SV_StartBug> cap_dst , & wth -> phdr , wth -> frame_buffer , err , err_info ) ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> parse_netscreen_packet <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , line "
663,"<S2SV_StartBug> dtls1_buffer_record ( s , & ( s -> d1 -> processed_rcds ) , <S2SV_EndBug> <S2SV_StartBug> s -> s3 -> rrec . seq_num ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( <S2SV_ModStart> < 0 ) return - 1 
664,<S2SV_StartBug> int_fast32_t widthOverflow = gifFilePtr -> Image . Width - info -> originalWidth ; <S2SV_EndBug> <S2SV_StartBug> const uint_fast32_t newRasterSize = gifFilePtr -> Image . Width * gifFilePtr -> Image . Height ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( newRasterSize == 0 ) { free ( info -> rasterBits ) ; info -> rasterBits = NULL ; info -> rasterSize = newRasterSize ; return ; } const int_fast32_t widthOverflow = gifFilePtr -> Image . Width - info -> originalWidth ; const int_fast32_t heightOverflow = gifFilePtr -> Image . Height - info -> originalHeight 
665,"<S2SV_StartBug> ret = key_validate ( key ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( key -> type -> read ) { <S2SV_EndBug> <S2SV_StartBug> ret = key -> type -> read ( key , buffer , buflen ) ; <S2SV_EndBug> ","<S2SV_ModStart> - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> ( key , buffer , buflen ) ; up_read <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
666,<S2SV_StartBug> cherokee_buffer_is_empty ( & conn -> validator -> user ) ) <S2SV_EndBug> ,<S2SV_ModStart> || cherokee_buffer_is_empty ( & conn -> validator -> passwd ) 
667,"<S2SV_StartBug> # define ThrowPICTException ( exception , message ) { if ( tile_image != ( Image * ) NULL ) tile_image = DestroyImage ( tile_image ) ; if ( read_info != ( ImageInfo * ) NULL ) read_info = DestroyImageInfo ( read_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> ( void ) fputc ( c , file ) ; <S2SV_EndBug> ",<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> != c ) break 
668,"<S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug> <S2SV_StartBug> * val = ( tmp & 0x80000000 ) ? ( - JAS_CAST ( longlong , ( ( ( ~ tmp ) & <S2SV_EndBug> <S2SV_StartBug> 0x7fffffff ) + 1 ) ) ) : JAS_CAST ( longlong , tmp ) ; <S2SV_EndBug> ",<S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> <S2SV_ModStart> jas_longlong <S2SV_ModEnd> <S2SV_ModStart> jas_longlong <S2SV_ModEnd> 
669,<S2SV_StartBug> kfree ( rm -> atomic . op_notifier ) ; <S2SV_EndBug> ,<S2SV_ModStart> rm -> atomic . op_active = 0 ; 
670,<S2SV_StartBug> assert ( bi != NULL ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( bi == NULL ) { pr_err ( ""%s:<S2SV_blank>pci<S2SV_blank>[%s]<S2SV_blank>has<S2SV_blank>wrong<S2SV_blank>bus<S2SV_blank>%d<S2SV_blank>info!\\n"" , __func__ , dev -> name , dev -> bus ) ; return ; } <S2SV_ModEnd> "
671,"<S2SV_StartBug> rdsdebug ( ""size<S2SV_blank>%zu<S2SV_blank>flags<S2SV_blank>0x%x<S2SV_blank>timeo<S2SV_blank>%ld\\n"" , size , msg_flags , timeo ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
672,"<S2SV_StartBug> if ( snprintf ( spath , sizeof ( spath ) , var , iface ) >= sizeof ( spath ) ) <S2SV_EndBug> ","<S2SV_ModStart> ) ) return - 1 ; if ( strstr ( name , "".."" ) || strchr ( name , '/' "
673,<S2SV_StartBug> for ( s += 9 ; isspace ( * s ) ; s ++ ) ; <S2SV_EndBug> <S2SV_StartBug> while ( * t && ! isspace ( * t ) ) t ++ ; <S2SV_EndBug> ,<S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) 
674,"<S2SV_StartBug> mutt_bcache_del ( pop_data -> bcache , ctx -> hdrs [ i ] -> data ) ; <S2SV_EndBug> ",<S2SV_ModStart> cache_id ( <S2SV_ModStart> ) 
675,<S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart> * objp = NULL ; 
676,"<S2SV_StartBug> result = select ( uipc_main . max_fd + 1 , & uipc_main . read_set , NULL , NULL , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
677,<S2SV_StartBug> goto discard ; <S2SV_EndBug> ,<S2SV_ModStart> consume_skb ( skb ) ; return 0 <S2SV_ModEnd> 
678,"<S2SV_StartBug> assert ( msgnum >= 1 && msgnum <= MAX_MSIX_TABLE_ENTRIES ) ; <S2SV_EndBug> <S2SV_StartBug> pci_msix_table_init ( dev , msgnum ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( msgnum > MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s:<S2SV_blank>Too<S2SV_blank>many<S2SV_blank>entries!\\n"" , __func__ ) ; return - 1 ; } <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModStart> != 0 ) return - 1 "
679,<S2SV_StartBug> upperdentry = ovl_dentry_upper ( dentry ) ; <S2SV_EndBug> <S2SV_StartBug> if ( upperdentry ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> ,<S2SV_ModStart> err = ovl_copy_up ( dentry ) ; if ( ! err ) { <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
680,<S2SV_StartBug> while ( isspace ( * p ) ) <S2SV_EndBug> ,<S2SV_ModStart> ( unsigned char ) 
681,<S2SV_StartBug> if ( ! authctxt -> valid ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( b = sshbuf_new ( ) ) == NULL ) <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s:<S2SV_blank>disabled<S2SV_blank>because<S2SV_blank>of<S2SV_blank>invalid<S2SV_blank>user"" , __func__ ) ; goto done ; } if ( "
682,"<S2SV_StartBug> static int decode_unsigned_max ( struct vp9_read_bit_buffer * rb , int max ) { <S2SV_EndBug> <S2SV_StartBug> const int data = vp9_rb_read_literal ( rb , get_unsigned_bits ( max ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_read_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> vpx_rb_read_literal <S2SV_ModEnd> 
683,<S2SV_StartBug> for ( i = 0 ; i < ctx -> msgcount ; i ++ ) <S2SV_EndBug> ,<S2SV_ModStart> if ( strlen ( line ) == 0 ) return - 1 ; 
684,<S2SV_StartBug> goto cleanup ; <S2SV_EndBug> <S2SV_StartBug> cleanup : <S2SV_EndBug> ,<S2SV_ModStart> return retval <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
685,<S2SV_StartBug> Jpeg2000Prec * prec = band -> prec + precno ; <S2SV_EndBug> <S2SV_StartBug> av_freep ( & band -> prec ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( band -> prec ) { <S2SV_ModStart> } 
686,"<S2SV_StartBug> if ( xmlPushInput ( ctxt , input ) < 0 ) <S2SV_EndBug> ",<S2SV_ModStart> { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> 
687,"<S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> err = ip6_xmit ( sk , skb , & fl6 , np -> opt , np -> tclass ) ; <S2SV_EndBug> ","<S2SV_ModStart> rcu_read_lock ( ) ; <S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) <S2SV_ModStart> ) ; rcu_read_unlock ( <S2SV_ModStart> rcu_read_lock ( ) ; <S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) , <S2SV_ModEnd> <S2SV_ModStart> ) ; rcu_read_unlock ( "
688,<S2SV_StartBug> static TX_MODE select_tx_mode ( const VP9_COMP * cpi ) { <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . lossless ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> common . current_video_frame == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . tx_size_search_method == USE_LARGESTALL ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> sf . tx_size_search_method == USE_FULL_RD ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> , MACROBLOCKD * const xd <S2SV_ModStart> xd -> lossless ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> frame_type == KEY_FRAME && cpi -> sf . use_nonrd_pick_mode ) return ALLOW_16X16 ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> || cpi -> sf . tx_size_search_method == USE_TX_8X8 ) return TX_MODE_SELECT ; else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
689,<S2SV_StartBug> void * H264SwDecMalloc ( u32 size ) <S2SV_EndBug> <S2SV_StartBug> return malloc ( size ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> <S2SV_ModStart> * num "
690,<S2SV_StartBug> } else if ( bad_format ( im -> gdes [ i ] . format ) ) { <S2SV_EndBug> <S2SV_StartBug> rrd_set_error <S2SV_EndBug> <S2SV_StartBug> if ( bad_format ( im -> gdes [ i ] . format ) ) { <S2SV_EndBug> <S2SV_StartBug> rrd_set_error <S2SV_EndBug> ,<S2SV_ModStart> bad_format_print <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> bad_format_print <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
691,<S2SV_StartBug> if ( shdr -> sh_size < 1 ) { <S2SV_EndBug> ,<S2SV_ModStart> || shdr -> sh_size > SIZE_MAX 
692,<S2SV_StartBug> if ( buf1 -> size < buf2 -> size ) { <S2SV_EndBug> ,<S2SV_ModStart> return ( int ) ( buf2 -> size - <S2SV_ModEnd> <S2SV_ModStart> ) ; } <S2SV_ModEnd> 
693,<S2SV_StartBug> root_storage -> d_storage_uuid ) ) < 0 ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
694,<S2SV_StartBug> size_t sz = sizeof ( * info ) + size ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( sz < sizeof ( * info ) ) return NULL 
695,<S2SV_StartBug> if ( ! eof ) { <S2SV_EndBug> ,<S2SV_ModStart> && vars -> str . c != vars -> ptr 
696,"<S2SV_StartBug> if ( ! net_eq ( net , & init_net ) ) <S2SV_EndBug> ",<S2SV_ModStart> protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if ( 
697,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug> <S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MAJ , 1 , 0 , <S2SV_EndBug> <S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN , 1 , 0 , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
698,<S2SV_StartBug> ctxt -> _eip = ctxt -> src . val ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = ctxt -> src . val ; <S2SV_EndBug> ,"<S2SV_ModStart> rc = assign_eip_near ( ctxt , <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( rc != X86EMUL_CONTINUE ) break <S2SV_ModStart> rc = assign_eip_near ( ctxt , <S2SV_ModEnd> <S2SV_ModStart> ) "
699,"<S2SV_StartBug> imap_quote_string ( errstr , sizeof ( errstr ) , list . name ) ; <S2SV_EndBug> ","<S2SV_ModStart> , true "
700,"<S2SV_StartBug> void * * p , void * end , <S2SV_EndBug> <S2SV_StartBug> void * dp , * dend ; <S2SV_EndBug> <S2SV_StartBug> struct ceph_crypto_key old_key ; <S2SV_EndBug> <S2SV_StartBug> dlen = ceph_x_decrypt ( secret , p , end , dbuf , <S2SV_EndBug> <S2SV_StartBug> tp = ticket_buf ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ceph_decode_need ( p , end , dlen , bad ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> dbuf = NULL ; void * <S2SV_ModStart> ; void * ticket_buf = NULL <S2SV_ModStart> & dbuf , 0 <S2SV_ModEnd> <S2SV_ModStart> if ( is_enc ) { dout ( ""<S2SV_blank>encrypted<S2SV_blank>ticket\\n"" ) ; dlen = ceph_x_decrypt ( & old_key , p , end , & ticket_buf , 0 <S2SV_ModEnd> <S2SV_ModStart> tp = ticket_buf ; <S2SV_ModStart> ticket_buf = kmalloc ( dlen , GFP_NOFS ) ; if ( ! ticket_buf ) { ret = - ENOMEM ; goto out ; } tp = ticket_buf ; <S2SV_ModStart> kfree ( ticket_buf ) ; kfree ( dbuf ) ; "
701,<S2SV_StartBug> pairs = palloc ( count * sizeof ( Pairs ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , count , ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ; "
702,<S2SV_StartBug> rq -> skip_clock_update = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
703,"<S2SV_StartBug> n2l ( p , s -> session -> tlsext_tick_lifetime_hint ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( s -> session -> session_id_length > 0 ) { int i = s -> session_ctx -> session_cache_mode ; SSL_SESSION * new_sess ; if ( i & SSL_SESS_CACHE_CLIENT ) { if ( i & SSL_SESS_CACHE_NO_INTERNAL_STORE ) { if ( s -> session_ctx -> remove_session_cb != NULL ) s -> session_ctx -> remove_session_cb ( s -> session_ctx , s -> session ) ; } else { SSL_CTX_remove_session ( s -> session_ctx , s -> session ) ; } } if ( ( new_sess = ssl_session_dup ( s -> session , 0 ) ) == 0 ) { al = SSL_AD_INTERNAL_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET , ERR_R_MALLOC_FAILURE ) ; goto f_err ; } SSL_SESSION_free ( s -> session ) ; s -> session = new_sess ; } "
704,"<S2SV_StartBug> r = sd_event_add_io ( b -> manager -> event , & b -> io_event_source , b -> fd , EPOLLIN , button_dispatch , b ) ; <S2SV_EndBug> ",<S2SV_ModStart> b -> io_event_source = sd_event_source_unref ( b -> io_event_source ) ; 
705,<S2SV_StartBug> if ( errors ) <S2SV_EndBug> ,<S2SV_ModStart> errors += test_float_formatting ( ) ; 
706,<S2SV_StartBug> return true ; <S2SV_EndBug> <S2SV_StartBug> return true ; <S2SV_EndBug> ,<S2SV_ModStart> ( * elem_rtrn != NULL && * field_rtrn != NULL ) <S2SV_ModEnd> <S2SV_ModStart> if ( expr -> array_ref . element != XKB_ATOM_NONE && * elem_rtrn == NULL ) return false ; if ( * field_rtrn == NULL ) return false ; 
707,<S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> ,<S2SV_ModStart> sas_eh_finish_cmd <S2SV_ModEnd> 
708,"<S2SV_StartBug> REQ ( n , funcdef ) ; <S2SV_EndBug> <S2SV_StartBug> body = ast_for_suite ( c , CHILD ( n , name_i + 3 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( is_async ) <S2SV_EndBug> <S2SV_StartBug> return AsyncFunctionDef ( name , args , body , decorator_seq , returns , <S2SV_EndBug> <S2SV_StartBug> return FunctionDef ( name , args , body , decorator_seq , returns , <S2SV_EndBug> ","<S2SV_ModStart> node * tc ; string type_comment = NULL ; <S2SV_ModStart> if ( TYPE ( CHILD ( n , name_i + 3 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n , name_i + 3 ) ) ; if ( ! type_comment ) return NULL ; name_i += 1 ; } <S2SV_ModStart> NCH ( CHILD ( n , name_i + 3 ) ) > 1 ) { tc = CHILD ( CHILD ( n , name_i + 3 ) , 1 ) ; if ( TYPE ( tc ) == TYPE_COMMENT ) { if ( type_comment != NULL ) { ast_error ( c , n , ""Cannot<S2SV_blank>have<S2SV_blank>two<S2SV_blank>type<S2SV_blank>comments<S2SV_blank>on<S2SV_blank>def"" ) ; return NULL ; } type_comment = NEW_TYPE_COMMENT ( tc ) ; if ( ! type_comment ) return NULL ; } } if ( <S2SV_ModStart> , type_comment <S2SV_ModStart> type_comment , "
709,<S2SV_StartBug> int err = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( ! net_eq ( current -> nsproxy -> net_ns , sock_net ( sk ) ) ) return - EINVAL "
710,<S2SV_StartBug> if ( likely ( walk . nbytes == nbytes ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
711,<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> msg -> msg_namelen = 0 ; 
712,"<S2SV_StartBug> if ( sscanf ( l_line , ""%u<S2SV_blank>%u<S2SV_blank>%u"" , o_row_count , o_column_count , o_element_count ) == 3 ) { <S2SV_EndBug> ",<S2SV_ModStart> 3 == <S2SV_ModStart> && 0 != * o_row_count && 0 != * o_column_count && 0 != * o_element_count ) <S2SV_ModEnd> 
713,<S2SV_StartBug> image -> columns = image -> rows = 0 ; <S2SV_EndBug> <S2SV_StartBug> BImgBuff = ( unsigned char * ) RelinquishMagickMemory ( BImgBuff ) ; ; <S2SV_EndBug> ,<S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
714,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug> ",<S2SV_ModStart> int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> rc = <S2SV_ModStart> rc <S2SV_ModEnd> 
715,"
","
"
716,"<S2SV_StartBug> freq_reg = devm_ioremap ( dev , res -> start , resource_size ( res ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! res ) return - EINVAL ; 
717,"<S2SV_StartBug> if ( position > SIGNED_SIZEOF ( psf -> header ) ) <S2SV_EndBug> <S2SV_StartBug> if ( position > psf -> headend ) <S2SV_EndBug> <S2SV_StartBug> psf -> headend += psf_fread ( psf -> header + psf -> headend , 1 , position - psf -> headend , psf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( psf -> headindex + position < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) <S2SV_EndBug> <S2SV_StartBug> if ( psf -> headindex + position <= psf -> headend ) <S2SV_EndBug> <S2SV_StartBug> if ( psf -> headindex + position > SIGNED_SIZEOF ( psf -> header ) ) <S2SV_EndBug> <S2SV_StartBug> psf -> headindex = psf -> headend ; <S2SV_EndBug> <S2SV_StartBug> psf -> headend += psf_fread ( psf -> header + psf -> headend , 1 , position - ( psf -> headend - psf -> headindex ) , psf ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> headindex = psf -> headend ; <S2SV_EndBug> ","<S2SV_ModStart> psf -> header . indx + position >= psf -> header . len ) psf_bump_header_allocation ( psf , position ) ; if ( position > psf -> header . len <S2SV_ModEnd> <S2SV_ModStart> header . end ) psf -> header . end <S2SV_ModEnd> <S2SV_ModStart> . ptr + psf -> header . end <S2SV_ModEnd> <S2SV_ModStart> header . end , psf ) ; psf -> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . indx + position >= psf -> header . len ) psf_bump_header_allocation ( psf , position ) ; if ( psf -> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . indx >= psf -> header . len <S2SV_ModEnd> <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . end ) { psf -> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> psf -> header . len ) { psf -> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . end <S2SV_ModEnd> <S2SV_ModStart> header . end <S2SV_ModEnd> <S2SV_ModStart> . ptr + psf -> header . end <S2SV_ModEnd> <S2SV_ModStart> header . end <S2SV_ModEnd> <S2SV_ModStart> header . indx ) , psf ) ; psf -> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . end <S2SV_ModEnd> "
718,"<S2SV_StartBug> truncate_pagecache ( inode , ioffset ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_dio ; <S2SV_EndBug> <S2SV_StartBug> out_dio : <S2SV_EndBug> ",<S2SV_ModStart> ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> out_mmap <S2SV_ModEnd> <S2SV_ModStart> out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> 
719,"<S2SV_StartBug> uint32_t track_size ; <S2SV_EndBug> <S2SV_StartBug> track_delta = malloc ( sizeof ( uint32_t ) * no_tracks ) ; <S2SV_EndBug> <S2SV_StartBug> track_size = * midi_data ++ << 24 ; <S2SV_EndBug> <S2SV_StartBug> track_size |= * midi_data ++ << 16 ; <S2SV_EndBug> <S2SV_StartBug> track_size |= * midi_data ++ << 8 ; <S2SV_EndBug> <S2SV_StartBug> track_size |= * midi_data ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( midi_size < track_size ) { <S2SV_EndBug> <S2SV_StartBug> if ( track_size < 3 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( midi_data [ track_size - 3 ] != 0xFF ) <S2SV_EndBug> <S2SV_StartBug> || ( midi_data [ track_size - 2 ] != 0x2F ) <S2SV_EndBug> <S2SV_StartBug> || ( midi_data [ track_size - 1 ] != 0x00 ) ) { <S2SV_EndBug> <S2SV_StartBug> midi_data += track_size ; <S2SV_EndBug> <S2SV_StartBug> midi_size -= track_size ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> tracks [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> setup_ret = _WM_SetupMidiEvent ( mdi , tracks [ i ] , running_event [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> goto NEXT_TRACK ; <S2SV_EndBug> <S2SV_StartBug> if ( * tracks [ i ] > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> } while ( * tracks [ i ] > 0x7f ) ; <S2SV_EndBug> <S2SV_StartBug> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> tracks [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> setup_ret = _WM_SetupMidiEvent ( mdi , tracks [ i ] , running_event [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> track_delta [ i ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> } while ( * tracks [ i ] > 0x7f ) ; <S2SV_EndBug> <S2SV_StartBug> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> tracks [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( mdi -> reverb ) return ( mdi ) ; <S2SV_EndBug> ","<S2SV_ModStart> uint8_t * * tracks ; uint32_t * track_size <S2SV_ModEnd> <S2SV_ModStart> track_size = malloc ( sizeof ( uint32_t ) * no_tracks ) ; <S2SV_ModStart> tmp_val <S2SV_ModEnd> <S2SV_ModStart> tmp_val <S2SV_ModEnd> <S2SV_ModStart> tmp_val <S2SV_ModEnd> <S2SV_ModStart> tmp_val <S2SV_ModEnd> <S2SV_ModStart> tmp_val <S2SV_ModEnd> <S2SV_ModStart> tmp_val <S2SV_ModEnd> <S2SV_ModStart> tmp_val <S2SV_ModEnd> <S2SV_ModStart> tmp_val <S2SV_ModEnd> <S2SV_ModStart> tmp_val <S2SV_ModEnd> <S2SV_ModStart> track_size [ i ] = tmp_val ; midi_data += tmp_val <S2SV_ModEnd> <S2SV_ModStart> tmp_val <S2SV_ModEnd> <S2SV_ModStart> track_size [ i ] -- ; <S2SV_ModStart> ; track_size [ i ] -- <S2SV_ModStart> track_size [ i ] , <S2SV_ModStart> track_size [ i ] -= 3 ; <S2SV_ModStart> track_size [ i ] -= setup_ret ; <S2SV_ModStart> if ( ! track_size [ i ] ) break ; <S2SV_ModStart> track_size [ i ] -- ; <S2SV_ModStart> if ( ! track_size [ i ] ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , ""(too<S2SV_blank>short)"" , 0 ) ; goto _end ; } <S2SV_ModStart> ; track_size [ i ] -- <S2SV_ModStart> track_size [ i ] , <S2SV_ModStart> track_size [ i ] -= setup_ret ; <S2SV_ModStart> if ( ! track_size [ i ] ) break ; <S2SV_ModStart> track_size [ i ] -- ; <S2SV_ModStart> if ( ! track_size [ i ] ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , ""(too<S2SV_blank>short)"" , 0 ) ; goto _end ; } <S2SV_ModStart> ; track_size [ i ] -- <S2SV_ModStart> free ( track_size ) ; "
720,"<S2SV_StartBug> sk -> sk_sndbuf = max_t ( u32 , val * 2 , SOCK_MIN_SNDBUF ) ; <S2SV_EndBug> <S2SV_StartBug> sk -> sk_rcvbuf = max_t ( u32 , val * 2 , SOCK_MIN_RCVBUF ) ; <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> int <S2SV_ModEnd> 
721,<S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> lvd = ( struct logicalVolDesc * ) bh -> b_data ; <S2SV_EndBug> <S2SV_StartBug> i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; <S2SV_EndBug> ,"<S2SV_ModStart> unsigned int table_len ; <S2SV_ModStart> table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( sizeof ( * lvd ) + table_len > sb -> s_blocksize ) { udf_err ( sb , ""error<S2SV_blank>loading<S2SV_blank>logical<S2SV_blank>volume<S2SV_blank>descriptor:<S2SV_blank>"" ""Partition<S2SV_blank>table<S2SV_blank>too<S2SV_blank>long<S2SV_blank>(%u<S2SV_blank>><S2SV_blank>%lu)\\n"" , table_len , sb -> s_blocksize - sizeof ( * lvd ) ) ; goto out_bh ; } <S2SV_ModStart> table_len <S2SV_ModEnd> "
722,"<S2SV_StartBug> if ( optstr ) { <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> ( ""BMP<S2SV_blank>information:<S2SV_blank>len<S2SV_blank>%d;<S2SV_blank>width<S2SV_blank>%d;<S2SV_blank>height<S2SV_blank>%d;<S2SV_blank>numplanes<S2SV_blank>%d;<S2SV_blank>"" <S2SV_EndBug> <S2SV_StartBug> ""mincolors<S2SV_blank>%d\\n"" , info -> len , info -> width , info -> height , info -> numplanes , <S2SV_EndBug> <S2SV_StartBug> info -> depth , info -> enctype , info -> siz , info -> hres , info -> vres , <S2SV_EndBug> <S2SV_StartBug> info -> numcolors , info -> mincolors ) ) ; <S2SV_EndBug> <S2SV_StartBug> bmp_info_destroy ( info ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> bmp_info_destroy ( info ) ; <S2SV_EndBug> <S2SV_StartBug> bmp_info_destroy ( info ) ; <S2SV_EndBug> <S2SV_StartBug> bmp_info_destroy ( info ) ; <S2SV_EndBug> <S2SV_StartBug> jas_image_destroy ( image ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> bmp_info_destroy ( info ) ; <S2SV_EndBug> ","<S2SV_ModStart> image = 0 ; info = 0 ; <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> ""BMP<S2SV_blank>information:<S2SV_blank>len<S2SV_blank>%ld;<S2SV_blank>width<S2SV_blank>%ld;<S2SV_blank>height<S2SV_blank>%ld;<S2SV_blank>numplanes<S2SV_blank>%d;<S2SV_blank>"" ""depth<S2SV_blank>%d;<S2SV_blank>enctype<S2SV_blank>%ld;<S2SV_blank>siz<S2SV_blank>%ld;<S2SV_blank>hres<S2SV_blank>%ld;<S2SV_blank>vres<S2SV_blank>%ld;<S2SV_blank>numcolors<S2SV_blank>%ld;<S2SV_blank>"" ""mincolors<S2SV_blank>%ld\\n"" , JAS_CAST ( long <S2SV_ModEnd> <S2SV_ModStart> ) , JAS_CAST ( long <S2SV_ModStart> ) , JAS_CAST ( long <S2SV_ModStart> ) , JAS_CAST ( long <S2SV_ModStart> ) , JAS_CAST ( long , <S2SV_ModEnd> <S2SV_ModStart> ) , JAS_CAST ( long <S2SV_ModStart> ) , JAS_CAST ( long <S2SV_ModStart> ) , JAS_CAST ( long <S2SV_ModStart> ) , JAS_CAST ( long <S2SV_ModStart> ) , JAS_CAST ( long , <S2SV_ModEnd> <S2SV_ModStart> ) , JAS_CAST ( long <S2SV_ModStart> ) ; if ( info -> width < 0 || info -> height < 0 || info -> numplanes < 0 || info -> depth < 0 || info -> siz < 0 || info -> hres < 0 || info -> vres < 0 ) { jas_eprintf ( ""corrupt<S2SV_blank>bit<S2SV_blank>stream\\n"" ) ; goto error ; } <S2SV_ModEnd> <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> goto error ; } <S2SV_ModStart> return image ; error : if ( info ) { bmp_info_destroy ( info ) ; } if ( image ) { <S2SV_ModStart> } <S2SV_ModStart>  <S2SV_ModEnd> "
723,"<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> dev_name ( & qedi -> pdev -> dev ) , nfunc , line , <S2SV_EndBug> <S2SV_StartBug> pr_notice ( ""[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV"" , nfunc , line , & vaf ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> 
724,<S2SV_StartBug> return ( ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ps_cabac -> u4_ofst >= ps_cabac -> u4_range ) { return ( ( IHEVCD_ERROR_T ) IHEVCD_FAIL ) ; } 
725,"<S2SV_StartBug> save_text_from_text_view ( g_tv_comment , FILENAME_COMMENT ) ; <S2SV_EndBug> ",<S2SV_ModStart> ) ; problem_data_reload_from_dump_dir ( ) ; update_gui_state_from_problem_data ( 0 
726,"<S2SV_StartBug> media_device_kpad_to_upad ( & entity -> pads [ p ] , & pad ) ; <S2SV_EndBug> <S2SV_StartBug> media_device_kpad_to_upad ( entity -> links [ l ] . source , <S2SV_EndBug> ","<S2SV_ModStart> memset ( & pad , 0 , sizeof ( pad ) ) ; <S2SV_ModStart> memset ( & link , 0 , sizeof ( link ) ) ; "
727,"<S2SV_StartBug> && ( CH ( off ) == _T ( '=' ) || CH ( off ) == _T ( '-' ) ) <S2SV_EndBug> <S2SV_StartBug> if ( line -> indent < ctx -> code_indent_offset && ISANYOF ( off , _T ( ""-_*"" ) ) && off >= hr_killer ) { <S2SV_EndBug> <S2SV_StartBug> ( container . ch == _T ( '.' ) || container . ch == _T ( ')' ) ) && container . start != 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( line -> indent < ctx -> code_indent_offset && CH ( off ) == _T ( '#' ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( CH ( off ) == _T ( '`' ) || CH ( off ) == _T ( '~' ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( ctx -> parser . flags & MD_FLAG_TABLES ) && pivot_line -> type == MD_LINE_TEXT && <S2SV_EndBug> <S2SV_StartBug> ( CH ( off ) == _T ( '|' ) || CH ( off ) == _T ( '-' ) || CH ( off ) == _T ( ':' ) ) && <S2SV_EndBug> ","<S2SV_ModStart> off < ctx -> size && ISANYOF2 ( off , <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> && off < ctx -> size <S2SV_ModEnd> <S2SV_ModStart> && ISANYOF ( off , _T ( ""-_*"" ) ) ) <S2SV_ModEnd> <S2SV_ModStart> ISANYOF2_ <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> off < ctx -> size && <S2SV_ModStart> off < ctx -> size && ISANYOF2 ( off , _T ( '`' ) , _T ( '~' ) ) ) { if ( md_is_opening_code_fence ( ctx , off , & off ) ) { line -> type = MD_LINE_FENCEDCODE ; line -> data = 1 ; break ; } } if ( off < ctx -> size && <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && off < ctx -> size && ISANYOF3 ( off , <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> && <S2SV_ModEnd> "
728,"<S2SV_StartBug> height , <S2SV_EndBug> <S2SV_StartBug> if ( bytes_per_line == 0 ) <S2SV_EndBug> <S2SV_StartBug> bytes_per_line = image -> columns ; <S2SV_EndBug> <S2SV_StartBug> length = image -> rows * ( image -> columns + image -> columns % 2 ) ; <S2SV_EndBug> <S2SV_StartBug> SetPixelIndex ( image , * p ++ , q ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( image -> columns % 2 ) != 0 ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) { q = QueueAuthenticPixels ( image , 0 , y , <S2SV_ModEnd> <S2SV_ModStart> , 1 , exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ssize_t ) <S2SV_ModEnd> <S2SV_ModStart> ; x ++ ) { SetPixelIndex ( image , * p ++ , q ) ; q += GetPixelChannels ( image ) ; } if ( ( <S2SV_ModEnd> <S2SV_ModStart> != 0 ) p ++ ; if ( SyncAuthenticPixels ( image , exception ) == MagickFalse ) break ; if ( image -> previous == ( Image * ) NULL ) { status = SetImageProgress ( image , LoadImageTag , ( MagickOffsetType ) y , image -> rows ) ; if ( status == MagickFalse ) break ; } } } else { size_t bytes_per_pixel ; bytes_per_pixel = 3 ; if ( image -> alpha_trait != UndefinedPixelTrait ) bytes_per_pixel ++ ; if ( bytes_per_line == 0 ) bytes_per_line = bytes_per_pixel * image -> columns <S2SV_ModEnd> <S2SV_ModStart> if ( image -> alpha_trait != UndefinedPixelTrait ) SetPixelAlpha ( image , ScaleCharToQuantum ( <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> if ( sun_info . type == RT_STANDARD ) { SetPixelBlue ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelGreen ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelRed ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; } else { SetPixelRed ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelGreen ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelBlue ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; } if ( image -> colors != 0 ) { SetPixelRed ( image , ClampToQuantum ( image -> colormap [ ( ssize_t ) GetPixelRed ( image , q ) ] . red ) , q ) ; SetPixelGreen ( image , ClampToQuantum ( image -> colormap [ ( ssize_t ) GetPixelGreen ( image , q ) ] . green ) , q ) ; SetPixelBlue ( image , ClampToQuantum ( image -> colormap [ ( ssize_t ) GetPixelBlue ( image , q ) ] . blue ) , q ) ; } <S2SV_ModStart>  <S2SV_ModEnd> "
729,"<S2SV_StartBug> krb5_principal client_principal , <S2SV_EndBug> <S2SV_StartBug> krb5_principal_get_realm ( context , krbtgt -> entry . principal ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> , const char * tgt_realm <S2SV_ModStart> tgt_realm <S2SV_ModEnd> "
730,<S2SV_StartBug> if ( bmp_info . number_colors > GetBlobSize ( image ) ) <S2SV_EndBug> <S2SV_StartBug> * magick = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> if ( bmp_info . ba_offset != 0 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( offset < 0 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> ( MagickSizeType ) <S2SV_ModStart> offset = ( MagickOffsetType ) <S2SV_ModEnd> <S2SV_ModStart> ; if ( offset <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> TellBlob ( image ) ) || ( SeekBlob ( image , offset , SEEK_SET ) != offset ) <S2SV_ModEnd> <S2SV_ModStart> * magick = '\\0' ; <S2SV_ModEnd> "
731,<S2SV_StartBug> newinet -> opt = ireq -> opt ; <S2SV_EndBug> ,<S2SV_ModStart> inet_opt <S2SV_ModEnd> 
732,<S2SV_StartBug> data -> l_head = NULL ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( data , 0 , sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> "
733,"<S2SV_StartBug> if ( offset != 0 ) <S2SV_EndBug> <S2SV_StartBug> csum_partial ( skb_transport_header ( skb ) + tlen , <S2SV_EndBug> <S2SV_StartBug> offset , 0 ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> { int tend_off = skb_transport_offset ( skb ) + tlen ; <S2SV_ModStart> skb_checksum ( skb , tend_off , <S2SV_ModEnd> <S2SV_ModStart> } "
734,"<S2SV_StartBug> goto unmap_pages ; <S2SV_EndBug> <S2SV_StartBug> kvm_iommu_put_pages ( kvm , slot -> base_gfn , gfn ) ; <S2SV_EndBug> ","<S2SV_ModStart> kvm_unpin_pages ( kvm , pfn , page_size ) ; <S2SV_ModStart> - slot -> base_gfn "
735,"<S2SV_StartBug> memcpy ( & b [ 4 ] , cmd -> msg , cmd -> msg_len ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ; 
736,<S2SV_StartBug> struct perf_event_context * ctx = event -> ctx ; <S2SV_EndBug> <S2SV_StartBug> event -> state = PERF_EVENT_STATE_OFF ; <S2SV_EndBug> ,"<S2SV_ModStart> ; ctx = perf_event_ctx_lock <S2SV_ModEnd> <S2SV_ModStart> _perf_event_disable ( event ) ; perf_event_ctx_unlock ( event , ctx <S2SV_ModEnd> "
737,<S2SV_StartBug> value = ( unsigned int ) ( ( buffer [ 3 ] << 24 ) | ( buffer [ 2 ] << 16 ) | <S2SV_EndBug> <S2SV_StartBug> ( buffer [ 1 ] << 8 ) | ( buffer [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> return ( ( unsigned int ) ( value & 0xffffffff ) ) ; <S2SV_EndBug> <S2SV_StartBug> value = ( unsigned int ) ( ( buffer [ 0 ] << 24 ) | ( buffer [ 1 ] << 16 ) | <S2SV_EndBug> <S2SV_StartBug> ( buffer [ 2 ] << 8 ) | buffer [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> return ( ( unsigned int ) ( value & 0xffffffff ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModEnd> <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModEnd> <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModEnd> <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModEnd> <S2SV_ModStart> ; value |= ( unsigned int ) <S2SV_ModEnd> <S2SV_ModStart> ; return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
738,<S2SV_StartBug> struct free_nid * i ; <S2SV_EndBug> <S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> if ( build ) { <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> ,"<S2SV_ModStart> , * e <S2SV_ModStart> = - EINVAL ; bool ret = false <S2SV_ModStart> i = f2fs_kmem_cache_alloc ( free_nid_slab , GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) goto err ; spin_lock ( & nm_i -> nid_list_lock ) ; <S2SV_ModStart> goto err_out ; e = __lookup_free_nid_list ( nm_i , nid ) ; if ( e ) { if ( e -> state == NID_NEW ) ret = true ; goto err_out ; } } ret = true ; err = __insert_nid_to_list ( sbi , i , FREE_NID_LIST , true ) ; err_out : spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; err : if ( err ) kmem_cache_free ( free_nid_slab , i ) ; return ret <S2SV_ModEnd> "
739,<S2SV_StartBug> # if CONFIG_POSTPROC_VISUALIZER <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_POSTPROC_VISUALIZER <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
740,"<S2SV_StartBug> netdev_dbg ( vif -> dev , ""Missing<S2SV_blank>extra<S2SV_blank>info\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , <S2SV_EndBug> <S2SV_StartBug> ""Invalid<S2SV_blank>extra<S2SV_blank>type:<S2SV_blank>%d\\n"" , extra . type ) ; <S2SV_EndBug> ",<S2SV_ModStart> netdev_err <S2SV_ModEnd> <S2SV_ModStart> ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> netdev_err <S2SV_ModEnd> <S2SV_ModStart> ) ; netbk_fatal_tx_err ( vif 
741,"<S2SV_StartBug> pfkey_broadcast ( skb_out , GFP_ATOMIC , BROADCAST_ALL , NULL , c -> net ) ; <S2SV_EndBug> ",<S2SV_ModStart> hdr -> sadb_msg_reserved = 0 ; 
742,<S2SV_StartBug> r1 . event = event ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & r1 , 0 , sizeof ( r1 ) ) ; "
743,"<S2SV_StartBug> defaultoptions ( & h ) ; <S2SV_EndBug> <S2SV_StartBug> luaL_checkstack ( L , 1 , ""too<S2SV_blank>many<S2SV_blank>results"" ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pushnumber ( L , res ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pushnumber ( L , f ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pushnumber ( L , d ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! lua_isnumber ( L , - 1 ) ) <S2SV_EndBug> <S2SV_StartBug> luaL_error ( L , ""format<S2SV_blank>`c0\'<S2SV_blank>needs<S2SV_blank>a<S2SV_blank>previous<S2SV_blank>size"" ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pop ( L , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> luaL_argcheck ( L , pos + size <= ld , 2 , ""data<S2SV_blank>string<S2SV_blank>too<S2SV_blank>short"" ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pushlstring ( L , data + pos , size ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pushlstring ( L , data + pos , size - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> return lua_gettop ( L ) - 2 ; <S2SV_EndBug> ","<S2SV_ModStart> int n = 0 ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 2 <S2SV_ModEnd> <S2SV_ModStart> n ++ ; <S2SV_ModStart> n ++ ; <S2SV_ModStart> n ++ ; <S2SV_ModStart> n == 0 || <S2SV_ModStart> ""format<S2SV_blank>\'c0\'<S2SV_blank>needs<S2SV_blank>a<S2SV_blank>previous<S2SV_blank>size"" <S2SV_ModEnd> <S2SV_ModStart> n -- ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && pos <= ld - size , <S2SV_ModEnd> <S2SV_ModStart> ; n ++ <S2SV_ModStart> n ++ ; <S2SV_ModStart> n + 1 <S2SV_ModEnd> "
744,"<S2SV_StartBug> ND_TCHECK2 ( * tptr , sizeof ( struct olsr_msg4 ) ) ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> u_int name_entries = EXTRACT_16BITS ( msg_data + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> u_int addr_size = 4 ; <S2SV_EndBug> <S2SV_StartBug> int name_entries_valid = 0 ; <S2SV_EndBug> <S2SV_StartBug> name_entries_valid = 1 ; <S2SV_EndBug> ","<S2SV_ModStart> if ( is_ipv6 ) { <S2SV_ModStart> olsr_msg6 ) ) ; <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK2 ( * tptr , sizeof ( struct olsr_msg4 ) ) ; <S2SV_ModStart> ; u_int addr_size ; int name_entries_valid ; u_int i ; if ( msg_tlen < 4 ) goto trunc ; ND_TCHECK2 ( * msg_data , 4 ) ; name_entries <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( is_ipv6 ) addr_size = 16 ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
745,<S2SV_StartBug> int n ; <S2SV_EndBug> <S2SV_StartBug> if ( ! body -> unit_size ) <S2SV_EndBug> <S2SV_StartBug> n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) <S2SV_EndBug> ,<S2SV_ModStart> unsigned <S2SV_ModStart> || len < sizeof ( struct oz_multiple_fixed ) - 1 <S2SV_ModStart> ( <S2SV_ModStart> - 1 ) <S2SV_ModEnd> 
746,<S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> <S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> <S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
747,"<S2SV_StartBug> fprintf ( stderr , ""Error:<S2SV_blank>invalid<S2SV_blank>.Xauthority<S2SV_blank>file\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> int rv = copy_file ( src , dest ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chown ( dest , getuid ( ) , getgid ( ) ) == - 1 ) <S2SV_EndBug> ","<S2SV_ModStart> ""Warning:<S2SV_blank>invalid<S2SV_blank>.Xauthority<S2SV_blank>file\\n"" ) ; return 0 ; } copy_file_as_user <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , 0600 ) ; fs_logger2 ( ""clone"" , dest <S2SV_ModEnd> "
748,<S2SV_StartBug> idata -> status = IMAP_FATAL ; <S2SV_EndBug> ,"<S2SV_ModStart> ; return ; } if ( strlen ( idata -> buf ) < litlen ) { mutt_debug ( 1 , ""Error<S2SV_blank>parsing<S2SV_blank>STATUS<S2SV_blank>mailbox\\n"" ) "
749,"<S2SV_StartBug> sas_discover_event ( dev -> port , DISCE_PROBE ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
750,"<S2SV_StartBug> if ( unlikely ( path [ depth ] . p_ext > EXT_MAX_EXTENT ( path [ depth ] . p_hdr ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ext4_extent_block_csum_set ( inode , neh ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_extent_block_csum_set ( inode , neh ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t ext_size = 0 ; <S2SV_ModStart> ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size , 0 , inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> ext_size = sizeof ( struct ext4_extent_header ) + ( sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ) ; memset ( bh -> b_data + ext_size , 0 , inode -> i_sb -> s_blocksize - ext_size ) ; "
751,<S2SV_StartBug> ixheaacd_real_synth_fft = & ixheaacd_real_synth_fft_p2 ; <S2SV_EndBug> <S2SV_StartBug> ixheaacd_cmplx_anal_fft = & ixheaacd_cmplx_anal_fft_p2 ; <S2SV_EndBug> <S2SV_StartBug> ixheaacd_real_synth_fft = & ixheaacd_real_synth_fft_p2 ; <S2SV_EndBug> <S2SV_StartBug> ixheaacd_cmplx_anal_fft = & ixheaacd_cmplx_anal_fft_p2 ; <S2SV_EndBug> <S2SV_StartBug> ixheaacd_real_synth_fft = & ixheaacd_real_synth_fft_p3 ; <S2SV_EndBug> <S2SV_StartBug> ixheaacd_cmplx_anal_fft = & ixheaacd_cmplx_anal_fft_p3 ; <S2SV_EndBug> <S2SV_StartBug> ixheaacd_real_synth_fft = & ixheaacd_real_synth_fft_p2 ; <S2SV_EndBug> <S2SV_StartBug> ixheaacd_cmplx_anal_fft = & ixheaacd_cmplx_anal_fft_p2 ; <S2SV_EndBug> <S2SV_StartBug> ixheaacd_real_synth_fft = & ixheaacd_real_synth_fft_p2 ; <S2SV_EndBug> <S2SV_StartBug> ixheaacd_cmplx_anal_fft = & ixheaacd_cmplx_anal_fft_p2 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } 
752,<S2SV_StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <S2SV_EndBug> <S2SV_StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <S2SV_EndBug> <S2SV_StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <S2SV_EndBug> <S2SV_StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <S2SV_EndBug> <S2SV_StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <S2SV_EndBug> ,<S2SV_ModStart> get_tga_ushort <S2SV_ModEnd> <S2SV_ModStart> get_tga_ushort <S2SV_ModEnd> <S2SV_ModStart> get_tga_ushort <S2SV_ModEnd> <S2SV_ModStart> get_tga_ushort <S2SV_ModEnd> <S2SV_ModStart> get_tga_ushort <S2SV_ModEnd> 
753,<S2SV_StartBug> ssize_t ret ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( WARN_ON_ONCE ( ! ib_safe_file_access ( filp ) ) ) return - EACCES 
754,"<S2SV_StartBug> if ( CPUCLOCK_WHICH ( which_clock ) == CPUCLOCK_SCHED ) { <S2SV_EndBug> <S2SV_StartBug> tp -> tv_sec = div_long_long_rem ( cpu . sched , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> * tp = ns_to_timespec <S2SV_ModEnd> <S2SV_ModStart> ) ; else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
755,<S2SV_StartBug> uint32 nstrips ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
756,"<S2SV_StartBug> rdsdebug ( ""size<S2SV_blank>%zu<S2SV_blank>flags<S2SV_blank>0x%x<S2SV_blank>timeo<S2SV_blank>%ld\\n"" , size , msg_flags , timeo ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
757,"<S2SV_StartBug> const lua_authz_provider_spec * prov_spec = parsed_require_line ; <S2SV_EndBug> <S2SV_StartBug> if ( prov_spec -> args ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! lua_checkstack ( L , prov_spec -> args -> nelts ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < prov_spec -> args -> nelts ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> const char * arg = APR_ARRAY_IDX ( prov_spec -> args , i , const char * ) ; <S2SV_EndBug> <S2SV_StartBug> nargs = prov_spec -> args -> nelts ; <S2SV_EndBug> ",<S2SV_ModStart> lua_authz_provider_func * prov_func = parsed_require_line ; const <S2SV_ModStart> prov_func -> spec <S2SV_ModEnd> <S2SV_ModStart> prov_func <S2SV_ModEnd> <S2SV_ModStart> prov_func <S2SV_ModEnd> <S2SV_ModStart> prov_func <S2SV_ModEnd> <S2SV_ModStart> prov_func <S2SV_ModEnd> <S2SV_ModStart> prov_func <S2SV_ModEnd> 
758,<S2SV_StartBug> int error ; <S2SV_EndBug> <S2SV_StartBug> error = security_mmap_addr ( address ) ; <S2SV_EndBug> ,<S2SV_ModStart> = 0 <S2SV_ModStart> if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> 
759,"<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error <= 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
760,"<S2SV_StartBug> const char * data , int optional ) <S2SV_EndBug> <S2SV_StartBug> if ( mount ( fsname , target , fstype , mountflags & ~ MS_REMOUNT , data ) ) { <S2SV_EndBug> <S2SV_StartBug> mountflags | MS_REMOUNT , data ) ) { <S2SV_EndBug> ","<S2SV_ModStart> , const char * rootfs <S2SV_ModStart> safe_mount <S2SV_ModEnd> <S2SV_ModStart> , rootfs <S2SV_ModStart> < 0 "
761,<S2SV_StartBug> return ( GetFirstImageInList ( image ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ( image ) ) ; } status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList "
762,<S2SV_StartBug> timr -> it_overrun = - 1 ; <S2SV_EndBug> <S2SV_StartBug> info -> si_overrun += timr -> it_overrun_last ; <S2SV_EndBug> ,"<S2SV_ModStart> 1LL <S2SV_ModEnd> <S2SV_ModStart> = timer_overrun_to_int ( timr , info -> si_overrun ) <S2SV_ModEnd> "
763,<S2SV_StartBug> if ( ! proto_end ) <S2SV_EndBug> ,"<S2SV_ModStart> { if ( ! quiet ) warning ( _ ( ""url<S2SV_blank>has<S2SV_blank>no<S2SV_blank>scheme:<S2SV_blank>%s"" ) , url ) ; return - 1 ; } <S2SV_ModEnd> "
764,<S2SV_StartBug> struct static_key * done_key ) <S2SV_EndBug> <S2SV_StartBug> __net_random_once_disable_jump ( done_key ) ; <S2SV_EndBug> ,<S2SV_ModStart> once_key <S2SV_ModEnd> <S2SV_ModStart> once_key <S2SV_ModEnd> 
765,"<S2SV_StartBug> if ( io_data -> read && ret > 0 ) { <S2SV_EndBug> <S2SV_StartBug> ! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) <S2SV_EndBug> <S2SV_StartBug> usb_ep_free_request ( io_data -> ep , io_data -> req ) ; <S2SV_EndBug> ","<S2SV_ModStart> bool kiocb_has_eventfd = <S2SV_ModEnd> <S2SV_ModStart> ; if ( io_data -> read && ret > 0 ) { use_mm ( io_data -> mm ) ; ret = copy_to_iter ( io_data -> buf , ret , & io_data -> data ) ; if ( iov_iter_count ( & io_data -> data ) ) ret = - EFAULT ; unuse_mm ( io_data -> mm ) ; } io_data -> kiocb -> ki_complete ( io_data -> kiocb , ret , ret ) ; if ( io_data -> ffs -> ffs_eventfd && ! kiocb_has_eventfd <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
766,<S2SV_StartBug> if ( rt -> rt_flags & RTCF_DOREDIRECT && ! opt -> srr && ! skb_sec_path ( skb ) ) <S2SV_EndBug> ,<S2SV_ModStart> IPCB ( skb ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> 
767,<S2SV_StartBug> passert ( GLOBALS_ARE_RESET ( ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
768,<S2SV_StartBug> struct trusted_key_payload * p = key -> payload . data [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> struct trusted_key_payload * new_p ; <S2SV_EndBug> ,"<S2SV_ModStart> p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart>  <S2SV_ModEnd> "
769,<S2SV_StartBug> v |= ( c << 24 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> JAS_CAST ( uint_fast32_t , c ) <S2SV_ModEnd> "
770,<S2SV_StartBug> while ( ( skb = skb_dequeue ( & loopback_queue ) ) != NULL ) { <S2SV_EndBug> <S2SV_StartBug> dest = ( rose_address * ) ( skb -> data + 4 ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> if ( frametype == ROSE_CALL_REQUEST && ( skb -> len <= ROSE_CALL_REQ_FACILITIES_OFF || skb -> data [ ROSE_CALL_REQ_ADDR_LEN_OFF ] != ROSE_CALL_REQ_ADDR_LEN_VAL ) ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> ROSE_CALL_REQ_DEST_ADDR_OFF <S2SV_ModEnd> 
771,"<S2SV_StartBug> kvm_arch_flush_shadow_memslot ( kvm , slot ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_free ; <S2SV_EndBug> <S2SV_StartBug> if ( ! npages ) { <S2SV_EndBug> <S2SV_StartBug> out_free : <S2SV_EndBug> ","<S2SV_ModStart> kvm_iommu_unmap_pages ( kvm , & old ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> npages ) { r = kvm_iommu_map_pages ( kvm , & new ) ; if ( r ) goto out_slots ; } if ( <S2SV_ModStart> out_slots : kfree ( slots ) ; "
772,<S2SV_StartBug> if ( indev != NULL ) { <S2SV_EndBug> ,<S2SV_ModStart> && indev -> ifa_list <S2SV_ModEnd> 
773,"<S2SV_StartBug> end = path ; <S2SV_EndBug> <S2SV_StartBug> switch ( tag ) { <S2SV_EndBug> <S2SV_StartBug> name = fdt_get_name ( fdt , offset , & len ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ",<S2SV_ModStart> bool expect_end = false ; <S2SV_ModStart> if ( expect_end && tag != FDT_END ) return - FDT_ERR_BADLAYOUT ; <S2SV_ModStart> ; if ( ! depth && * name ) return - FDT_ERR_BADLAYOUT <S2SV_ModStart> if ( depth == - 1 ) expect_end = true ; 
774,<S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } buff "
775,<S2SV_StartBug> if ( md_sk != NULL ) { <S2SV_EndBug> <S2SV_StartBug> if ( PKCS7_is_detached ( p7 ) || ( in_bio != NULL ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> data_body == NULL && in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE , PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
776,<S2SV_StartBug> if ( vmCanSwapOut ( ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( server . vm_enabled && zmalloc_used_memory ( ) > <S2SV_EndBug> <S2SV_StartBug> server . vm_max_memory ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ds_enabled <S2SV_ModEnd> <S2SV_ModStart> cache_max_memory ) { cacheFreeOneEntry ( ) ; <S2SV_ModEnd> 
777,<S2SV_StartBug> if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0 , NULL ) ) ; } if ( "
778,"<S2SV_StartBug> int ret , wo ; <S2SV_EndBug> <S2SV_StartBug> wo = ( rbuf == NULL || rlen == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( wo ) <S2SV_EndBug> <S2SV_StartBug> rbuf , rlen , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c<S2SV_blank>rd:<S2SV_blank>len=%d<S2SV_blank>is<S2SV_blank>too<S2SV_blank>big!\\n"" , rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> st -> data <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( ! ret && rbuf && rlen ) memcpy ( rbuf , st -> data , rlen "
779,"<S2SV_StartBug> client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5 , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
780,<S2SV_StartBug> for ( j = 0 ; j < book -> dim ; j ++ ) <S2SV_EndBug> ,<S2SV_ModStart> && i < n 
781,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> char * outpos = outputbuffer ; <S2SV_ModStart> sendClean ( outputbuffer ) ; 
782,<S2SV_StartBug> BUG_ON ( ret == - EEXIST ) ; <S2SV_EndBug> ,<S2SV_ModStart> || ret == - EOVERFLOW 
783,<S2SV_StartBug> if ( s ) { <S2SV_EndBug> <S2SV_StartBug> struct unix_sock * u = unix_sk ( s ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & unix_gc_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } fp -> f_cred -> user -> unix_inflight -- ; <S2SV_ModStart>  <S2SV_ModEnd> 
784,<S2SV_StartBug> { size_t chanmap_size = psf -> sf . channels * sizeof ( psf -> channel_map [ 0 ] ) ; <S2SV_EndBug> ,"<S2SV_ModStart> SF_MIN ( <S2SV_ModStart> , layout_tag & 0xffff ) "
785,"<S2SV_StartBug> if ( ! check_scale_factors ( other_w , other_h , this_w , this_h ) ) { <S2SV_EndBug> <S2SV_StartBug> sf -> predict [ 0 ] [ 0 ] [ 0 ] = vp9_convolve_copy ; <S2SV_EndBug> <S2SV_StartBug> sf -> predict [ 0 ] [ 0 ] [ 0 ] = vp9_convolve8_vert ; <S2SV_EndBug> <S2SV_StartBug> sf -> predict [ 0 ] [ 0 ] [ 0 ] = vp9_convolve8_horiz ; <S2SV_EndBug> <S2SV_StartBug> sf -> predict [ 0 ] [ 0 ] [ 0 ] = vp9_convolve8 ; <S2SV_EndBug> ",<S2SV_ModStart> # endif <S2SV_ModStart> valid_ref_frame_size <S2SV_ModEnd> <S2SV_ModStart> vpx_convolve_copy ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_convolve_avg ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_convolve8_vert ; sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_convolve8_avg_vert ; sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_convolve8_horiz ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_convolve8_avg_horiz <S2SV_ModEnd> <S2SV_ModStart> vpx_scaled_vert ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_scaled_avg_vert ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_scaled_vert ; sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_scaled_avg_vert ; sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_scaled_2d ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_scaled_avg_2d <S2SV_ModEnd> <S2SV_ModStart> vpx_scaled_horiz ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_scaled_avg_horiz ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_scaled_2d ; sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_scaled_avg_2d ; sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_scaled_horiz ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_scaled_avg_horiz <S2SV_ModEnd> <S2SV_ModStart> vpx_scaled_2d ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_scaled_avg_2d ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_scaled_2d ; sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_scaled_avg_2d ; sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_scaled_2d ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_scaled_avg_2d ; } } if ( ( sf -> x_step_q4 != 16 ) || ( sf -> y_step_q4 != 16 ) ) { sf -> predict [ 1 ] [ 1 ] [ 0 ] = vpx_scaled_2d ; sf -> predict [ 1 ] [ 1 ] [ 1 ] = vpx_scaled_avg_2d ; } else { sf -> predict [ 1 ] [ 1 ] [ 0 ] = vpx_convolve8 ; sf -> predict [ 1 ] [ 1 ] [ 1 ] = vpx_convolve8_avg ; } # if CONFIG_VP9_HIGHBITDEPTH if ( use_highbd ) { if ( sf -> x_step_q4 == 16 ) { if ( sf -> y_step_q4 == 16 ) { sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve_copy ; sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve_avg ; sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8_vert ; sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg_vert ; sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_horiz ; sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_horiz ; } else { sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_vert ; sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_vert ; sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8_vert ; sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg_vert ; sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg ; } } else { if ( sf -> y_step_q4 == 16 ) { sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_horiz ; sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_horiz ; sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg ; sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_horiz ; sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_horiz ; } else { sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg ; sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg ; sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg ; } } sf -> highbd_predict [ 1 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 1 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg ; } # endif <S2SV_ModEnd> 
786,<S2SV_StartBug> int32_t nestsize = ( int32_t ) ms -> nest_size [ ms -> nest_level ] ; <S2SV_EndBug> ,<S2SV_ModStart> uint32_t <S2SV_ModEnd> <S2SV_ModStart> uint32_t <S2SV_ModEnd> 
787,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
788,<S2SV_StartBug> if ( ( e -> target_offset == sizeof ( struct ip6t_entry ) && <S2SV_EndBug> <S2SV_StartBug> t -> verdict < 0 && <S2SV_EndBug> ,<S2SV_ModStart> unconditional ( e <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
789,"<S2SV_StartBug> pdf -> xrefs = calloc ( 1 , sizeof ( xref_t ) * pdf -> n_xrefs ) ; <S2SV_EndBug> ",<S2SV_ModStart> safe_calloc ( <S2SV_ModEnd> 
790,<S2SV_StartBug> if ( ! sock || ( count && ! buf ) ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ,<S2SV_ModStart> || count > OE_SSIZE_MAX <S2SV_ModStart> if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } 
791,"<S2SV_StartBug> opt = xchg ( & np -> opt , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt ) <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> { atomic_sub ( <S2SV_ModEnd> <S2SV_ModStart> , & sk -> sk_omem_alloc ) ; txopt_put ( opt <S2SV_ModStart> } "
792,"<S2SV_StartBug> BIO * cmsbio = NULL , * tmpin = NULL ; <S2SV_EndBug> <S2SV_StartBug> cmsbio = CMS_dataInit ( cms , tmpin ) ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> if ( dcont && ( tmpin == dcont ) ) <S2SV_EndBug> <S2SV_StartBug> if ( cms_certs ) <S2SV_EndBug> ","<S2SV_ModStart> = NULL , * tmpout <S2SV_ModStart> if ( ! ( flags & SMIME_BINARY ) && dcont ) { tmpout = cms_get_text_bio ( out , flags ) ; if ( ! tmpout ) { CMSerr ( CMS_F_CMS_VERIFY , ERR_R_MALLOC_FAILURE ) ; goto err ; } <S2SV_ModStart> tmpout ) ; if ( ! cmsbio ) goto err ; SMIME_crlf_copy ( dcont , cmsbio , flags & ~ SMIME_TEXT ) ; if ( flags & CMS_TEXT ) { if ( ! SMIME_text ( tmpout , out ) ) { CMSerr ( CMS_F_CMS_VERIFY , CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } } } else { cmsbio = CMS_dataInit ( cms , <S2SV_ModStart> } <S2SV_ModStart> ! ( flags & SMIME_BINARY ) && dcont ) { do_free_upto ( cmsbio , tmpout ) ; if ( tmpin != dcont ) BIO_free ( tmpin ) ; } else { if ( <S2SV_ModStart> } if ( tmpout && out != tmpout ) BIO_free_all ( tmpout ) ; "
793,"<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> len = ipv6_getsockopt_sticky ( sk , np -> opt , <S2SV_EndBug> ","<S2SV_ModStart> struct ipv6_txoptions * opt ; <S2SV_ModStart> opt = rcu_dereference_protected ( np -> opt , sock_owned_by_user ( sk ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
794,<S2SV_StartBug> unregister_pernet_subsys ( & sctp_net_ops ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_v4_protosw_exit ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> sctp_ctrlsock_ops <S2SV_ModEnd> <S2SV_ModStart> ) ; unregister_pernet_subsys ( & sctp_defaults_ops 
795,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> add_bool_conf_item ( ""ANOPE_FLAGS_COMPAT"" , & chansvs . me -> conf_table , 0 , & anope_flags_compat , true ) ; hook_add_event ( ""nick_can_register"" ) ; hook_add_nick_can_register ( check_registration_keywords ) ; hook_add_event ( ""user_can_register"" ) ; hook_add_user_can_register ( check_registration_keywords ) ; "
796,"<S2SV_StartBug> struct net_device * dev = ( ( struct in_ifaddr * ) ptr ) -> ifa_dev -> dev ; <S2SV_EndBug> <S2SV_StartBug> netdev_notifier_info_init ( & info , dev ) ; <S2SV_EndBug> ",<S2SV_ModStart> in_device * idev <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( idev -> dead ) return NOTIFY_DONE ; <S2SV_ModStart> idev -> 
797,<S2SV_StartBug> if ( current -> active_mm != mm ) <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> ,<S2SV_ModStart> { smp_mb ( ) ; <S2SV_ModStart> } <S2SV_ModStart> smp_mb ( ) ; 
798,"<S2SV_StartBug> static void show_psnr ( struct stream_state * stream ) { <S2SV_EndBug> <S2SV_StartBug> ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total , 255.0 , <S2SV_EndBug> ","<S2SV_ModStart> , double peak <S2SV_ModStart> peak <S2SV_ModEnd> "
799,<S2SV_StartBug> char temp [ 500 ] ; <S2SV_EndBug> <S2SV_StartBug> temp [ i ] = fgetc ( fp ) ; <S2SV_EndBug> ,"<S2SV_ModStart> int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> <S2SV_ModStart> if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp , temp_size ) ; } "
800,<S2SV_StartBug> if ( ! del_timer ( & task -> slow_task -> timer ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
801,<S2SV_StartBug> dst_name = malloc ( strlen ( name ) * 2 + 16 ) ; <S2SV_EndBug> ,<S2SV_ModStart> safe_calloc <S2SV_ModEnd> 
802,"<S2SV_StartBug> assert ( errno == ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> ""for<S2SV_blank>management<S2SV_blank>address"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) ; else log_warn ( ""lldp"" , ""too<S2SV_blank>large<S2SV_blank>management<S2SV_blank>address<S2SV_blank>"" ""received<S2SV_blank>on<S2SV_blank>%s"" , hardware -> h_ifname "
803,<S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size * 2 > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug> ,"<S2SV_ModStart> < * object || * object + size <S2SV_ModStart> * object + size < * object || <S2SV_ModStart> < * object || * object + size * 2 <S2SV_ModStart> < * object || * object + size <S2SV_ModStart> < * object || * object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s:<S2SV_blank>BPLIST_DICT<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n"" <S2SV_ModEnd> "
804,"<S2SV_StartBug> TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"" , ksz8851ReadReg ( interface , KSZ8851_REG_CIDER ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"" , ksz8851ReadReg ( interface , KSZ8851_REG_PHY1ILR ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"" , ksz8851ReadReg ( interface , KSZ8851_REG_PHY1IHR ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ksz8851ReadReg ( interface , KSZ8851_REG_CIDER ) != KSZ8851_REV_A3_ID ) <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_MARH , htons ( interface -> macAddr . w [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_MARM , htons ( interface -> macAddr . w [ 1 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_MARL , htons ( interface -> macAddr . w [ 2 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_TXCR , TXCR_TXFCE | TXCR_TXPE | TXCR_TXCE ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851ClearBit ( interface , KSZ8851_REG_P1CR , P1CR_FORCE_DUPLEX ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851SetBit ( interface , KSZ8851_REG_P1CR , P1CR_RESTART_AN ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851SetBit ( interface , KSZ8851_REG_ISR , ISR_LCIS | ISR_TXIS | <S2SV_EndBug> <S2SV_StartBug> ksz8851SetBit ( interface , KSZ8851_REG_IER , IER_LCIE | IER_TXIE | IER_RXIE ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851SetBit ( interface , KSZ8851_REG_TXCR , TXCR_TXE ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851SetBit ( interface , KSZ8851_REG_RXCR1 , RXCR1_RXE ) ; <S2SV_EndBug> ","<S2SV_ModStart> KSZ8851_CIDER <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_PHY1ILR <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_PHY1IHR <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_CIDER ) != ( KSZ8851_CIDER_FAMILY_ID_DEFAULT | KSZ8851_CIDER_CHIP_ID_DEFAULT | KSZ8851_CIDER_REV_ID_A3 ) <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_MARH <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_MARM <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_MARL <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_TXCR , KSZ8851_TXCR_TXFCE | KSZ8851_TXCR_TXPE | KSZ8851_TXCR_TXCE ) ; ksz8851WriteReg ( interface , KSZ8851_TXFDPR , KSZ8851_TXFDPR_TXFPAI ) ; ksz8851WriteReg ( interface , KSZ8851_RXCR1 , KSZ8851_RXCR1_RXPAFMA | KSZ8851_RXCR1_RXFCE | KSZ8851_RXCR1_RXBE | KSZ8851_RXCR1_RXME | KSZ8851_RXCR1_RXUE ) ; ksz8851WriteReg ( interface , KSZ8851_RXCR2 , KSZ8851_RXCR2_SRDBL_SINGLE_FRAME | KSZ8851_RXCR2_IUFFP | KSZ8851_RXCR2_RXIUFCEZ ) ; ksz8851WriteReg ( interface , KSZ8851_RXQCR , KSZ8851_RXQCR_RXFCTE | KSZ8851_RXQCR_ADRFE ) ; ksz8851WriteReg ( interface , KSZ8851_RXFDPR , KSZ8851_RXFDPR_RXFPAI ) ; ksz8851WriteReg ( interface , KSZ8851_RXFCTR <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_P1CR , KSZ8851_P1CR_FORCE_DUPLEX <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_P1CR , KSZ8851_P1CR_RESTART_AN <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_ISR , KSZ8851_ISR_LCIS | KSZ8851_ISR_TXIS | KSZ8851_ISR_RXIS | KSZ8851_ISR_RXOIS | KSZ8851_ISR_TXPSIS | KSZ8851_ISR_RXPSIS | KSZ8851_ISR_TXSAIS | KSZ8851_ISR_RXWFDIS | KSZ8851_ISR_RXMPDIS | KSZ8851_ISR_LDIS | KSZ8851_ISR_EDIS | KSZ8851_ISR_SPIBEIS <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_IER , KSZ8851_IER_LCIE | KSZ8851_IER_TXIE | KSZ8851_IER_RXIE <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_TXCR , KSZ8851_TXCR_TXE <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_RXCR1 , KSZ8851_RXCR1_RXE <S2SV_ModEnd> "
805,<S2SV_StartBug> pch -> file . dead = 1 ; <S2SV_EndBug> ,<S2SV_ModStart> put_net ( pch -> chan_net ) ; pch -> chan_net = NULL ; 
806,"<S2SV_StartBug> struct btrfs_dir_item * di ; <S2SV_EndBug> <S2SV_StartBug> if ( flags & XATTR_REPLACE ) { <S2SV_EndBug> <S2SV_StartBug> di = btrfs_lookup_xattr ( trans , root , path , btrfs_ino ( inode ) , name , <S2SV_EndBug> <S2SV_StartBug> } else if ( ! di ) { <S2SV_EndBug> <S2SV_StartBug> ret = btrfs_delete_one_dir_name ( trans , root , path , di ) ; <S2SV_EndBug> <S2SV_StartBug> btrfs_release_path ( path ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( flags & XATTR_CREATE ) <S2SV_EndBug> <S2SV_StartBug> btrfs_release_path ( path ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( ! di ) { <S2SV_EndBug> <S2SV_StartBug> if ( value ) { <S2SV_EndBug> ","<S2SV_ModStart> = NULL <S2SV_ModStart> path -> skip_release_on_error = 1 ; if ( ! value ) { di = btrfs_lookup_xattr ( trans , root , path , btrfs_ino ( inode ) , name , name_len , - 1 ) ; if ( ! di && <S2SV_ModEnd> <S2SV_ModStart> ) ret = - ENODATA ; else if ( di ) ret = btrfs_delete_one_dir_name <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( flags & XATTR_REPLACE ) { ASSERT ( mutex_is_locked ( & inode -> i_mutex ) ) ; di = btrfs_lookup_xattr ( NULL , root , path , btrfs_ino ( inode ) , name , name_len , 0 ) ; <S2SV_ModEnd> <S2SV_ModStart> btrfs_release_path ( path ) ; di = NULL ; } ret = btrfs_insert_xattr_item <S2SV_ModEnd> <S2SV_ModStart> btrfs_ino ( inode ) , name , name_len , value , size ) ; if ( ret == - EOVERFLOW ) { ret = 0 ; btrfs_assert_tree_locked ( path -> nodes [ 0 ] ) ; di = btrfs_match_dir_item_name ( root , path , name , name_len ) ; if ( ! di && ! ( flags & XATTR_REPLACE ) ) { ret = - ENOSPC ; <S2SV_ModEnd> <S2SV_ModStart> } } else if ( ret == - EEXIST ) { ret = 0 ; di = btrfs_match_dir_item_name ( root , path , name , name_len ) ; ASSERT ( di ) ; } else if ( ret ) { <S2SV_ModEnd> <S2SV_ModStart> if ( di && <S2SV_ModEnd> <S2SV_ModStart> ) { ret = - EEXIST ; <S2SV_ModStart> } if ( di ) { const int slot = path -> slots [ 0 ] ; struct extent_buffer * leaf = path -> nodes [ 0 ] ; const u16 old_data_len = btrfs_dir_data_len ( leaf , di ) ; const u32 item_size = btrfs_item_size_nr ( leaf , slot ) ; const u32 data_size = sizeof ( * di ) + name_len + size ; struct btrfs_item * item ; unsigned long data_ptr ; char * ptr ; if ( size > old_data_len ) { if ( btrfs_leaf_free_space ( root , leaf ) < ( size - old_data_len ) ) { ret = - ENOSPC <S2SV_ModEnd> <S2SV_ModStart> } if ( old_data_len + name_len + sizeof ( * di ) == item_size ) { if ( size > old_data_len ) btrfs_extend_item ( root , path , size - old_data_len ) ; <S2SV_ModStart> size < old_data_len ) btrfs_truncate_item ( root , path , data_size , 1 ) ; } else { <S2SV_ModEnd> <S2SV_ModStart> btrfs_extend_item ( root , path , data_size ) ; } item = btrfs_item_nr ( slot ) ; ptr = btrfs_item_ptr ( leaf , slot , char ) ; ptr += btrfs_item_size ( leaf , item ) - data_size ; di = ( struct btrfs_dir_item * ) ptr ; btrfs_set_dir_data_len ( leaf , di , size ) ; data_ptr = ( ( unsigned long ) ( di + 1 ) ) + name_len ; write_extent_buffer ( leaf , value , data_ptr , size ) ; btrfs_mark_buffer_dirty ( leaf ) ; } else { <S2SV_ModEnd> "
807,"<S2SV_StartBug> if ( op -> op > 0xbf ) return 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( n > 0 && n < buf_len ) ) goto err ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( table = calloc ( count , sizeof ( ut32 ) ) ) ) goto err ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( op -> len + n <= buf_len ) ) goto beach ; <S2SV_EndBug> <S2SV_StartBug> op -> len += n ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( n > 0 && n + op -> len < buf_len ) ) goto beach ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < count && strlen ( op -> txt ) < R_ASM_BUFSIZE ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> snprintf ( op -> txt + strlen ( op -> txt ) , R_ASM_BUFSIZE , ""%d<S2SV_blank>"" , table [ i ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> + 10 <S2SV_ModStart> int optxtlen = strlen ( op -> txt ) ; <S2SV_ModStart> optxtlen , R_ASM_BUFSIZE - optxtlen <S2SV_ModEnd> "
808,<S2SV_StartBug> g_clear_object ( & client -> proxy ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; g_byte_array_free ( client -> auth_buffer , TRUE "
809,"<S2SV_StartBug> vp9_foreach_transformed_block_in_plane ( xd , bsize , plane , encode_block_intra , <S2SV_EndBug> ",<S2SV_ModStart> vp9_encode_block_intra <S2SV_ModEnd> 
810,"<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) <S2SV_EndBug> ",<S2SV_ModStart> key_is_negative ( key <S2SV_ModEnd> 
811,<S2SV_StartBug> NEED_IP ( 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( t + 3 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 1 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 1 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( likely ( HAVE_OP ( t + 15 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( HAVE_IP ( 6 ) ) { <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug> <S2SV_StartBug> if ( likely ( HAVE_IP ( 6 ) && HAVE_OP ( 4 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( t + 3 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , 0 <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , 0 <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , 0 "
812,"<S2SV_StartBug> if ( fit_check_format ( fit , IMAGE_SIZE_INVAL ) ) { <S2SV_EndBug> <S2SV_StartBug> printf ( ""Bad<S2SV_blank>FIT<S2SV_blank>%s<S2SV_blank>image<S2SV_blank>format!\\n"" , prop_name ) ; <S2SV_EndBug> <S2SV_StartBug> return - ENOEXEC ; <S2SV_EndBug> ","<S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> ; if ( ret <S2SV_ModStart> ""Bad<S2SV_blank>FIT<S2SV_blank>%s<S2SV_blank>image<S2SV_blank>format!<S2SV_blank>(err=%d)\\n"" , prop_name , ret ) ; if ( CONFIG_IS_ENABLED ( FIT_SIGNATURE ) && ret == - EADDRNOTAVAIL ) printf ( ""Signature<S2SV_blank>checking<S2SV_blank>prevents<S2SV_blank>use<S2SV_blank>of<S2SV_blank>unit<S2SV_blank>addresses<S2SV_blank>(@)<S2SV_blank>in<S2SV_blank>nodes\\n"" <S2SV_ModEnd> <S2SV_ModStart> ret <S2SV_ModEnd> "
813,<S2SV_StartBug> vpn_packet_t outpkt ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( len > sizeof outpkt . data ) return 
814,<S2SV_StartBug> if ( enable_apicv ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
815,"<S2SV_StartBug> for ( cnt = 0 , i = 0 ; i >= 0 && cnt < shdr -> sh_info && ( ( char * ) defs + i < end ) ; ++ cnt ) { <S2SV_EndBug> <S2SV_StartBug> if ( vdaux < 1 ) { <S2SV_EndBug> <S2SV_StartBug> if ( vstart > end || vstart + sizeof ( Elf_ ( Verdaux ) ) > end ) { <S2SV_EndBug> <S2SV_StartBug> if ( vstart > end || vstart + sizeof ( Elf_ ( Verdaux ) ) > end ) { <S2SV_EndBug> ",<S2SV_ModStart> end - <S2SV_ModStart> > i <S2SV_ModEnd> <S2SV_ModStart> || ( char * ) UINTPTR_MAX - vstart < vdaux <S2SV_ModStart> end - vstart < <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> end - vstart < <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
816,"<S2SV_StartBug> ioctl ( uinput_fd , UI_DEV_DESTROY ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
817,<S2SV_StartBug> ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / <S2SV_EndBug> <S2SV_StartBug> ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval ) / <S2SV_EndBug> <S2SV_StartBug> target = rc -> av_per_frame_bandwidth ; <S2SV_EndBug> ,<S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> 
818,"<S2SV_StartBug> if ( strcmp ( argv [ i ] , ""--allow-untrusted"" ) == 0 ) <S2SV_EndBug> ",<S2SV_ModStart> check_option ( argv [ i ] <S2SV_ModEnd> 
819,<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug> ,<S2SV_ModStart> Py_RETURN_NONE <S2SV_ModEnd> 
820,<S2SV_StartBug> offset = tbl -> indent ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> if ( offset < 0 ) offset = 0 ; 
821,"<S2SV_StartBug> ( void ) & line ; <S2SV_EndBug> <S2SV_StartBug> if ( e >= b && ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len ) <S2SV_EndBug> <S2SV_StartBug> CDF_SEC_SIZE ( h ) * sst -> sst_len , CDF_SEC_SIZE ( h ) , sst -> sst_len ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> size_t ss = sst -> sst_dirlen < h -> h_min_size_standard_stream ? CDF_SHORT_SEC_SIZE ( h ) : CDF_SEC_SIZE ( h ) ; <S2SV_ModStart> ss <S2SV_ModEnd> <S2SV_ModStart> ss <S2SV_ModEnd> <S2SV_ModStart> ss <S2SV_ModEnd> 
822,"<S2SV_StartBug> # line 106 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1330 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 115 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1338 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 119 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1351 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 128 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> RE_NODE * leftmost_node = ( yyvsp [ - 1 ] . re_node ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1413 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 190 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1421 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 194 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1434 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 207 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1442 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 211 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1451 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 220 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1468 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 233 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1476 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 237 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1485 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 246 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1512 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 269 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1548 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 301 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1574 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 323 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1594 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 343 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1602 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 347 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> ( yyval . re_node ) = yr_re_node_create ( RE_NODE_ALT , ( yyvsp [ - 2 ] . re_node ) , ( yyvsp [ 0 ] . re_node ) ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1617 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 361 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1629 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 369 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1653 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1657 ""hex_grammar.c"" <S2SV_EndBug> ","<S2SV_ModStart> 113 <S2SV_ModEnd> <S2SV_ModStart> 1337 <S2SV_ModEnd> <S2SV_ModStart> 122 <S2SV_ModEnd> <S2SV_ModStart> 1345 <S2SV_ModEnd> <S2SV_ModStart> 126 ""hex_grammar.y"" { incr_ast_levels ( ) ; <S2SV_ModEnd> <S2SV_ModStart> 1360 <S2SV_ModEnd> <S2SV_ModStart> 137 <S2SV_ModEnd> <S2SV_ModStart> ) ; incr_ast_levels ( <S2SV_ModStart> 1424 <S2SV_ModEnd> <S2SV_ModStart> 201 <S2SV_ModEnd> <S2SV_ModStart> 1432 <S2SV_ModEnd> <S2SV_ModStart> 205 ""hex_grammar.y"" { incr_ast_levels ( ) ; <S2SV_ModEnd> <S2SV_ModStart> 1447 <S2SV_ModEnd> <S2SV_ModStart> 220 <S2SV_ModEnd> <S2SV_ModStart> 1455 <S2SV_ModEnd> <S2SV_ModStart> 224 <S2SV_ModEnd> <S2SV_ModStart> 1464 <S2SV_ModEnd> <S2SV_ModStart> 233 <S2SV_ModEnd> <S2SV_ModStart> 1481 <S2SV_ModEnd> <S2SV_ModStart> 246 <S2SV_ModEnd> <S2SV_ModStart> 1489 <S2SV_ModEnd> <S2SV_ModStart> 250 <S2SV_ModEnd> <S2SV_ModStart> 1498 <S2SV_ModEnd> <S2SV_ModStart> 259 <S2SV_ModEnd> <S2SV_ModStart> 1525 <S2SV_ModEnd> <S2SV_ModStart> 282 <S2SV_ModEnd> <S2SV_ModStart> 1561 <S2SV_ModEnd> <S2SV_ModStart> 314 <S2SV_ModEnd> <S2SV_ModStart> 1587 <S2SV_ModEnd> <S2SV_ModStart> 336 <S2SV_ModEnd> <S2SV_ModStart> 1607 <S2SV_ModEnd> <S2SV_ModStart> 356 <S2SV_ModEnd> <S2SV_ModStart> 1615 <S2SV_ModEnd> <S2SV_ModStart> 360 <S2SV_ModEnd> <S2SV_ModStart> incr_ast_levels ( ) ; <S2SV_ModStart> 1631 <S2SV_ModEnd> <S2SV_ModStart> 375 <S2SV_ModEnd> <S2SV_ModStart> 1643 <S2SV_ModEnd> <S2SV_ModStart> 383 <S2SV_ModEnd> <S2SV_ModStart> 1667 <S2SV_ModEnd> <S2SV_ModStart> 1671 <S2SV_ModEnd> "
823,<S2SV_StartBug> # if 0 <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
824,"<S2SV_StartBug> strncpy ( buff , opt_basedir , sizeof ( buff ) - 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( buff , 0 , sizeof ( buff ) ) ; "
825,"<S2SV_StartBug> if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) <S2SV_EndBug> ",<S2SV_ModStart> key_is_positive ( key <S2SV_ModEnd> 
826,<S2SV_StartBug> struct hci_filter * f = & hci_pi ( sk ) -> filter ; <S2SV_EndBug> ,"<S2SV_ModStart> ; memset ( & uf , 0 , sizeof ( uf ) ) "
827,"<S2SV_StartBug> int n = ( int ) ( data_end - data ) ; <S2SV_EndBug> <S2SV_StartBug> clear += 7 ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & xd -> pre , yv12_fb_new , sizeof ( YV12_BUFFER_CONFIG ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & xd -> dst , yv12_fb_new , sizeof ( YV12_BUFFER_CONFIG ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> segment_feature_data , 0 , sizeof ( xd -> segment_feature_data ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> mb_segment_tree_probs , 255 , sizeof ( xd -> mb_segment_tree_probs ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & pc -> lfc , & pc -> fc , sizeof ( pc -> fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> qcoeff , 0 , sizeof ( xd -> qcoeff ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( pc -> above_context , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) * pc -> mb_cols ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & pc -> fc , & pc -> lfc , sizeof ( pc -> fc ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> MIN ( sizeof ( clear_buffer ) , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> "
828,"<S2SV_StartBug> gss_buffer_desc client_name , service_name ; <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug> ",<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : <S2SV_ModStart>  <S2SV_ModEnd> 
829,<S2SV_StartBug> asoc -> peer . i = new -> peer . i ; <S2SV_EndBug> ,<S2SV_ModStart> auth_capable = new -> peer . auth_capable ; asoc -> peer . 
830,<S2SV_StartBug> if ( fibsize > ( dev -> max_fib_size - sizeof ( struct aac_fibhdr ) ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( fibsize < ( sizeof ( struct user_aac_srb ) - sizeof ( struct user_sgentry ) ) ) || ( <S2SV_ModStart> ) 
831,<S2SV_StartBug> assert ( ( cc0 % rowsize ) == 0 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""PredictorEncodeTile"" , ""%s"" , ""(cc0%rowsize)!=0"" ) ; return 0 ; } <S2SV_ModEnd> "
832,<S2SV_StartBug> struct net * net = sock_net ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> bh_lock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_owned_by_user ( asoc -> base . sk ) ) { <S2SV_EndBug> <S2SV_StartBug> bh_unlock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> sock * sk = asoc -> base . sk ; struct <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
833,"<S2SV_StartBug> size_t input_size , <S2SV_EndBug> <S2SV_StartBug> # define prolog if ( bytes_matched >= max_bytes_matched ) { action = ACTION_KILL ; break ; } <S2SV_EndBug> <S2SV_StartBug> # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } <S2SV_EndBug> <S2SV_StartBug> input -= character_size ; <S2SV_EndBug> <S2SV_StartBug> max_bytes_matched = ( int ) yr_min ( input_size , RE_SCAN_LIMIT ) ; <S2SV_EndBug> <S2SV_StartBug> match = IS_WORD_CHAR ( * input ) ; <S2SV_EndBug> <S2SV_StartBug> match = ! IS_WORD_CHAR ( * input ) ; <S2SV_EndBug> <S2SV_StartBug> ! ( flags & RE_FLAGS_NOT_AT_START ) && <S2SV_EndBug> <S2SV_StartBug> match = TRUE ; <S2SV_EndBug> <S2SV_StartBug> match = TRUE ; <S2SV_EndBug> <S2SV_StartBug> else if ( IS_WORD_CHAR ( * ( input - input_incr ) ) != IS_WORD_CHAR ( * input ) ) <S2SV_EndBug> <S2SV_StartBug> kill = input_size > ( size_t ) bytes_matched ; <S2SV_EndBug> <S2SV_StartBug> kill = ( flags & RE_FLAGS_NOT_AT_START ) || ( bytes_matched != 0 ) ; <S2SV_EndBug> <S2SV_StartBug> input_size > ( size_t ) bytes_matched ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> input_forwards_size , size_t input_backwards_size <S2SV_ModEnd> <S2SV_ModStart> { if ( <S2SV_ModEnd> <S2SV_ModStart> || ( character_size == 2 && * ( input + 1 ) != 0 ) ) { action = ACTION_KILL ; break ; } <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> max_bytes_matched = ( int ) yr_min ( input_backwards_size , RE_SCAN_LIMIT ) ; <S2SV_ModStart> else { <S2SV_ModStart> input_forwards_size <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> _yr_re_is_word_char ( input , character_size <S2SV_ModEnd> <S2SV_ModStart> _yr_re_is_word_char ( input , character_size <S2SV_ModEnd> <S2SV_ModStart> input_backwards_size < character_size ) { <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } else { assert ( input < input_data + input_forwards_size ) ; assert ( input >= input_data - input_backwards_size ) ; assert <S2SV_ModEnd> <S2SV_ModStart> < input_data + input_forwards_size ) ; assert ( input - input_incr >= input_data - input_backwards_size ) ; match = _yr_re_is_word_char ( input , character_size ) != _yr_re_is_word_char ( input - input_incr , character_size ) ; } <S2SV_ModEnd> <S2SV_ModStart> input_backwards_size <S2SV_ModEnd> <S2SV_ModStart> input_backwards_size > 0 <S2SV_ModEnd> <S2SV_ModStart> input_forwards_size <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
834,"<S2SV_StartBug> int * returndistortion , int * returnintra ) <S2SV_EndBug> <S2SV_StartBug> unsigned int zero_mv_sse = INT_MAX , best_sse = INT_MAX , <S2SV_EndBug> <S2SV_StartBug> best_rd_sse = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( mode_mv_sb , 0 , sizeof ( mode_mv_sb ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( & best_mode . mbmode , 0 , sizeof ( best_mode . mbmode ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( & best_mode . bmodes , 0 , sizeof ( best_mode . bmodes ) ) ; <S2SV_EndBug> <S2SV_StartBug> mode_mv [ NEWMV ] . as_int = d -> bmi . mv . as_int ; <S2SV_EndBug> <S2SV_StartBug> if ( x -> best_sse_inter_mode == DC_PRED ) <S2SV_EndBug> <S2SV_StartBug> recon_yoffset , recon_uvoffset ) ; <S2SV_EndBug> <S2SV_StartBug> best_mode_index = mode_index ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & x -> e_mbd . mode_info_context -> mbmi , & best_mode . mbmode , sizeof ( MB_MODE_INFO ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( x -> partition_info , & best_mode . partition , sizeof ( PARTITION_INFO ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> , int mb_row , int mb_col <S2SV_ModStart> UINT_MAX <S2SV_ModEnd> <S2SV_ModStart> UINT_MAX <S2SV_ModEnd> <S2SV_ModStart> UINT_MAX <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int block_index = mb_row * cpi -> common . mb_cols + mb_col ; <S2SV_ModStart> , & cpi -> common . lf_info , mb_row , mb_col , block_index <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> "
835,"<S2SV_StartBug> set_exception_intercept ( svm , MC_VECTOR ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; set_exception_intercept ( svm , AC_VECTOR "
836,<S2SV_StartBug> h -> size = statbuf . st_size ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( h -> size < 0x2000 ) { SET_ERRNO ( EINVAL , ""%s:<S2SV_blank>file<S2SV_blank>is<S2SV_blank>too<S2SV_blank>small<S2SV_blank>to<S2SV_blank>be<S2SV_blank>a<S2SV_blank>Windows<S2SV_blank>NT<S2SV_blank>Registry<S2SV_blank>hive<S2SV_blank>file"" , filename ) ; goto error ; } "
837,"<S2SV_StartBug> const cdf_stream_t * sst , const uint64_t clsid [ 2 ] ) <S2SV_EndBug> <S2SV_StartBug> str = cdf_clsid_to_mime ( clsid , clsid2desc ) ; <S2SV_EndBug> <S2SV_StartBug> return - 2 ; <S2SV_EndBug> <S2SV_StartBug> m = cdf_file_property_info ( ms , info , count , clsid ) ; <S2SV_EndBug> ",<S2SV_ModStart> cdf_directory_t * root_storage <S2SV_ModEnd> <S2SV_ModStart> if ( root_storage ) { <S2SV_ModStart> root_storage -> d_storage_uuid <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> root_storage <S2SV_ModEnd> 
838,"<S2SV_StartBug> UWORD8 u1_profile_idc , u1_level_idc , u1_seq_parameter_set_id ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> ps_seq -> u1_mb_aff_flag = ih264d_get_bit_h264 ( ps_bitstrm ) ; <S2SV_EndBug> ","<S2SV_ModStart> , u1_mb_aff_flag = 0 <S2SV_ModStart> u1_mb_aff_flag = ih264d_get_bit_h264 ( ps_bitstrm ) ; if ( ( ps_dec -> i4_header_decoded & 1 ) && ( ps_seq -> u1_mb_aff_flag != u1_mb_aff_flag ) ) { ps_dec -> u1_res_changed = 1 ; return IVD_RES_CHANGED ; } if ( ! u1_frm ) <S2SV_ModStart> u1_mb_aff_flag <S2SV_ModEnd> "
839,"<S2SV_StartBug> err |= get_user ( length , & up -> length ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( err ) return - EFAULT 
840,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> vpx_svc_parameters_t * const params = va_arg ( args , vpx_svc_parameters_t * ) ; <S2SV_EndBug> <S2SV_StartBug> if ( params == NULL ) <S2SV_EndBug> <S2SV_StartBug> cpi -> svc . spatial_layer_id = params -> spatial_layer ; <S2SV_EndBug> <S2SV_StartBug> cpi -> svc . temporal_layer_id = params -> temporal_layer ; <S2SV_EndBug> <S2SV_StartBug> cpi -> lst_fb_idx = params -> lst_fb_idx ; <S2SV_EndBug> <S2SV_StartBug> cpi -> gld_fb_idx = params -> gld_fb_idx ; <S2SV_EndBug> <S2SV_StartBug> cpi -> alt_fb_idx = params -> alt_fb_idx ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vpx_svc_extra_cfg_t <S2SV_ModEnd> <S2SV_ModStart> vpx_svc_extra_cfg_t <S2SV_ModEnd> <S2SV_ModStart> int sl , tl ; for ( sl = 0 ; sl < <S2SV_ModEnd> <S2SV_ModStart> number_spatial_layers ; ++ sl ) { for ( tl = 0 ; tl < <S2SV_ModEnd> <S2SV_ModStart> number_temporal_layers ; ++ tl ) { const int layer = LAYER_IDS_TO_IDX ( sl , tl , cpi -> svc . number_temporal_layers ) ; LAYER_CONTEXT * lc = & cpi -> svc . layer_context [ layer ] ; lc -> max_q <S2SV_ModEnd> <S2SV_ModStart> max_quantizers [ sl ] ; lc -> min_q <S2SV_ModEnd> <S2SV_ModStart> min_quantizers [ sl ] ; lc -> scaling_factor_num <S2SV_ModEnd> <S2SV_ModStart> scaling_factor_num [ sl ] ; lc -> scaling_factor_den <S2SV_ModEnd> <S2SV_ModStart> scaling_factor_den [ sl ] ; } } <S2SV_ModEnd> "
841,<S2SV_StartBug> if ( prev ) { <S2SV_EndBug> <S2SV_StartBug> int i = ( FRAG6_CB ( prev ) -> offset + prev -> len ) - offset ; <S2SV_EndBug> <S2SV_StartBug> if ( i > 0 ) { <S2SV_EndBug> <S2SV_StartBug> while ( next && FRAG6_CB ( next ) -> offset < end ) { <S2SV_EndBug> <S2SV_StartBug> err : <S2SV_EndBug> ,<S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> goto discard_fq ; if <S2SV_ModEnd> <S2SV_ModStart> goto discard_fq ; <S2SV_ModEnd> <S2SV_ModStart> discard_fq : fq_kill ( fq ) ; 
842,"<S2SV_StartBug> uint16 bitspersample , samplesperpixel ; <S2SV_EndBug> <S2SV_StartBug> uint16 input_compression , input_photometric ; <S2SV_EndBug> ",<S2SV_ModStart> = 1 <S2SV_ModStart> = PHOTOMETRIC_MINISBLACK 
843,"<S2SV_StartBug> # if ! defined ( HAVE_LSTAT ) <S2SV_EndBug> <S2SV_StartBug> r = lstat ( a -> name , & st ) ; <S2SV_EndBug> <S2SV_StartBug> if ( r != 0 ) { <S2SV_EndBug> <S2SV_StartBug> archive_set_error ( & a -> archive , errno , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! S_ISLNK ( a -> mode ) ) { <S2SV_EndBug> ","<S2SV_ModStart> struct archive_string error_string ; int error_number ; int rc ; archive_string_init ( & error_string ) ; rc = check_symlinks_fsobj <S2SV_ModEnd> <S2SV_ModStart> error_number , & error_string , a -> flags <S2SV_ModEnd> <S2SV_ModStart> rc != ARCHIVE_OK <S2SV_ModEnd> <S2SV_ModStart> error_number , ""%s"" , error_string . s <S2SV_ModEnd> <S2SV_ModStart> archive_string_free ( & error_string ) ; <S2SV_ModStart> return rc ; } <S2SV_ModEnd> "
844,"<S2SV_StartBug> if ( mount ( hostpath , path , 0 , MS_BIND , NULL ) != 0 ) { <S2SV_EndBug> ","<S2SV_ModStart> safe_mount ( hostpath , path , 0 , MS_BIND , NULL , rootfs -> path ? rootfs -> mount : <S2SV_ModEnd> "
845,"<S2SV_StartBug> unsigned int link_count ; <S2SV_EndBug> <S2SV_StartBug> struct buffer_head * nbh = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ie -> indirectICB . extLength && <S2SV_EndBug> <S2SV_StartBug> ( nbh = udf_read_ptagged ( inode -> i_sb , & loc , 0 , <S2SV_EndBug> <S2SV_StartBug> brelse ( nbh ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned int indirections = 0 ; reread : <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) { brelse ( bh ) ; brelse ( ibh ) ; memcpy ( & iinfo -> i_location <S2SV_ModEnd> <S2SV_ModStart> sizeof ( struct kernel_lb_addr ) ) ; if ( ++ indirections > UDF_MAX_ICB_NESTING ) { udf_err ( inode -> i_sb , ""too<S2SV_blank>many<S2SV_blank>ICBs<S2SV_blank>in<S2SV_blank>ICB<S2SV_blank>hierarchy"" ""<S2SV_blank>(max<S2SV_blank>%d<S2SV_blank>supported)\\n"" , UDF_MAX_ICB_NESTING ) ; make_bad_inode <S2SV_ModEnd> <S2SV_ModStart> goto reread <S2SV_ModEnd> "
846,"<S2SV_StartBug> const TX_SIZE tx_size_uv = get_uv_tx_size ( mbmi ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( & lfm -> lfl_y [ index ] , filter_level , w ) ; <S2SV_EndBug> <S2SV_StartBug> * int_4x4_y |= ( size_mask [ block_size ] & 0xffffffffffffffff ) << shift_y ; <S2SV_EndBug> ","<S2SV_ModStart> get_uv_tx_size_impl ( tx_size_y , block_size , 1 , 1 <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> 0xffffffffffffffffULL <S2SV_ModEnd> "
847,"<S2SV_StartBug> int namelen = strlen ( name ) ; <S2SV_EndBug> <S2SV_StartBug> if ( len < 0 ) <S2SV_EndBug> <S2SV_StartBug> data ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ! size ) <S2SV_EndBug> <S2SV_StartBug> if ( size == namelen && ! memcmp ( data - size , name , namelen ) ) { <S2SV_EndBug> <S2SV_StartBug> snprintf ( dst , dst_size , ""%g"" , av_int2double ( AV_RB64 ( data ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> GetByteContext gb <S2SV_ModEnd> <S2SV_ModStart> data >= data_end <S2SV_ModEnd> <S2SV_ModStart> bytestream2_init ( & gb , data , data_end - <S2SV_ModEnd> <S2SV_ModStart> return amf_get_field_value2 ( & gb <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModEnd> "
848,"<S2SV_StartBug> strcat ( t1_buf_array , t1_line_array ) ; <S2SV_EndBug> ","<S2SV_ModStart> alloc_array ( t1_buf , strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE ) ; <S2SV_ModStart> ) ; alloc_array ( t1_line , strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE "
849,"<S2SV_StartBug> spin_lock_irqsave ( & fq -> mq_flush_lock , flags ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct blk_mq_hw_ctx * hctx ; <S2SV_ModStart> ) ; hctx = q -> mq_ops -> map_queue ( q , flush_rq -> mq_ctx -> cpu ) ; blk_mq_tag_set_rq ( hctx , flush_rq -> tag , fq -> orig_rq "
850,"<S2SV_StartBug> k -> get_config ( vdev , vdev -> config ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart>  <S2SV_ModEnd> 
851,"<S2SV_StartBug> return ! match ( prog -> start , sp , sp , prog -> flags | eflags , sub ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , 0 "
852,"<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horDiff16 ( tif , cp0 , cc ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if ( ! <S2SV_ModStart> ) return 0 <S2SV_ModStart> return 1 ; 
853,"<S2SV_StartBug> option = stok ( option , ""<S2SV_blank>=\\t,"" , & ovalue ) ; <S2SV_EndBug> ",<S2SV_ModStart> ssplit <S2SV_ModEnd> 
854,<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> daddr = inet -> inet_daddr ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt && inet -> opt -> srr ) <S2SV_EndBug> ,<S2SV_ModStart> struct ip_options_rcu * inet_opt ; <S2SV_ModStart> rcu_read_lock ( ) ; inet_opt = rcu_dereference ( inet -> inet_opt ) ; <S2SV_ModStart> inet_opt && inet_opt -> opt . srr ) daddr = inet_opt -> opt . faddr ; rcu_read_unlock ( ) <S2SV_ModEnd> 
855,"<S2SV_StartBug> void ntlm_populate_message_header ( NTLM_MESSAGE_HEADER * header , UINT32 MessageType ) <S2SV_EndBug> ",<S2SV_ModStart> static 
856,"<S2SV_StartBug> pid_t pid ; <S2SV_EndBug> <S2SV_StartBug> memset ( c_path , 0 , sizeof ( c_path ) ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( c_path , ""%s%s%d_C_%lu"" , HSM_FM_SCK_PREFIX , mgr_prefix , <S2SV_EndBug> <S2SV_StartBug> hdl -> instance , ( long unsigned ) pid ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""%s%s%d_C_XXXXXX"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
857,<S2SV_StartBug> * replySize < ( int ) sizeof ( effect_param_t ) ) { <S2SV_EndBug> ,<S2SV_ModStart> sizeof ( effect_param_t ) || ( ( effect_param_t * ) pCmdData ) -> psize > * replySize - 
858,"<S2SV_StartBug> ""InvalidGeometry"" , ""`%s\'"" , option ) ; <S2SV_EndBug> ",<S2SV_ModStart> ) ; page_geometry = DestroyString ( page_geometry 
859,"<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> len = ipv6_getsockopt_sticky ( sk , np -> opt , <S2SV_EndBug> ","<S2SV_ModStart> struct ipv6_txoptions * opt ; <S2SV_ModStart> opt = rcu_dereference_protected ( np -> opt , sock_owned_by_user ( sk ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
860,<S2SV_StartBug> currkvno = key_data [ i ] . key_data_kvno ; <S2SV_EndBug> ,<S2SV_ModStart> if ( i < n_key_data - 1 ) <S2SV_ModStart> + 1 
861,"<S2SV_StartBug> L3 = emitjump ( J , F , OP_JUMP ) ; <S2SV_EndBug> ","<S2SV_ModStart> emit ( J , F , OP_ENDTRY ) ; "
862,"<S2SV_StartBug> if ( sscanf ( l_line , ""%u<S2SV_blank>%u<S2SV_blank>%u"" , o_row_count , o_column_count , o_element_count ) == 3 ) { <S2SV_EndBug> <S2SV_StartBug> l_row -- ; <S2SV_EndBug> ",<S2SV_ModStart> 3 == <S2SV_ModStart> && 0 != * o_row_count && 0 != * o_column_count && 0 != * o_element_count ) <S2SV_ModEnd> <S2SV_ModStart> LIBXSMM_ASSERT ( 0 != l_row && 0 != l_column ) ; 
863,"<S2SV_StartBug> memcpy ( sbuf + 1 , crgram , crgram_len ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( sizeof sbuf - 1 < crgram_len ) return SC_ERROR_INVALID_ARGUMENTS ; 
864,"<S2SV_StartBug> int length ; <S2SV_EndBug> <S2SV_StartBug> STREAM s ; <S2SV_EndBug> <S2SV_StartBug> ber_parse_header ( s , MCS_CONNECT_RESPONSE , & length ) ; <S2SV_EndBug> <S2SV_StartBug> mcs_parse_domain_params ( s ) ; <S2SV_EndBug> ","<S2SV_ModStart> uint32 <S2SV_ModEnd> <S2SV_ModStart> ; struct stream packet <S2SV_ModStart> packet = * s ; <S2SV_ModStart> if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(),<S2SV_blank>consume<S2SV_blank>connect<S2SV_blank>id<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } "
865,<S2SV_StartBug> assert ( status != NULL ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( status == NULL ) status = ""UNKNOWN_REASON"" <S2SV_ModEnd> "
866,"<S2SV_StartBug> if ( c == 0 ) { <S2SV_EndBug> <S2SV_StartBug> xmlFatalErr ( ctxt , XML_ERR_NAME_TOO_LONG , ""Name"" ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) ; return ( NULL ) ; } if ( ctxt -> input -> cur - ctxt -> input -> base < len ) { xmlFatalErr ( ctxt , XML_ERR_INTERNAL_ERROR , ""unexpected<S2SV_blank>change<S2SV_blank>of<S2SV_blank>input<S2SV_blank>buffer"" "
867,<S2SV_StartBug> goto err_free ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( ch ) ; 
868,<S2SV_StartBug> if ( * rsize >= 17 && rdesc [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { <S2SV_EndBug> ,<S2SV_ModStart> 18 <S2SV_ModEnd> 
869,"<S2SV_StartBug> if ( ! new_idmap_permitted ( file , ns , cap_setid , & new_map ) ) <S2SV_EndBug> <S2SV_StartBug> if ( new_map . nr_extents <= UID_GID_MAP_MAX_BASE_EXTENTS ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ret = sort_idmaps ( & new_map ) ; if ( ret < 0 ) goto out ; 
870,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> return - 1 ; 
871,<S2SV_StartBug> smb_ofile_t * of = NULL ; <S2SV_EndBug> <S2SV_StartBug> of = sr -> fid_ofile ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> smb_ofile_flush ( sr , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
872,<S2SV_StartBug> uchar * dataptr ; <S2SV_EndBug> ,<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
873,"<S2SV_StartBug> vpx_memset ( xd -> left_context , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> xd -> pre . y_buffer = ref_buffer [ xd -> mode_info_context -> mbmi . ref_frame ] [ 0 ] + recon_yoffset ; <S2SV_EndBug> <S2SV_StartBug> xd -> pre . u_buffer = ref_buffer [ xd -> mode_info_context -> mbmi . ref_frame ] [ 1 ] + recon_uvoffset ; <S2SV_EndBug> <S2SV_StartBug> xd -> pre . v_buffer = ref_buffer [ xd -> mode_info_context -> mbmi . ref_frame ] [ 2 ] + recon_uvoffset ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> if ( xd -> mode_info_context -> mbmi . ref_frame >= LAST_FRAME ) { const MV_REFERENCE_FRAME ref = xd -> mode_info_context -> mbmi . ref_frame ; <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> } else { xd -> pre . y_buffer = 0 ; xd -> pre . u_buffer = 0 ; xd -> pre . v_buffer = 0 ; } 
874,<S2SV_StartBug> addr -> addrtype = TIPC_ADDR_ID ; <S2SV_EndBug> ,"<S2SV_ModStart> ; memset ( & addr -> addr , 0 , sizeof ( addr -> addr ) ) "
875,<S2SV_StartBug> if ( user_alloc && ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) ) <S2SV_EndBug> ,"<S2SV_ModStart> ( <S2SV_ModStart> ) ) || ! access_ok ( VERIFY_WRITE , mem -> userspace_addr , mem -> memory_size "
876,<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_EndBug> ,<S2SV_ModStart> quantum_info = ( QuantumInfo * ) NULL ; <S2SV_ModStart> if ( quantum_info != ( QuantumInfo * ) NULL ) 
877,"<S2SV_StartBug> if ( tmp_line [ tmp_line_len - 1 ] == '\\n' ) { <S2SV_EndBug> <S2SV_StartBug> if ( tmp_line [ tmp_line_len - 1 ] == '\\r' ) { <S2SV_EndBug> <S2SV_StartBug> # define CHECK_FOR_CNTRL_CHARS ( val ) { if ( val ) { unsigned char * s , * e ; int l ; l = php_url_decode ( val , strlen ( val ) ) ; s = ( unsigned char * ) val ; e = s + l ; while ( s < e ) { if ( iscntrl ( * s ) ) { php_stream_wrapper_log_error ( wrapper , options TSRMLS_CC , ""Invalid<S2SV_blank>redirect<S2SV_blank>URL!<S2SV_blank>%s"" , new_path ) ; goto out ; } s ++ ; } } } <S2SV_EndBug> ",<S2SV_ModStart> tmp_line_len >= 1 && <S2SV_ModStart> tmp_line_len >= 1 && <S2SV_ModStart> \\\n} <S2SV_ModEnd> 
878,"<S2SV_StartBug> PyObject * u ; <S2SV_EndBug> <S2SV_StartBug> const char * end ; <S2SV_EndBug> <S2SV_StartBug> if ( * s & 0x80 ) { <S2SV_EndBug> <S2SV_StartBug> p += 5 ; <S2SV_EndBug> <S2SV_StartBug> assert ( p - buf <= Py_SIZE ( u ) ) ; <S2SV_EndBug> <S2SV_StartBug> return PyUnicode_DecodeUnicodeEscape ( s , len , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> v , * <S2SV_ModStart> ; const char * first_invalid_escape <S2SV_ModStart> s >= end || <S2SV_ModStart> ; if ( s >= end ) break <S2SV_ModStart> PyBytes_GET_SIZE <S2SV_ModEnd> <S2SV_ModStart> v = _PyUnicode_DecodeUnicodeEscape ( s , len , NULL , & first_invalid_escape ) ; if ( v != NULL && first_invalid_escape != NULL ) { if ( warn_invalid_escape_sequence ( c , n , * first_invalid_escape ) < 0 ) { Py_XDECREF ( u ) ; Py_DECREF ( v ) ; return NULL ; } } Py_XDECREF ( u ) ; return v <S2SV_ModEnd> "
879,"<S2SV_StartBug> if ( libfvalue_value_type_initialize ( <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> # if defined ( HAVE_DEBUG_OUTPUT ) <S2SV_EndBug> <S2SV_StartBug> & ( record_data [ data_offset ] ) , <S2SV_EndBug> ","<S2SV_ModStart> user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error , LIBCERROR_ERROR_DOMAIN_RUNTIME , LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , ""%s:<S2SV_blank>user<S2SV_blank>SID<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds."" , function ) ; goto on_error ; } if ( <S2SV_ModStart> if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error , LIBCERROR_ERROR_DOMAIN_RUNTIME , LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , ""%s:<S2SV_blank>strings<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds."" , function ) ; goto on_error ; } <S2SV_ModStart> if ( data_size > ( ( record_data_size - 4 ) - record_data_offset ) ) { libcerror_error_set ( error , LIBCERROR_ERROR_DOMAIN_RUNTIME , LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , ""%s:<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds."" , function ) ; goto on_error ; } <S2SV_ModStart> record_data_offset <S2SV_ModEnd> "
880,"<S2SV_StartBug> uint32_t bcount ; <S2SV_EndBug> <S2SV_StartBug> int supported = TRUE , format ; <S2SV_EndBug> ","<S2SV_ModStart> int format_chunk = 0 ; <S2SV_ModStart> if ( format_chunk ++ ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.W64<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } "
881,<S2SV_StartBug> uint32_t sampleRate ; <S2SV_EndBug> <S2SV_StartBug> if ( ! config -> num_channels ) { <S2SV_EndBug> ,<S2SV_ModStart> = 0 <S2SV_ModStart> || ! config -> sample_rate 
882,"<S2SV_StartBug> ND_TCHECK ( * vtp_vlan ) ; <S2SV_EndBug> <S2SV_StartBug> fn_printzp ( ndo , tptr + VTP_VLAN_INFO_OFFSET , vtp_vlan -> name_len , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> len -= VTP_VLAN_INFO_OFFSET + 4 * ( ( vtp_vlan -> name_len + 3 ) / 4 ) ; <S2SV_EndBug> <S2SV_StartBug> tptr += VTP_VLAN_INFO_OFFSET + 4 * ( ( vtp_vlan -> name_len + 3 ) / 4 ) ; <S2SV_EndBug> <S2SV_StartBug> type = * tptr ; <S2SV_EndBug> <S2SV_StartBug> if ( type == 0 || tlv_len == 0 ) { <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , tlv_len * 2 + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> len -= 2 + tlv_len * 2 ; <S2SV_EndBug> ","<S2SV_ModStart> if ( len < VTP_VLAN_INFO_FIXED_PART_LEN ) goto trunc ; <S2SV_ModStart> len -= VTP_VLAN_INFO_FIXED_PART_LEN ; tptr += VTP_VLAN_INFO_FIXED_PART_LEN ; if ( len < 4 * ( ( <S2SV_ModEnd> <S2SV_ModStart> + 3 ) / 4 ) ) goto trunc ; ND_TCHECK2 ( * tptr , <S2SV_ModEnd> <S2SV_ModStart> ) ; fn_printzp ( ndo , tptr , <S2SV_ModEnd> <S2SV_ModStart> , NULL ) ; len -= 4 * ( ( vtp_vlan -> name_len + 3 ) / 4 ) ; tptr += 4 * ( ( vtp_vlan -> name_len <S2SV_ModStart> if ( len < 2 ) goto trunc ; ND_TCHECK2 ( * tptr , 2 ) ; <S2SV_ModStart> len < tlv_len * 2 + 2 ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(TLV<S2SV_blank>goes<S2SV_blank>past<S2SV_blank>the<S2SV_blank>end<S2SV_blank>of<S2SV_blank>the<S2SV_blank>packet)"" ) ) ; <S2SV_ModEnd> <S2SV_ModStart> if ( tlv_len != 1 ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(invalid<S2SV_blank>TLV<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>!=<S2SV_blank>1)"" , tlv_len ) ) ; return ; } else { <S2SV_ModStart> } "
883,"<S2SV_StartBug> spin_unlock_irqrestore ( & slave_active_lock , flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> list_del_init ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ; 
884,"<S2SV_StartBug> struct stat stb ; <S2SV_EndBug> <S2SV_StartBug> int setimes , targisdir , wrerrno = 0 ; <S2SV_EndBug> <S2SV_StartBug> wrerr = NO ; <S2SV_EndBug> <S2SV_StartBug> if ( wrerr == NO ) { <S2SV_EndBug> <S2SV_StartBug> wrerr = YES ; <S2SV_EndBug> <S2SV_StartBug> if ( count != 0 && wrerr == NO && <S2SV_EndBug> <S2SV_StartBug> wrerr = YES ; <S2SV_EndBug> <S2SV_StartBug> ftruncate ( ofd , size ) != 0 ) { <S2SV_EndBug> <S2SV_StartBug> wrerr = DISPLAYED ; <S2SV_EndBug> <S2SV_StartBug> run_err ( ""%s:<S2SV_blank>set<S2SV_blank>mode:<S2SV_blank>%s"" , <S2SV_EndBug> <S2SV_StartBug> np , strerror ( errno ) ) ; <S2SV_EndBug> <S2SV_StartBug> run_err ( ""%s:<S2SV_blank>set<S2SV_blank>mode:<S2SV_blank>%s"" , <S2SV_EndBug> <S2SV_StartBug> np , strerror ( errno ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( close ( ofd ) == - 1 ) { <S2SV_EndBug> <S2SV_StartBug> if ( setimes && wrerr == NO ) { <S2SV_EndBug> <S2SV_StartBug> run_err ( ""%s:<S2SV_blank>set<S2SV_blank>times:<S2SV_blank>%s"" , <S2SV_EndBug> <S2SV_StartBug> wrerr = DISPLAYED ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> wrerr <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> ! wrerr <S2SV_ModEnd> <S2SV_ModStart> note_err ( ""%s:<S2SV_blank>%s"" , np , strerror ( errno ) ) ; wrerr = 1 <S2SV_ModEnd> <S2SV_ModStart> ! wrerr <S2SV_ModEnd> <S2SV_ModStart> note_err ( ""%s:<S2SV_blank>%s"" , np , strerror ( errno ) ) ; wrerr = 1 ; } if ( ! wrerr <S2SV_ModEnd> <S2SV_ModStart> note_err <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> note_err <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> note_err <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> note_err ( np , ""%s:<S2SV_blank>close:<S2SV_blank>%s"" , np , strerror ( errno ) ) ; <S2SV_ModEnd> <S2SV_ModStart> ! wrerr <S2SV_ModEnd> <S2SV_ModStart> note_err <S2SV_ModEnd> <S2SV_ModStart> } } if ( note_err ( NULL ) == 0 ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
885,"<S2SV_StartBug> else if ( ! strcasecmp ( target , ""LIST"" ) && myentity_find_ext ( target ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! strcasecmp ( target , ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! strcasecmp ( target , ""MODIFY"" ) && myentity_find_ext ( target ) == NULL ) <S2SV_EndBug> ",<S2SV_ModStart> anope_flags_compat && <S2SV_ModStart> anope_flags_compat && <S2SV_ModStart> anope_flags_compat && 
886,"<S2SV_StartBug> ghash_flush ( ctx , dctx ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! ctx -> gf128 ) return - ENOKEY ; 
887,<S2SV_StartBug> if ( ! ( ast -> sub_ctx = avformat_alloc_context ( ) ) ) <S2SV_EndBug> ,"<S2SV_ModStart> strcmp ( sub_demuxer -> name , ""srt"" ) && strcmp ( sub_demuxer -> name , ""ass"" ) ) goto error ; if ( "
888,"<S2SV_StartBug> int need_error_free = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( inbuf . data , sendauth_version ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( appl_version && strcmp ( inbuf . data , appl_version ) ) { <S2SV_EndBug> ","<S2SV_ModStart> krb5_data d ; <S2SV_ModStart> d = make_data ( ( char * ) sendauth_version , strlen ( sendauth_version ) + 1 ) ; if ( ! data_eq ( inbuf , d <S2SV_ModEnd> <S2SV_ModStart> != NULL && ! problem ) { d = make_data ( appl_version , strlen ( appl_version ) + 1 ) ; if ( ! data_eq ( inbuf , d ) <S2SV_ModEnd> "
889,"<S2SV_StartBug> static INLINE int write_bit_gte ( vp9_writer * w , int word , int test ) { <S2SV_EndBug> <S2SV_StartBug> vp9_write_literal ( w , word >= test , 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> vpx_write_literal <S2SV_ModEnd> 
890,"<S2SV_StartBug> ret = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( ret ) return ret <S2SV_ModEnd> "
891,<S2SV_StartBug> * dptr ++ = 0xAA ; <S2SV_EndBug> ,<S2SV_ModStart> ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> 
892,<S2SV_StartBug> if ( new_fs ) { <S2SV_EndBug> ,<S2SV_ModStart> new_ns -> mounts ++ ; 
893,"<S2SV_StartBug> vpx_memset ( & oci -> postproc_state , 0 , sizeof ( oci -> postproc_state ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( oci -> post_proc_buffer . buffer_alloc , 128 , <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
894,<S2SV_StartBug> zip_object_handlers . get_properties = php_zip_get_properties ; <S2SV_EndBug> ,<S2SV_ModStart> get_gc = php_zip_get_gc ; zip_object_handlers . 
895,<S2SV_StartBug> return ( ( iova < mem -> iova ) || <S2SV_EndBug> <S2SV_StartBug> ( ( iova + length ) > ( mem -> iova + mem -> length ) ) ) ? <S2SV_EndBug> ,<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> || length > mem -> length || iova > <S2SV_ModEnd> <S2SV_ModStart> - length ) return - EFAULT ; return <S2SV_ModEnd> 
896,<S2SV_StartBug> ni6 = ( const struct icmp6_nodeinfo * ) dp ; <S2SV_EndBug> <S2SV_StartBug> cp = ( const u_char * ) ( ni6 + 1 ) + 4 ; <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK2 ( * dp , sizeof ( * ni6 ) ) ; <S2SV_ModStart> ; ND_TCHECK ( cp [ 0 ] ) "
897,"<S2SV_StartBug> struct strbuf * path , const char * name , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
898,<S2SV_StartBug> * sent = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
899,"<S2SV_StartBug> static void buffer_pipe_buf_get ( struct pipe_inode_info * pipe , <S2SV_EndBug> <S2SV_StartBug> ref -> ref ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> bool <S2SV_ModEnd> <S2SV_ModStart> if ( ref -> ref > INT_MAX / 2 ) return false ; <S2SV_ModStart> return true ; 
900,<S2SV_StartBug> if ( cluster != fs -> clusters - 1 ) <S2SV_EndBug> ,<S2SV_ModStart> + <S2SV_ModEnd> 
901,"<S2SV_StartBug> vpx_memcpy ( & t_above , x -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left , x -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
902,<S2SV_StartBug> sock_put ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> sk_nulls_node_init ( & sk -> sk_nulls_node ) ; 
903,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ps_dec -> ps_dpb_cmds -> u1_long_term_reference_flag = 0 ; 
904,<S2SV_StartBug> if ( ! mm ) <S2SV_EndBug> ,<S2SV_ModStart> || ! mm -> env_end 
905,"<S2SV_StartBug> int parse_rock_ridge_inode ( struct iso_directory_record * de , struct inode * inode ) <S2SV_EndBug> <S2SV_StartBug> int result = parse_rock_ridge_inode_internal ( de , inode , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> result = parse_rock_ridge_inode_internal ( de , inode , 14 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , int relocated ) { int flags = relocated ? RR_RELOC_DE : 0 ; <S2SV_ModEnd> <S2SV_ModStart> flags <S2SV_ModEnd> <S2SV_ModStart> flags | RR_REGARD_XA <S2SV_ModEnd> "
906,"<S2SV_StartBug> static struct fsnotify_group * inotify_new_group ( struct user_struct * user , unsigned int max_events ) <S2SV_EndBug> <S2SV_StartBug> group -> inotify_data . user = user ; <S2SV_EndBug> <S2SV_StartBug> group -> inotify_data . fa = NULL ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> fa = NULL <S2SV_ModEnd> <S2SV_ModStart> user = get_current_user ( ) ; if ( atomic_inc_return ( & group -> inotify_data . user -> inotify_devs ) > inotify_max_user_instances ) { fsnotify_put_group ( group ) ; return ERR_PTR ( - EMFILE ) ; } <S2SV_ModEnd> 
907,<S2SV_StartBug> for ( p = 0 ; p < 4 && in -> data [ p ] ; p ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && in -> linesize [ p ] 
908,<S2SV_StartBug> pairs = palloc ( pcount * sizeof ( Pairs ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( pcount < 0 || pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , pcount , ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ; "
909,<S2SV_StartBug> if ( screen -> buffers [ 1 ] ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
910,<S2SV_StartBug> regs [ value_regno ] . var_off = <S2SV_EndBug> ,"<S2SV_ModStart> coerce_reg_to_size ( & <S2SV_ModStart> , size <S2SV_ModEnd> "
911,"<S2SV_StartBug> uint16 strip , nstrips = TIFFNumberOfStrips ( in ) ; <S2SV_EndBug> ",<S2SV_ModStart> uint32 <S2SV_ModEnd> 
912,<S2SV_StartBug> const char need_to_append_dot = base_name [ base_len - 1 ] == '.' ? 0 : 1 ; <S2SV_EndBug> <S2SV_StartBug> struct search_domain * dom ; <S2SV_EndBug> ,<S2SV_ModStart> char need_to_append_dot ; struct search_domain * dom ; if ( ! base_len ) return NULL ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
913,"<S2SV_StartBug> err = nanosleep ( & delay , & delay ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
914,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
915,"<S2SV_StartBug> offset , <S2SV_EndBug> <S2SV_StartBug> if ( offset + ( ( size_t ) operand * number_planes ) > pixel_info_length ) <S2SV_EndBug> <S2SV_StartBug> if ( offset + ( ( size_t ) operand * number_planes ) > pixel_info_length ) <S2SV_EndBug> ","<S2SV_ModStart> pixel_info_length ; ssize_t count , offset <S2SV_ModEnd> <S2SV_ModStart> ( offset < 0 ) || ( <S2SV_ModStart> ) <S2SV_ModStart> ( offset < 0 ) || ( <S2SV_ModStart> ) "
916,"<S2SV_StartBug> static void nsc_rle_decompress_data ( NSC_CONTEXT * context ) <S2SV_EndBug> <S2SV_StartBug> rle = context -> Planes ; <S2SV_EndBug> <S2SV_StartBug> FillMemory ( context -> priv -> PlaneBuffers [ i ] , originalSize , 0xFF ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( planeSize < originalSize ) <S2SV_EndBug> <S2SV_StartBug> nsc_rle_decode ( rle , context -> priv -> PlaneBuffers [ i ] , originalSize ) ; <S2SV_EndBug> <S2SV_StartBug> rle += planeSize ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> if ( ! context ) return FALSE ; <S2SV_ModStart> { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> } <S2SV_ModStart> { if ( ! <S2SV_ModStart> context -> priv -> PlaneBuffersLength , originalSize ) ) return FALSE ; } else { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> return TRUE ; "
917,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( ! inode_owner_or_capable ( inode ) ) return - EACCES ; 
918,"<S2SV_StartBug> httpSetHostName ( state -> host , stok ( sclone ( value ) , ""<S2SV_blank>\\t,"" , NULL ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> ssplit <S2SV_ModEnd> 
919,"<S2SV_StartBug> . match_data . cmp = type -> match , <S2SV_EndBug> ",<S2SV_ModStart> key_default_cmp <S2SV_ModEnd> 
920,<S2SV_StartBug> return - EOPNOTSUPP ; <S2SV_EndBug> <S2SV_StartBug> IP6CB ( skb ) -> iif ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) ; * addr_len = sizeof ( * sin6 
921,<S2SV_StartBug> if ( ! job_id || ! prev_hash || ! coinbase1 || ! coinbase2 || ! bbversion || ! nbit || ! ntime ) { <S2SV_EndBug> <S2SV_StartBug> if ( job_id ) <S2SV_EndBug> ,<S2SV_ModStart> valid_hex ( job_id ) || ! valid_hex ( prev_hash ) || ! valid_hex ( coinbase1 ) || ! valid_hex ( coinbase2 ) || ! valid_hex ( bbversion ) || ! valid_hex ( nbit ) || ! valid_hex ( ntime ) ) { free <S2SV_ModEnd> <S2SV_ModStart> ; free ( coinbase1 ) ; <S2SV_ModEnd> 
922,"<S2SV_StartBug> ssize_t ret = write ( fd , data + transmitted_length , length ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
923,"<S2SV_StartBug> void * ptr = malloc ( num * size ) ; <S2SV_EndBug> <S2SV_StartBug> memset ( ptr , '\\0' , ( num * size ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t res ; if ( check_mul_overflow ( num , size , & res ) ) abort ( ) ; void * ptr ; <S2SV_ModEnd> <S2SV_ModStart> res <S2SV_ModEnd> <S2SV_ModStart> res <S2SV_ModEnd> "
924,<S2SV_StartBug> put_io_context ( ioc ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> } <S2SV_ModStart>  <S2SV_ModEnd> 
925,"<S2SV_StartBug> PyObject * res ; <S2SV_EndBug> <S2SV_StartBug> PyObject * dict = _PyObject_GetAttrId ( self , & PyId___dict__ ) ; <S2SV_EndBug> <S2SV_StartBug> res = Py_BuildValue ( ""O()O"" , Py_TYPE ( self ) , dict ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & dict ) < 0 ) { <S2SV_ModEnd> <S2SV_ModStart> return Py_BuildValue ( ""O()N"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
926,"<S2SV_StartBug> USB_DT_OTG , ( void * * ) & desc ) ; <S2SV_EndBug> ","<S2SV_ModStart> , sizeof ( * desc ) "
927,"<S2SV_StartBug> void ( * func ) ( struct perf_event * ) ; <S2SV_EndBug> <S2SV_StartBug> case PERF_EVENT_IOC_PERIOD : <S2SV_EndBug> <S2SV_StartBug> return perf_event_period ( event , ( u64 __user * ) arg ) ; <S2SV_EndBug> <S2SV_StartBug> case PERF_EVENT_IOC_SET_FILTER : <S2SV_EndBug> ","<S2SV_ModStart> struct perf_event_context * ctx ; long ret ; ctx = perf_event_ctx_lock ( event ) ; ret = _perf_ioctl ( event , cmd <S2SV_ModEnd> <S2SV_ModStart> perf_event_ctx_unlock <S2SV_ModEnd> <S2SV_ModStart> ctx ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
928,<S2SV_StartBug> tp -> prr_delivered += newly_acked_sacked ; <S2SV_EndBug> ,<S2SV_ModStart> if ( newly_acked_sacked <= 0 || WARN_ON_ONCE ( ! tp -> prior_cwnd ) ) return ; 
929,"<S2SV_StartBug> static MB_PREDICTION_MODE read_intra_mode_uv ( VP9_COMMON * cm , vp9_reader * r , <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE y_mode ) { <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE uv_mode = read_intra_mode ( r , <S2SV_EndBug> <S2SV_StartBug> cm -> fc . uv_mode_prob [ y_mode ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> ","<S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> MACROBLOCKD * xd , vpx_reader <S2SV_ModEnd> <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> "
930,"<S2SV_StartBug> return crypto_alloc_skcipher ( name , type , mask ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> struct skcipher_tfm * tfm ; struct crypto_skcipher * skcipher ; tfm = kzalloc ( sizeof ( * tfm ) , GFP_KERNEL ) ; if ( ! tfm ) return ERR_PTR ( - ENOMEM ) ; skcipher = <S2SV_ModEnd> <S2SV_ModStart> if ( IS_ERR ( skcipher ) ) { kfree ( tfm ) ; return ERR_CAST ( skcipher ) ; } tfm -> skcipher = skcipher ; return tfm ; "
931,<S2SV_StartBug> ret = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> goto e_ctx ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( hmac_buf ) ; <S2SV_ModStart> e_data <S2SV_ModEnd> 
932,"<S2SV_StartBug> c -> tile_stride = FFALIGN ( c -> tile_width * 3 , 16 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * 3 
933,<S2SV_StartBug> return Qnil ; <S2SV_EndBug> ,"<S2SV_ModStart> rb_ivar_set ( self , id_key_set , Qtrue ) ; "
934,"
","
"
935,"<S2SV_StartBug> register_savevm ( dev , ""stellaris_enet"" , - 1 , 1 , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
936,"<S2SV_StartBug> register u_int length = h -> len ; <S2SV_EndBug> <S2SV_StartBug> return ( chdlc_print ( ndo , p , length ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart> h -> len <S2SV_ModEnd> 
937,<S2SV_StartBug> if ( ! rc && cifs_sb -> prepathlen && tcon ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
938,<S2SV_StartBug> ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) ) <S2SV_EndBug> ,<S2SV_ModStart> SKB_EXT_ERR ( skb ) -> opt_stats <S2SV_ModEnd> 
939,<S2SV_StartBug> if ( rdf_parser -> uri_filter ) <S2SV_EndBug> ,"<S2SV_ModStart> raptor_sax2_set_option ( rdf_xml_parser -> sax2 , RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES , NULL , RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser , RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ; "
940,<S2SV_StartBug> if ( ( rsa = RSA_new ( ) ) == NULL ) <S2SV_EndBug> ,"<S2SV_ModStart> ! SSL_C_IS_EXPORT ( s -> s3 -> tmp . new_cipher ) ) { al = SSL_AD_UNEXPECTED_MESSAGE ; SSLerr ( SSL_F_SSL3_GET_SERVER_CERTIFICATE , SSL_R_UNEXPECTED_MESSAGE ) ; goto f_err ; } if ( "
941,<S2SV_StartBug> return SECURE_ELEMENT_ERROR_NPE ; <S2SV_EndBug> ,<S2SV_ModStart> ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE 
942,<S2SV_StartBug> iframe -> state = NGHTTP2_IB_READ_SETTINGS ; <S2SV_EndBug> ,<S2SV_ModStart> if ( session -> obq_flood_counter_ >= session -> max_outbound_ack && ! ( iframe -> frame . hd . flags & NGHTTP2_FLAG_ACK ) ) { return NGHTTP2_ERR_FLOODED ; } 
943,<S2SV_StartBug> return new_ns ; <S2SV_EndBug> ,<S2SV_ModStart> new_ns -> mounts = 0 ; new_ns -> pending_mounts = 0 ; 
944,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> atomic_set ( & opt2 -> refcnt , 1 ) ; "
945,<S2SV_StartBug> x86_pmu . extra_regs = intel_snb_extra_regs ; <S2SV_EndBug> <S2SV_StartBug> x86_pmu . pebs_aliases = intel_pebs_aliases_snb ; <S2SV_EndBug> ,<S2SV_ModStart> if ( boot_cpu_data . x86_model == 45 ) x86_pmu . extra_regs = intel_snbep_extra_regs ; else <S2SV_ModStart> if ( boot_cpu_data . x86_model == 62 ) x86_pmu . extra_regs = intel_snbep_extra_regs ; else 
946,<S2SV_StartBug> int n_read = r -> end - r -> begin ; <S2SV_EndBug> ,<S2SV_ModStart> unsigned int actual_size = rtype == 2 ? n * 2 : n ; unsigned int limit_r_begin = ( r -> begin < actual_size ? r -> begin : actual_size ) ; unsigned int limit_r_end = ( r -> end < actual_size ? r -> end : actual_size ) ; <S2SV_ModStart> limit_r_end - limit_r_begin <S2SV_ModEnd> 
947,<S2SV_StartBug> u32 now ; <S2SV_EndBug> <S2SV_StartBug> challenge_timestamp = now ; <S2SV_EndBug> <S2SV_StartBug> challenge_count = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> count , <S2SV_ModStart> u32 half = ( sysctl_tcp_challenge_ack_limit + 1 ) >> 1 ; <S2SV_ModStart> WRITE_ONCE ( challenge_count , half + prandom_u32_max ( sysctl_tcp_challenge_ack_limit ) ) ; } count = READ_ONCE ( challenge_count ) ; if ( count > 0 ) { WRITE_ONCE ( challenge_count , count - 1 ) ; <S2SV_ModEnd> "
948,<S2SV_StartBug> struct llc_pktinfo info ; <S2SV_EndBug> ,"<S2SV_ModStart> ; memset ( & info , 0 , sizeof ( info ) ) "
949,"<S2SV_StartBug> static void pack_mb_tokens ( vp9_writer * w , <S2SV_EndBug> <S2SV_StartBug> TOKENEXTRA * * tp , const TOKENEXTRA * stop ) { <S2SV_EndBug> <S2SV_StartBug> const vp9_extra_bit * const b = & vp9_extra_bits [ t ] ; <S2SV_EndBug> <S2SV_StartBug> int i = 0 ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , bb , pb [ i >> 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( w , e & 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> const stop , vpx_bit_depth_t bit_depth <S2SV_ModEnd> <S2SV_ModStart> int i = 0 ; int v = a -> value ; int n = a -> len ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> b ; if ( bit_depth == VPX_BITS_12 ) b = & vp9_extra_bits_high12 [ t ] ; else if ( bit_depth == VPX_BITS_10 ) b = & vp9_extra_bits_high10 [ t ] ; else <S2SV_ModEnd> <S2SV_ModStart> # else const vp9_extra_bit * const b = & vp9_extra_bits [ t ] ; ( void ) bit_depth ; # endif <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> vpx_write_bit <S2SV_ModEnd> "
950,"<S2SV_StartBug> struct vp9_write_bit_buffer wb = { data , 0 } ; <S2SV_EndBug> <S2SV_StartBug> struct vp9_write_bit_buffer saved_wb ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( & wb , 0 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> uncompressed_hdr_size = vp9_rb_bytes_written ( & wb ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_compute_update_table ( ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( & saved_wb , ( int ) first_part_size , 16 ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_bytes_written <S2SV_ModEnd> <S2SV_ModStart> vpx_clear_system_state <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> 
951,"<S2SV_StartBug> static int dev_get_valid_name ( struct net * net , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
952,"<S2SV_StartBug> int ret , n ; <S2SV_EndBug> <S2SV_StartBug> hid -> version = le16_to_cpu ( hdesc -> bcdHID ) ; <S2SV_EndBug> <S2SV_StartBug> hid -> country = hdesc -> bCountryCode ; <S2SV_EndBug> <S2SV_StartBug> for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) <S2SV_EndBug> ","<S2SV_ModStart> ; int num_descriptors ; size_t offset = offsetof ( struct hid_descriptor , desc ) <S2SV_ModStart> if ( hdesc -> bLength < sizeof ( struct hid_descriptor ) ) { dbg_hid ( ""hid<S2SV_blank>descriptor<S2SV_blank>is<S2SV_blank>too<S2SV_blank>short\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> ; num_descriptors = min_t ( int , hdesc -> bNumDescriptors , ( hdesc -> bLength - offset ) / sizeof ( struct hid_class_descriptor ) ) <S2SV_ModStart> num_descriptors <S2SV_ModEnd> "
953,<S2SV_StartBug> struct ikev2_id id ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( * ext ) ; <S2SV_EndBug> ,<S2SV_ModStart> const struct ikev2_id * idp ; <S2SV_ModStart> idp = ( const struct ikev2_id * ) ext ; <S2SV_ModStart> idp <S2SV_ModEnd> 
954,<S2SV_StartBug> # ifdef CONFIG_FUTEX <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( tsk -> robust_list ) ) <S2SV_EndBug> ,"<S2SV_ModStart> if ( group_dead ) tty_audit_exit ( ) ; if ( unlikely ( tsk -> audit_context ) ) audit_free ( tsk ) ; tsk -> exit_code = code ; taskstats_exit ( tsk , group_dead ) ; exit_mm ( tsk ) ; if ( group_dead ) acct_process ( ) ; trace_sched_process_exit ( tsk ) ; exit_sem ( tsk ) ; exit_files ( tsk ) ; exit_fs ( tsk ) ; check_stack_usage ( ) ; exit_thread ( ) ; cgroup_exit ( tsk , 1 ) ; exit_keys ( tsk ) ; if ( group_dead && tsk -> signal -> leader ) disassociate_ctty ( 1 ) ; module_put ( task_thread_info ( tsk ) -> exec_domain -> module ) ; if ( tsk -> binfmt ) module_put ( tsk -> binfmt -> module ) ; proc_exit_connector ( tsk ) ; exit_notify ( tsk , group_dead ) ; # ifdef CONFIG_NUMA mpol_put ( tsk -> mempolicy ) ; tsk -> mempolicy = NULL ; # endif <S2SV_ModStart>  <S2SV_ModEnd> "
955,"<S2SV_StartBug> struct strbuf * path , const char * last , <S2SV_EndBug> <S2SV_StartBug> char * name = path_name ( path , last ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ( char * ) name ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
956,<S2SV_StartBug> jas_tvparser_destroy ( tvp ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> jas_tvparser_destroy ( tvp ) ; 
957,<S2SV_StartBug> ret = - EINVAL ; <S2SV_EndBug> ,<S2SV_ModStart> usb_free_urb ( urb ) ; 
958,"<S2SV_StartBug> WORD32 xt0_0 , yt0_0 , xt1_0 , yt1_0 , xt2_0 , yt2_0 ; <S2SV_EndBug> <S2SV_StartBug> WORD32 xh0_0 , xh1_0 , xh20_0 , xh21_0 , xl0_0 , xl1_0 , xl20_0 , xl21_0 ; <S2SV_EndBug> <S2SV_StartBug> xh0_0 = x_0 + x_l1_0 ; <S2SV_EndBug> <S2SV_StartBug> xl0_0 = x_0 - x_l1_0 ; <S2SV_EndBug> <S2SV_StartBug> xh20_0 = x_h2_0 + x_l2_0 ; <S2SV_EndBug> <S2SV_StartBug> xl20_0 = x_h2_0 - x_l2_0 ; <S2SV_EndBug> <S2SV_StartBug> x [ 0 ] = xh0_0 + xh20_0 ; <S2SV_EndBug> <S2SV_StartBug> xt0_0 = xh0_0 - xh20_0 ; <S2SV_EndBug> <S2SV_StartBug> xh1_0 = x_1 + x_l1_1 ; <S2SV_EndBug> <S2SV_StartBug> xl1_0 = x_1 - x_l1_1 ; <S2SV_EndBug> <S2SV_StartBug> xh21_0 = x_h2_1 + x_l2_1 ; <S2SV_EndBug> <S2SV_StartBug> xl21_0 = x_h2_1 - x_l2_1 ; <S2SV_EndBug> <S2SV_StartBug> x [ 1 ] = xh1_0 + xh21_0 ; <S2SV_EndBug> <S2SV_StartBug> yt0_0 = xh1_0 - xh21_0 ; <S2SV_EndBug> <S2SV_StartBug> xt1_0 = xl0_0 + xl21_0 ; <S2SV_EndBug> <S2SV_StartBug> xt2_0 = xl0_0 - xl21_0 ; <S2SV_EndBug> <S2SV_StartBug> yt2_0 = xl1_0 + xl20_0 ; <S2SV_EndBug> <S2SV_StartBug> yt1_0 = xl1_0 - xl20_0 ; <S2SV_EndBug> ","<S2SV_ModStart> WORD64 <S2SV_ModEnd> <S2SV_ModStart> WORD64 <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) x_0 + ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) x_0 - ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) x_h2_0 + ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) x_h2_0 - ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD32 ) ixheaacd_add64_sat ( xh0_0 , xh20_0 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) xh0_0 - ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) x_1 + ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) x_1 - ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) x_h2_1 + ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) x_h2_1 - ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD32 ) ixheaacd_add64_sat ( xh1_0 , xh21_0 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) xh1_0 - ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) xl0_0 + ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) xl0_0 - ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) xl1_0 + ( WORD64 ) <S2SV_ModEnd> <S2SV_ModStart> ( WORD64 ) xl1_0 - ( WORD64 ) <S2SV_ModEnd> "
959,<S2SV_StartBug> if ( tag == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( len <= 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) <S2SV_EndBug> <S2SV_StartBug> for ( len = 0 ; n > 0 ; n -- ) { <S2SV_EndBug> <S2SV_StartBug> dp += len ; <S2SV_EndBug> ,<S2SV_ModStart> ASN1_EOC <S2SV_ModEnd> <S2SV_ModStart> goto check_length ; <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> len = 0 ; for ( <S2SV_ModEnd> <S2SV_ModStart> check_length : if ( len > datalen - dp ) goto data_overrun_error ; 
960,<S2SV_StartBug> if ( flags & __GFP_ZERO ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
961,"<S2SV_StartBug> return mount_entry_on_generic ( mntent , mntent -> mnt_dir ) ; <S2SV_EndBug> ","<S2SV_ModStart> , NULL "
962,"<S2SV_StartBug> PHP_SHA512Init ( & context ) ; <S2SV_EndBug> <S2SV_StartBug> PHP_SHA256Init ( & context ) ; <S2SV_EndBug> <S2SV_StartBug> PHP_SHA1Init ( & context ) ; <S2SV_EndBug> <S2SV_StartBug> PHP_MD5Init ( & context ) ; <S2SV_EndBug> <S2SV_StartBug> * signature_len = phar_hex_str ( ( const char * ) digest , sizeof ( digest ) , signature ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error , 0 , ""broken<S2SV_blank>signature"" ) ; } return FAILURE ; } <S2SV_ModStart> if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error , 0 , ""broken<S2SV_blank>signature"" ) ; } return FAILURE ; } <S2SV_ModStart> if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error , 0 , ""broken<S2SV_blank>signature"" ) ; } return FAILURE ; } <S2SV_ModStart> if ( sig_len < sizeof ( digest <S2SV_ModEnd> <S2SV_ModStart> PHP_MD5Init ( & context ) ; read_len = end_of_phar ; if ( read_len > sizeof ( buf ) ) { read_size = sizeof ( buf ) ; } else { read_size = ( int ) read_len ; } while ( ( len = php_stream_read ( fp , ( char * ) buf , read_size ) ) > 0 ) { PHP_MD5Update ( & context , buf , len ) ; read_len -= ( zend_off_t ) len ; if ( read_len < read_size ) { read_size = ( int ) read_len ; } } PHP_MD5Final ( digest , & context ) ; if ( memcmp ( digest , sig , sizeof ( digest ) ) ) { if ( error ) { spprintf ( error , 0 , ""broken<S2SV_blank>signature"" ) ; } return FAILURE ; } "
963,<S2SV_StartBug> value [ n ] >= min && value [ n ] <= max && <S2SV_EndBug> <S2SV_StartBug> && field -> usage [ field -> value [ n ] - min ] . hid <S2SV_EndBug> <S2SV_StartBug> && field -> usage [ value [ n ] - min ] . hid <S2SV_EndBug> ,<S2SV_ModStart> && value [ n ] - min < field -> maxusage <S2SV_ModStart> value [ n ] - min < field -> maxusage && field -> <S2SV_ModStart> value [ n ] - min < field -> maxusage && 
964,"<S2SV_StartBug> struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , scaling_active ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> display_width - 1 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> display_height - 1 , 16 ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> 
965,<S2SV_StartBug> if ( argReg >= regsz ) { <S2SV_EndBug> ,<S2SV_ModStart> > <S2SV_ModEnd> <S2SV_ModStart> return ; 
966,"<S2SV_StartBug> rb_hash_aset ( env , server_name_val , req_server_name ( req ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> remote_addr_val , req_remote_addr ( req ) ) ; rb_hash_aset ( env , server_port_val , req_server_port ( req ) ) ; rb_hash_aset ( env , <S2SV_ModStart>  <S2SV_ModEnd> "
967,<S2SV_StartBug> valuelen = be32_to_cpu ( name_rmt -> valuelen ) ; <S2SV_EndBug> <S2SV_StartBug> valuelen ) ; <S2SV_EndBug> <S2SV_StartBug> args -> valuelen = valuelen ; <S2SV_EndBug> <S2SV_StartBug> if ( args -> valuelen < valuelen ) { <S2SV_EndBug> <S2SV_StartBug> args -> valuelen = valuelen ; <S2SV_EndBug> ,<S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> <S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> <S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> <S2SV_ModStart> args -> rmtvaluelen ) { args -> valuelen = args -> rmtvaluelen <S2SV_ModEnd> <S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> 
968,<S2SV_StartBug> size_t sz = sizeof ( * info ) + size ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( sz < sizeof ( * info ) ) return NULL 
969,"<S2SV_StartBug> int col_type , prepare_retval ; <S2SV_EndBug> <S2SV_StartBug> ""ERROR:<S2SV_blank>Trying<S2SV_blank>to<S2SV_blank>prepare<S2SV_blank>new<S2SV_blank>stmt<S2SV_blank>while<S2SV_blank>we<S2SV_blank>have<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>already<S2SV_blank>not<S2SV_blank>closed<S2SV_blank>one<S2SV_blank>\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> ""\\t\\tERROR:<S2SV_blank>Unable<S2SV_blank>to<S2SV_blank>return<S2SV_blank>MYSQL_STMT<S2SV_blank>structure<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>from<S2SV_blank>mysql_stmt_init():<S2SV_blank>ERROR<S2SV_blank>NO:<S2SV_blank>%d<S2SV_blank>ERROR<S2SV_blank>MSG:%s\\n"" , <S2SV_EndBug> <S2SV_StartBug> int has_statement_fields = imp_sth -> stmt -> fields != 0 ; <S2SV_EndBug> <S2SV_StartBug> col_type = ( has_statement_fields ? <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""ERROR:<S2SV_blank>Trying<S2SV_blank>to<S2SV_blank>prepare<S2SV_blank>new<S2SV_blank>stmt<S2SV_blank>while<S2SV_blank>we<S2SV_blank>have<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>already<S2SV_blank>not<S2SV_blank>closed<S2SV_blank>one<S2SV_blank>\\n"" <S2SV_ModEnd> <S2SV_ModStart> ""\\t\\tERROR:<S2SV_blank>Unable<S2SV_blank>to<S2SV_blank>return<S2SV_blank>MYSQL_STMT<S2SV_blank>structure<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>from<S2SV_blank>mysql_stmt_init():<S2SV_blank>ERROR<S2SV_blank>NO:<S2SV_blank>%d<S2SV_blank>ERROR<S2SV_blank>MSG:%s\\n"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> bind -> buffer_type = MYSQL_TYPE_STRING <S2SV_ModEnd> "
970,<S2SV_StartBug> if ( key -> type -> destroy ) <S2SV_EndBug> ,"<S2SV_ModStart> test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) && ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) && "
971,"<S2SV_StartBug> commonlen = COMPUTESIZE ( state . num , state . sumlen ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( LTXTQUERY_TOO_BIG ( state . num , state . sumlen ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""ltxtquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large"" ) ) ) ; "
972,"<S2SV_StartBug> int need = 0 ; <S2SV_EndBug> <S2SV_StartBug> need *= 4 ; <S2SV_EndBug> <S2SV_StartBug> TRACE ( ( ""Salted<S2SV_blank>TEXT:%u:%s\\n"" , ( unsigned ) ( lp - line ) , <S2SV_EndBug> <S2SV_StartBug> visibleChars ( line , ( unsigned ) ( lp - line ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> scp -> data_length = ( size_t ) ( lp - line ) ; <S2SV_EndBug> ","<S2SV_ModStart> = 0 ; size_t have <S2SV_ModStart> if ( need > 0 ) { if ( screen -> max_combining > 0 ) need += screen -> max_combining ; need *= 6 ; } <S2SV_ModEnd> <S2SV_ModStart> have = ( size_t ) ( lp - line ) ; if ( ( have * 2 ) < ( size_t ) need ) { scp -> data_limit = have + 1 ; line = realloc ( line , scp -> data_limit ) ; } <S2SV_ModStart> have <S2SV_ModEnd> <S2SV_ModStart> have <S2SV_ModEnd> <S2SV_ModStart> have <S2SV_ModEnd> "
973,<S2SV_StartBug> if ( handle && ! ext4_handle_valid ( handle ) ) <S2SV_EndBug> <S2SV_StartBug> if ( sbi -> s_journal && ! handle ) <S2SV_EndBug> ,<S2SV_ModStart> ! EXT4_SB ( inode -> i_sb ) -> s_journal <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
974,"<S2SV_StartBug> void ftoa_bounded_extra ( JsVarFloat val , char * str , size_t len , int radix , int fractionalDigits ) { <S2SV_EndBug> <S2SV_StartBug> if ( isnan ( val ) ) strncpy ( str , ""NaN"" , len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( val < 0 ) strncpy ( str , ""-Infinity"" , len ) ; <S2SV_EndBug> <S2SV_StartBug> else strncpy ( str , ""Infinity"" , len ) ; <S2SV_EndBug> ",<S2SV_ModStart> assert ( len > 9 ) ; <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
975,"<S2SV_StartBug> if ( fscanf ( f , ""PG%[<S2SV_blank>\\t]%c%c%[<S2SV_blank>\\t+-]%d%[<S2SV_blank>\\t]%d%[<S2SV_blank>\\t]%d"" , temp , & endian1 , <S2SV_EndBug> ","<S2SV_ModStart> ""PG%31[<S2SV_blank>\\t]%c%c%31[<S2SV_blank>\\t+-]%d%31[<S2SV_blank>\\t]%d%31[<S2SV_blank>\\t]%d"" <S2SV_ModEnd> "
976,<S2SV_StartBug> if ( size < 6 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> 5 + 1 <S2SV_ModEnd> <S2SV_ModStart> for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf , ""DEADBEEF"" , 8 ) ; length = size ; result = my_asnprintf ( buf , & length , ""%2.0f"" , 1.6314159265358979e+125 ) ; ASSERT ( result != NULL ) ; ASSERT ( strcmp ( result , ""163141592653589790215729350939528493057529598899734151772468186268423257777068536614838678161083520756952076273094236944990208"" ) == 0 ) ; ASSERT ( length == 126 ) ; if ( size < 126 + 1 ) ASSERT ( result != buf ) ; ASSERT ( memcmp ( buf + size , & ""DEADBEEF"" [ size ] , 8 - size ) == 0 ) ; if ( result != buf ) free ( result ) ; } "
977,<S2SV_StartBug> if ( unlikely ( crng_init == 0 ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> this_cpu_add ( net_rand_state . s1 , fast_pool -> pool [ cycles & 3 ] ) ; "
978,"<S2SV_StartBug> strncpy ( str , ""ID:"" , len ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( str , jslGetTokenValueAsString ( ) , len ) ; <S2SV_EndBug> <S2SV_StartBug> strncpy ( str , ""String:\'"" , len ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( str , jslGetTokenValueAsString ( ) , len ) ; <S2SV_EndBug> ","<S2SV_ModStart> espruino_snprintf <S2SV_ModEnd> <S2SV_ModStart> len , ""ID:%s"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> espruino_snprintf <S2SV_ModEnd> <S2SV_ModStart> len , ""String:\'%s\'"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
979,"<S2SV_StartBug> char * to , * repl ; <S2SV_EndBug> <S2SV_StartBug> if ( g . decode && ( g . headis & 1 ) != 0 && g . hname != NULL ) { <S2SV_EndBug> <S2SV_StartBug> to = g . hname ; <S2SV_EndBug> <S2SV_StartBug> len = strlen ( g . hname ) ; <S2SV_EndBug> <S2SV_StartBug> repl = g . decode && strcmp ( to + len , "".tgz"" ) ? """" : "".tar"" ; <S2SV_EndBug> <S2SV_StartBug> g . outf = MALLOC ( len + ( g . decode ? strlen ( repl ) : strlen ( g . sufx ) ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( g . outf , to , len ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( g . outf + len , g . decode ? repl : g . sufx ) ; <S2SV_EndBug> ","<S2SV_ModStart> = g . inf , * sufx = """" ; size_t pre = 0 <S2SV_ModEnd> <S2SV_ModStart> ) { if ( <S2SV_ModEnd> <S2SV_ModStart> pre = justname ( g . inf ) - g . inf ; to = justname ( <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> to ) ; } else if ( <S2SV_ModEnd> <S2SV_ModStart> == 0 ) sufx = "".tar"" ; } else sufx = g . sufx ; <S2SV_ModEnd> <S2SV_ModStart> pre + len + strlen ( sufx ) <S2SV_ModEnd> <S2SV_ModStart> g . inf , pre ) ; memcpy <S2SV_ModEnd> <S2SV_ModStart> pre , to , len ) ; strcpy ( g . outf + pre + len , <S2SV_ModEnd> "
980,"
","
"
981,"<S2SV_StartBug> int <S2SV_EndBug> <S2SV_StartBug> for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> ( void ) fputc ( ( char ) c , output ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) fclose ( input ) ; <S2SV_EndBug> <S2SV_StartBug> return ( MagickTrue ) ; <S2SV_EndBug> ","<S2SV_ModStart> MagickBooleanType status ; <S2SV_ModStart> status = MagickTrue ; <S2SV_ModStart> { <S2SV_ModEnd> <S2SV_ModStart> if ( fputc ( ( char ) c , output ) != c ) status = MagickFalse ; <S2SV_ModStart> fclose ( input <S2SV_ModEnd> <S2SV_ModStart> remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( <S2SV_ModEnd> <S2SV_ModStart> status <S2SV_ModEnd> "
982,<S2SV_StartBug> SvcInternal * const si = get_svc_internal ( svc_ctx ) ; <S2SV_EndBug> ,<S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> 
983,"<S2SV_StartBug> ext3_msg ( sb , ""error:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>journal<S2SV_blank>device<S2SV_blank>%s:<S2SV_blank>%ld"" , <S2SV_EndBug> ","<S2SV_ModStart> KERN_ERR , "
984,"<S2SV_StartBug> int setpwnam ( struct passwd * pwd ) <S2SV_EndBug> <S2SV_StartBug> char * atomic_dir = ""/etc"" ; <S2SV_EndBug> <S2SV_StartBug> if ( ( fp = xfmkstemp ( & tmpname , atomic_dir ) ) == NULL ) <S2SV_EndBug> ","<S2SV_ModStart> , const char * prefix <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""/etc"" , prefix <S2SV_ModEnd> "
985,"<S2SV_StartBug> static unsigned int convert_distribution ( unsigned int i , vp9_tree tree , <S2SV_EndBug> ",<S2SV_ModStart> vpx_tree <S2SV_ModEnd> 
986,"<S2SV_StartBug> return pure_memcmp ( s1 , s2 , strlen ( s1 ) + 1U ) ; <S2SV_EndBug> ",<S2SV_ModStart> const size_t s1_len = strlen ( s1 ) ; const size_t s2_len = strlen ( s2 ) ; const size_t len = ( s1_len < s2_len ) ? s1_len : s2_len ; <S2SV_ModStart> len + 1 <S2SV_ModEnd> 
987,<S2SV_StartBug> const gchar * to = xmpp_stanza_get_to ( message ) ; <S2SV_EndBug> <S2SV_StartBug> Jid * jid_to = jid_create ( to ) ; <S2SV_EndBug> ,"<S2SV_ModStart> Jid * my_jid = jid_create ( connection_get_fulljid ( ) ) ; const char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; Jid * msg_jid = jid_create ( stanza_from ) ; if ( g_strcmp0 ( my_jid -> barejid , msg_jid -> barejid ) != 0 ) { log_warning ( ""Invalid<S2SV_blank>carbon<S2SV_blank>received,<S2SV_blank>from:<S2SV_blank>%s"" , stanza_from ) ; return TRUE ; } <S2SV_ModStart>  <S2SV_ModEnd> "
988,<S2SV_StartBug> if ( getClientTypeByName ( v [ j ] ) == - 1 ) { <S2SV_EndBug> ,<S2SV_ModStart> int class = <S2SV_ModEnd> <S2SV_ModStart> ; if ( class <S2SV_ModStart> || class == CLIENT_TYPE_MASTER 
989,"<S2SV_StartBug> static int dev_get_valid_name ( struct net * net , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
990,"<S2SV_StartBug> parse_global_option ( CMD_PRINT_HELP , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> parse_global_option ( CMD_PRINT_DEFAULTS , NULL , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> , NULL <S2SV_ModStart> , NULL "
991,<S2SV_StartBug> return - EOPNOTSUPP ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
992,<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug> ,<S2SV_ModStart> Py_RETURN_NONE <S2SV_ModEnd> 
993,<S2SV_StartBug> st -> st_state -> name ) ; <S2SV_EndBug> ,<S2SV_ModStart> finite_states [ smc -> state ] <S2SV_ModEnd> 
994,<S2SV_StartBug> ps_dec -> u2_header_done = 1 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( 0 == ps_dec -> u4_frm_buf_stride ) { ps_dec -> u4_frm_buf_stride = ps_dec -> u2_horizontal_size ; } 
995,"<S2SV_StartBug> int x , y , i ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ) ) <S2SV_EndBug> ",<S2SV_ModStart> size_t tilemap_size ; <S2SV_ModStart> tilemap_size = <S2SV_ModEnd> <S2SV_ModStart> ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile ) != y_size || ! ( tilemap = malloc ( tilemap_size 
996,"<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>[bad<S2SV_blank>length<S2SV_blank>%u]"" , length ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>%s"" , ipaddr_string ( ndo , & cp [ len ] ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> ( 0 ) <S2SV_ModStart> ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> ND_TCHECK2 ( cp [ len ] , 4 ) ; <S2SV_ModStart> return ( 0 ) ; trunc : return ( - 1 ) ; "
997,<S2SV_StartBug> static char * print_string ( cJSON * item ) <S2SV_EndBug> <S2SV_StartBug> return print_string_ptr ( item -> valuestring ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , printbuffer * p <S2SV_ModStart> , p "
998,"<S2SV_StartBug> res = ctx -> iface -> enc . encode ( ctx -> priv -> alg_priv , img , pts , <S2SV_EndBug> <S2SV_StartBug> if ( ( res = ctx -> iface -> enc . encode ( ctx -> priv -> alg_priv , img , pts , <S2SV_EndBug> ",<S2SV_ModStart> get_alg_priv ( ctx ) <S2SV_ModEnd> <S2SV_ModStart> get_alg_priv ( ctx ) <S2SV_ModEnd> 
999,"<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> ret = sscanf ( argv [ i ] + 1 , ""prestring=%s"" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( len = strlen ( buf ) ) > L_BUF_SIZE - 3 ) { <S2SV_EndBug> <S2SV_StartBug> ret = sscanf ( argv [ i ] + 1 , ""protos=%s"" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""cpp<S2SV_blank>-ansi<S2SV_blank>-DNO_PROTOS<S2SV_blank>%s<S2SV_blank>%s"" , <S2SV_EndBug> ","<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> ""prestring=%490s"" <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> ""protos=%490s"" <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> "
1000,<S2SV_StartBug> if ( chunk_num > chm -> num_chunks ) return NULL ; <S2SV_EndBug> ,<S2SV_ModStart> >= <S2SV_ModEnd> 
1001,"<S2SV_StartBug> if ( ! validate_event ( & fake_pmu , leader ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! validate_event ( & fake_pmu , sibling ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! validate_event ( & fake_pmu , event ) ) <S2SV_EndBug> ","<S2SV_ModStart> event -> pmu , <S2SV_ModStart> event -> pmu , <S2SV_ModStart> event -> pmu , "
1002,<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> win_maximise ( arg1 ? 2 : 0 ) ; <S2SV_EndBug> ,<S2SV_ModStart> usleep ( 1000 ) ; <S2SV_ModStart> ) ; usleep ( 1000 
1003,<S2SV_StartBug> av_assert0 ( s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1004,<S2SV_StartBug> if ( nsops < 1 ) <S2SV_EndBug> ,<S2SV_ModStart> || nsops > SEMOPM 
1005,<S2SV_StartBug> for ( i = cols ; i < cols + 17 ; i ++ ) <S2SV_EndBug> ,<S2SV_ModStart> 0 ; i < 17 ; i ++ ) s [ i + cols <S2SV_ModEnd> 
1006,<S2SV_StartBug> if ( fileblock < INDIRECT_BLOCKS ) <S2SV_EndBug> <S2SV_StartBug> else if ( fileblock < INDIRECT_BLOCKS + blksz / 4 ) <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> } 
1007,"<S2SV_StartBug> WritePixel ( i , & context , casspecial ) ; npix -- ; <S2SV_EndBug> <S2SV_StartBug> WritePixels ( i , & context , stackp , stack_top - stackp ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( npix > 0 ) <S2SV_ModStart> if ( npix >= ( <S2SV_ModEnd> <S2SV_ModStart> ) { WritePixels ( i , & context , stackp , stack_top - stackp ) ; } else if ( npix > 0 ) { WritePixels ( i , & context , stackp , npix ) ; } <S2SV_ModEnd> "
1008,"<S2SV_StartBug> size_t ofs = CDF_GETUINT32 ( p , ( i << 1 ) + 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> tail = <S2SV_ModEnd> <S2SV_ModStart> ; if ( cdf_check_stream_offset ( sst , h , p , tail * sizeof ( uint32_t ) , __LINE__ ) == - 1 ) goto out ; size_t ofs = CDF_GETUINT32 ( p , tail "
1009,<S2SV_StartBug> next_input = input + i * input_incr ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ip = next_opcode ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; next_input = input + i * input_incr <S2SV_ModStart> bytes_matched = yr_min ( bytes_matched , max_bytes_matched ) ; "
1010,"<S2SV_StartBug> void jslTokenAsString ( int token , char * str , size_t len ) { <S2SV_EndBug> <S2SV_StartBug> case LEX_EOF : strncpy ( str , ""EOF"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_ID : strncpy ( str , ""ID"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_INT : strncpy ( str , ""INT"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_FLOAT : strncpy ( str , ""FLOAT"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_STR : strncpy ( str , ""STRING"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_UNFINISHED_STR : strncpy ( str , ""UNFINISHED<S2SV_blank>STRING"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_TEMPLATE_LITERAL : strncpy ( str , ""TEMPLATE<S2SV_blank>LITERAL"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_UNFINISHED_TEMPLATE_LITERAL : strncpy ( str , ""UNFINISHED<S2SV_blank>TEMPLATE<S2SV_blank>LITERAL"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_REGEX : strncpy ( str , ""REGEX"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_UNFINISHED_REGEX : strncpy ( str , ""UNFINISHED<S2SV_blank>REGEX"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_UNFINISHED_COMMENT : strncpy ( str , ""UNFINISHED<S2SV_blank>COMMENT"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> strncpy ( str , & tokenNames [ p ] , len ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( len >= 10 ) ; <S2SV_EndBug> ",<S2SV_ModStart> assert ( len > 28 ) ; <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1011,<S2SV_StartBug> unlock_mount_hash ( ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( unlikely ( ! list_empty ( & mnt -> mnt_mounts ) ) ) { struct mount * p , * tmp ; list_for_each_entry_safe ( p , tmp , & mnt -> mnt_mounts , mnt_child ) { umount_mnt ( p ) ; } } "
1012,"<S2SV_StartBug> static void encode_term_subexp ( vp9_writer * w , int word ) { <S2SV_EndBug> <S2SV_StartBug> vp9_write_literal ( w , word , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_literal ( w , word - 16 , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_literal ( w , word - 32 , 5 ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> vpx_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_write_literal <S2SV_ModEnd> 
1013,"
","
"
1014,<S2SV_StartBug> if ( ! e || e == p ) <S2SV_EndBug> ,<S2SV_ModStart> ) goto not_found ; if ( e - p > HOST_NAME_MAX - 1 
1015,<S2SV_StartBug> int err = - EIO ; <S2SV_EndBug> <S2SV_StartBug> uint32_t pos ; <S2SV_EndBug> <S2SV_StartBug> if ( ! bh ) <S2SV_EndBug> <S2SV_StartBug> out : <S2SV_EndBug> <S2SV_StartBug> kunmap ( page ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( inode -> i_size > inode -> i_sb -> s_blocksize ) { err = - ENAMETOOLONG ; goto out_unmap ; } <S2SV_ModStart> { err = - EIO ; goto out_unlock_inode ; } <S2SV_ModEnd> <S2SV_ModStart> out_unlock_inode <S2SV_ModEnd> <S2SV_ModStart> out_unmap : 
1016,<S2SV_StartBug> else if ( vcpu -> arch . apic_base & X2APIC_ENABLE ) { <S2SV_EndBug> ,<S2SV_ModStart> cpu_has_secondary_exec_ctrls ( ) && ( vmcs_read32 ( SECONDARY_VM_EXEC_CONTROL ) & SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE ) <S2SV_ModEnd> 
1017,<S2SV_StartBug> if ( ent != NULL ) { <S2SV_EndBug> <S2SV_StartBug> cleanup : <S2SV_EndBug> ,"<S2SV_ModStart> == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> <S2SV_ModStart> st = populate_policy ( context , ld , ent , pol_name , * policy ) ; "
1018,"<S2SV_StartBug> UEV_PARSE ( ""num_tile_columns_minus1"" , value , ps_bitstrm ) ; <S2SV_EndBug> <S2SV_StartBug> ( ps_pps -> i1_num_tile_columns > ps_sps -> i2_pic_wd_in_ctb ) || <S2SV_EndBug> <S2SV_StartBug> ( ps_pps -> i1_num_tile_rows > ps_sps -> i2_pic_ht_in_ctb ) ) <S2SV_EndBug> ",<S2SV_ModStart> WORD32 wd = ALIGN64 ( ps_codec -> i4_wd ) ; WORD32 ht = ALIGN64 ( ps_codec -> i4_ht ) ; WORD32 max_tile_cols = ( wd + MIN_TILE_WD - 1 ) / MIN_TILE_WD ; WORD32 max_tile_rows = ( ht + MIN_TILE_HT - 1 ) / MIN_TILE_HT ; <S2SV_ModStart> max_tile_cols <S2SV_ModEnd> <S2SV_ModStart> max_tile_rows <S2SV_ModEnd> 
1019,<S2SV_StartBug> struct buffer_head * dibh = mp -> mp_bh [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> const unsigned end_of_metadata = height - 1 ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> super_block * sb = sdp -> sd_vfs ; struct <S2SV_ModStart> ; int ret <S2SV_ModStart> if ( buffer_zeronew ( bh_map ) ) { ret = sb_issue_zeroout ( sb , dblock , dblks , GFP_NOFS ) ; if ( ret ) { fs_err ( sdp , ""Failed<S2SV_blank>to<S2SV_blank>zero<S2SV_blank>data<S2SV_blank>buffers\\n"" ) ; clear_buffer_zeronew ( bh_map ) ; } } "
1020,"<S2SV_StartBug> { switch ( c ) <S2SV_EndBug> <S2SV_StartBug> float32_be_write ( floatdata , psf -> header + psf -> headindex ) ; <S2SV_EndBug> <S2SV_StartBug> float32_le_write ( floatdata , psf -> header + psf -> headindex ) ; <S2SV_EndBug> <S2SV_StartBug> double64_be_write ( doubledata , psf -> header + psf -> headindex ) ; <S2SV_EndBug> <S2SV_StartBug> double64_le_write ( doubledata , psf -> header + psf -> headindex ) ; <S2SV_EndBug> <S2SV_StartBug> size += ( size & 1 ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ( psf -> header [ psf -> headindex ] ) , strptr , size ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> headindex += size ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex - 1 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( psf -> rwf_endian == SF_ENDIAN_BIG ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ( psf -> header [ psf -> headindex ] ) , strptr , size + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> headindex += size ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> header_put_byte ( psf , size ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ( psf -> header [ psf -> headindex ] ) , strptr , size ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> headindex += size ; <S2SV_EndBug> <S2SV_StartBug> if ( psf -> headindex + size < sizeof ( psf -> header ) ) <S2SV_EndBug> <S2SV_StartBug> { memcpy ( & ( psf -> header [ psf -> headindex ] ) , bindata , size ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> headindex ++ ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ( psf -> header [ psf -> headindex ] ) , bindata , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> headindex += 16 ; <S2SV_EndBug> <S2SV_StartBug> psf -> headindex += size ; <S2SV_EndBug> <S2SV_StartBug> if ( size < sizeof ( psf -> header ) ) <S2SV_EndBug> ","<S2SV_ModStart> if ( psf -> header . indx + 16 >= psf -> header . len && psf_bump_header_allocation ( psf , 16 ) ) return count ; <S2SV_ModStart> . ptr + psf -> header . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr + psf -> header . indx ) ; psf -> header . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr + psf -> header . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr + psf -> header . indx ) ; psf -> header . indx <S2SV_ModEnd> <S2SV_ModStart> ; if ( psf -> header . indx + ( sf_count_t ) size >= psf -> header . len && psf_bump_header_allocation ( psf , 16 ) ) return count <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . indx += size ; psf -> header . ptr <S2SV_ModEnd> <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . indx + ( sf_count_t ) size > psf -> header . len && psf_bump_header_allocation ( psf , size ) ) return count ; if ( psf -> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . indx += size ; psf -> header . ptr <S2SV_ModEnd> <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> if ( psf -> header . indx + ( sf_count_t ) size > psf -> header . len && psf_bump_header_allocation ( psf , size ) ) return count ; <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . indx + ( sf_count_t ) size > psf -> header . len && psf_bump_header_allocation ( psf , size ) ) return count ; memcpy ( & ( psf -> header . ptr [ psf -> header . indx ] ) , bindata , size ) ; psf -> header . indx += size ; count += size ; break ; case 'z' : size = va_arg ( argptr , size_t ) ; if ( psf -> header . indx + ( sf_count_t ) size > psf -> header . len && psf_bump_header_allocation ( psf , size ) ) return count ; count += size ; while ( size ) { psf -> header . ptr <S2SV_ModEnd> <S2SV_ModStart> header . indx ] <S2SV_ModEnd> <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> if ( psf -> header . indx + ( sf_count_t ) size > psf -> header . len && psf_bump_header_allocation ( psf , size ) ) return count ; psf -> header . indx <S2SV_ModEnd> <S2SV_ModStart> ( sf_count_t ) size >= psf -> header . len && psf_bump_header_allocation ( psf , size ) ) return count ; psf -> header . indx = size <S2SV_ModEnd> "
1021,<S2SV_StartBug> if ( debug ) { <S2SV_EndBug> <S2SV_StartBug> if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) <S2SV_EndBug> ,<S2SV_ModStart> d -> msg_len > sizeof ( d -> msg ) ) return - EINVAL ; if ( <S2SV_ModStart>  <S2SV_ModEnd> 
1022,<S2SV_StartBug> cinfo . hci_handle = sco_pi ( sk ) -> conn -> hcon -> handle ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & cinfo , 0 , sizeof ( cinfo ) ) ; "
1023,<S2SV_StartBug> if ( ( sun_info . type != RT_ENCODED ) && ( sun_info . depth >= 8 ) && <S2SV_EndBug> <S2SV_StartBug> ( ( number_pixels * ( ( sun_info . depth + 7 ) / 8 ) ) > sun_info . length ) ) <S2SV_EndBug> <S2SV_StartBug> length = image -> rows * ( bytes_per_line + image -> columns % 2 ) ; <S2SV_EndBug> ,<S2SV_ModStart> ( ( number_pixels * <S2SV_ModEnd> <S2SV_ModStart> ) > ( 8 * <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> bytes_per_line <S2SV_ModEnd> 
1024,"<S2SV_StartBug> pid_t child = fork ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rv ) <S2SV_EndBug> <S2SV_StartBug> fs_logger2 ( ""clone"" , dest ) ; <S2SV_EndBug> ",<S2SV_ModStart> copy_file_as_user <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1025,"<S2SV_StartBug> guint pkt_len ; <S2SV_EndBug> <S2SV_StartBug> num_items_scanned = sscanf ( line + 64 , ""LEN=%9u"" , & pkt_len ) ; <S2SV_EndBug> <S2SV_StartBug> * err_info = g_strdup ( ""toshiba:<S2SV_blank>OFFSET<S2SV_blank>line<S2SV_blank>doesn\'t<S2SV_blank>have<S2SV_blank>valid<S2SV_blank>LEN<S2SV_blank>item"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> int pkt_len , <S2SV_ModEnd> <S2SV_ModStart> ""LEN=%9d"" <S2SV_ModEnd> <S2SV_ModStart> ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba:<S2SV_blank>packet<S2SV_blank>header<S2SV_blank>has<S2SV_blank>a<S2SV_blank>negative<S2SV_blank>packet<S2SV_blank>length"" "
1026,<S2SV_StartBug> int err = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> = 0 ; msg -> msg_namelen 
1027,"<S2SV_StartBug> if ( zend_symtable_find ( ht , Z_STRVAL_P ( key ) , Z_STRLEN_P ( key ) + 1 , ( void * * ) & old_data ) == SUCCESS ) { <S2SV_EndBug> ",<S2SV_ModStart> zend_hash_find <S2SV_ModEnd> 
1028,"<S2SV_StartBug> strcpy ( link_info . str , nla_data ( link [ TIPC_NLA_LINK_NAME ] ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> nla_strlcpy <S2SV_ModEnd> <S2SV_ModStart> , TIPC_MAX_LINK_NAME "
1029,<S2SV_StartBug> io -> io_cleanup = mem_cleanup ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> io -> io_cleanup = mem_cleanup ; 
1030,"<S2SV_StartBug> pipe_buf_get ( ipipe , ibuf ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! <S2SV_ModStart> ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> 
1031,<S2SV_StartBug> if ( p -> tokenpos == p -> tokenlen ) { <S2SV_EndBug> ,<S2SV_ModStart> >= ( <S2SV_ModEnd> <S2SV_ModStart> - 1 ) 
1032,<S2SV_StartBug> static vp9_variance_fn_t get_block_variance_fn ( BLOCK_SIZE bsize ) { <S2SV_EndBug> <S2SV_StartBug> return vp9_mse8x8 ; <S2SV_EndBug> <S2SV_StartBug> return vp9_mse16x8 ; <S2SV_EndBug> <S2SV_StartBug> return vp9_mse8x16 ; <S2SV_EndBug> <S2SV_StartBug> return vp9_mse16x16 ; <S2SV_EndBug> ,<S2SV_ModStart> vpx_variance_fn_t <S2SV_ModEnd> <S2SV_ModStart> vpx_mse8x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_mse16x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_mse8x16 <S2SV_ModEnd> <S2SV_ModStart> vpx_mse16x16 <S2SV_ModEnd> 
1033,<S2SV_StartBug> dev -> header_ops = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> 
1034,<S2SV_StartBug> for ( i = 0 ; i < frame_count ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> chunk_size [ i ] = avio_rl32 ( pb ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < frame_count ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> chunk_offset [ i ] = avio_rl32 ( pb ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < frame_count ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < frame_count ; i ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> } <S2SV_ModStart> { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> } <S2SV_ModStart> { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> } 
1035,<S2SV_StartBug> if ( ! ( ( pi -> y % ( OPJ_INT32 ) ( comp -> dy << rpy ) == 0 ) || ( ( pi -> y == pi -> ty0 ) && <S2SV_EndBug> ,<S2SV_ModStart> rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx ) != comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy ) != comp -> dy ) { continue ; } if ( 
1036,<S2SV_StartBug> if ( rep -> u . dh_Info . kdfID ) { <S2SV_EndBug> <S2SV_StartBug> secret . data = server_key ; <S2SV_EndBug> ,<S2SV_ModStart> != NULL && rep <S2SV_ModStart> ( char * ) 
1037,"<S2SV_StartBug> if ( CheckMemoryOverflow ( count , quantum ) != MagickFalse ) <S2SV_EndBug> ",<S2SV_ModStart> HeapOverflowSanityCheck <S2SV_ModEnd> 
1038,"<S2SV_StartBug> sprintf ( address , ""%s:%s"" , url , port ) ; <S2SV_EndBug> ","<S2SV_ModStart> snprintf ( address , 254 <S2SV_ModEnd> "
1039,"<S2SV_StartBug> if ( page && ( access ( page , R_OK ) == 0 ) ) <S2SV_EndBug> <S2SV_StartBug> file_write ( page , wikitext ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( page && ( unlink ( page ) > 0 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( page && ( access ( page , R_OK ) == 0 ) ) <S2SV_EndBug> ",<S2SV_ModStart> page_name_is_good ( page ) && <S2SV_ModStart> if ( page_name_is_good ( page ) ) { <S2SV_ModStart> } <S2SV_ModStart> page_name_is_good ( page ) && <S2SV_ModStart> && page_name_is_good ( page ) 
1040,<S2SV_StartBug> int n_read = r -> end - r -> begin ; <S2SV_EndBug> ,<S2SV_ModStart> unsigned int actual_size = f -> blocksize_1 / 2 ; unsigned int limit_r_begin = r -> begin < actual_size ? r -> begin : actual_size ; unsigned int limit_r_end = r -> end < actual_size ? r -> end : actual_size ; <S2SV_ModStart> limit_r_end - limit_r_begin <S2SV_ModEnd> 
1041,<S2SV_StartBug> hdr = ( void * ) p - head -> iov_base ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( hdr > head -> iov_len ) return 0 
1042,<S2SV_StartBug> struct o2nm_cluster * cluster = to_o2nm_cluster_from_node ( node ) ; <S2SV_EndBug> <S2SV_StartBug> write_lock ( & cluster -> cl_nodes_lock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if ( ! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> o2nm_unlock_subsystem ( ) ; 
1043,<S2SV_StartBug> v4l2_buf = to_vb2_v4l2_buffer ( & vb -> vb . vb2_buf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vb ) { <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! vb ) { dev_dbg ( & dev -> pci -> dev , ""vb<S2SV_blank>is<S2SV_blank>empty,<S2SV_blank>dropping<S2SV_blank>frame\\n"" ) ; return ; } <S2SV_ModStart>  <S2SV_ModEnd> "
1044,<S2SV_StartBug> void * zcalloc ( size_t size ) { <S2SV_EndBug> ,<S2SV_ModStart> ASSERT_NO_SIZE_OVERFLOW ( size ) ; 
1045,<S2SV_StartBug> ssize_t count ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( bytes == 0 || items == 0 ) return 0 
1046,<S2SV_StartBug> rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && <S2SV_EndBug> ,<S2SV_ModStart> EXTRACT_16BITS <S2SV_ModEnd> 
1047,"<S2SV_StartBug> ret = key_permission ( key_ref , KEY_NEED_READ ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; } "
1048,"<S2SV_StartBug> memset ( adhoc_start -> ssid , 0 , IEEE80211_MAX_SSID_LEN ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) req_ssid -> ssid_len = IEEE80211_MAX_SSID_LEN 
1049,<S2SV_StartBug> if ( error ) <S2SV_EndBug> <S2SV_StartBug> if ( context -> seen_enough ) <S2SV_EndBug> ,<S2SV_ModStart> { kmem_free ( sbuf ) ; <S2SV_ModStart> } 
1050,<S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> if ( X509_ALGOR_cmp ( a -> sig_alg , a -> cert_info -> signature ) ) return 0 ; "
1051,<S2SV_StartBug> hrtimer_cancel ( & stime -> hrt ) ; <S2SV_EndBug> ,<S2SV_ModStart> hrtimer_try_to_cancel <S2SV_ModEnd> 
1052,"<S2SV_StartBug> while ( p < q ) p += enclen ( reg -> enc , p ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( q >= end ) return 0 ; 
1053,<S2SV_StartBug> struct l2cap_conf_rfc rfc = { . mode = L2CAP_MODE_BASIC } ; <S2SV_EndBug> <S2SV_StartBug> switch ( pi -> mode ) { <S2SV_EndBug> <S2SV_StartBug> rfc . txwin_size = L2CAP_DEFAULT_RX_WINDOW ; <S2SV_EndBug> <S2SV_StartBug> rfc . retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; <S2SV_EndBug> <S2SV_StartBug> rfc . monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; <S2SV_EndBug> ,"<S2SV_ModStart> L2CAP_MODE_ERTM <S2SV_ModEnd> <S2SV_ModStart> if ( pi -> num_conf_req || pi -> num_conf_rsp ) goto done ; switch ( pi -> mode ) { case L2CAP_MODE_STREAMING : case L2CAP_MODE_ERTM : pi -> conf_state |= L2CAP_CONF_STATE2_DEVICE ; if ( ! l2cap_mode_supported ( pi -> mode , pi -> conn -> feat_mask ) ) { struct l2cap_disconn_req req ; req . dcid = cpu_to_le16 ( pi -> dcid ) ; req . scid = cpu_to_le16 ( pi -> scid ) ; l2cap_send_cmd ( pi -> conn , l2cap_get_ident ( pi -> conn ) , L2CAP_DISCONN_REQ , sizeof ( req ) , & req ) ; } break ; default : pi -> mode = l2cap_select_mode ( rfc . mode , pi -> conn -> feat_mask ) ; break ; } done : <S2SV_ModStart> L2CAP_DEFAULT_TX_WINDOW <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> 0 ; rfc . max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr , L2CAP_CONF_RFC , sizeof ( rfc ) , ( unsigned long ) & rfc ) ; break ; case L2CAP_MODE_STREAMING : rfc . mode = L2CAP_MODE_STREAMING ; rfc . txwin_size = 0 ; rfc . max_transmit = 0 ; rfc . retrans_timeout = 0 ; rfc . monitor_timeout = 0 <S2SV_ModEnd> "
1054,"<S2SV_StartBug> do ret = recv ( sock_fd , buf , r , MSG_WAITALL ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
1055,<S2SV_StartBug> s -> chunksize = - 1 ; <S2SV_EndBug> ,<S2SV_ModStart> UINT64_MAX <S2SV_ModEnd> 
1056,<S2SV_StartBug> if ( ( ps_dec -> u4_first_slice_in_pic != 0 ) && <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1057,<S2SV_StartBug> while ( pair != 0 ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1058,"<S2SV_StartBug> err = tfm -> seed ( tfm , seed , slen ) ; <S2SV_EndBug> ",<S2SV_ModStart> crypto_rng_alg ( tfm ) <S2SV_ModEnd> 
1059,"<S2SV_StartBug> atomic_set ( & new -> count , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! atomic_add_unless ( & ucounts -> count , 1 , INT_MAX ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = 0 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> 
1060,<S2SV_StartBug> out_put : <S2SV_EndBug> <S2SV_StartBug> return datagrams ; <S2SV_EndBug> <S2SV_StartBug> return datagrams ; <S2SV_EndBug> <S2SV_StartBug> return err ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( err == 0 ) goto out_put ; if ( datagrams <S2SV_ModEnd> <S2SV_ModStart> { datagrams = err ; goto out_put ; } <S2SV_ModEnd> <S2SV_ModStart> out_put : fput_light ( sock -> file , fput_needed ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
1061,<S2SV_StartBug> void ntlm_free_message_fields_buffer ( NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug> ,<S2SV_ModStart> static 
1062,"<S2SV_StartBug> static void prefetch_table ( const volatile byte * tab , size_t len ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < len ; i += 8 * 32 ) <S2SV_EndBug> <S2SV_StartBug> ( void ) tab [ len - 1 ] ; <S2SV_EndBug> ",<S2SV_ModStart> inline <S2SV_ModStart> len - i >= 8 * 32 <S2SV_ModEnd> <S2SV_ModStart> for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; } 
1063,<S2SV_StartBug> if ( flags == EXT4_GET_BLOCKS_PRE_IO ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> <S2SV_ModStart> if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result ) ; 
1064,"<S2SV_StartBug> static int update_open_stateid ( struct nfs4_state * state , nfs4_stateid * open_stateid , nfs4_stateid * delegation , int open_flags ) <S2SV_EndBug> <S2SV_StartBug> open_flags &= ( FMODE_READ | FMODE_WRITE ) ; <S2SV_EndBug> <S2SV_StartBug> ( deleg_cur -> type & open_flags ) != open_flags ) <S2SV_EndBug> <S2SV_StartBug> __update_open_stateid ( state , open_stateid , & deleg_cur -> stateid , open_flags ) ; <S2SV_EndBug> <S2SV_StartBug> __update_open_stateid ( state , open_stateid , NULL , open_flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> fmode_t fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> <S2SV_ModStart> fmode ) != fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> 
1065,"<S2SV_StartBug> ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; ( void ) ResetMagickMemory ( global_colormap , 0 , 3 * MagickMax ( global_colors , 256 ) * sizeof ( * global_colormap ) "
1066,"<S2SV_StartBug> return send ( signal_fds [ 1 ] , & sig_on , sizeof ( sig_on ) , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
1067,<S2SV_StartBug> static void oidc_scrub_headers ( request_rec * r ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1068,"<S2SV_StartBug> int * out_rate_sum , int64_t * out_dist_sum ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> ( void ) cpi -> fn_ptr [ bs ] . vf ( p -> src . buf , p -> src . stride , <S2SV_EndBug> <S2SV_StartBug> pd -> dst . buf , pd -> dst . stride , & sse ) ; <S2SV_EndBug> <S2SV_StartBug> if ( i == 0 ) <S2SV_EndBug> <S2SV_StartBug> x -> pred_sse [ ref ] = sse ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> speed > 4 ) { <S2SV_EndBug> <S2SV_StartBug> int64_t dist ; <S2SV_EndBug> <S2SV_StartBug> int64_t square_error = sse ; <S2SV_EndBug> <S2SV_StartBug> int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; <S2SV_EndBug> <S2SV_StartBug> int rate ; <S2SV_EndBug> <S2SV_StartBug> * out_rate_sum = ( int ) rate_sum ; <S2SV_EndBug> ","<S2SV_ModStart> , int * skip_txfm_sb , int64_t * skip_sse_sb <S2SV_ModStart> unsigned int var = 0 ; unsigned int sum_sse = 0 ; int64_t total_sse = 0 ; int skip_flag = 1 ; const int shift = 6 ; int rate ; int64_t dist ; const int dequant_shift = # if CONFIG_VP9_HIGHBITDEPTH ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) ? xd -> bd - 5 : # endif 3 ; x -> pred_sse [ ref ] = 0 ; <S2SV_ModStart> const TX_SIZE max_tx_size = max_txsize_lookup <S2SV_ModEnd> <S2SV_ModStart> ; const BLOCK_SIZE unit_size = txsize_to_bsize [ max_tx_size ] ; const int64_t dc_thr = p -> quant_thred [ 0 ] >> shift ; const int64_t ac_thr = p -> quant_thred [ 1 ] >> shift ; const int64_t low_dc_thr = MIN ( 50 , dc_thr >> 2 ) ; const int64_t low_ac_thr = MIN ( 80 , ac_thr >> 2 ) ; int bw = 1 << ( b_width_log2_lookup [ bs ] - b_width_log2_lookup [ unit_size ] ) ; int bh = 1 << ( b_height_log2_lookup [ bs ] - b_width_log2_lookup [ unit_size ] ) ; int idx , idy ; int lw = b_width_log2_lookup [ unit_size ] + 2 ; int lh = b_height_log2_lookup [ unit_size ] + 2 ; sum_sse = 0 ; for ( idy = 0 ; idy < bh ; ++ idy ) { for ( idx = 0 ; idx < bw ; ++ idx ) { uint8_t * src = <S2SV_ModEnd> <S2SV_ModStart> + ( idy * <S2SV_ModEnd> <S2SV_ModStart> << lh ) + ( idx << lw ) ; uint8_t * dst = <S2SV_ModEnd> <S2SV_ModStart> + ( idy * <S2SV_ModEnd> <S2SV_ModStart> << lh ) + ( idx << lh ) ; int block_idx = ( idy << 1 ) + idx ; int low_err_skip = 0 ; var = cpi -> fn_ptr [ unit_size ] . vf ( src , p -> src . stride , dst , pd -> dst . stride <S2SV_ModStart> x -> bsse [ ( i << 2 ) + block_idx ] = sse ; sum_sse += sse ; x -> skip_txfm [ ( i << 2 ) + block_idx ] = SKIP_TXFM_NONE ; if ( ! x -> select_tx_size ) { if ( var < ac_thr || var <S2SV_ModEnd> <S2SV_ModStart> { x -> skip_txfm [ ( i << 2 ) + block_idx ] = SKIP_TXFM_AC_ONLY ; if ( sse - var < dc_thr || sse == var ) { x -> skip_txfm [ ( i << 2 ) + block_idx ] = SKIP_TXFM_AC_DC ; if ( ! sse || ( var < low_ac_thr && sse - var < low_dc_thr ) ) low_err_skip = 1 ; } } } if ( skip_flag && ! low_err_skip ) skip_flag = 0 ; if ( i == 0 ) x -> <S2SV_ModEnd> <S2SV_ModStart> += sse ; } } total_sse += sum_sse ; <S2SV_ModEnd> <S2SV_ModStart> sf . simple_model_rd_from_var <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModEnd> <S2SV_ModStart> sum_sse <S2SV_ModEnd> <S2SV_ModStart> dequant_shift <S2SV_ModEnd> <S2SV_ModStart> vp9_model_rd_from_var_lapndz ( sum_sse , num_pels_log2_lookup [ bs ] , pd -> dequant [ 1 ] >> dequant_shift , <S2SV_ModEnd> <S2SV_ModStart> skip_txfm_sb = skip_flag ; * skip_sse_sb = total_sse << 4 ; * "
1069,<S2SV_StartBug> if ( pmd_none_or_clear_bad ( pmd ) ) <S2SV_EndBug> ,<S2SV_ModStart> pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> 
1070,<S2SV_StartBug> ND_TCHECK ( * pptr ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> ,"<S2SV_ModStart> tptr <S2SV_ModEnd> <S2SV_ModStart> ND_PRINT ( ( ndo , ""[|esis]"" ) ) <S2SV_ModEnd> "
1071,"<S2SV_StartBug> if ( ( * ptr == '<S2SV_blank>' ) || ( * ptr == '\\t' ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> ( void ) strcpy ( * ret_username , username ) ; <S2SV_EndBug> ",<S2SV_ModStart> || ( index >= PAM_MAX_RESP_SIZE ) ) { break ; } <S2SV_ModEnd> <S2SV_ModStart> index >= PAM_MAX_RESP_SIZE || <S2SV_ModStart> strdup ( username <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1072,"<S2SV_StartBug> static int read_segment_id ( vp9_reader * r , const struct segmentation * seg ) { <S2SV_EndBug> <S2SV_StartBug> return vp9_read_tree ( r , vp9_segment_tree , seg -> tree_probs ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> <S2SV_ModStart> vpx_read_tree <S2SV_ModEnd> 
1073,<S2SV_StartBug> uint32_t backup_handle ; <S2SV_EndBug> <S2SV_StartBug> if ( ret == 0 && res -> backup -> base . num_pages * PAGE_SIZE < <S2SV_EndBug> <S2SV_StartBug> goto out_unlock ; <S2SV_EndBug> ,<S2SV_ModStart> = 0 <S2SV_ModStart> ) { if ( <S2SV_ModEnd> <S2SV_ModStart> } else { backup_handle = req -> buffer_handle ; } 
1074,<S2SV_StartBug> static struct desc_struct * get_desc ( unsigned short sel ) <S2SV_EndBug> <S2SV_StartBug> struct desc_struct * desc = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ldt && sel < ldt -> nr_entries ) <S2SV_EndBug> <S2SV_StartBug> desc = & ldt -> entries [ sel ] ; <S2SV_EndBug> <S2SV_StartBug> return desc ; <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> bool get_desc ( <S2SV_ModStart> out , <S2SV_ModEnd> <S2SV_ModStart> bool success = false <S2SV_ModEnd> <S2SV_ModStart> { * out = <S2SV_ModEnd> <S2SV_ModStart> success = true ; } <S2SV_ModStart> success <S2SV_ModEnd> <S2SV_ModStart> false ; * out = * <S2SV_ModEnd> <S2SV_ModStart> return true ; "
1075,"<S2SV_StartBug> vpx_memset ( dst_ptr1 , src_ptr1 [ 0 ] , extend_left ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( dst_ptr2 , src_ptr2 [ 0 ] , extend_right ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst_ptr1 , src_ptr1 , linesize ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst_ptr2 , src_ptr2 , linesize ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
1076,"<S2SV_StartBug> struct sctp_sockaddr_entry * laddr ; <S2SV_EndBug> <S2SV_StartBug> __u8 matchlen = 0 ; <S2SV_EndBug> <S2SV_StartBug> dst = ip6_dst_lookup_flow ( sk , fl6 , NULL , false ) ; <S2SV_EndBug> <S2SV_StartBug> dst = ip6_dst_lookup_flow ( sk , fl6 , NULL , false ) ; <S2SV_EndBug> ","<S2SV_ModStart> ipv6_pinfo * np = inet6_sk ( sk ) ; struct <S2SV_ModStart> struct in6_addr * final_p , final ; <S2SV_ModStart> final_p = fl6_update_dst ( fl6 , np -> opt , & final ) ; <S2SV_ModStart> final_p <S2SV_ModEnd> <S2SV_ModStart> final_p = fl6_update_dst ( fl6 , np -> opt , & final ) ; <S2SV_ModStart> final_p <S2SV_ModEnd> "
1077,"<S2SV_StartBug> static void kgdb_hw_overflow_handler ( struct perf_event * event , int nmi , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1078,"<S2SV_StartBug> buf2 = smb_fdata ( ndo , buf , fmt , maxbuf , unicodestr ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( depth == 10 ) ND_PRINT ( ( ndo , ""(too<S2SV_blank>many<S2SV_blank>nested<S2SV_blank>levels,<S2SV_blank>not<S2SV_blank>recursing)"" ) ) ; else "
1079,<S2SV_StartBug> if ( client -> priv -> protocol_timeout ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1080,<S2SV_StartBug> while ( -- n >= 0 && ! ND_TTEST ( * ps ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( ie = io + ps -> nid ; io < ie && ! ND_TTEST ( * io ) ; ++ io ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1081,"<S2SV_StartBug> n = ksz8851ReadReg ( interface , KSZ8851_REG_TXMIR ) & TXMIR_TXMA_MASK ; <S2SV_EndBug> <S2SV_StartBug> header . controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851SetBit ( interface , KSZ8851_REG_RXQCR , RXQCR_SDA ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851ClearBit ( interface , KSZ8851_REG_RXQCR , RXQCR_SDA ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851SetBit ( interface , KSZ8851_REG_TXQCR , TXQCR_METFE ) ; <S2SV_EndBug> <S2SV_StartBug> n = ksz8851ReadReg ( interface , KSZ8851_REG_TXMIR ) & TXMIR_TXMA_MASK ; <S2SV_EndBug> ","<S2SV_ModStart> KSZ8851_TXMIR ) & KSZ8851_TXMIR_TXMA <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_TX_CTRL_TXIC <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_TX_CTRL_TXFID <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_RXQCR , KSZ8851_RXQCR_SDA <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_RXQCR , KSZ8851_RXQCR_SDA <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_TXQCR , KSZ8851_TXQCR_METFE <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_TXMIR ) & KSZ8851_TXMIR_TXMA <S2SV_ModEnd> "
1082,<S2SV_StartBug> return key ; <S2SV_EndBug> ,"<S2SV_ModStart> rb_ivar_set ( self , id_key_set , Qtrue ) ; "
1083,<S2SV_StartBug> goto present_leaves_cluster_but_not_new_leaf ; <S2SV_EndBug> <S2SV_StartBug> present_leaves_cluster_but_not_new_leaf : <S2SV_EndBug> ,"<S2SV_ModStart> pr_devel ( ""present<S2SV_blank>leaves<S2SV_blank>cluster<S2SV_blank>but<S2SV_blank>not<S2SV_blank>new<S2SV_blank>leaf\\n"" ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1084,<S2SV_StartBug> settings . udpport = 11211 ; <S2SV_EndBug> ,<S2SV_ModStart> 0 <S2SV_ModEnd> 
1085,<S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart> reference_queue_proccess_all ( ) ; 
1086,"<S2SV_StartBug> WORD32 x_8 , x_9 , x_a , x_b , x_c , x_d , x_e , x_f ; <S2SV_EndBug> <S2SV_StartBug> n00 = x_0 + x_2 ; <S2SV_EndBug> <S2SV_StartBug> y1 [ h2 ] = n10 ; <S2SV_EndBug> <S2SV_StartBug> y1 [ h2 + 1 ] = n11 ; <S2SV_EndBug> <S2SV_StartBug> y3 [ h2 ] = n30 ; <S2SV_EndBug> <S2SV_StartBug> y3 [ h2 + 1 ] = n31 ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> y0 [ h2 ] = ixheaacd_add32_sat ( x_0 , x_2 ) ; y0 [ h2 + 1 ] = ixheaacd_add32_sat ( x_1 , x_3 ) ; y1 [ h2 ] = ixheaacd_add32_sat ( x_4 , x_6 ) ; y1 [ h2 + 1 ] = ixheaacd_add32_sat ( x_5 , x_7 ) ; y2 [ h2 ] = ixheaacd_sub32_sat ( x_0 , x_2 ) ; y2 [ h2 + 1 ] = ixheaacd_sub32_sat ( x_1 , x_3 ) ; y3 [ h2 ] = ixheaacd_sub32_sat ( x_4 , x_6 ) ; y3 [ h2 + 1 ] = ixheaacd_sub32_sat ( x_5 , x_7 ) ; x_8 = * x2 ++ ; x_9 = * x2 ++ ; x_a = * x2 ++ ; x_b = * x2 ++ ; x_c = * x2 ++ ; x_d = * x2 ++ ; x_e = * x2 ++ ; x_f = * x2 ++ ; y0 [ h2 + 2 ] = ixheaacd_add32_sat ( x_8 , x_a ) ; y0 [ h2 + 3 ] = ixheaacd_add32_sat ( x_9 , x_b ) <S2SV_ModEnd> <S2SV_ModStart> + 2 ] = ixheaacd_add32_sat ( x_c , x_e ) <S2SV_ModEnd> <S2SV_ModStart> 3 ] = ixheaacd_add32_sat ( x_d , x_f ) ; y2 [ h2 + 2 ] = ixheaacd_sub32_sat ( x_8 , x_a ) ; y2 [ h2 + 3 ] = ixheaacd_sub32_sat ( x_9 , x_b ) <S2SV_ModEnd> <S2SV_ModStart> + 2 ] = ixheaacd_sub32_sat ( x_c , x_e ) <S2SV_ModEnd> <S2SV_ModStart> 3 ] = ixheaacd_sub32_sat ( x_d , x_f ) <S2SV_ModEnd> "
1087,"<S2SV_StartBug> clips = kzalloc ( num_clips * sizeof ( * clips ) , GFP_KERNEL ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; } 
1088,<S2SV_StartBug> if ( unlikely ( pmd_trans_huge ( * pmd ) ) ) <S2SV_EndBug> ,<S2SV_ModStart> pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> 
1089,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1090,"<S2SV_StartBug> for ( j = 0 ; j < size ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> r_cons_printf ( ""%02x"" , buf [ j + idx ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( op . val != UT64_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( op . ptr != UT64_MAX ) <S2SV_EndBug> <S2SV_StartBug> printline ( ""ptr"" , ""0x%08"" PFMT64x ""\\n"" , op . ptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( op . refptr != - 1 ) <S2SV_EndBug> <S2SV_StartBug> printline ( ""refptr"" , ""%d\\n"" , op . refptr ) ; <S2SV_EndBug> ","<S2SV_ModStart> int minsz = R_MIN ( len , size ) ; minsz = R_MAX ( minsz , 0 ) ; <S2SV_ModStart> minsz <S2SV_ModEnd> <S2SV_ModStart> ut8 ch = ( ( j + idx - 1 ) > minsz ) ? 0xff : <S2SV_ModEnd> <S2SV_ModStart> ; r_cons_printf ( ""%02x"" , ch <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } "
1091,"<S2SV_StartBug> int width , height , target_width , target_height ; <S2SV_EndBug> <S2SV_StartBug> usage ( argv [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> usage ( argv [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> usage ( argv [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> usage ( argv [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> usage ( argv [ 0 ] ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; exec_name = argv [ 0 ] <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1092,<S2SV_StartBug> while ( readw ( chip -> DSPQ + JQS_wTail ) != readw ( chip -> DSPQ + JQS_wHead ) ) { <S2SV_EndBug> <S2SV_StartBug> wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> u16 head , tail , size ; head <S2SV_ModEnd> <S2SV_ModStart> ; tail = readw ( chip -> DSPQ + JQS_wTail ) ; size = <S2SV_ModEnd> <S2SV_ModStart> ; if ( head > size || tail > size ) goto out ; while ( head != tail ) { snd_msnd_eval_dsp_msg ( chip , readw ( pwDSPQData + 2 * head ) ) ; if ( ++ head > size ) head = 0 ; writew ( head <S2SV_ModEnd> <S2SV_ModStart> out : "
1093,<S2SV_StartBug> OPCODE_DESC * opcode_desc ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len < 2 ) { return NULL ; } 
1094,<S2SV_StartBug> ACPI_FUNCTION_TRACE ( ns_terminate ) ; <S2SV_EndBug> <S2SV_StartBug> union acpi_operand_object * next ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; ACPI_FUNCTION_TRACE ( ns_terminate ) <S2SV_ModStart>  <S2SV_ModEnd> 
1095,<S2SV_StartBug> data -> l_head = NULL ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( data , 0 , sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> "
1096,"<S2SV_StartBug> strcpy ( the_url , url_arg ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! e ) strcpy ( the_url , gf_dm_sess_get_cache_name ( sess ) ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( the_url , ""MP4Client<S2SV_blank>"" GPAC_FULL_VERSION ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { fprintf ( stderr , ""Input<S2SV_blank>url<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long,<S2SV_blank>truncating<S2SV_blank>to<S2SV_blank>%d<S2SV_blank>chars.\\n"" , url_arg , ( int ) ( sizeof ( the_url ) - 1 ) ) ; strncpy ( the_url , url_arg , sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 ; } else { <S2SV_ModStart> } <S2SV_ModStart> { strncpy <S2SV_ModEnd> <S2SV_ModStart> , sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_cfg ) - 1 ] = 0 ; } <S2SV_ModEnd> <S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> , sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 <S2SV_ModEnd> "
1097,"<S2SV_StartBug> int i , result ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1098,"<S2SV_StartBug> . match_data . cmp = type -> match , <S2SV_EndBug> ",<S2SV_ModStart> key_default_cmp <S2SV_ModEnd> 
1099,"<S2SV_StartBug> struct vpx_codec_alg_priv * priv ; <S2SV_EndBug> <S2SV_StartBug> priv = calloc ( 1 , sizeof ( struct vpx_codec_alg_priv ) ) ; <S2SV_EndBug> <S2SV_StartBug> ctx -> priv = & priv -> base ; <S2SV_EndBug> <S2SV_StartBug> ctx -> priv -> alg_priv -> cfg = * ctx -> config . enc ; <S2SV_EndBug> <S2SV_StartBug> ctx -> config . enc = & ctx -> priv -> alg_priv -> cfg ; <S2SV_EndBug> <S2SV_StartBug> priv -> vp8_cfg = extracfg_map [ i ] . cfg ; <S2SV_EndBug> <S2SV_StartBug> set_vp8e_config ( & ctx -> priv -> alg_priv -> oxcf , <S2SV_EndBug> <S2SV_StartBug> ctx -> priv -> alg_priv -> cfg , <S2SV_EndBug> <S2SV_StartBug> optr = vp8_create_compressor ( & ctx -> priv -> alg_priv -> oxcf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! optr ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> ","<S2SV_ModStart> vp8_rtcd ( ) ; vpx_dsp_rtcd ( ) ; vpx_scale_rtcd ( ) ; if ( ! ctx -> priv ) { <S2SV_ModStart> = <S2SV_ModEnd> <S2SV_ModStart> * ) vpx_calloc ( 1 , sizeof ( * priv <S2SV_ModStart> ( vpx_codec_priv_t * ) <S2SV_ModEnd> <S2SV_ModStart> priv <S2SV_ModEnd> <S2SV_ModStart> priv -> cfg ; } <S2SV_ModEnd> <S2SV_ModStart> default_extracfg <S2SV_ModEnd> <S2SV_ModStart> priv <S2SV_ModEnd> <S2SV_ModStart> priv -> cfg , priv <S2SV_ModEnd> <S2SV_ModStart> priv -> cpi <S2SV_ModEnd> <S2SV_ModStart> priv <S2SV_ModEnd> <S2SV_ModStart> priv -> cpi <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1100,"<S2SV_StartBug> error = xfs_da_shrink_inode ( args , 0 , bp ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( bp && ( <S2SV_ModEnd> <S2SV_ModStart> != 0 ) <S2SV_ModEnd> 
1101,"<S2SV_StartBug> if ( ( ret = s -> decode ( gb , rc , cumfr , cnt_c , totfr ) ) < 0 ) <S2SV_EndBug> ",<S2SV_ModStart> x >= 16 || c >= 256 ) { return AVERROR_INVALIDDATA ; } if ( 
1102,"<S2SV_StartBug> list_for_each_entry_safe ( slave , tmp , & timeri -> slave_list_head , <S2SV_EndBug> <S2SV_StartBug> spin_lock_irq ( & slave_active_lock ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irq ( & slave_active_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> spin_lock_irq ( & slave_active_lock ) ; spin_lock ( & timer -> lock ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> list_del_init ( & slave -> ack_list ) ; list_del_init ( & slave -> active_list ) ; } spin_unlock ( & timer -> lock ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
1103,"<S2SV_StartBug> err = nla_parse_nested ( sock , TIPC_NLA_SOCK_MAX , <S2SV_EndBug> <S2SV_StartBug> attrs [ TIPC_NLA_SOCK ] , <S2SV_EndBug> <S2SV_StartBug> tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; <S2SV_EndBug> <S2SV_StartBug> lock_sock ( & tsk -> sk ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> err = nla_parse_nested ( sock , TIPC_NLA_SOCK_MAX , attrs [ TIPC_NLA_SOCK ] , tipc_nl_sock_policy ) ; if ( err ) return err ; if ( ! sock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; } if ( done ) return 0 ; tsk = tipc_sk_lookup ( net , tsk_portid ) ; if ( ! tsk ) return - EINVAL ; "
1104,"<S2SV_StartBug> vpx_memset ( ( void * ) ctx -> fragments . ptrs , 0 , sizeof ( ctx -> fragments . ptrs ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ctx -> fragments . sizes , 0 , sizeof ( ctx -> fragments . sizes ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ctx -> fragments . enabled ) <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> && ( data == NULL && data_sz == 0 ) ) { return 0 ; } if ( ! ctx -> fragments . enabled 
1105,"<S2SV_StartBug> vma_stop ( priv , vma ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! IS_ERR ( vma ) ) 
1106,<S2SV_StartBug> length = cap -> bLength ; <S2SV_EndBug> ,<S2SV_ModStart> if ( total_len < sizeof ( * cap ) || total_len < <S2SV_ModEnd> <S2SV_ModStart> ) { dev -> bos -> desc -> bNumDeviceCaps = i ; break ; } length = cap -> bLength <S2SV_ModEnd> 
1107,<S2SV_StartBug> struct task_struct * task = current ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1108,<S2SV_StartBug> switch ( fe -> icbTag . fileType ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { if ( iinfo -> i_lenAlloc != inode -> i_size ) goto out ; if ( inode -> i_size > inode -> i_sb -> s_blocksize - udf_file_entry_alloc_offset ( inode ) ) goto out ; } 
1109,"<S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MIREGADR , address & REG_ADDR_MASK ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MIWRL , LSB ( data ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MIWRH , MSB ( data ) ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( enc28j60ReadReg ( interface , ENC28J60_REG_MISTAT ) & MISTAT_BUSY ) != 0 ) <S2SV_EndBug> ",<S2SV_ModStart> ENC28J60_MIREGADR <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_MIWRL <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_MIWRH <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> 
1110,<S2SV_StartBug> static int bad_format_imginfo ( <S2SV_EndBug> <S2SV_StartBug> char * ptr ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return bad_format_check ( ""^"" SAFE_STRING ""%s"" SAFE_STRING ""%lu"" SAFE_STRING ""%lu"" SAFE_STRING ""$"" , fmt <S2SV_ModEnd> "
1111,<S2SV_StartBug> kfree ( inet -> opt ) ; <S2SV_EndBug> ,"<S2SV_ModStart> rcu_dereference_protected ( inet -> inet_opt , 1 ) <S2SV_ModEnd> "
1112,<S2SV_StartBug> if ( likely ( walk . nbytes == nbytes ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1113,<S2SV_StartBug> if ( ! saw_digit ) <S2SV_EndBug> <S2SV_StartBug> goto invalid ; <S2SV_EndBug> <S2SV_StartBug> if ( * bp != '\\r' ) <S2SV_EndBug> <S2SV_StartBug> goto invalid ; <S2SV_EndBug> <S2SV_StartBug> if ( * bp != '\\n' ) <S2SV_EndBug> <S2SV_StartBug> goto invalid ; <S2SV_EndBug> <S2SV_StartBug> return ( - 2 ) ; <S2SV_EndBug> <S2SV_StartBug> return ( - 5 ) ; <S2SV_EndBug> ,<S2SV_ModStart> { bp ++ ; <S2SV_ModStart> } <S2SV_ModStart> { bp ++ ; <S2SV_ModStart> } <S2SV_ModStart> { bp ++ ; <S2SV_ModStart> } <S2SV_ModStart> * endp = bp ; <S2SV_ModStart> * endp = bp ; 
1114,<S2SV_StartBug> args -> valuelen = be32_to_cpu ( name_rmt -> valuelen ) ; <S2SV_EndBug> <S2SV_StartBug> args -> valuelen ) ; <S2SV_EndBug> ,<S2SV_ModStart> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rmtvaluelen <S2SV_ModEnd> 
1115,<S2SV_StartBug> # endif <S2SV_EndBug> ,"<S2SV_ModStart> UtRegisterTest ( ""DefragTestBadProto"" , DefragTestBadProto ) ; "
1116,<S2SV_StartBug> if ( object_data ) { <S2SV_EndBug> ,"<S2SV_ModStart> coolkey_find_object_by_id ( & priv -> objects_list , object_id ) != NULL ) { return SC_ERROR_INTERNAL ; } if ( "
1117,<S2SV_StartBug> char key [ 32 ] = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> if ( vdaux < 1 || vstart + vdaux < vstart ) { <S2SV_EndBug> <S2SV_StartBug> vstart += vdaux ; <S2SV_EndBug> <S2SV_StartBug> if ( vstart > end || vstart + sizeof ( Elf_ ( Verdaux ) ) > end ) { <S2SV_EndBug> ,<S2SV_ModStart> size_t vstart_off = i ; <S2SV_ModStart> shdr -> sh_size - vstart_off < vdaux <S2SV_ModEnd> <S2SV_ModStart> += vdaux ; vstart_off <S2SV_ModStart> vstart_off += aux . vda_next ; 
1118,"<S2SV_StartBug> separator = strchr ( token , '=' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> 
1119,"<S2SV_StartBug> if ( j >= length ) return - 1 ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( cp , packet + j , label_len ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( j + label_len > length ) return - 1 ; 
1120,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( bps * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""fpAcc"" , ""%s"" , ""cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModStart> return 1 ; "
1121,"<S2SV_StartBug> if ( vma -> vm_ops ) { <S2SV_EndBug> <S2SV_StartBug> pmd , flags , entry ) ; <S2SV_EndBug> <S2SV_StartBug> pte , pmd , flags ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pmd , flags , entry ) ; <S2SV_ModEnd> <S2SV_ModStart> pte , pmd , <S2SV_ModEnd> "
1122,"<S2SV_StartBug> char * r = pool_alloc ( strlen ( s ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( r , s ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> len ) ; memcpy <S2SV_ModEnd> <S2SV_ModStart> , len "
1123,<S2SV_StartBug> if ( key_is_instantiated ( key ) ) <S2SV_EndBug> ,<S2SV_ModStart> key_is_positive <S2SV_ModEnd> 
1124,"<S2SV_StartBug> if ( ! new_idmap_permitted ( ns , cap_setid , & new_map ) ) <S2SV_EndBug> ","<S2SV_ModStart> file , "
1125,"<S2SV_StartBug> sdb_set ( s , ""DW_AT_comp_dir"" , name , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> if ( name > 1024 ) { <S2SV_ModStart> else { eprintf ( ""Invalid<S2SV_blank>string<S2SV_blank>pointer<S2SV_blank>at<S2SV_blank>%p\\n"" , name ) ; } } "
1126,<S2SV_StartBug> p_enc -> fmt_out . p_extra = malloc ( len + sizeof ( eos ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len > UINT32_MAX - sizeof ( eos ) ) return NULL ; 
1127,"<S2SV_StartBug> char * fname = talloc_size ( mf , strlen ( filename ) + 32 ) ; <S2SV_EndBug> <S2SV_StartBug> mp_info ( log , ""search<S2SV_blank>expr:<S2SV_blank>%s\\n"" , filename ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( fname , filename , count ++ ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t fname_avail = <S2SV_ModEnd> <S2SV_ModStart> ; char * fname = talloc_size ( mf , fname_avail <S2SV_ModStart> const char * f = filename ; int MAXDIGS = 3 , nspec = 0 , bad_spec = 0 , c ; while ( nspec < 2 && ( c = * f ++ ) ) { if ( c != '%' ) continue ; if ( * f != '%' ) { nspec ++ ; if ( * f == '.' ) f ++ ; for ( int ndig = 0 ; mp_isdigit ( * f ) && ndig < MAXDIGS ; ndig ++ , f ++ ) ; if ( * f != 'd' ) { bad_spec ++ ; break ; } } f ++ ; } if ( bad_spec || nspec != 1 ) { mp_err ( log , ""unsupported<S2SV_blank>expr<S2SV_blank>format:<S2SV_blank>\'%s\'\\n"" , filename ) ; goto exit_mf ; } <S2SV_ModStart> if ( snprintf ( fname , fname_avail <S2SV_ModEnd> <S2SV_ModStart> >= fname_avail ) { mp_err ( log , ""format<S2SV_blank>result<S2SV_blank>too<S2SV_blank>long:<S2SV_blank>\'%s\'\\n"" , filename ) ; goto exit_mf ; } <S2SV_ModEnd> "
1128,"<S2SV_StartBug> cp += advance ; <S2SV_EndBug> <S2SV_StartBug> nh = * cp ; <S2SV_EndBug> <S2SV_StartBug> advance = rt6_print ( ndo , cp , ( const u_char * ) ip6 ) ; <S2SV_EndBug> <S2SV_StartBug> nh = * cp ; <S2SV_EndBug> <S2SV_StartBug> advance = ah_print ( ndo , cp ) ; <S2SV_EndBug> <S2SV_StartBug> nh = enh & 0xff ; <S2SV_EndBug> ",<S2SV_ModStart> if ( len < ( u_int ) advance ) goto trunc ; <S2SV_ModStart> if ( advance < 0 ) return ; <S2SV_ModStart> ND_TCHECK ( * cp ) ; <S2SV_ModStart> if ( advance < 0 ) return ; <S2SV_ModStart> ; if ( advance < 0 ) return <S2SV_ModStart> if ( advance < 0 ) return ; 
1129,"<S2SV_StartBug> uint32 num_properties = GETINT32 ( buf + idx ) ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < ( a -> names [ i ] . len >> 1 ) ; j ++ ) <S2SV_EndBug> <S2SV_StartBug> if ( a -> type == szMAPI_UNICODE_STRING ) <S2SV_EndBug> <S2SV_StartBug> v -> data . buf = ( unsigned char * ) unicode_to_utf8 ( v -> len , buf + idx ) ; <S2SV_EndBug> ",<S2SV_ModStart> ) ; assert ( ( num_properties + 1 ) != 0 <S2SV_ModStart> assert ( ( idx + ( a -> names [ i ] . len * 2 ) ) <= len ) ; <S2SV_ModStart> assert ( v -> len + idx <= len ) ; <S2SV_ModStart> assert ( v -> len != 0 ) ; 
1130,<S2SV_StartBug> switch ( fe -> icbTag . fileType ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { if ( iinfo -> i_lenAlloc != inode -> i_size ) goto out ; if ( inode -> i_size > inode -> i_sb -> s_blocksize - udf_file_entry_alloc_offset ( inode ) ) goto out ; } 
1131,"<S2SV_StartBug> vma = find_vma_prev ( mm , start , & prev ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! mmget_still_valid ( mm ) ) goto out_unlock ; 
1132,"<S2SV_StartBug> act = vp8_variance16x16 ( x -> src . y_buffer , <S2SV_EndBug> ",<S2SV_ModStart> ( void ) cpi ; act = vpx_variance16x16 <S2SV_ModEnd> 
1133,"<S2SV_StartBug> strcat ( t1_buf_array , t1_line_array ) ; <S2SV_EndBug> ","<S2SV_ModStart> alloc_array ( t1_buf , strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE ) ; <S2SV_ModStart> ) ; alloc_array ( t1_line , strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE "
1134,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> if ( data ) { <S2SV_EndBug> <S2SV_StartBug> vp9_get_reference_dec ( ctx -> pbi , data -> idx , & fb ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ctx -> frame_parallel_decode ) { set_error_detail ( ctx , ""Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode"" ) ; return VPX_CODEC_INCAPABLE ; } if ( <S2SV_ModStart> VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; fb = get_ref_frame ( & frame_worker_data -> pbi -> common <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( fb == NULL ) return VPX_CODEC_ERROR <S2SV_ModEnd> "
1135,"<S2SV_StartBug> ops -> get_msr ( ctxt , MSR_EFER , & efer ) ; <S2SV_EndBug> <S2SV_StartBug> setup_syscalls_segments ( ctxt , & cs , & ss ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! ( em_syscall_is_enabled ( ctxt ) ) ) return emulate_ud ( ctxt ) ; <S2SV_ModStart> ) ; if ( ! ( efer & EFER_SCE ) ) return emulate_ud ( ctxt 
1136,<S2SV_StartBug> data_ref = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> if ( length > end - start ) return AVERROR_INVALIDDATA ; 
1137,"<S2SV_StartBug> if ( NCH ( n ) == 1 ) { <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> REQ ( CHILD ( n , 1 ) , EQUAL ) ; <S2SV_EndBug> <S2SV_StartBug> targets = _Py_asdl_seq_new ( NCH ( n ) / 2 , c -> c_arena ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < NCH ( n ) - 2 ; i += 2 ) { <S2SV_EndBug> <S2SV_StartBug> value = CHILD ( n , NCH ( n ) - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> return Assign ( targets , expression , LINENO ( n ) , n -> n_col_offset , <S2SV_EndBug> ","<S2SV_ModStart> int num = <S2SV_ModEnd> <S2SV_ModStart> ; if ( num <S2SV_ModStart> , nch_minus_type , has_type_comment <S2SV_ModStart> string type_comment ; <S2SV_ModStart> has_type_comment = TYPE ( CHILD ( n , num - 1 ) ) == TYPE_COMMENT ; nch_minus_type = num - has_type_comment ; <S2SV_ModStart> nch_minus_type <S2SV_ModEnd> <S2SV_ModStart> nch_minus_type <S2SV_ModEnd> <S2SV_ModStart> nch_minus_type <S2SV_ModEnd> <S2SV_ModStart> if ( has_type_comment ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n , nch_minus_type ) ) ; if ( ! type_comment ) return NULL ; } else type_comment = NULL ; <S2SV_ModStart> type_comment , "
1138,"<S2SV_StartBug> int vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG * mc_running_avg , <S2SV_EndBug> <S2SV_StartBug> unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; <S2SV_EndBug> <S2SV_StartBug> unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; <S2SV_EndBug> <S2SV_StartBug> int r , c , i ; <S2SV_EndBug> <S2SV_StartBug> int adj_val [ 3 ] = { 3 , 4 , 6 } ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 3 ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> if ( absdiff <= 3 ) <S2SV_EndBug> <S2SV_StartBug> sum_diff += diff ; <S2SV_EndBug> <S2SV_StartBug> if ( absdiff >= 4 && absdiff <= 7 ) <S2SV_EndBug> <S2SV_StartBug> sum_diff += adjustment ; <S2SV_EndBug> <S2SV_StartBug> running_avg_y [ c ] = sig [ c ] - adjustment ; <S2SV_EndBug> <S2SV_StartBug> if ( abs ( sum_diff ) > SUM_DIFF_THRESHOLD ) <S2SV_EndBug> <S2SV_StartBug> vp8_copy_mem16x16 ( running_avg -> y_buffer + y_offset , avg_y_stride , <S2SV_EndBug> <S2SV_StartBug> signal -> thismb , sig_stride ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , int mc_avg_y_stride , <S2SV_ModEnd> <S2SV_ModStart> , int avg_y_stride , unsigned char * sig , int sig_stride , unsigned int motion_magnitude , int increase_denoising ) { unsigned char * running_avg_y_start = running_avg_y ; unsigned char * sig_start = sig ; int sum_diff_thresh <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } ; int shift_inc1 = 0 ; int shift_inc2 = 1 ; int col_sum [ 16 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 <S2SV_ModStart> if ( increase_denoising ) { shift_inc1 = 1 ; shift_inc2 = 2 ; } adj_val [ 0 ] += shift_inc2 ; adj_val [ 1 ] += shift_inc2 ; adj_val [ 2 ] += shift_inc2 <S2SV_ModEnd> <S2SV_ModStart> + shift_inc1 <S2SV_ModStart> col_sum [ c ] <S2SV_ModEnd> <S2SV_ModStart> + shift_inc1 <S2SV_ModStart> col_sum [ c ] += adjustment ; } else { if ( ( sig [ c ] - adjustment ) < 0 ) running_avg_y [ c ] = 0 ; else running_avg_y [ c ] = sig [ c ] - adjustment ; col_sum [ c ] -= adjustment ; } } } sig += sig_stride ; mc_running_avg_y += mc_avg_y_stride ; running_avg_y += avg_y_stride ; } for ( c = 0 ; c < 16 ; ++ c ) { if ( col_sum [ c ] >= 128 ) { col_sum [ c ] = 127 ; } sum_diff += col_sum [ c ] ; } sum_diff_thresh = SUM_DIFF_THRESHOLD ; if ( increase_denoising ) sum_diff_thresh = SUM_DIFF_THRESHOLD_HIGH ; if ( abs ( sum_diff ) > sum_diff_thresh ) { int delta = ( ( abs ( sum_diff ) - sum_diff_thresh ) >> 8 ) + 1 ; if ( delta < 4 ) { sig -= sig_stride * 16 ; mc_running_avg_y -= mc_avg_y_stride * 16 ; running_avg_y -= avg_y_stride * 16 ; for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y <S2SV_ModEnd> <S2SV_ModStart> sig [ c ] ; int adjustment = abs ( diff ) ; if ( adjustment > delta ) adjustment = delta ; if ( diff > 0 ) { if ( running_avg_y [ c ] - adjustment < 0 ) running_avg_y [ c ] = 0 ; else running_avg_y [ c ] = running_avg_y [ c ] - adjustment ; col_sum [ c ] -= adjustment ; } else if ( diff < 0 ) { if ( running_avg_y [ c ] + adjustment > 255 ) running_avg_y [ c ] = 255 ; else running_avg_y [ c ] = running_avg_y [ c ] + adjustment ; col_sum [ c ] += adjustment ; } } sig += sig_stride ; mc_running_avg_y += mc_avg_y_stride ; running_avg_y += avg_y_stride ; } sum_diff = 0 ; for ( c = 0 ; c < 16 ; ++ c ) { if ( col_sum [ c ] >= 128 ) { col_sum [ c ] = 127 ; } sum_diff += col_sum [ c ] <S2SV_ModEnd> <S2SV_ModStart> sum_diff_thresh <S2SV_ModEnd> <S2SV_ModStart> } else { return COPY_BLOCK ; } } vp8_copy_mem16x16 ( running_avg_y_start <S2SV_ModEnd> <S2SV_ModStart> sig_start <S2SV_ModEnd> "
1139,"<S2SV_StartBug> Ns_Log ( Dev , ""===<S2SV_blank>length<S2SV_blank><<S2SV_blank>avail<S2SV_blank>(length<S2SV_blank>%"" PRIuz <S2SV_EndBug> <S2SV_StartBug> bool complete ; <S2SV_EndBug> <S2SV_StartBug> complete = ChunkedDecode ( reqPtr , NS_TRUE ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ! complete ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> Debug <S2SV_ModEnd> <S2SV_ModStart> SockState chunkState <S2SV_ModEnd> <S2SV_ModStart> chunkState <S2SV_ModEnd> <S2SV_ModStart> chunkState == SOCK_MORE <S2SV_ModEnd> <S2SV_ModStart> else if ( chunkState != SOCK_READY ) { return chunkState ; } 
1140,<S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( ! access_ok ( VERIFY_READ , uregs , sizeof ( elf_xtregs_t ) ) ) return - EFAULT "
1141,<S2SV_StartBug> message -> srcIpAddr = queueItem -> srcIpAddr ; <S2SV_EndBug> ,<S2SV_ModStart> interface = queueItem -> interface ; message -> 
1142,<S2SV_StartBug> struct se_device * remote_dev ; <S2SV_EndBug> <S2SV_StartBug> remote_dev = xop -> dst_dev ; <S2SV_EndBug> <S2SV_StartBug> remote_dev = xop -> src_dev ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pr_debug ( ""putting<S2SV_blank>dst<S2SV_blank>lun_ref<S2SV_blank>for<S2SV_blank>%p\\n"" , <S2SV_ModEnd> <S2SV_ModStart> ) ; else pr_debug ( ""putting<S2SV_blank>src<S2SV_blank>lun_ref<S2SV_blank>for<S2SV_blank>%p\\n"" , <S2SV_ModEnd> <S2SV_ModStart> ) ; percpu_ref_put ( xop -> remote_lun_ref <S2SV_ModEnd> "
1143,"<S2SV_StartBug> err ( ndp , ""Failed<S2SV_blank>to<S2SV_blank>setsockopt<S2SV_blank>IPV6_MULTICAST_HOPS."" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock , IPPROTO_IPV6 , IPV6_RECVHOPLIMIT , & val , sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp , ""Failed<S2SV_blank>to<S2SV_blank>setsockopt<S2SV_blank>IPV6_RECVHOPLIMIT,."" "
1144,<S2SV_StartBug> if ( header ) { <S2SV_EndBug> <S2SV_StartBug> ext2_xattr_cache_insert ( new_bh ) ; <S2SV_EndBug> <S2SV_StartBug> ext2_xattr_cache_insert ( new_bh ) ; <S2SV_EndBug> <S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> if ( ce ) <S2SV_EndBug> <S2SV_StartBug> if ( ce ) <S2SV_EndBug> ,"<S2SV_ModStart> struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache ; <S2SV_ModStart> ext2_mb_cache , <S2SV_ModStart> ext2_mb_cache , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> __u32 hash = le32_to_cpu ( HDR ( old_bh ) -> h_hash ) ; mb2_cache_entry_delete_block ( ext2_mb_cache , hash , old_bh -> b_blocknr <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1145,"<S2SV_StartBug> snprintf ( rcomp . type , CRYPTO_MAX_ALG_NAME , ""%s"" , ""compression"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> ""compression"" , sizeof ( rcomp . type ) <S2SV_ModEnd> "
1146,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_set_active_map ( ctx -> cpi , map -> active_map , map -> rows , map -> cols ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( int ) <S2SV_ModStart> ( int ) 
1147,"<S2SV_StartBug> rc = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( rc ) return rc ; inode -> i_ctime = CURRENT_TIME ; mark_inode_dirty ( inode ) ; } break ; case ACL_TYPE_DEFAULT : ea_name = XATTR_NAME_POSIX_ACL_DEFAULT ; break ; default : return - EINVAL ; } if ( acl ) { size = posix_acl_xattr_size ( acl -> a_count ) ; value = kmalloc ( size , GFP_KERNEL ) ; if ( ! value ) return - ENOMEM ; rc = posix_acl_to_xattr ( & init_user_ns , acl , value , size <S2SV_ModStart>  <S2SV_ModEnd> "
1148,<S2SV_StartBug> DestroyImage ( RemoveFirstImageFromList ( & image ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( GetNextImageInList ( image ) != ( Image * ) NULL ) 
1149,"<S2SV_StartBug> task_event -> event_id . header . size , 0 , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1150,<S2SV_StartBug> size_t maxlen = 3 * len ; <S2SV_EndBug> ,<S2SV_ModStart> + 8 
1151,<S2SV_StartBug> SEPARATE_ZVAL ( ( var ) ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_long ( * var ) ; <S2SV_EndBug> <S2SV_StartBug> points [ i ] . x = Z_LVAL_PP ( var ) ; <S2SV_EndBug> <S2SV_StartBug> SEPARATE_ZVAL ( var ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_long ( * var ) ; <S2SV_EndBug> <S2SV_StartBug> points [ i ] . y = Z_LVAL_PP ( var ) ; <S2SV_EndBug> <S2SV_StartBug> if ( filled ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( Z_TYPE_PP ( var ) != IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> <S2SV_ModStart> & lval <S2SV_ModEnd> <S2SV_ModStart> Z_LVAL ( lval ) ; } else { points [ i ] . x = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( var ) != IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> <S2SV_ModStart> & lval <S2SV_ModEnd> <S2SV_ModStart> Z_LVAL ( lval ) ; } else { points [ i ] . y = <S2SV_ModStart> } 
1152,<S2SV_StartBug> sig_none = ( timr -> it_sigev_notify & ~ SIGEV_THREAD_ID ) == SIGEV_NONE ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1153,"<S2SV_StartBug> imbuf = ( unsigned char * ) AcquireQuantumMemory ( imsx * imsy , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( imbuf , background_color_index , imsx * imsy ) ; <S2SV_EndBug> <S2SV_StartBug> dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( dmbuf , background_color_index , dmsx * dmsy ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) CopyMagickMemory ( dmbuf + dmsx * y , imbuf + imsx * y , imsx ) ; <S2SV_EndBug> <S2SV_StartBug> dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( dmbuf , background_color_index , dmsx * dmsy ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) CopyMagickMemory ( dmbuf + dmsx * y , imbuf + imsx * y , imsx ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( imbuf + imsx * y + posision_x , color_index , repeat_count ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ) == NULL ) { <S2SV_EndBug> ","<S2SV_ModStart> , imsy <S2SV_ModEnd> <S2SV_ModStart> ( size_t ) <S2SV_ModStart> , dmsy <S2SV_ModEnd> <S2SV_ModStart> ( size_t ) <S2SV_ModStart> ( size_t ) <S2SV_ModStart> , dmsy <S2SV_ModEnd> <S2SV_ModStart> ( size_t ) <S2SV_ModStart> ( size_t ) <S2SV_ModStart> ( size_t ) <S2SV_ModStart> , dmsy <S2SV_ModEnd> "
1154,"<S2SV_StartBug> strcat ( t1_buf_array , t1_line_array ) ; <S2SV_EndBug> ","<S2SV_ModStart> alloc_array ( t1_buf , strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE ) ; <S2SV_ModStart> ) ; alloc_array ( t1_line , strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE "
1155,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> vpx_ref_frame_t * data = va_arg ( args , vpx_ref_frame_t * ) ; <S2SV_EndBug> <S2SV_StartBug> image2yuvconfig ( & frame -> img , & sd ) ; <S2SV_EndBug> <S2SV_StartBug> return vp9_copy_reference_dec ( ctx -> pbi , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ctx -> frame_parallel_decode ) { set_error_detail ( ctx , ""Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode"" ) ; return VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> frame_worker_data <S2SV_ModEnd> "
1156,"<S2SV_StartBug> pop3c -> mailbox = curl_easy_unescape ( data , path , 0 , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! pop3c -> mailbox ) <S2SV_EndBug> ","<S2SV_ModStart> return Curl_urldecode <S2SV_ModEnd> <S2SV_ModStart> & <S2SV_ModEnd> <S2SV_ModStart> , NULL , TRUE ) <S2SV_ModEnd> "
1157,<S2SV_StartBug> facilities_len -= len + 1 ; <S2SV_EndBug> <S2SV_StartBug> facilities_len -= len + 1 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len < 0 ) return 0 ; <S2SV_ModStart> if ( len < 0 ) return 0 ; 
1158,<S2SV_StartBug> sh -> first_slice_in_pic_flag = get_bits1 ( gb ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx , AV_LOG_ERROR , ""Two<S2SV_blank>slices<S2SV_blank>reporting<S2SV_blank>being<S2SV_blank>the<S2SV_blank>first<S2SV_blank>in<S2SV_blank>the<S2SV_blank>same<S2SV_blank>frame.\\n"" ) ; return 1 ; } "
1159,<S2SV_StartBug> ps_dec -> ps_cur_slice -> u1_bottom_field_flag = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1160,<S2SV_StartBug> UWORD32 u4_x_dst_offset = 0 ; <S2SV_EndBug> <S2SV_StartBug> impeg2d_dec_pnb_mb_params ( ps_dec ) ; <S2SV_EndBug> <S2SV_StartBug> impeg2d_dec_p_mb_params ( ps_dec ) ; <S2SV_EndBug> ,<S2SV_ModStart> WORD32 ret ; <S2SV_ModStart> ret = <S2SV_ModStart> ret = <S2SV_ModStart> ; if ( ret ) return IMPEG2D_MB_TEX_DECODE_ERR 
1161,<S2SV_StartBug> const YV12_BUFFER_CONFIG * const cfg = <S2SV_EndBug> <S2SV_StartBug> & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] . buf ; <S2SV_EndBug> ,"<S2SV_ModStart> get_ref_frame ( cm , 0 ) ; if ( cfg == NULL ) { vpx_internal_error ( <S2SV_ModStart> error , VPX_CODEC_ERROR , ""No<S2SV_blank>\'last\'<S2SV_blank>reference<S2SV_blank>frame"" ) ; return VPX_CODEC_ERROR ; } <S2SV_ModEnd> "
1162,<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> int rowstep ; <S2SV_EndBug> ,<S2SV_ModStart> jas_matind_t i ; jas_matind_t <S2SV_ModEnd> <S2SV_ModStart> jas_matind_t <S2SV_ModEnd> 
1163,<S2SV_StartBug> const TX_SIZE tx_size = plane ? get_uv_tx_size ( mbmi ) <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( xd -> mb_to_bottom_edge < 0 ) <S2SV_EndBug> <S2SV_StartBug> i = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( r = 0 ; r < num_4x4_h ; r += ( 1 << tx_size ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( r < max_blocks_high && c < max_blocks_wide ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> , pd <S2SV_ModStart> = 0 , r , c ; const int max_blocks_wide = num_4x4_w + <S2SV_ModEnd> <S2SV_ModStart> >= 0 ? 0 : <S2SV_ModEnd> <S2SV_ModStart> const int max_blocks_high = num_4x4_h + <S2SV_ModEnd> <S2SV_ModStart> >= 0 ? 0 : <S2SV_ModEnd> <S2SV_ModStart> const int extra_step = ( ( num_4x4_w - max_blocks_wide ) >> tx_size ) * step <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; r += ( 1 << tx_size ) ) { for ( c = 0 ; <S2SV_ModEnd> <S2SV_ModStart> ; c += ( 1 << tx_size ) ) { <S2SV_ModEnd> <S2SV_ModStart> i += extra_step <S2SV_ModEnd> "
1164,<S2SV_StartBug> mm -> mmap_legacy_base = mmap_legacy_base ( random_factor ) ; <S2SV_EndBug> ,<S2SV_ModStart> TASK_UNMAPPED_BASE + random_factor <S2SV_ModEnd> 
1165,<S2SV_StartBug> # if ! ( CONFIG_FAST_UNALIGNED ) <S2SV_EndBug> ,"<S2SV_ModStart> memcpy ( dst , src , 8 ) ; <S2SV_ModEnd> "
1166,"<S2SV_StartBug> case 'c' : return getnum ( L , fmt , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> int sz = getnum ( L , fmt , sizeof ( int ) ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1167,"<S2SV_StartBug> rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ; <S2SV_EndBug> <S2SV_StartBug> if ( buf == NULL ) <S2SV_EndBug> <S2SV_StartBug> ( ( row + img -> row_offset ) % rowsperstrip + nrow ) * scanline ) == ( tmsize_t ) ( - 1 ) <S2SV_EndBug> <S2SV_StartBug> p0 , ( ( row + img -> row_offset ) % rowsperstrip + nrow ) * scanline ) == ( tmsize_t ) ( - 1 ) <S2SV_EndBug> <S2SV_StartBug> p1 , ( ( row + img -> row_offset ) % rowsperstrip + nrow ) * scanline ) == ( tmsize_t ) ( - 1 ) <S2SV_EndBug> <S2SV_StartBug> p2 , ( ( row + img -> row_offset ) % rowsperstrip + nrow ) * scanline ) == ( tmsize_t ) ( - 1 ) <S2SV_EndBug> <S2SV_StartBug> pa , ( ( row + img -> row_offset ) % rowsperstrip + nrow ) * scanline ) == ( tmsize_t ) ( - 1 ) <S2SV_EndBug> ","<S2SV_ModStart> uint32 temp ; <S2SV_ModStart> temp = ( row + img -> row_offset ) % rowsperstrip + nrow ; if ( scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline ) ) { TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , ""Integer<S2SV_blank>overflow<S2SV_blank>in<S2SV_blank>gtStripSeparate"" ) ; return 0 ; } <S2SV_ModStart> temp <S2SV_ModEnd> <S2SV_ModStart> temp <S2SV_ModEnd> <S2SV_ModStart> temp <S2SV_ModEnd> <S2SV_ModStart> temp <S2SV_ModEnd> <S2SV_ModStart> temp <S2SV_ModEnd> "
1168,<S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug> ,<S2SV_ModStart> abort ( ) <S2SV_ModEnd> 
1169,<S2SV_StartBug> { if ( psf -> headindex < SIGNED_SIZEOF ( psf -> header ) - 2 ) <S2SV_EndBug> <S2SV_StartBug> { psf -> header [ psf -> headindex ++ ] = ( x >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = x ; <S2SV_EndBug> <S2SV_StartBug> } ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> . ptr [ <S2SV_ModEnd> <S2SV_ModStart> . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1170,<S2SV_StartBug> if ( upid == - 1 ) <S2SV_EndBug> ,<S2SV_ModStart> INT_MIN ) return - ESRCH ; if ( upid == 
1171,"<S2SV_StartBug> err = scm_send ( sock , msg , siocb -> scm ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false "
1172,<S2SV_StartBug> if ( num & ( 1 << ( number - 1 ) ) ) <S2SV_EndBug> ,<S2SV_ModStart> number && 
1173,"<S2SV_StartBug> const int w = vpx_img_plane_width ( img , plane ) ; <S2SV_EndBug> <S2SV_StartBug> if ( fread ( buf , 1 , w , file ) != w ) <S2SV_EndBug> ",<S2SV_ModStart> * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 ) <S2SV_ModStart> ( size_t ) 
1174,"<S2SV_StartBug> uint16_t attr_len ; <S2SV_EndBug> <S2SV_StartBug> if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { <S2SV_EndBug> <S2SV_StartBug> ntohs ( avp -> type ) , avp -> length ) ; <S2SV_EndBug> <S2SV_StartBug> attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; <S2SV_EndBug> ",<S2SV_ModStart> avp_len ; uint16_t <S2SV_ModStart> avp_len = avp -> flags & L2TP_AVP_LEN_MASK ; if ( avp_len <S2SV_ModEnd> <S2SV_ModStart> avp_len <S2SV_ModEnd> <S2SV_ModStart> avp_len <S2SV_ModEnd> 
1175,"<S2SV_StartBug> return __blkdev_driver_ioctl ( lc -> dev -> bdev , lc -> dev -> mode , cmd , arg ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct dm_dev * dev = lc -> dev ; int r = 0 ; if <S2SV_ModEnd> <S2SV_ModStart> start || ti -> len != i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL , cmd ) ; return r ? : __blkdev_driver_ioctl ( <S2SV_ModStart>  <S2SV_ModEnd> "
1176,<S2SV_StartBug> len -= POLY1305_BLOCK_SIZE ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len < POLY1305_BLOCK_SIZE ) return 0 ; 
1177,"<S2SV_StartBug> request_module ( ""%s"" , name ) ; <S2SV_EndBug> <S2SV_StartBug> request_module ( ""%s-all"" , name ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""crypto-%s"" <S2SV_ModEnd> <S2SV_ModStart> ""crypto-%s-all"" <S2SV_ModEnd> "
1178,"<S2SV_StartBug> comm_event -> event_id . header . size , 0 , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1179,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> unlink ( RUN_LIB_FILE ) ; 
1180,<S2SV_StartBug> if ( key_is_instantiated ( key ) ) <S2SV_EndBug> ,<S2SV_ModStart> key_is_positive <S2SV_ModEnd> 
1181,"<S2SV_StartBug> BT_DBG ( ""sock<S2SV_blank>%p,<S2SV_blank>sk<S2SV_blank>%p"" , sock , sk ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; memset ( sa , 0 , sizeof ( * sa ) "
1182,"<S2SV_StartBug> memcpy ( pass_salt , cpkt . data , cpkt . length ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( cpkt . length != 16 ) { fprintf ( stderr , _ ( ""Invalid<S2SV_blank>salt<S2SV_blank>length:<S2SV_blank>%d<S2SV_blank>(instead<S2SV_blank>of<S2SV_blank>16)<S2SV_blank>received<S2SV_blank>from<S2SV_blank>server<S2SV_blank>%s\\n"" ) , cpkt . length , ether_ntoa ( ( struct ether_addr * ) dstmac ) ) ; } <S2SV_ModStart> 16 <S2SV_ModEnd> "
1183,<S2SV_StartBug> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; <S2SV_EndBug> <S2SV_StartBug> if ( ses -> server -> sign ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1184,<S2SV_StartBug> goto err_close_conn ; <S2SV_EndBug> <S2SV_StartBug> goto err_close_conn ; <S2SV_EndBug> <S2SV_StartBug> goto err_close_conn ; <S2SV_EndBug> <S2SV_StartBug> goto err_close_conn ; <S2SV_EndBug> <S2SV_StartBug> # ifdef USE_SSL <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart> bail <S2SV_ModEnd> <S2SV_ModStart> bail <S2SV_ModEnd> <S2SV_ModStart> bail <S2SV_ModEnd> <S2SV_ModStart> bail <S2SV_ModEnd> <S2SV_ModStart> bail <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1185,"<S2SV_StartBug> strlcpy ( rkpp . type , ""kpp"" , sizeof ( rkpp . type ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> strncpy <S2SV_ModEnd> 
1186,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % stride ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""horDiff8"" , ""%s"" , ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> return 1 ; "
1187,<S2SV_StartBug> g -> head <= 0 || <S2SV_EndBug> ,<S2SV_ModStart> 0 || ( unsigned char ) ( ( g -> sect << 2 ) >> FD_SIZECODE ( g ) ) == 
1188,"<S2SV_StartBug> if ( recv ( gpsd_sock , line + pos , sizeof ( line ) - 1 , 0 ) <= 0 ) <S2SV_EndBug> ",<S2SV_ModStart> pos - 
1189,"<S2SV_StartBug> & clen , & remainder , & rlen ) ; <S2SV_EndBug> ","<S2SV_ModStart> , 0 "
1190,"<S2SV_StartBug> read_userfile ( ) ; <S2SV_EndBug> <S2SV_StartBug> md5data [ 0 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> strncpy ( md5data + 1 , user -> password , 82 ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( md5data + 1 + strlen ( user -> password ) , curconn -> pass_salt , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> md5_append ( & state , ( const md5_byte_t * ) md5data , strlen ( user -> password ) + 17 ) ; <S2SV_EndBug> ",<S2SV_ModStart> int act_pass_len ; <S2SV_ModStart> act_pass_len = strlen ( user -> password ) ; act_pass_len = act_pass_len <= 82 ? act_pass_len : 82 ; <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> act_pass_len <S2SV_ModEnd> <S2SV_ModStart> act_pass_len <S2SV_ModEnd> <S2SV_ModStart> 1 + act_pass_len + 16 <S2SV_ModEnd> 
1191,"<S2SV_StartBug> return mount_entry_on_generic ( mntent , path ) ; <S2SV_EndBug> ","<S2SV_ModStart> , rootfs -> mount "
1192,"<S2SV_StartBug> if ( PyUnicode_CompareWithASCIIString ( name , ""__debug__"" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( PyUnicode_CompareWithASCIIString ( name , * p ) == 0 ) { <S2SV_EndBug> ",<S2SV_ModStart> _PyUnicode_EqualToASCIIString <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> _PyUnicode_EqualToASCIIString <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1193,<S2SV_StartBug> if ( len <= 0 ) <S2SV_EndBug> <S2SV_StartBug> len -= bytes ; <S2SV_EndBug> ,<S2SV_ModStart> unsigned short prev_bi_vcnt = bio -> bi_vcnt ; <S2SV_ModStart> if ( bio -> bi_vcnt == prev_bi_vcnt ) put_page ( pages [ j ] ) ; 
1194,<S2SV_StartBug> assert ( numcolors <= RAS_CMAP_MAXSIZ ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> 
1195,"<S2SV_StartBug> const char * path = conn -> data -> state . path ; <S2SV_EndBug> <S2SV_StartBug> smtpc -> domain = curl_easy_unescape ( conn -> data , path , 0 , & len ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> result = Curl_urldecode ( conn -> data , path , 0 , & <S2SV_ModStart> , NULL , TRUE ) ; if ( result ) return result <S2SV_ModEnd> "
1196,"<S2SV_StartBug> strncpy ( str , ""ID:"" , len ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( str , jslGetTokenValueAsString ( ) , len ) ; <S2SV_EndBug> <S2SV_StartBug> strncpy ( str , ""String:\'"" , len ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( str , jslGetTokenValueAsString ( ) , len ) ; <S2SV_EndBug> ","<S2SV_ModStart> espruino_snprintf <S2SV_ModEnd> <S2SV_ModStart> len , ""ID:%s"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> espruino_snprintf <S2SV_ModEnd> <S2SV_ModStart> len , ""String:\'%s\'"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1197,"<S2SV_StartBug> for ( i = j = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++ , j ++ ) { <S2SV_EndBug> ",<S2SV_ModStart> j <S2SV_ModEnd> 
1198,<S2SV_StartBug> uchar buf [ 2 ] ; <S2SV_EndBug> ,<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
1199,<S2SV_StartBug> return sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ; <S2SV_EndBug> ,"<S2SV_ModStart> scat = & rm -> data . op_sg [ sg ] ; ret = <S2SV_ModEnd> <S2SV_ModStart> ; ret = min_t ( int , ret , scat -> length - conn -> c_xmit_data_off ) ; return ret "
1200,"<S2SV_StartBug> priv -> base = devm_ioremap ( & pdev -> dev , r -> start , resource_size ( r ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! r ) return - EINVAL ; 
1201,<S2SV_StartBug> return FALSE ; <S2SV_EndBug> ,<S2SV_ModStart> transport -> credssp = NULL ; 
1202,"
","
"
1203,"<S2SV_StartBug> r_cons_printf ( ""k<S2SV_blank>bin/pe/%s/%d=%s.%s\\n"" , <S2SV_EndBug> <S2SV_StartBug> r_cons_printf ( ""k<S2SV_blank>bin/pe/%s/%d=%s\\n"" , <S2SV_EndBug> ","<S2SV_ModStart> ""\\""k<S2SV_blank>bin/pe/%s/%d=%s.%s\\""\\n"" <S2SV_ModEnd> <S2SV_ModStart> ""\\""k<S2SV_blank>bin/pe/%s/%d=%s\\""\\n"" <S2SV_ModEnd> "
1204,"<S2SV_StartBug> status = decode_getacl ( xdr , rqstp , & res -> acl_len ) ; <S2SV_EndBug> ",<S2SV_ModStart> res <S2SV_ModEnd> 
1205,"<S2SV_StartBug> return mount_entry_on_generic ( mntent , mntent -> mnt_dir ) ; <S2SV_EndBug> ","<S2SV_ModStart> , NULL "
1206,<S2SV_StartBug> return Qnil ; <S2SV_EndBug> ,"<S2SV_ModStart> rb_ivar_set ( self , id_key_set , Qtrue ) ; "
1207,<S2SV_StartBug> return KRB5KDC_ERR_BADOPTION ; <S2SV_EndBug> <S2SV_StartBug> server_princ ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> * status = ""INVALID_S4U2PROXY_OPTIONS"" ; <S2SV_ModStart> * status = ""EVIDENCE_TICKET_MISMATCH"" ; "
1208,<S2SV_StartBug> thread -> tp_value = childregs -> ARM_r3 ; <S2SV_EndBug> ,<S2SV_ModStart> [ 0 ] <S2SV_ModStart> ; thread -> tp_value [ 1 ] = get_tpuser ( ) 
1209,<S2SV_StartBug> jas_stream_t * stream ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( stream = jas_stream_create ( ) ) ) { <S2SV_EndBug> <S2SV_StartBug> obj -> bufsize_ = 1024 ; <S2SV_EndBug> <S2SV_StartBug> obj -> bufsize_ = bufsize ; <S2SV_EndBug> <S2SV_StartBug> obj -> growable_ = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> char * new_buf ; size_t new_bufsize <S2SV_ModEnd> <S2SV_ModStart> bufsize < 0 ) { jas_deprecated ( ""negative<S2SV_blank>buffer<S2SV_blank>size<S2SV_blank>for<S2SV_blank>jas_stream_memopen"" ) ; } if ( buf && bufsize <= 0 ) { jas_eprintf ( ""Invalid<S2SV_blank>use<S2SV_blank>of<S2SV_blank>jas_stream_memopen<S2SV_blank>detected.\\n"" ) ; jas_deprecated ( ""A<S2SV_blank>user-provided<S2SV_blank>buffer<S2SV_blank>for<S2SV_blank>"" ""jas_stream_memopen<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>growable.\\n"" ) ; } <S2SV_ModEnd> <S2SV_ModStart> new_bufsize = 0 ; new_buf = 0 <S2SV_ModEnd> <S2SV_ModStart> new_bufsize <S2SV_ModEnd> <S2SV_ModStart> new_buf = buf ; } return jas_stream_memopen2 ( new_buf , new_bufsize ) <S2SV_ModEnd> "
1210,"<S2SV_StartBug> struct sshbuf * b ; <S2SV_EndBug> <S2SV_StartBug> char * pkalg , * userstyle = NULL , * key_s = NULL , * ca_s = NULL ; <S2SV_EndBug> <S2SV_StartBug> u_char * pkblob , * sig , have_sig ; <S2SV_EndBug> <S2SV_StartBug> if ( ! authctxt -> valid ) { <S2SV_EndBug> <S2SV_StartBug> __func__ , ssh_err ( r ) ) ; <S2SV_EndBug> <S2SV_StartBug> free ( sig ) ; <S2SV_EndBug> <S2SV_StartBug> fatal ( ""%s:<S2SV_blank>%s"" , __func__ , ssh_err ( r ) ) ; <S2SV_EndBug> <S2SV_StartBug> return authenticated ; <S2SV_EndBug> ","<S2SV_ModStart> = NULL <S2SV_ModStart> = NULL <S2SV_ModStart> = NULL <S2SV_ModStart> = NULL <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; } if ( ! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s:<S2SV_blank>disabled<S2SV_blank>because<S2SV_blank>of<S2SV_blank>invalid<S2SV_blank>user"" , __func__ ) ; goto done <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s:<S2SV_blank>disabled<S2SV_blank>because<S2SV_blank>of<S2SV_blank>invalid<S2SV_blank>user"" , __func__ ) ; goto done ; } <S2SV_ModStart> free ( sig ) ; "
1211,<S2SV_StartBug> uint32_t bcount ; <S2SV_EndBug> ,<S2SV_ModStart> ; CLEAR ( WaveHeader ) 
1212,<S2SV_StartBug> get_block = ocfs2_get_block ; <S2SV_EndBug> <S2SV_StartBug> get_block = ocfs2_dio_get_block ; <S2SV_EndBug> ,<S2SV_ModStart> ocfs2_lock_get_block <S2SV_ModEnd> <S2SV_ModStart> ocfs2_dio_wr_get_block <S2SV_ModEnd> 
1213,"<S2SV_StartBug> if ( ! gsasl_server_support_p ( ctx -> gsasl_ctx , mech ) ) { <S2SV_EndBug> ","<S2SV_ModStart> || ( ctx -> cb ) ( sx_sasl_cb_CHECK_MECH , ( void * ) mech , NULL , s , ctx -> cbarg ) != sx_sasl_ret_OK "
1214,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> return - EACCES ; 
1215,"<S2SV_StartBug> if ( CHECKOVERFLOW ( o , buf_size , 12 ) ) { <S2SV_EndBug> ","<S2SV_ModStart> memset ( & n -> entries [ tcount ] , 0 , sizeof ( MnoteFujiEntry ) ) ; "
1216,<S2SV_StartBug> sb -> s_op = & ext2_sops ; <S2SV_EndBug> <S2SV_StartBug> percpu_counter_destroy ( & sbi -> s_freeblocks_counter ) ; <S2SV_EndBug> ,"<S2SV_ModStart> # ifdef CONFIG_EXT2_FS_XATTR sbi -> s_mb_cache = ext2_xattr_create_cache ( ) ; if ( ! sbi -> s_mb_cache ) { ext2_msg ( sb , KERN_ERR , ""Failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>an<S2SV_blank>mb_cache"" ) ; goto failed_mount3 ; } # endif <S2SV_ModStart> if ( sbi -> s_mb_cache ) ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; "
1217,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( is_restricted_mode ( ) && ! btif_storage_is_restricted_device ( bd_addr ) ) return BT_STATUS_SUCCESS ; 
1218,<S2SV_StartBug> if ( len < tcp_hdrlen ) <S2SV_EndBug> <S2SV_StartBug> if ( skb_tailroom ( skb ) < TCPOLEN_MSS ) { <S2SV_EndBug> ,<S2SV_ModStart> || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> tcp_hdrlen >= 15 * 4 ) return 0 ; if ( 
1219,<S2SV_StartBug> if ( numrows < 0 || numcols < 0 ) { <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> matrix -> datasize_ = numrows * numcols ; <S2SV_EndBug> <S2SV_StartBug> jas_matrix_destroy ( matrix ) ; <S2SV_EndBug> <S2SV_StartBug> jas_matrix_destroy ( matrix ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> size_t size ; matrix = 0 ; <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> 0 ; if ( ! jas_safe_size_mul ( numrows , numcols , & size ) ) { goto error ; } matrix -> datasize_ = size <S2SV_ModEnd> <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> error : if ( matrix ) { jas_matrix_destroy ( matrix ) ; } return 0 ; "
1220,<S2SV_StartBug> ipv6_select_ident ( fh ) ; <S2SV_EndBug> <S2SV_StartBug> ipv6_select_ident ( fh ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , rt <S2SV_ModStart> , rt "
1221,"<S2SV_StartBug> ext4_xattr_cache_insert ( struct mb_cache * ext4_mb_cache , struct buffer_head * bh ) <S2SV_EndBug> <S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_alloc ( ext4_mb_cache , GFP_NOFS ) ; <S2SV_EndBug> <S2SV_StartBug> error = mb_cache_entry_insert ( ce , bh -> b_bdev , bh -> b_blocknr , hash ) ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_free ( ce ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error == - EBUSY ) { <S2SV_EndBug> <S2SV_StartBug> error = 0 ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_release ( ce ) ; <S2SV_EndBug> ","<S2SV_ModStart> mb2_cache <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> error = mb2_cache_entry_create <S2SV_ModEnd> <S2SV_ModStart> , hash , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1222,"<S2SV_StartBug> SCSIDiskReq * r ; <S2SV_EndBug> <S2SV_StartBug> r = DO_UPCAST ( SCSIDiskReq , req , req ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1223,<S2SV_StartBug> int avail ; <S2SV_EndBug> <S2SV_StartBug> avail = buf -> len - buf -> cursor ; <S2SV_EndBug> <S2SV_StartBug> if ( nxip < 0 || nxip > avail || expect > avail ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> TXID_SNAPSHOT_MAX_NXIP <S2SV_ModEnd> 
1224,<S2SV_StartBug> { if ( psf -> headindex < SIGNED_SIZEOF ( psf -> header ) - 3 ) <S2SV_EndBug> <S2SV_StartBug> { psf -> header [ psf -> headindex ++ ] = x ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 16 ) ; <S2SV_EndBug> <S2SV_StartBug> } ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> . ptr [ <S2SV_ModEnd> <S2SV_ModStart> . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1225,<S2SV_StartBug> if ( ret || cm_id -> device -> node_type != RDMA_NODE_IB_CA ) <S2SV_EndBug> ,<S2SV_ModStart> ! cm_id -> device || 
1226,<S2SV_StartBug> struct xfrm_policy_walk * walk = ( struct xfrm_policy_walk * ) & cb -> args [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> struct xfrm_dump_info info ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cb -> args [ 0 ] ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1227,"<S2SV_StartBug> epoll_t * epoll = _cast_epoll ( epoll_ ) ; <S2SV_EndBug> <S2SV_StartBug> if ( oe_syscall_write_ocall ( & ret , epoll -> host_fd , buf , count ) != OE_OK ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ",<S2SV_ModStart> file <S2SV_ModEnd> <S2SV_ModStart> ! file || count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( <S2SV_ModStart> file <S2SV_ModEnd> <S2SV_ModStart> if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } 
1228,<S2SV_StartBug> struct dentry * upper = ovl_dentry_upper ( dentry ) ; <S2SV_EndBug> <S2SV_StartBug> err = - ESTALE ; <S2SV_EndBug> <S2SV_StartBug> if ( upper -> d_parent == upperdir ) { <S2SV_EndBug> <S2SV_StartBug> dput ( upper ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> inode_unlock ( dir ) ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> upper = lookup_one_len ( dentry -> d_name . name , upperdir , dentry -> d_name . len ) ; err = PTR_ERR ( upper ) ; if ( IS_ERR ( upper ) ) goto out_unlock ; <S2SV_ModStart> == ovl_dentry_upper ( dentry ) ) { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> dput ( upper ) ; <S2SV_ModStart> out_unlock : "
1229,"<S2SV_StartBug> errstr = parse_global_option ( CMD_INITIALIZE , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * section_ptr == & new_service_options ) <S2SV_EndBug> ","<S2SV_ModStart> & new_global_options , <S2SV_ModStart>  <S2SV_ModEnd> "
1230,<S2SV_StartBug> if ( ! * ptrptr && ! ( nmemb && size ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1231,<S2SV_StartBug> if ( a -> name == MAPI_BODY_HTML ) <S2SV_EndBug> <S2SV_StartBug> else if ( a -> name == MAPI_RTF_COMPRESSED ) <S2SV_EndBug> ,<S2SV_ModStart> type == szMAPI_BINARY && a -> <S2SV_ModStart> a -> type == szMAPI_BINARY && 
1232,"<S2SV_StartBug> WritePixel ( i , & context , casspecial ) ; npix -- ; <S2SV_EndBug> <S2SV_StartBug> WritePixels ( i , & context , stackp , stack_top - stackp ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( npix > 0 ) <S2SV_ModStart> if ( npix >= ( <S2SV_ModEnd> <S2SV_ModStart> ) { WritePixels ( i , & context , stackp , stack_top - stackp ) ; } else if ( npix > 0 ) { WritePixels ( i , & context , stackp , npix ) ; } <S2SV_ModEnd> "
1233,<S2SV_StartBug> default : <S2SV_EndBug> ,<S2SV_ModStart> case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ; 
1234,"<S2SV_StartBug> jas_eprintf ( ""box<S2SV_blank>type<S2SV_blank>%s\\n"" , box -> info -> name ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""got<S2SV_blank>box<S2SV_blank>type<S2SV_blank>%s\\n"" <S2SV_ModEnd> "
1235,"
","
"
1236,"<S2SV_StartBug> err = synth_devs [ dev ] -> load_patch ( dev , fmt , buf , p + 4 , c , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> + p <S2SV_ModEnd> 
1237,<S2SV_StartBug> journal_t * journal = EXT4_JOURNAL ( page -> mapping -> host ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; if ( ext4_should_dioread_nolock ( page -> mapping -> host ) ) ext4_invalidatepage_free_endio ( page , offset "
1238,"<S2SV_StartBug> trak = gf_isom_get_track ( movie -> moov , i + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> GF_SAFEALLOC ( writer , TrackWriter ) ; <S2SV_EndBug> ",<S2SV_ModStart> GF_SampleTableBox * stbl ; <S2SV_ModStart> stbl = ( trak -> Media && trak -> Media -> information ) ? trak -> Media -> information -> sampleTable : NULL ; if ( ! stbl || ! stbl -> SampleSize || ! stbl -> ChunkOffset || ! stbl -> SampleToChunk ) { return GF_ISOM_INVALID_FILE ; } 
1239,"<S2SV_StartBug> static UINT32 nsc_rle_encode ( BYTE * in , BYTE * out , UINT32 originalSize ) <S2SV_EndBug> ",<S2SV_ModStart> const 
1240,"<S2SV_StartBug> int plen ; <S2SV_EndBug> <S2SV_StartBug> md5data [ 0 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> strncpy ( md5data + 1 , password , 82 ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( md5data + 1 + strlen ( password ) , pass_salt , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> md5_append ( & state , ( const md5_byte_t * ) md5data , strlen ( password ) + 17 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , act_pass_len <S2SV_ModStart> act_pass_len = strnlen ( password , 82 ) ; <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> act_pass_len ) <S2SV_ModEnd> <S2SV_ModStart> act_pass_len <S2SV_ModEnd> <S2SV_ModStart> 1 + act_pass_len + 16 <S2SV_ModEnd> "
1241,<S2SV_StartBug> void * dllhandle ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( COM_CompareExtension ( name , "".pk3"" ) ) { Com_Printf ( ""Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\""%s\\"""" , name ) ; return NULL ; } "
1242,<S2SV_StartBug> if ( _mibindexes ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1243,"<S2SV_StartBug> # define PCDGetBits ( n ) { sum = ( sum << n ) & 0xffffffff ; bits -= n ; while ( bits <= 24 ) { if ( p >= ( buffer + 0x800 ) ) { count = ReadBlob ( image , 0x800 , buffer ) ; p = buffer ; } sum |= ( ( unsigned int ) ( * p ) << ( 24 - bits ) ) ; bits += 8 ; p ++ ; } } <S2SV_EndBug> <S2SV_StartBug> ThrowBinaryException ( ResourceLimitError , ""MemoryAllocationFailed"" , <S2SV_EndBug> <S2SV_StartBug> buffer = ( unsigned char * ) RelinquishMagickMemory ( buffer ) ; <S2SV_EndBug> ",<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; <S2SV_ModStart> ) ; for ( j = 0 ; j <= i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] 
1244,"<S2SV_StartBug> if ( TYPE ( CHILD ( n , i ) ) == COMMA ) <S2SV_EndBug> ",<S2SV_ModStart> i < NCH ( n ) && 
1245,<S2SV_StartBug> g_hash_table_destroy ( headers ) ; <S2SV_EndBug> ,"<S2SV_ModStart> g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers , g_strdup ( ""Cookie"" ) , g_strdup ( ""cockpit=d"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth , ""/cockpit"" , headers ) ) g_assert_not_reached ( ) ; "
1246,"<S2SV_StartBug> char * p ; <S2SV_EndBug> <S2SV_StartBug> p = memchr ( str + 1 , ']' , str_len - 2 ) ; <S2SV_EndBug> <S2SV_StartBug> * portno = atoi ( p + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> * portno = atoi ( colon + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> return host ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> char * <S2SV_ModStart> , * e = NULL <S2SV_ModStart> strtol <S2SV_ModEnd> <S2SV_ModStart> , & e , 10 ) ; if ( e && * e ) { if ( get_err ) { * err = strpprintf ( 0 , ""Failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>address<S2SV_blank>\\""%s\\"""" , str ) ; } return NULL ; } <S2SV_ModEnd> <S2SV_ModStart> char * e = NULL ; <S2SV_ModStart> strtol ( colon + 1 , & e , 10 ) ; if ( ! e || ! * e ) { return <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1247,"<S2SV_StartBug> i , ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms . stepsizes [ i ] ) , <S2SV_EndBug> <S2SV_StartBug> i , ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms . stepsizes [ i ] ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> JAS_CAST ( unsigned , <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> JAS_CAST ( unsigned , <S2SV_ModEnd> <S2SV_ModStart> ) "
1248,"<S2SV_StartBug> for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst , src , src_ybc -> y_width ) ; <S2SV_EndBug> ","<S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { const uint16_t * src16 = CONVERT_TO_SHORTPTR ( src ) ; uint16_t * dst16 = CONVERT_TO_SHORTPTR ( dst ) ; <S2SV_ModStart> memcpy ( dst16 , src16 , src_ybc -> y_width * sizeof ( uint16_t ) ) ; src16 += src_ybc -> y_stride ; dst16 += dst_ybc -> y_stride ; } return ; } # endif for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy <S2SV_ModEnd> "
1249,<S2SV_StartBug> c -> cblk_style = bytestream2_get_byteu ( & s -> g ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx , ""cblk<S2SV_blank>size<S2SV_blank>><S2SV_blank>64"" ) ; return AVERROR_PATCHWELCOME ; } "
1250,<S2SV_StartBug> if ( '%' == * ptr ) { <S2SV_EndBug> ,<S2SV_ModStart> && ptr [ 1 ] 
1251,"<S2SV_StartBug> static void encode_rd_sb_row ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( & xd -> left_context , 0 , sizeof ( xd -> left_context ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( mi_col = tile -> mi_col_start ; mi_col < tile -> mi_col_end ; <S2SV_EndBug> <S2SV_StartBug> int dummy_rate ; <S2SV_EndBug> <S2SV_StartBug> BLOCK_SIZE i ; <S2SV_EndBug> <S2SV_StartBug> for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( sf -> partition_search_type == SEARCH_PARTITION && <S2SV_EndBug> <S2SV_StartBug> sf -> partition_search_type == VAR_BASED_PARTITION || <S2SV_EndBug> <S2SV_StartBug> set_offsets ( cpi , tile , mi_row , mi_col , BLOCK_64X64 ) ; <S2SV_EndBug> <S2SV_StartBug> & dummy_rate , & dummy_dist , 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ThreadData * td , TileDataEnc * tile_data , int mi_row , TOKENEXTRA * * tp ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModEnd> <S2SV_ModStart> tile_info = & tile_data -> tile_info ; MACROBLOCK * const x = & td -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; SPEED_FEATURES * const sf = & cpi -> sf ; int mi_col ; memset ( & xd -> left_context , 0 , sizeof ( <S2SV_ModEnd> <S2SV_ModStart> ) ) ; memset ( xd -> left_seg_context <S2SV_ModStart> left_seg_context <S2SV_ModEnd> <S2SV_ModStart> tile_info <S2SV_ModEnd> <S2SV_ModStart> tile_info <S2SV_ModEnd> <S2SV_ModStart> const struct segmentation * const seg = & cm -> seg ; <S2SV_ModStart> RD_COST dummy_rdc ; int i ; int seg_skip = 0 ; const int idx_str = cm -> mi_stride * mi_row + mi_col ; MODE_INFO * * mi = cm -> mi_grid_visible + idx_str <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> 64 <S2SV_ModEnd> <S2SV_ModStart> td -> leaf_tree [ i ] . pred_interp_filter = SWITCHABLE ; for ( i = 0 ; i < 64 ; ++ i ) { td -> pc_tree [ i ] . vertical [ 0 ] . pred_interp_filter = SWITCHABLE ; td -> pc_tree [ i ] . vertical [ 1 ] . pred_interp_filter = SWITCHABLE ; td -> pc_tree [ i ] . horizontal [ 0 ] . pred_interp_filter = SWITCHABLE ; td -> pc_tree [ i ] . horizontal [ 1 ] . pred_interp_filter = SWITCHABLE ; } } vp9_zero ( x -> pred_mv ) ; td -> pc_root -> index = 0 ; if ( seg -> enabled ) { const uint8_t * const map = seg -> update_map ? cpi -> segmentation_map : cm -> last_frame_seg_map ; int segment_id = get_segment_id ( cm , map , BLOCK_64X64 , mi_row , mi_col ) ; seg_skip = segfeature_active ( seg , segment_id , SEG_LVL_SKIP ) ; } x -> source_variance = UINT_MAX <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> seg_skip ) { const BLOCK_SIZE bsize = seg_skip ? BLOCK_64X64 : sf -> always_this_block_size ; set_offsets ( cpi , tile_info , x , mi_row , mi_col , BLOCK_64X64 ) ; set_fixed_partitioning ( cpi , tile_info , mi , mi_row , mi_col , bsize ) ; rd_use_partition ( cpi , td , tile_data , mi , tp , mi_row , mi_col , BLOCK_64X64 , & dummy_rate , & dummy_dist , 1 , td -> pc_root ) ; } else if ( cpi -> partition_search_skippable_frame ) { BLOCK_SIZE bsize ; set_offsets ( cpi , tile_info , x , mi_row , mi_col , BLOCK_64X64 ) ; bsize = get_rd_var_based_fixed_partition ( cpi , x , mi_row , mi_col ) ; set_fixed_partitioning ( cpi , tile_info , mi , mi_row , mi_col , bsize ) ; rd_use_partition ( cpi , td , tile_data , mi , tp , mi_row , mi_col , BLOCK_64X64 , & dummy_rate , & dummy_dist , 1 , td -> pc_root ) ; } else if ( <S2SV_ModStart> && cm -> frame_type != KEY_FRAME ) { choose_partitioning ( cpi , tile_info , x , mi_row , mi_col ) ; rd_use_partition ( cpi , td , tile_data , mi , tp , mi_row , mi_col , BLOCK_64X64 , & dummy_rate , & dummy_dist , 1 , td -> pc_root ) ; } else { if ( sf -> auto_min_max_partition_size <S2SV_ModEnd> <S2SV_ModStart> tile_info , x , mi_row , mi_col , BLOCK_64X64 ) ; rd_auto_partition_range ( cpi , tile_info , xd , mi_row , mi_col , & x -> min_partition_size , & x -> max_partition_size ) ; } rd_pick_partition ( cpi , td , tile_data <S2SV_ModEnd> <S2SV_ModStart> dummy_rdc , INT64_MAX , td -> pc_root <S2SV_ModEnd> "
1252,"<S2SV_StartBug> int hexdump ; <S2SV_EndBug> <S2SV_StartBug> if ( lmp_print_data_link_subobjs ( ndo , obj_tptr , obj_tlen - 12 , 12 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( lmp_print_data_link_subobjs ( ndo , obj_tptr , obj_tlen - 36 , 36 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( lmp_print_data_link_subobjs ( ndo , obj_tptr , obj_tlen - 12 , 12 ) ) <S2SV_EndBug> ","<S2SV_ModStart> , ret <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> ; if ( ret == - 1 ) goto trunc ; if ( ret == TRUE <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> ; if ( ret == - 1 ) goto trunc ; if ( ret == TRUE <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> ; if ( ret == - 1 ) goto trunc ; if ( ret == TRUE "
1253,"<S2SV_StartBug> static void inc_mvs ( const MB_MODE_INFO * mbmi , const int_mv mvs [ 2 ] , <S2SV_EndBug> <S2SV_StartBug> const MV * ref = & mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ] . as_mv ; <S2SV_EndBug> ","<S2SV_ModStart> const MB_MODE_INFO_EXT * mbmi_ext , <S2SV_ModStart> mbmi_ext <S2SV_ModEnd> "
1254,"<S2SV_StartBug> printf ( ""Using<S2SV_blank>%s\\n"" , vpx_codec_iface_name ( encoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> res = vpx_codec_enc_config_default ( encoder -> interface ( ) , & cfg , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_enc_init ( & codec , encoder -> interface ( ) , & cfg , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> encode_frame ( & codec , NULL , - 1 , writer ) ; <S2SV_EndBug> ",<S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> while ( <S2SV_ModStart> ) { } <S2SV_ModEnd> 
1255,"<S2SV_StartBug> if ( pskb_expand_head ( skb_out , 0 , size - skb -> len , GFP_ATOMIC ) < 0 ) { <S2SV_EndBug> ",<S2SV_ModStart> skb_out <S2SV_ModEnd> 
1256,<S2SV_StartBug> spin_lock_init ( & sta -> lock ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ps_lock 
1257,<S2SV_StartBug> perf_paranoid_kernel ( ) && ! capable ( CAP_SYS_ADMIN ) ) <S2SV_EndBug> ,<S2SV_ModStart> perf_paranoid_tracepoint_raw <S2SV_ModEnd> 
1258,<S2SV_StartBug> unregister_pernet_subsys ( & sctp_net_ops ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_v4_protosw_exit ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> sctp_ctrlsock_ops <S2SV_ModEnd> <S2SV_ModStart> ) ; unregister_pernet_subsys ( & sctp_defaults_ops 
1259,"<S2SV_StartBug> control_interface = usb_ifnum_to_if ( usb_dev , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( ! data_interface || ! control_interface ) return - ENODEV 
1260,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1261,"<S2SV_StartBug> netsnmp_mibindex_load ( ) ; <S2SV_EndBug> <S2SV_StartBug> add_mibfile ( entry , NULL , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1262,<S2SV_StartBug> struct list_head tmplist ; <S2SV_EndBug> <S2SV_StartBug> if ( oldsp -> do_auto_asconf ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sctp_copy_descendant <S2SV_ModEnd> 
1263,"<S2SV_StartBug> fd = open ( uinput_dev_path [ x ] , O_RDWR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( write ( fd , & dev , sizeof ( dev ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> ioctl ( fd , UI_SET_EVBIT , EV_KEY ) ; <S2SV_EndBug> <S2SV_StartBug> ioctl ( fd , UI_SET_EVBIT , EV_REL ) ; <S2SV_EndBug> <S2SV_StartBug> ioctl ( fd , UI_SET_EVBIT , EV_SYN ) ; <S2SV_EndBug> <S2SV_StartBug> ioctl ( fd , UI_SET_KEYBIT , key_map [ x ] . mapped_id ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ioctl ( fd , UI_DEV_CREATE , NULL ) < 0 ) { <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ; TEMP_FAILURE_RETRY ( <S2SV_ModEnd> <S2SV_ModStart> ) ; TEMP_FAILURE_RETRY ( <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ; if ( TEMP_FAILURE_RETRY <S2SV_ModEnd> <S2SV_ModStart> ) 
1264,<S2SV_StartBug> struct desc_struct * desc ; <S2SV_EndBug> <S2SV_StartBug> desc = get_desc ( sel ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! desc ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ( desc -> type & BIT ( 3 ) ) ) <S2SV_EndBug> <S2SV_StartBug> switch ( ( desc -> l << 1 ) | desc -> d ) { <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> get_desc ( & desc , sel ) <S2SV_ModEnd> <S2SV_ModStart> . <S2SV_ModEnd> <S2SV_ModStart> . <S2SV_ModEnd> <S2SV_ModStart> . <S2SV_ModEnd> "
1265,<S2SV_StartBug> vp9_free_frame_buffer ( & ctx -> buf [ i ] . img ) ; <S2SV_EndBug> ,<S2SV_ModStart> vpx_free_frame_buffer <S2SV_ModEnd> 
1266,"<S2SV_StartBug> vp9_lpf_vertical_16 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_8 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_lpf_vertical_16 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_8 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_4 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; } } if ( mask_4x4_int & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> "
1267,<S2SV_StartBug> atomic_dec ( & user -> inotify_devs ) ; <S2SV_EndBug> ,<S2SV_ModStart> fsnotify_put_group ( group ) ; 
1268,<S2SV_StartBug> iakerb_alloc_context ( iakerb_ctx_id_t * pctx ) <S2SV_EndBug> <S2SV_StartBug> code = krb5_gss_init_context ( & ctx -> k5c ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , int initiate <S2SV_ModStart> ctx -> initiate = initiate ; ctx -> established = 0 ; "
1269,<S2SV_StartBug> dst_known = tnum_is_const ( dst_reg -> var_off ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! src_known && opcode != BPF_ADD && opcode != BPF_SUB && opcode != BPF_AND ) { __mark_reg_unknown ( dst_reg ) ; return 0 ; } 
1270,"<S2SV_StartBug> status = SetImageExtent ( screen , screen -> columns , screen -> rows ) ; <S2SV_EndBug> <S2SV_StartBug> if ( image == ( Image * ) NULL ) <S2SV_EndBug> ","<S2SV_ModStart> if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image , screen ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
1271,"<S2SV_StartBug> while ( impeg2d_bit_stream_nxt ( ps_stream , START_CODE_PREFIX_LEN ) != START_CODE_PREFIX ) <S2SV_EndBug> ",<S2SV_ModStart> ( <S2SV_ModStart> ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ) 
1272,<S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> ,<S2SV_ModStart> { ret = <S2SV_ModEnd> <S2SV_ModStart> goto out ; } 
1273,"<S2SV_StartBug> return mono_method_get_object ( mono_object_domain ( rmethod ) , inflated , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! mono_verifier_is_method_valid_generic_instantiation ( inflated ) ) mono_raise_exception ( mono_get_exception_argument ( ""typeArguments"" , ""Invalid<S2SV_blank>generic<S2SV_blank>arguments"" ) ) ; "
1274,"<S2SV_StartBug> int tmp ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( buf , buffer , count ) ) <S2SV_EndBug> ","<S2SV_ModStart> size_t size ; int tmp ; size = min ( count , sizeof ( buf ) ) <S2SV_ModEnd> <S2SV_ModStart> size <S2SV_ModEnd> "
1275,"<S2SV_StartBug> ""Pushing<S2SV_blank>input<S2SV_blank>%d<S2SV_blank>:<S2SV_blank>%.30s\\n"" , ctxt -> inputNr + 1 , input -> cur ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; } if ( ( ( ctxt -> inputNr > 40 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) || ( ctxt -> inputNr > 1024 ) ) { xmlFatalErr ( ctxt , XML_ERR_ENTITY_LOOP , NULL ) ; while ( ctxt -> inputNr > 1 ) xmlFreeInputStream ( inputPop ( ctxt ) ) ; return ( - 1 "
1276,"<S2SV_StartBug> if ( sanity_check_area_boundary ( sbi , bh ) ) <S2SV_EndBug> ","<S2SV_ModStart> le32_to_cpu ( raw_super -> segment_count ) > F2FS_MAX_SEGMENT ) { f2fs_msg ( sb , KERN_INFO , ""Invalid<S2SV_blank>segment<S2SV_blank>count<S2SV_blank>(%u)"" , le32_to_cpu ( raw_super -> segment_count ) ) ; return 1 ; } if ( "
1277,"<S2SV_StartBug> char * last_elem , * wp ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( ( strncmp ( & name [ 1 ] , ""ORIGIN"" , 6 ) == 0 && ( len = 7 ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> || ( strncmp ( & name [ 1 ] , ""PLATFORM"" , 8 ) == 0 && ( len = 9 ) != 0 ) ) <S2SV_EndBug> <S2SV_StartBug> ? ( __libc_enable_secure ? NULL : l -> l_origin ) <S2SV_EndBug> ","<S2SV_ModStart> const char * const start = name ; <S2SV_ModStart> ""ORIGIN}"" <S2SV_ModEnd> <S2SV_ModStart> ""PLATFORM}"" <S2SV_ModEnd> <S2SV_ModStart> && ( ( name [ len ] != '\\0' && ( ! is_path || name [ len ] != ':' ) ) || ( name != start && ( ! is_path || name [ - 1 ] != ':' ) ) ) "
1278,<S2SV_StartBug> pDecCont = ( decContainer_t * ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , 1 "
1279,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> opt = np -> opt ; <S2SV_EndBug> <S2SV_StartBug> return err < 0 ? err : len ; <S2SV_EndBug> ,<S2SV_ModStart> struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart> { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> <S2SV_ModStart> txopt_put ( opt_to_free ) ; 
1280,<S2SV_StartBug> if ( iph -> ihl == 5 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> memset ( IPCB ( skb ) , 0 , sizeof ( struct inet_skb_parm ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1281,"<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( error ) return error ; <S2SV_ModEnd> "
1282,"<S2SV_StartBug> err = fib_dump_info ( skb , NETLINK_CB ( in_skb ) . portid , <S2SV_EndBug> <S2SV_StartBug> rcu_read_unlock ( ) ; <S2SV_EndBug> ","<S2SV_ModStart> { if ( ! res . fi ) { err = fib_props [ res . type ] . error ; if ( ! err ) err = - EHOSTUNREACH ; <S2SV_ModEnd> <S2SV_ModStart> } err = fib_dump_info ( skb , NETLINK_CB ( in_skb ) . portid , nlh -> nlmsg_seq , RTM_NEWROUTE , table_id , rt -> rt_type , res . prefix , res . prefixlen , fl4 . flowi4_tos , res . fi , 0 ) ; } else { err = rt_fill_info ( net , dst , src , table_id , & fl4 , skb , NETLINK_CB ( in_skb ) . portid , nlh -> nlmsg_seq ) ; } if ( err < 0 ) goto errout_free ; "
1283,"<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( image -> columns , <S2SV_EndBug> ","<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
1284,<S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> int limit = ( info -> type == 2 ? vi -> channels : 1 ) * ci -> blocksizes [ 1 ] / 2 ; if ( info -> begin > info -> end || info -> end > limit ) { goto errout ; } 
1285,"<S2SV_StartBug> if ( ! js_regexec ( re -> prog , text , & m , 0 ) ) <S2SV_EndBug> ","<S2SV_ModStart> js_doregexec ( J , <S2SV_ModEnd> "
1286,<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> tcp_rcv_space_adjust ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } tp -> copied_seq = seq ; 
1287,<S2SV_StartBug> krb5_key_data * key_data ; <S2SV_EndBug> <S2SV_StartBug> if ( key_data_in == NULL ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i <= num_versions ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> if ( ret [ i ] != NULL ) <S2SV_EndBug> ,<S2SV_ModStart> = NULL ; if ( n_key_data < <S2SV_ModEnd> <S2SV_ModStart> key_data <S2SV_ModEnd> <S2SV_ModStart> ret [ i ] != NULL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1288,"<S2SV_StartBug> _Unpickler_MemoPut ( UnpicklerObject * self , Py_ssize_t idx , PyObject * value ) <S2SV_EndBug> ",<S2SV_ModStart> size_t <S2SV_ModEnd> 
1289,<S2SV_StartBug> pCsr -> zInput = sqlite3_malloc ( nByte + 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart> sqlite3_malloc64 <S2SV_ModEnd> 
1290,<S2SV_StartBug> sock_release ( SOCKET_I ( inode ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> __sock_release <S2SV_ModEnd> <S2SV_ModStart> , inode "
1291,"<S2SV_StartBug> AsyncFor ( expr_ty target , expr_ty iter , asdl_seq * body , asdl_seq * orelse , int <S2SV_EndBug> <S2SV_StartBug> p -> v . AsyncFor . orelse = orelse ; <S2SV_EndBug> ","<S2SV_ModStart> string type_comment , int <S2SV_ModEnd> <S2SV_ModStart> ; p -> v . AsyncFor . type_comment = type_comment "
1292,"<S2SV_StartBug> int mi_sort_index ( MI_CHECK * param , register MI_INFO * info , char * name ) <S2SV_EndBug> <S2SV_StartBug> MYF ( 0 ) ) || <S2SV_EndBug> ","<S2SV_ModStart> , my_bool no_copy_stat <S2SV_ModStart> no_copy_stat ? MYF ( MY_REDEL_NO_COPY_STAT ) : "
1293,"<S2SV_StartBug> opt = xchg ( & inet6_sk ( sk ) -> opt , opt ) ; <S2SV_EndBug> ",<S2SV_ModStart> ( __force struct ipv6_txoptions * * ) 
1294,<S2SV_StartBug> case DB_VECTOR : <S2SV_EndBug> ,"<S2SV_ModStart> AC_VECTOR : kvm_queue_exception_e ( vcpu , AC_VECTOR , error_code ) ; return 1 ; case "
1295,<S2SV_StartBug> default : <S2SV_EndBug> ,"<S2SV_ModStart> case NGHTTP2_ERR_TOO_MANY_SETTINGS : return ""SETTINGS<S2SV_blank>frame<S2SV_blank>contained<S2SV_blank>more<S2SV_blank>than<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>entries"" ; "
1296,"<S2SV_StartBug> Stream_Read_UINT16 ( s , eventId ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( Stream_GetRemainingLength ( s ) < 6 ) return ERROR_INVALID_DATA ; 
1297,"<S2SV_StartBug> if ( - 1 == zsocket_bind ( pData -> socket , ( char * ) pData -> description ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( - 1 == zsocket_connect ( pData -> socket , ( char * ) pData -> description ) ) { <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , <S2SV_ModStart> ""%s"" , "
1298,"<S2SV_StartBug> return chg ; <S2SV_EndBug> <S2SV_StartBug> return - ENOSPC ; <S2SV_EndBug> <S2SV_StartBug> ret = hugetlb_acct_memory ( h , chg ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> { ret = chg ; goto out_err ; } <S2SV_ModEnd> <S2SV_ModStart> { ret = <S2SV_ModEnd> <S2SV_ModStart> goto out_err ; } <S2SV_ModStart> goto out_err <S2SV_ModEnd> <S2SV_ModStart> out_err : resv_map_put ( vma ) ; return ret ; 
1299,"<S2SV_StartBug> struct flowi6 fl6 ; <S2SV_EndBug> <S2SV_StartBug> skb -> len , & fl6 . saddr , & fl6 . daddr ) ; <S2SV_EndBug> <S2SV_StartBug> SCTP_INC_STATS ( sock_net ( sk ) , SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_EndBug> <S2SV_StartBug> return ip6_xmit ( sk , skb , & fl6 , np -> opt , np -> tclass ) ; <S2SV_EndBug> ","<S2SV_ModStart> * fl6 = & transport -> fl . u . ip6 ; <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> IP6_ECN_flow_xmit ( sk , fl6 -> flowlabel <S2SV_ModEnd> <S2SV_ModStart> SCTP_INC_STATS ( sock_net ( sk ) , SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
1300,"<S2SV_StartBug> inode = ecryptfs_get_inode ( path . dentry -> d_inode , s ) ; <S2SV_EndBug> ","<S2SV_ModStart> s -> s_stack_depth = path . dentry -> d_sb -> s_stack_depth + 1 ; rc = - EINVAL ; if ( s -> s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH ) { pr_err ( ""eCryptfs:<S2SV_blank>maximum<S2SV_blank>fs<S2SV_blank>stacking<S2SV_blank>depth<S2SV_blank>exceeded\\n"" ) ; goto out_free ; } "
1301,"<S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1302,<S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( Frames == 0 ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; "
1303,"<S2SV_StartBug> void nego_process_negotiation_failure ( rdpNego * nego , wStream * s ) <S2SV_EndBug> <S2SV_StartBug> WLog_DBG ( TAG , ""RDP_NEG_FAILURE"" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> ; if ( Stream_GetRemainingLength ( s ) < 7 ) return FALSE <S2SV_ModStart> return TRUE ; 
1304,"<S2SV_StartBug> int ret , last_pwd ; <S2SV_EndBug> <S2SV_StartBug> ret = decrypt_key_data ( handle -> context , <S2SV_EndBug> <S2SV_StartBug> kdb -> n_key_data , kdb -> key_data , <S2SV_EndBug> ","<S2SV_ModStart> , n_new_keys <S2SV_ModStart> n_new_keys = count_new_keys ( kdb -> n_key_data , kdb -> key_data ) ; <S2SV_ModStart> n_new_keys <S2SV_ModEnd> "
1305,"<S2SV_StartBug> int len , result = RLC_OK ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( ! bn_is_zero ( t ) ) { <S2SV_EndBug> <S2SV_StartBug> result = RLC_ERR ; <S2SV_EndBug> <S2SV_StartBug> if ( pad != RSA_PUB ) { <S2SV_EndBug> <S2SV_StartBug> result = RLC_ERR ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( ! bn_is_zero ( t ) ) { <S2SV_EndBug> <S2SV_StartBug> result = RLC_ERR ; <S2SV_EndBug> <S2SV_StartBug> if ( pad != RSA_PRV ) { <S2SV_EndBug> <S2SV_StartBug> result = RLC_ERR ; <S2SV_EndBug> <S2SV_StartBug> } while ( pad != 0 && m_len > 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( m_len == 0 ) { <S2SV_EndBug> <S2SV_StartBug> result = RLC_ERR ; <S2SV_EndBug> ","<S2SV_ModStart> RLC_ERR <S2SV_ModEnd> <S2SV_ModStart> result = RLC_OK ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> == <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> result = ( m_len > <S2SV_ModEnd> <S2SV_ModStart> } } break ; case RSA_SIG : id = hash_id ( MD_MAP , & len ) ; bn_zero ( m ) ; bn_lsh ( m , m , 8 ) ; bn_add_dig ( m , m , RSA_PRV ) ; * p_len = k_len - 3 - m_len - len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m , m , 8 ) ; bn_add_dig ( m , m , RSA_PAD ) ; } bn_lsh ( m , m , 8 ) ; bn_add_dig ( m , m , 0 ) ; bn_lsh ( m , m , 8 * len ) ; bn_read_bin ( t , id , len ) ; bn_add ( m , m , t ) ; bn_lsh ( m , m , m_len * 8 ) ; result = RLC_OK ; break ; case RSA_SIG_HASH : bn_zero ( m ) ; bn_lsh ( m , m , 8 ) ; bn_add_dig ( m , m , RSA_PRV ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m , m , 8 ) ; bn_add_dig ( m , m , RSA_PAD ) ; } bn_lsh ( m , m , 8 ) ; bn_add_dig ( m , m , 0 ) ; bn_lsh ( m , m , m_len * 8 ) ; result = RLC_OK ; break ; case RSA_VER : m_len = k_len - 1 ; bn_rsh ( t , m , 8 * m_len ) ; if ( bn_is_zero ( t ) ) { m_len -- ; bn_rsh ( t , m , 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad == RSA_PRV ) { int counter = 0 ; do { counter ++ ; m_len -- ; bn_rsh ( t , m , 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } while ( pad == RSA_PAD && m_len > 0 ) ; id = hash_id ( MD_MAP , & len ) ; m_len -= len ; bn_rsh ( t , m , m_len * 8 ) ; int r = 0 ; for ( int i = 0 ; i < len ; i ++ ) { pad = ( uint8_t ) t -> dp [ 0 ] ; r |= pad ^ id [ len - i - 1 ] ; bn_rsh ( t , t , 8 ) ; } * p_len = k_len - m_len ; bn_mod_2b ( m , m , m_len * 8 ) ; if ( r && m_len > 0 && counter >= 8 ) { result = RLC_OK ; } } } <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> == <S2SV_ModEnd> <S2SV_ModStart> int counter = 0 ; do { counter ++ ; <S2SV_ModEnd> <S2SV_ModStart> == RSA_PAD <S2SV_ModEnd> <S2SV_ModStart> * p_len = k_len - m_len ; bn_mod_2b ( m , m , m_len * 8 ) ; <S2SV_ModStart> > 0 && counter >= 8 <S2SV_ModEnd> <S2SV_ModStart> RLC_OK ; } } } <S2SV_ModEnd> "
1306,"<S2SV_StartBug> r2 . re -> flags | RE_FLAGS_SCAN , <S2SV_EndBug> ","<S2SV_ModStart> 0 , "
1307,"<S2SV_StartBug> static vpx_codec_err_t vp8_get_reference ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1308,"<S2SV_StartBug> rq = blk_mq_tag_to_rq ( hctx -> tags , off + bit ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> -> rqs [ <S2SV_ModEnd> <S2SV_ModStart> ] <S2SV_ModEnd> 
1309,"<S2SV_StartBug> if ( ( psf = calloc ( 1 , sizeof ( SF_PRIVATE ) ) ) == NULL ) <S2SV_EndBug> ",<S2SV_ModStart> psf_allocate ( <S2SV_ModEnd> 
1310,<S2SV_StartBug> static void fix_interp_filter ( VP9_COMMON * cm ) { <S2SV_EndBug> <S2SV_StartBug> count [ i ] += cm -> counts . switchable_interp [ j ] [ i ] ; <S2SV_EndBug> ,"<S2SV_ModStart> , FRAME_COUNTS * counts <S2SV_ModStart> counts -> <S2SV_ModEnd> "
1311,<S2SV_StartBug> token ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> ; } if ( operand >= MAX_OPERANDS ) { eprintf ( ""Too<S2SV_blank>many<S2SV_blank>operands\\n"" ) ; return false "
1312,"<S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> x -> act_zbin_adj = 0 ; <S2SV_EndBug> <S2SV_StartBug> vp9_setup_src_planes ( x , cpi -> Source , 0 , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> xd -> mi [ 0 ] -> mbmi . mode = DC_PRED ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> above_seg_context , 0 , <S2SV_EndBug> ",<S2SV_ModStart> td . <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
1313,<S2SV_StartBug> dst_name = malloc ( strlen ( name ) * 2 + 16 ) ; <S2SV_EndBug> ,<S2SV_ModStart> safe_calloc <S2SV_ModEnd> 
1314,"<S2SV_StartBug> retval = htc_request_check_host_hdr ( hp ) ; <S2SV_EndBug> <S2SV_StartBug> WSP ( sp , SLT_Error , ""Duplicated<S2SV_blank>Host<S2SV_blank>header"" ) ; <S2SV_EndBug> <S2SV_StartBug> return ( retval ) ; <S2SV_EndBug> ",<S2SV_ModStart> htc_request_check_hdrs <S2SV_ModEnd> <S2SV_ModStart> hp <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1315,"<S2SV_StartBug> char <S2SV_EndBug> <S2SV_StartBug> count = ReadBlob ( image , 2 , ( unsigned char * ) magick ) ; <S2SV_EndBug> <S2SV_StartBug> image -> page . x = ReadBlobLSBShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> image -> page . y = ReadBlobLSBShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> one = 1 ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> ThrowFileException ( exception , CorruptImageError , ""UnexpectedEndOfFile"" , <S2SV_EndBug> <S2SV_StartBug> * p ++ = ( unsigned char ) ScaleQuantumToChar ( ScaleShortToQuantum ( <S2SV_EndBug> <S2SV_StartBug> ReadBlobLSBShort ( image ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> ThrowFileException ( exception , CorruptImageError , ""UnexpectedEndOfFile"" , <S2SV_EndBug> <S2SV_StartBug> do <S2SV_EndBug> <S2SV_StartBug> if ( opcode & 0x40 ) <S2SV_EndBug> <S2SV_StartBug> operand = ReadBlobLSBSignedShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> plane = ( unsigned char ) operand ; <S2SV_EndBug> <S2SV_StartBug> if ( opcode & 0x40 ) <S2SV_EndBug> <S2SV_StartBug> operand = ReadBlobLSBSignedShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opcode & 0x40 ) <S2SV_EndBug> <S2SV_StartBug> operand = ReadBlobLSBSignedShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> offset = ( ( image -> rows - y - 1 ) * image -> columns * number_planes ) + x * <S2SV_EndBug> <S2SV_StartBug> number_planes + plane ; <S2SV_EndBug> <S2SV_StartBug> ( offset + ( ( size_t ) operand * number_planes ) > pixel_info_length ) ) <S2SV_EndBug> <S2SV_StartBug> if ( opcode & 0x40 ) <S2SV_EndBug> <S2SV_StartBug> operand = ReadBlobLSBSignedShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> offset = ( ( image -> rows - y - 1 ) * image -> columns * number_planes ) + x * <S2SV_EndBug> <S2SV_StartBug> number_planes + plane ; <S2SV_EndBug> <S2SV_StartBug> ( offset + ( ( size_t ) operand * number_planes ) > pixel_info_length ) ) <S2SV_EndBug> <S2SV_StartBug> } while ( ( ( opcode & 0x3f ) != EOFOp ) && ( opcode != EOF ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( IsValidColormapIndex ( image , * p & mask , & index , exception ) == <S2SV_EndBug> <S2SV_StartBug> if ( IsValidColormapIndex ( image , ( size_t ) ( x * map_length + <S2SV_EndBug> <S2SV_StartBug> if ( IsValidColormapIndex ( image , * p ++ , & index , exception ) == <S2SV_EndBug> <S2SV_StartBug> if ( IsValidColormapIndex ( image , * p ++ , & index , exception ) == <S2SV_EndBug> <S2SV_StartBug> if ( IsValidColormapIndex ( image , * p ++ , & index , exception ) == <S2SV_EndBug> ","<S2SV_ModStart> # define ThrowRLEException ( exception , message ) \\\n{ if ( colormap != ( unsigned char * ) NULL ) colormap = ( unsigned char * ) RelinquishMagickMemory ( colormap ) ; if ( pixel_info != ( MemoryInfo * ) NULL ) pixel_info = RelinquishVirtualMemory ( pixel_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; \\\n} <S2SV_ModStart> colormap = ( unsigned char * ) NULL ; pixel_info = ( MemoryInfo * ) NULL ; <S2SV_ModStart> ( ssize_t ) <S2SV_ModStart> ( ssize_t ) <S2SV_ModStart> if ( EOFBlob ( image ) != MagickFalse ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> ThrowRLEException ( <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> if ( EOFBlob ( image ) != MagickFalse ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; } <S2SV_ModStart> ThrowRLEException ( <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; if ( opcode <S2SV_ModStart> { <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; } <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; if ( opcode <S2SV_ModStart> { <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; } <S2SV_ModStart> == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; if ( opcode <S2SV_ModStart> { <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; } offset = ( ssize_t ) ( <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> ( offset + <S2SV_ModEnd> <S2SV_ModStart> ( ssize_t ) <S2SV_ModStart> == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; if ( opcode <S2SV_ModStart> { <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; } <S2SV_ModStart> ( ssize_t ) ( <S2SV_ModStart> ) <S2SV_ModStart> ( offset + <S2SV_ModEnd> <S2SV_ModStart> ( ssize_t ) <S2SV_ModStart> if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , ""UnexpectedEndOfFile"" ) ; <S2SV_ModStart> ( ssize_t ) ( <S2SV_ModStart> ) <S2SV_ModStart> ssize_t <S2SV_ModEnd> <S2SV_ModStart> ( ssize_t ) <S2SV_ModStart> ( ssize_t ) <S2SV_ModStart> ( ssize_t ) "
1316,<S2SV_StartBug> INIT_LIST_HEAD ( & card -> controls ) ; <S2SV_EndBug> ,<S2SV_ModStart> mutex_init ( & card -> user_ctl_lock ) ; 
1317,<S2SV_StartBug> s += padlen + 3 ; <S2SV_EndBug> <S2SV_StartBug> ( * psig ) = s ; <S2SV_EndBug> ,"<S2SV_ModStart> ( * psig ) = s + <S2SV_ModEnd> <S2SV_ModStart> { const u_char * p ; size_t cnt_ffs = 0 ; for ( p = s + 2 ; p < s + padlen + 2 ; p ++ ) if ( * p == 0xFF ) cnt_ffs ++ ; if ( cnt_ffs != padlen ) return ""4"" ""invalid<S2SV_blank>Padding<S2SV_blank>String"" ; } <S2SV_ModEnd> "
1318,"<S2SV_StartBug> int ret = write ( tap_fd , packet , len + sizeof ( tETH_HDR ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
1319,<S2SV_StartBug> if ( ps_dec -> u1_first_slice_in_stream ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1320,<S2SV_StartBug> OPENSSL_free ( rdata ) ; <S2SV_EndBug> <S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> OPENSSL_free ( rdata ) ; <S2SV_EndBug> <S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( rdata -> rbuf . buf != NULL ) <S2SV_ModStart> -> rbuf . buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> - 1 <S2SV_ModEnd> <S2SV_ModStart> if ( rdata -> rbuf . buf != NULL ) <S2SV_ModStart> -> rbuf . buf ) ; OPENSSL_free ( rdata <S2SV_ModStart> - 1 <S2SV_ModEnd> 
1321,"<S2SV_StartBug> struct flowi6 fl6 ; <S2SV_EndBug> <S2SV_StartBug> skb -> len , & fl6 . saddr , & fl6 . daddr ) ; <S2SV_EndBug> <S2SV_StartBug> SCTP_INC_STATS ( sock_net ( sk ) , SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_EndBug> <S2SV_StartBug> return ip6_xmit ( sk , skb , & fl6 , np -> opt , np -> tclass ) ; <S2SV_EndBug> ","<S2SV_ModStart> * fl6 = & transport -> fl . u . ip6 ; <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> IP6_ECN_flow_xmit ( sk , fl6 -> flowlabel <S2SV_ModEnd> <S2SV_ModStart> SCTP_INC_STATS ( sock_net ( sk ) , SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
1322,<S2SV_StartBug> if ( args -> buffer_count < 1 ) { <S2SV_EndBug> ,<S2SV_ModStart> || args -> buffer_count > UINT_MAX / sizeof ( * exec2_list ) 
1323,"<S2SV_StartBug> mptctl_getiocinfo ( unsigned long arg , unsigned int data_size ) <S2SV_EndBug> <S2SV_StartBug> MPT_ADAPTER * ioc ; <S2SV_EndBug> <S2SV_StartBug> struct pci_dev * pdev ; <S2SV_EndBug> <S2SV_StartBug> return PTR_ERR ( karg ) ; <S2SV_EndBug> ","<S2SV_ModStart> MPT_ADAPTER * ioc , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1324,"<S2SV_StartBug> lua_pushinteger ( L , c . left == 0 ? - 1 : offset ) ; <S2SV_EndBug> ","<S2SV_ModStart> luaL_checkstack ( L , 1 , ""in<S2SV_blank>function<S2SV_blank>mp_unpack_full"" ) ; "
1325,"<S2SV_StartBug> const char * path ) <S2SV_EndBug> <S2SV_StartBug> mntflags , mntdata , optional ) ; <S2SV_EndBug> ","<S2SV_ModStart> , const char * rootfs <S2SV_ModStart> , rootfs "
1326,"<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( image -> columns , 3 * <S2SV_EndBug> ","<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
1327,"<S2SV_StartBug> int i , len ; <S2SV_EndBug> <S2SV_StartBug> const char __user * p ; <S2SV_EndBug> <S2SV_StartBug> audit_log_format ( * ab , ""argc=%d"" , context -> execve . argc ) ; <S2SV_EndBug> <S2SV_StartBug> buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1 , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! buf ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < context -> execve . argc ; i ++ ) { <S2SV_EndBug> ","<S2SV_ModStart> long len_max ; long len_rem ; long len_full ; long len_buf ; long len_abuf ; long len_tmp ; bool require_data ; bool encode ; unsigned int iter ; unsigned int arg ; char * buf_head ; char * buf <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> char abuf [ 96 ] ; WARN_ON_ONCE ( MAX_EXECVE_AUDIT_LEN > 7500 ) ; len_max = MAX_EXECVE_AUDIT_LEN ; buf_head = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1 , GFP_KERNEL ) ; if ( ! buf_head ) { audit_panic ( ""out<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>argv<S2SV_blank>string"" ) ; return ; } buf = buf_head ; <S2SV_ModStart> len_rem = len_max ; len_buf = 0 ; len_full = 0 ; require_data = true ; encode = false ; iter = 0 ; arg = 0 ; do { if ( len_full == 0 ) len_full = strnlen_user ( p , MAX_ARG_STRLEN ) - 1 ; if ( require_data ) { if ( buf != buf_head ) { memmove ( buf_head , buf , len_buf ) ; buf = buf_head ; } len_tmp = strncpy_from_user ( & buf_head [ len_buf ] , p , len_max - len_buf ) ; if ( len_tmp == - EFAULT ) { send_sig ( SIGKILL , current , 0 ) ; goto out ; } else if ( len_tmp == ( len_max - len_buf ) ) { require_data = true ; encode = true ; len_full = len_full * 2 ; p += len_tmp ; } else { require_data = false ; if ( ! encode ) encode = audit_string_contains_control ( buf , len_tmp ) ; if ( len_full < len_max ) len_full = ( encode ? len_tmp * 2 : len_tmp ) ; p += len_tmp + 1 ; } len_buf += len_tmp ; buf_head [ len_buf ] = '\\0' ; len_abuf = ( encode ? len_buf * 2 : len_buf + 2 ) ; } if ( len_buf > 0 ) { if ( ( sizeof ( abuf ) + 8 ) > len_rem ) { len_rem = len_max ; audit_log_end ( * ab ) ; * ab = audit_log_start ( context , GFP_KERNEL , AUDIT_EXECVE <S2SV_ModEnd> <S2SV_ModStart> * ab ) goto out ; } len_tmp = 0 ; if ( require_data || ( iter > 0 ) || ( ( len_abuf + sizeof ( abuf ) ) > len_rem ) ) { if ( iter == 0 ) { len_tmp += snprintf ( & abuf [ len_tmp ] , sizeof ( abuf ) - len_tmp , ""<S2SV_blank>a%d_len=%lu"" , arg , len_full ) ; } len_tmp += snprintf ( & abuf [ len_tmp ] , sizeof ( abuf ) - len_tmp , ""<S2SV_blank>a%d[%d]="" , arg , iter ++ ) ; } else len_tmp += snprintf ( & abuf [ len_tmp ] , sizeof ( abuf ) - len_tmp , ""<S2SV_blank>a%d="" , arg ) ; WARN_ON ( len_tmp >= sizeof ( abuf ) ) ; abuf [ sizeof ( abuf ) - 1 ] = '\\0' ; audit_log_format ( * ab , ""%s"" , abuf ) ; len_rem -= len_tmp ; len_tmp = len_buf ; if ( encode ) { if ( len_abuf > len_rem ) len_tmp = len_rem / 2 ; audit_log_n_hex ( * ab , buf , len_tmp ) ; len_rem -= len_tmp * 2 ; len_abuf -= len_tmp * 2 ; } else { if ( len_abuf > len_rem ) len_tmp = len_rem - 2 ; audit_log_n_string ( * ab , buf , len_tmp ) ; len_rem -= len_tmp + 2 ; len_abuf -= len_tmp ; } len_buf -= len_tmp ; buf += len_tmp ; } if ( ( len_buf == 0 ) && ! require_data ) { arg ++ ; iter = 0 ; len_full = 0 ; require_data = true ; encode = false ; } } while ( arg <S2SV_ModEnd> <S2SV_ModStart> ) ; out : kfree ( buf_head <S2SV_ModEnd> "
1328,"<S2SV_StartBug> fd = open ( path , O_WRONLY | O_CREAT | O_CLOEXEC | O_NOCTTY , mode > 0 ? mode : 0644 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ( mode == 0 || mode == MODE_INVALID ) ? 0644 : mode <S2SV_ModEnd> 
1329,"<S2SV_StartBug> int pkt_len ; <S2SV_EndBug> <S2SV_StartBug> char line [ NETSCREEN_LINE_LENGTH ] ; <S2SV_EndBug> <S2SV_StartBug> pkt_len = parse_netscreen_rec_hdr ( phdr , line , cap_int , & cap_dir , <S2SV_EndBug> <S2SV_StartBug> if ( pkt_len == - 1 ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return parse_netscreen_packet ( wth -> random_fh , phdr , buf <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1330,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> u64 irq_time ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( rq -> skip_clock_update ) return <S2SV_ModStart>  <S2SV_ModEnd> 
1331,<S2SV_StartBug> switch ( depth ) <S2SV_EndBug> <S2SV_StartBug> CheckNumberCompactPixels ; <S2SV_EndBug> ,<S2SV_ModStart> CheckNumberCompactPixels ; <S2SV_ModStart>  <S2SV_ModEnd> 
1332,"<S2SV_StartBug> raw_printf ( ""Unknown<S2SV_blank>option:<S2SV_blank>%s"" , * argv ) ; <S2SV_EndBug> <S2SV_StartBug> raw_printf ( ""Unknown<S2SV_blank>option:<S2SV_blank>%s"" , * argv ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""Unknown<S2SV_blank>option:<S2SV_blank>%.60s"" <S2SV_ModEnd> <S2SV_ModStart> ""Unknown<S2SV_blank>option:<S2SV_blank>%.60s"" <S2SV_ModEnd> "
1333,"<S2SV_StartBug> struct blkif_response resp ; <S2SV_EndBug> <S2SV_StartBug> resp . id = id ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( RING_GET_RESPONSE ( & blk_rings -> native , blk_rings -> native . rsp_prod_pvt ) , <S2SV_EndBug> <S2SV_StartBug> memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32 , blk_rings -> x86_32 . rsp_prod_pvt ) , <S2SV_EndBug> <S2SV_StartBug> memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64 , blk_rings -> x86_64 . rsp_prod_pvt ) , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> * <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> resp = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> resp = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> resp = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> resp -> id = id ; resp -> operation = op ; resp -> status = st ; 
1334,<S2SV_StartBug> if ( ! ( mask & KADM5_ATTRIBUTES ) || <S2SV_EndBug> ,<S2SV_ModStart> password == NULL || 
1335,"<S2SV_StartBug> if ( ( datao + 12 < datao ) || ( datao + 12 < 12 ) || ( datao + 12 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( datao + 2 < datao ) || ( datao + 2 < 2 ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( o + 12 < o ) || ( o + 12 < 12 ) || ( o + 12 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> ""ExifMnoteDataFuji"" , ""Short<S2SV_blank>MakerNote"" ) ; <S2SV_EndBug> <S2SV_StartBug> n -> entries [ tcount ] . format = exif_get_short ( buf + o + 2 , n -> order ) ; <S2SV_EndBug> <S2SV_StartBug> n -> entries [ tcount ] . components = exif_get_long ( buf + o + 4 , n -> order ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( dataofs + s < dataofs ) || ( dataofs + s < s ) || <S2SV_EndBug> ","<S2SV_ModStart> CHECKOVERFLOW ( datao , buf_size , 12 <S2SV_ModEnd> <S2SV_ModStart> CHECKOVERFLOW ( datao , buf_size , 2 <S2SV_ModEnd> <S2SV_ModStart> CHECKOVERFLOW ( o , buf_size , 12 ) ) { exif_log ( en -> log , EXIF_LOG_CODE_CORRUPT_DATA , ""ExifMnoteDataFuji"" , ""Short<S2SV_blank>MakerNote"" ) ; break ; } n -> entries [ tcount ] . tag = exif_get_short ( buf + o , n -> order ) ; n -> entries [ tcount ] . format = exif_get_short ( buf + o + 2 , n -> order ) ; n -> entries [ tcount ] . components = exif_get_long ( buf + o + 4 , n -> order ) ; n -> entries [ tcount ] . order = n -> order ; exif_log ( en -> log , EXIF_LOG_CODE_DEBUG , ""ExifMnoteDataFuji"" , ""Loading<S2SV_blank>entry<S2SV_blank>0x%x<S2SV_blank>(\'%s\')..."" , n -> entries [ tcount ] . tag , mnote_fuji_tag_get_name ( n -> entries [ tcount ] . tag ) ) ; if ( exif_format_get_size ( n -> entries [ tcount ] . format ) && buf_size / exif_format_get_size ( n -> entries [ tcount ] . format ) < n -> entries [ tcount ] . components <S2SV_ModEnd> <S2SV_ModStart> ""Tag<S2SV_blank>size<S2SV_blank>overflow<S2SV_blank>detected<S2SV_blank>(%u<S2SV_blank>*<S2SV_blank>%lu)"" , exif_format_get_size ( <S2SV_ModEnd> <S2SV_ModStart> ) , <S2SV_ModEnd> <S2SV_ModStart> ) ; continue ; } <S2SV_ModEnd> <S2SV_ModStart> CHECKOVERFLOW ( dataofs , buf_size , s ) ) { exif_log ( en -> log , EXIF_LOG_CODE_CORRUPT_DATA , ""ExifMnoteDataFuji"" , ""Tag<S2SV_blank>data<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>"" ""buffer<S2SV_blank>(%u<S2SV_blank>>=<S2SV_blank>%u)"" , ( unsigned ) ( dataofs + s ) , buf_size ) ; continue ; } n -> entries [ tcount ] . data = exif_mem_alloc ( en -> mem , s ) ; if ( ! n -> entries [ tcount ] . data ) { EXIF_LOG_NO_MEMORY ( en -> log , ""ExifMnoteDataFuji"" , s ) ; continue ; } memcpy ( n -> entries [ tcount ] . data , buf + dataofs <S2SV_ModEnd> "
1336,"<S2SV_StartBug> sprintf ( charbuf , ""%s/%s.html"" , dirout , rootname ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( charbuf , ""%s/%s-links.html"" , dirout , rootname ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( charbuf , ""%s_thumb_%03d"" , rootname , index ) ; <S2SV_EndBug> ","<S2SV_ModStart> snprintf ( charbuf , sizeof ( charbuf ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( charbuf , sizeof ( charbuf ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( charbuf , sizeof ( charbuf ) <S2SV_ModEnd> "
1337,<S2SV_StartBug> snapend_save = ndo -> ndo_snapend ; <S2SV_EndBug> ,<S2SV_ModStart> ; ND_TCHECK_16BITS ( & ip -> ip_len ) 
1338,<S2SV_StartBug> struct dentry * dir ; <S2SV_EndBug> <S2SV_StartBug> ci = d_inode ( dir ) -> i_crypt_info ; <S2SV_EndBug> <S2SV_StartBug> dir_has_key = ( ci != NULL ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd> 
1339,<S2SV_StartBug> void unbind_ports ( void ) { <S2SV_EndBug> <S2SV_StartBug> CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; <S2SV_EndBug> <S2SV_StartBug> service_options . next = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( opt -> ctx ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> NOEXPORT <S2SV_ModStart> for ( <S2SV_ModEnd> <S2SV_ModStart> opt ; opt = opt -> next <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } } <S2SV_ModEnd> 
1340,<S2SV_StartBug> numbers [ argc ++ ] = ( unsigned long ) mtree_atol ( & p ) ; <S2SV_EndBug> <S2SV_StartBug> if ( argc > MAX_PACK_ARGS ) { <S2SV_EndBug> ,"<S2SV_ModStart> if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a , ARCHIVE_ERRNO_FILE_FORMAT , ""Too<S2SV_blank>many<S2SV_blank>arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart>  <S2SV_ModEnd> "
1341,<S2SV_StartBug> context . Xtogo = i -> width ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ( i -> width > i -> parent -> width ) || ( i -> height > i -> parent -> height ) ) { # if ! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log , ""***<S2SV_blank>ERROR<S2SV_blank>***<S2SV_blank>Image<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>global<S2SV_blank>GIF<S2SV_blank>canvas<S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if ! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log , ""***<S2SV_blank>WARNING<S2SV_blank>***<S2SV_blank>Adjusting<S2SV_blank>X<S2SV_blank>position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if ! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log , ""***<S2SV_blank>WARNING<S2SV_blank>***<S2SV_blank>Adjusting<S2SV_blank>Y<S2SV_blank>position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } "
1342,<S2SV_StartBug> if ( p + l > buf + n ) { <S2SV_EndBug> <S2SV_StartBug> if ( p + l > buf + n ) { <S2SV_EndBug> <S2SV_StartBug> if ( p + l > buf + n ) { <S2SV_EndBug> <S2SV_StartBug> if ( p + l > buf + n ) { <S2SV_EndBug> ,<S2SV_ModStart> l > ( unsigned ) ( <S2SV_ModEnd> <S2SV_ModStart> - p ) <S2SV_ModStart> l > ( unsigned ) ( <S2SV_ModEnd> <S2SV_ModStart> - p ) <S2SV_ModStart> l > ( unsigned ) ( <S2SV_ModEnd> <S2SV_ModStart> - p ) <S2SV_ModStart> l > ( unsigned ) ( <S2SV_ModEnd> <S2SV_ModStart> - p ) 
1343,<S2SV_StartBug> RAnalOp next_op ; <S2SV_EndBug> ,<S2SV_ModStart> = { 0 } 
1344,"<S2SV_StartBug> # define ThrowDCMException ( exception , message ) { if ( info . scale != ( Quantum * ) NULL ) info . scale = ( Quantum * ) RelinquishMagickMemory ( info . scale ) ; if ( data != ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap != ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( bluemap != ( int * ) NULL ) bluemap = ( int * ) RelinquishMagickMemory ( bluemap ) ; if ( greenmap != ( int * ) NULL ) greenmap = ( int * ) RelinquishMagickMemory ( greenmap ) ; if ( redmap != ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( stream_info -> offsets != ( ssize_t * ) NULL ) stream_info -> offsets = ( ssize_t * ) RelinquishMagickMemory ( stream_info -> offsets ) ; if ( stream_info != ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> if ( tag == 0xFFFEE0DD ) <S2SV_EndBug> ","<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> length > ( size_t ) GetBlobSize ( image ) ) ThrowDCMException ( CorruptImageError , ""InsufficientImageDataInFile"" ) ; if ( "
1345,<S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! recovery_started ) { recovery_abort ( ) ; fsm_sendFailure ( FailureType_Failure_UnexpectedMessage , ""Not<S2SV_blank>in<S2SV_blank>Recovery<S2SV_blank>mode"" ) ; layoutHome ( ) ; return ; } "
1346,"<S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_EHT1 , hashTable [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_EHT3 , hashTable [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_EHT4 , hashTable [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT1<S2SV_blank>=<S2SV_blank>%04"" PRIX16 ""\\r\\n"" , enc624j600ReadReg ( interface , ENC624J600_REG_EHT1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT2<S2SV_blank>=<S2SV_blank>%04"" PRIX16 ""\\r\\n"" , enc624j600ReadReg ( interface , ENC624J600_REG_EHT2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT3<S2SV_blank>=<S2SV_blank>%04"" PRIX16 ""\\r\\n"" , enc624j600ReadReg ( interface , ENC624J600_REG_EHT3 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT4<S2SV_blank>=<S2SV_blank>%04"" PRIX16 ""\\r\\n"" , enc624j600ReadReg ( interface , ENC624J600_REG_EHT4 ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ENC624J600_EHT1 , hashTable [ 0 ] ) ; enc624j600WriteReg ( interface , ENC624J600_EHT2 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EHT3 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EHT4 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EHT1 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EHT2 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EHT3 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EHT4 <S2SV_ModEnd> "
1347,"<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( packets + 256UL , image -> rows * <S2SV_EndBug> ",<S2SV_ModStart> 257UL <S2SV_ModEnd> 
1348,"<S2SV_StartBug> if ( containsForbiddenChars ( p , l ) ) { <S2SV_EndBug> ","<S2SV_ModStart> memset ( newserv , 0 , sizeof ( struct service ) ) ; "
1349,"<S2SV_StartBug> WORD32 i ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < BUF_MGR_MAX_CNT ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> ihevc_buf_mgr_release ( ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr , i , BUF_MGR_REF ) ; <S2SV_EndBug> ","<S2SV_ModStart> , j <S2SV_ModStart> j = 0 ; j < ps_codec -> i4_max_dpb_size ; j <S2SV_ModEnd> <S2SV_ModStart> j <S2SV_ModEnd> "
1350,"<S2SV_StartBug> ret = put_user ( task_thread_info ( child ) -> tp_value , <S2SV_EndBug> ",<S2SV_ModStart> [ 0 ] 
1351,<S2SV_StartBug> goto fail ; <S2SV_EndBug> ,<S2SV_ModStart> ret = - EINVAL ; 
1352,"<S2SV_StartBug> static char * print_object ( cJSON * item , int depth , int fmt ) <S2SV_EndBug> <S2SV_StartBug> while ( child ) { <S2SV_EndBug> <S2SV_StartBug> names [ i ] = str = print_string_ptr ( child -> string ) ; <S2SV_EndBug> <S2SV_StartBug> entries [ i ++ ] = ret = print_value ( child , depth , fmt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! fail ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < numentries ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> if ( fmt ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < numentries ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < depth ; ++ j ) <S2SV_EndBug> <S2SV_StartBug> strcpy ( ptr , names [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> ptr += strlen ( names [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( fmt ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < depth - 1 ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> * ptr ++ = 0 ; <S2SV_EndBug> ","<S2SV_ModStart> , printbuffer * p <S2SV_ModStart> size_t tmplen = 0 ; <S2SV_ModStart> numentries ++ , child = child -> next ; if ( ! numentries ) { if ( p ) out = ensure ( p , fmt ? depth + 4 : 3 ) ; else out = ( char * ) cJSON_malloc ( fmt ? depth + 4 : 3 ) ; if ( ! out ) return 0 ; ptr = out ; * ptr ++ = '{' ; if ( fmt ) { * ptr ++ = '\\n' ; for ( i = 0 ; i < depth ; i ++ ) * ptr ++ = '\\t' ; } * ptr ++ = '}' ; * ptr ++ = 0 ; return out ; } if ( p ) { i = p -> offset ; len = fmt ? 2 : 1 ; ptr = ensure ( p , len + 1 ) ; if ( ! ptr ) return 0 ; * ptr ++ = '{' ; if ( fmt ) * ptr ++ = '\\n' ; * ptr = 0 ; p -> offset += len ; child = item -> child ; depth ++ ; while ( child ) { if ( fmt ) { ptr = ensure ( p , depth ) ; if ( ! ptr ) return 0 ; for ( j = 0 ; j < depth ; j ++ ) * ptr ++ = '\\t' ; p -> offset += depth ; } print_string_ptr ( child -> string , p ) ; p -> offset = update ( p ) ; len = fmt ? 2 : 1 ; ptr = ensure ( p , len ) ; if ( ! ptr ) return 0 ; * ptr ++ = ':' ; if ( fmt ) * ptr ++ = '\\t' ; p -> offset += len ; print_value ( child , depth , fmt , p ) ; p -> offset = update ( p ) ; len = ( fmt ? 1 : 0 ) + ( child -> next ? 1 : 0 ) ; ptr = ensure ( p , len + 1 ) ; if ( ! ptr ) return 0 ; if ( child -> next ) * ptr ++ = ',' ; if ( fmt ) * ptr ++ = '\\n' ; * ptr = 0 ; p -> offset += len ; child = child -> next ; } ptr = ensure ( p , fmt ? ( depth + 1 ) : 2 ) ; if ( ! ptr ) return 0 ; if ( fmt ) for ( i = 0 ; i < depth - 1 ; i ++ ) * ptr ++ = '\\t' ; * ptr ++ = '}' ; * ptr = 0 ; out = ( p -> buffer ) + i ; } else { entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ; if ( ! entries ) return 0 ; names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ; if ( ! names ) { cJSON_free ( entries ) ; return 0 ; } memset ( entries , 0 , sizeof ( char * ) * numentries ) ; memset ( names , 0 , sizeof ( char * ) * numentries ) ; child = item -> child ; depth ++ ; if ( fmt ) len += depth ; while ( child && ! fail ) <S2SV_ModEnd> <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> i ++ <S2SV_ModEnd> <S2SV_ModStart> if ( fmt ) <S2SV_ModEnd> <S2SV_ModStart> i ++ ) <S2SV_ModEnd> <S2SV_ModStart> j ++ ) <S2SV_ModEnd> <S2SV_ModStart> tmplen = strlen ( <S2SV_ModEnd> <S2SV_ModStart> memcpy ( ptr , <S2SV_ModEnd> <S2SV_ModStart> , tmplen ) ; ptr += tmplen <S2SV_ModEnd> <S2SV_ModStart> if ( fmt ) <S2SV_ModEnd> <S2SV_ModStart> i ++ ) <S2SV_ModEnd> <S2SV_ModStart> * ptr ++ = 0 ; } <S2SV_ModEnd> "
1353,<S2SV_StartBug> struct ikev2_id id ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( * ext ) ; <S2SV_EndBug> ,<S2SV_ModStart> const struct ikev2_id * idp ; <S2SV_ModStart> idp = ( const struct ikev2_id * ) ext ; <S2SV_ModStart> idp <S2SV_ModEnd> 
1354,"<S2SV_StartBug> ber_parse_header ( STREAM s , int tagval , int * length ) <S2SV_EndBug> ",<S2SV_ModStart> uint32 <S2SV_ModEnd> 
1355,<S2SV_StartBug> other = unix_peer_get ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unix_peer ( other ) != sk ) { <S2SV_EndBug> <S2SV_StartBug> if ( unix_recvq_full ( other ) ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && unix_peer ( <S2SV_ModEnd> <S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart> && unix_dgram_peer_wake_me ( sk , other ) <S2SV_ModStart> unix_state_unlock ( sk <S2SV_ModEnd> "
1356,<S2SV_StartBug> size_t <S2SV_EndBug> <S2SV_StartBug> value = ( size_t ) ( buffer [ 0 ] << 24 ) ; <S2SV_EndBug> <S2SV_StartBug> value |= buffer [ 1 ] << 16 ; <S2SV_EndBug> <S2SV_StartBug> value |= buffer [ 2 ] << 8 ; <S2SV_EndBug> <S2SV_StartBug> value |= buffer [ 3 ] ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffffffff ) ; <S2SV_EndBug> ,<S2SV_ModStart> unsigned int <S2SV_ModEnd> <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( unsigned int ) <S2SV_ModStart> ( unsigned int ) <S2SV_ModStart> ( unsigned int ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1357,"<S2SV_StartBug> outpos += sprintf ( outpos , ""\\n<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>re"" , x , y , w , h ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> sprintf ( outputbuffer <S2SV_ModEnd> <S2SV_ModStart> sendClean ( outputbuffer ) ; 
1358,"<S2SV_StartBug> if ( pskb_expand_head ( skb_out , 0 , size - skb -> len , GFP_ATOMIC ) < 0 ) { <S2SV_EndBug> ",<S2SV_ModStart> skb_out <S2SV_ModEnd> 
1359,<S2SV_StartBug> void exit_io_context ( void ) <S2SV_EndBug> <S2SV_StartBug> task_lock ( current ) ; <S2SV_EndBug> <S2SV_StartBug> ioc = current -> io_context ; <S2SV_EndBug> <S2SV_StartBug> current -> io_context = NULL ; <S2SV_EndBug> <S2SV_StartBug> task_unlock ( current ) ; <S2SV_EndBug> ,<S2SV_ModStart> struct task_struct * task <S2SV_ModEnd> <S2SV_ModStart> task <S2SV_ModEnd> <S2SV_ModStart> task <S2SV_ModEnd> <S2SV_ModStart> task <S2SV_ModEnd> <S2SV_ModStart> task <S2SV_ModEnd> 
1360,<S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( ! access_ok ( VERIFY_READ , uregs , sizeof ( elf_xtregs_t ) ) ) return - EFAULT "
1361,<S2SV_StartBug> * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; <S2SV_EndBug> <S2SV_StartBug> if ( header -> buffer . length < token_wrapper_len + 14 ) { <S2SV_EndBug> ,<S2SV_ModStart> ; return GSS_S_DEFECTIVE_TOKEN ; } if ( ctx -> seq == NULL ) { * minor_status = 0 <S2SV_ModStart> 22 <S2SV_ModEnd> 
1362,"<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> ret = xen_pcibk_read_config_word ( dev , offset , value , data ) ; <S2SV_EndBug> <S2SV_StartBug> * value |= PCI_COMMAND_IO ; <S2SV_EndBug> ",<S2SV_ModStart> ret = pci_read_config_word <S2SV_ModEnd> <S2SV_ModStart> ) ; const struct pci_cmd_info * cmd = data ; * value &= PCI_COMMAND_GUEST ; <S2SV_ModEnd> <S2SV_ModStart> cmd -> val & ~ PCI_COMMAND_GUEST ; <S2SV_ModEnd> 
1363,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> vp9_ref_frame_t * frame = va_arg ( args , vp9_ref_frame_t * ) ; <S2SV_EndBug> <S2SV_StartBug> YV12_BUFFER_CONFIG * fb ; <S2SV_EndBug> <S2SV_StartBug> vp9_get_reference_enc ( ctx -> cpi , frame -> idx , & fb ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> = get_ref_frame ( & <S2SV_ModEnd> <S2SV_ModStart> -> common <S2SV_ModStart> ) ; if ( fb == NULL ) return VPX_CODEC_ERROR <S2SV_ModEnd> 
1364,<S2SV_StartBug> kfree ( fpl ) ; <S2SV_EndBug> ,<S2SV_ModStart> free_uid ( fpl -> user ) ; 
1365,<S2SV_StartBug> kiocb_batch_free ( & batch ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ctx , "
1366,<S2SV_StartBug> req -> started = false ; <S2SV_EndBug> <S2SV_StartBug> if ( dep -> number > 1 ) <S2SV_EndBug> ,"<S2SV_ModStart> dwc3_gadget_del_and_unmap_request ( dep , req , status <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1367,"<S2SV_StartBug> char prefix = ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> char * type = ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( prefix != '+' && prefix != '-' && prefix != '=' ) { <S2SV_EndBug> <S2SV_StartBug> YYFREE ( ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) ) ; <S2SV_EndBug> <S2SV_StartBug> { ( yyval . Queue ) = enqueue ( ( yyvsp [ ( 1 ) - ( 2 ) ] . Queue ) , create_ival ( ( yyvsp [ ( 2 ) - ( 2 ) ] . Integer ) ) ) ; } <S2SV_EndBug> <S2SV_StartBug> { ( yyval . Queue ) = enqueue_in_new_queue ( create_ival ( ( yyvsp [ ( 1 ) - ( 1 ) ] . Integer ) ) ) ; } <S2SV_EndBug> <S2SV_StartBug> case 237 : <S2SV_EndBug> <S2SV_StartBug> # line 1082 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1090 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1091 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1095 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1106 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1120 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1124 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1125 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1129 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1130 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1134 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1135 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1140 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1144 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1148 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1152 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1153 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1158 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1162 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1163 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1168 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1170 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1172 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1174 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1176 ""ntp_parser.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3826 ""ntp_parser.c"" <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; switch ( <S2SV_ModEnd> <S2SV_ModStart> [ 0 ] ) { case '+' : case '-' : case '=' : prefix = ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) [ 0 ] ; type = ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) <S2SV_ModStart> break ; default : prefix = '=' ; type = ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) ; } ( yyval . Attr_val ) = create_attr_sval ( prefix , estrdup ( type ) ) ; YYFREE ( ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) ) ; } break ; case 216 : # line 1022 ""ntp_parser.y"" { enqueue ( cfgt . nic_rules , create_nic_rule_node ( ( yyvsp [ ( 3 ) - ( 3 ) ] . Integer ) , NULL , ( yyvsp [ ( 2 ) - ( 3 ) ] . Integer ) ) ) ; } break ; case 217 : # line 1027 ""ntp_parser.y"" { enqueue ( cfgt . nic_rules , create_nic_rule_node ( 0 , ( yyvsp [ ( 3 ) - ( 3 ) ] . String ) , ( yyvsp [ ( 2 ) - ( 3 ) ] . Integer ) ) ) ; } break ; case 227 : # line 1058 ""ntp_parser.y"" { ( yyval . Queue ) = enqueue ( ( yyvsp [ ( 1 ) - ( 2 ) ] . Queue ) , create_ival ( ( yyvsp [ ( 2 ) - ( 2 ) ] . Integer ) ) ) ; } break ; case 228 : # line 1059 ""ntp_parser.y"" { ( yyval . Queue ) = enqueue_in_new_queue ( create_ival ( ( yyvsp [ ( 1 ) - ( 1 ) ] . Integer ) ) ) ; } break ; case 229 : # line 1064 ""ntp_parser.y"" { ( yyval . Queue ) = enqueue ( ( yyvsp [ ( 1 ) - ( 2 ) ] . Queue ) , ( yyvsp [ ( 2 ) - ( 2 ) ] . Attr_val ) ) ; } break ; case 230 : # line 1066 ""ntp_parser.y"" { ( yyval . Queue ) = enqueue_in_new_queue ( ( yyvsp [ ( 1 ) - ( 1 ) ] . Attr_val ) ) ; } break ; case 231 : # line 1071 ""ntp_parser.y"" { ( yyval . Attr_val ) = create_attr_ival ( 'i' , ( yyvsp [ ( 1 ) - ( 1 ) ] . Integer ) ) ; } break ; case 233 : # line 1077 ""ntp_parser.y"" { ( yyval . Attr_val ) = create_attr_shorts ( '-' , ( yyvsp [ ( 2 ) - ( 5 ) ] . Integer ) , ( yyvsp [ ( 4 ) - ( 5 ) ] . Integer ) ) ; } break ; case 234 : # line 1081 ""ntp_parser.y"" { ( yyval . Queue ) = enqueue ( ( yyvsp [ ( 1 ) - ( 2 ) ] . Queue ) , create_pval ( ( yyvsp [ ( 2 ) - ( 2 <S2SV_ModEnd> <S2SV_ModStart> ) ; } break ; case 235 : # line 1082 ""ntp_parser.y"" { ( yyval . Queue ) = enqueue_in_new_queue ( create_pval ( ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) ) ) ; } break ; case 236 : # line 1086 ""ntp_parser.y"" { ( yyval . Queue ) = enqueue ( ( yyvsp [ ( 1 ) - ( 2 ) ] <S2SV_ModEnd> <S2SV_ModStart> , ( yyvsp [ ( 2 ) - ( 2 ) ] . Address_node ) ) ; } break ; case 237 : # line 1087 ""ntp_parser.y"" { ( yyval <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( yyvsp [ ( 1 ) - ( 1 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 1092 <S2SV_ModEnd> <S2SV_ModStart> 1100 <S2SV_ModEnd> <S2SV_ModStart> 1101 <S2SV_ModEnd> <S2SV_ModStart> 1105 <S2SV_ModEnd> <S2SV_ModStart> 1116 <S2SV_ModEnd> <S2SV_ModStart> 1130 <S2SV_ModEnd> <S2SV_ModStart> 1134 <S2SV_ModEnd> <S2SV_ModStart> 1135 <S2SV_ModEnd> <S2SV_ModStart> 1139 <S2SV_ModEnd> <S2SV_ModStart> 1140 <S2SV_ModEnd> <S2SV_ModStart> 1144 <S2SV_ModEnd> <S2SV_ModStart> 1145 <S2SV_ModEnd> <S2SV_ModStart> 1150 <S2SV_ModEnd> <S2SV_ModStart> 1154 <S2SV_ModEnd> <S2SV_ModStart> 1158 <S2SV_ModEnd> <S2SV_ModStart> 1162 <S2SV_ModEnd> <S2SV_ModStart> 1163 <S2SV_ModEnd> <S2SV_ModStart> 1168 <S2SV_ModEnd> <S2SV_ModStart> 1172 <S2SV_ModEnd> <S2SV_ModStart> 1173 <S2SV_ModEnd> <S2SV_ModStart> 1178 <S2SV_ModEnd> <S2SV_ModStart> 1180 <S2SV_ModEnd> <S2SV_ModStart> 1182 <S2SV_ModEnd> <S2SV_ModStart> 1184 <S2SV_ModEnd> <S2SV_ModStart> 1186 <S2SV_ModEnd> <S2SV_ModStart> 3836 <S2SV_ModEnd> "
1368,"<S2SV_StartBug> [ DISCE_PROBE ] = sas_probe_devices , <S2SV_EndBug> <S2SV_StartBug> [ DISCE_RESUME ] = sas_resume_devices , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1369,"<S2SV_StartBug> const char * name , int rep_quick ) <S2SV_EndBug> <S2SV_StartBug> mysql_file_close ( new_file , MYF ( 0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( param -> testflag & T_BACKUP_DATA ? <S2SV_EndBug> ","<S2SV_ModStart> , my_bool no_copy_stat <S2SV_ModStart> myf flags = 0 ; if ( param -> testflag & T_BACKUP_DATA ) flags |= MY_REDEL_MAKE_BACKUP ; if ( no_copy_stat ) flags |= MY_REDEL_NO_COPY_STAT ; <S2SV_ModStart> flags <S2SV_ModEnd> "
1370,"<S2SV_StartBug> # if uECC_VLI_NATIVE_LITTLE_ENDIAN <S2SV_EndBug> <S2SV_StartBug> EccPoint_mult ( p , curve -> G , k2 [ ! carry ] , 0 , num_n_bits + 1 , curve ) ; <S2SV_EndBug> ","<S2SV_ModStart> uECC_word_t * initial_Z = 0 ; <S2SV_ModStart> if ( g_rng_function ) { if ( ! uECC_generate_random_int ( k2 [ carry ] , curve -> p , num_words ) ) { return 0 ; } initial_Z = k2 [ carry ] ; } <S2SV_ModStart> initial_Z <S2SV_ModEnd> "
1371,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>[|dao-truncated]"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , rpl_tstr <S2SV_ModEnd> "
1372,<S2SV_StartBug> int family = sk -> sk_family ; <S2SV_EndBug> <S2SV_StartBug> if ( addr_len ) { <S2SV_EndBug> <S2SV_StartBug> sin = ( struct sockaddr_in * ) msg -> msg_name ; <S2SV_EndBug> <S2SV_StartBug> if ( isk -> cmsg_flags ) <S2SV_EndBug> <S2SV_StartBug> sin6 = ( struct sockaddr_in6 * ) msg -> msg_name ; <S2SV_EndBug> <S2SV_StartBug> IP6CB ( skb ) -> iif ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> struct sockaddr_in * <S2SV_ModStart> * addr_len = sizeof ( * sin ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sin6 = ( struct sockaddr_in6 * <S2SV_ModStart> ) ; * addr_len = sizeof ( * sin6 
1373,<S2SV_StartBug> flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | <S2SV_EndBug> <S2SV_StartBug> if ( mode & FALLOC_FL_KEEP_SIZE ) <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & inode -> i_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> if ( max_blocks > 0 ) { <S2SV_EndBug> ,"<S2SV_ModStart> mutex_lock ( & inode -> i_mutex ) ; if ( ! ( ext4_test_inode_flag ( inode , EXT4_INODE_EXTENTS ) ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if ( ! <S2SV_ModEnd> <S2SV_ModStart> && offset + len > i_size_read ( inode ) ) { new_size = offset + len ; ret = inode_newsize_ok ( inode , new_size ) ; if ( ret ) goto out_mutex ; } flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT ; if ( mode & FALLOC_FL_KEEP_SIZE ) <S2SV_ModStart> if ( partial_begin || partial_end ) { ret = ext4_alloc_file_blocks ( file , round_down ( offset , 1 << blkbits ) >> blkbits , ( round_up ( ( offset + len ) , 1 << blkbits ) - round_down ( offset , 1 << blkbits ) ) >> blkbits , new_size , flags , mode ) ; if ( ret ) goto out_mutex <S2SV_ModEnd> <S2SV_ModStart> flags |= ( EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ) ; "
1374,<S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( pool -> free_total < NW_BUF_POOL_MAX_SIZE ) <S2SV_ModStart> else { free ( buf ) ; } 
1375,"<S2SV_StartBug> bpf_map_inc ( map , true ) ; <S2SV_EndBug> ",<S2SV_ModStart> map = 
1376,"<S2SV_StartBug> while ( * cp ) { <S2SV_EndBug> <S2SV_StartBug> NEARDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_EndBug> <S2SV_StartBug> int dcount = 0 ; <S2SV_EndBug> <S2SV_StartBug> cp ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( * cp == 'x' || * cp == 'X' ) <S2SV_EndBug> <S2SV_StartBug> for ( ++ cp ; * cp && ( dp = index ( hex , * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) <S2SV_EndBug> <S2SV_StartBug> else if ( * cp == 'o' || * cp == 'O' ) <S2SV_EndBug> <S2SV_StartBug> cp ++ ; <S2SV_EndBug> <S2SV_StartBug> * tp ++ = cval ; <S2SV_EndBug> ","<S2SV_ModStart> static <S2SV_ModEnd> <S2SV_ModStart> oct [ ] = ""01234567"" , dec [ ] = ""0123456789"" , <S2SV_ModStart> cval , meta , dcount ; while ( * cp ) { meta = ( * cp == '\\\\' && ( cp [ 1 ] == 'm' || cp [ 1 ] == 'M' ) && cp [ 2 ] ) ; if ( meta ) cp += 2 ; cval = dcount <S2SV_ModEnd> <S2SV_ModStart> if ( ( * cp != '\\\\' && * cp != '^' ) || ! cp [ 1 ] ) { cval = * cp ++ ; } else if ( * cp == '^' ) { cval = ( * ++ cp & 0x1f ) ; ++ cp ; } else if ( index ( dec , cp [ 1 ] ) ) { ++ cp ; do { cval = ( cval * 10 ) + ( * cp - '0' ) ; } while ( * ++ cp && index ( dec , * cp ) && ++ dcount < 3 ) ; } else if ( ( cp [ 1 ] == 'o' || cp [ 1 ] == 'O' ) && cp [ 2 ] && index ( oct , cp [ 2 ] ) ) { cp += 2 ; do { cval = ( cval * 8 ) + ( * cp - '0' ) ; } while ( * ++ cp && index ( oct , * cp ) && ++ dcount < 3 ) ; } else if ( ( cp [ 1 ] <S2SV_ModEnd> <S2SV_ModStart> cp [ 1 ] <S2SV_ModEnd> <S2SV_ModStart> && cp [ 2 ] <S2SV_ModEnd> <S2SV_ModStart> cp [ 2 ] ) ) != 0 ) { cp += 2 ; do { <S2SV_ModEnd> <S2SV_ModStart> } while ( * ++ cp && ( dp = index ( hex , * cp ) ) != 0 && ++ dcount < 2 ) ; } else <S2SV_ModEnd> <S2SV_ModStart> ++ cp ; } <S2SV_ModEnd> <S2SV_ModStart> ( char ) "
1377,<S2SV_StartBug> int file_is_y4m ( const char detect [ 4 ] ) { <S2SV_EndBug> ,<S2SV_ModStart> static 
1378,<S2SV_StartBug> if ( size_left && size_left < 4 ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1379,"<S2SV_StartBug> PIX * pixc , * pixm , * pixg , * pixd ; <S2SV_EndBug> <S2SV_StartBug> if ( ( pixc = pixFewColorsOctcubeQuant1 ( pixs , level ) ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> return ( PIX * ) ERROR_PTR ( ""too<S2SV_blank>many<S2SV_blank>colors"" , procName , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> * pix1 , <S2SV_ModStart> pix1 <S2SV_ModEnd> <S2SV_ModStart> ) ; pixc = pixConvertTo8 ( pix1 , 1 ) ; pixDestroy ( & pix1 "
1380,"<S2SV_StartBug> int i , ubits = BN_num_bits ( u ) , vbits = BN_num_bits ( v ) , <S2SV_EndBug> <S2SV_StartBug> if ( ubits <= BN_BITS2 && udp [ 0 ] == 1 ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ",<S2SV_ModStart> ; int <S2SV_ModEnd> <S2SV_ModStart> ; int <S2SV_ModEnd> <S2SV_ModStart> ; int <S2SV_ModEnd> <S2SV_ModStart> ) { if ( <S2SV_ModEnd> <S2SV_ModStart> 0 ) goto err ; if ( udp [ 0 ] == <S2SV_ModStart> } 
1381,<S2SV_StartBug> v_fn_ptr . vf = vp8_mse16x16 ; <S2SV_EndBug> ,<S2SV_ModStart> vpx_mse16x16 <S2SV_ModEnd> 
1382,"<S2SV_StartBug> strlcpy ( rkpp . type , ""kpp"" , sizeof ( rkpp . type ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> strncpy <S2SV_ModEnd> 
1383,<S2SV_StartBug> int strindex = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> size_t <S2SV_ModEnd> 
1384,"<S2SV_StartBug> value = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( msg -> oob ) { <S2SV_EndBug> <S2SV_StartBug> nbits = bits & 7 ; <S2SV_EndBug> <S2SV_StartBug> Huff_offsetReceive ( msgHuff . decompressor . tree , & get , msg -> data , & msg -> bit ) ; <S2SV_EndBug> <S2SV_StartBug> value |= ( get << ( i + nbits ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> if ( msg -> readcount + ( bits >> 3 ) > msg -> cursize ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> if ( msg -> bit + nbits > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> , msg -> cursize << 3 <S2SV_ModStart> if ( msg -> bit > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } "
1385,"<S2SV_StartBug> int err = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> for ( idx = 0 ; idx < kcontrol -> count ; idx ++ , id . index ++ , id . numid ++ ) <S2SV_EndBug> ",<S2SV_ModStart> unsigned int count ; <S2SV_ModStart> count = kcontrol -> count ; <S2SV_ModStart>  <S2SV_ModEnd> 
1386,<S2SV_StartBug> free_netdev ( net ) ; <S2SV_EndBug> ,<S2SV_ModStart> cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ; 
1387,<S2SV_StartBug> int overhead = 16 + 4 + strlen ( ns ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> int size = overhead ; <S2SV_EndBug> ,<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> 
1388,"<S2SV_StartBug> save_text_from_text_view ( GTK_TEXT_VIEW ( textview ) , item_name ) ; <S2SV_EndBug> ",<S2SV_ModStart> { <S2SV_ModStart> problem_data_reload_from_dump_dir ( ) ; update_gui_state_from_problem_data ( 0 ) ; } 
1389,<S2SV_StartBug> last_id = ntohs ( * pid ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( plen < 0 ) return 0 ; 
1390,<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> struct iattr iattr ; retval = posix_acl_update_mode ( inode , & iattr . ia_mode , & acl ) ; if ( retval <S2SV_ModEnd> <S2SV_ModStart> if ( ! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1391,<S2SV_StartBug> if ( bin -> methods [ i ] . class_id > bin -> header . types_size - 1 ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1392,<S2SV_StartBug> case NPPVformValue : <S2SV_EndBug> <S2SV_StartBug> type = RPC_TYPE_BOOLEAN ; <S2SV_EndBug> ,<S2SV_ModStart> : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> case NPPVpluginUrlRequestsDisplayedBool : case NPPVpluginWantsAllNetworkStreams : case NPPVpluginCancelSrcStream : case NPPVSupportsAdvancedKeyHandling : 
1393,"<S2SV_StartBug> int alloc = ( length ? length : ( int ) strlen ( string ) ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> CURLcode res ; <S2SV_EndBug> <S2SV_StartBug> res = Curl_convert_from_network ( handle , & in , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( res ) { <S2SV_EndBug> <S2SV_StartBug> * olen = strindex ; <S2SV_EndBug> ","<S2SV_ModStart> char * str = NULL ; size_t inputlen = length ; size_t outputlen <S2SV_ModEnd> <S2SV_ModStart> = Curl_urldecode <S2SV_ModEnd> <S2SV_ModStart> string , inputlen , & str , & outputlen , FALSE <S2SV_ModEnd> <S2SV_ModStart> return NULL <S2SV_ModEnd> <S2SV_ModStart> curlx_uztosi ( outputlen ) ; return str <S2SV_ModEnd> "
1394,"<S2SV_StartBug> void nego_process_negotiation_response ( rdpNego * nego , wStream * s ) <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> FALSE <S2SV_ModStart> return TRUE ; 
1395,"<S2SV_StartBug> int i , target_bits_per_mb ; <S2SV_EndBug> <S2SV_StartBug> const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type , i , <S2SV_EndBug> <S2SV_StartBug> correction_factor ) ; <S2SV_EndBug> <S2SV_StartBug> return q ; <S2SV_EndBug> ","<S2SV_ModStart> , bits_per_mb_at_this_q <S2SV_ModStart> if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cm -> seg . enabled && cpi -> svc . temporal_layer_id == 0 && cpi -> svc . spatial_layer_id == 0 ) { bits_per_mb_at_this_q = ( int ) vp9_cyclic_refresh_rc_bits_per_mb ( cpi , i , correction_factor ) ; } else { <S2SV_ModEnd> <S2SV_ModStart> , cm -> bit_depth ) ; } <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> oxcf . rc_mode == VPX_CBR && ( cpi -> rc . rc_1_frame * cpi -> rc . rc_2_frame == - 1 ) && cpi -> rc . q_1_frame != cpi -> rc . q_2_frame ) { q = clamp ( q , MIN ( cpi -> rc . q_1_frame , cpi -> rc . q_2_frame ) , MAX ( cpi -> rc . q_1_frame , cpi -> rc . q_2_frame ) ) ; } "
1396,<S2SV_StartBug> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; <S2SV_EndBug> ,<S2SV_ModStart> TJA1101_CONFIG1_MII_MODE_RMII_50MHZ_REF_CLK_OUT <S2SV_ModEnd> 
1397,"<S2SV_StartBug> strlcpy ( rcipher . type , ""cipher"" , sizeof ( rcipher . type ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> strncpy <S2SV_ModEnd> 
1398,<S2SV_StartBug> if ( len < sizeof ( * prep ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> || ! ND_TTEST ( * prep ) ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1399,"<S2SV_StartBug> mark_object ( & c -> object , NULL , NULL , data ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1400,"<S2SV_StartBug> freq_reg = devm_ioremap ( dev , res -> start , resource_size ( res ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! res ) return - EINVAL ; 
1401,"<S2SV_StartBug> if ( TYPE ( CHILD ( n , i ) ) == COMMA ) <S2SV_EndBug> ",<S2SV_ModStart> i < NCH ( n ) && 
1402,"<S2SV_StartBug> MB_PREDICTION_MODE mode , TX_SIZE tx_size , <S2SV_EndBug> <S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , uint8_t , left_col , 64 ) ; <S2SV_EndBug> <S2SV_StartBug> once ( init_intra_pred_fn_ptrs ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( left_col , 129 , 64 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( x0 + 2 * bs <= frame_width ) { <S2SV_EndBug> <S2SV_StartBug> if ( right_available && bs == 4 ) { <S2SV_EndBug> <S2SV_StartBug> if ( right_available && bs == 4 ) { <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( above_row , above_ref , bs ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bs == 4 && right_available ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> above_row [ - 1 ] = 127 ; <S2SV_EndBug> ","<S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> DECLARE_ALIGNED <S2SV_ModEnd> <S2SV_ModStart> [ 32 ] ) ; DECLARE_ALIGNED ( 16 , uint8_t , above_data [ 64 + 16 ] <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( extend_modes [ mode ] & NEED_LEFT ) { <S2SV_ModEnd> <S2SV_ModStart> else { memset ( left_col , 129 , bs ) ; } } if ( extend_modes [ mode ] & NEED_ABOVE ) { <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memcpy ( above_row , above_ref , bs ) ; } else if ( x0 <S2SV_ModEnd> <S2SV_ModStart> memcpy ( above_row , above_ref , r ) ; memset ( above_row + r , above_row [ r - 1 ] , x0 + bs - frame_width ) ; } <S2SV_ModEnd> <S2SV_ModStart> memcpy ( above_row , above_ref , bs ) ; } } above_row [ - 1 ] = left_available ? above_ref [ - 1 ] : 129 ; } else { memset ( above_row , 127 , bs ) ; above_row [ - 1 ] = 127 ; } } if ( extend_modes [ mode ] & NEED_ABOVERIGHT ) { if ( up_available ) { const uint8_t * above_ref = ref - ref_stride ; if ( xd -> mb_to_right_edge < 0 ) { if ( x0 + 2 * bs <= frame_width ) { if ( right_available && bs == 4 ) { memcpy ( above_row , above_ref , 2 * bs ) ; } else { memcpy ( above_row , above_ref , bs ) ; memset ( above_row + bs , above_row [ bs - 1 ] , bs ) ; } } else if ( x0 + bs <= frame_width ) { const int r = frame_width - x0 ; if ( right_available && bs == 4 ) { memcpy ( above_row , above_ref , r ) ; memset ( above_row + r , above_row [ r - 1 ] , x0 + 2 * bs - frame_width ) ; } else { memcpy ( above_row , above_ref , bs ) ; memset ( above_row + bs , above_row [ bs - 1 ] , bs ) ; } } else if ( x0 <= frame_width ) { const int r = frame_width - x0 ; memcpy ( above_row , above_ref , r ) ; memset ( above_row + r , above_row [ r - 1 ] , x0 + 2 * bs - frame_width ) ; } } else { <S2SV_ModEnd> <S2SV_ModStart> && left_available ) { const_above_row = above_ref ; } else { memcpy ( above_row , above_ref , bs ) ; if ( bs == 4 && right_available ) memcpy ( above_row + bs , above_ref + bs , bs ) ; else memset ( above_row + bs , above_row [ bs - 1 ] , bs ) ; } } <S2SV_ModEnd> <S2SV_ModStart> else { memset <S2SV_ModEnd> <S2SV_ModStart> } "
1403,<S2SV_StartBug> end ++ ; <S2SV_EndBug> ,<S2SV_ModStart> if ( pattern [ end ] == 0 ) break ; 
1404,"<S2SV_StartBug> void ftoa_bounded_extra ( JsVarFloat val , char * str , size_t len , int radix , int fractionalDigits ) { <S2SV_EndBug> <S2SV_StartBug> if ( isnan ( val ) ) strncpy ( str , ""NaN"" , len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( val < 0 ) strncpy ( str , ""-Infinity"" , len ) ; <S2SV_EndBug> <S2SV_StartBug> else strncpy ( str , ""Infinity"" , len ) ; <S2SV_EndBug> ",<S2SV_ModStart> assert ( len > 9 ) ; <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1405,"<S2SV_StartBug> jas_iccprof_t * jas_iccprof_createfrombuf ( uchar * buf , int len ) <S2SV_EndBug> ",<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
1406,<S2SV_StartBug> ei -> cur_aio_dio = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> spin_lock_init ( & ei -> i_completed_io_lock ) ; 
1407,<S2SV_StartBug> BUG_ON ( ! thresholds ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & memcg -> thresholds_lock ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! thresholds -> primary ) goto unlock <S2SV_ModStart> unlock : 
1408,"<S2SV_StartBug> static struct ion_handle * ion_handle_get_by_id ( struct ion_client * client , <S2SV_EndBug> <S2SV_StartBug> handle = idr_find ( & client -> idr , id ) ; <S2SV_EndBug> <S2SV_StartBug> return handle ? handle : ERR_PTR ( - EINVAL ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ion_handle_get_by_id_nolock ( client , id <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1409,"<S2SV_StartBug> struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , VP9_FRAME_MARKER , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , cm -> frame_type ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , cm -> show_frame ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , cm -> error_resilient_mode ) ; <S2SV_EndBug> <S2SV_StartBug> const COLOR_SPACE cs = UNKNOWN ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> profile > PROFILE_1 ) { <S2SV_EndBug> <S2SV_StartBug> assert ( cm -> profile == PROFILE_1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , get_refresh_mask ( cpi ) , REF_FRAMES ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , get_ref_frame_idx ( cpi , ref_frame ) , <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , cm -> ref_frame_sign_bias [ ref_frame ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , cm -> allow_high_precision_mv ) ; <S2SV_EndBug> <S2SV_StartBug> fix_interp_filter ( cm ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , cm -> refresh_frame_context ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , cm -> frame_parallel_decoding_mode ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> frame_context_idx , FRAME_CONTEXTS_LOG2 ) ; <S2SV_EndBug> <S2SV_StartBug> encode_segmentation ( cpi , wb ) ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> MACROBLOCKD * const xd = & cpi -> td . mb . e_mbd ; vpx_wb_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> write_sync_code ( wb ) ; write_bitdepth_colorspace_sampling ( cm , wb ) ; write_frame_size ( cm , wb ) ; } else { if ( ! cm -> show_frame ) vpx_wb_write_bit ( wb , cm -> intra_only ) ; if ( ! cm -> error_resilient_mode ) vpx_wb_write_literal ( wb , cm -> reset_frame_context , 2 ) ; if ( cm -> intra_only ) { <S2SV_ModEnd> <S2SV_ModStart> PROFILE_0 ) { write_bitdepth_colorspace_sampling ( cm , wb ) ; } vpx_wb_write_literal ( wb , get_refresh_mask ( cpi ) , REF_FRAMES ) ; write_frame_size ( cm , wb ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> <S2SV_ModStart> assert ( get_ref_frame_map_idx ( cpi , ref_frame ) != INVALID_IDX ) ; vpx_wb_write_literal ( wb , get_ref_frame_map_idx <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> , cpi -> td . counts <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> <S2SV_ModStart> cm , xd <S2SV_ModEnd> "
1410,<S2SV_StartBug> if ( bad_format ( optarg ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( bad_format ( optarg ) ) { <S2SV_EndBug> ,<S2SV_ModStart> bad_format_axis ( optarg ) ) { <S2SV_ModEnd> <S2SV_ModStart> bad_format_axis ( optarg ) ) { <S2SV_ModEnd> 
1411,"<S2SV_StartBug> p = strchr ( context -> buffer , '<S2SV_blank>' ) ; <S2SV_EndBug> <S2SV_StartBug> q = strchr ( p + 1 , '<S2SV_blank>' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> osStrchr <S2SV_ModEnd> 
1412,"<S2SV_StartBug> if ( TYPE ( CHILD ( n , i ) ) == COMMA ) <S2SV_EndBug> ",<S2SV_ModStart> i < NCH ( n ) && 
1413,"<S2SV_StartBug> vpx_memcpy ( pc -> fc . mvc , vp8_default_mv_context , sizeof ( vp8_default_mv_context ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> segment_feature_data , 0 , sizeof ( xd -> segment_feature_data ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> ref_lf_deltas , 0 , sizeof ( xd -> ref_lf_deltas ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> mode_lf_deltas , 0 , sizeof ( xd -> mode_lf_deltas ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
1414,"<S2SV_StartBug> uint16_t n ; <S2SV_EndBug> <S2SV_StartBug> Enc624j600Context * context ; <S2SV_EndBug> <S2SV_StartBug> if ( enc624j600ReadReg ( interface , ENC624J600_REG_ESTAT ) & ESTAT_PKTCNT ) <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_ERXRDPT , context -> nextPacket ) ; <S2SV_EndBug> <S2SV_StartBug> ( uint8_t * ) & context -> nextPacket , sizeof ( uint16_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & RSV_RECEIVED_OK ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> n = MIN ( n , ETH_MAX_FRAME_SIZE ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600ReadBuffer ( interface , ENC624J600_CMD_RRXDATA , context -> rxBuffer , n ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_ERXTAIL , ENC624J600_RX_BUFFER_STOP ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_ERXTAIL , context -> nextPacket - 2 ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600SetBit ( interface , ENC624J600_REG_ECON1 , ECON1_PKTDEC ) ; <S2SV_EndBug> <S2SV_StartBug> nicProcessPacket ( interface , context -> rxBuffer , n , & ancillary ) ; <S2SV_EndBug> ","<S2SV_ModStart> length <S2SV_ModEnd> <S2SV_ModStart> uint8_t header [ 8 ] ; <S2SV_ModStart> ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ERXRDPT <S2SV_ModEnd> <S2SV_ModStart> header <S2SV_ModEnd> <S2SV_ModStart> header ) ) ; context -> nextPacket = LOAD16LE ( header ) ; length = LOAD16LE ( header + 2 ) ; status = LOAD32LE ( header + 4 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ERXTAIL , <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ERXTAIL , <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ECON1 , ENC624J600_ECON1_PKTDEC <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> "
1415,<S2SV_StartBug> while ( ibuf [ ind ] == 0x01 ) { <S2SV_EndBug> ,<S2SV_ModStart> && i < gemsafe_cert_max 
1416,"<S2SV_StartBug> if ( vmx_set_msr ( vcpu , & msr ) != 0 ) { <S2SV_EndBug> ",<S2SV_ModStart> kvm_set_msr <S2SV_ModEnd> 
1417,"<S2SV_StartBug> static VALUE read_memory ( VALUE klass , VALUE content ) <S2SV_EndBug> <S2SV_StartBug> xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( <S2SV_EndBug> <S2SV_StartBug> ) ; <S2SV_EndBug> <S2SV_StartBug> return rb_schema ; <S2SV_EndBug> ","<S2SV_ModStart> int argc , VALUE * argv , VALUE klass ) { VALUE content ; VALUE parse_options ; int parse_options_int ; xmlSchemaParserCtxtPtr ctx ; <S2SV_ModEnd> <S2SV_ModStart> VALUE errors ; VALUE rb_schema ; int scanned_args = 0 ; scanned_args = rb_scan_args ( argc , argv , ""11"" , & content , & parse_options ) ; if ( scanned_args == 1 ) { parse_options = rb_const_get ( rb_const_get ( mNokogiriXml , rb_intern ( ""ParseOptions"" ) ) , rb_intern ( ""DEFAULT_SCHEMA"" ) ) ; } parse_options_int = ( int ) NUM2INT ( rb_funcall ( parse_options , rb_intern ( ""to_i"" ) , 0 ) ) ; <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> <S2SV_ModStart> rb_iv_set ( rb_schema , ""@parse_options"" , parse_options ) ; "
1418,"<S2SV_StartBug> unsigned int len ; <S2SV_EndBug> <S2SV_StartBug> struct au1200fb_device * fbdev = info -> par ; <S2SV_EndBug> <S2SV_StartBug> return io_remap_pfn_range ( vma , vma -> vm_start , off >> PAGE_SHIFT , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vm_iomap_memory <S2SV_ModEnd> <S2SV_ModStart> fbdev -> fb_phys , fbdev -> fb_len <S2SV_ModEnd> "
1419,"<S2SV_StartBug> errstr = parse_global_option ( CMD_SET_VALUE , config_opt , config_arg ) ; <S2SV_EndBug> ","<S2SV_ModStart> & new_global_options , "
1420,<S2SV_StartBug> out += 4 ; <S2SV_EndBug> <S2SV_StartBug> out += 4 ; <S2SV_EndBug> ,<S2SV_ModStart> 3 <S2SV_ModEnd> <S2SV_ModStart> 3 <S2SV_ModEnd> 
1421,"<S2SV_StartBug> if ( perf_event_overflow ( event , 1 , & data , regs ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1422,<S2SV_StartBug> if ( ( unsigned int ) arg >= cdi -> capacity ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1423,<S2SV_StartBug> err = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> if ( match -> type == type && <S2SV_EndBug> <S2SV_StartBug> out : <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> spin_lock ( & po -> bind_lock ) ; if ( po -> running && <S2SV_ModEnd> <S2SV_ModStart> spin_unlock ( & po -> bind_lock ) ; if ( err && ! refcount_read ( & match -> sk_ref ) ) { list_del ( & match -> list ) ; kfree ( match ) ; } 
1424,<S2SV_StartBug> if ( handle -> nmi ) { <S2SV_EndBug> <S2SV_StartBug> } else <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1425,"<S2SV_StartBug> int utf8s_to_utf16s ( const u8 * s , int len , wchar_t * pwcs ) <S2SV_EndBug> <S2SV_StartBug> while ( * s && len > 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( u >= PLANE_SIZE ) { <S2SV_EndBug> <S2SV_StartBug> u -= PLANE_SIZE ; <S2SV_EndBug> <S2SV_StartBug> * op ++ = ( wchar_t ) ( SURROGATE_PAIR | <S2SV_EndBug> <S2SV_StartBug> ( ( u >> 10 ) & SURROGATE_BITS ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( u & SURROGATE_BITS ) ) ; <S2SV_EndBug> <S2SV_StartBug> * op ++ = ( wchar_t ) u ; <S2SV_EndBug> <S2SV_StartBug> * op ++ = * s ++ ; <S2SV_EndBug> ","<S2SV_ModStart> enum utf16_endian endian , <S2SV_ModStart> , int maxlen <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && maxlen > 0 && * s <S2SV_ModStart> s += size ; len -= size ; <S2SV_ModStart> if ( maxlen < 2 ) break ; <S2SV_ModStart> put_utf16 ( op ++ , <S2SV_ModEnd> <S2SV_ModStart> , endian ) ; put_utf16 ( op ++ , <S2SV_ModEnd> <S2SV_ModStart> , endian ) ; maxlen -= 2 <S2SV_ModEnd> <S2SV_ModStart> put_utf16 ( op ++ , u , endian ) ; maxlen -- ; } <S2SV_ModEnd> <S2SV_ModStart> put_utf16 ( op ++ , * s ++ , endian ) ; len -- ; maxlen <S2SV_ModEnd> "
1426,"<S2SV_StartBug> int v , i ; <S2SV_EndBug> <S2SV_StartBug> ( s -> color_type == PNG_COLOR_TYPE_RGB && length != 6 ) ) <S2SV_EndBug> ","<S2SV_ModStart> if ( ! ( s -> state & PNG_IHDR ) ) { av_log ( avctx , AV_LOG_ERROR , ""trns<S2SV_blank>before<S2SV_blank>IHDR\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx , AV_LOG_ERROR , ""trns<S2SV_blank>after<S2SV_blank>IDAT\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> || s -> bit_depth == 1 "
1427,"<S2SV_StartBug> print_as ( ""Notification<S2SV_blank>setup<S2SV_blank>failed,<S2SV_blank>won\'t<S2SV_blank>be<S2SV_blank>able<S2SV_blank>to<S2SV_blank>reconnect<S2SV_blank>after<S2SV_blank>failure"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""Notification<S2SV_blank>setup<S2SV_blank>not<S2SV_blank>supported,<S2SV_blank>won\'t<S2SV_blank>be<S2SV_blank>able<S2SV_blank>to<S2SV_blank>reconnect<S2SV_blank>after<S2SV_blank>failure"" <S2SV_ModEnd> "
1428,<S2SV_StartBug> dt -> vlan_id [ 0 ] = p -> vlan_id [ 0 ] ; <S2SV_EndBug> ,<S2SV_ModStart> proto = IP_GET_IPPROTO ( p ) ; dt -> 
1429,"<S2SV_StartBug> status = ksz8851ReadReg ( interface , KSZ8851_REG_RXFHSR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & RXFHSR_RXFV ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> n = ksz8851ReadReg ( interface , KSZ8851_REG_RXFHBCR ) & RXFHBCR_RXBC_MASK ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_RXFDPR , RXFDPR_RXFPAI ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851SetBit ( interface , KSZ8851_REG_RXQCR , RXQCR_SDA ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851ClearBit ( interface , KSZ8851_REG_RXQCR , RXQCR_SDA ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851SetBit ( interface , KSZ8851_REG_RXQCR , RXQCR_RRXEF ) ; <S2SV_EndBug> ","<S2SV_ModStart> KSZ8851_RXFHSR <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_RXFHBCR ) & KSZ8851_RXFHBCR_RXBC <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_RXFDPR , KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_RXQCR , KSZ8851_RXQCR_SDA <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_RXQCR , KSZ8851_RXQCR_SDA <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_RXQCR , KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> "
1430,"<S2SV_StartBug> ast_for_funcdef_impl ( struct compiling * c , const node * n , <S2SV_EndBug> <S2SV_StartBug> asdl_seq * decorator_seq , int is_async ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> type_comment , LINENO ( n ) , <S2SV_EndBug> ","<S2SV_ModStart> n0 <S2SV_ModEnd> <S2SV_ModStart> bool <S2SV_ModEnd> <S2SV_ModStart> const node * const n = is_async ? CHILD ( n0 , 1 ) : n0 ; <S2SV_ModStart> n0 ) , n0 <S2SV_ModEnd> "
1431,"<S2SV_StartBug> pgd = pgd_offset ( mm , 0xA0000 ) ; <S2SV_EndBug> <S2SV_StartBug> flush_tlb ( ) ; <S2SV_EndBug> ",<S2SV_ModStart> down_write ( & mm -> mmap_sem ) ; <S2SV_ModStart> up_write ( & mm -> mmap_sem ) ; 
1432,"<S2SV_StartBug> return aa_audit ( AUDIT_APPARMOR_DENIED , NULL , GFP_KERNEL , <S2SV_EndBug> ","<S2SV_ModStart> __aa_current_profile ( ) , GFP_KERNEL , & sa , NULL <S2SV_ModEnd> "
1433,<S2SV_StartBug> cstate = 0 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! siz -> width || ! siz -> height || ! siz -> tilewidth || <S2SV_EndBug> ,"<S2SV_ModStart> siz -> comps = 0 ; <S2SV_ModStart> goto error ; } if ( ! siz -> width || ! siz -> height ) { jas_eprintf ( ""reference<S2SV_blank>grid<S2SV_blank>cannot<S2SV_blank>have<S2SV_blank>zero<S2SV_blank>area\\n"" ) ; goto error ; } if ( ! siz -> tilewidth || ! siz -> tileheight ) { jas_eprintf ( ""tile<S2SV_blank>cannot<S2SV_blank>have<S2SV_blank>zero<S2SV_blank>area\\n"" ) ; goto error ; } if ( ! siz -> numcomps || siz -> numcomps > 16384 ) { jas_eprintf ( ""number<S2SV_blank>of<S2SV_blank>components<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n"" ) ; goto error ; } if ( siz -> xoff >= siz -> width ) { jas_eprintf ( ""XOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n"" ) ; goto error ; } if ( siz -> yoff >= siz -> height ) { jas_eprintf ( ""YOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n"" ) ; goto error ; } if ( siz -> tilexoff > siz -> xoff || siz -> tilexoff + siz -> tilewidth <= siz -> xoff ) { jas_eprintf ( ""XTOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n"" ) ; goto error ; } if ( siz -> tileyoff > siz -> yoff || siz -> tileyoff + siz -> tileheight <= siz -> yoff ) { jas_eprintf ( ""YTOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n"" ) ; goto error ; } if ( ! ( siz -> comps = jas_alloc2 ( siz -> numcomps , sizeof ( jpc_sizcomp_t ) ) ) ) { goto error ; } for ( i = 0 ; i < siz -> numcomps ; ++ i ) { if ( jpc_getuint8 ( in , & tmp ) || jpc_getuint8 ( in , & siz -> comps [ i ] . hsamp ) || jpc_getuint8 ( in , & siz -> comps [ i ] . vsamp ) ) { goto error ; } if ( siz -> comps [ i ] . hsamp == 0 || siz -> comps [ i ] . hsamp > 255 ) { jas_eprintf ( ""invalid<S2SV_blank>XRsiz<S2SV_blank>value<S2SV_blank>%d\\n"" , siz -> comps [ i ] . hsamp ) ; goto error ; } if ( siz -> comps [ i ] . vsamp == 0 || siz -> comps [ i ] . vsamp > 255 ) { jas_eprintf ( ""invalid<S2SV_blank>YRsiz<S2SV_blank>value<S2SV_blank>%d\\n"" , siz -> comps [ i ] . vsamp ) ; goto error ; } siz -> comps [ i ] . sgnd = ( tmp >> 7 ) & 1 ; siz -> comps [ i ] . prec = ( tmp & 0x7f ) + 1 ; } if ( jas_stream_eof ( in ) ) { goto error ; } return 0 ; error : if ( siz -> comps ) { jas_free ( siz -> comps ) ; } <S2SV_ModStart>  <S2SV_ModEnd> "
1434,"<S2SV_StartBug> option_number += previous_option_number ; <S2SV_EndBug> <S2SV_StartBug> ret_status = sn_coap_parser_options_parse_multiple_options ( handle , packet_data_pptr , <S2SV_EndBug> <S2SV_StartBug> ret_status = sn_coap_parser_options_parse_multiple_options ( handle , packet_data_pptr , message_left , <S2SV_EndBug> <S2SV_StartBug> ret_status = sn_coap_parser_options_parse_multiple_options ( handle , packet_data_pptr , message_left , <S2SV_EndBug> ","<S2SV_ModStart> if ( sn_coap_parser_add_u16_limit ( option_number , previous_option_number , & option_number ) != 0 ) { return - 1 ; } <S2SV_ModEnd> <S2SV_ModStart> if ( dst_coap_msg_ptr -> options_list_ptr -> etag_ptr ) { tr_error ( ""sn_coap_parser_options_parse<S2SV_blank>-<S2SV_blank>COAP_OPTION_ETAG<S2SV_blank>exists!"" ) ; return - 1 ; } <S2SV_ModStart> if ( dst_coap_msg_ptr -> options_list_ptr -> location_query_ptr ) { tr_error ( ""sn_coap_parser_options_parse<S2SV_blank>-<S2SV_blank>COAP_OPTION_LOCATION_QUERY<S2SV_blank>exists!"" ) ; return - 1 ; } <S2SV_ModStart> if ( dst_coap_msg_ptr -> uri_path_ptr ) { tr_error ( ""sn_coap_parser_options_parse<S2SV_blank>-<S2SV_blank>COAP_OPTION_URI_PATH<S2SV_blank>exists!"" ) ; return - 1 ; } "
1435,"<S2SV_StartBug> if ( ( setup_ret = _WM_SetupMidiEvent ( xmi_mdi , xmi_data , 0 ) ) == 0 ) { <S2SV_EndBug> ","<S2SV_ModStart> xmi_size , "
1436,"<S2SV_StartBug> total_len = iov_length ( iov , nr_segs ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> void * addr ; <S2SV_EndBug> <S2SV_StartBug> size_t chars = buf -> len ; <S2SV_EndBug> <S2SV_StartBug> int error , atomic ; <S2SV_EndBug> <S2SV_StartBug> atomic = ! iov_fault_in_pages_write ( iov , chars ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct iov_iter iter ; <S2SV_ModStart> ; iov_iter_init ( & iter , iov , nr_segs , total_len , 0 ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; size_t written <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> written = copy_page_to_iter ( buf -> page , buf -> offset , chars , & iter ) ; if ( unlikely ( written < chars ) ) { if ( ! ret ) ret = - EFAULT <S2SV_ModEnd> "
1437,"<S2SV_StartBug> # define GIFOutputCode ( code ) { if ( bits > 0 ) datum |= ( size_t ) ( code ) << bits ; else datum = ( size_t ) ( code ) ; bits += number_bits ; while ( bits >= 8 ) { packet [ length ++ ] = ( unsigned char ) ( datum & 0xff ) ; if ( length >= 254 ) { ( void ) WriteBlobByte ( image , ( unsigned char ) length ) ; ( void ) WriteBlob ( image , length , packet ) ; length = 0 ; } datum >>= 8 ; bits -= 8 ; } if ( free_code > max_code ) { number_bits ++ ; if ( number_bits == MaxGIFBits ) max_code = MaxGIFTable ; else max_code = MaxCode ( number_bits ) ; } } <S2SV_EndBug> <S2SV_StartBug> index = ( IndexPacket ) ( ( size_t ) GetPixelIndex ( indexes + x ) & 0xff ) ; <S2SV_EndBug> <S2SV_StartBug> next_pixel = MagickFalse ; <S2SV_EndBug> ",<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> if ( k < 0 ) continue <S2SV_ModEnd> 
1438,<S2SV_StartBug> passert ( GLOBALS_ARE_RESET ( ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1439,"<S2SV_StartBug> p_fm_config_conx_hdlt hdl ; <S2SV_EndBug> <S2SV_StartBug> goto die_clean ; <S2SV_EndBug> <S2SV_StartBug> goto die_clean ; <S2SV_EndBug> <S2SV_StartBug> return commandList [ i ] . cmdPtr ( hdl , commandList [ i ] . mgr , ( argc - optind ) , & argv [ optind ] ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> die_clean : <S2SV_EndBug> <S2SV_StartBug> return res ; <S2SV_EndBug> ",<S2SV_ModStart> = NULL <S2SV_ModStart> cleanup <S2SV_ModEnd> <S2SV_ModStart> cleanup <S2SV_ModEnd> <S2SV_ModStart> res = <S2SV_ModEnd> <S2SV_ModStart> goto cleanup ; <S2SV_ModStart> cleanup : if ( hdl ) { if ( hdl -> sm_hdl ) { if ( hdl -> sm_hdl -> c_path [ 0 ] ) unlink ( hdl -> sm_hdl -> c_path ) ; } if ( hdl -> pm_hdl ) { if ( hdl -> pm_hdl -> c_path [ 0 ] ) unlink ( hdl -> pm_hdl -> c_path ) ; } if ( hdl -> fe_hdl ) { if ( hdl -> fe_hdl -> c_path [ 0 ] ) unlink ( hdl -> fe_hdl -> c_path ) ; } <S2SV_ModEnd> <S2SV_ModStart> } 
1440,"<S2SV_StartBug> if ( jas_init ( ) ) { <S2SV_EndBug> <S2SV_StartBug> infile = 0 ; <S2SV_EndBug> <S2SV_StartBug> case OPT_MAXMEM : <S2SV_EndBug> <S2SV_StartBug> if ( ! ( image = jas_image_decode ( instream , fmtid , 0 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( numcmpts = jas_image_numcmpts ( image ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( fmtname = jas_image_fmttostr ( fmtid ) ) ) { <S2SV_EndBug> <S2SV_StartBug> printf ( ""%s<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%ld\\n"" , fmtname , numcmpts , width , height , depth , ( long ) jas_image_rawsize ( image ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t max_samples ; char optstr [ 32 ] ; <S2SV_ModStart> max_samples = 64 * JAS_MEBI ; <S2SV_ModStart> OPT_MAXSAMPLES : max_samples = strtoull ( jas_optarg , 0 , 10 ) ; break ; case <S2SV_ModStart> snprintf ( optstr , sizeof ( optstr ) , ""max_samples=%-zu"" , max_samples ) ; <S2SV_ModStart> optstr <S2SV_ModEnd> <S2SV_ModStart> fmtname = jas_image_fmttostr ( fmtid ) ) ) { jas_eprintf ( ""format<S2SV_blank>name<S2SV_blank>lookup<S2SV_blank>failed\\n"" ) ; return EXIT_FAILURE ; } if ( ! ( <S2SV_ModStart> printf ( ""%s<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%ld\\n"" , fmtname <S2SV_ModEnd> <S2SV_ModStart> JAS_CAST ( long , <S2SV_ModEnd> <S2SV_ModStart> ) "
1441,"<S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> ",<S2SV_ModStart> false 
1442,<S2SV_StartBug> cherokee_buffer_is_empty ( & conn -> validator -> user ) ) <S2SV_EndBug> ,<S2SV_ModStart> || cherokee_buffer_is_empty ( & conn -> validator -> passwd ) 
1443,"<S2SV_StartBug> for ( row = 0 ; row < height ; row ++ ) <S2SV_EndBug> <S2SV_StartBug> if ( ( RAW ( row , col ) = pred [ col & 1 ] ) > 4098 && col < width ) <S2SV_EndBug> ",<S2SV_ModStart> raw_height <S2SV_ModEnd> <S2SV_ModStart> && row < height 
1444,<S2SV_StartBug> if ( len < needed ) { <S2SV_EndBug> ,<S2SV_ModStart> || len < sizeof ( nl -> dev ) 
1445,<S2SV_StartBug> ExitLoop : <S2SV_EndBug> ,<S2SV_ModStart> quantum_info = DestroyQuantumInfo ( quantum_info ) ; 
1446,"<S2SV_StartBug> int idx , ret = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> BUG_ON ( guest_irq >= irq_rt -> nr_rt_entries ) ; <S2SV_EndBug> <S2SV_StartBug> hlist_for_each_entry ( e , & irq_rt -> map [ guest_irq ] , link ) { <S2SV_EndBug> ","<S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> || hlist_empty ( <S2SV_ModEnd> <S2SV_ModStart> ) ) { pr_warn_once ( ""no<S2SV_blank>route<S2SV_blank>for<S2SV_blank>guest_irq<S2SV_blank>%u/%u<S2SV_blank>(broken<S2SV_blank>user<S2SV_blank>space?)\\n"" , guest_irq , irq_rt -> nr_rt_entries ) ; goto out ; } hlist_for_each_entry ( e , & irq_rt -> map [ guest_irq ] "
1447,<S2SV_StartBug> bfq_idle_slice_timer_body ( bfqq ) ; <S2SV_EndBug> ,"<S2SV_ModStart> bfqd , "
1448,<S2SV_StartBug> return rold -> umin_value == 0 && <S2SV_EndBug> ,<S2SV_ModStart> false <S2SV_ModEnd> 
1449,"<S2SV_StartBug> BT_DBG ( ""sock<S2SV_blank>%p,<S2SV_blank>sk<S2SV_blank>%p"" , sock , sk ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; memset ( sa , 0 , sizeof ( * sa ) "
1450,<S2SV_StartBug> if ( ! handle ) <S2SV_EndBug> ,<S2SV_ModStart> || ! SecIsValidHandle ( handle ) 
1451,<S2SV_StartBug> length += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderInfo -> orderType ] ; <S2SV_EndBug> ,"<S2SV_ModStart> get_primary_drawing_order_field_bytes ( <S2SV_ModEnd> <S2SV_ModStart> , NULL ) <S2SV_ModEnd> "
1452,"<S2SV_StartBug> olddentry = ovl_dentry_upper ( old ) ; <S2SV_EndBug> <S2SV_StartBug> newdentry = lookup_one_len ( new -> d_name . name , new_upperdir , <S2SV_EndBug> <S2SV_StartBug> err = PTR_ERR ( newdentry ) ; <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( newdentry ) ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( olddentry -> d_parent != old_upperdir ) <S2SV_EndBug> <S2SV_StartBug> if ( newdentry -> d_parent != new_upperdir ) <S2SV_EndBug> <S2SV_StartBug> goto out_dput ; <S2SV_EndBug> <S2SV_StartBug> out_unlock : <S2SV_EndBug> ","<S2SV_ModStart> lookup_one_len ( old <S2SV_ModEnd> <S2SV_ModStart> old_upperdir , old <S2SV_ModEnd> <S2SV_ModStart> olddentry <S2SV_ModEnd> <S2SV_ModStart> olddentry <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> != ovl_dentry_upper ( old ) ) goto out_dput_old ; newdentry = lookup_one_len ( new -> d_name . name , new_upperdir , new -> d_name . len ) ; err = PTR_ERR ( newdentry ) ; if ( IS_ERR ( newdentry ) ) goto out_dput_old ; err = - ESTALE ; if ( ovl_dentry_upper ( new ) ) { if ( opaquedir ) { if ( newdentry != opaquedir <S2SV_ModEnd> <S2SV_ModStart> } else { if ( newdentry != ovl_dentry_upper ( new ) <S2SV_ModEnd> <S2SV_ModStart> } } else { new_create = true ; if ( ! d_is_negative ( newdentry ) && ( ! new_opaque || ! ovl_is_whiteout ( newdentry ) ) ) goto out_dput ; } <S2SV_ModStart> out_dput_old : dput ( olddentry ) ; "
1453,<S2SV_StartBug> # if 0 <S2SV_EndBug> <S2SV_StartBug> p ++ ; s ++ ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1454,<S2SV_StartBug> for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) <S2SV_EndBug> ,<S2SV_ModStart> ++ plane <S2SV_ModEnd> 
1455,"<S2SV_StartBug> int copied , error = - EINVAL ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1456,"<S2SV_StartBug> return mount_entry_on_generic ( mntent , path ) ; <S2SV_EndBug> ","<S2SV_ModStart> , rootfs "
1457,<S2SV_StartBug> return fd ; <S2SV_EndBug> ,<S2SV_ModStart> sr -> fd_is_fdt = MK_TRUE ; 
1458,"<S2SV_StartBug> static void construct_get_dest_keyring ( struct key * * _dest_keyring ) <S2SV_EndBug> <S2SV_StartBug> kenter ( ""%p"" , dest_keyring ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> int ret ; <S2SV_ModStart> bool do_perm_check = true ; <S2SV_ModStart> { do_perm_check = false ; break ; } <S2SV_ModEnd> <S2SV_ModStart> if ( dest_keyring && do_perm_check ) { ret = key_permission ( make_key_ref ( dest_keyring , 1 ) , KEY_NEED_WRITE ) ; if ( ret ) { key_put ( dest_keyring ) ; return ret ; } } <S2SV_ModStart> 0 "
1459,"<S2SV_StartBug> static void nonrd_pick_sb_modes ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> set_offsets ( cpi , tile , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> xd -> mi [ 0 ] -> mbmi . sb_type = bsize ; <S2SV_EndBug> <S2SV_StartBug> vp9_pick_inter_mode ( cpi , x , tile , mi_row , mi_col , <S2SV_EndBug> ","<S2SV_ModStart> TileDataEnc * tile_data , MACROBLOCK * const x , int mi_row , int mi_col , RD_COST * rd_cost , BLOCK_SIZE bsize , PICK_MODE_CONTEXT * ctx ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModEnd> <S2SV_ModStart> tile_info = & tile_data -> tile_info <S2SV_ModEnd> <S2SV_ModStart> MB_MODE_INFO * mbmi ; <S2SV_ModStart> tile_info , x , mi_row , mi_col , bsize ) ; mbmi = & <S2SV_ModEnd> <S2SV_ModStart> ; mbmi -> sb_type = bsize ; if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cm -> seg . enabled ) if ( cyclic_refresh_segment_id_boosted ( mbmi -> segment_id ) ) x -> rdmult = vp9_cyclic_refresh_get_rdmult ( cpi -> cyclic_refresh ) ; if ( cm -> frame_type == KEY_FRAME ) hybrid_intra_mode_search ( cpi , x , rd_cost , bsize , ctx ) ; else if ( segfeature_active ( & cm -> seg , mbmi -> segment_id , SEG_LVL_SKIP ) ) set_mode_info_seg_skip ( x , cm -> tx_mode , rd_cost , bsize ) ; else if ( bsize >= BLOCK_8X8 ) <S2SV_ModEnd> <S2SV_ModStart> tile_data , mi_row , mi_col , rd_cost , bsize , ctx ) ; else vp9_pick_inter_mode_sub8x8 ( cpi , x , mi_row , mi_col , rd_cost , bsize , ctx ) ; duplicate_mode_info_in_sb ( cm , xd , mi_row , mi_col , bsize ) ; if ( rd_cost -> rate == INT_MAX ) vp9_rd_cost_reset ( rd_cost ) ; ctx -> rate = rd_cost -> rate ; ctx -> dist = rd_cost -> dist <S2SV_ModEnd> "
1460,<S2SV_StartBug> dev -> hw_features |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; <S2SV_EndBug> <S2SV_StartBug> dev -> features |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1461,"<S2SV_StartBug> * err = superblockRead ( & reader , & reader . superblock ) ; <S2SV_EndBug> ",<S2SV_ModStart> reader . recursive_counter = 0 ; 
1462,<S2SV_StartBug> if ( ( flags & 0x01 ) && ! ( flags & 0x02 ) ) <S2SV_EndBug> ,"<S2SV_ModStart> ( void ) ResetMagickMemory ( pixels , 0 , pixel_info_length ) ; "
1463,"<S2SV_StartBug> int tmp ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( buf , buffer , count ) ) <S2SV_EndBug> ","<S2SV_ModStart> size_t size ; int tmp ; size = min ( count , sizeof ( buf ) ) <S2SV_ModEnd> <S2SV_ModStart> size <S2SV_ModEnd> "
1464,<S2SV_StartBug> pMap -> ranges = malloc ( sizeof ( MappedRange ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( pMap -> ranges == NULL ) { LOGE ( ""malloc<S2SV_blank>failed:<S2SV_blank>%s\\n"" , strerror ( errno ) ) ; munmap ( memPtr , length ) ; return - 1 ; } "
1465,<S2SV_StartBug> switch ( dip -> di_format ) { <S2SV_EndBug> ,"<S2SV_ModStart> fa = xfs_dinode_verify_fork ( dip , mp , XFS_DATA_FORK ) ; if ( fa ) return fa ; break ; case 0 : break ; default : return __this_address ; } if ( XFS_DFORK_Q ( dip ) ) { fa = xfs_dinode_verify_fork ( dip , mp , XFS_ATTR_FORK ) ; if ( fa ) return fa ; <S2SV_ModEnd> "
1466,"<S2SV_StartBug> if ( ( ret = s -> decode ( gb , rc , cumfr , cnt_c , totfr ) ) < 0 ) <S2SV_EndBug> ",<S2SV_ModStart> x >= 16 || c >= 256 ) { return AVERROR_INVALIDDATA ; } if ( 
1467,<S2SV_StartBug> jas_tvparser_destroy ( tvp ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> jas_tvparser_destroy ( tvp ) ; 
1468,<S2SV_StartBug> if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) <S2SV_EndBug> <S2SV_StartBug> round = ( vpx_codec_pts_t ) 1000000 <S2SV_EndBug> ,"<S2SV_ModStart> ! flags ) { flags = ctx -> control_frame_flags ; } ctx -> control_frame_flags = 0 ; res = set_reference_and_update ( ctx , flags ) ; <S2SV_ModEnd> <S2SV_ModStart> 10000000 <S2SV_ModEnd> "
1469,"<S2SV_StartBug> BImgBuff = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) ( ldblk ) , sizeof ( unsigned char ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> double <S2SV_ModEnd> 
1470,<S2SV_StartBug> if ( ! head ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> WARN_ON_ONCE ( <S2SV_ModStart> ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1471,"<S2SV_StartBug> u_int atype , const u_char * pptr , u_int len ) <S2SV_EndBug> <S2SV_StartBug> if ( ! bgp_attr_print ( ndo , atype , tptr , alen ) ) <S2SV_EndBug> ","<S2SV_ModStart> , const unsigned attr_set_level <S2SV_ModStart> attr_set_level == 10 ) ND_PRINT ( ( ndo , ""(too<S2SV_blank>many<S2SV_blank>nested<S2SV_blank>levels,<S2SV_blank>not<S2SV_blank>recursing)"" ) ) ; else if ( <S2SV_ModStart> , attr_set_level + 1 "
1472,"<S2SV_StartBug> ""<td<S2SV_blank>style=\'color:red;\'><form<S2SV_blank>method=POST<S2SV_blank>action=\'_runtime\'>Stop<S2SV_blank>Monit<S2SV_blank>http<S2SV_blank>server?<S2SV_blank>"" <S2SV_EndBug> <S2SV_StartBug> ""<td><form<S2SV_blank>method=GET<S2SV_blank>action=\'_viewlog\'>View<S2SV_blank>Monit<S2SV_blank>logfile?<S2SV_blank><input<S2SV_blank>type=submit<S2SV_blank>value=\'Go\'></form></td>"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""<td<S2SV_blank>style=\'color:red;\'>"" ""<form<S2SV_blank>method=POST<S2SV_blank>action=\'_runtime\'>Stop<S2SV_blank>Monit<S2SV_blank>http<S2SV_blank>server?<S2SV_blank>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>name=\'securitytoken\'<S2SV_blank>value=\'%s\'>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>name=\'action\'<S2SV_blank>value=\'stop\'>"" ""<input<S2SV_blank>type=submit<S2SV_blank>value=\'Go\'>"" ""</form>"" ""</td>"" , res -> token ) ; StringBuffer_append ( res -> outputbuffer , ""<td>"" ""<form<S2SV_blank>method=POST<S2SV_blank>action=\'_runtime\'>Force<S2SV_blank>validate<S2SV_blank>now?<S2SV_blank>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>name=\'securitytoken\'<S2SV_blank>value=\'%s\'>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>name=\'action\'<S2SV_blank>value=\'validate\'>"" ""<input<S2SV_blank>type=submit<S2SV_blank>value=\'Go\'>"" ""</form>"" ""</td>"" , res -> token <S2SV_ModEnd> <S2SV_ModStart> ""<td>"" ""<form<S2SV_blank>method=POST<S2SV_blank>action=\'_viewlog\'>View<S2SV_blank>Monit<S2SV_blank>logfile?<S2SV_blank>"" ""<input<S2SV_blank>type=hidden<S2SV_blank>name=\'securitytoken\'<S2SV_blank>value=\'%s\'>"" ""<input<S2SV_blank>type=submit<S2SV_blank>value=\'Go\'>"" ""</form>"" ""</td>"" , res -> token <S2SV_ModEnd> "
1473,"<S2SV_StartBug> vpx_memcpy ( dest , source , dest_width ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> 
1474,"<S2SV_StartBug> snprintf ( constr1 , 32 , ""%lld"" , deadline ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1475,<S2SV_StartBug> assert ( n >= 0 && n < 32 ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> 
1476,"<S2SV_StartBug> & len , & iovec , compat ) ; <S2SV_EndBug> <S2SV_StartBug> len , iovec ) ; <S2SV_EndBug> <S2SV_StartBug> iov_iter_init ( & iter , rw , iovec , nr_segs , len ) ; <S2SV_EndBug> ","<S2SV_ModStart> , & iter <S2SV_ModStart> , & iter <S2SV_ModStart> ret = iter_op ( req , & iter ) ; } else { ret = rw_op ( req , iter . iov , iter . <S2SV_ModEnd> "
1477,<S2SV_StartBug> if ( ! el ) <S2SV_EndBug> ,"<S2SV_ModStart> { if ( c -> rbytes > 1024 ) { char * ptr = c -> rcurr ; while ( * ptr == '<S2SV_blank>' ) { ++ ptr ; } if ( strcmp ( ptr , ""get<S2SV_blank>"" ) && strcmp ( ptr , ""gets<S2SV_blank>"" ) ) { conn_set_state ( c , conn_closing ) ; return 1 ; } } return 0 ; } <S2SV_ModEnd> "
1478,"<S2SV_StartBug> USB_DT_OTG , ( void * * ) & desc ) ; <S2SV_EndBug> ","<S2SV_ModStart> , sizeof ( * desc ) "
1479,<S2SV_StartBug> if ( iad_num == USB_MAXIADS ) { <S2SV_EndBug> <S2SV_StartBug> ( struct usb_interface_assoc_descriptor <S2SV_EndBug> ,"<S2SV_ModStart> struct usb_interface_assoc_descriptor * d ; d = ( struct usb_interface_assoc_descriptor * ) header ; if ( d -> bLength < USB_DT_INTERFACE_ASSOCIATION_SIZE ) { dev_warn ( ddev , ""config<S2SV_blank>%d<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>interface<S2SV_blank>association<S2SV_blank>descriptor<S2SV_blank>of<S2SV_blank>length<S2SV_blank>%d,<S2SV_blank>skipping\\n"" , cfgno , d -> bLength ) ; continue ; } <S2SV_ModStart> d <S2SV_ModEnd> "
1480,<S2SV_StartBug> if ( ! replace && card -> user_ctl_count >= MAX_USER_CONTROLS ) <S2SV_EndBug> <S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> ,"<S2SV_ModStart> info -> count < 1 ) return - EINVAL ; access = info -> access == 0 ? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id . numid = 0 ; memset ( & kctl , 0 , sizeof ( kctl ) ) ; if ( replace ) { err = snd_ctl_remove_user_ctl ( file , & info -> id ) ; if ( err ) return err ; } if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1481,"<S2SV_StartBug> exit_client ( client_p , client_p , client_p , ""Mixing<S2SV_blank>client<S2SV_blank>and<S2SV_blank>server<S2SV_blank>protocol"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ] , '<S2SV_blank>' ) ) { exit_client ( client_p , client_p , client_p , ""Malformed<S2SV_blank>AUTHENTICATE"" "
1482,<S2SV_StartBug> if ( ctxt -> rip_relative ) <S2SV_EndBug> ,<S2SV_ModStart> && likely ( ctxt -> memopp ) 
1483,"<S2SV_StartBug> mmap_event -> event_id . header . size , 0 , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1484,<S2SV_StartBug> dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug> ,<S2SV_ModStart> ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> 
1485,<S2SV_StartBug> distortion = vp8_variance16x16 <S2SV_EndBug> ,<S2SV_ModStart> vpx_variance16x16 <S2SV_ModEnd> 
1486,"<S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_ECON2 , ECON2_ETHEN | ECON2_STRCH ) ; <S2SV_EndBug> <S2SV_StartBug> temp = enc624j600ReadReg ( interface , ENC624J600_REG_MAADR1 ) ; <S2SV_EndBug> <S2SV_StartBug> temp = enc624j600ReadReg ( interface , ENC624J600_REG_MAADR2 ) ; <S2SV_EndBug> <S2SV_StartBug> temp = enc624j600ReadReg ( interface , ENC624J600_REG_MAADR3 ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MAADR1 , temp ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MAADR2 , temp ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MAADR3 , temp ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_ERXST , ENC624J600_RX_BUFFER_START ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_ERXTAIL , ENC624J600_RX_BUFFER_STOP ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_ERXFCON , ERXFCON_HTEN | <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_EHT2 , 0x0000 ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_EHT3 , 0x0000 ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_EHT4 , 0x0000 ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MACON2 , <S2SV_EndBug> <S2SV_StartBug> enc624j600WritePhyReg ( interface , ENC624J600_PHY_REG_PHANA , PHANA_ADPAUS0 | <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_EIE , EIE_INTIE | <S2SV_EndBug> <S2SV_StartBug> enc624j600SetBit ( interface , ENC624J600_REG_ECON1 , ECON1_RXEN ) ; <S2SV_EndBug> ","<S2SV_ModStart> ENC624J600_ECON2 , ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MAADR1 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MAADR2 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MAADR3 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MAADR1 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MAADR2 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MAADR3 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ERXST <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ERXTAIL <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ERXFCON , ENC624J600_ERXFCON_HTEN | ENC624J600_ERXFCON_CRCEN | ENC624J600_ERXFCON_RUNTEN | ENC624J600_ERXFCON_UCEN | ENC624J600_ERXFCON_BCEN ) ; enc624j600WriteReg ( interface , ENC624J600_EHT1 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EHT2 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EHT3 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EHT4 <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MACON2 , ENC624J600_MACON2_DEFER | ENC624J600_MACON2_PADCFG_AUTO | ENC624J600_MACON2_TXCRCEN | ENC624J600_MACON2_R1_DEFAULT ) ; enc624j600WriteReg ( interface , ENC624J600_MAMXFL <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_PHANA , ENC624J600_PHANA_ADPAUS0 | ENC624J600_PHANA_AD100FD | ENC624J600_PHANA_AD100 | ENC624J600_PHANA_AD10FD | ENC624J600_PHANA_AD10 | ENC624J600_PHANA_ADIEEE_DEFAULT ) ; enc624j600WriteReg ( interface , ENC624J600_EIR <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EIE , ENC624J600_EIE_INTIE | ENC624J600_EIE_LINKIE | ENC624J600_EIE_PKTIE | ENC624J600_EIE_TXIE | ENC624J600_EIE_TXABTIE <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ECON1 , ENC624J600_ECON1_RXEN <S2SV_ModEnd> "
1487,<S2SV_StartBug> maxlen = strlen ( ( char * ) psf -> header ) ; <S2SV_EndBug> <S2SV_StartBug> start = ( ( char * ) psf -> header ) + maxlen ; <S2SV_EndBug> <S2SV_StartBug> maxlen = sizeof ( psf -> header ) - maxlen ; <S2SV_EndBug> <S2SV_StartBug> psf -> headindex = strlen ( ( char * ) psf -> header ) ; <S2SV_EndBug> ,<S2SV_ModStart> . ptr <S2SV_ModStart> . ptr <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> . len <S2SV_ModEnd> <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr 
1488,<S2SV_StartBug> if ( ( e -> target_offset == sizeof ( struct arpt_entry ) && <S2SV_EndBug> <S2SV_StartBug> t -> verdict < 0 && unconditional ( & e -> arp ) ) || <S2SV_EndBug> ,<S2SV_ModStart> unconditional ( e <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1489,<S2SV_StartBug> if ( ! job_id || ! prev_hash || ! coinbase1 || ! coinbase2 || ! bbversion || ! nbit || ! ntime ) { <S2SV_EndBug> <S2SV_StartBug> if ( job_id ) <S2SV_EndBug> ,<S2SV_ModStart> valid_hex ( job_id ) || ! valid_hex ( prev_hash ) || ! valid_hex ( coinbase1 ) || ! valid_hex ( coinbase2 ) || ! valid_hex ( bbversion ) || ! valid_hex ( nbit ) || ! valid_hex ( ntime ) ) { free <S2SV_ModEnd> <S2SV_ModStart> ; free ( coinbase1 ) ; <S2SV_ModEnd> 
1490,<S2SV_StartBug> if ( ctx -> priv -> alg_priv ) <S2SV_EndBug> <S2SV_StartBug> ctx -> iface -> destroy ( ctx -> priv -> alg_priv ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( vpx_codec_alg_priv_t * ) <S2SV_ModStart>  <S2SV_ModEnd> 
1491,<S2SV_StartBug> return 1 ; <S2SV_EndBug> ,<S2SV_ModStart> case EXIT_REASON_INVEPT : 
1492,"<S2SV_StartBug> sf -> adaptive_rd_thresh = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_square_partition_only = ! frame_is_intra_only ( cm ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> less_rectangular_check = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi ) ? USE_FULL_RD <S2SV_EndBug> <S2SV_StartBug> sf -> auto_mv_step_size = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> subpel_iters_per_step = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; <S2SV_EndBug> <S2SV_StartBug> sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi ) ? USE_FULL_RD <S2SV_EndBug> <S2SV_StartBug> if ( MIN ( cm -> width , cm -> height ) >= 720 ) <S2SV_EndBug> <S2SV_StartBug> sf -> use_lastframe_partitioning = LAST_FRAME_PARTITION_LOW_MOTION ; <S2SV_EndBug> <S2SV_StartBug> if ( MIN ( cm -> width , cm -> height ) >= 720 ) <S2SV_EndBug> <S2SV_StartBug> sf -> use_fast_coef_updates = ONE_LOOP_REDUCED ; <S2SV_EndBug> <S2SV_StartBug> sf -> disable_split_mask = DISABLE_ALL_SPLIT ; <S2SV_EndBug> <S2SV_StartBug> sf -> adaptive_rd_thresh = 4 ; <S2SV_EndBug> <S2SV_StartBug> sf -> mode_search_skip_flags |= FLAG_SKIP_COMP_REFMISMATCH | <S2SV_EndBug> <S2SV_StartBug> sf -> use_lastframe_partitioning = LAST_FRAME_PARTITION_ALL ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_lp32x32fdct = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> partition_search_type = FIXED_PARTITION ; <S2SV_EndBug> <S2SV_StartBug> sf -> search_method = HEX ; <S2SV_EndBug> <S2SV_StartBug> sf -> intra_y_mode_mask [ i ] = INTRA_DC_ONLY ; <S2SV_EndBug> <S2SV_StartBug> sf -> intra_uv_mode_mask [ i ] = INTRA_DC_ONLY ; <S2SV_EndBug> ",<S2SV_ModStart> const int boosted = frame_is_boosted ( cpi ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ( cpi -> twopass . fr_content_type == FC_GRAPHICS_ANIMATION ) || vp9_internal_image_edge ( cpi ) ) { sf -> use_square_partition_only = ! frame_is_boosted ( cpi ) ; } else { <S2SV_ModStart> } <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mv . <S2SV_ModStart> mv . <S2SV_ModStart> ; sf -> tx_size_search_breakout = 1 ; sf -> partition_search_breakout_rate_thr = 80 <S2SV_ModStart> frame_is_boosted <S2SV_ModEnd> <S2SV_ModStart> sf -> reference_masking = cpi -> oxcf . resize_mode != RESIZE_DYNAMIC ? 1 : 0 ; sf -> mode_search_skip_flags = <S2SV_ModEnd> <S2SV_ModStart> frame_type == KEY_FRAME ) ? 0 : <S2SV_ModEnd> <S2SV_ModStart> allow_partition_search_skip = 1 <S2SV_ModEnd> <S2SV_ModStart> sf -> use_square_partition_only = ! frame_is_intra_only ( cm ) ; sf -> tx_size_search_method = frame_is_intra_only ( cm ) ? USE_FULL_RD : USE_LARGESTALL ; sf -> mv . subpel_search_method = SUBPEL_TREE_PRUNED ; sf -> adaptive_pred_interp_filter = 0 ; sf -> adaptive_mode_search = 1 ; sf -> cb_partition_search = ! boosted ; sf -> cb_pred_filter_search = 1 ; sf -> alt_ref_search_fp = 1 <S2SV_ModEnd> <S2SV_ModStart> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC ; sf -> intra_uv_mode_mask [ TX_32X32 ] = INTRA_DC ; sf -> adaptive_interp_filter_search <S2SV_ModEnd> <S2SV_ModStart> mv . search_method = BIGDIA ; sf -> mv . subpel_search_method = SUBPEL_TREE_PRUNED_MORE <S2SV_ModEnd> <S2SV_ModStart> if ( cm -> frame_type != KEY_FRAME ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; sf -> use_fast_coef_updates = ONE_LOOP_REDUCED ; sf -> use_fast_coef_costing = 1 ; sf -> motion_field_mode_search = ! boosted ; sf -> partition_search_breakout_rate_thr = 300 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mv . <S2SV_ModStart> INTRA_DC <S2SV_ModEnd> <S2SV_ModStart> INTRA_DC ; } sf -> partition_search_breakout_rate_thr = 500 ; sf -> mv . reduce_first_step_size = 1 ; sf -> simple_model_rd_from_var = 1 <S2SV_ModEnd> 
1493,"<S2SV_StartBug> dh = skb_header_pointer ( skb , dataoff , sizeof ( _dh ) , & dh ) ; <S2SV_EndBug> ",<S2SV_ModStart> _dh <S2SV_ModEnd> 
1494,"<S2SV_StartBug> if ( copy_from_user ( & tx32 , utp , sizeof ( struct compat_timex ) ) ) <S2SV_EndBug> ","<S2SV_ModStart> memset ( txc , 0 , sizeof ( struct timex ) ) ; "
1495,"<S2SV_StartBug> int ret = poll ( pfds , ts [ h ] . poll_count , - 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
1496,<S2SV_StartBug> int goodsize = inuse + ( inuse / 8 ) + 2 * EXTRA_STACK ; <S2SV_EndBug> ,<S2SV_ModStart> BASIC_STACK_SIZE <S2SV_ModEnd> 
1497,<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug> ,<S2SV_ModStart> Py_RETURN_NONE <S2SV_ModEnd> 
1498,"<S2SV_StartBug> const char * raw , * s = STR ( CHILD ( n , 0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> char * s = """" ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const 
1499,"<S2SV_StartBug> int is_keyframe_qaunt_set = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( ""encoding-mode"" , option_name ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( ""layers"" , option_name ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( ""quantizers"" , option_name ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! is_keyframe_qaunt_set ) { <S2SV_EndBug> <S2SV_StartBug> is_keyframe_qaunt_set = 1 ; <S2SV_EndBug> <S2SV_StartBug> return res ; <S2SV_EndBug> ","<S2SV_ModStart> SvcInternal_t * const si = get_svc_internal ( svc_ctx ) ; vpx_codec_err_t res = VPX_CODEC_OK ; int i , alt_ref_enabled = 0 <S2SV_ModEnd> <S2SV_ModStart> ""spatial-layers"" , option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""temporal-layers"" , option_name ) == 0 ) { svc_ctx -> temporal_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"" , option_name ) == 0 ) { res = parse_layer_options_from_string ( svc_ctx , SCALE_FACTOR , option_value , si -> svc_params . scaling_factor_num , si -> svc_params . scaling_factor_den <S2SV_ModEnd> <S2SV_ModStart> ""max-quantizers"" , option_name ) == 0 ) { res = parse_layer_options_from_string ( svc_ctx , QUANTIZER , option_value , si -> svc_params . max_quantizers , NULL <S2SV_ModEnd> <S2SV_ModStart> ""min-quantizers"" , option_name ) == 0 ) { res = parse_layer_options_from_string ( svc_ctx , QUANTIZER , option_value , si -> svc_params . min_quantizers , NULL <S2SV_ModEnd> <S2SV_ModStart> } else if ( strcmp ( ""auto-alt-refs"" , option_name ) == 0 ) { res = parse_layer_options_from_string ( svc_ctx , AUTO_ALT_REF , option_value , si -> enable_auto_alt_ref , NULL <S2SV_ModEnd> <S2SV_ModStart> } else if ( strcmp ( ""bitrates"" , option_name ) == 0 ) { res = parse_layer_options_from_string ( svc_ctx , BITRATE , option_value , si -> bitrates , NULL ) ; if ( res != VPX_CODEC_OK ) break ; } else if ( strcmp ( ""multi-frame-contexts"" , option_name ) == 0 ) { si -> use_multiple_frame_contexts = atoi ( option_value ) <S2SV_ModEnd> <S2SV_ModStart> for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) { if ( si -> svc_params . max_quantizers [ i ] > MAX_QUANTIZER || si -> svc_params . max_quantizers [ i ] < 0 || si -> svc_params . min_quantizers [ i ] > si -> svc_params . max_quantizers [ i ] || si -> svc_params . min_quantizers [ i ] < 0 ) res = VPX_CODEC_INVALID_PARAM ; } if ( si -> use_multiple_frame_contexts && ( svc_ctx -> spatial_layers > 3 || svc_ctx -> spatial_layers * svc_ctx -> temporal_layers > 4 ) ) res = VPX_CODEC_INVALID_PARAM ; for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) alt_ref_enabled += si -> enable_auto_alt_ref [ i ] ; if ( alt_ref_enabled > REF_FRAMES - svc_ctx -> spatial_layers ) { svc_log ( svc_ctx , SVC_LOG_ERROR , ""svc:<S2SV_blank>auto<S2SV_blank>alt<S2SV_blank>ref:<S2SV_blank>Maxinum<S2SV_blank>%d(REF_FRAMES<S2SV_blank>-<S2SV_blank>layers)<S2SV_blank>layers<S2SV_blank>could"" ""enabled<S2SV_blank>auto<S2SV_blank>alt<S2SV_blank>reference<S2SV_blank>frame,<S2SV_blank>but<S2SV_blank>%<S2SV_blank>layers<S2SV_blank>are<S2SV_blank>enabled\\n"" , REF_FRAMES - svc_ctx -> spatial_layers , alt_ref_enabled ) ; res = VPX_CODEC_INVALID_PARAM ; } "
1500,<S2SV_StartBug> if ( ! head ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> WARN_ON_ONCE ( <S2SV_ModStart> ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1501,<S2SV_StartBug> for ( s += 9 ; isspace ( * s ) ; s ++ ) ; <S2SV_EndBug> <S2SV_StartBug> while ( * t && ! isspace ( * t ) ) t ++ ; <S2SV_EndBug> ,<S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) 
1502,<S2SV_StartBug> if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) <S2SV_EndBug> <S2SV_StartBug> if ( entry == ( kadm5_principal_ent_t ) NULL ) <S2SV_EndBug> ,<S2SV_ModStart> entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> entry -> policy == NULL <S2SV_ModEnd> <S2SV_ModStart> ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> 
1503,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> <S2SV_StartBug> for ( plane = 1 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) <S2SV_EndBug> ,<S2SV_ModStart> [ plane ] && frame -> linesize <S2SV_ModStart> && frame -> linesize [ plane ] 
1504,"<S2SV_StartBug> fprintf ( mvs , ""\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> mb_index = 0 ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1505,<S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> ,<S2SV_ModStart> size_t <S2SV_ModEnd> 
1506,"
","
"
1507,<S2SV_StartBug> if ( data [ 1 ] <= 127 ) <S2SV_EndBug> <S2SV_StartBug> else op -> jump = addr - ( 256 - data [ 1 ] ) + op -> size ; <S2SV_EndBug> <S2SV_StartBug> op -> fail = addr + op -> size ; <S2SV_EndBug> ,<S2SV_ModStart> len > 1 ) { if ( <S2SV_ModStart> { <S2SV_ModStart> } else { <S2SV_ModEnd> <S2SV_ModStart> } } else { op -> jump = addr ; } 
1508,"<S2SV_StartBug> do_error ( dbh , mysql_errno ( imp_dbh -> pmysql ) , <S2SV_EndBug> ",<S2SV_ModStart> if ( imp_dbh -> pmysql ) 
1509,"<S2SV_StartBug> if ( ! ( flags & SOCK_THREAD_FD_EXCEPTION ) || ( ioctl ( slot -> fd , FIONREAD , & size ) == 0 && size ) ) <S2SV_EndBug> <S2SV_StartBug> pthread_mutex_unlock ( & slot_lock ) ; <S2SV_EndBug> <S2SV_StartBug> BTA_JvRfcommWrite ( slot -> rfc_handle , slot -> id ) ; <S2SV_EndBug> <S2SV_StartBug> if ( need_close || ioctl ( slot -> fd , FIONREAD , & size ) != 0 || ! size ) <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> { <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
1510,"<S2SV_StartBug> struct ieee_802_11_phdr phdr ; <S2SV_EndBug> <S2SV_StartBug> dissector_try_uint ( wtap_encap_dissector_table , <S2SV_EndBug> <S2SV_StartBug> wtap_pcap_encap_to_wtap_encap ( dlt ) , next_tvb , pinfo , tree ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; int wtap_encap ; struct eth_phdr eth ; void * phdrp <S2SV_ModStart> wtap_encap = wtap_pcap_encap_to_wtap_encap ( dlt ) ; switch ( wtap_encap ) { case WTAP_ENCAP_ETHERNET : eth . fcs_len = - 1 ; phdrp = & eth ; break ; default : phdrp = NULL ; break ; } dissector_try_uint_new <S2SV_ModEnd> <S2SV_ModStart> wtap_encap <S2SV_ModEnd> <S2SV_ModStart> , TRUE , phdrp "
1511,<S2SV_StartBug> sh = s_malloc ( hdrlen + initlen + 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart> assert ( initlen + hdrlen + 1 > initlen ) ; 
1512,"<S2SV_StartBug> static void nsc_encode_argb_to_aycocg ( NSC_CONTEXT * context , const BYTE * data , <S2SV_EndBug> <S2SV_StartBug> UINT32 tempWidth ; <S2SV_EndBug> <S2SV_StartBug> for ( y = 0 ; y < context -> height ; y ++ ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! context || data || ( scanline == 0 ) ) return FALSE <S2SV_ModStart> if ( context -> priv -> PlaneBuffersLength < rw * scanline ) return FALSE ; if ( rw < scanline * 2 ) return FALSE ; <S2SV_ModStart> return TRUE ; 
1513,<S2SV_StartBug> while ( offset < end_offset ) <S2SV_EndBug> <S2SV_StartBug> return offset ; <S2SV_EndBug> ,<S2SV_ModStart> > 0 && offset <S2SV_ModStart> { <S2SV_ModStart> } 
1514,<S2SV_StartBug> return ERR_PTR ( - EINVAL ) ; <S2SV_EndBug> ,<S2SV_ModStart> { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> 
1515,"<S2SV_StartBug> const RATE_CONTROL * rc = & cpi -> rc ; <S2SV_EndBug> <S2SV_StartBug> target = ( ( cpi -> oxcf . starting_buffer_level / 2 ) > INT_MAX ) <S2SV_EndBug> <S2SV_StartBug> ? INT_MAX : ( int ) ( cpi -> oxcf . starting_buffer_level / 2 ) ; <S2SV_EndBug> <S2SV_StartBug> int kf_boost = MAX ( initial_boost , ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { <S2SV_EndBug> <S2SV_StartBug> ( cpi -> output_framerate / 2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> target = ( ( 16 + kf_boost ) * rc -> av_per_frame_bandwidth ) >> 4 ; <S2SV_EndBug> ","<S2SV_ModStart> ; const VP9EncoderConfig * oxcf = & cpi -> oxcf ; const SVC * const svc = & cpi -> svc <S2SV_ModStart> rc -> <S2SV_ModEnd> <S2SV_ModStart> rc -> starting_buffer_level / 2 ) ; } else { int kf_boost = 32 ; double framerate = cpi -> framerate ; if ( svc -> number_temporal_layers > 1 && oxcf -> rc_mode == VPX_CBR ) { const int layer = LAYER_IDS_TO_IDX ( svc -> spatial_layer_id , svc -> temporal_layer_id , svc -> number_temporal_layers ) ; const LAYER_CONTEXT * lc = & svc -> layer_context [ layer ] ; framerate = lc -> framerate ; } <S2SV_ModEnd> <S2SV_ModStart> kf_boost , ( int ) ( 2 * framerate <S2SV_ModEnd> <S2SV_ModStart> framerate <S2SV_ModEnd> <S2SV_ModStart> framerate <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> "
1516,<S2SV_StartBug> update_db_bp_intercept ( vcpu ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1517,"<S2SV_StartBug> static int set_registers ( pegasus_t * pegasus , __u16 indx , __u16 size , void * data ) <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> indx , data , size , 100 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart> const <S2SV_ModStart> u8 * buf ; int ret ; buf = kmemdup ( data , size , GFP_NOIO ) ; if ( ! buf ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> buf <S2SV_ModEnd> <S2SV_ModStart> kfree ( buf ) ; "
1518,"<S2SV_StartBug> static TX_MODE read_tx_mode ( vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> TX_MODE tx_mode = vp9_read_literal ( r , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> tx_mode += vp9_read_bit ( r ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> <S2SV_ModStart> vpx_read_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_read_bit <S2SV_ModEnd> 
1519,<S2SV_StartBug> register const struct hello6 * hellop = ( const struct hello6 * ) ( ( const uint8_t * ) op + OSPF6HDR_LEN ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; ND_TCHECK_32BITS ( & hellop -> hello_options 
1520,<S2SV_StartBug> if ( * ( unsigned char * ) data > 1 ) <S2SV_EndBug> ,<S2SV_ModStart> datalen != 1 ) return - EINVAL ; if ( 
1521,"<S2SV_StartBug> rc -> uwbd . task = kthread_run ( uwbd , rc , ""uwbd"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rc -> uwbd . task == NULL ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> struct task_struct * <S2SV_ModEnd> <S2SV_ModStart> IS_ERR ( task ) ) { <S2SV_ModStart> = NULL ; <S2SV_ModEnd> <S2SV_ModStart> } else { rc -> uwbd . task = task ; <S2SV_ModEnd> <S2SV_ModStart> } 
1522,"<S2SV_StartBug> # line 96 ""re_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1045 ""re_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 97 ""re_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 98 ""re_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 99 ""re_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 100 ""re_grammar.y"" <S2SV_EndBug> ","<S2SV_ModStart> 104 <S2SV_ModEnd> <S2SV_ModStart> 1053 <S2SV_ModEnd> <S2SV_ModStart> 105 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1059 <S2SV_ModEnd> <S2SV_ModStart> 106 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1065 <S2SV_ModEnd> <S2SV_ModStart> 107 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1071 <S2SV_ModEnd> <S2SV_ModStart> 108 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1077 <S2SV_ModEnd> "
1523,<S2SV_StartBug> * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( col & mask ) << bitIdx ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ; 
1524,"<S2SV_StartBug> MACROBLOCKD * xd = args -> xd ; <S2SV_EndBug> <S2SV_StartBug> struct macroblock_plane * p = & cpi -> mb . plane [ plane ] ; <S2SV_EndBug> <S2SV_StartBug> const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> common . fc . coef_probs [ tx_size ] [ type ] [ ref ] ; <S2SV_EndBug> <S2SV_StartBug> cpi -> common . counts . eob_branch [ tx_size ] [ type ] [ ref ] ; <S2SV_EndBug> <S2SV_StartBug> int aoff , loff ; <S2SV_EndBug> <S2SV_StartBug> add_token ( & t , coef_probs [ band [ c ] ] [ pt ] , <S2SV_EndBug> <S2SV_StartBug> vp9_dct_value_tokens_ptr [ v ] . extra , <S2SV_EndBug> <S2SV_StartBug> ( uint8_t ) vp9_dct_value_tokens_ptr [ v ] . token , <S2SV_EndBug> <S2SV_StartBug> vp9_pt_energy_class [ vp9_dct_value_tokens_ptr [ v ] . token ] ; <S2SV_EndBug> ","<S2SV_ModStart> ThreadData * const td = args -> td ; MACROBLOCK * const x = & td -> mb ; MACROBLOCKD * const xd = & x -> e_mbd <S2SV_ModEnd> <S2SV_ModStart> x -> <S2SV_ModEnd> <S2SV_ModStart> tran_low_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff , block ) ; const int segment_id = mbmi -> segment_id ; const int16_t * scan , * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = td -> rd_counts . coef_counts [ tx_size ] [ type ] [ ref ] ; vpx_prob <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> td -> counts -> <S2SV_ModEnd> <S2SV_ModStart> int16_t token ; EXTRABIT extra ; <S2SV_ModStart> vp9_get_token_extra ( v , & token , & extra ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1525,<S2SV_StartBug> SrcList * pSrc = pSelect -> pSrc ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( pSelect -> selFlags & SF_View ) return WRC_Prune 
1526,<S2SV_StartBug> if ( shmflg & SHM_RND ) <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) && addr >= shmlba 
1527,"<S2SV_StartBug> serv = svc_create ( & nfs4_callback_program , NFS4_CALLBACK_BUFSIZE , sv_ops ) ; <S2SV_EndBug> ",<S2SV_ModStart> svc_create_pooled <S2SV_ModEnd> 
1528,"<S2SV_StartBug> void pointZZ_pMul ( PointZZ_p * rop , const PointZZ_p * point , const mpz_t scalar , const CurveZZ_p * curve ) { <S2SV_EndBug> ",<S2SV_ModStart> if ( pointZZ_pIsIdentityElement ( point ) ) { return pointZZ_pSetToIdentityElement ( rop ) ; } 
1529,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug> ",<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : <S2SV_ModStart>  <S2SV_ModEnd> 
1530,<S2SV_StartBug> case NPNVSupportsWindowless : <S2SV_EndBug> ,<S2SV_ModStart> : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling 
1531,"<S2SV_StartBug> ssize_t ret = sendmsg ( socket -> fd , & msg , MSG_DONTWAIT ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
1532,"<S2SV_StartBug> do ret = send ( sock_fd , buf , s , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
1533,"<S2SV_StartBug> for ( xIter = crm_first_attr ( xml ) ; xIter != NULL ; xIter = xIter -> next ) { <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( prop_name , XML_ATTR_ID ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> char * path = xml_get_path ( xml ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> char * path = xml_get_path ( xml ) ; <S2SV_ModStart> && strstr ( path , ""/"" XML_CIB_TAG_ACLS ""/"" ) == NULL <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> free ( path ) ; "
1534,"<S2SV_StartBug> sprintf ( charbuf , ""%s/%s.html"" , dirout , rootname ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( charbuf , ""%s/%s-links.html"" , dirout , rootname ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( charbuf , ""%s_thumb_%03d"" , rootname , index ) ; <S2SV_EndBug> ","<S2SV_ModStart> snprintf ( charbuf , sizeof ( charbuf ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( charbuf , sizeof ( charbuf ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( charbuf , sizeof ( charbuf ) <S2SV_ModEnd> "
1535,<S2SV_StartBug> static const SvcInternal * get_const_svc_internal ( const SvcContext * svc_ctx ) { <S2SV_EndBug> <S2SV_StartBug> return ( const SvcInternal * ) svc_ctx -> internal ; <S2SV_EndBug> ,<S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> <S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> 
1536,"<S2SV_StartBug> spin_lock_irqsave ( & fq -> mq_flush_lock , flags ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct blk_mq_hw_ctx * hctx ; <S2SV_ModStart> ) ; hctx = q -> mq_ops -> map_queue ( q , flush_rq -> mq_ctx -> cpu ) ; blk_mq_tag_set_rq ( hctx , flush_rq -> tag , fq -> orig_rq "
1537,"<S2SV_StartBug> int length ; <S2SV_EndBug> <S2SV_StartBug> ber_parse_header ( s , MCS_TAG_DOMAIN_PARAMS , & length ) ; <S2SV_EndBug> ","<S2SV_ModStart> uint32 length ; struct stream packet = * s <S2SV_ModEnd> <S2SV_ModStart> if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(),<S2SV_blank>consume<S2SV_blank>domain<S2SV_blank>params<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } "
1538,<S2SV_StartBug> if ( Z_TYPE_PP ( test_ptr ) == IS_ARRAY ) { <S2SV_EndBug> ,<S2SV_ModStart> && Z_TYPE_PP ( ptr ) == IS_ARRAY 
1539,"<S2SV_StartBug> char buffer [ 80 ] ; <S2SV_EndBug> <S2SV_StartBug> _y4m -> vpx_bps = 12 ; <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( _y4m -> chroma_type , ""420"" ) == 0 || <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( _y4m -> chroma_type , ""420mpeg2"" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> _y4m -> vpx_bps = 16 ; <S2SV_EndBug> <S2SV_StartBug> _y4m -> convert = y4m_convert_null ; <S2SV_EndBug> <S2SV_StartBug> _y4m -> vpx_bps = 24 ; <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( _y4m -> chroma_type , ""444alpha"" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( only_420 ) { <S2SV_EndBug> <S2SV_StartBug> _y4m -> dst_c_dec_h = 2 ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , ""Unknown<S2SV_blank>chroma<S2SV_blank>sampling<S2SV_blank>type:<S2SV_blank>%s\\n"" , _y4m -> chroma_type ) ; <S2SV_EndBug> <S2SV_StartBug> _y4m -> dst_buf_sz = _y4m -> pic_w * _y4m -> pic_h <S2SV_EndBug> <S2SV_StartBug> _y4m -> dst_buf = ( unsigned char * ) malloc ( _y4m -> dst_buf_sz ) ; <S2SV_EndBug> <S2SV_StartBug> _y4m -> aux_buf = ( unsigned char * ) malloc ( _y4m -> aux_buf_sz ) ; <S2SV_EndBug> ","<S2SV_ModStart> = { 0 } <S2SV_ModStart> bps <S2SV_ModEnd> <S2SV_ModStart> _y4m -> bit_depth = 8 ; <S2SV_ModStart> ""420p10"" ) == 0 ) { _y4m -> src_c_dec_h = 2 ; _y4m -> dst_c_dec_h = 2 ; _y4m -> src_c_dec_v = 2 ; _y4m -> dst_c_dec_v = 2 ; _y4m -> dst_buf_read_sz = 2 * ( _y4m -> pic_w * _y4m -> pic_h + 2 * ( ( _y4m -> pic_w + 1 ) / 2 ) * ( ( _y4m -> pic_h + 1 ) / 2 ) ) ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; _y4m -> bit_depth = 10 ; _y4m -> bps = 15 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I42016 ; if ( only_420 ) { fprintf ( stderr , ""Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>420p10<S2SV_blank>to<S2SV_blank>420jpeg\\n"" ) ; return - 1 ; } } else if ( strcmp ( _y4m -> chroma_type , ""420p12"" ) == 0 ) { _y4m -> src_c_dec_h = 2 ; _y4m -> dst_c_dec_h = 2 ; _y4m -> src_c_dec_v = 2 ; _y4m -> dst_c_dec_v = 2 ; _y4m -> dst_buf_read_sz = 2 * ( _y4m -> pic_w * _y4m -> pic_h + 2 * ( ( _y4m -> pic_w + 1 ) / 2 ) * ( ( _y4m -> pic_h + 1 ) / 2 ) ) ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; _y4m -> bit_depth = 12 ; _y4m -> bps = 18 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I42016 ; if ( only_420 ) { fprintf ( stderr , ""Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>420p12<S2SV_blank>to<S2SV_blank>420jpeg\\n"" ) ; return - 1 ; } } else if ( strcmp ( _y4m -> chroma_type , <S2SV_ModStart> bps <S2SV_ModEnd> <S2SV_ModStart> ; } } else if ( strcmp ( _y4m -> chroma_type , ""422p10"" ) == 0 ) { _y4m -> src_c_dec_h = 2 ; _y4m -> src_c_dec_v = 1 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I42216 ; _y4m -> bps = 20 ; _y4m -> bit_depth = 10 ; _y4m -> dst_c_dec_h = _y4m -> src_c_dec_h ; _y4m -> dst_c_dec_v = _y4m -> src_c_dec_v ; _y4m -> dst_buf_read_sz = 2 * ( _y4m -> pic_w * _y4m -> pic_h + 2 * ( ( _y4m -> pic_w + 1 ) / 2 ) * _y4m -> pic_h ) ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; if ( only_420 ) { fprintf ( stderr , ""Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>422p10<S2SV_blank>to<S2SV_blank>420jpeg\\n"" ) ; return - 1 ; } } else if ( strcmp ( _y4m -> chroma_type , ""422p12"" ) == 0 ) { _y4m -> src_c_dec_h = 2 ; _y4m -> src_c_dec_v = 1 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I42216 ; _y4m -> bps = 24 ; _y4m -> bit_depth = 12 ; _y4m -> dst_c_dec_h = _y4m -> src_c_dec_h ; _y4m -> dst_c_dec_v = _y4m -> src_c_dec_v ; _y4m -> dst_buf_read_sz = 2 * ( _y4m -> pic_w * _y4m -> pic_h + 2 * ( ( _y4m -> pic_w + 1 ) / 2 ) * _y4m -> pic_h ) ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; if ( only_420 ) { fprintf ( stderr , ""Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>422p12<S2SV_blank>to<S2SV_blank>420jpeg\\n"" ) ; return - 1 <S2SV_ModStart> bps <S2SV_ModEnd> <S2SV_ModStart> ""444p10"" <S2SV_ModEnd> <S2SV_ModStart> _y4m -> vpx_fmt = VPX_IMG_FMT_I44416 ; _y4m -> bps = 30 ; _y4m -> bit_depth = 10 ; _y4m -> dst_c_dec_h = _y4m -> src_c_dec_h ; _y4m -> dst_c_dec_v = _y4m -> src_c_dec_v ; _y4m -> dst_buf_read_sz = 2 * 3 * _y4m -> pic_w * _y4m -> pic_h ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>444p10<S2SV_blank>to<S2SV_blank>420jpeg\\n"" <S2SV_ModEnd> <S2SV_ModStart> } else if ( strcmp ( _y4m -> chroma_type , ""444p12"" ) == 0 ) { _y4m -> src_c_dec_h = 1 ; _y4m -> src_c_dec_v = 1 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I44416 ; _y4m -> bps = 36 ; _y4m -> bit_depth = 12 ; _y4m -> dst_c_dec_h = _y4m -> src_c_dec_h ; _y4m -> dst_c_dec_v = _y4m -> src_c_dec_v ; _y4m -> dst_buf_read_sz = 2 * 3 * _y4m -> pic_w * _y4m -> pic_h ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; if ( only_420 ) { fprintf ( stderr , ""Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>444p12<S2SV_blank>to<S2SV_blank>420jpeg\\n"" ) ; return - 1 ; } } else if ( strcmp ( _y4m -> chroma_type , ""444alpha"" ) == 0 ) { _y4m -> src_c_dec_h = 1 ; _y4m -> src_c_dec_v = 1 ; if ( only_420 ) { _y4m -> dst_c_dec_h = 2 ; _y4m -> dst_c_dec_v = 2 ; _y4m -> dst_buf_read_sz = _y4m -> pic_w * _y4m -> pic_h ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 3 * _y4m -> pic_w * _y4m -> pic_h ; _y4m -> convert = y4m_convert_444_420jpeg ; } else { _y4m -> vpx_fmt = VPX_IMG_FMT_444A ; _y4m -> bps = 32 ; _y4m -> dst_c_dec_h = _y4m -> src_c_dec_h ; _y4m -> dst_c_dec_v = _y4m -> src_c_dec_v ; _y4m -> dst_buf_read_sz = 4 * _y4m -> pic_w * _y4m -> pic_h ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; } } else if ( strcmp ( _y4m -> chroma_type , ""mono"" ) == 0 ) { _y4m -> src_c_dec_h = _y4m -> src_c_dec_v = 0 ; _y4m -> dst_c_dec_h = _y4m -> dst_c_dec_v = 2 ; _y4m -> dst_buf_read_sz = _y4m -> pic_w * _y4m -> pic_h ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_mono_420jpeg ; } else { fprintf ( stderr , ""Unknown<S2SV_blank>chroma<S2SV_blank>sampling<S2SV_blank>type:<S2SV_blank>%s\\n"" , _y4m -> chroma_type ) ; return - 1 ; } <S2SV_ModStart> if ( _y4m -> bit_depth == 8 ) <S2SV_ModStart> else _y4m -> dst_buf <S2SV_ModEnd> <S2SV_ModStart> 2 * _y4m -> dst_buf_sz ) ; if ( <S2SV_ModStart> > 0 ) _y4m -> aux_buf = ( unsigned char * ) malloc ( _y4m -> aux_buf_sz "
1540,"<S2SV_StartBug> struct obj * otmp = readobjnam ( buf , ( struct obj * ) 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> otmp ; if ( strlen ( buf ) >= BUFSZ ) buf [ BUFSZ - 1 ] = '\\0' ; 
1541,"<S2SV_StartBug> long long directory_table_end , table_start ; <S2SV_EndBug> <S2SV_StartBug> return FALSE ; <S2SV_EndBug> <S2SV_StartBug> return FALSE ; <S2SV_EndBug> <S2SV_StartBug> return FALSE ; <S2SV_EndBug> <S2SV_StartBug> if ( read_fragment_table ( & directory_table_end ) == FALSE ) <S2SV_EndBug> <S2SV_StartBug> return FALSE ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> table_start ; if ( sBlk . s . xattr_id_table_start != SQUASHFS_INVALID_BLK ) { if ( sBlk . s . xattr_id_table_start >= sBlk . s . bytes_used ) { ERROR ( ""read_filesystem_tables:<S2SV_blank>xattr<S2SV_blank>id<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; goto corrupted ; } <S2SV_ModEnd> <S2SV_ModStart> goto corrupted ; } else table_start = sBlk . s . bytes_used ; if ( sBlk . s . id_table_start >= table_start ) { ERROR ( ""read_filesystem_tables:<S2SV_blank>id<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; goto corrupted ; } if ( sBlk . s . no_ids == 0 ) { ERROR ( ""read_filesystem_tables:<S2SV_blank>Bad<S2SV_blank>id<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; goto corrupted ; } if ( sBlk . s . no_ids > ( sBlk . s . inodes * 2L ) ) { ERROR ( ""read_filesystem_tables:<S2SV_blank>Bad<S2SV_blank>id<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; goto corrupted ; } if ( read_id_table <S2SV_ModEnd> <S2SV_ModStart> goto corrupted ; if ( sBlk . s . lookup_table_start != SQUASHFS_INVALID_BLK ) { if ( sBlk . s . lookup_table_start >= table_start ) { ERROR ( ""read_filesystem_tables:<S2SV_blank>lookup<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; goto corrupted ; } <S2SV_ModEnd> <S2SV_ModStart> goto corrupted ; } if ( sBlk . s . fragments != 0 ) { if ( sBlk . s . fragment_table_start >= table_start ) { ERROR ( ""read_filesystem_tables:<S2SV_blank>fragment<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; goto corrupted ; } if ( sBlk . s . fragments > sBlk . s . inodes ) { ERROR ( ""read_filesystem_tables:<S2SV_blank>Bad<S2SV_blank>fragment<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; goto corrupted ; } <S2SV_ModEnd> <S2SV_ModStart> table_start ) == FALSE ) goto corrupted ; } else { if ( sBlk . s . fragment_table_start != table_start ) { ERROR ( ""read_filesystem_tables:<S2SV_blank>fragment<S2SV_blank>table<S2SV_blank>start<S2SV_blank>invalid<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; goto corrupted ; } } if ( sBlk . s . directory_table_start >= table_start ) { ERROR ( ""read_filesystem_tables:<S2SV_blank>directory<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; goto corrupted ; } if ( read_directory_table ( sBlk . s . directory_table_start , table_start ) == FALSE ) goto corrupted ; if ( sBlk . s . inode_table_start >= sBlk . s . directory_table_start ) { ERROR ( ""read_filesystem_tables:<S2SV_blank>inode<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; goto corrupted ; } <S2SV_ModEnd> <S2SV_ModStart> goto corrupted <S2SV_ModEnd> <S2SV_ModStart> corrupted : ERROR ( ""File<S2SV_blank>system<S2SV_blank>corruption<S2SV_blank>detected\\n"" ) ; return FALSE ; "
1542,<S2SV_StartBug> createenv ( const struct rule * rule ) <S2SV_EndBug> <S2SV_StartBug> env -> count = 0 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> , const struct passwd * mypw , const struct passwd * targpw <S2SV_ModStart> ; addnode ( env , ""DOAS_USER"" , mypw -> pw_name ) <S2SV_ModStart> else { static const char * copyset [ ] = { ""DISPLAY"" , ""TERM"" , NULL } ; addnode ( env , ""HOME"" , targpw -> pw_dir ) ; addnode ( env , ""LOGNAME"" , targpw -> pw_name ) ; addnode ( env , ""PATH"" , getenv ( ""PATH"" ) ) ; addnode ( env , ""SHELL"" , targpw -> pw_shell ) ; addnode ( env , ""USER"" , targpw -> pw_name ) ; fillenv ( env , copyset ) ; } "
1543,<S2SV_StartBug> if ( skb_headroom ( skb ) < ( tnl_hlen + frag_hdr_sz ) ) { <S2SV_EndBug> ,<S2SV_ModStart> skb -> mac_header <S2SV_ModEnd> 
1544,"<S2SV_StartBug> vp9_clear_system_state ( ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cpi -> segmentation_map , 0 , cm -> mi_rows * cm -> mi_cols ) ; <S2SV_EndBug> <S2SV_StartBug> in_frame_q_adj_ratio [ segment ] ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> vpx_clear_system_state <S2SV_ModEnd> <S2SV_ModStart> const int aq_strength = get_aq_c_strength ( cm -> base_qindex , cm -> bit_depth ) ; memset ( cpi -> segmentation_map , DEFAULT_AQ2_SEG , cm -> mi_rows * cm -> mi_cols ) ; vp9_clearall_segfeatures ( seg ) ; if ( cpi -> rc . sb64_target_rate < 256 ) { vp9_disable_segmentation ( seg ) ; return ; } vp9_enable_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg , DEFAULT_AQ2_SEG , SEG_LVL_ALT_Q ) ; for ( segment = 0 ; segment < AQ_C_SEGMENTS ; ++ segment ) { int qindex_delta ; if ( segment == DEFAULT_AQ2_SEG ) continue ; <S2SV_ModEnd> <S2SV_ModStart> aq_c_q_adj_factor [ aq_strength ] [ segment ] , cm -> bit_depth ) ; if ( ( cm -> base_qindex != 0 ) && ( ( cm -> base_qindex + qindex_delta ) == 0 ) ) { qindex_delta = - cm -> base_qindex + 1 ; } if ( ( cm -> base_qindex + qindex_delta ) > 0 ) { <S2SV_ModEnd> <S2SV_ModStart> } "
1545,"<S2SV_StartBug> Module_type = make_type ( ""Module"" , mod_type , Module_fields , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! Module_type ) return 0 ; <S2SV_EndBug> <S2SV_StartBug> Interactive_type = make_type ( ""Interactive"" , mod_type , Interactive_fields , <S2SV_EndBug> <S2SV_StartBug> if ( ! Interactive_type ) return 0 ; <S2SV_EndBug> <S2SV_StartBug> Expression_type = make_type ( ""Expression"" , mod_type , Expression_fields , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> 5 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! FunctionDef_type ) return 0 ; <S2SV_EndBug> <S2SV_StartBug> AsyncFunctionDef_fields , 5 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! AsyncFunctionDef_type ) return 0 ; <S2SV_EndBug> <S2SV_StartBug> ClassDef_type = make_type ( ""ClassDef"" , stmt_type , ClassDef_fields , 5 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ClassDef_type ) return 0 ; <S2SV_EndBug> <S2SV_StartBug> Return_type = make_type ( ""Return"" , stmt_type , Return_fields , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> Delete_type = make_type ( ""Delete"" , stmt_type , Delete_fields , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> Assign_type = make_type ( ""Assign"" , stmt_type , Assign_fields , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> AugAssign_type = make_type ( ""AugAssign"" , stmt_type , AugAssign_fields , 3 ) ; <S2SV_EndBug> <S2SV_StartBug> arg_type = make_type ( ""arg"" , & AST_type , arg_fields , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> initialized = 1 ; <S2SV_EndBug> ","<S2SV_ModStart> 2 ) ; if ( ! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"" , mod_type , Interactive_fields , <S2SV_ModStart> Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"" <S2SV_ModEnd> <S2SV_ModStart> Expression_fields , <S2SV_ModEnd> <S2SV_ModStart> Expression_type ) return 0 ; FunctionType_type = make_type ( ""FunctionType"" <S2SV_ModEnd> <S2SV_ModStart> FunctionType_fields , 2 ) ; if ( ! FunctionType_type <S2SV_ModEnd> <S2SV_ModStart> 6 ) ; if ( ! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"" , stmt_type , AsyncFunctionDef_fields , 6 ) ; if ( ! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"" , stmt_type , ClassDef_fields , <S2SV_ModStart> ClassDef_type ) return 0 ; Return_type = make_type ( ""Return"" <S2SV_ModEnd> <S2SV_ModStart> Return_fields , 1 ) ; if ( ! Return_type ) return 0 ; Delete_type = make_type ( ""Delete"" , stmt_type , Delete_fields , 1 ) ; if ( ! Delete_type ) return 0 ; Assign_type = make_type ( ""Assign"" , stmt_type , Assign_fields , 3 ) ; if ( ! Assign_type ) return 0 ; AugAssign_type = make_type ( ""AugAssign"" , stmt_type , AugAssign_fields , 3 ) ; if ( ! AugAssign_type ) return 0 ; AnnAssign_type = make_type ( ""AnnAssign"" , stmt_type , AnnAssign_fields , 4 ) ; if ( ! AnnAssign_type ) return 0 ; For_type = make_type ( ""For"" , stmt_type , For_fields <S2SV_ModEnd> <S2SV_ModStart> For_type ) return 0 ; AsyncFor_type = make_type ( ""AsyncFor"" <S2SV_ModEnd> <S2SV_ModStart> AsyncFor_fields <S2SV_ModEnd> <S2SV_ModStart> AsyncFor_type ) return 0 ; While_type = make_type ( ""While"" <S2SV_ModEnd> <S2SV_ModStart> While_fields , 3 ) ; if ( ! While_type ) return 0 ; If_type = make_type ( ""If"" <S2SV_ModEnd> <S2SV_ModStart> If_fields , 3 ) ; if ( ! If_type ) return 0 ; With_type = make_type ( ""With"" <S2SV_ModEnd> <S2SV_ModStart> With_fields , 3 ) ; if ( ! With_type ) return 0 ; AsyncWith_type = make_type ( ""AsyncWith"" <S2SV_ModEnd> <S2SV_ModStart> AsyncWith_fields , 3 <S2SV_ModEnd> <S2SV_ModStart> 3 <S2SV_ModEnd> <S2SV_ModStart> type_ignore_type = make_type ( ""type_ignore"" , & AST_type , NULL , 0 ) ; if ( ! type_ignore_type ) return 0 ; if ( ! add_attributes ( type_ignore_type , NULL , 0 ) ) return 0 ; TypeIgnore_type = make_type ( ""TypeIgnore"" , type_ignore_type , TypeIgnore_fields , 1 ) ; if ( ! TypeIgnore_type ) return 0 ; "
1546,"<S2SV_StartBug> logfile_fd = open ( log_path , O_WRONLY | O_CREAT | O_TRUNC , S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH ) ; <S2SV_EndBug> <S2SV_StartBug> write ( logfile_fd , ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"" , 16 ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
1547,<S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; } 
1548,<S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart> else ( void ) cpi ; # 
1549,"<S2SV_StartBug> smb_flush_file ( sr , sr -> fid_ofile ) ; <S2SV_EndBug> <S2SV_StartBug> smb_flush_file ( sr , file ) ; <S2SV_EndBug> ",<S2SV_ModStart> smb_ofile_flush <S2SV_ModEnd> <S2SV_ModStart> smb_ofile_flush <S2SV_ModEnd> 
1550,"<S2SV_StartBug> int utf8s_to_utf16s ( const u8 * s , int len , wchar_t * pwcs ) <S2SV_EndBug> <S2SV_StartBug> while ( * s && len > 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( u >= PLANE_SIZE ) { <S2SV_EndBug> <S2SV_StartBug> u -= PLANE_SIZE ; <S2SV_EndBug> <S2SV_StartBug> * op ++ = ( wchar_t ) ( SURROGATE_PAIR | <S2SV_EndBug> <S2SV_StartBug> ( ( u >> 10 ) & SURROGATE_BITS ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( u & SURROGATE_BITS ) ) ; <S2SV_EndBug> <S2SV_StartBug> * op ++ = ( wchar_t ) u ; <S2SV_EndBug> <S2SV_StartBug> * op ++ = * s ++ ; <S2SV_EndBug> ","<S2SV_ModStart> enum utf16_endian endian , <S2SV_ModStart> , int maxlen <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && maxlen > 0 && * s <S2SV_ModStart> s += size ; len -= size ; <S2SV_ModStart> if ( maxlen < 2 ) break ; <S2SV_ModStart> put_utf16 ( op ++ , <S2SV_ModEnd> <S2SV_ModStart> , endian ) ; put_utf16 ( op ++ , <S2SV_ModEnd> <S2SV_ModStart> , endian ) ; maxlen -= 2 <S2SV_ModEnd> <S2SV_ModStart> put_utf16 ( op ++ , u , endian ) ; maxlen -- ; } <S2SV_ModEnd> <S2SV_ModStart> put_utf16 ( op ++ , * s ++ , endian ) ; len -- ; maxlen <S2SV_ModEnd> "
1551,"<S2SV_StartBug> if ( ( strchr ( cp , '/' ) != NULL ) || ( strcmp ( cp , "".."" ) == 0 ) ) { <S2SV_EndBug> ","<S2SV_ModStart> * cp == '\\0' || <S2SV_ModEnd> <S2SV_ModStart> || <S2SV_ModEnd> <S2SV_ModStart> ""."" ) == 0 || strcmp ( cp , <S2SV_ModStart>  <S2SV_ModEnd> "
1552,"<S2SV_StartBug> int num , i , num1 , num2 ; <S2SV_EndBug> <S2SV_StartBug> char * s , * t , * StartClean ; <S2SV_EndBug> <S2SV_StartBug> double * argbuf = 0 ; <S2SV_EndBug> <S2SV_StartBug> outpos = outputbuffer ; <S2SV_EndBug> <S2SV_StartBug> outpos += sprintf ( outpos , ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"" , s , t , TERMCHAR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * s == '0' && s [ 1 ] == ']' ) { <S2SV_EndBug> <S2SV_StartBug> outpos += sprintf ( outpos , ""Axohelp<S2SV_blank>version<S2SV_blank>%d.%d.<S2SV_blank>PDF<S2SV_blank>output.}"" , VERSION , SUBVERSION ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( outfile , ""%s"" , outputbuffer ) ; <S2SV_EndBug> <S2SV_StartBug> if ( argbuf ) free ( argbuf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( argbuf = ReadArray ( t , & num1 , & num2 ) ) == 0 ) return ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> free ( argbuf ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ( argbuf = ReadArray ( t , & num1 , & num2 ) ) == 0 ) return ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> free ( argbuf ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ( argbuf = ReadTail ( t , & num ) ) == 0 ) return ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> free ( argbuf ) ; <S2SV_EndBug> <S2SV_StartBug> free ( argbuf ) ; <S2SV_EndBug> ","<S2SV_ModStart> , retcode <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; retcode = - 1 <S2SV_ModStart> fprintf ( outfile , ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"" , s , t , TERMCHAR ) ; <S2SV_ModStart> nameobject = t ; while ( * t != '<S2SV_blank>' && * t != '\\t' && * t != '\\n' && * t ) t ++ ; * t ++ = 0 ; while ( * t == '<S2SV_blank>' || * t == '\\t' || * t == '\\n' ) t ++ <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> fprintf ( outfile , ""Axohelp<S2SV_blank>version<S2SV_blank>%d.%d.<S2SV_blank>PDF<S2SV_blank>output."" <S2SV_ModEnd> <S2SV_ModStart> goto SUCCESS ; } else { fprintf ( <S2SV_ModEnd> <S2SV_ModStart> goto EXIT ; } } <S2SV_ModEnd> <S2SV_ModStart> goto EXIT <S2SV_ModEnd> <S2SV_ModStart> goto EXIT <S2SV_ModEnd> <S2SV_ModStart> argbuf = 0 ; <S2SV_ModStart> goto EXIT <S2SV_ModEnd> <S2SV_ModStart> goto EXIT <S2SV_ModEnd> <S2SV_ModStart> argbuf = 0 ; <S2SV_ModStart> goto EXIT <S2SV_ModEnd> <S2SV_ModStart> argbuf = 0 ; <S2SV_ModStart> goto EXIT <S2SV_ModEnd> <S2SV_ModStart> goto EXIT ; } } SUCCESS : retcode = 0 ; EXIT : if ( argbuf ) { <S2SV_ModStart> } fprintf ( outfile , ""}\\n"" ) ; return ( retcode <S2SV_ModEnd> "
1553,<S2SV_StartBug> default : <S2SV_EndBug> ,<S2SV_ModStart> case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ; 
1554,"<S2SV_StartBug> static u32 ip_idents_hashrnd __read_mostly ; <S2SV_EndBug> <S2SV_StartBug> net_get_random_once ( & ip_idents_hashrnd , sizeof ( ip_idents_hashrnd ) ) ; <S2SV_EndBug> <S2SV_StartBug> hash = jhash_3words ( ( __force u32 ) iph -> daddr , <S2SV_EndBug> <S2SV_StartBug> iph -> protocol ^ net_hash_mix ( net ) , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( unlikely ( siphash_key_is_zero ( & net -> ipv4 . ip_id_key ) ) ) get_random_bytes ( & net -> ipv4 . ip_id_key <S2SV_ModEnd> <S2SV_ModStart> net -> ipv4 . ip_id_key <S2SV_ModEnd> <S2SV_ModStart> siphash_3u32 <S2SV_ModEnd> <S2SV_ModStart> , & net -> ipv4 . ip_id_key <S2SV_ModEnd> "
1555,"<S2SV_StartBug> if ( exists_not_none ( obj , & PyId_lower ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_lower ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> slice_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_slice ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( dims , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Index"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; lower = NULL ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_upper , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; upper = NULL ; } else { int res ; res = obj2ast_expr ( tmp , & upper , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj , & PyId_step , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; step = NULL ; } else { int res ; res = obj2ast_expr ( tmp , & step , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } * out = Slice ( lower , upper , step , arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = PyObject_IsInstance ( obj , ( PyObject * ) ExtSlice_type ) ; if ( isinstance == - 1 ) { return 1 ; } if ( isinstance ) { asdl_seq * dims ; if ( lookup_attr_id ( obj , & PyId_dims , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""dims\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ExtSlice"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Index"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * out = Index ( value , arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } PyErr_Format <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1556,"<S2SV_StartBug> static void write_intra_mode ( vp9_writer * w , MB_PREDICTION_MODE mode , <S2SV_EndBug> <S2SV_StartBug> const vp9_prob * probs ) { <S2SV_EndBug> ",<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> 
1557,<S2SV_StartBug> if ( setpwnam ( ctl -> pw ) < 0 ) { <S2SV_EndBug> ,"<S2SV_ModStart> , "".chfn"" "
1558,<S2SV_StartBug> if ( radiotap_header -> it_version ) <S2SV_EndBug> <S2SV_StartBug> ( unsigned long ) iterator -> _rtheader > <S2SV_EndBug> ,<S2SV_ModStart> max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> + sizeof ( uint32_t ) 
1559,"<S2SV_StartBug> if ( ! nfp_abm_u32_check_knode ( alink -> abm , knode , proto , extack ) ) <S2SV_EndBug> <S2SV_StartBug> goto err_delete ; <S2SV_EndBug> <S2SV_StartBug> goto err_delete ; <S2SV_EndBug> <S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> <S2SV_StartBug> list_add ( & match -> list , & alink -> dscp_map ) ; <S2SV_EndBug> <S2SV_StartBug> return - EOPNOTSUPP ; <S2SV_EndBug> ",<S2SV_ModStart> { err = - EOPNOTSUPP ; <S2SV_ModStart> } <S2SV_ModStart> err = - EOPNOTSUPP ; <S2SV_ModStart> { err = <S2SV_ModEnd> <S2SV_ModStart> goto err_delete ; } <S2SV_ModStart> err <S2SV_ModEnd> 
1560,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> dst_state -> speculative = src -> speculative ; 
1561,"<S2SV_StartBug> ZEND_FETCH_RESOURCE ( im , gdImagePtr , & IM , - 1 , ""Image"" , le_gd ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC , E_WARNING , ""Gamma<S2SV_blank>values<S2SV_blank>should<S2SV_blank>be<S2SV_blank>positive"" ) ; RETURN_FALSE ; } "
1562,<S2SV_StartBug> stream -> config . cfg . g_pass = global -> passes == 2 <S2SV_EndBug> <S2SV_StartBug> if ( pass ) <S2SV_EndBug> <S2SV_StartBug> stream -> cx_time = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> # if CONFIG_FP_MB_STATS if ( stream -> config . fpmb_stats_fn ) { if ( ! stats_open_file ( & stream -> fpmb_stats , stream -> config . fpmb_stats_fn , pass ) ) fatal ( ""Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>mb<S2SV_blank>statistics<S2SV_blank>store"" ) ; } else { if ( ! stats_open_mem ( & stream -> fpmb_stats , pass ) ) fatal ( ""Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>mb<S2SV_blank>statistics<S2SV_blank>store"" ) ; } # endif <S2SV_ModStart> { <S2SV_ModStart> # if CONFIG_FP_MB_STATS stream -> config . cfg . rc_firstpass_mb_stats_in = stats_get ( & stream -> fpmb_stats ) ; # endif } "
1563,<S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> ,<S2SV_ModStart> sas_eh_finish_cmd <S2SV_ModEnd> 
1564,<S2SV_StartBug> else <S2SV_EndBug> ,"<S2SV_ModStart> if ( strcmp ( arg , ""@@"" ) == 0 || strcmp ( arg , ""@@u"" ) == 0 ) g_print ( _ ( ""Skipping<S2SV_blank>invalid<S2SV_blank>Exec<S2SV_blank>argument<S2SV_blank>%s\\n"" ) , arg ) ; else "
1565,"<S2SV_StartBug> VP9_COMMON * const cm = & pbi -> common ; <S2SV_EndBug> <S2SV_StartBug> const uint8_t * end = NULL ; <S2SV_EndBug> <S2SV_StartBug> vp9_reader r ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cm -> above_context , 0 , <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cm -> above_seg_context , 0 , <S2SV_EndBug> <S2SV_StartBug> sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; <S2SV_EndBug> <S2SV_StartBug> const int last_tile = tile_row == tile_rows - 1 && <S2SV_EndBug> ","<S2SV_ModStart> ; const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) <S2SV_ModStart> int mi_row , mi_col ; TileData * tile_data <S2SV_ModEnd> <S2SV_ModStart> if ( cm -> lf . filter_level && ! cm -> skip_loop_filter && pbi -> lf_worker . data1 == NULL ) { CHECK_MEM_ERROR ( cm , pbi -> lf_worker . data1 , vpx_memalign ( 32 , sizeof ( LFWorkerData ) ) ) ; pbi -> lf_worker . hook = ( VPxWorkerHook ) vp9_loop_filter_worker ; if ( pbi -> max_threads > 1 && ! winterface -> reset ( & pbi -> lf_worker ) ) { vpx_internal_error ( & cm -> error , VPX_CODEC_ERROR , ""Loop<S2SV_blank>filter<S2SV_blank>thread<S2SV_blank>creation<S2SV_blank>failed"" ) ; } } if ( cm -> lf . filter_level && ! cm -> skip_loop_filter ) { LFWorkerData * const lf_data = ( LFWorkerData * ) pbi -> lf_worker . data1 ; winterface -> sync ( & pbi -> lf_worker ) ; vp9_loop_filter_data_reset ( lf_data , get_frame_new_buffer ( cm ) , cm , pbi -> mb . plane ) ; } <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> get_tile_buffers ( pbi , data , data_end , tile_cols , tile_rows , tile_buffers ) ; if ( pbi -> tile_data == NULL || ( tile_cols * tile_rows ) != pbi -> total_tiles ) { vpx_free ( pbi -> tile_data ) ; CHECK_MEM_ERROR ( cm , pbi -> tile_data , vpx_memalign ( 32 , tile_cols * tile_rows * ( sizeof ( * pbi -> tile_data ) ) ) ) ; pbi -> total_tiles = tile_rows * tile_cols ; } <S2SV_ModStart> TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; tile_data = pbi -> tile_data + tile_cols * tile_row + tile_col ; tile_data -> cm = cm ; tile_data -> xd = pbi -> mb ; tile_data -> xd . corrupted = 0 ; tile_data -> xd . counts = cm -> frame_parallel_decoding_mode ? NULL : & cm -> counts ; vp9_zero ( tile_data -> dqcoeff ) ; vp9_tile_init ( & tile_data -> xd . tile , tile_data -> cm , tile_row , tile_col ) ; setup_token_decoder ( buf -> data , data_end , buf -> size , & cm -> error , & tile_data -> bit_reader , pbi -> decrypt_cb , pbi -> decrypt_state ) ; vp9_init_macroblockd ( cm , & tile_data -> xd , tile_data -> dqcoeff ) ; } } for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { TileInfo tile ; vp9_tile_set_row ( & tile , cm , tile_row ) ; for ( mi_row = tile . mi_row_start ; mi_row < tile . mi_row_end ; mi_row += MI_BLOCK_SIZE ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int col = pbi -> inv_tile_order ? tile_cols - tile_col - 1 : tile_col ; tile_data = pbi -> tile_data + tile_cols * tile_row + col ; vp9_tile_set_col ( & tile , tile_data -> cm , col ) ; vp9_zero ( tile_data -> xd . left_context ) ; vp9_zero ( tile_data -> xd . left_seg_context ) ; for ( mi_col = tile . mi_col_start ; mi_col < tile . mi_col_end ; mi_col += MI_BLOCK_SIZE ) { decode_partition ( pbi , & tile_data -> xd , mi_row , mi_col , & tile_data -> bit_reader , BLOCK_64X64 , 4 ) ; } pbi -> mb . corrupted |= tile_data -> xd . corrupted ; if ( pbi -> mb . corrupted ) vpx_internal_error ( & cm -> error , VPX_CODEC_CORRUPT_FRAME , ""Failed<S2SV_blank>to<S2SV_blank>decode<S2SV_blank>tile<S2SV_blank>data"" ) ; } if ( cm -> lf . filter_level && ! cm -> skip_loop_filter ) { const int lf_start = mi_row - MI_BLOCK_SIZE ; LFWorkerData * const lf_data = ( LFWorkerData * ) pbi -> lf_worker . data1 ; if ( lf_start < 0 ) continue ; if ( mi_row + MI_BLOCK_SIZE >= cm -> mi_rows ) continue ; winterface -> sync ( & pbi -> lf_worker ) ; lf_data -> start = lf_start ; lf_data -> stop = mi_row ; if ( pbi -> max_threads > 1 ) { winterface -> launch ( & pbi -> lf_worker ) ; } else { winterface -> execute ( & pbi -> lf_worker ) ; } } if ( pbi -> frame_parallel_decode ) vp9_frameworker_broadcast ( pbi -> cur_buf , mi_row << MI_BLOCK_SIZE_LOG2 ) ; } } if ( cm -> lf . filter_level && ! cm -> skip_loop_filter ) { LFWorkerData * const lf_data = ( LFWorkerData * ) pbi -> lf_worker . data1 ; winterface -> sync ( & pbi -> lf_worker ) ; lf_data -> start = lf_data -> stop ; lf_data -> stop = cm -> mi_rows ; winterface -> execute ( & pbi -> lf_worker ) ; } tile_data = pbi -> tile_data + tile_cols * <S2SV_ModEnd> <S2SV_ModStart> ; if ( pbi -> frame_parallel_decode ) vp9_frameworker_broadcast ( pbi -> cur_buf , INT_MAX ) ; return vpx_reader_find_end ( & tile_data -> bit_reader ) <S2SV_ModEnd> "
1566,"<S2SV_StartBug> VP9Decoder * vp9_decoder_create ( const VP9D_CONFIG * oxcf ) { <S2SV_EndBug> <S2SV_StartBug> VP9Decoder * const pbi = vpx_memalign ( 32 , sizeof ( * pbi ) ) ; <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * const cm = pbi ? & pbi -> common : NULL ; <S2SV_EndBug> <S2SV_StartBug> vp9_initialize_dec ( ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> current_video_frame = 0 ; <S2SV_EndBug> <S2SV_StartBug> pbi -> oxcf = * oxcf ; <S2SV_EndBug> <S2SV_StartBug> pbi -> decoded_key_frame = 0 ; <S2SV_EndBug> <S2SV_StartBug> vp9_init_dequantizer ( cm ) ; <S2SV_EndBug> ","<S2SV_ModStart> BufferPool * const pool <S2SV_ModEnd> <S2SV_ModStart> volatile <S2SV_ModStart> volatile <S2SV_ModStart> CHECK_MEM_ERROR ( cm , cm -> fc , ( FRAME_CONTEXT * ) vpx_calloc ( 1 , sizeof ( * cm -> fc ) ) ) ; CHECK_MEM_ERROR ( cm , cm -> frame_contexts , ( FRAME_CONTEXT * ) vpx_calloc ( FRAME_CONTEXTS , sizeof ( * cm -> frame_contexts ) ) ) ; pbi -> need_resync = 1 ; once ( initialize_dec ) ; memset <S2SV_ModEnd> <S2SV_ModStart> memset ( & cm -> next_ref_frame_map , - 1 , sizeof ( cm -> next_ref_frame_map ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> common . buffer_pool = pool ; cm -> bit_depth = VPX_BITS_8 ; cm -> dequant_bit_depth = VPX_BITS_8 ; cm -> alloc_mi = vp9_dec_alloc_mi ; cm -> free_mi = vp9_dec_free_mi ; cm -> setup_mi = vp9_dec_setup_mi ; vp9_loop_filter_init ( cm ) ; cm -> error . setjmp <S2SV_ModEnd> <S2SV_ModStart> vpx_get_worker_interface ( ) -> init <S2SV_ModEnd> "
1567,"<S2SV_StartBug> GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( ""[iso<S2SV_blank>file]<S2SV_blank>Missing<S2SV_blank>dref<S2SV_blank>box<S2SV_blank>in<S2SV_blank>dinf\\n"" ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; <S2SV_EndBug> ","<S2SV_ModStart> GF_Box * dref ; <S2SV_ModStart> ) ; dref = gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF <S2SV_ModStart> dref ; gf_isom_box_add_for_dump_mode ( s , dref <S2SV_ModEnd> "
1568,"<S2SV_StartBug> client -> priv -> protocol_timeout = g_timeout_add_seconds ( 5 , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1569,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> new_fpl -> user = get_uid ( fpl -> user ) ; 
1570,<S2SV_StartBug> struct ip_options * opt ; <S2SV_EndBug> <S2SV_StartBug> if ( opt == NULL || opt -> cipso == 0 ) <S2SV_EndBug> ,<S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> opt . 
1571,"<S2SV_StartBug> static void tree2tok ( struct vp9_token * tokens , const vp9_tree_index * tree , <S2SV_EndBug> <S2SV_StartBug> const vp9_tree_index j = tree [ i ++ ] ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_tree_index <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_index <S2SV_ModEnd> 
1572,"<S2SV_StartBug> if ( img ) <S2SV_EndBug> <S2SV_StartBug> res = validate_img ( ctx , img ) ; <S2SV_EndBug> <S2SV_StartBug> if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | <S2SV_EndBug> <S2SV_StartBug> if ( res == VPX_CODEC_OK && ctx -> cpi != NULL ) { <S2SV_EndBug> <S2SV_StartBug> unsigned int lib_flags ; <S2SV_EndBug> <S2SV_StartBug> int64_t dst_time_stamp , dst_end_time_stamp ; <S2SV_EndBug> <S2SV_StartBug> ( ( VP9_COMP * ) ctx -> cpi ) -> b_calculate_psnr = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_receive_raw_frame ( ctx -> cpi , lib_flags , <S2SV_EndBug> <S2SV_StartBug> VP9_COMP * cpi = ( VP9_COMP * ) ctx -> cpi ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> cx_data_sz = ctx -> cx_data_sz ; <S2SV_EndBug> <S2SV_StartBug> - 1 != vp9_get_compressed_data ( ctx -> cpi , & lib_flags , & size , <S2SV_EndBug> <S2SV_StartBug> vpx_codec_pts_t round , delta ; <S2SV_EndBug> <S2SV_StartBug> VP9_COMP * const cpi = ( VP9_COMP * ) ctx -> cpi ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> common . show_frame == 0 ) { <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> pkt . kind = VPX_CODEC_CX_FRAME_PKT ; <S2SV_EndBug> <S2SV_StartBug> ( dst_time_stamp * ctx -> cfg . g_timebase . den + round ) <S2SV_EndBug> <S2SV_StartBug> ( ( delta * ctx -> cfg . g_timebase . den + round ) <S2SV_EndBug> <S2SV_StartBug> pkt . data . frame . flags = lib_flags << 16 ; <S2SV_EndBug> <S2SV_StartBug> size += write_superframe_index ( ctx ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_codec_pkt_list_add ( & ctx -> pkt_list . head , & pkt ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> VP9_COMP * const cpi = ctx -> cpi ; const vpx_rational_t * const timebase = & ctx -> cfg . g_timebase ; size_t data_sz ; <S2SV_ModStart> != NULL ) { <S2SV_ModEnd> <S2SV_ModStart> if ( res == VPX_CODEC_OK && cpi != NULL ) { data_sz = ctx -> cfg . g_w * ctx -> cfg . g_h * get_image_bps ( img ) / 8 * ( cpi -> multi_arf_allowed ? 8 : 2 ) ; if ( data_sz < 4096 ) data_sz = 4096 ; if ( ctx -> cx_data == NULL || ctx -> cx_data_sz < data_sz ) { ctx -> cx_data_sz = data_sz ; free ( ctx -> cx_data ) ; ctx -> cx_data = ( unsigned char * ) malloc ( ctx -> cx_data_sz ) ; if ( ctx -> cx_data == NULL ) { return VPX_CODEC_MEM_ERROR ; } } } } <S2SV_ModStart> vp9_apply_encoding_flags ( cpi , flags ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = 0 <S2SV_ModStart> = timebase_units_to_ticks ( timebase , pts ) ; int64_t dst_end_time_stamp = timebase_units_to_ticks ( timebase , pts + duration ) <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cpi , flags | ctx -> next_frame_flags <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ctx -> next_frame_flags = 0 ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_SPATIAL_SVC if ( cpi -> use_svc ) cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id * cpi -> svc . number_temporal_layers ] . layer_size += size ; # endif if ( ! <S2SV_ModEnd> <S2SV_ModStart> || ( cpi -> use_svc && cpi -> svc . spatial_layer_id < cpi -> svc . number_spatial_layers - 1 ) <S2SV_ModEnd> <S2SV_ModStart> if ( ctx -> output_cx_pkt_cb . output_cx_pkt ) { pkt . kind = VPX_CODEC_CX_FRAME_PKT ; pkt . data . frame . pts = ticks_to_timebase_units ( timebase , dst_time_stamp ) ; pkt . data . frame . duration = ( unsigned long ) ticks_to_timebase_units ( timebase , <S2SV_ModEnd> <S2SV_ModStart> data . frame . flags = get_frame_pkt_flags ( cpi , lib_flags ) ; pkt . data . frame . buf = ctx -> pending_cx_data ; pkt . data . frame . sz = size ; ctx -> pending_cx_data = NULL ; ctx -> pending_cx_data_sz = 0 ; ctx -> pending_frame_count = 0 ; ctx -> pending_frame_magnitude = 0 ; ctx -> output_cx_pkt_cb . output_cx_pkt ( & pkt , ctx -> output_cx_pkt_cb . user_priv ) ; } continue ; } pkt . <S2SV_ModStart> ticks_to_timebase_units ( timebase , dst_time_stamp ) <S2SV_ModEnd> <S2SV_ModStart> ticks_to_timebase_units ( timebase , dst_end_time_stamp - dst_time_stamp <S2SV_ModEnd> <S2SV_ModStart> get_frame_pkt_flags ( cpi , lib_flags ) <S2SV_ModEnd> <S2SV_ModStart> if ( ! ctx -> output_cx_pkt_cb . output_cx_pkt ) <S2SV_ModStart> if ( ctx -> output_cx_pkt_cb . output_cx_pkt ) ctx -> output_cx_pkt_cb . output_cx_pkt ( & pkt , ctx -> output_cx_pkt_cb . user_priv ) ; else <S2SV_ModStart> # if VPX_ENCODER_ABI_VERSION > ( 5 + VPX_CODEC_ABI_VERSION ) # if CONFIG_SPATIAL_SVC if ( cpi -> use_svc && ! ctx -> output_cx_pkt_cb . output_cx_pkt ) { vpx_codec_cx_pkt_t pkt_sizes , pkt_psnr ; int sl ; vp9_zero ( pkt_sizes ) ; vp9_zero ( pkt_psnr ) ; pkt_sizes . kind = VPX_CODEC_SPATIAL_SVC_LAYER_SIZES ; pkt_psnr . kind = VPX_CODEC_SPATIAL_SVC_LAYER_PSNR ; for ( sl = 0 ; sl < cpi -> svc . number_spatial_layers ; ++ sl ) { LAYER_CONTEXT * lc = & cpi -> svc . layer_context [ sl * cpi -> svc . number_temporal_layers ] ; pkt_sizes . data . layer_sizes [ sl ] = lc -> layer_size ; pkt_psnr . data . layer_psnr [ sl ] = lc -> psnr_pkt ; lc -> layer_size = 0 ; } vpx_codec_pkt_list_add ( & ctx -> pkt_list . head , & pkt_sizes ) ; vpx_codec_pkt_list_add ( & ctx -> pkt_list . head , & pkt_psnr ) ; } # endif # endif if ( is_one_pass_cbr_svc ( cpi ) && ( cpi -> svc . spatial_layer_id == cpi -> svc . number_spatial_layers - 1 ) ) { break ; } "
1573,<S2SV_StartBug> ctx -> clockid = clockid ; <S2SV_EndBug> ,<S2SV_ModStart> spin_lock_init ( & ctx -> cancel_lock ) ; 
1574,"<S2SV_StartBug> struct mount * child , * p ; <S2SV_EndBug> <S2SV_StartBug> if ( IS_MNT_SHARED ( dest_mnt ) ) { <S2SV_EndBug> <S2SV_StartBug> err = propagate_mnt ( dest_mnt , dest_mp , source_mnt , & tree_list ) ; <S2SV_EndBug> <S2SV_StartBug> umount_tree ( child , UMOUNT_SYNC ) ; <S2SV_EndBug> <S2SV_StartBug> return err ; <S2SV_EndBug> ","<S2SV_ModStart> mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ! parent_path ) { err = count_mounts ( ns , source_mnt <S2SV_ModEnd> <S2SV_ModStart> } if ( IS_MNT_SHARED ( dest_mnt ) ) { err = invent_group_ids ( source_mnt , true ) ; if ( err ) goto out ; <S2SV_ModStart> child -> mnt_parent -> mnt_ns -> pending_mounts = 0 ; <S2SV_ModStart> ns -> pending_mounts = 0 ; "
1575,"<S2SV_StartBug> ret = get_tag ( asn1 , len , & t , & contents , & clen , & asn1 , & len ) ; <S2SV_EndBug> ","<S2SV_ModStart> , 0 "
1576,<S2SV_StartBug> void fadst16_8col ( __m128i * in ) { <S2SV_EndBug> <S2SV_StartBug> const __m128i k__cospi_m16_m16 = _mm_set1_epi16 ( - cospi_16_64 ) ; <S2SV_EndBug> <S2SV_StartBug> const __m128i k__cospi_p16_p16 = _mm_set1_epi16 ( cospi_16_64 ) ; <S2SV_EndBug> ,<S2SV_ModStart> static <S2SV_ModStart> ( int16_t ) <S2SV_ModStart> ( int16_t ) 
1577,"<S2SV_StartBug> static int frame_max_bits ( const RATE_CONTROL * rc , const VP9_CONFIG * oxcf ) { <S2SV_EndBug> <S2SV_StartBug> int64_t max_bits = ( ( int64_t ) rc -> av_per_frame_bandwidth * <S2SV_EndBug> ",<S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> 
1578,<S2SV_StartBug> uchar magicbuf [ MIF_MAGICLEN ] ; <S2SV_EndBug> ,<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
1579,"<S2SV_StartBug> void Huff_transmit ( huff_t * huff , int ch , byte * fout ) { <S2SV_EndBug> <S2SV_StartBug> Huff_transmit ( huff , NYT , fout ) ; <S2SV_EndBug> <S2SV_StartBug> send ( huff -> loc [ ch ] , NULL , fout ) ; <S2SV_EndBug> ","<S2SV_ModStart> , int maxoffset <S2SV_ModStart> , maxoffset <S2SV_ModStart> , maxoffset "
1580,"<S2SV_StartBug> static void encode_superblock ( VP9_COMP * cpi , TOKENEXTRA * * t , int output_enabled , <S2SV_EndBug> <S2SV_StartBug> int mi_row , int mi_col , BLOCK_SIZE bsize ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> PICK_MODE_CONTEXT * ctx = get_block_context ( x , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> x -> skip_recode = ! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && <S2SV_EndBug> <S2SV_StartBug> x -> skip_optimize = ctx -> is_coded ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_type == KEY_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> set_ref_ptrs ( cm , xd , mbmi -> ref_frame [ 0 ] , mbmi -> ref_frame [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_setup_pre_planes ( xd , ref , cfg , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> vp9_build_inter_predictors_sb ( xd , mi_row , mi_col , MAX ( bsize , BLOCK_8X8 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> skip ) { <S2SV_EndBug> <S2SV_StartBug> vp9_tokenize_sb ( cpi , t , ! output_enabled , MAX ( bsize , BLOCK_8X8 ) ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> vp9_segfeature_active ( & cm -> seg , segment_id , SEG_LVL_SKIP ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ++ get_tx_counts ( max_txsize_lookup [ bsize ] , vp9_get_tx_size_context ( xd ) , <S2SV_EndBug> <S2SV_StartBug> & cm -> counts . tx ) [ mbmi -> tx_size ] ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ThreadData * td , <S2SV_ModStart> , PICK_MODE_CONTEXT * ctx <S2SV_ModStart> td <S2SV_ModEnd> <S2SV_ModStart> const int seg_skip = segfeature_active ( & cm -> seg , mbmi -> segment_id , SEG_LVL_SKIP ) <S2SV_ModEnd> <S2SV_ModStart> select_tx_size <S2SV_ModEnd> <S2SV_ModStart> if ( ! x -> skip_recode && ! cpi -> sf . use_nonrd_pick_mode ) memset ( x -> skip_txfm , 0 , sizeof ( x -> skip_txfm ) ) ; <S2SV_ModStart> ! is_inter_block ( mbmi ) ) { int plane ; mbmi -> skip = 1 ; for ( plane = 0 ; plane < MAX_MB_PLANE ; ++ plane ) vp9_encode_intra_block_plane ( x , MAX ( bsize , BLOCK_8X8 ) , plane ) ; if ( output_enabled ) sum_intra_stats ( td -> counts , mi ) ; vp9_tokenize_sb ( cpi , td , t , ! output_enabled , MAX ( bsize , BLOCK_8X8 ) ) ; <S2SV_ModEnd> <S2SV_ModStart> int ref ; const int is_compound = has_second_ref ( mbmi ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> assert ( cfg != NULL ) ; <S2SV_ModStart> if ( ! ( cpi -> sf . reuse_inter_pred_sby && ctx -> pred_pixel_ready ) || seg_skip ) vp9_build_inter_predictors_sby <S2SV_ModEnd> <S2SV_ModStart> vp9_build_inter_predictors_sbuv ( xd , mi_row , mi_col , MAX ( bsize , BLOCK_8X8 ) ) <S2SV_ModEnd> <S2SV_ModStart> , td <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> seg_skip <S2SV_ModEnd> <S2SV_ModStart> get_tx_size_context <S2SV_ModEnd> <S2SV_ModStart> td -> counts -> <S2SV_ModEnd> <S2SV_ModStart> ++ td -> counts -> tx . tx_totals [ mbmi -> tx_size ] ; ++ td -> counts -> tx . tx_totals [ get_uv_tx_size ( mbmi , & xd -> plane [ 1 ] ) ] ; "
1581,<S2SV_StartBug> if ( iad_num == USB_MAXIADS ) { <S2SV_EndBug> <S2SV_StartBug> ( struct usb_interface_assoc_descriptor <S2SV_EndBug> ,"<S2SV_ModStart> struct usb_interface_assoc_descriptor * d ; d = ( struct usb_interface_assoc_descriptor * ) header ; if ( d -> bLength < USB_DT_INTERFACE_ASSOCIATION_SIZE ) { dev_warn ( ddev , ""config<S2SV_blank>%d<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>interface<S2SV_blank>association<S2SV_blank>descriptor<S2SV_blank>of<S2SV_blank>length<S2SV_blank>%d,<S2SV_blank>skipping\\n"" , cfgno , d -> bLength ) ; continue ; } <S2SV_ModStart> d <S2SV_ModEnd> "
1582,"<S2SV_StartBug> int rc ; <S2SV_EndBug> <S2SV_StartBug> struct crypto_skcipher * tfm_des ; <S2SV_EndBug> <S2SV_StartBug> tfm_des = crypto_alloc_skcipher ( ""ecb(des)"" , 0 , CRYPTO_ALG_ASYNC ) ; <S2SV_EndBug> <S2SV_StartBug> rc = PTR_ERR ( tfm_des ) ; <S2SV_EndBug> <S2SV_StartBug> goto smbhash_err ; <S2SV_EndBug> <S2SV_StartBug> sg_init_one ( & sgin , in , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> smbhash_err : <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> crypto_cipher * tfm_des <S2SV_ModEnd> <S2SV_ModStart> crypto_alloc_cipher ( ""des"" <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return PTR_ERR ( tfm_des ) ; } crypto_cipher_setkey <S2SV_ModEnd> <S2SV_ModStart> crypto_cipher_encrypt_one ( tfm_des , out , in ) ; crypto_free_cipher <S2SV_ModEnd> <S2SV_ModStart> return 0 <S2SV_ModEnd> "
1583,<S2SV_StartBug> { if ( psf -> headindex < SIGNED_SIZEOF ( psf -> header ) - 4 ) <S2SV_EndBug> <S2SV_StartBug> { psf -> header [ psf -> headindex ++ ] = ( x >> 24 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 16 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = x ; <S2SV_EndBug> <S2SV_StartBug> } ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> . ptr [ <S2SV_ModEnd> <S2SV_ModStart> . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1584,"<S2SV_StartBug> uint32_t value ; <S2SV_EndBug> <S2SV_StartBug> int position , zeroes , i , j ; <S2SV_EndBug> <S2SV_StartBug> zeroes = i = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( get_bits_left ( gbc ) < zeroes + 1 ) { <S2SV_EndBug> <S2SV_StartBug> if ( get_bits1 ( gbc ) ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> bits [ i ++ ] = ( value >> ( zeroes - j - 1 ) & 1 ) ? '1' : '0' ; <S2SV_EndBug> <S2SV_StartBug> value += ( 1 << zeroes ) - 1 ; <S2SV_EndBug> ","<S2SV_ModStart> zeroes , bits_value , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> break ; ++ zeroes ; } if ( zeroes >= 32 ) { value = MAX_UINT_BITS ( 32 ) ; } else { if ( get_bits_left ( gbc ) < zeroes ) { av_log ( ctx -> log_ctx , AV_LOG_ERROR , ""Invalid<S2SV_blank>uvlc<S2SV_blank>code<S2SV_blank>at<S2SV_blank>"" ""%s:<S2SV_blank>bitstream<S2SV_blank>ended.\\n"" , name ) ; return AVERROR_INVALIDDATA ; } bits_value = get_bits_long ( gbc , zeroes ) ; value = bits_value + ( UINT32_C ( 1 ) << zeroes ) - 1 ; } if ( ctx -> trace_enable ) { char bits [ 65 ] ; int i , j , k ; if ( zeroes >= 32 ) { while ( zeroes > 32 ) { k = FFMIN ( zeroes - 32 , 32 ) ; for ( i = 0 ; i < k ; i ++ ) bits [ i ] = '0' ; bits [ i ] = 0 ; ff_cbs_trace_syntax_element ( ctx , position , name , NULL , bits , 0 ) ; zeroes -= k ; position += k ; } } for ( i = 0 ; i < zeroes ; i ++ ) bits [ i ] = '0' ; <S2SV_ModEnd> <S2SV_ModStart> if ( zeroes < 32 ) { <S2SV_ModEnd> <S2SV_ModStart> bits_value <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModEnd> "
1585,<S2SV_StartBug> else if ( i > pos && i + insn -> off + 1 < pos ) <S2SV_EndBug> ,<S2SV_ModStart> + delta <S2SV_ModStart> <= pos + delta <S2SV_ModEnd> 
1586,<S2SV_StartBug> case EXIT_REASON_INVEPT : <S2SV_EndBug> ,<S2SV_ModStart> case EXIT_REASON_INVVPID : 
1587,"<S2SV_StartBug> else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" , c ) || c >= 128 ) <S2SV_EndBug> <S2SV_StartBug> else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" , c ) || c >= 128 ) <S2SV_EndBug> <S2SV_StartBug> else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" , c ) || c >= 128 ) <S2SV_EndBug> <S2SV_StartBug> else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" , c ) || c >= 128 ) <S2SV_EndBug> <S2SV_StartBug> else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"" , c ) || c >= 128 ) <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> osStrchr <S2SV_ModEnd> 
1588,"<S2SV_StartBug> packet -> http_contentlen . ptr = NULL , packet -> http_contentlen . len = 0 , packet -> http_cookie . ptr = NULL , <S2SV_EndBug> ","<S2SV_ModStart> content_disposition_line . ptr = NULL , packet -> content_disposition_line . len = 0 , packet -> "
1589,<S2SV_StartBug> nd -> last_type = LAST_BIND ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1590,"<S2SV_StartBug> assert ( pow ( ( float ) r + 1 , dim ) > entries ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( ( int ) floor ( pow ( ( float ) r , dim ) ) <= entries ) ; <S2SV_EndBug> ",<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> <= entries ) return - 1 ; if <S2SV_ModEnd> <S2SV_ModStart> > entries ) return - 1 <S2SV_ModEnd> 
1591,"<S2SV_StartBug> q = QueueAuthenticPixels ( image , x , y , Min ( 4 , dds_info -> width - x ) , <S2SV_EndBug> <S2SV_StartBug> Min ( 4 , dds_info -> height - y ) , exception ) ; <S2SV_EndBug> <S2SV_StartBug> SkipDXTMipmaps ( image , dds_info , 8 ) ; <S2SV_EndBug> ","<S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> return ( <S2SV_ModStart> , exception ) ) <S2SV_ModEnd> "
1592,<S2SV_StartBug> if ( iph -> ihl == 5 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> memset ( IPCB ( skb ) , 0 , sizeof ( struct inet_skb_parm ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1593,<S2SV_StartBug> if ( Z_TYPE_PP ( test_ptr ) == IS_ARRAY ) { <S2SV_EndBug> ,<S2SV_ModStart> && Z_TYPE_PP ( ptr ) == IS_ARRAY 
1594,"<S2SV_StartBug> int ret = recv ( common -> ctrl_fd , buffer , length , MSG_NOSIGNAL ) ; <S2SV_EndBug> <S2SV_StartBug> ret = recv ( common -> ctrl_fd , buffer , length , MSG_NOSIGNAL ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
1595,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> char * outpos = outputbuffer ; <S2SV_ModStart> sendClean ( outputbuffer ) ; 
1596,"<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> struct stat st ; <S2SV_EndBug> <S2SV_StartBug> if ( lstat ( filename , & st ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> file = fopen ( filename , ""a"" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> fd = open ( filename , O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; if ( fd >= 0 && ( fstat ( fd <S2SV_ModEnd> <S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart> fdopen ( fd <S2SV_ModEnd> <S2SV_ModStart> cfg -> is_custom_debug_file = 1 ; file = NULL ; fd = - 1 ; <S2SV_ModEnd> <S2SV_ModStart> if ( fd != - 1 ) close ( fd ) ; if ( file != NULL ) fclose ( file ) ; "
1597,"<S2SV_StartBug> if ( test_opt ( sbi , FLUSH_MERGE ) && ! f2fs_readonly ( sbi -> sb ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1598,<S2SV_StartBug> if ( ( sun_info . type != RT_ENCODED ) && ( sun_info . depth >= 8 ) && <S2SV_EndBug> <S2SV_StartBug> ( ( number_pixels * ( ( sun_info . depth + 7 ) / 8 ) ) > sun_info . length ) ) <S2SV_EndBug> <S2SV_StartBug> length = image -> rows * ( bytes_per_line + image -> columns % 2 ) ; <S2SV_EndBug> ,<S2SV_ModStart> ( ( number_pixels * <S2SV_ModEnd> <S2SV_ModStart> ) > ( 8 * <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> bytes_per_line <S2SV_ModEnd> 
1599,<S2SV_StartBug> outpos += <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> sprintf ( outputbuffer <S2SV_ModEnd> <S2SV_ModStart> sendClean ( outputbuffer ) ; 
1600,"<S2SV_StartBug> WLog_VRB ( AUTODETECT_TAG , ""received<S2SV_blank>Bandwidth<S2SV_blank>Measure<S2SV_blank>Results<S2SV_blank>PDU"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( Stream_GetRemainingLength ( s ) < 8 ) return - 1 
1601,<S2SV_StartBug> _ipmi_destroy_user ( user ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1602,"<S2SV_StartBug> if ( ( cpi -> current_layer == 0 ) && <S2SV_EndBug> <S2SV_StartBug> else if ( ( xd -> mode_info_context -> mbmi . mode == ZEROMV ) && ( xd -> mode_info_context -> mbmi . ref_frame == LAST_FRAME ) ) <S2SV_EndBug> <S2SV_StartBug> pack_tokens ( w , tp_start , tok_count ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { if <S2SV_ModEnd> <S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart> { if ( cpi -> consec_zero_last [ map_index + mb_col ] < 255 ) cpi -> consec_zero_last [ map_index + mb_col ] += 1 ; if ( cpi -> consec_zero_last_mvbias [ map_index + mb_col ] < 255 ) cpi -> consec_zero_last_mvbias [ map_index + mb_col ] += 1 ; } else { cpi -> consec_zero_last [ map_index + mb_col ] = 0 ; cpi -> consec_zero_last_mvbias [ map_index + mb_col ] = 0 ; } if ( x -> zero_last_dot_suppress ) cpi -> consec_zero_last_mvbias [ map_index + mb_col ] = 0 ; } if ( ( cpi -> current_layer == 0 ) && ( cpi -> cyclic_refresh_mode_enabled && xd -> segmentation_enabled ) ) { cpi -> segmentation_map [ map_index + mb_col ] = xd -> mode_info_context -> mbmi . segment_id ; if ( xd -> mode_info_context -> mbmi . segment_id ) cpi -> cyclic_refresh_map [ map_index + mb_col ] = - 1 ; else if ( ( xd -> mode_info_context -> mbmi . mode == ZEROMV ) && ( xd -> mode_info_context -> mbmi . ref_frame == LAST_FRAME ) <S2SV_ModStart> vp8_pack_tokens <S2SV_ModEnd> 
1603,<S2SV_StartBug> if ( type == ARPHRD_ETHER ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; } 
1604,"<S2SV_StartBug> in_uint16_le ( s , type ) ; <S2SV_EndBug> <S2SV_StartBug> if ( status == CLIPRDR_ERROR ) <S2SV_EndBug> ","<S2SV_ModStart> struct stream packet = * s ; <S2SV_ModStart> ! s_check_rem ( s , length ) ) { rdp_protocol_error ( ""cliprdr_process(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>packet<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } if ( "
1605,<S2SV_StartBug> if ( pbi -> b_multithreaded_rd ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1606,<S2SV_StartBug> if ( rows > 1 ) { <S2SV_EndBug> ,<S2SV_ModStart> l == NULL ) break ; if ( 
1607,<S2SV_StartBug> if ( xWantedSize > 0 ) <S2SV_EndBug> <S2SV_StartBug> xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> && ( ( xWantedSize + xHeapStructSize ) > xWantedSize ) ) <S2SV_ModStart> if ( ( xWantedSize + <S2SV_ModEnd> <S2SV_ModStart> ) > xWantedSize ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize = 0 ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { xWantedSize = 0 <S2SV_ModEnd> 
1608,"<S2SV_StartBug> void vp9_iht8x8_add ( TX_TYPE tx_type , const int16_t * input , uint8_t * dest , <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> 
1609,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1610,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( bps * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""fpDiff"" , ""%s"" , ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModStart> return 1 ; "
1611,"<S2SV_StartBug> uint16 num_updates ; <S2SV_EndBug> <S2SV_StartBug> logger ( Protocol , Debug , ""%s()"" , __func__ ) ; <S2SV_EndBug> <S2SV_StartBug> in_uint16_le ( s , left ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> uint16 num_updates <S2SV_ModEnd> <S2SV_ModStart> process_bitmap_data ( s <S2SV_ModEnd> 
1612,<S2SV_StartBug> if ( error ) <S2SV_EndBug> <S2SV_StartBug> if ( context -> seen_enough ) <S2SV_EndBug> ,<S2SV_ModStart> { kmem_free ( sbuf ) ; <S2SV_ModStart> } 
1613,"<S2SV_StartBug> ND_TCHECK2 ( * tptr , sizeof ( struct olsr_msg4 ) ) ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> u_int name_entries = EXTRACT_16BITS ( msg_data + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> u_int addr_size = 4 ; <S2SV_EndBug> <S2SV_StartBug> int name_entries_valid = 0 ; <S2SV_EndBug> <S2SV_StartBug> name_entries_valid = 1 ; <S2SV_EndBug> ","<S2SV_ModStart> if ( is_ipv6 ) { <S2SV_ModStart> olsr_msg6 ) ) ; <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK2 ( * tptr , sizeof ( struct olsr_msg4 ) ) ; <S2SV_ModStart> ; u_int addr_size ; int name_entries_valid ; u_int i ; if ( msg_tlen < 4 ) goto trunc ; ND_TCHECK2 ( * msg_data , 4 ) ; name_entries <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( is_ipv6 ) addr_size = 16 ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1614,"<S2SV_StartBug> uint16 bitspersample , samplesperpixel ; <S2SV_EndBug> <S2SV_StartBug> uint16 input_compression , input_photometric ; <S2SV_EndBug> ",<S2SV_ModStart> = 1 <S2SV_ModStart> = PHOTOMETRIC_MINISBLACK 
1615,"<S2SV_StartBug> option = stok ( option , ""<S2SV_blank>=\\t,"" , & ovalue ) ; <S2SV_EndBug> ",<S2SV_ModStart> ssplit <S2SV_ModEnd> 
1616,<S2SV_StartBug> vp9_coeff_stats * coef_branch_ct ) { <S2SV_EndBug> <S2SV_StartBug> vp9_coeff_probs_model * coef_probs = cpi -> frame_coef_probs [ tx_size ] ; <S2SV_EndBug> ,"<S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> ) { vp9_coeff_count * coef_counts <S2SV_ModStart> td . rd_counts . <S2SV_ModEnd> "
1617,<S2SV_StartBug> assert ( name ) ; <S2SV_EndBug> ,"<S2SV_ModStart> name ) ; r = vt_verify_kbmode ( fd ) ; if ( r == - EBUSY ) { log_warning_errno ( r , ""Virtual<S2SV_blank>console<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>in<S2SV_blank>K_XLATE<S2SV_blank>or<S2SV_blank>K_UNICODE:<S2SV_blank>%m"" , name ) ; return 0 ; } else if ( r < 0 ) return log_warning_errno ( r , ""Failed<S2SV_blank>to<S2SV_blank>verify<S2SV_blank>kbdmode<S2SV_blank>on<S2SV_blank>%s:<S2SV_blank>%m"" , "
1618,"<S2SV_StartBug> static int su3000_frontend_attach ( struct dvb_usb_adapter * d ) <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x02 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> msleep ( 300 ) ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x83 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> err ( ""command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed."" ) ; <S2SV_EndBug> <S2SV_StartBug> d -> fe_adap [ 0 ] . fe = dvb_attach ( ds3000_attach , & su3000_ds3000_config , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap ) ; <S2SV_EndBug> <S2SV_StartBug> if ( d -> fe_adap [ 0 ] . fe == NULL ) <S2SV_EndBug> <S2SV_StartBug> if ( dvb_attach ( ts2020_attach , d -> fe_adap [ 0 ] . fe , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap ) ) { <S2SV_EndBug> ","<S2SV_ModStart> adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0 ; if ( dvb_usb_generic_rw ( d , state -> data , 3 , state -> data , 1 , 0 ) < 0 ) err ( ""command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> <S2SV_ModStart> , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> msleep ( 300 ) ; state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data [ 0 ] = 0x51 <S2SV_ModEnd> <S2SV_ModStart> , state -> data , 1 , state -> data <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> adap <S2SV_ModEnd> <S2SV_ModStart> adap <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1619,<S2SV_StartBug> sock_release ( SOCKET_I ( inode ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> __sock_release <S2SV_ModEnd> <S2SV_ModStart> , inode "
1620,"<S2SV_StartBug> vpx_codec_enc_cfg_t * cfg , <S2SV_EndBug> <S2SV_StartBug> else if ( ( flags & VPX_CODEC_USE_XMA ) && ! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> priv ) <S2SV_EndBug> ",<S2SV_ModStart> const <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1621,"<S2SV_StartBug> int uv_block_size , <S2SV_EndBug> <S2SV_StartBug> vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi . interp_filter ) ; <S2SV_EndBug> <S2SV_StartBug> if ( uv_block_size == 8 ) { <S2SV_EndBug> <S2SV_StartBug> vp9_build_inter_predictor ( y_mb_ptr , stride , <S2SV_EndBug> <S2SV_StartBug> & pred [ 256 ] , uv_block_size , <S2SV_EndBug> <S2SV_StartBug> & pred [ 512 ] , uv_block_size , <S2SV_EndBug> ","<S2SV_ModStart> uv_block_width , int uv_block_height <S2SV_ModEnd> <S2SV_ModStart> vp9_filter_kernels [ <S2SV_ModEnd> <S2SV_ModStart> ] <S2SV_ModEnd> <S2SV_ModStart> uv_block_width <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_highbd_build_inter_predictor ( y_mb_ptr , stride , & pred [ 0 ] , 16 , & mv , scale , 16 , 16 , which_mv , kernel , MV_PRECISION_Q3 , x , y , xd -> bd ) ; vp9_highbd_build_inter_predictor ( u_mb_ptr , uv_stride , & pred [ 256 ] , uv_block_width , & mv , scale , uv_block_width , uv_block_height , which_mv , kernel , mv_precision_uv , x , y , xd -> bd ) ; vp9_highbd_build_inter_predictor ( v_mb_ptr , uv_stride , & pred [ 512 ] , uv_block_width , & mv , scale , uv_block_width , uv_block_height , which_mv , kernel , mv_precision_uv , x , y , xd -> bd ) ; return ; } # endif <S2SV_ModStart> uv_block_width , & mv , scale , uv_block_width , uv_block_height <S2SV_ModEnd> <S2SV_ModStart> uv_block_width , & mv , scale , uv_block_width , uv_block_height <S2SV_ModEnd> "
1622,"<S2SV_StartBug> mungspaces ( strcpy ( buf , origbuf ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> while ( * origbuf == '<S2SV_blank>' || * origbuf == '\\t' ) ++ origbuf ; ( void ) strncpy ( buf , origbuf , sizeof buf - 1 ) ; buf [ sizeof buf - 1 ] = '\\0' ; mungspaces ( buf <S2SV_ModEnd> "
1623,"<S2SV_StartBug> cJSON * cJSON_CreateFloatArray ( double * numbers , int count ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; a && i < count ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> n = cJSON_CreateFloat ( numbers [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! i ) <S2SV_EndBug> ",<S2SV_ModStart> const float <S2SV_ModEnd> <S2SV_ModStart> i ++ <S2SV_ModEnd> <S2SV_ModStart> cJSON_CreateNumber <S2SV_ModEnd> <S2SV_ModStart> if ( ! n ) { cJSON_Delete ( a ) ; return 0 ; } 
1624,<S2SV_StartBug> goto retry_rebind ; <S2SV_EndBug> ,<S2SV_ModStart> switch ( task -> tk_status ) { case - EACCES : case - EIO : goto die ; default : <S2SV_ModStart> } 
1625,"<S2SV_StartBug> unsigned int link_count ; <S2SV_EndBug> <S2SV_StartBug> struct buffer_head * nbh = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ie -> indirectICB . extLength && <S2SV_EndBug> <S2SV_StartBug> ( nbh = udf_read_ptagged ( inode -> i_sb , & loc , 0 , <S2SV_EndBug> <S2SV_StartBug> brelse ( nbh ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned int indirections = 0 ; reread : <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) { brelse ( bh ) ; brelse ( ibh ) ; memcpy ( & iinfo -> i_location <S2SV_ModEnd> <S2SV_ModStart> sizeof ( struct kernel_lb_addr ) ) ; if ( ++ indirections > UDF_MAX_ICB_NESTING ) { udf_err ( inode -> i_sb , ""too<S2SV_blank>many<S2SV_blank>ICBs<S2SV_blank>in<S2SV_blank>ICB<S2SV_blank>hierarchy"" ""<S2SV_blank>(max<S2SV_blank>%d<S2SV_blank>supported)\\n"" , UDF_MAX_ICB_NESTING ) ; make_bad_inode <S2SV_ModEnd> <S2SV_ModStart> goto reread <S2SV_ModEnd> "
1626,"<S2SV_StartBug> float * w = get_window ( f , n ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( w == NULL ) return 0 
1627,"<S2SV_StartBug> uint32 num_properties = GETINT32 ( buf + idx ) ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < ( a -> names [ i ] . len >> 1 ) ; j ++ ) <S2SV_EndBug> <S2SV_StartBug> if ( a -> type == szMAPI_UNICODE_STRING ) <S2SV_EndBug> <S2SV_StartBug> v -> data . buf = ( unsigned char * ) unicode_to_utf8 ( v -> len , buf + idx ) ; <S2SV_EndBug> ",<S2SV_ModStart> ) ; assert ( ( num_properties + 1 ) != 0 <S2SV_ModStart> assert ( ( idx + ( a -> names [ i ] . len * 2 ) ) <= len ) ; <S2SV_ModStart> assert ( v -> len + idx <= len ) ; <S2SV_ModStart> assert ( v -> len != 0 ) ; 
1628,"<S2SV_StartBug> VP9_COMMON * const cm = & pbi -> common ; <S2SV_EndBug> <S2SV_StartBug> const int num_workers = MIN ( pbi -> oxcf . max_threads & ~ 1 , tile_cols ) ; <S2SV_EndBug> <S2SV_StartBug> TileBuffer tile_buffers [ 1 << 6 ] ; <S2SV_EndBug> <S2SV_StartBug> const int num_threads = pbi -> oxcf . max_threads & ~ 1 ; <S2SV_EndBug> <S2SV_StartBug> vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> VP9Worker * const worker = & pbi -> tile_workers [ i ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_worker_init ( worker ) ; <S2SV_EndBug> <S2SV_StartBug> if ( i < num_threads - 1 && ! vp9_worker_reset ( worker ) ) { <S2SV_EndBug> <S2SV_StartBug> pbi -> tile_workers [ n ] . hook = ( VP9WorkerHook ) tile_worker_hook ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cm -> above_seg_context , 0 , <S2SV_EndBug> <S2SV_StartBug> for ( n = 0 ; n < tile_cols ; ++ n ) { <S2SV_EndBug> <S2SV_StartBug> get_tile ( data_end , n == tile_cols - 1 , & cm -> error , & data ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_worker_launch ( worker ) ; <S2SV_EndBug> <S2SV_StartBug> VP9Worker * const worker = & pbi -> tile_workers [ i - 1 ] ; <S2SV_EndBug> <S2SV_StartBug> pbi -> mb . corrupted |= ! vp9_worker_sync ( worker ) ; <S2SV_EndBug> <S2SV_StartBug> bit_reader_end = vp9_reader_find_end ( & tile_data -> bit_reader ) ; <S2SV_EndBug> <S2SV_StartBug> final_worker = - 1 ; <S2SV_EndBug> ","<S2SV_ModStart> ; const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ] [ 1 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) ) ) ; assert ( ( sizeof ( * pbi -> tile_worker_data ) % 16 ) == 0 ) ; CHECK_MEM_ERROR ( cm , pbi -> tile_worker_data , vpx_memalign ( 32 , num_threads * sizeof ( * pbi -> tile_worker_data ) ) ) ; CHECK_MEM_ERROR ( cm , pbi -> tile_worker_info , vpx_malloc ( num_threads * sizeof ( * pbi -> tile_worker_info <S2SV_ModStart> VPxWorker <S2SV_ModEnd> <S2SV_ModStart> winterface -> init ( worker <S2SV_ModEnd> <S2SV_ModStart> winterface -> reset <S2SV_ModEnd> <S2SV_ModStart> VPxWorker * const worker = & <S2SV_ModStart> ; winterface -> sync ( worker ) ; worker -> <S2SV_ModEnd> <S2SV_ModStart> VPxWorkerHook <S2SV_ModEnd> <S2SV_ModStart> worker -> data1 = & pbi -> tile_worker_data [ n ] ; worker -> data2 = & pbi -> tile_worker_info [ n ] ; } memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> get_tile_buffers ( pbi , data , data_end , tile_cols , tile_rows , tile_buffers ) ; qsort ( tile_buffers [ 0 ] , tile_cols , sizeof ( tile_buffers [ 0 ] [ 0 ] ) , compare_tile_buffers ) ; { int group_start = 0 ; while ( group_start < tile_cols ) { const TileBuffer largest = tile_buffers [ 0 ] [ group_start ] ; const int group_end = MIN ( group_start + num_workers , tile_cols ) - 1 ; memmove ( tile_buffers [ 0 ] + group_start , tile_buffers [ 0 ] + group_start + 1 , ( group_end - group_start ) * sizeof ( tile_buffers [ 0 ] [ 0 ] ) ) ; tile_buffers [ 0 ] [ group_end ] = largest ; group_start = group_end + 1 ; } } if ( ! cm -> frame_parallel_decoding_mode ) { int i ; for ( i = 0 ; i < num_workers ; ++ i ) { TileWorkerData * const tile_data = ( TileWorkerData * ) pbi -> tile_workers [ i ] . data1 ; vp9_zero ( tile_data -> counts ) ; } } n = 0 ; while ( n < tile_cols ) { int i ; for ( i = 0 ; i < num_workers && n < tile_cols ; ++ i ) { VPxWorker * const worker = & pbi -> tile_workers [ i ] ; TileWorkerData * const tile_data = ( TileWorkerData * ) worker -> data1 ; TileInfo * const tile = ( TileInfo * ) worker -> data2 ; TileBuffer * const buf = & tile_buffers [ 0 ] [ n ] ; tile_data -> pbi = pbi ; tile_data -> xd = pbi -> mb ; tile_data -> xd . corrupted = 0 ; tile_data -> xd . counts = cm -> frame_parallel_decoding_mode ? 0 : & tile_data -> counts ; vp9_zero ( tile_data -> dqcoeff ) ; vp9_tile_init ( tile , cm , 0 , buf -> col ) ; vp9_tile_init ( & tile_data -> xd . tile , cm , 0 , buf -> col ) ; setup_token_decoder ( buf -> data , data_end , buf -> size , & cm -> error , & tile_data -> bit_reader , pbi -> decrypt_cb , pbi -> decrypt_state ) ; vp9_init_macroblockd ( cm , & tile_data -> xd , tile_data -> dqcoeff ) ; worker -> had_error = 0 ; if ( i == num_workers - 1 || <S2SV_ModEnd> <S2SV_ModStart> ) { winterface -> execute <S2SV_ModEnd> <S2SV_ModStart> winterface -> launch <S2SV_ModEnd> <S2SV_ModStart> VPxWorker <S2SV_ModEnd> <S2SV_ModStart> winterface -> sync <S2SV_ModEnd> <S2SV_ModStart> vpx_reader_find_end <S2SV_ModEnd> <S2SV_ModStart> } if ( n >= tile_cols && ! cm -> frame_parallel_decoding_mode ) { for ( i = 0 ; i < num_workers ; ++ i ) { TileWorkerData * const tile_data = ( TileWorkerData * ) pbi -> tile_workers [ i ] . data1 ; vp9_accumulate_frame_counts ( cm , & tile_data -> counts , 1 ) ; } "
1629,<S2SV_StartBug> offset = base + get4 ( ) + 8 ; <S2SV_EndBug> <S2SV_StartBug> switch ( tag ) <S2SV_EndBug> ,<S2SV_ModStart> # ifdef LIBRAW_LIBRARY_BUILD if ( offset > ifp -> size ( ) - 8 ) offset = ifp -> size ( ) - 8 ; # endif <S2SV_ModStart> if ( len < 0 ) return ; 
1630,<S2SV_StartBug> err = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> if ( match -> type == type && <S2SV_EndBug> <S2SV_StartBug> out : <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> spin_lock ( & po -> bind_lock ) ; if ( po -> running && <S2SV_ModEnd> <S2SV_ModStart> spin_unlock ( & po -> bind_lock ) ; if ( err && ! refcount_read ( & match -> sk_ref ) ) { list_del ( & match -> list ) ; kfree ( match ) ; } 
1631,"<S2SV_StartBug> struct segmentation * seg = & cm -> seg ; <S2SV_EndBug> <S2SV_StartBug> vp9_clear_system_state ( ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> int qindex_delta , segment_rdmult ; <S2SV_EndBug> <S2SV_StartBug> if ( Q_RATIO ( i ) == 1 ) { <S2SV_EndBug> <S2SV_StartBug> qindex_delta = vp9_compute_qdelta ( & cpi -> rc , base_q , base_q * Q_RATIO ( i ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_set_segdata ( seg , SEGMENT_ID ( i ) , SEG_LVL_ALT_Q , qindex_delta ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_enable_segfeature ( seg , SEGMENT_ID ( i ) , SEG_LVL_ALT_Q ) ; <S2SV_EndBug> <S2SV_StartBug> segment_rdmult = vp9_compute_rd_mult ( cpi , cm -> base_qindex + qindex_delta + <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vpx_clear_system_state <S2SV_ModEnd> <S2SV_ModStart> 0 ; i < MAX_SEGMENTS ; ++ i <S2SV_ModEnd> <S2SV_ModStart> = vp9_compute_qdelta_by_rate ( & cpi -> rc , cm -> frame_type , cm -> base_qindex , rate_ratio [ i ] , cm -> bit_depth ) <S2SV_ModEnd> <S2SV_ModStart> ( cm -> base_qindex != 0 ) && ( ( cm -> base_qindex + qindex_delta ) == 0 ) ) { qindex_delta = - cm -> base_qindex + 1 ; } if ( rate_ratio [ i ] == 1.0 ) { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> i <S2SV_ModEnd> <S2SV_ModStart> i <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1632,"<S2SV_StartBug> if ( ! net_eq ( net , & init_net ) ) <S2SV_EndBug> ",<S2SV_ModStart> protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if ( 
1633,"<S2SV_StartBug> ( void ) TIFFGetField ( in , TIFFTAG_PLANARCONFIG , & shortv ) ; <S2SV_EndBug> ",<S2SV_ModStart> TIFFGetFieldDefaulted <S2SV_ModEnd> 
1634,<S2SV_StartBug> ctx -> base . err_detail = error -> has_detail ? error -> detail : NULL ; <S2SV_EndBug> ,"<S2SV_ModStart> set_error_detail ( ctx , <S2SV_ModEnd> <S2SV_ModStart> ) "
1635,"<S2SV_StartBug> for ( i = j = 0 ; i < sizeof ( buf ) - 1 && str [ i ] ; i ++ , j ++ ) { <S2SV_EndBug> ",<S2SV_ModStart> j <S2SV_ModEnd> 
1636,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1637,"<S2SV_StartBug> b = BCON_NEW ( ""my_dbref"" , <S2SV_EndBug> ","<S2SV_ModStart> VALIDATE_TEST ( ""test59.bson"" , BSON_VALIDATE_NONE , 9 , BSON_VALIDATE_NONE , ""corrupt<S2SV_blank>BSON"" ) ; "
1638,<S2SV_StartBug> x86_pmu . extra_regs = intel_snb_extra_regs ; <S2SV_EndBug> <S2SV_StartBug> x86_pmu . pebs_aliases = intel_pebs_aliases_snb ; <S2SV_EndBug> ,<S2SV_ModStart> if ( boot_cpu_data . x86_model == 45 ) x86_pmu . extra_regs = intel_snbep_extra_regs ; else <S2SV_ModStart> if ( boot_cpu_data . x86_model == 62 ) x86_pmu . extra_regs = intel_snbep_extra_regs ; else 
1639,"<S2SV_StartBug> pocstruct_t * ps_prev_poc , * ps_cur_poc ; <S2SV_EndBug> ","<S2SV_ModStart> ; WORD32 size ; size = sizeof ( pred_info_t ) * 2 * 32 ; memset ( ps_dec -> ps_pred , 0 , size ) ; size = sizeof ( disp_mgr_t ) ; memset ( ps_dec -> pv_disp_buf_mgr , 0 , size ) ; size = sizeof ( buf_mgr_t ) + ithread_get_mutex_lock_size ( ) ; memset ( ps_dec -> pv_pic_buf_mgr , 0 , size ) ; size = sizeof ( dec_err_status_t ) ; memset ( ps_dec -> ps_dec_err_status , 0 , size ) ; size = sizeof ( sei ) ; memset ( ps_dec -> ps_sei , 0 , size ) ; size = sizeof ( dpb_commands_t ) ; memset ( ps_dec -> ps_dpb_cmds , 0 , size ) ; size = sizeof ( dec_bit_stream_t ) ; memset ( ps_dec -> ps_bitstrm , 0 , size ) ; size = sizeof ( dec_slice_params_t ) ; memset ( ps_dec -> ps_cur_slice , 0 , size ) ; size = MAX ( sizeof ( dec_seq_params_t ) , sizeof ( dec_pic_params_t ) ) ; memset ( ps_dec -> pv_scratch_sps_pps , 0 , size ) ; size = sizeof ( ctxt_inc_mb_info_t ) ; memset ( ps_dec -> ps_left_mb_ctxt_info , 0 , size ) ; size = ( sizeof ( neighbouradd_t ) << 2 ) ; memset ( ps_dec -> ps_left_mvpred_addr , 0 , size ) ; size = sizeof ( buf_mgr_t ) + ithread_get_mutex_lock_size ( ) ; memset ( ps_dec -> pv_mv_buf_mgr , 0 , size ) "
1640,<S2SV_StartBug> if ( is_vm_hugetlb_page ( cur ) && end <= cur -> vm_end && <S2SV_EndBug> <S2SV_StartBug> vma -> vm_userfaultfd_ctx . ctx != ctx ) ; <S2SV_EndBug> ,<S2SV_ModStart> ret = - EPERM ; if ( unlikely ( ! ( cur -> vm_flags & VM_MAYWRITE ) ) ) goto out_unlock ; <S2SV_ModStart> ) ; WARN_ON ( ! ( vma -> vm_flags & VM_MAYWRITE ) 
1641,<S2SV_StartBug> krb5_key_data * key_data ; <S2SV_EndBug> <S2SV_StartBug> if ( key_data_in == NULL ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i <= num_versions ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> if ( ret [ i ] != NULL ) <S2SV_EndBug> ,<S2SV_ModStart> = NULL ; if ( n_key_data < <S2SV_ModEnd> <S2SV_ModStart> key_data <S2SV_ModEnd> <S2SV_ModStart> ret [ i ] != NULL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1642,"<S2SV_StartBug> ssize_t ret = read ( fd , btpan_cb . congest_packet , sizeof ( btpan_cb . congest_packet ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( poll ( & ufd , 1 , 0 ) <= 0 || IS_EXCEPTION ( ufd . revents ) ) <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
1643,"<S2SV_StartBug> if ( ! dumpable && ! ptrace_has_cap ( __task_cred ( task ) -> user_ns , mode ) ) { <S2SV_EndBug> ",<S2SV_ModStart> dumpable != SUID_DUMP_USER && <S2SV_ModEnd> 
1644,"<S2SV_StartBug> static int su3000_frontend_attach ( struct dvb_usb_adapter * d ) <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x02 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> msleep ( 300 ) ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x83 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> err ( ""command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed."" ) ; <S2SV_EndBug> <S2SV_StartBug> d -> fe_adap [ 0 ] . fe = dvb_attach ( ds3000_attach , & su3000_ds3000_config , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap ) ; <S2SV_EndBug> <S2SV_StartBug> if ( d -> fe_adap [ 0 ] . fe == NULL ) <S2SV_EndBug> <S2SV_StartBug> if ( dvb_attach ( ts2020_attach , d -> fe_adap [ 0 ] . fe , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap ) ) { <S2SV_EndBug> ","<S2SV_ModStart> adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0 ; if ( dvb_usb_generic_rw ( d , state -> data , 3 , state -> data , 1 , 0 ) < 0 ) err ( ""command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x02 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> <S2SV_ModStart> , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> msleep ( 300 ) ; state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data [ 1 ] = 0x83 ; state -> data <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data [ 0 ] = 0x51 <S2SV_ModEnd> <S2SV_ModStart> , state -> data , 1 , state -> data <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> adap <S2SV_ModEnd> <S2SV_ModStart> adap <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1645,"<S2SV_StartBug> static int getnum ( const char * * fmt , int df ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> ","<S2SV_ModStart> lua_State * L , <S2SV_ModStart> if ( a > ( INT_MAX / 10 ) || a * 10 > ( INT_MAX - ( * * fmt - '0' ) ) ) luaL_error ( L , ""integral<S2SV_blank>size<S2SV_blank>overflow"" ) ; "
1646,"<S2SV_StartBug> markold ( g , g -> survival , g -> reallyold ) ; <S2SV_EndBug> ",<S2SV_ModStart> allgc <S2SV_ModEnd> 
1647,<S2SV_StartBug> return - EIO ; <S2SV_EndBug> ,<S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> if ( ! ret ) 
1648,"<S2SV_StartBug> ( void ) opt ; <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( safe_memcmp ( buffer , ssl_request , sizeof ssl_request ) ) { <S2SV_EndBug> <S2SV_StartBug> s_log ( LOG_ERR , ""PostgreSQL<S2SV_blank>client<S2SV_blank>did<S2SV_blank>not<S2SV_blank>request<S2SV_blank>TLS,<S2SV_blank>rejecting"" ) ; <S2SV_EndBug> <S2SV_StartBug> s_write ( c , c -> local_wfd . fd , ssl_ok , sizeof ssl_ok ) ; <S2SV_EndBug> ","<S2SV_ModStart> static const uint8_t gss_request [ 8 ] = { 0 , 0 , 0 , 8 , 0x04 , 0xd2 , 0x16 , 0x30 } ; static const uint8_t gss_response [ 62 ] = { 'E' , 0 , 0 , 0 , 61 , 'S' , 'E' , 'R' , 'R' , 'O' , 'R' , 0 , 'C' , 'X' , 'X' , '0' , '0' , '0' , 0 , 'M' , 'S' , 'S' , 'L' , '<S2SV_blank>' , 'e' , 'x' , 'p' , 'e' , 'c' , 't' , 'e' , 'd' , '<S2SV_blank>' , 'b' , 'u' , 't' , '<S2SV_blank>' , 'n' , 'o' , 't' , '<S2SV_blank>' , 'r' , 'e' , 'q' , 'u' , 'e' , 's' , 't' , 'e' , 'd' , '<S2SV_blank>' , 'b' , 'y' , '<S2SV_blank>' , 'c' , 'l' , 'i' , 'e' , 'n' , 't' , 0 , 0 } ; <S2SV_ModStart> ; s_log ( LOG_DEBUG , ""Started<S2SV_blank>server-side<S2SV_blank>psql<S2SV_blank>protcol<S2SV_blank>negotiation"" ) <S2SV_ModStart> ! <S2SV_ModStart> gss_request , sizeof gss_request <S2SV_ModEnd> <S2SV_ModStart> LOG_INFO , ""GSSAPI<S2SV_blank>encryption<S2SV_blank>requested,<S2SV_blank>rejecting<S2SV_blank>gracefully"" ) ; <S2SV_ModEnd> <S2SV_ModStart> gss_response , sizeof gss_response ) ; throw_exception ( c , 2 ) ; } if ( safe_memcmp ( buffer , ssl_request , sizeof ssl_request ) ) { s_log ( LOG_ERR , ""PostgreSQL<S2SV_blank>client<S2SV_blank>did<S2SV_blank>not<S2SV_blank>request<S2SV_blank>TLS,<S2SV_blank>rejecting"" ) ; throw_exception ( c , 1 ) ; } s_log ( LOG_DEBUG , ""SSLRequest<S2SV_blank>received"" ) ; s_write ( c , c -> local_wfd . fd , "
1649,"<S2SV_StartBug> cib_tls_signon ( cib_t * cib , struct remote_connection_s * connection ) <S2SV_EndBug> <S2SV_StartBug> struct sockaddr_in addr ; <S2SV_EndBug> <S2SV_StartBug> char * server = private -> server ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> . dispatch = cib_remote_dispatch , <S2SV_EndBug> <S2SV_StartBug> . destroy = cib_remote_connection_destroy , <S2SV_EndBug> <S2SV_StartBug> sock = socket ( PF_INET , SOCK_STREAM , IPPROTO_TCP ) ; <S2SV_EndBug> <S2SV_StartBug> gnutls_global_init ( ) ; <S2SV_EndBug> <S2SV_StartBug> connection -> session = create_tls_session ( sock , GNUTLS_CLIENT ) ; <S2SV_EndBug> <S2SV_StartBug> close ( sock ) ; <S2SV_EndBug> <S2SV_StartBug> answer = crm_recv_remote_msg ( connection -> session , connection -> encrypted ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rc != 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , gboolean event_channel <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int disconnected = 0 <S2SV_ModEnd> <S2SV_ModStart> { 0 , } ; cib_fd_callbacks <S2SV_ModEnd> <S2SV_ModStart> event_channel ? cib_remote_callback_dispatch : cib_remote_command_dispatch ; cib_fd_callbacks <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> crm_remote_tcp_connect ( private -> server , private -> port ) ; if ( sock <= 0 ) { crm_perror ( LOG_ERR , ""remote<S2SV_blank>tcp<S2SV_blank>connection<S2SV_blank>to<S2SV_blank>%s:%d<S2SV_blank>failed"" , private -> server , private -> port ) ; } connection -> socket = sock ; <S2SV_ModEnd> <S2SV_ModStart> if ( remote_gnutls_credentials_init == FALSE ) { <S2SV_ModStart> remote_gnutls_credentials_init = TRUE ; } connection -> session = crm_create_anon_tls_session <S2SV_ModEnd> <S2SV_ModStart> , anon_cred_c ) ; if ( crm_initiate_client_tls_handshake ( connection -> session , DEFAULT_CLIENT_HANDSHAKE_TIMEOUT ) != 0 ) { crm_err ( ""Session<S2SV_blank>creation<S2SV_blank>for<S2SV_blank>%s:%d<S2SV_blank>failed"" , private -> <S2SV_ModEnd> <S2SV_ModStart> gnutls_deinit ( * connection -> session ) ; gnutls_free ( connection -> session ) ; connection -> session = NULL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> & connection -> recv_buf , <S2SV_ModStart> , - 1 , & disconnected ) ; if ( disconnected ) { rc = - ENOTCONN ; } answer = crm_parse_remote_buffer ( & connection -> recv_buf <S2SV_ModStart> free_xml ( answer ) ; answer = NULL ; <S2SV_ModStart> return rc ; } crm_trace ( ""remote<S2SV_blank>client<S2SV_blank>connection<S2SV_blank>established"" ) <S2SV_ModEnd> "
1650,"<S2SV_StartBug> vpx_memset ( cpi , 0 , sizeof ( VP8_COMP ) ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> kf_overspend_bits = 0 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> cyclic_refresh_mode_enabled = cpi -> oxcf . error_resilient_mode ; <S2SV_EndBug> <S2SV_StartBug> cpi -> cyclic_refresh_mode_max_mbs_perframe = ( cpi -> common . mb_rows * cpi -> common . mb_cols ) / 5 ; <S2SV_EndBug> <S2SV_StartBug> # ifdef VP8_ENTROPY_STATS <S2SV_EndBug> <S2SV_StartBug> cpi -> b_calculate_psnr = CONFIG_INTERNAL_STATS ; <S2SV_EndBug> <S2SV_StartBug> # if 0 <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X16 ] . sdf = vp8_sad16x16 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X16 ] . vf = vp8_variance16x16 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X16 ] . svf = vp8_sub_pixel_variance16x16 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X16 ] . svf_halfpix_h = vp8_variance_halfpixvar16x16_h ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X16 ] . svf_halfpix_v = vp8_variance_halfpixvar16x16_v ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X16 ] . svf_halfpix_hv = vp8_variance_halfpixvar16x16_hv ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X16 ] . sdx3f = vp8_sad16x16x3 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X16 ] . sdx8f = vp8_sad16x16x8 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X16 ] . sdx4df = vp8_sad16x16x4d ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X8 ] . sdf = vp8_sad16x8 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X8 ] . vf = vp8_variance16x8 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X8 ] . svf = vp8_sub_pixel_variance16x8 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X8 ] . sdx3f = vp8_sad16x8x3 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X8 ] . sdx8f = vp8_sad16x8x8 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_16X8 ] . sdx4df = vp8_sad16x8x4d ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X16 ] . sdf = vp8_sad8x16 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X16 ] . vf = vp8_variance8x16 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X16 ] . svf = vp8_sub_pixel_variance8x16 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X16 ] . sdx3f = vp8_sad8x16x3 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X16 ] . sdx8f = vp8_sad8x16x8 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X16 ] . sdx4df = vp8_sad8x16x4d ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X8 ] . sdf = vp8_sad8x8 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X8 ] . vf = vp8_variance8x8 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X8 ] . svf = vp8_sub_pixel_variance8x8 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X8 ] . sdx3f = vp8_sad8x8x3 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X8 ] . sdx8f = vp8_sad8x8x8 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_8X8 ] . sdx4df = vp8_sad8x8x4d ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_4X4 ] . sdf = vp8_sad4x4 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_4X4 ] . vf = vp8_variance4x4 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_4X4 ] . svf = vp8_sub_pixel_variance4x4 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_4X4 ] . sdx3f = vp8_sad4x4x3 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_4X4 ] . sdx8f = vp8_sad4x4x8 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> fn_ptr [ BLOCK_4X4 ] . sdx4df = vp8_sad4x4x4d ; <S2SV_EndBug> ","<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> temporal_layer_id = - 1 ; cpi -> <S2SV_ModStart> mse_source_denoised = 0 ; cpi -> <S2SV_ModStart> if ( cpi -> oxcf . number_of_layers == 1 ) { cpi -> cyclic_refresh_mode_max_mbs_perframe = ( cpi -> common . mb_rows * cpi -> common . mb_cols ) / 20 ; } else if ( cpi -> oxcf . number_of_layers == 2 ) { cpi -> cyclic_refresh_mode_max_mbs_perframe = ( cpi -> common . mb_rows * cpi -> common . mb_cols ) / 10 ; } <S2SV_ModStart> CHECK_MEM_ERROR ( cpi -> consec_zero_last , vpx_calloc ( cm -> mb_rows * cm -> mb_cols , 1 ) ) ; CHECK_MEM_ERROR ( cpi -> consec_zero_last_mvbias , vpx_calloc ( ( cpi -> common . mb_rows * cpi -> common . mb_cols ) , 1 ) ) ; <S2SV_ModStart> force_maxqp = 0 ; cpi -> <S2SV_ModStart> ifdef OUTPUT_YUV_DENOISED yuv_denoised_file = fopen ( ""denoised.yuv"" , ""ab"" ) ; # endif # <S2SV_ModStart> vpx_sad16x16 <S2SV_ModEnd> <S2SV_ModStart> vpx_variance16x16 <S2SV_ModEnd> <S2SV_ModStart> vpx_sub_pixel_variance16x16 <S2SV_ModEnd> <S2SV_ModStart> vpx_variance_halfpixvar16x16_h <S2SV_ModEnd> <S2SV_ModStart> vpx_variance_halfpixvar16x16_v <S2SV_ModEnd> <S2SV_ModStart> vpx_variance_halfpixvar16x16_hv <S2SV_ModEnd> <S2SV_ModStart> vpx_sad16x16x3 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad16x16x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad16x16x4d <S2SV_ModEnd> <S2SV_ModStart> vpx_sad16x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_variance16x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_sub_pixel_variance16x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad16x8x3 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad16x8x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad16x8x4d <S2SV_ModEnd> <S2SV_ModStart> vpx_sad8x16 <S2SV_ModEnd> <S2SV_ModStart> vpx_variance8x16 <S2SV_ModEnd> <S2SV_ModStart> vpx_sub_pixel_variance8x16 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad8x16x3 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad8x16x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad8x16x4d <S2SV_ModEnd> <S2SV_ModStart> vpx_sad8x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_variance8x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_sub_pixel_variance8x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad8x8x3 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad8x8x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad8x8x4d <S2SV_ModEnd> <S2SV_ModStart> vpx_sad4x4 <S2SV_ModEnd> <S2SV_ModStart> vpx_variance4x4 <S2SV_ModEnd> <S2SV_ModStart> vpx_sub_pixel_variance4x4 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad4x4x3 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad4x4x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_sad4x4x4d <S2SV_ModEnd> "
1651,"<S2SV_StartBug> dh = skb_header_pointer ( skb , dataoff , sizeof ( _dh ) , & dh ) ; <S2SV_EndBug> ",<S2SV_ModStart> _dh <S2SV_ModEnd> 
1652,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug> <S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MAJ , 1 , 0 , <S2SV_EndBug> <S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN , 1 , 0 , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1653,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""[|icmp6]"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , mldv2_tstr <S2SV_ModEnd> "
1654,"<S2SV_StartBug> ok = ExprResolveBoolean ( ctx , expr , set_rtrn ) ; <S2SV_EndBug> ",<S2SV_ModStart> -> unary . child 
1655,"<S2SV_StartBug> while ( ( c != '\\n' ) && ( c != '\\0' ) ) <S2SV_EndBug> <S2SV_StartBug> ( void ) sscanf ( value , ""%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g"" , <S2SV_EndBug> <S2SV_StartBug> & white_point [ 0 ] , & white_point [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ( void ) sscanf ( value , ""%d<S2SV_blank>+X<S2SV_blank>%d"" , & height , & width ) ; <S2SV_EndBug> <S2SV_StartBug> image -> rows = ( size_t ) height ; <S2SV_EndBug> ",<S2SV_ModStart> && ( c != EOF ) <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> == 8 ) { <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> == 2 ) { <S2SV_ModEnd> <S2SV_ModStart> } 
1656,"<S2SV_StartBug> mptctl_mpt_command ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> struct mpt_ioctl_command karg ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( iocnum = mpt_verify_adapter ( karg . hdr . iocnum , & ioc ) ) < 0 ) || <S2SV_EndBug> <S2SV_StartBug> rc = mptctl_do_mpt_command ( karg , & uarg -> MF ) ; <S2SV_EndBug> ","<S2SV_ModStart> MPT_ADAPTER * ioc , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ioc , "
1657,"<S2SV_StartBug> * image ; <S2SV_EndBug> <S2SV_StartBug> padding , <S2SV_EndBug> <S2SV_StartBug> value = XBMInteger ( image , hex_digits ) ; <S2SV_EndBug> <S2SV_StartBug> * p ++ = ( unsigned char ) value ; <S2SV_EndBug> <S2SV_StartBug> * p ++ = ( unsigned char ) ( value >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> * p ++ = ( unsigned char ) value ; <S2SV_EndBug> <S2SV_StartBug> byte = ( size_t ) ( * p ++ ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; int c <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> c <S2SV_ModEnd> <S2SV_ModStart> ; if ( c < 0 ) break <S2SV_ModStart> c <S2SV_ModEnd> <S2SV_ModStart> c <S2SV_ModEnd> <S2SV_ModStart> if ( c < 0 ) break ; <S2SV_ModStart> c ; } if ( EOFBlob ( image ) != MagickFalse ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) <S2SV_ModEnd> <S2SV_ModStart> unsigned int <S2SV_ModEnd> "
1658,"<S2SV_StartBug> if ( ! ( com -> data = JAS_CAST ( uchar * , jas_strdup ( buf ) ) ) ) { <S2SV_EndBug> ",<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
1659,<S2SV_StartBug> chanmode_found = 1 ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> ,<S2SV_ModStart> if ( ! chanmode_found ) { <S2SV_ModStart> } 
1660,"<S2SV_StartBug> static int decode_uniform ( vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> const int v = vp9_read_literal ( r , l - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> return v < m ? v : ( v << 1 ) - m + vp9_read_bit ( r ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> <S2SV_ModStart> vpx_read_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_read_bit <S2SV_ModEnd> 
1661,<S2SV_StartBug> int is_valid ; <S2SV_EndBug> <S2SV_StartBug> giterr_clear ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> = ( error == GIT_OK ) <S2SV_ModStart>  <S2SV_ModEnd> 
1662,"<S2SV_StartBug> void vp9_cost_tokens_skip ( int * costs , const vp9_prob * probs , vp9_tree tree ) { <S2SV_EndBug> ",<S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_tree <S2SV_ModEnd> 
1663,"<S2SV_StartBug> vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> ( REFERENCE_MODE ) vp9_read ( r , cm -> fc . comp_inter_prob [ ctx ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> 
1664,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> return - 1 ; 
1665,"<S2SV_StartBug> if ( ! stream ) <S2SV_EndBug> <S2SV_StartBug> fatal ( ""Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>new<S2SV_blank>stream."" ) ; <S2SV_EndBug> <S2SV_StartBug> res = vpx_codec_enc_config_default ( global -> codec -> interface ( ) , <S2SV_EndBug> <S2SV_StartBug> stream -> config . stereo_fmt = STEREO_FORMAT_MONO ; <S2SV_EndBug> <S2SV_StartBug> stream -> config . write_webm = 1 ; <S2SV_EndBug> <S2SV_StartBug> stream -> ebml . last_pts_ms = - 1 ; <S2SV_EndBug> ",<S2SV_ModStart> stream == NULL ) { <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> write_webm = 1 ; # if CONFIG_WEBM_IO stream -> config . <S2SV_ModStart> ebml . last_pts_ns <S2SV_ModEnd> <S2SV_ModStart> ; stream -> ebml . writer = NULL ; stream -> ebml . segment = NULL 
1666,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""[ndp<S2SV_blank>opt]"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , icmp6_tstr <S2SV_ModEnd> "
1667,<S2SV_StartBug> ( * re_ast ) -> root_node = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> levels = 0 ; ( * re_ast ) -> 
1668,<S2SV_StartBug> other = unix_peer_get ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unix_peer ( other ) != sk ) { <S2SV_EndBug> <S2SV_StartBug> if ( unix_recvq_full ( other ) ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && unix_peer ( <S2SV_ModEnd> <S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart> && unix_dgram_peer_wake_me ( sk , other ) <S2SV_ModStart> unix_state_unlock ( sk <S2SV_ModEnd> "
1669,"<S2SV_StartBug> ret = var_expand ( path , key -> key -> key , iter -> var_expand_table , & error ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret <= 0 ) { <S2SV_EndBug> <S2SV_StartBug> auth_request_log_error ( iter -> auth_request , AUTH_SUBSYS_DB , <S2SV_EndBug> <S2SV_StartBug> ""Failed<S2SV_blank>to<S2SV_blank>expand<S2SV_blank>key<S2SV_blank>%s:<S2SV_blank>%s"" , key -> key -> key , error ) ; <S2SV_EndBug> <S2SV_StartBug> ret = dict_lookup ( iter -> conn -> dict , iter -> pool , <S2SV_EndBug> ","<S2SV_ModStart> str_append ( path , key -> key -> key ) ; ret = dict_lookup ( iter -> conn -> dict , iter -> pool , str_c ( path ) , & key -> value <S2SV_ModEnd> <S2SV_ModStart> > <S2SV_ModEnd> <S2SV_ModStart> auth_request_log_debug ( iter -> auth_request , AUTH_SUBSYS_DB , ""Lookup:<S2SV_blank>%s<S2SV_blank>=<S2SV_blank>%s"" , str_c ( path ) , key -> value ) ; } else if ( ret < 0 ) { <S2SV_ModStart> ""Failed<S2SV_blank>to<S2SV_blank>lookup<S2SV_blank>key<S2SV_blank>%s:<S2SV_blank>%s"" , str_c ( path ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1670,<S2SV_StartBug> if ( A > skb -> len - sizeof ( struct nlattr ) ) <S2SV_EndBug> <S2SV_StartBug> if ( nla -> nla_len > A - skb -> len ) <S2SV_EndBug> ,<S2SV_ModStart> skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> - A 
1671,<S2SV_StartBug> length = icon_file . directory [ i ] . size ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) "
1672,"<S2SV_StartBug> ""<message<S2SV_blank>type=\'chat\'<S2SV_blank>to=\'stabber@localhost/profanity\'<S2SV_blank>from=\'buddy1@localhost\'>"" <S2SV_EndBug> ","<S2SV_ModStart> ""<message<S2SV_blank>type=\'chat\'<S2SV_blank>to=\'stabber@localhost/profanity\'<S2SV_blank>from=\'stabber@localhost\'>"" <S2SV_ModEnd> "
1673,"<S2SV_StartBug> memcpy ( serial -> value , priv -> cac_id , priv -> cac_id_len ) ; <S2SV_EndBug> ",<S2SV_ModStart> serial -> len <S2SV_ModEnd> 
1674,<S2SV_StartBug> tok -> level = 0 ; <S2SV_EndBug> <S2SV_StartBug> return tok ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tok -> async_always = 0 ; 
1675,<S2SV_StartBug> if ( av1 -> av1_config ) { <S2SV_EndBug> ,<S2SV_ModStart> && av1 -> av1_config -> config 
1676,"<S2SV_StartBug> GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( ""[iso<S2SV_blank>file]<S2SV_blank>Missing<S2SV_blank>dref<S2SV_blank>box<S2SV_blank>in<S2SV_blank>dinf\\n"" ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; <S2SV_EndBug> ","<S2SV_ModStart> GF_Box * dref ; <S2SV_ModStart> ) ; dref = gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF <S2SV_ModStart> dref ; gf_isom_box_add_for_dump_mode ( s , dref <S2SV_ModEnd> "
1677,<S2SV_StartBug> buff [ r ] = '\\0' ; <S2SV_EndBug> ,"<S2SV_ModStart> MIN ( ( size_t ) r , ( sizeof buff ) - 1 ) <S2SV_ModEnd> "
1678,<S2SV_StartBug> ASSERT ( dpbSize ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( picSizeInMbs > ( UINT32_MAX - 32 - 15 ) / 384 ) { ALOGE ( ""b/28533562"" ) ; android_errorWriteLog ( 0x534e4554 , ""28533562"" ) ; return ( MEMORY_ALLOCATION_ERROR ) ; } "
1679,<S2SV_StartBug> oe_errno = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! sock ) <S2SV_EndBug> <S2SV_StartBug> if ( addrlen ) <S2SV_EndBug> <S2SV_StartBug> addrlen_in = * addrlen ; <S2SV_EndBug> <S2SV_StartBug> addrlen ) != OE_OK ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ,<S2SV_ModStart> oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> || ! addr || ! addrlen <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( addrlen_in < 0 ) OE_RAISE_ERRNO ( OE_EINVAL ) <S2SV_ModStart> & addrlen_out <S2SV_ModEnd> <S2SV_ModStart> if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; * addrlen = addrlen_out ; 
1680,"
","
"
1681,"<S2SV_StartBug> nego_process_negotiation_request ( nego , s ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! <S2SV_ModStart> ) return FALSE 
1682,<S2SV_StartBug> struct ipv6_pinfo * np = inet6_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt == NULL ) <S2SV_EndBug> <S2SV_StartBug> fl6_sock_release ( flowlabel ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; struct ipv6_txoptions * opt_to_free = NULL <S2SV_ModStart> ! opt ) { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> <S2SV_ModStart> ) ; txopt_put ( opt_to_free 
1683,"<S2SV_StartBug> unsigned int i , found , upx_success = 0 , min = 0 , max = 0 , err , overlays = 0 ; <S2SV_EndBug> <S2SV_StartBug> uint32_t valign , falign , hdr_size , j ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < nsections ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> strncpy ( sname , ( char * ) section_hdr [ i ] . Name , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> sname [ 8 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( exe_sections [ i ] . raw >= fsize ) { <S2SV_EndBug> ","<S2SV_ModStart> j , <S2SV_ModStart> , rescan = 1 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> while ( rescan == 1 ) { rescan = 0 ; <S2SV_ModStart> exe_sections [ i ] . rva = PEALIGN ( EC32 ( section_hdr [ i ] . VirtualAddress ) , valign ) ; exe_sections [ i ] . vsz = PESALIGN ( EC32 ( section_hdr [ i ] . VirtualSize ) , valign ) ; exe_sections [ i ] . raw = PEALIGN ( EC32 ( section_hdr [ i ] . PointerToRawData ) , falign ) ; exe_sections [ i ] . rsz = PESALIGN ( EC32 ( section_hdr [ i ] . SizeOfRawData ) , falign ) ; exe_sections [ i ] . chr = EC32 ( section_hdr [ i ] . Characteristics ) ; exe_sections [ i ] . urva = EC32 ( section_hdr [ i ] . VirtualAddress ) ; exe_sections [ i ] . uvsz = EC32 ( section_hdr [ i ] . VirtualSize ) ; exe_sections [ i ] . uraw = EC32 ( section_hdr [ i ] . PointerToRawData ) ; exe_sections [ i ] . ursz = EC32 ( section_hdr [ i ] . SizeOfRawData ) ; if ( exe_sections [ i ] . rsz ) { if ( ! CLI_ISCONTAINED ( 0 , fsize , exe_sections [ i ] . uraw , exe_sections [ i ] . ursz ) || exe_sections [ i ] . raw >= fsize ) { cli_dbgmsg ( ""Broken<S2SV_blank>PE<S2SV_blank>file<S2SV_blank>-<S2SV_blank>Section<S2SV_blank>%d<S2SV_blank>starts<S2SV_blank>or<S2SV_blank>exists<S2SV_blank>beyond<S2SV_blank>the<S2SV_blank>end<S2SV_blank>of<S2SV_blank>file<S2SV_blank>(Offset@<S2SV_blank>%lu,<S2SV_blank>Total<S2SV_blank>filesize<S2SV_blank>%lu)\\n"" , i , ( unsigned long ) exe_sections [ i ] . raw , ( unsigned long ) fsize ) ; if ( nsections == 1 ) { free ( section_hdr ) ; free ( exe_sections ) ; if ( DETECT_BROKEN_PE ) { cli_append_virus ( ctx , ""Heuristics.Broken.Executable"" ) ; return CL_VIRUS ; } return CL_CLEAN ; } for ( j = i ; j < nsections - 1 ; j ++ ) memcpy ( & exe_sections [ j ] , & exe_sections [ j + 1 ] , sizeof ( struct cli_exe_section ) ) ; for ( j = i ; j < nsections - 1 ; j ++ ) memcpy ( & section_hdr [ j ] , & section_hdr [ j + 1 ] , sizeof ( struct pe_image_section_hdr ) ) ; nsections -- ; rescan = 1 ; break ; } } } } for ( i = 0 ; i < nsections ; i ++ ) { <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1684,"<S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRR ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; <S2SV_EndBug> <S2SV_StartBug> return ( dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_REG_EPDRL ) ; <S2SV_EndBug> ","<S2SV_ModStart> DM9000_EPAR <S2SV_ModEnd> <S2SV_ModStart> DM9000_EPCR , DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> <S2SV_ModStart> DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> <S2SV_ModStart> DM9000_EPCR , DM9000_EPCR_EPOS <S2SV_ModEnd> <S2SV_ModStart> DM9000_EPDRH <S2SV_ModEnd> <S2SV_ModStart> DM9000_EPDRL <S2SV_ModEnd> "
1685,"<S2SV_StartBug> & bufferoffset , <S2SV_EndBug> ","<S2SV_ModStart> t2p -> tiff_datasize , "
1686,"<S2SV_StartBug> ! inode_capable ( inode , CAP_CHOWN ) ) <S2SV_EndBug> <S2SV_StartBug> ! inode_capable ( inode , CAP_CHOWN ) ) <S2SV_EndBug> <S2SV_StartBug> ! inode_capable ( inode , CAP_FSETID ) ) <S2SV_EndBug> ",<S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> <S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> <S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> 
1687,"<S2SV_StartBug> static void nsc_encode_argb_to_aycocg ( NSC_CONTEXT * context , const BYTE * data , <S2SV_EndBug> <S2SV_StartBug> UINT32 tempWidth ; <S2SV_EndBug> <S2SV_StartBug> for ( y = 0 ; y < context -> height ; y ++ ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! context || data || ( scanline == 0 ) ) return FALSE <S2SV_ModStart> if ( context -> priv -> PlaneBuffersLength < rw * scanline ) return FALSE ; if ( rw < scanline * 2 ) return FALSE ; <S2SV_ModStart> return TRUE ; 
1688,"<S2SV_StartBug> static int isofs_read_inode ( struct inode * inode ) <S2SV_EndBug> <S2SV_StartBug> parse_rock_ridge_inode ( de , inode ) ; <S2SV_EndBug> ","<S2SV_ModStart> , int relocated <S2SV_ModStart> , relocated "
1689,"<S2SV_StartBug> rcu_read_lock ( ) ; <S2SV_EndBug> <S2SV_StartBug> __ptrace_link ( child , new_parent , __task_cred ( new_parent ) ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> current_cred ( ) <S2SV_ModEnd> 
1690,<S2SV_StartBug> ( * re_ast ) -> root_node = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> levels = 0 ; ( * re_ast ) -> 
1691,"<S2SV_StartBug> rc = cib_tls_signon ( cib , & ( private -> command ) ) ; <S2SV_EndBug> <S2SV_StartBug> rc = cib_tls_signon ( cib , & ( private -> callback ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> , FALSE <S2SV_ModStart> , TRUE "
1692,<S2SV_StartBug> msg . msg_name = ( struct sockaddr * ) & address ; <S2SV_EndBug> <S2SV_StartBug> msg . msg_namelen = sizeof ( address ) ; <S2SV_EndBug> ,<S2SV_ModStart> addr ? <S2SV_ModStart> : NULL <S2SV_ModStart> 0 <S2SV_ModEnd> 
1693,"<S2SV_StartBug> int num00 , tmp_err , n , sr = 0 ; <S2SV_EndBug> <S2SV_StartBug> int new_mv_mode_penalty = 256 ; <S2SV_EndBug> <S2SV_StartBug> const int quart_frm = MIN ( cpi -> common . width , cpi -> common . height ) ; <S2SV_EndBug> <S2SV_StartBug> tmp_err = cpi -> diamond_search_sad ( x , & ref_mv_full , & tmp_mv , <S2SV_EndBug> <S2SV_StartBug> x -> sadperbit16 , & num00 , & v_fn_ptr , <S2SV_EndBug> <S2SV_StartBug> best_mv -> row = tmp_mv . row ; <S2SV_EndBug> <S2SV_StartBug> tmp_err = cpi -> diamond_search_sad ( x , & ref_mv_full , & tmp_mv , <S2SV_EndBug> <S2SV_StartBug> x -> nmvjointcost , <S2SV_EndBug> <S2SV_StartBug> best_mv -> row = tmp_mv . row ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> NEW_MV_MODE_PENALTY ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param <S2SV_ModEnd> <S2SV_ModStart> sr = get_search_range ( cpi ) <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { v_fn_ptr . vf = highbd_get_block_variance_fn ( bsize , xd -> bd ) ; } # endif <S2SV_ModStart> cpi -> ss_cfg , & <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * best_mv = tmp_mv <S2SV_ModEnd> <S2SV_ModStart> , & cpi -> ss_cfg <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * best_mv = tmp_mv <S2SV_ModEnd> "
1694,"<S2SV_StartBug> ""%s:<S2SV_blank>page<S2SV_blank>size<S2SV_blank>%zu<S2SV_blank>at<S2SV_blank>0x%zx,<S2SV_blank>bad<S2SV_blank>registry"" , <S2SV_EndBug> ","<S2SV_ModStart> , filename , page_size , off ) ; goto error ; } if ( off + page_size > h -> size ) { SET_ERRNO ( ENOTSUP , ""%s:<S2SV_blank>page<S2SV_blank>size<S2SV_blank>%zu<S2SV_blank>at<S2SV_blank>0x%zx<S2SV_blank>extends<S2SV_blank>beyond<S2SV_blank>end<S2SV_blank>of<S2SV_blank>file,<S2SV_blank>bad<S2SV_blank>registry"" "
1695,<S2SV_StartBug> return merged ; <S2SV_EndBug> ,<S2SV_ModStart> merged -> xml_external_entity = ( child -> xml_external_entity == NOT_SET ? parent -> xml_external_entity : child -> xml_external_entity ) ; 
1696,"<S2SV_StartBug> if ( used_address && used_address -> name_len == msg_sys -> msg_namelen && <S2SV_EndBug> <S2SV_StartBug> ! memcmp ( & used_address -> name , msg -> msg_name , <S2SV_EndBug> <S2SV_StartBug> memcpy ( & used_address -> name , msg -> msg_name , <S2SV_EndBug> ",<S2SV_ModStart> msg_sys -> msg_name && <S2SV_ModStart> msg_sys <S2SV_ModEnd> <S2SV_ModStart> if ( msg_sys -> msg_name ) <S2SV_ModStart> msg_sys <S2SV_ModEnd> 
1697,<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1698,"<S2SV_StartBug> offset , <S2SV_EndBug> <S2SV_StartBug> if ( offset + ( ( size_t ) operand * number_planes ) > pixel_info_length ) <S2SV_EndBug> <S2SV_StartBug> p = pixels + offset ; <S2SV_EndBug> <S2SV_StartBug> if ( offset + ( ( size_t ) operand * number_planes ) > pixel_info_length ) <S2SV_EndBug> ","<S2SV_ModStart> pixel_info_length ; ssize_t count , offset <S2SV_ModEnd> <S2SV_ModStart> ( offset < 0 ) || ( <S2SV_ModStart> ) <S2SV_ModStart> if ( ( offset < 0 ) || ( offset + ( ( size_t ) operand * number_planes ) > pixel_info_length ) ) { if ( number_colormaps != 0 ) colormap = ( unsigned char * ) RelinquishMagickMemory ( colormap ) ; pixel_info = RelinquishVirtualMemory ( pixel_info ) ; ThrowReaderException ( CorruptImageError , ""UnableToReadImageData"" ) ; } <S2SV_ModStart>  <S2SV_ModEnd> "
1699,"<S2SV_StartBug> ( r = sshbuf_put_u32 ( b , comp -> enabled ) ) != 0 || <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1700,"<S2SV_StartBug> option = stok ( option , ""<S2SV_blank>=\\t,"" , & ovalue ) ; <S2SV_EndBug> ",<S2SV_ModStart> ssplit <S2SV_ModEnd> 
1701,<S2SV_StartBug> cib_client_t * client = user_data ; <S2SV_EndBug> <S2SV_StartBug> free ( client -> name ) ; <S2SV_EndBug> <S2SV_StartBug> free ( client ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ; int csock = 0 <S2SV_ModStart> if ( client -> remote_auth_timeout ) { g_source_remove ( client -> remote_auth_timeout ) ; } if ( client -> encrypted ) { # ifdef HAVE_GNUTLS_GNUTLS_H if ( client -> session ) { void * sock_ptr = gnutls_transport_get_ptr ( * client -> session ) ; csock = GPOINTER_TO_INT ( sock_ptr ) ; if ( client -> handshake_complete ) { gnutls_bye ( * client -> session , GNUTLS_SHUT_WR ) ; } gnutls_deinit ( * client -> session ) ; gnutls_free ( client -> session ) ; } # endif } else { csock = GPOINTER_TO_INT ( client -> session ) ; } client -> session = NULL ; if ( csock > 0 ) { close ( csock ) ; } <S2SV_ModStart> -> recv_buf ) ; free ( client "
1702,<S2SV_StartBug> * p = thread -> twups ; <S2SV_EndBug> <S2SV_StartBug> work ++ ; <S2SV_EndBug> ,<S2SV_ModStart> lua_assert ( ! isold ( thread ) || thread -> openupval == NULL ) ; <S2SV_ModStart> lua_assert ( getage ( uv ) <= getage ( thread ) ) ; 
1703,<S2SV_StartBug> px -> ft -> data = px ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! px -> ft ) { return FALSE ; } 
1704,<S2SV_StartBug> return FALSE ; <S2SV_EndBug> ,<S2SV_ModStart> transport -> credssp = NULL ; 
1705,"<S2SV_StartBug> olddentry = ovl_dentry_upper ( old ) ; <S2SV_EndBug> <S2SV_StartBug> newdentry = lookup_one_len ( new -> d_name . name , new_upperdir , <S2SV_EndBug> <S2SV_StartBug> err = PTR_ERR ( newdentry ) ; <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( newdentry ) ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( olddentry -> d_parent != old_upperdir ) <S2SV_EndBug> <S2SV_StartBug> if ( newdentry -> d_parent != new_upperdir ) <S2SV_EndBug> <S2SV_StartBug> goto out_dput ; <S2SV_EndBug> <S2SV_StartBug> out_unlock : <S2SV_EndBug> ","<S2SV_ModStart> lookup_one_len ( old <S2SV_ModEnd> <S2SV_ModStart> old_upperdir , old <S2SV_ModEnd> <S2SV_ModStart> olddentry <S2SV_ModEnd> <S2SV_ModStart> olddentry <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> != ovl_dentry_upper ( old ) ) goto out_dput_old ; newdentry = lookup_one_len ( new -> d_name . name , new_upperdir , new -> d_name . len ) ; err = PTR_ERR ( newdentry ) ; if ( IS_ERR ( newdentry ) ) goto out_dput_old ; err = - ESTALE ; if ( ovl_dentry_upper ( new ) ) { if ( opaquedir ) { if ( newdentry != opaquedir <S2SV_ModEnd> <S2SV_ModStart> } else { if ( newdentry != ovl_dentry_upper ( new ) <S2SV_ModEnd> <S2SV_ModStart> } } else { new_create = true ; if ( ! d_is_negative ( newdentry ) && ( ! new_opaque || ! ovl_is_whiteout ( newdentry ) ) ) goto out_dput ; } <S2SV_ModStart> out_dput_old : dput ( olddentry ) ; "
1706,<S2SV_StartBug> sock_put ( skpair ) ; <S2SV_EndBug> ,"<S2SV_ModStart> unix_dgram_peer_wake_disconnect ( sk , skpair ) ; "
1707,"<S2SV_StartBug> int_mv * ref_mv , <S2SV_EndBug> <S2SV_StartBug> int64_t tx_size_diff [ TX_MODES ] , <S2SV_EndBug> <S2SV_StartBug> int64_t best_filter_diff [ SWITCHABLE_FILTER_CONTEXTS ] ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> best_mode_index = mode_index ; <S2SV_EndBug> <S2SV_StartBug> ctx -> best_ref_mv [ 0 ] . as_int = ref_mv -> as_int ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( ctx -> tx_rd_diff , tx_size_diff , sizeof ( ctx -> tx_rd_diff ) ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , int skippable <S2SV_ModStart> skippable = skippable ; ctx -> <S2SV_ModStart> mbmi_ext = * x -> mbmi_ext <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> "
1708,<S2SV_StartBug> ND_TCHECK ( * ext ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK2 ( * ext , sizeof ( a ) <S2SV_ModEnd> "
1709,"<S2SV_StartBug> cm -> allow_comp_inter_inter = 0 ; <S2SV_EndBug> <S2SV_StartBug> cm -> allow_comp_inter_inter = 1 ; <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> const int64_t * mode_thresh = cpi -> rd_prediction_type_threshes [ frame_type ] ; <S2SV_EndBug> <S2SV_StartBug> const int64_t * filter_thresh = cpi -> rd_filter_threshes [ frame_type ] ; <S2SV_EndBug> <S2SV_StartBug> if ( frame_type == ALTREF_FRAME || ! cm -> allow_comp_inter_inter ) <S2SV_EndBug> <S2SV_StartBug> else if ( mode_thresh [ COMPOUND_REFERENCE ] > mode_thresh [ SINGLE_REFERENCE ] && <S2SV_EndBug> <S2SV_StartBug> mode_thresh [ COMPOUND_REFERENCE ] > <S2SV_EndBug> <S2SV_StartBug> mode_thresh [ REFERENCE_MODE_SELECT ] && <S2SV_EndBug> <S2SV_StartBug> else if ( mode_thresh [ SINGLE_REFERENCE ] > mode_thresh [ REFERENCE_MODE_SELECT ] ) <S2SV_EndBug> <S2SV_StartBug> if ( cm -> interp_filter == SWITCHABLE ) { <S2SV_EndBug> <S2SV_StartBug> cm -> interp_filter = EIGHTTAP_SMOOTH ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < REFERENCE_MODES ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> const int diff = ( int ) ( cpi -> rd_comp_pred_diff [ i ] / cm -> MBs ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> const int64_t diff = cpi -> rd_filter_diff [ i ] / cm -> MBs ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> single_count_zero += cm -> counts . comp_inter [ i ] [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> comp_count_zero += cm -> counts . comp_inter [ i ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( cm -> counts . comp_inter ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( cm -> counts . comp_inter ) ; <S2SV_EndBug> <S2SV_StartBug> count4x4 += cm -> counts . tx . p32x32 [ i ] [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> count4x4 += cm -> counts . tx . p16x16 [ i ] [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> count4x4 += cm -> counts . tx . p8x8 [ i ] [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> count8x8_lp += cm -> counts . tx . p32x32 [ i ] [ TX_8X8 ] ; <S2SV_EndBug> <S2SV_StartBug> count8x8_lp += cm -> counts . tx . p16x16 [ i ] [ TX_8X8 ] ; <S2SV_EndBug> <S2SV_StartBug> count8x8_8x8p += cm -> counts . tx . p8x8 [ i ] [ TX_8X8 ] ; <S2SV_EndBug> <S2SV_StartBug> count16x16_16x16p += cm -> counts . tx . p16x16 [ i ] [ TX_16X16 ] ; <S2SV_EndBug> <S2SV_StartBug> count16x16_lp += cm -> counts . tx . p32x32 [ i ] [ TX_16X16 ] ; <S2SV_EndBug> <S2SV_StartBug> count32x32 += cm -> counts . tx . p32x32 [ i ] [ TX_32X32 ] ; <S2SV_EndBug> <S2SV_StartBug> reset_skip_txfm_size ( cm , TX_8X8 ) ; <S2SV_EndBug> <S2SV_StartBug> reset_skip_txfm_size ( cm , TX_4X4 ) ; <S2SV_EndBug> <S2SV_StartBug> reset_skip_txfm_size ( cm , TX_16X16 ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> interp_filter = SWITCHABLE ; <S2SV_EndBug> ","<S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> ; RD_OPT * const rd_opt = & cpi -> rd ; FRAME_COUNTS * counts = cpi -> td . counts ; RD_COUNTS * const rdc = & cpi -> td . rd_counts <S2SV_ModStart> int64_t * const mode_thrs = rd_opt -> prediction_type_threshes <S2SV_ModEnd> <S2SV_ModStart> int64_t * const filter_thrs = rd_opt -> filter_threshes <S2SV_ModEnd> <S2SV_ModStart> const int is_alt_ref = <S2SV_ModEnd> <S2SV_ModStart> ; if ( is_alt_ref || ! cpi <S2SV_ModEnd> <S2SV_ModStart> mode_thrs <S2SV_ModEnd> <S2SV_ModStart> mode_thrs <S2SV_ModEnd> <S2SV_ModStart> mode_thrs <S2SV_ModEnd> <S2SV_ModStart> mode_thrs <S2SV_ModEnd> <S2SV_ModStart> mode_thrs <S2SV_ModEnd> <S2SV_ModStart> mode_thrs <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> get_interp_filter ( filter_thrs , is_alt_ref ) ; <S2SV_ModEnd> <S2SV_ModStart> mode_thrs [ i ] = ( mode_thrs [ i ] + rdc -> comp_pred_diff <S2SV_ModEnd> <S2SV_ModStart> / 2 ; <S2SV_ModEnd> <S2SV_ModStart> ++ i ) filter_thrs [ i ] = ( filter_thrs [ i ] + rdc -> filter_diff <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> <S2SV_ModStart> reset_skip_tx_size <S2SV_ModEnd> <S2SV_ModStart> reset_skip_tx_size <S2SV_ModEnd> <S2SV_ModStart> reset_skip_tx_size <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1710,"<S2SV_StartBug> if ( test_bit ( EV_KEY , dev -> evbit ) && <S2SV_EndBug> ","<S2SV_ModStart> if ( old_keycode > KEY_MAX ) { dev_warn ( dev -> dev . parent ? : & dev -> dev , ""%s:<S2SV_blank>got<S2SV_blank>too<S2SV_blank>big<S2SV_blank>old<S2SV_blank>keycode<S2SV_blank>%#x\\n"" , __func__ , old_keycode ) ; } else "
1711,"<S2SV_StartBug> goto out_nofree ; <S2SV_EndBug> <S2SV_StartBug> if ( msg -> msg_name != NULL ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( msg -> msg_name , & sa , sizeof ( struct sockaddr_pn ) ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> sa ) ) ; * addr_len = sizeof ( sa ) ; } <S2SV_ModEnd> 
1712,<S2SV_StartBug> if ( ( ulen > SIZE_T_MAX / 2 ) || ( plen > ( SIZE_T_MAX / 2 - 2 ) ) ) <S2SV_EndBug> ,<S2SV_ModStart> 4 <S2SV_ModEnd> 
1713,"<S2SV_StartBug> if ( ( fifo -> fd = open ( fifo -> name , O_RDWR | O_CLOEXEC | O_NONBLOCK ) ) == - 1 ) { <S2SV_EndBug> ",<S2SV_ModStart> | O_NOFOLLOW 
1714,<S2SV_StartBug> saddr . sin_addr . s_addr = htonl ( INADDR_ANY ) ; <S2SV_EndBug> ,<S2SV_ModStart> INADDR_LOOPBACK <S2SV_ModEnd> 
1715,"<S2SV_StartBug> FILE * fp = fopen ( dest_filename , ""w"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""wx"" <S2SV_ModEnd> "
1716,"<S2SV_StartBug> * low = p - reg -> dmax ; <S2SV_EndBug> <S2SV_StartBug> ( pprev ? pprev : str ) , * low ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc , str , * low ) ; } else { <S2SV_ModStart> } "
1717,<S2SV_StartBug> if ( hrtimer_cancel ( timer ) ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & pit -> pit_state . lock ) ; <S2SV_ModStart> mutex_unlock ( & pit -> pit_state . lock ) ; 
1718,<S2SV_StartBug> vpx_roi_map_t roi = { 0 } ; <S2SV_EndBug> ,"<S2SV_ModStart> ; memset ( & roi , 0 , sizeof ( roi ) ) <S2SV_ModEnd> "
1719,"<S2SV_StartBug> static const char * parse_object ( cJSON * item , const char * value ) <S2SV_EndBug> <S2SV_StartBug> ep = value ; <S2SV_EndBug> <S2SV_StartBug> return value + 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( item -> child = child = cJSON_New_Item ( ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ( value = skip ( parse_string ( child , skip ( value ) ) ) ) ) <S2SV_EndBug> <S2SV_StartBug> ep = value ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( value = skip ( parse_value ( child , skip ( value + 1 ) ) ) ) ) <S2SV_EndBug> <S2SV_StartBug> child = new_item ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( value = skip ( parse_string ( child , skip ( value + 1 ) ) ) ) ) <S2SV_EndBug> <S2SV_StartBug> ep = value ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( value = skip ( parse_value ( child , skip ( value + 1 ) ) ) ) ) <S2SV_EndBug> <S2SV_StartBug> return value + 1 ; <S2SV_EndBug> ","<S2SV_ModStart> , const char * * ep <S2SV_ModStart> * ep = value ; return 0 ; <S2SV_ModEnd> <S2SV_ModStart> return value + 1 ; <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! item -> child ) return 0 ; <S2SV_ModEnd> <S2SV_ModStart> , ep ) ) ; if ( ! value ) <S2SV_ModEnd> <S2SV_ModStart> * ep = value ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> , ep ) ) ; if ( ! value ) <S2SV_ModEnd> <S2SV_ModStart> child = new_item ; <S2SV_ModEnd> <S2SV_ModStart> , ep ) ) ; if ( ! value ) <S2SV_ModEnd> <S2SV_ModStart> * ep = value ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> , ep ) ) ; if ( ! value ) <S2SV_ModEnd> <S2SV_ModStart> return value + 1 ; * ep = value ; <S2SV_ModEnd> "
1720,<S2SV_StartBug> ncomponents = bytestream2_get_be16u ( & s -> g ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( s -> image_offset_x || s -> image_offset_y ) { avpriv_request_sample ( s -> avctx , ""Support<S2SV_blank>for<S2SV_blank>image<S2SV_blank>offsets"" ) ; return AVERROR_PATCHWELCOME ; } "
1721,"<S2SV_StartBug> addModuleArgument ( db , pParse -> pNewTable , sqlite3DbStrNDup ( db , z , n ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> pParse <S2SV_ModEnd> 
1722,<S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> av_freep ( & x -> buf ) ; x -> buf_size = 0 ; 
1723,<S2SV_StartBug> new_fname = malloc ( strlen ( fname ) + strlen ( dirname ) + 16 ) ; <S2SV_EndBug> ,<S2SV_ModStart> safe_calloc <S2SV_ModEnd> 
1724,<S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( ! path_connected ( & nd -> path ) ) ) return - ENOENT ; 
1725,"<S2SV_StartBug> strlcpy ( rakcipher . type , ""akcipher"" , sizeof ( rakcipher . type ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> strncpy <S2SV_ModEnd> 
1726,"<S2SV_StartBug> void imap_quote_string ( char * dest , size_t dlen , const char * src ) <S2SV_EndBug> ","<S2SV_ModStart> , bool quote_backtick ) { const char * quote = ""`\\""\\\\"" ; if ( ! quote_backtick ) quote ++ <S2SV_ModEnd> "
1727,<S2SV_StartBug> int r ; <S2SV_EndBug> <S2SV_StartBug> for ( ; ; ) { <S2SV_EndBug> ,"<S2SV_ModStart> , dontmax = 0 <S2SV_ModStart> if ( ( st . st_mode & S_IFREG ) == 0 || st . st_size <= 0 ) { st . st_size = 64 * 1024 ; dontmax = 1 ; } if ( ( r = sshbuf_allocate ( blob , st . st_size ) ) != 0 || ( dontmax && ( r = sshbuf_set_max_size ( blob , st . st_size ) ) != 0 ) ) return r ; "
1728,<S2SV_StartBug> params -> buffer . fragments > SIZE_MAX / params -> buffer . fragment_size ) <S2SV_EndBug> ,<S2SV_ModStart> INT_MAX <S2SV_ModEnd> 
1729,"<S2SV_StartBug> memcpy ( output , input , sizeof ( uint8_t ) * length ) ; <S2SV_EndBug> ",<S2SV_ModStart> output [ 0 ] <S2SV_ModEnd> 
1730,<S2SV_StartBug> if ( vcpu -> arch . time_page ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pv_time_enabled = false ; } <S2SV_ModEnd> 
1731,"<S2SV_StartBug> handle = ion_handle_get_by_id ( client , data . handle . handle ) ; <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( handle ) ) <S2SV_EndBug> <S2SV_StartBug> ion_free ( client , handle ) ; <S2SV_EndBug> ","<S2SV_ModStart> mutex_lock ( & client -> lock ) ; handle = ion_handle_get_by_id_nolock <S2SV_ModEnd> <S2SV_ModStart> { mutex_unlock ( & client -> lock ) ; <S2SV_ModStart> } ion_free_nolock ( client , handle ) ; ion_handle_put_nolock ( handle ) ; mutex_unlock ( & client -> lock <S2SV_ModEnd> "
1732,<S2SV_StartBug> int data_len = elt -> length - <S2SV_EndBug> <S2SV_StartBug> sizeof ( struct oz_get_desc_rsp ) + 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> u16 offs , total_size ; u8 data_len ; if ( elt -> length < sizeof ( struct oz_get_desc_rsp ) - 1 ) break ; <S2SV_ModEnd> <S2SV_ModStart> ( <S2SV_ModStart> ) - 1 ) ; offs = le16_to_cpu ( get_unaligned ( & body -> offset ) ) ; total_size = le16_to_cpu ( get_unaligned ( & body -> total_size ) ) ; oz_dbg ( ON , ""USB_REQ_GET_DESCRIPTOR<S2SV_blank>-<S2SV_blank>cnf\\n"" ) ; oz_hcd_get_desc_cnf ( usb_ctx -> hport , body -> req_id , body -> rcode , body -> data , data_len , offs , total_size ) ; } break ; case OZ_SET_CONFIG_RSP : { struct oz_set_config_rsp * body = ( struct oz_set_config_rsp * ) usb_hdr ; oz_hcd_control_cnf ( usb_ctx -> hport , body -> req_id , body -> rcode , NULL , 0 ) ; } break ; case OZ_SET_INTERFACE_RSP : { struct oz_set_interface_rsp * body = ( struct oz_set_interface_rsp * ) usb_hdr ; oz_hcd_control_cnf ( usb_ctx -> hport , body -> req_id , body -> rcode , NULL , 0 ) ; } break ; case OZ_VENDOR_CLASS_RSP : { struct oz_vendor_class_rsp * body = ( struct oz_vendor_class_rsp * ) usb_hdr ; oz_hcd_control_cnf ( usb_ctx -> hport , body -> req_id , body -> rcode , body -> data , elt -> length - sizeof ( struct oz_vendor_class_rsp <S2SV_ModStart>  <S2SV_ModEnd> "
1733,"<S2SV_StartBug> growBuffer ( buffer , XML_PARSER_BUFFER_SIZE ) ; <S2SV_EndBug> ",<S2SV_ModStart> i + 
1734,<S2SV_StartBug> if ( len < 5 ) <S2SV_EndBug> <S2SV_StartBug> return len ; <S2SV_EndBug> ,"<S2SV_ModStart> { # ifdef CONFIG_RETPOLINE WARN_ONCE ( ""Failing<S2SV_blank>to<S2SV_blank>patch<S2SV_blank>indirect<S2SV_blank>JMP<S2SV_blank>in<S2SV_blank>%ps\\n"" , ( void * ) addr ) ; # endif <S2SV_ModStart> } "
1735,<S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> buffer_size -= ( size_t ) pkg_length ; <S2SV_ModStart> buffer_size -= ( size_t ) pkg_length ; <S2SV_ModStart> buffer_size -= ( size_t ) pkg_length ; 
1736,<S2SV_StartBug> mapping = ( struct address_space * ) page_private ( page ) ; <S2SV_EndBug> ,<S2SV_ModStart> vma -> vm_file -> f_dentry -> d_inode -> i_mapping <S2SV_ModEnd> 
1737,"<S2SV_StartBug> void fdct16_8col ( __m128i * in ) { <S2SV_EndBug> <S2SV_StartBug> const __m128i k__cospi_p16_p16 = _mm_set1_epi16 ( cospi_16_64 ) ; <S2SV_EndBug> <S2SV_StartBug> const __m128i k__cospi_m24_m08 = pair_set_epi16 ( - cospi_24_64 , - cospi_8_64 ) ; <S2SV_EndBug> <S2SV_StartBug> v [ 2 ] = _mm_madd_epi16 ( u [ 2 ] , k__cospi_m24_m08 ) ; <S2SV_EndBug> <S2SV_StartBug> v [ 7 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_p24_p08 ) ; <S2SV_EndBug> <S2SV_StartBug> u [ 0 ] = _mm_add_epi32 ( v [ 0 ] , k__DCT_CONST_ROUNDING ) ; <S2SV_EndBug> <S2SV_StartBug> s [ 2 ] = _mm_sub_epi16 ( p [ 3 ] , t [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> s [ 3 ] = _mm_add_epi16 ( p [ 3 ] , t [ 2 ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> static <S2SV_ModStart> ( int16_t ) <S2SV_ModStart> k__cospi_p08_m24 <S2SV_ModEnd> <S2SV_ModStart> cospi_8_64 , - cospi_24_64 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 3 ] = _mm_madd_epi16 ( u [ 3 <S2SV_ModEnd> <S2SV_ModStart> v [ 4 ] = _mm_madd_epi16 ( u [ 2 ] , k__cospi_p08_m24 ) ; v [ 5 ] = _mm_madd_epi16 ( u [ 3 ] , k__cospi_p08_m24 ) ; v [ 6 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_p24_p08 ) ; v [ 7 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_p24_p08 ) ; <S2SV_ModStart> _mm_add_epi16 ( p [ 3 ] , t [ 2 ] ) ; s [ 3 ] = <S2SV_ModStart> 4 ] = _mm_sub_epi16 ( p [ 4 ] , t [ 5 ] ) ; s [ 5 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1738,<S2SV_StartBug> if ( pes_signal != 1 || pes_header_data_length == 0 ) { <S2SV_EndBug> ,<S2SV_ModStart> avio_feof ( pb ) ) { return AVERROR_EOF ; } if ( 
1739,<S2SV_StartBug> newnp -> mcast_oif = inet6_iif ( skb ) ; <S2SV_EndBug> <S2SV_StartBug> newnp -> pktoptions = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> ipv6_mc_list = NULL ; newnp -> ipv6_ac_list = NULL ; newnp -> ipv6_fl_list = NULL ; newnp -> <S2SV_ModStart> ipv6_mc_list = NULL ; newnp -> ipv6_ac_list = NULL ; newnp -> ipv6_fl_list = NULL ; newnp -> 
1740,<S2SV_StartBug> long elements ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( * p >= max - 2 ) { zend_error ( E_WARNING , ""Bad<S2SV_blank>unserialize<S2SV_blank>data"" ) ; return - 1 ; } <S2SV_ModStart> - 1 <S2SV_ModEnd> "
1741,<S2SV_StartBug> if ( ! is_guest_mode ( vcpu ) ) { <S2SV_EndBug> ,<S2SV_ModStart> && kvm_x86_ops -> get_cpl ( vcpu ) == 0 
1742,<S2SV_StartBug> auth . skb = chunk -> auth_chunk ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! net -> sctp . auth_enable || ! new_asoc -> peer . auth_capable ) { kfree_skb ( chunk -> auth_chunk ) ; sctp_association_free ( new_asoc ) ; return sctp_sf_pdiscard ( net , ep , asoc , type , arg , commands ) ; } "
1743,<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * param_count ) ; <S2SV_EndBug> ,"<S2SV_ModStart> size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , param_count , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> alloc_size <S2SV_ModEnd> "
1744,"<S2SV_StartBug> declen = mutt_b64_decode ( out2 , out1 ) ; <S2SV_EndBug> <S2SV_StartBug> declen = mutt_b64_decode ( out2 , out1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , sizeof ( out2 ) <S2SV_ModStart> , sizeof ( out2 ) "
1745,"<S2SV_StartBug> RANGE_CHECK ( cfg , g_timebase . num , 1 , cfg -> g_timebase . den ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK ( vp8_cfg , cq_level , 0 , 63 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> ts_target_bitrate [ i ] <= cfg -> ts_target_bitrate [ i - 1 ] ) <S2SV_EndBug> ","<S2SV_ModStart> 1000000000 <S2SV_ModEnd> <S2SV_ModStart> ) ; RANGE_CHECK_HI ( vp8_cfg , screen_content_mode , 2 <S2SV_ModStart> && cfg -> rc_target_bitrate > 0 "
1746,"<S2SV_StartBug> if ( test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) { <S2SV_EndBug> ",<S2SV_ModStart> key -> state != KEY_IS_UNINSTANTIATED <S2SV_ModEnd> 
1747,"<S2SV_StartBug> long mtemp , save_adjust , rem ; <S2SV_EndBug> <S2SV_StartBug> time_offset = div_long_long_rem_signed ( time_offset , <S2SV_EndBug> <S2SV_StartBug> NTP_INTERVAL_FREQ , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> div_s64 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1748,<S2SV_StartBug> temp = EXTRACT_32BITS ( bp ) ; <S2SV_EndBug> ,<S2SV_ModStart> ND_TCHECK_32BITS ( bp ) ; 
1749,<S2SV_StartBug> if ( ( '%' == in ) && ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( alloc > 2 ) && 
1750,<S2SV_StartBug> size_t length ; <S2SV_EndBug> <S2SV_StartBug> if ( segment -> dataOffset < 5 ) <S2SV_EndBug> <S2SV_StartBug> length = segment -> dataOffset * 4 - sizeof ( TcpHeader ) ; <S2SV_EndBug> <S2SV_StartBug> if ( option -> kind == TCP_OPTION_NOP ) <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> if ( ( i + 1 ) >= length || ( i + option -> length ) > length ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> ,<S2SV_ModStart> i ; size_t length <S2SV_ModEnd> <S2SV_ModStart> >= ( sizeof ( TcpHeader ) / 4 ) ) { length = ( <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> TCP_OPTION_END ) { break ; } else if ( option -> kind == <S2SV_ModStart> } else { <S2SV_ModEnd> <S2SV_ModStart> ) break ; if ( option -> length < sizeof ( TcpOption ) <S2SV_ModStart> } } 
1751,"<S2SV_StartBug> double vp9_convert_qindex_to_q ( int qindex ) { <S2SV_EndBug> <S2SV_StartBug> return vp9_ac_quant ( qindex , 0 ) / 4.0 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , vpx_bit_depth_t bit_depth ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : <S2SV_ModEnd> <S2SV_ModStart> , bit_depth <S2SV_ModStart> case VPX_BITS_10 : return vp9_ac_quant ( qindex , 0 , bit_depth ) / 16.0 ; case VPX_BITS_12 : return vp9_ac_quant ( qindex , 0 , bit_depth ) / 64.0 ; default : assert ( 0 && ""bit_depth<S2SV_blank>should<S2SV_blank>be<S2SV_blank>VPX_BITS_8,<S2SV_blank>VPX_BITS_10<S2SV_blank>or<S2SV_blank>VPX_BITS_12"" ) ; return - 1.0 ; } # else return vp9_ac_quant ( qindex , 0 , bit_depth ) / 4.0 ; # endif "
1752,<S2SV_StartBug> if ( byte [ i ] & 0x40 ) <S2SV_EndBug> ,<S2SV_ModStart> && i > 0 
1753,<S2SV_StartBug> if ( buf -> pts == AV_NOPTS_VALUE ) { <S2SV_EndBug> ,<S2SV_ModStart> || av_fifo_size ( s -> fifo ) <= 0 
1754,<S2SV_StartBug> parameters -> res_spec = parameters -> numresolution - 1 ; <S2SV_EndBug> <S2SV_StartBug> parameters -> prch_init [ i ] = 256 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( parameters -> numresolution == 1 ) { parameters -> res_spec = 1 ; parameters -> prcw_init [ 0 ] = 128 ; parameters -> prch_init [ 0 ] = 128 ; } else { <S2SV_ModStart> } 
1755,<S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> ,<S2SV_ModStart> ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> 
1756,<S2SV_StartBug> if ( ! n2size ) { <S2SV_EndBug> ,<S2SV_ModStart> n2size < 1 ) <S2SV_ModEnd> 
1757,<S2SV_StartBug> for ( i = 0 ; i < table_entries_used ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> nsv -> nsvs_file_offset [ i ] = avio_rl32 ( pb ) + size ; <S2SV_EndBug> ,<S2SV_ModStart> { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> } 
1758,<S2SV_StartBug> # undef _ <S2SV_EndBug> ,<S2SV_ModStart> _ ( NPPVpluginUrlRequestsDisplayedBool ) ; _ ( NPPVpluginWantsAllNetworkStreams ) ; _ ( NPPVpluginNativeAccessibleAtkPlugId ) ; _ ( NPPVpluginCancelSrcStream ) ; _ ( NPPVSupportsAdvancedKeyHandling ) ; 
1759,"<S2SV_StartBug> return udp_prot . getsockopt ( sk , level , optname , optval , optlen ) ; <S2SV_EndBug> ",<S2SV_ModStart> - EINVAL <S2SV_ModEnd> 
1760,<S2SV_StartBug> # ifdef HAVE_OPENSSL <S2SV_EndBug> ,<S2SV_ModStart> SSL_SET_OPTIONS ( & mysql ) ; <S2SV_ModEnd> 
1761,<S2SV_StartBug> if ( ! ( fhdr -> frag_off & htons ( 0xFFF9 ) ) ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1762,"<S2SV_StartBug> if ( enc624j600ReadReg ( interface , ENC624J600_REG_ECON1 ) & ECON1_TXRTS ) <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_EGPWRPT , ENC624J600_TX_BUFFER_START ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_ETXST , ENC624J600_TX_BUFFER_START ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_ETXLEN , length ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600ClearBit ( interface , ENC624J600_REG_EIR , EIR_TXIF | EIR_TXABTIF ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600SetBit ( interface , ENC624J600_REG_ECON1 , ECON1_TXRTS ) ; <S2SV_EndBug> ","<S2SV_ModStart> ENC624J600_ECON1 ) & ENC624J600_ECON1_TXRTS <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EGPWRPT <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ETXST <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ETXLEN <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EIR , ENC624J600_EIR_TXIF | ENC624J600_EIR_TXABTIF <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ECON1 , ENC624J600_ECON1_TXRTS <S2SV_ModEnd> "
1763,<S2SV_StartBug> native_handle_t * h = malloc ( <S2SV_EndBug> <S2SV_StartBug> sizeof ( native_handle_t ) + sizeof ( int ) * ( numFds + numInts ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( numFds < 0 || numInts < 0 || numFds > kMaxNativeFds || numInts > kMaxNativeInts ) { return NULL ; } size_t mallocSize = <S2SV_ModEnd> <S2SV_ModStart> ( <S2SV_ModStart> ) ; native_handle_t * h = malloc ( mallocSize 
1764,<S2SV_StartBug> { if ( psf -> headindex < SIGNED_SIZEOF ( psf -> header ) - 3 ) <S2SV_EndBug> <S2SV_StartBug> { psf -> header [ psf -> headindex ++ ] = ( x >> 16 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = x ; <S2SV_EndBug> <S2SV_StartBug> } ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> . ptr [ <S2SV_ModEnd> <S2SV_ModStart> . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1765,<S2SV_StartBug> ptr = p + 2 ; <S2SV_EndBug> ,<S2SV_ModStart> 3 <S2SV_ModEnd> 
1766,<S2SV_StartBug> if ( pmd_none_or_clear_bad ( pmd ) ) <S2SV_EndBug> ,<S2SV_ModStart> pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> 
1767,"<S2SV_StartBug> while ( impeg2d_bit_stream_nxt ( ps_stream , 1 ) == 1 ) <S2SV_EndBug> ",<S2SV_ModStart> && ps_stream -> u4_offset < ps_stream -> u4_max_offset 
1768,"<S2SV_StartBug> res = entry -> fn ( ctx -> priv -> alg_priv , ctrl_id , ap ) ; <S2SV_EndBug> ",<S2SV_ModStart> ( vpx_codec_alg_priv_t * ) <S2SV_ModStart>  <S2SV_ModEnd> 
1769,"<S2SV_StartBug> isoclns_print ( ndo , p , length , caplen ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1770,<S2SV_StartBug> * p == SSL3_MT_CLIENT_HELLO ) && <S2SV_EndBug> ,<S2SV_ModStart> s -> packet_length > DTLS1_RT_HEADER_LENGTH && s -> packet [ DTLS1_RT_HEADER_LENGTH ] <S2SV_ModEnd> 
1771,"<S2SV_StartBug> d = ast_for_call ( c , CHILD ( n , 3 ) , name_expr ) ; <S2SV_EndBug> ","<S2SV_ModStart> , true "
1772,<S2SV_StartBug> ue -> info = * info ; <S2SV_EndBug> ,<S2SV_ModStart> card = card ; ue -> 
1773,<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return num ; <S2SV_EndBug> ,<S2SV_ModStart> fpl -> user = NULL ; <S2SV_ModStart> if ( ! fpl -> user ) fpl -> user = get_uid ( current_user ( ) ) ; 
1774,"<S2SV_StartBug> u64 insn_bitness = ( BPF_CLASS ( insn -> code ) == BPF_ALU64 ) ? 64 : 32 ; <S2SV_EndBug> <S2SV_StartBug> coerce_reg_to_size ( & src_reg , 4 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( insn_bitness == 32 ) { coerce_reg_to_size ( dst_reg , 4 ) ; coerce_reg_to_size ( & src_reg , 4 ) ; } <S2SV_ModStart>  <S2SV_ModEnd> "
1775,"<S2SV_StartBug> error = copy_to_user ( buf , & socket_packet -> icmp_packet , <S2SV_EndBug> <S2SV_StartBug> socket_packet -> icmp_len ) ; <S2SV_EndBug> ","<S2SV_ModStart> packet_len = min ( count , socket_packet -> icmp_len ) ; <S2SV_ModStart> packet_len ) <S2SV_ModEnd> "
1776,"<S2SV_StartBug> READ ( data , msg . f . length ) <S2SV_EndBug> <S2SV_StartBug> if ( msg . f . length > sizeof ( data ) ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> HandleFence ( cl , flags , msg . f . length , data ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> SKIP ( msg . f . length ) } else { READ ( data , msg . f . length ) <S2SV_ModEnd> <S2SV_ModStart> } "
1777,<S2SV_StartBug> uint8 * tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; 
1778,<S2SV_StartBug> spin_lock_irq ( & tu -> qlock ) ; <S2SV_EndBug> <S2SV_StartBug> schedule ( ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & tu -> ioctl_lock ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & tu -> ioctl_lock ) ; <S2SV_EndBug> <S2SV_StartBug> return result > 0 ? result : err ; <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & tu -> ioctl_lock ) ; <S2SV_ModStart> mutex_unlock ( & tu -> ioctl_lock ) ; schedule ( ) ; mutex_lock ( & tu -> ioctl_lock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & tu -> ioctl_lock ) ; 
1779,<S2SV_StartBug> avail = vec -> iov_len - ( old - ( char * ) vec -> iov_base ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ( void * ) old > vec -> iov_base + vec -> iov_len ) return 0 ; 
1780,"<S2SV_StartBug> int mongo_env_write_socket ( mongo * conn , const void * buf , int len ) { <S2SV_EndBug> <S2SV_StartBug> int sent = send ( conn -> sock , cbuf , len , flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> 
1781,"<S2SV_StartBug> uint32_t qttag , qtsize32 , len ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , lastsize - 8 - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; size_t <S2SV_ModEnd> <S2SV_ModStart> LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1782,"<S2SV_StartBug> struct sk_buff * skb ; <S2SV_EndBug> <S2SV_StartBug> if ( dump_one_state ( x , 0 , & info ) ) { <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> ",<S2SV_ModStart> ; int err <S2SV_ModStart> err = <S2SV_ModEnd> <S2SV_ModStart> ; if ( err <S2SV_ModStart> ERR_PTR ( err ) <S2SV_ModEnd> 
1783,"<S2SV_StartBug> len = mutt_b64_decode ( obuf , idata -> buf + 2 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , sizeof ( obuf ) "
1784,<S2SV_StartBug> if ( ! ps_seq -> u1_frame_mbs_only_flag ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! ps_dec -> u1_first_slice_in_stream ) <S2SV_EndBug> ,"<S2SV_ModStart> ps_dec -> u1_first_slice_in_stream && ( ps_dec -> u4_first_slice_in_pic == 2 ) ) { pocstruct_t * ps_prev_poc = & ps_dec -> s_prev_pic_poc ; pocstruct_t * ps_cur_poc = & ps_dec -> s_cur_pic_poc ; ps_dec -> u2_mbx = 0xffff ; ps_dec -> u2_mby = 0 ; if ( ( 0 == u1_is_idr_slice ) && ps_cur_slice -> u1_nal_ref_idc ) ps_dec -> u2_prev_ref_frame_num = ps_cur_slice -> u2_frame_num ; if ( u1_is_idr_slice || ps_cur_slice -> u1_mmco_equalto5 ) ps_dec -> u2_prev_ref_frame_num = 0 ; if ( ps_dec -> ps_cur_sps -> u1_gaps_in_frame_num_value_allowed_flag ) { ih264d_decode_gaps_in_frame_num ( ps_dec , u2_frame_num ) ; } ps_prev_poc -> i4_prev_frame_num_ofst = ps_cur_poc -> i4_prev_frame_num_ofst ; ps_prev_poc -> u2_frame_num = ps_cur_poc -> u2_frame_num ; ps_prev_poc -> u1_mmco_equalto5 = ps_cur_slice -> u1_mmco_equalto5 ; if ( ps_cur_slice -> u1_nal_ref_idc ) { ps_prev_poc -> i4_pic_order_cnt_lsb = ps_cur_poc -> i4_pic_order_cnt_lsb ; ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; ps_prev_poc -> i4_delta_pic_order_cnt_bottom = ps_cur_poc -> i4_delta_pic_order_cnt_bottom ; ps_prev_poc -> i4_delta_pic_order_cnt [ 0 ] = ps_cur_poc -> i4_delta_pic_order_cnt [ 0 ] ; ps_prev_poc -> i4_delta_pic_order_cnt [ 1 ] = ps_cur_poc -> i4_delta_pic_order_cnt [ 1 ] ; ps_prev_poc -> u1_bot_field = ps_cur_poc -> u1_bot_field ; } ps_dec -> u2_total_mbs_coded = 0 ; } if ( ! <S2SV_ModStart> if ( i1_is_end_of_poc ) { ps_dec -> u1_first_slice_in_stream = 0 ; return ERROR_INCOMPLETE_FRAME ; } <S2SV_ModStart>  <S2SV_ModEnd> "
1785,<S2SV_StartBug> int vm_shared = dst_vma -> vm_flags & VM_SHARED ; <S2SV_EndBug> <S2SV_StartBug> if ( vm_shared ) { <S2SV_EndBug> <S2SV_StartBug> struct address_space * mapping = dst_vma -> vm_file -> f_mapping ; <S2SV_EndBug> <S2SV_StartBug> spin_lock ( ptl ) ; <S2SV_EndBug> ,"<S2SV_ModStart> struct address_space * mapping ; pgoff_t idx ; unsigned long size ; <S2SV_ModStart> mapping = dst_vma -> vm_file -> f_mapping ; idx = vma_hugecache_offset ( h , dst_vma , dst_addr ) ; <S2SV_ModStart> size = i_size_read ( mapping -> host ) >> huge_page_shift ( h ) ; ret = - EFAULT ; if ( idx >= size ) goto out_release_nounlock <S2SV_ModEnd> <S2SV_ModStart> ; size = i_size_read ( mapping -> host ) >> huge_page_shift ( h ) ; ret = - EFAULT ; if ( idx >= size ) goto out_release_unlock "
1786,"<S2SV_StartBug> char query [ 1024 ] , * end ; <S2SV_EndBug> <S2SV_StartBug> end = strxmov ( query , ""show<S2SV_blank>table<S2SV_blank>status<S2SV_blank>from<S2SV_blank>`"" , db , ""`"" , NullS ) ; <S2SV_EndBug> <S2SV_StartBug> if ( wild && wild [ 0 ] ) <S2SV_EndBug> ","<S2SV_ModStart> NAME_LEN + 100 ] ; int len <S2SV_ModEnd> <S2SV_ModStart> len = sizeof ( query ) ; len -= my_snprintf ( query , len , ""show<S2SV_blank>table<S2SV_blank>status<S2SV_blank>from<S2SV_blank>`%s`"" , db <S2SV_ModEnd> <S2SV_ModStart> && len ) strxnmov ( query + strlen ( query ) , len <S2SV_ModEnd> "
1787,<S2SV_StartBug> bestmv -> as_mv . row <<= 3 ; <S2SV_EndBug> <S2SV_StartBug> bestmv -> as_mv . col <<= 3 ; <S2SV_EndBug> ,<S2SV_ModStart> *= 8 <S2SV_ModEnd> <S2SV_ModStart> *= 8 <S2SV_ModEnd> 
1788,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug> ",<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : <S2SV_ModStart>  <S2SV_ModEnd> 
1789,"<S2SV_StartBug> error = scsi_nonblockable_ioctl ( sdp , cmd , p , <S2SV_EndBug> ","<S2SV_ModStart> scsi_verify_blk_ioctl ( bdev , cmd ) ; if ( error < 0 ) return error ; error = "
1790,"<S2SV_StartBug> if ( ! ISOFS_SB ( inode -> i_sb ) -> s_rock ) <S2SV_EndBug> <S2SV_StartBug> if ( ( strlen ( retname ) + rr -> len - 5 ) >= 254 ) { <S2SV_EndBug> <S2SV_StartBug> strncat ( retname , rr -> u . NM . name , rr -> len - 5 ) ; <S2SV_EndBug> <S2SV_StartBug> retnamlen += rr -> len - 5 ; <S2SV_EndBug> ","<S2SV_ModStart> char * p ; int len ; <S2SV_ModStart> len = <S2SV_ModEnd> <S2SV_ModStart> ; if ( retnamlen + len <S2SV_ModEnd> <S2SV_ModStart> p = memchr ( rr -> u . NM . name , '\\0' , len ) ; if ( unlikely ( p ) ) len = p - rr -> u . NM . name ; memcpy ( retname + retnamlen <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> len ; retname [ retnamlen ] = '\\0' <S2SV_ModEnd> "
1791,"<S2SV_StartBug> VpxVideoWriter * writer = NULL ; <S2SV_EndBug> <S2SV_StartBug> vpx_fixed_buf_t stats = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> const VpxInterface * encoder = NULL ; <S2SV_EndBug> <S2SV_StartBug> info . codec_fourcc = encoder -> fourcc ; <S2SV_EndBug> <S2SV_StartBug> info . frame_height = strtol ( height_arg , NULL , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( info . frame_width <= 0 || <S2SV_EndBug> <S2SV_StartBug> info . frame_height <= 0 || <S2SV_EndBug> <S2SV_StartBug> ( info . frame_width % 2 ) != 0 || <S2SV_EndBug> <S2SV_StartBug> ( info . frame_height % 2 ) != 0 ) { <S2SV_EndBug> <S2SV_StartBug> die ( ""Invalid<S2SV_blank>frame<S2SV_blank>size:<S2SV_blank>%dx%d"" , info . frame_width , info . frame_height ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vpx_img_alloc ( & raw , VPX_IMG_FMT_I420 , info . frame_width , <S2SV_EndBug> <S2SV_StartBug> info . frame_height , 1 ) ) { <S2SV_EndBug> <S2SV_StartBug> die ( ""Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>image"" , info . frame_width , info . frame_height ) ; <S2SV_EndBug> <S2SV_StartBug> while ( vpx_img_read ( & raw , infile ) ) { <S2SV_EndBug> <S2SV_StartBug> fclose ( infile ) ; <S2SV_EndBug> ","<S2SV_ModStart> int w , h <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> w <S2SV_ModEnd> <S2SV_ModStart> h <S2SV_ModEnd> <S2SV_ModStart> w <S2SV_ModEnd> <S2SV_ModStart> h <S2SV_ModEnd> <S2SV_ModStart> ( w <S2SV_ModEnd> <S2SV_ModStart> ( h <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> w , h ) ; <S2SV_ModEnd> <S2SV_ModStart> w , h <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> w , h ) ; printf ( ""Using<S2SV_blank>%s\\n"" , vpx_codec_iface_name ( encoder -> codec_interface ( ) ) ) ; res = vpx_codec_enc_config_default ( encoder -> codec_interface ( ) , & cfg , 0 ) ; if ( res ) die_codec ( & codec , ""Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>default<S2SV_blank>codec<S2SV_blank>config."" ) ; cfg . g_w = w ; cfg . g_h = h ; cfg . g_timebase . num = 1 ; cfg . g_timebase . den = fps ; cfg . rc_target_bitrate = bitrate ; if ( ! ( infile = fopen ( infile_arg , ""rb"" ) ) ) die ( ""Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>reading"" , infile_arg ) ; cfg . g_pass = VPX_RC_FIRST_PASS ; stats = pass0 ( & raw , infile , encoder , & cfg ) ; rewind ( infile ) ; cfg . g_pass = VPX_RC_LAST_PASS ; cfg . rc_twopass_stats_in = stats ; pass1 ( & raw , infile , outfile_arg , encoder , & cfg ) ; free ( stats . buf ) ; vpx_img_free <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1792,<S2SV_StartBug> if ( c -> string ) <S2SV_EndBug> ,<S2SV_ModStart> ! ( c -> type & cJSON_StringIsConst ) && 
1793,<S2SV_StartBug> void vp9_inc_frame_in_layer ( SVC * svc ) { <S2SV_EndBug> <S2SV_StartBug> LAYER_CONTEXT * const lc = ( svc -> number_temporal_layers > 1 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> VP9_COMP * const cpi <S2SV_ModEnd> <S2SV_ModStart> & cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id * cpi -> svc . number_temporal_layers <S2SV_ModEnd> <S2SV_ModStart> ++ lc -> frames_from_key_frame ; 
1794,<S2SV_StartBug> if ( ! fs_searchpaths ) <S2SV_EndBug> <S2SV_StartBug> for ( search = fs_searchpaths ; search ; search = search -> next ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> qboolean isLocalConfig ; <S2SV_ModStart> isLocalConfig = ! strcmp ( filename , ""autoexec.cfg"" ) || ! strcmp ( filename , Q3CONFIG_CFG ) ; <S2SV_ModStart> if ( isLocalConfig && search -> pack ) continue ; "
1795,"<S2SV_StartBug> long rem ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & rem ) ; <S2SV_EndBug> ",<S2SV_ModStart> u32 <S2SV_ModEnd> <S2SV_ModStart> div_u64_rem <S2SV_ModEnd> 
1796,<S2SV_StartBug> tunnel_type = * ( tptr + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> tlen = len ; <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK2 ( tptr [ 0 ] , 5 ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
1797,<S2SV_StartBug> ExitLoop : <S2SV_EndBug> ,<S2SV_ModStart> quantum_info = DestroyQuantumInfo ( quantum_info ) ; 
1798,<S2SV_StartBug> while ( peek ( s ) != '>' && ! eol ( s ) ) <S2SV_EndBug> ,<S2SV_ModStart> && ! eof ( s ) 
1799,"<S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_EUDAST , 0x1234 ) ; <S2SV_EndBug> <S2SV_StartBug> } while ( enc624j600ReadReg ( interface , ENC624J600_REG_EUDAST ) != 0x1234 ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( enc624j600ReadReg ( interface , ENC624J600_REG_ESTAT ) & ESTAT_CLKRDY ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> enc624j600SetBit ( interface , ENC624J600_REG_ECON2 , ECON2_ETHRST ) ; <S2SV_EndBug> <S2SV_StartBug> if ( enc624j600ReadReg ( interface , ENC624J600_REG_EUDAST ) != 0x0000 ) <S2SV_EndBug> ","<S2SV_ModStart> ENC624J600_EUDAST <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EUDAST <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ESTAT ) & ENC624J600_ESTAT_CLKRDY <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_ECON2 , ENC624J600_ECON2_ETHRST <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_EUDAST <S2SV_ModEnd> "
1800,"<S2SV_StartBug> if ( ! ND_TTEST2 ( * ( p + offset ) , ssid . length ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ND_TTEST2 ( * ( p + offset ) , challenge . length ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ND_TTEST2 ( * ( p + offset ) , rates . length ) ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( tim . bitmap , p + offset + 3 , tim . length - 3 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1801,<S2SV_StartBug> size_t e ; <S2SV_EndBug> <S2SV_StartBug> if ( mrb_basic_ptr ( v ) -> tt == MRB_TT_FREE ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ; mrb_value nil <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> e = c -> stend - c -> stbase ; nil = mrb_nil_value ( ) ; for ( ; i < e ; i ++ ) { c -> stbase [ i ] = nil ; 
1802,<S2SV_StartBug> if ( client -> ipc == NULL ) { <S2SV_EndBug> ,<S2SV_ModStart> && client -> session == NULL 
1803,"<S2SV_StartBug> sk_wait_data ( sk , & timeo , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! skb_queue_empty ( & sk -> sk_receive_queue ) ) break ; 
1804,"<S2SV_StartBug> ""Unknown<S2SV_blank>Transfer-Encoding:<S2SV_blank>%s;"" <S2SV_EndBug> <S2SV_StartBug> return APR_ENOSPC ; <S2SV_EndBug> <S2SV_StartBug> if ( rv != APR_SUCCESS ) { <S2SV_EndBug> <S2SV_StartBug> case BODY_CHUNK_END : { <S2SV_EndBug> <S2SV_StartBug> int merge_trailers = <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ","<S2SV_ModStart> ""Unknown<S2SV_blank>Transfer-Encoding:<S2SV_blank>%s;<S2SV_blank>"" ""using<S2SV_blank>read-until-close"" <S2SV_ModEnd> <S2SV_ModStart> APR_EINVAL <S2SV_ModEnd> <S2SV_ModStart> apr_brigade_cleanup ( bb ) ; <S2SV_ModStart> BODY_CHUNK_LF : case BODY_CHUNK_END : case BODY_CHUNK_END_LF <S2SV_ModEnd> <S2SV_ModStart> return read_chunked_trailers ( ctx , f , b , conf -> merge_trailers == AP_MERGE_TRAILERS_ENABLE <S2SV_ModEnd> <S2SV_ModStart> ap_log_rerror ( APLOG_MARK , APLOG_ERR , 0 , f -> r , APLOGNO ( 02901 ) ""Unexpected<S2SV_blank>body<S2SV_blank>state<S2SV_blank>(%i)"" , ( int ) ctx -> state ) ; return APR_EGENERAL <S2SV_ModEnd> "
1805,"<S2SV_StartBug> if ( ! ND_TTEST2 ( cp , len ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1806,<S2SV_StartBug> struct ipv6_txoptions * opt = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! opt ) <S2SV_EndBug> <S2SV_StartBug> fl6_sock_release ( flowlabel ) ; <S2SV_EndBug> ,<S2SV_ModStart> = NULL ; struct ipv6_txoptions * opt_to_free <S2SV_ModStart> { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> <S2SV_ModStart> ) ; txopt_put ( opt_to_free 
1807,"<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> ret = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; ret = posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( ret ) return ret <S2SV_ModEnd> "
1808,"<S2SV_StartBug> NUMA * na ; <S2SV_EndBug> <S2SV_StartBug> pixt = pixCopy ( NULL , pix ) ; <S2SV_EndBug> <S2SV_StartBug> for ( j = goodcol - 1 ; j >= 0 ; j -- ) { <S2SV_EndBug> <S2SV_StartBug> pixRasterop ( pix , j , 0 , 1 , h , PIX_SRC , pixt , j + 1 , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> pixRasterop ( pixt , j , 0 , 1 , h , PIX_SRC , pix , j , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> pixRasterop ( pix , j , 0 , 1 , h , PIX_SRC , pixt , j - 1 , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> pixRasterop ( pixt , j , 0 , 1 , h , PIX_SRC , pix , j , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pix <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pix <S2SV_ModEnd> <S2SV_ModStart> } } <S2SV_ModEnd> 
1809,<S2SV_StartBug> u16 source_node_id ; <S2SV_EndBug> <S2SV_StartBug> specifier_id = ( be32_to_cpu ( buf_ptr [ 0 ] ) & 0xffff ) << 8 <S2SV_EndBug> <S2SV_StartBug> ( ver == RFC2734_SW_VERSION <S2SV_EndBug> <S2SV_StartBug> || ver == RFC3146_SW_VERSION <S2SV_EndBug> <S2SV_StartBug> ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( length > IEEE1394_GASP_HDR_SIZE && gasp_specifier_id ( buf_ptr ) <S2SV_ModEnd> <S2SV_ModStart> gasp_version ( buf_ptr ) <S2SV_ModEnd> <S2SV_ModStart> gasp_version ( buf_ptr ) <S2SV_ModEnd> <S2SV_ModStart> fwnet_incoming_packet ( dev , buf_ptr + 2 , length - IEEE1394_GASP_HDR_SIZE , gasp_source_id ( buf_ptr ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1810,<S2SV_StartBug> sin -> sin_family = AF_INET ; <S2SV_EndBug> <S2SV_StartBug> if ( isk -> cmsg_flags ) <S2SV_EndBug> <S2SV_StartBug> sin6 -> sin6_family = AF_INET6 ; <S2SV_EndBug> <S2SV_StartBug> * addr_len = sizeof ( * sin6 ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( sin ) { <S2SV_ModStart> } <S2SV_ModStart> if ( sin6 ) { <S2SV_ModStart> } 
1811,<S2SV_StartBug> down_write ( & mm -> mmap_sem ) ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & mm -> mmap_sem ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! mmget_still_valid ( mm ) ) goto skip_mm <S2SV_ModStart> skip_mm : 
1812,<S2SV_StartBug> guint uint_val = GST_READ_UINT32_LE ( value ) ; <S2SV_EndBug> <S2SV_StartBug> gboolean bool_val = GST_READ_UINT32_LE ( value ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( value_len < 4 ) break ; uint_val <S2SV_ModStart> ; if ( value_len < 4 ) break ; bool_val 
1813,<S2SV_StartBug> kk = malloc ( xsize * kmax * sizeof ( float ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! kk ) <S2SV_EndBug> ,<S2SV_ModStart> if ( kmax > 0 && xsize > SIZE_MAX / kmax ) return ( Imaging ) ImagingError_MemoryError ( ) ; if ( xsize * kmax > SIZE_MAX / sizeof ( float ) ) return ( Imaging ) ImagingError_MemoryError ( ) ; <S2SV_ModStart> ) return ( Imaging ) ImagingError_MemoryError ( ) ; if ( xsize > SIZE_MAX / ( 2 * sizeof ( int ) ) 
1814,<S2SV_StartBug> countersize = COUNTER_OFFSET ( tmp . nentries ) * nr_cpu_ids ; <S2SV_EndBug> ,<S2SV_ModStart> tmp . name [ sizeof ( tmp . name ) - 1 ] = 0 ; 
1815,"<S2SV_StartBug> struct timespec ts ; <S2SV_EndBug> <S2SV_StartBug> ts . tv_sec = div_long_long_rem_signed ( nsec , NSEC_PER_SEC , & ts . tv_nsec ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( nsec < 0 ) ) <S2SV_EndBug> <S2SV_StartBug> set_normalized_timespec ( & ts , ts . tv_sec , ts . tv_nsec ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; s32 rem <S2SV_ModStart> div_s64_rem <S2SV_ModEnd> <S2SV_ModStart> rem <S2SV_ModEnd> <S2SV_ModStart> rem <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModEnd> <S2SV_ModStart> -- ; rem += NSEC_PER_SEC ; } <S2SV_ModEnd> <S2SV_ModStart> = rem <S2SV_ModEnd> 
1816,<S2SV_StartBug> buffer = malloc ( msg . tc . length + 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( msg . tc . length > MAX_TEXTCHAT_SIZE ) return FALSE ; 
1817,"<S2SV_StartBug> rb_define_singleton_method ( klass , ""read_memory"" , read_memory , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> rb_define_singleton_method ( klass , ""from_document"" , from_document , 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> - <S2SV_ModStart> - 
1818,<S2SV_StartBug> static void nsc_encode_subsampling ( NSC_CONTEXT * context ) <S2SV_EndBug> <S2SV_StartBug> BYTE * co_dst ; <S2SV_EndBug> <S2SV_StartBug> UINT32 tempHeight ; <S2SV_EndBug> <S2SV_StartBug> for ( y = 0 ; y < tempHeight >> 1 ; y ++ ) <S2SV_EndBug> <S2SV_StartBug> co_dst = context -> priv -> PlaneBuffers [ 1 ] + y * ( tempWidth >> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> cg_dst = context -> priv -> PlaneBuffers [ 2 ] + y * ( tempWidth >> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> co_src0 = ( INT8 * ) context -> priv -> PlaneBuffers [ 1 ] + ( y << 1 ) * tempWidth ; <S2SV_EndBug> <S2SV_StartBug> co_src1 = co_src0 + tempWidth ; <S2SV_EndBug> <S2SV_StartBug> cg_src0 = ( INT8 * ) context -> priv -> PlaneBuffers [ 2 ] + ( y << 1 ) * tempWidth ; <S2SV_EndBug> <S2SV_StartBug> cg_src1 = cg_src0 + tempWidth ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! context ) return FALSE <S2SV_ModStart> if ( tempHeight == 0 ) return FALSE ; if ( tempWidth > context -> priv -> PlaneBuffersLength / tempHeight ) return FALSE ; <S2SV_ModStart> BYTE * <S2SV_ModStart> BYTE * <S2SV_ModStart> const INT8 * <S2SV_ModStart> const INT8 * <S2SV_ModStart> const INT8 * <S2SV_ModStart> const INT8 * <S2SV_ModStart> return TRUE ; 
1819,<S2SV_StartBug> int iSrc ; <S2SV_EndBug> <S2SV_StartBug> for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { <S2SV_EndBug> <S2SV_StartBug> dTotalWeight += ( res -> ContribRow [ u ] . Weights [ iSrc - iLeft ] = scale_f_d * ( * pFilter ) ( scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> Left = iLeft ; res -> ContribRow [ u ] . Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ] . 
1820,<S2SV_StartBug> if ( hrtimer_cancel ( timer ) ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & pit -> pit_state . lock ) ; <S2SV_ModStart> mutex_unlock ( & pit -> pit_state . lock ) ; 
1821,"<S2SV_StartBug> FILE * file = NULL ; <S2SV_EndBug> <S2SV_StartBug> md5_context_t ctx ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , STRLEN , ""%lu%d%lu"" , ( unsigned long ) Time_now ( ) , getpid ( ) , random ( ) ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( file , ""%s"" , Run . id ) ; <S2SV_EndBug> ",<S2SV_ModStart> ASSERT ( idfile ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> Util_getToken ( Run . id ) <S2SV_ModEnd> 
1822,<S2SV_StartBug> aptr += RRFIXEDSZ ; <S2SV_EndBug> ,<S2SV_ModStart> if ( aptr + rr_len > abuf + alen ) { free ( rr_name ) ; status = ARES_EBADRESP ; break ; } 
1823,"<S2SV_StartBug> hdr . w0 = be32_to_cpu ( buf [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> hdr . w1 = ntohl ( buf [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( len <= RFC2374_UNFRAG_HDR_SIZE ) return 0 ; <S2SV_ModStart> if ( len <= RFC2374_FRAG_HDR_SIZE ) return 0 ; <S2SV_ModStart> if ( fg_off + len > dg_size ) return 0 ; 
1824,<S2SV_StartBug> return KADM5_BAD_MASK ; <S2SV_EndBug> ,<S2SV_ModStart> if ( mask & KADM5_TL_DATA ) { for ( tl_data_tail = entry -> tl_data ; tl_data_tail != NULL ; tl_data_tail = tl_data_tail -> tl_data_next ) { if ( tl_data_tail -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; } } 
1825,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug> ",<S2SV_ModStart> int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> rc = <S2SV_ModStart> rc <S2SV_ModEnd> 
1826,<S2SV_StartBug> if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt . mnt_flags & MNT_READONLY ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( flag & CL_UNPRIVILEGED ) && list_empty ( & old -> mnt_expire ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { mnt -> mnt . mnt_flags |= MNT_LOCK_ATIME ; if <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mnt -> mnt . mnt_flags & MNT_NODEV ) mnt -> mnt . mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt . mnt_flags & MNT_NOSUID ) mnt -> mnt . mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt . mnt_flags & MNT_NOEXEC ) mnt -> mnt . mnt_flags |= MNT_LOCK_NOEXEC ; } if ( 
1827,"<S2SV_StartBug> if ( fwrite ( s -> s , 1 , s -> n , f ) != s -> n || fflush ( f ) != 0 ) { <S2SV_EndBug> ",<S2SV_ModStart> s && ( <S2SV_ModStart> ) 
1828,"<S2SV_StartBug> if ( ( psf = calloc ( 1 , sizeof ( SF_PRIVATE ) ) ) == NULL ) <S2SV_EndBug> ",<S2SV_ModStart> psf_allocate ( <S2SV_ModEnd> 
1829,"<S2SV_StartBug> box -> len = len ; <S2SV_EndBug> <S2SV_StartBug> jas_eprintf ( ""cannot<S2SV_blank>copy<S2SV_blank>box<S2SV_blank>data\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; JAS_DBGLOG ( 10 , ( ""preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%d\\n"" , \'""\' , boxinfo -> name , \'""\' , box -> type , box -> len ) ) <S2SV_ModStart> box -> ops = & jp2_boxinfo_unk . ops ; "
1830,"<S2SV_StartBug> count = yr_max ( 64 , ( index + 1 ) * 2 ) ; <S2SV_EndBug> <S2SV_StartBug> array -> items = ( YR_ARRAY_ITEMS * ) yr_realloc ( <S2SV_EndBug> ",<S2SV_ModStart> 64 ; while ( count <= index ) count *= 2 <S2SV_ModEnd> <S2SV_ModStart> while ( count <= index ) count *= 2 ; 
1831,<S2SV_StartBug> if ( EXTRACT_32BITS ( tptr + BGP_VPN_RD_LEN ) == 0x47000601 ) <S2SV_EndBug> <S2SV_StartBug> else if ( EXTRACT_24BITS ( tptr + BGP_VPN_RD_LEN ) == 0x350000 ) <S2SV_EndBug> ,<S2SV_ModStart> tlen == BGP_VPN_RD_LEN + 4 + sizeof ( struct in_addr ) && <S2SV_ModStart> tlen == BGP_VPN_RD_LEN + 3 + sizeof ( struct in6_addr ) && 
1832,"<S2SV_StartBug> ND_TCHECK2 ( dp [ 0 ] , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1833,"<S2SV_StartBug> num_pages = get_user_pages_fast ( base , size , 0 , & page [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( num_pages != size ) || <S2SV_EndBug> ",<S2SV_ModStart> if ( i + size > MAX_SKB_FRAGS ) return - EMSGSIZE ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1834,"<S2SV_StartBug> buffer_copy_buffer ( con -> physical . basedir , ds -> value ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( uri_ptr [ alias_len ] == '.' ) { char * s = uri_ptr + alias_len + 1 ; if ( * s == '.' ) ++ s ; if ( * s == '/' || * s == '\\0' ) { size_t vlen = buffer_string_length ( ds -> value ) ; if ( 0 != alias_len && ds -> key -> ptr [ alias_len - 1 ] != '/' && 0 != vlen && ds -> value -> ptr [ vlen - 1 ] == '/' ) { con -> http_status = 403 ; return HANDLER_FINISHED ; } } } 
1835,"<S2SV_StartBug> size_t buf_size = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( iov , iovcnt , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> OE_RAISE_ERRNO ( OE_ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ","<S2SV_ModStart> = 0 ; size_t data_size <S2SV_ModStart> , & data_size <S2SV_ModStart> ) ; if ( data_size > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> if ( ret > ( ssize_t ) data_size ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } "
1836,<S2SV_StartBug> kfree ( init_name ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( rv && new_smi -> io . io_cleanup ) { new_smi -> io . io_cleanup ( & new_smi -> io ) ; new_smi -> io . io_cleanup = NULL ; } 
1837,<S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart> if ( strlen ( password ) > MAX_PASSWORD_LEN ) return 0 ; 
1838,<S2SV_StartBug> len = args -> len = ntohl ( * p ++ ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ( void * ) p > head -> iov_base + head -> iov_len ) return 0 
1839,<S2SV_StartBug> if ( ! ( info = bmp_getinfo ( in ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> JAS_DBGLOG ( 1 , ( ""BMP<S2SV_blank>header:<S2SV_blank>magic<S2SV_blank>0x%x;<S2SV_blank>siz<S2SV_blank>%d;<S2SV_blank>res1<S2SV_blank>%d;<S2SV_blank>res2<S2SV_blank>%d;<S2SV_blank>off<S2SV_blank>%d\\n"" , hdr . magic , hdr . siz , hdr . reserved1 , hdr . reserved2 , hdr . off ) ) ; <S2SV_ModStart> JAS_DBGLOG ( 1 , ( ""BMP<S2SV_blank>information:<S2SV_blank>len<S2SV_blank>%d;<S2SV_blank>width<S2SV_blank>%d;<S2SV_blank>height<S2SV_blank>%d;<S2SV_blank>numplanes<S2SV_blank>%d;<S2SV_blank>"" ""depth<S2SV_blank>%d;<S2SV_blank>enctype<S2SV_blank>%d;<S2SV_blank>siz<S2SV_blank>%d;<S2SV_blank>hres<S2SV_blank>%d;<S2SV_blank>vres<S2SV_blank>%d;<S2SV_blank>numcolors<S2SV_blank>%d;<S2SV_blank>"" ""mincolors<S2SV_blank>%d\\n"" , info -> len , info -> width , info -> height , info -> numplanes , info -> depth , info -> enctype , info -> siz , info -> hres , info -> vres , info -> numcolors , info -> mincolors ) ) ; "
1840,"<S2SV_StartBug> ip_printts ( ndo , cp , option_len ) ; <S2SV_EndBug> <S2SV_StartBug> case IPOPT_RA : <S2SV_EndBug> ","<S2SV_ModStart> if ( ip_printts <S2SV_ModEnd> <S2SV_ModStart> IPOPT_RR : case IPOPT_SSRR : case IPOPT_LSRR : if ( ip_printroute ( ndo , cp , option_len ) == - 1 ) goto trunc ; break ; case "
1841,<S2SV_StartBug> numSamples = pWTIntFrame -> numSamples ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( numSamples <= 0 ) { ALOGE ( ""b/26366256"" ) ; return ; } "
1842,"<S2SV_StartBug> u32 hash , id ; <S2SV_EndBug> <S2SV_StartBug> net_get_random_once ( & ip_idents_hashrnd , sizeof ( ip_idents_hashrnd ) ) ; <S2SV_EndBug> <S2SV_StartBug> iph -> protocol , <S2SV_EndBug> ","<S2SV_ModStart> static u32 ip_idents_hashrnd_extra __read_mostly ; <S2SV_ModStart> ) ) ; net_get_random_once ( & ip_idents_hashrnd_extra , sizeof ( ip_idents_hashrnd_extra <S2SV_ModStart> ^ ip_idents_hashrnd_extra "
1843,"<S2SV_StartBug> strncpy ( extra_response -> key , key , strlen ( key ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> strlen ( NOTUNDERSTOOD ) + 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> strlcpy <S2SV_ModEnd> <S2SV_ModStart> sizeof ( extra_response -> key ) ) ; strlcpy <S2SV_ModEnd> <S2SV_ModStart> sizeof ( extra_response -> value ) <S2SV_ModEnd> 
1844,"<S2SV_StartBug> static int override_release ( char __user * release , int len ) <S2SV_EndBug> <S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> char * rest = UTS_RELEASE ; <S2SV_EndBug> <S2SV_StartBug> unsigned v ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , len , ""2.6.%u%s"" , v , rest ) ; <S2SV_EndBug> <S2SV_StartBug> ret = copy_to_user ( release , buf , len ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> ; char buf [ 65 ] = { 0 } <S2SV_ModStart> ; size_t copy <S2SV_ModStart> copy = min ( sizeof ( buf ) , max_t ( size_t , 1 , len ) ) ; copy = scnprintf <S2SV_ModEnd> <S2SV_ModStart> copy <S2SV_ModEnd> <S2SV_ModStart> copy + 1 <S2SV_ModEnd> "
1845,<S2SV_StartBug> if ( stringset == ETH_SS_STATS ) <S2SV_EndBug> ,<S2SV_ModStart> || stringset == ETH_SS_PRIV_FLAGS 
1846,"<S2SV_StartBug> struct rdcost_block_args args = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> args . use_fast_coef_costing = use_fast_coef_casting ; <S2SV_EndBug> <S2SV_StartBug> if ( args . skip ) { <S2SV_EndBug> <S2SV_StartBug> * skippable = vp9_is_skippable_in_plane ( x , bsize , plane ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; vp9_zero ( args ) <S2SV_ModEnd> <S2SV_ModStart> ; args . skippable = 1 <S2SV_ModStart> exit_early <S2SV_ModEnd> <S2SV_ModStart> args . skippable <S2SV_ModEnd> 
1847,"<S2SV_StartBug> len = strlen ( ""/lock/lxc/"" ) + strlen ( n ) + strlen ( p ) + 3 ; <S2SV_EndBug> <S2SV_StartBug> ret = snprintf ( dest , len , ""%s/lock/lxc/%s"" , rundir , p ) ; <S2SV_EndBug> <S2SV_StartBug> int l2 = 22 + strlen ( n ) + strlen ( p ) ; <S2SV_EndBug> <S2SV_StartBug> free ( rundir ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""/lxc/lock/"" <S2SV_ModEnd> <S2SV_ModStart> ""%s/lxc/lock/%s"" <S2SV_ModEnd> <S2SV_ModStart> free ( dest ) ; free ( rundir ) ; return NULL ; } ret = snprintf ( dest , len , ""%s/lxc/lock/%s/.%s"" , rundir , p , n ) ; free ( rundir <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1848,<S2SV_StartBug> struct flowi6 * fl6 = & inet -> cork . fl . u . ip6 ; <S2SV_EndBug> <S2SV_StartBug> int err = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> fl6 ; int err = 0 ; int is_udplite = IS_UDPLITE ( sk ) ; __wsum csum = 0 ; if ( up -> pending == AF_INET ) return udp_push_pending_frames ( sk ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
1849,<S2SV_StartBug> endpoint = & intf -> altsetting [ 0 ] . endpoint [ 0 ] . desc ; <S2SV_EndBug> <S2SV_StartBug> goto fail3 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( intf -> altsetting [ 0 ] . desc . bNumEndpoints < 1 ) { dev_err ( & intf -> dev , ""interface<S2SV_blank>has<S2SV_blank>%d<S2SV_blank>endpoints,<S2SV_blank>but<S2SV_blank>must<S2SV_blank>have<S2SV_blank>minimum<S2SV_blank>1\\n"" , intf -> altsetting [ 0 ] . desc . bNumEndpoints ) ; err = - EINVAL ; goto fail3 ; } <S2SV_ModStart> err = - EINVAL ; "
1850,"<S2SV_StartBug> GF_BitStream * mybs = gf_bs_new ( data + i , size - i , GF_BITSTREAM_READ ) ; <S2SV_EndBug> <S2SV_StartBug> gf_isom_box_del ( ( GF_Box * ) ptr -> esd ) ; <S2SV_EndBug> ",<S2SV_ModStart> extern Bool use_dump_mode ; <S2SV_ModStart> if ( ! use_dump_mode ) 
1851,<S2SV_StartBug> if ( * pStackPtr >= CDL_STACK_SIZE ) <S2SV_EndBug> <S2SV_StartBug> return EAS_ERROR_FILE_FORMAT ; <S2SV_EndBug> ,"<S2SV_ModStart> ( CDL_STACK_SIZE - 1 ) ) { ALOGE ( ""b/34031018,<S2SV_blank>stackPtr(%d)"" , * pStackPtr ) ; android_errorWriteLog ( 0x534e4554 , ""34031018"" ) ; <S2SV_ModEnd> <S2SV_ModStart> } "
1852,"<S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug> ","<S2SV_ModStart> , XEN_NETIF_RSP_OKAY "
1853,"<S2SV_StartBug> } else if ( ! av_strcasecmp ( tag , ""Content-Length"" ) && s -> filesize == - 1 ) { <S2SV_EndBug> <S2SV_StartBug> s -> filesize = strtoll ( p , NULL , 10 ) ; <S2SV_EndBug> <S2SV_StartBug> s -> filesize = - 1 ; <S2SV_EndBug> <S2SV_StartBug> ff_http_auth_handle_header ( & s -> auth_state , tag , p ) ; <S2SV_EndBug> <S2SV_StartBug> s -> icy_metaint = strtoll ( p , NULL , 10 ) ; <S2SV_EndBug> ","<S2SV_ModStart> UINT64_MAX <S2SV_ModEnd> <S2SV_ModStart> strtoull <S2SV_ModEnd> <S2SV_ModStart> UINT64_MAX ; s -> chunksize = 0 ; } else if ( ! av_strcasecmp ( tag , ""WWW-Authenticate"" ) ) { ff_http_auth_handle_header ( & s -> auth_state , tag , p ) ; } else if ( ! av_strcasecmp ( tag , ""Authentication-Info"" ) ) { ff_http_auth_handle_header ( & s -> auth_state , tag , p ) ; } else if ( ! av_strcasecmp ( tag , ""Proxy-Authenticate"" ) ) { ff_http_auth_handle_header ( & s -> proxy_auth_state , tag , p ) ; } else if ( ! av_strcasecmp ( tag , ""Connection"" ) ) { if ( ! strcmp ( p , ""close"" ) ) s -> willclose = 1 ; } else if ( ! av_strcasecmp ( tag , ""Server"" ) ) { if ( ! av_strcasecmp ( p , ""AkamaiGHost"" ) ) { s -> is_akamai = 1 ; } else if ( ! av_strncasecmp ( p , ""MediaGateway"" , 12 ) ) { s -> is_mediagateway = 1 ; } } else if ( ! av_strcasecmp ( tag , ""Content-Type"" ) ) { av_free ( s -> mime_type ) ; s -> mime_type = av_strdup ( p ) ; } else if ( ! av_strcasecmp ( tag , ""Set-Cookie"" ) ) { if ( parse_cookie ( s , p , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strtoull <S2SV_ModEnd> "
1854,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> mutt_socket_empty ( conn ) ; 
1855,"<S2SV_StartBug> outpos += sprintf ( outpos , ""<S2SV_blank>h<S2SV_blank>f"" ) ; <S2SV_EndBug> <S2SV_StartBug> outpos += sprintf ( outpos , ""<S2SV_blank>s"" ) ; <S2SV_EndBug> <S2SV_StartBug> outpos += sprintf ( outpos , ""<S2SV_blank>h<S2SV_blank>f"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> send ( <S2SV_ModEnd> <S2SV_ModStart> send ( <S2SV_ModEnd> <S2SV_ModStart> send ( <S2SV_ModEnd> 
1856,<S2SV_StartBug> numSamples = pWTIntFrame -> numSamples ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( numSamples <= 0 ) { ALOGE ( ""b/26366256"" ) ; return ; } "
1857,<S2SV_StartBug> char added ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1858,"<S2SV_StartBug> const char * name = d -> name ; <S2SV_EndBug> <S2SV_StartBug> struct device dev = d -> udev -> dev ; <S2SV_EndBug> <S2SV_StartBug> dev_info ( & dev , ""%s:<S2SV_blank>\'%s\'<S2SV_blank>successfully<S2SV_blank>deinitialized<S2SV_blank>and<S2SV_blank>disconnected\\n"" , <S2SV_EndBug> <S2SV_StartBug> KBUILD_MODNAME , name ) ; <S2SV_EndBug> ","<S2SV_ModStart> devname = kstrdup ( dev_name ( & <S2SV_ModEnd> <S2SV_ModStart> ) , GFP_KERNEL ) ; const char * drvname = d -> name <S2SV_ModStart> pr_info ( ""%s:<S2SV_blank>\'%s:%s\'<S2SV_blank>successfully<S2SV_blank>deinitialized<S2SV_blank>and<S2SV_blank>disconnected\\n"" <S2SV_ModEnd> <S2SV_ModStart> drvname , devname ) ; kfree ( devname <S2SV_ModEnd> "
1859,"<S2SV_StartBug> list_del ( & key -> graveyard_link ) ; <S2SV_EndBug> <S2SV_StartBug> if ( test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) && <S2SV_EndBug> <S2SV_StartBug> if ( test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) <S2SV_EndBug> ",<S2SV_ModStart> short state = key -> state ; <S2SV_ModStart> state == KEY_IS_POSITIVE && <S2SV_ModEnd> <S2SV_ModStart> state != KEY_IS_UNINSTANTIATED <S2SV_ModEnd> 
1860,"<S2SV_StartBug> REQ ( n , for_stmt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( NCH ( n ) == 9 ) { <S2SV_EndBug> <S2SV_StartBug> seq = ast_for_suite ( c , CHILD ( n , 8 ) ) ; <S2SV_EndBug> <S2SV_StartBug> suite_seq = ast_for_suite ( c , CHILD ( n , 5 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( is_async ) <S2SV_EndBug> <S2SV_StartBug> return AsyncFor ( target , expression , suite_seq , seq , <S2SV_EndBug> <S2SV_StartBug> return For ( target , expression , suite_seq , seq , <S2SV_EndBug> ","<S2SV_ModStart> int has_type_comment ; string type_comment ; <S2SV_ModStart> ; has_type_comment = TYPE ( CHILD ( n , 5 ) ) == TYPE_COMMENT <S2SV_ModStart> + has_type_comment <S2SV_ModStart> + has_type_comment <S2SV_ModStart> + has_type_comment <S2SV_ModStart> has_type_comment ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n , 5 ) ) ; if ( ! type_comment ) return NULL ; } else type_comment = NULL ; if ( <S2SV_ModStart> type_comment , <S2SV_ModStart> , type_comment "
1861,"<S2SV_StartBug> uid_eq ( root_uid , current_uid ( ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( gid_eq ( root_gid , current_gid ( ) ) ) { <S2SV_EndBug> ",<S2SV_ModStart> current_euid <S2SV_ModEnd> <S2SV_ModStart> in_egroup_p ( root_gid <S2SV_ModEnd> 
1862,<S2SV_StartBug> MinVal = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> ( void ) ResetMagickMemory ( BImgBuff , 0 , ldblk * sizeof ( double ) ) ; "
1863,<S2SV_StartBug> mutex_lock ( & vdev -> vdev_mutex ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( memcmp ( & dd , dd_config , sizeof ( dd ) ) ) { ret = - EINVAL ; goto free_ret ; } "
1864,<S2SV_StartBug> if ( bytecnt ) { <S2SV_EndBug> <S2SV_StartBug> bytecnt -- ; <S2SV_EndBug> ,<S2SV_ModStart> >= 2 <S2SV_ModStart> if ( wpc -> channel_reordering [ i ] >= nchans ) wpc -> channel_reordering [ i ] = 0 ; 
1865,"<S2SV_StartBug> if ( ( keylen ) > nodesize ) { <S2SV_EndBug> <S2SV_StartBug> PRIu16 "")"" , rec , cur_node , keylen , nodesize ) ; <S2SV_EndBug> ",<S2SV_ModStart> keylen >= nodesize - rec_off <S2SV_ModEnd> <S2SV_ModStart> ( nodesize - rec_off ) <S2SV_ModEnd> 
1866,"<S2SV_StartBug> if ( sock -> ops ) { <S2SV_EndBug> <S2SV_StartBug> if ( rcu_dereference_protected ( sock -> wq , 1 ) -> fasync_list ) <S2SV_EndBug> ","<S2SV_ModStart> __sock_release ( sock , NULL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1867,<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> msg -> msg_namelen = 0 ; 
1868,"<S2SV_StartBug> ns_to_timespec ( cur_setting -> it_interval , timr -> it . mmtimer . incr * sgi_clock_period ) ; <S2SV_EndBug> <S2SV_StartBug> ns_to_timespec ( cur_setting -> it_value , ( timr -> it . mmtimer . expires - rtc_time ( ) ) * sgi_clock_period ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = ns_to_timespec ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = ns_to_timespec ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1869,"<S2SV_StartBug> fprintf ( stderr , ""File<S2SV_blank>%s<S2SV_blank>has<S2SV_blank>no<S2SV_blank>IOD"" , inName ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""File<S2SV_blank>%s<S2SV_blank>has<S2SV_blank>no<S2SV_blank>IOD\\n"" <S2SV_ModEnd> "
1870,<S2SV_StartBug> test -> remote_cpu_util [ 0 ] = j_cpu_util_total -> valuefloat ; <S2SV_EndBug> <S2SV_StartBug> test -> remote_cpu_util [ 1 ] = j_cpu_util_user -> valuefloat ; <S2SV_EndBug> <S2SV_StartBug> test -> remote_cpu_util [ 2 ] = j_cpu_util_system -> valuefloat ; <S2SV_EndBug> <S2SV_StartBug> jitter = j_jitter -> valuefloat ; <S2SV_EndBug> ,<S2SV_ModStart> valuedouble <S2SV_ModEnd> <S2SV_ModStart> valuedouble <S2SV_ModEnd> <S2SV_ModStart> valuedouble <S2SV_ModEnd> <S2SV_ModStart> valuedouble <S2SV_ModEnd> 
1871,"<S2SV_StartBug> skb = skb_recv_datagram ( sk , flags , 0 , & ret ) ; <S2SV_EndBug> ",<S2SV_ModStart> m -> msg_namelen = 0 ; 
1872,"<S2SV_StartBug> option = stok ( option , ""<S2SV_blank>=\\t,"" , & ovalue ) ; <S2SV_EndBug> ",<S2SV_ModStart> ssplit <S2SV_ModEnd> 
1873,"<S2SV_StartBug> uzbl . net . useragent = ""Test<S2SV_blank>useragent"" ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1874,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> if ( map -> m_flags & EXT4_MAP_NEW && ! ( map -> m_flags & EXT4_MAP_UNWRITTEN ) && ! ( flags & EXT4_GET_BLOCKS_ZERO ) && ! IS_NOQUOTA ( inode ) && ext4_should_order_data ( inode ) ) { ret = ext4_jbd2_file_inode ( handle , inode ) ; if ( ret ) return ret ; } } return <S2SV_ModEnd> "
1875,<S2SV_StartBug> head_shift = ( F_SECT_PER_TRACK + 5 ) / 6 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! F_SECT_PER_TRACK ) return ; 
1876,<S2SV_StartBug> if ( roishift == 0 && bgshift == 0 ) { <S2SV_EndBug> <S2SV_StartBug> mask = ( 1 << numbps ) - 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> < 0 ) { jas_eprintf ( ""warning:<S2SV_blank>forcing<S2SV_blank>negative<S2SV_blank>ROI<S2SV_blank>shift<S2SV_blank>to<S2SV_blank>zero<S2SV_blank>"" ""(bitstream<S2SV_blank>is<S2SV_blank>probably<S2SV_blank>corrupt)\\n"" ) ; roishift = 0 ; } if ( roishift <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> "
1877,<S2SV_StartBug> case EXIT_REASON_INVEPT : <S2SV_EndBug> ,<S2SV_ModStart> case EXIT_REASON_INVVPID : 
1878,<S2SV_StartBug> struct pmu * leader_pmu = event -> group_leader -> pmu ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( is_software_event ( event ) ) return 1 
1879,<S2SV_StartBug> int n = 0 ; <S2SV_EndBug> <S2SV_StartBug> sock = ap_get_conn_socket ( r -> connection ) ; <S2SV_EndBug> <S2SV_StartBug> lua_websocket_read ( L ) ; <S2SV_EndBug> ,<S2SV_ModStart> do_read = 1 ; int <S2SV_ModStart> ; while ( do_read ) { do_read = 0 <S2SV_ModStart> do_read = 1 ; } <S2SV_ModEnd> 
1880,<S2SV_StartBug> copy_flags |= CL_SHARED_TO_SLAVE ; <S2SV_EndBug> ,<S2SV_ModStart> | CL_UNPRIVILEGED 
1881,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( rc -> uwbd . task ) 
1882,"<S2SV_StartBug> record_and_restart ( event , val , regs , nmi ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1883,"<S2SV_StartBug> SetImageColorspace ( image , GRAYColorspace ) ; <S2SV_EndBug> ","<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
1884,"<S2SV_StartBug> const void * data ; <S2SV_EndBug> <S2SV_StartBug> int noffset = 0 ; <S2SV_EndBug> <S2SV_StartBug> char * err_msg = """" ; <S2SV_EndBug> <S2SV_StartBug> printf ( ""error!\\n%s<S2SV_blank>for<S2SV_blank>\'%s\'<S2SV_blank>hash<S2SV_blank>node<S2SV_blank>in<S2SV_blank>\'%s\'<S2SV_blank>image<S2SV_blank>node\\n"" , <S2SV_EndBug> <S2SV_StartBug> err_msg , fit_get_name ( fit , noffset , NULL ) , <S2SV_EndBug> <S2SV_StartBug> return fit_image_verify_with_data ( fit , image_noffset , data , size ) ; <S2SV_EndBug> ","<S2SV_ModStart> char * name = fit_get_name ( fit , image_noffset , NULL ) ; const <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( strchr ( name , '@' ) ) { err_msg = ""Node<S2SV_blank>name<S2SV_blank>contains<S2SV_blank>@"" ; goto err ; } <S2SV_ModStart> goto err ; } return fit_image_verify_with_data <S2SV_ModEnd> <S2SV_ModStart> image_noffset , data , size ) ; err : printf ( ""error!\\n%s<S2SV_blank>in<S2SV_blank>\'%s\'<S2SV_blank>image<S2SV_blank>node\\n"" , err_msg <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1885,<S2SV_StartBug> if ( * dp ++ != ( csum & 0xff ) || * dp ++ != ( ( csum >> 8 ) & 0xff ) || * dp ++ != ( ( csum >> 16 ) & 0xff ) || * dp ++ != ( ( csum >> 24 ) & 0xff ) ) <S2SV_EndBug> <S2SV_StartBug> if ( * dp ++ != ( csum & 0xff ) || * dp ++ != ( ( csum >> 8 ) & 0xff ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> dp [ 1 ] <S2SV_ModEnd> <S2SV_ModStart> dp [ 2 ] <S2SV_ModEnd> <S2SV_ModStart> dp [ 3 ] <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> dp [ 1 ] <S2SV_ModEnd> 
1886,"<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = wc_Hash ( hash_type , data , data_len , hash_data , hash_len ) ; <S2SV_EndBug> <S2SV_StartBug> hash_data , hash_enc_len , sig , sig_len , key , key_len , rng ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> return wc_SignatureGenerate_ex ( hash_type , sig_type <S2SV_ModEnd> <S2SV_ModStart> sig , <S2SV_ModEnd> <S2SV_ModStart> , 1 <S2SV_ModStart>  <S2SV_ModEnd> "
1887,<S2SV_StartBug> if ( copy_in ) { <S2SV_EndBug> <S2SV_StartBug> * bounce_buf_ret = bounce_buf ; <S2SV_EndBug> ,<S2SV_ModStart> * bounce_buf_ret = bounce_buf ; <S2SV_ModStart>  <S2SV_ModEnd> 
1888,<S2SV_StartBug> const FIRSTPASS_STATS * this_frame ) { <S2SV_EndBug> <S2SV_StartBug> const struct twopass_rc * twopass = & cpi -> twopass ; <S2SV_EndBug> <S2SV_StartBug> av_err = stats -> ssim_weighted_pred_err / stats -> count ; <S2SV_EndBug> <S2SV_StartBug> modified_error = av_err * pow ( this_frame -> ssim_weighted_pred_err / <S2SV_EndBug> <S2SV_StartBug> cpi -> oxcf . two_pass_vbrbias / 100.0 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> TWO_PASS * twopass , const VP9EncoderConfig * oxcf , const <S2SV_ModStart> FIRSTPASS_STATS * const <S2SV_ModEnd> <S2SV_ModStart> const double av_weight <S2SV_ModEnd> <S2SV_ModStart> weight <S2SV_ModEnd> <S2SV_ModStart> const double av_err = ( stats -> coded_error * av_weight ) / stats -> count ; double <S2SV_ModStart> coded_error * this_frame -> weight <S2SV_ModEnd> <S2SV_ModStart> oxcf -> <S2SV_ModEnd> <S2SV_ModStart> ) ; modified_error *= pow ( calculate_active_area ( cpi , this_frame ) , ACT_AREA_CORRECTION "
1889,<S2SV_StartBug> while ( bytes ) { <S2SV_EndBug> ,<S2SV_ModStart> || ! iov -> iov_len 
1890,<S2SV_StartBug> return FALSE ; <S2SV_EndBug> ,<S2SV_ModStart> transport -> credssp = NULL ; 
1891,<S2SV_StartBug> return true ; <S2SV_EndBug> ,<S2SV_ModStart> ( * field_rtrn != NULL ) <S2SV_ModEnd> 
1892,<S2SV_StartBug> int nByte = sizeof ( u32 ) * ( 2 * nElem + 1 ) + sizeof ( MatchinfoBuffer ) ; <S2SV_EndBug> <S2SV_StartBug> int nStr = ( int ) strlen ( zMatchinfo ) ; <S2SV_EndBug> <S2SV_StartBug> pRet = sqlite3_malloc ( nByte + nStr + 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart> sqlite3_int64 <S2SV_ModEnd> <S2SV_ModStart> ( sqlite3_int64 ) <S2SV_ModStart> sqlite3_int64 nStr = <S2SV_ModEnd> <S2SV_ModStart> sqlite3_malloc64 <S2SV_ModEnd> 
1893,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1894,<S2SV_StartBug> # ifdef HAVE_OPENSSL <S2SV_EndBug> ,<S2SV_ModStart> SSL_SET_OPTIONS ( & mysql_connection ) ; <S2SV_ModEnd> 
1895,"<S2SV_StartBug> memcpy ( devinfo . driver_name , dev -> driver -> driver_name , COMEDI_NAMELEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( devinfo . board_name , dev -> board_name , COMEDI_NAMELEN ) ; <S2SV_EndBug> ",<S2SV_ModStart> strlcpy <S2SV_ModEnd> <S2SV_ModStart> strlcpy <S2SV_ModEnd> 
1896,"<S2SV_StartBug> void jas_matrix_bindsub ( jas_matrix_t * mat0 , jas_matrix_t * mat1 , int r0 , <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> ","<S2SV_ModStart> jas_matind_t r0 , jas_matind_t c0 , jas_matind_t r1 , jas_matind_t <S2SV_ModEnd> <S2SV_ModStart> jas_matind_t <S2SV_ModEnd> "
1897,"<S2SV_StartBug> if ( ! spec || ! value || ! hdr || ! obuf || obuf_len < 0 ) { <S2SV_EndBug> <S2SV_StartBug> case DW_FORM_data2 : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < value -> encoding . block . length ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> value -> encoding . block . data [ j ] = READ ( buf , ut8 ) ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < value -> encoding . block . length ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> value -> encoding . block . data [ j ] = READ ( buf , ut8 ) ; <S2SV_EndBug> ",<S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> # if 0 <S2SV_ModStart> # endif <S2SV_ModStart> if ( value -> encoding . block . data ) { <S2SV_ModStart> } <S2SV_ModStart> if ( value -> encoding . block . data ) { <S2SV_ModStart> } 
1898,<S2SV_StartBug> struct mb_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; <S2SV_EndBug> ,<S2SV_ModStart> mb2_cache <S2SV_ModEnd> 
1899,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> title , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> style_block , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> script , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> object , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> textarea , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> option , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> math , s ) ; <S2SV_EndBug> <S2SV_StartBug> # ifdef USE_PRETTYSRC <S2SV_EndBug> ","<S2SV_ModStart> HTChunk * target = NULL ; <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( target != NULL ) { if ( target -> data == s ) { CTRACE ( ( tfp , ""BUG:<S2SV_blank>appending<S2SV_blank>chunk<S2SV_blank>to<S2SV_blank>itself:<S2SV_blank>`%.*s\'\\n"" , target -> size , target -> data ) ) ; } else { HTChunkPuts ( target , s ) ; } } "
1900,"<S2SV_StartBug> static vpx_codec_err_t vp8e_update_entropy ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1901,<S2SV_StartBug> when = timespec_to_ns ( new_setting -> it_value ) ; <S2SV_EndBug> <S2SV_StartBug> period = timespec_to_ns ( new_setting -> it_interval ) ; <S2SV_EndBug> <S2SV_StartBug> now = timespec_to_ns ( n ) ; <S2SV_EndBug> ,<S2SV_ModStart> & <S2SV_ModStart> & <S2SV_ModStart> & 
1902,<S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( ! path_connected ( & nd -> path ) ) ) return - ENOENT ; 
1903,"<S2SV_StartBug> sprintf ( descriptor -> msg , ""\\n\\t\\tEntry:\\\n<S2SV_blank>\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n<S2SV_blank>\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n<S2SV_blank>\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d"" , <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_COUNT && ( SQLINTEGER ) value < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_PARAMETER_TYPE && value != SQL_PARAM_INPUT <S2SV_EndBug> <S2SV_StartBug> && value != SQL_PARAM_OUTPUT && value != SQL_PARAM_INPUT_OUTPUT && <S2SV_EndBug> <S2SV_StartBug> value != SQL_PARAM_INPUT_OUTPUT_STREAM && value != SQL_PARAM_OUTPUT_STREAM ) <S2SV_EndBug> ","<S2SV_ModStart> ""\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d"" <S2SV_ModEnd> <S2SV_ModStart> intptr_t <S2SV_ModEnd> <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) "
1904,<S2SV_StartBug> if ( ex && ( flag != EXT4_GET_BLOCKS_PRE_IO ) <S2SV_EndBug> <S2SV_StartBug> if ( flag != EXT4_GET_BLOCKS_PRE_IO ) <S2SV_EndBug> ,<S2SV_ModStart> ! ( flag & <S2SV_ModEnd> <S2SV_ModStart> ! ( flag & EXT4_GET_BLOCKS_PRE_IO ) <S2SV_ModEnd> 
1905,<S2SV_StartBug> mptctl_replace_fw ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> MPT_ADAPTER * ioc ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> ,"<S2SV_ModStart> MPT_ADAPTER * ioc , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1906,"<S2SV_StartBug> if ( ( addr_fd = open ( val , O_RDONLY ) ) != - 1 ) <S2SV_EndBug> <S2SV_StartBug> read ( addr_fd , val , FACTORY_BT_BDADDR_STORAGE_LEN ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
1907,<S2SV_StartBug> op -> regs [ reg_index ] = reg ; <S2SV_EndBug> <S2SV_StartBug> ++ reg_index ; <S2SV_EndBug> <S2SV_StartBug> op -> offset += temp ; <S2SV_EndBug> <S2SV_StartBug> op -> regs [ reg_index ] = X86R_UNDEFINED ; <S2SV_EndBug> ,<S2SV_ModStart> if ( reg_index < 2 ) { <S2SV_ModStart> } <S2SV_ModStart> if ( reg_index < 2 ) { <S2SV_ModStart> } 
1908,<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> value = ast2obj_string ( o -> v . FunctionDef . type_comment ) ; if ( ! value ) goto failed ; if ( _PyObject_SetAttrId ( result , & PyId_type_comment , value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value = ast2obj_string ( o -> v . AsyncFunctionDef . type_comment ) ; if ( ! value ) goto failed ; if ( _PyObject_SetAttrId ( result , & PyId_type_comment , value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value = ast2obj_string ( o -> v . Assign . type_comment ) ; if ( ! value ) goto failed ; if ( _PyObject_SetAttrId ( result , & PyId_type_comment , value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value = ast2obj_string ( o -> v . For . type_comment ) ; if ( ! value ) goto failed ; if ( _PyObject_SetAttrId ( result , & PyId_type_comment , value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value = ast2obj_string ( o -> v . AsyncFor . type_comment ) ; if ( ! value ) goto failed ; if ( _PyObject_SetAttrId ( result , & PyId_type_comment , value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value = ast2obj_string ( o -> v . With . type_comment ) ; if ( ! value ) goto failed ; if ( _PyObject_SetAttrId ( result , & PyId_type_comment , value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value = ast2obj_string ( o -> v . AsyncWith . type_comment ) ; if ( ! value ) goto failed ; if ( _PyObject_SetAttrId ( result , & PyId_type_comment , value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; "
1909,<S2SV_StartBug> if ( ! ctx -> established ) { <S2SV_EndBug> ,<S2SV_ModStart> ctx -> terminated || 
1910,"<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_context_expr ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_context_expr ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & context_expr , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> ","<S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""context_expr\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>withitem"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & context_expr , arena ) ; if ( res != 0 <S2SV_ModEnd> <S2SV_ModStart> Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj , & PyId_optional_vars , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; optional_vars = NULL ; } else { int res ; <S2SV_ModStart> optional_vars <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1911,"<S2SV_StartBug> # define ThrowPICTException ( exception , message ) { if ( tile_image != ( Image * ) NULL ) tile_image = DestroyImage ( tile_image ) ; if ( read_info != ( ImageInfo * ) NULL ) read_info = DestroyImageInfo ( read_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> ( void ) fputc ( c , file ) ; <S2SV_EndBug> ",<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> != c ) break 
1912,<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug> ,<S2SV_ModStart> Py_RETURN_NONE <S2SV_ModEnd> 
1913,"<S2SV_StartBug> static vpx_codec_err_t vp8e_set_activemap ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
1914,"<S2SV_StartBug> enum ImapExecResult rc = imap_exec ( adata , ""STARTTLS"" , IMAP_CMD_NO_FLAGS ) ; <S2SV_EndBug> ",<S2SV_ModStart> IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn <S2SV_ModEnd> 
1915,"<S2SV_StartBug> log_file = fopen ( file_name , ""a"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> fopen_safe <S2SV_ModEnd> 
1916,<S2SV_StartBug> f2fs_wait_discard_bios ( sbi ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , false "
1917,"<S2SV_StartBug> int frame_avail , got_data ; <S2SV_EndBug> <S2SV_StartBug> struct VpxInputContext input = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> exec_name = argv_ [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> input . use_i420 = 1 ; <S2SV_EndBug> <S2SV_StartBug> input . only_i420 = 1 ; <S2SV_EndBug> <S2SV_StartBug> parse_global_config ( & global , argv ) ; <S2SV_EndBug> <S2SV_StartBug> off_t lagged_count = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! input . width || ! input . height ) <S2SV_EndBug> <S2SV_StartBug> } ) ; <S2SV_EndBug> <S2SV_StartBug> ""<S2SV_blank>and<S2SV_blank>--height<S2SV_blank>(-h)"" ) ; <S2SV_EndBug> <S2SV_StartBug> input . use_i420 ? VPX_IMG_FMT_I420 <S2SV_EndBug> <S2SV_StartBug> FOREACH_STREAM ( open_output_file ( stream , & global ) ) ; <S2SV_EndBug> <S2SV_StartBug> FOREACH_STREAM ( initialize_encoder ( stream , & global ) ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , ""\\033[K"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( frames_in > global . skip_frames ) { <S2SV_EndBug> <S2SV_StartBug> vpx_usec_timer_mark ( & timer ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! got_data && input . length && ! streams -> frames_out ) { <S2SV_EndBug> <S2SV_StartBug> off_t frame_in_lagged = ( seen_frames - lagged_count ) * 1000 ; <S2SV_EndBug> <S2SV_StartBug> off_t input_pos = ftello ( input . file ) ; <S2SV_EndBug> <S2SV_StartBug> off_t input_pos_lagged = input_pos - lagged_count ; <S2SV_EndBug> <S2SV_StartBug> int64_t limit = input . length ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! global . quiet ) <S2SV_EndBug> <S2SV_StartBug> ""\\rPass<S2SV_blank>%d/%d<S2SV_blank>frame<S2SV_blank>%4d/%-4d<S2SV_blank>%7"" PRId64 ""B<S2SV_blank>%7lub/f<S2SV_blank>%7"" PRId64 ""b/s"" <S2SV_EndBug> <S2SV_StartBug> seen_frames ? ( unsigned long ) ( stream -> nbytes * 8 / seen_frames ) : 0 , <S2SV_EndBug> <S2SV_StartBug> usec_to_fps ( stream -> cx_time , seen_frames ) ) ; <S2SV_EndBug> <S2SV_StartBug> FOREACH_STREAM ( show_psnr ( stream ) ) ; <S2SV_EndBug> <S2SV_StartBug> FOREACH_STREAM ( stats_close ( & stream -> stats , global . passes - 1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> } ) ; <S2SV_EndBug> ","<S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH vpx_image_t raw_shift ; int allocated_raw_shift = 0 ; int use_16bit_internal = 0 ; int input_shift = 0 ; # endif <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memset ( & input , 0 , sizeof ( input ) ) ; <S2SV_ModStart> only_i420 <S2SV_ModEnd> <S2SV_ModStart> bit_depth = 0 <S2SV_ModEnd> <S2SV_ModStart> switch ( global . color_type ) { case I420 : input . fmt = VPX_IMG_FMT_I420 ; break ; case I422 : input . fmt = VPX_IMG_FMT_I422 ; break ; case I444 : input . fmt = VPX_IMG_FMT_I444 ; break ; case I440 : input . fmt = VPX_IMG_FMT_I440 ; break ; case YV12 : input . fmt = VPX_IMG_FMT_YV12 ; break ; } <S2SV_ModStart> int64_t <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> if ( ! input . bit_depth ) { FOREACH_STREAM ( { if ( stream -> config . cfg . g_input_bit_depth ) input . bit_depth = stream -> config . cfg . g_input_bit_depth ; else input . bit_depth = stream -> config . cfg . g_input_bit_depth = ( int ) stream -> config . cfg . g_bit_depth ; } ) ; if ( input . bit_depth > 8 ) input . fmt |= VPX_IMG_FMT_HIGHBITDEPTH ; } else { FOREACH_STREAM ( { stream -> config . cfg . g_input_bit_depth = input . bit_depth ; } ) ; } <S2SV_ModStart> input . fmt , <S2SV_ModEnd> <S2SV_ModStart> , & input . pixel_aspect_ratio <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( strcmp ( global . codec -> name , ""vp9"" ) == 0 || strcmp ( global . codec -> name , ""vp10"" ) == 0 ) { FOREACH_STREAM ( { if ( stream -> config . use_16bit_internal ) { use_16bit_internal = 1 ; } if ( stream -> config . cfg . g_profile == 0 ) { input_shift = 0 ; } else { input_shift = ( int ) stream -> config . cfg . g_bit_depth - stream -> config . cfg . g_input_bit_depth ; } } ) ; } # endif <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH vpx_image_t * frame_to_encode ; if ( input_shift || ( use_16bit_internal && input . bit_depth == 8 ) ) { assert ( use_16bit_internal ) ; if ( ! allocated_raw_shift ) { vpx_img_alloc ( & raw_shift , raw . fmt | VPX_IMG_FMT_HIGHBITDEPTH , input . width , input . height , 32 ) ; allocated_raw_shift = 1 ; } vpx_img_upshift ( & raw_shift , & raw , input_shift ) ; frame_to_encode = & raw_shift ; } else { frame_to_encode = & raw ; } vpx_usec_timer_start ( & timer ) ; if ( use_16bit_internal ) { assert ( frame_to_encode -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ; FOREACH_STREAM ( { if ( stream -> config . use_16bit_internal ) encode_frame ( stream , & global , frame_avail ? frame_to_encode : NULL , frames_in ) ; else assert ( 0 ) ; } ) ; } else { assert ( ( frame_to_encode -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) == 0 ) ; FOREACH_STREAM ( encode_frame ( stream , & global , frame_avail ? frame_to_encode : NULL , frames_in ) ) ; } # else <S2SV_ModStart> # endif <S2SV_ModStart> streams != NULL && <S2SV_ModStart> const int64_t <S2SV_ModEnd> <S2SV_ModStart> const int64_t <S2SV_ModEnd> <S2SV_ModStart> const int64_t <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> if ( ! global . quiet ) fprintf ( stderr , ""\\033[K"" ) ; <S2SV_ModStart> { <S2SV_ModStart> ""B<S2SV_blank>%7"" PRId64 ""b/f<S2SV_blank>%7"" <S2SV_ModEnd> <S2SV_ModStart> int64_t <S2SV_ModEnd> <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_ModStart> { if ( global . codec -> fourcc == VP9_FOURCC ) { FOREACH_STREAM ( <S2SV_ModEnd> <S2SV_ModStart> , ( 1 << stream -> config . cfg . g_input_bit_depth ) - 1 ) ) ; } else { FOREACH_STREAM ( show_psnr ( stream , 255.0 ) ) ; } } <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_FP_MB_STATS FOREACH_STREAM ( stats_close ( & stream -> fpmb_stats , global . passes - 1 ) ) ; # endif <S2SV_ModStart> ) ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( allocated_raw_shift ) vpx_img_free ( & raw_shift "
1918,"<S2SV_StartBug> int opts ; <S2SV_EndBug> <S2SV_StartBug> if ( ! js_regexec ( re -> prog , text , & m , opts ) ) { <S2SV_EndBug> ","<S2SV_ModStart> result ; int <S2SV_ModStart> result = <S2SV_ModEnd> <S2SV_ModStart> ; if ( result < 0 ) js_error ( J , ""regexec<S2SV_blank>failed"" ) ; if ( result == 0 "
1919,"<S2SV_StartBug> uint32_t GetPayloadTime ( size_t handle , uint32_t index , float * in , float * out ) <S2SV_EndBug> <S2SV_StartBug> if ( mp4 == NULL ) return 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> metaoffsets == 0 || mp4 -> basemetadataduration == 0 || mp4 -> meta_clockdemon == 0 || in == NULL || out == NULL ) return 1 ; <S2SV_EndBug> <S2SV_StartBug> * in = ( float ) ( ( double ) index * ( double ) mp4 -> basemetadataduration / ( double ) mp4 -> meta_clockdemon ) ; <S2SV_EndBug> <S2SV_StartBug> * out = ( float ) ( ( double ) ( index + 1 ) * ( double ) mp4 -> basemetadataduration / ( double ) mp4 -> meta_clockdemon ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ",<S2SV_ModStart> double <S2SV_ModEnd> <S2SV_ModStart> double <S2SV_ModEnd> <S2SV_ModStart> GPMF_ERROR_MEMORY <S2SV_ModEnd> <S2SV_ModStart> GPMF_ERROR_MEMORY <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> GPMF_OK <S2SV_ModEnd> 
1920,<S2SV_StartBug> uint32_t id ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( size_left < 4 ) { LogError ( ""Process_ipfix<S2SV_blank>[%u]<S2SV_blank>Template<S2SV_blank>withdraw<S2SV_blank>size<S2SV_blank>error<S2SV_blank>at<S2SV_blank>%s<S2SV_blank>line<S2SV_blank>%u"" , exporter -> info . id , __FILE__ , __LINE__ , strerror ( errno ) ) ; size_left = 0 ; continue ; } "
1921,"<S2SV_StartBug> separator = strchr ( connection -> buffer , ':' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> 
1922,<S2SV_StartBug> if ( option ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ( * session_ptr ) -> max_settings = NGHTTP2_DEFAULT_MAX_SETTINGS ; <S2SV_ModStart> if ( ( option -> opt_set_mask & NGHTTP2_OPT_MAX_SETTINGS ) && option -> max_settings ) { ( * session_ptr ) -> max_settings = option -> max_settings ; } 
1923,"<S2SV_StartBug> if ( rc < 0 ) <S2SV_EndBug> <S2SV_StartBug> dev_err ( & port -> dev , ""Reading<S2SV_blank>line<S2SV_blank>status<S2SV_blank>failed<S2SV_blank>(error<S2SV_blank>=<S2SV_blank>%d)\\n"" , <S2SV_EndBug> ","<S2SV_ModStart> != KLSI_STATUSBUF_LEN ) { <S2SV_ModEnd> <S2SV_ModStart> ""reading<S2SV_blank>line<S2SV_blank>status<S2SV_blank>failed:<S2SV_blank>%d\\n"" , rc ) ; if ( rc >= 0 ) rc = - EIO ; } <S2SV_ModEnd> "
1924,<S2SV_StartBug> if ( nbytes < sizeof ( * hwrpb ) ) <S2SV_EndBug> ,<S2SV_ModStart> > <S2SV_ModEnd> 
1925,"<S2SV_StartBug> jsWarn ( ""vertical_byte<S2SV_blank>only<S2SV_blank>works<S2SV_blank>for<S2SV_blank>1bpp<S2SV_blank>ArrayBuffers\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> { jsExceptionHere ( JSET_ERROR , <S2SV_ModEnd> <S2SV_ModStart> return 0 ; } if ( gfx . data . height & 7 ) { jsExceptionHere ( JSET_ERROR , ""height<S2SV_blank>must<S2SV_blank>be<S2SV_blank>a<S2SV_blank>multiple<S2SV_blank>of<S2SV_blank>8<S2SV_blank>when<S2SV_blank>using<S2SV_blank>vertical_byte\\n"" ) ; return 0 ; } "
1926,"<S2SV_StartBug> if ( NFS_PROTO ( inode ) -> have_delegation ( inode , FMODE_WRITE ) ) <S2SV_EndBug> <S2SV_StartBug> if ( nfs_write_pageuptodate ( page , inode ) && ( inode -> i_flock == NULL || <S2SV_EndBug> <S2SV_StartBug> inode -> i_flock -> fl_type != F_RDLCK ) ) ) <S2SV_EndBug> ","<S2SV_ModStart> ! nfs_write_pageuptodate ( page , inode ) ) return 0 ; if ( <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1927,"<S2SV_StartBug> const struct oe_sockaddr * src_addr , <S2SV_EndBug> <S2SV_StartBug> oe_socklen_t addrlen_in = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! sock || ( count && ! buf ) ) <S2SV_EndBug> <S2SV_StartBug> ( struct oe_sockaddr * ) src_addr , <S2SV_EndBug> <S2SV_StartBug> addrlen ) != OE_OK ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out <S2SV_ModStart> || count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( src_addr && <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> & addrlen_out <S2SV_ModEnd> <S2SV_ModStart> if ( src_addr && addrlen ) { if ( addrlen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; * addrlen = addrlen_out ; } if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } 
1928,<S2SV_StartBug> ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; <S2SV_EndBug> ,<S2SV_ModStart> { i_temp = ih264d_read_mmco_commands ( ps_dec ) ; if ( i_temp < 0 ) { return ERROR_DBP_MANAGER_T ; } <S2SV_ModStart> i_temp ; } <S2SV_ModEnd> 
1929,"<S2SV_StartBug> static MB_PREDICTION_MODE read_intra_mode_y ( VP9_COMMON * cm , vp9_reader * r , <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE y_mode = read_intra_mode ( r , <S2SV_EndBug> <S2SV_StartBug> cm -> fc . y_mode_prob [ size_group ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> ","<S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> MACROBLOCKD * xd , vpx_reader <S2SV_ModEnd> <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> "
1930,<S2SV_StartBug> if ( file -> name ) XFREE ( file -> name ) ; <S2SV_EndBug> <S2SV_StartBug> file -> len = a -> values [ 0 ] . len ; <S2SV_EndBug> <S2SV_StartBug> if ( file -> mime_type ) XFREE ( file -> mime_type ) ; <S2SV_EndBug> <S2SV_StartBug> if ( file -> content_id ) XFREE ( file -> content_id ) ; <S2SV_EndBug> ,<S2SV_ModStart> assert ( a -> type == szMAPI_STRING ) ; <S2SV_ModStart> assert ( ( a -> type == szMAPI_BINARY ) || ( a -> type == szMAPI_OBJECT ) ) ; <S2SV_ModStart> assert ( a -> type == szMAPI_STRING ) ; <S2SV_ModStart> assert ( a -> type == szMAPI_STRING ) ; 
1931,"<S2SV_StartBug> final_p = fl6_update_dst ( fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> fl6 -> saddr = ireq -> ir_v6_loc_addr ; <S2SV_EndBug> ",<S2SV_ModStart> rcu_read_lock ( ) ; <S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) <S2SV_ModStart> rcu_read_unlock ( ) ; 
1932,<S2SV_StartBug> new -> cid_mask = new -> lid_mask = 0xffff ; <S2SV_EndBug> ,<S2SV_ModStart> ( 1 << KVM_X2APIC_CID_BITS ) - 1 ; 
1933,<S2SV_StartBug> ISOFS_SB ( inode -> i_sb ) -> s_rock = 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( rr -> u . ER . len_id + offsetof ( struct rock_ridge , u . ER . data ) > rr -> len ) goto out ; "
1934,<S2SV_StartBug> return ( mhlen ) ; <S2SV_EndBug> ,<S2SV_ModStart> - 1 <S2SV_ModEnd> 
1935,<S2SV_StartBug> int rc = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! scontext_len ) return - EINVAL 
1936,"<S2SV_StartBug> if ( sscanf ( l_line , ""%u<S2SV_blank>%u<S2SV_blank>%u"" , o_row_count , o_column_count , o_element_count ) == 3 ) { <S2SV_EndBug> <S2SV_StartBug> l_row -- ; <S2SV_EndBug> ",<S2SV_ModStart> 3 == <S2SV_ModStart> && 0 != * o_row_count && 0 != * o_column_count && 0 != * o_element_count ) <S2SV_ModEnd> <S2SV_ModStart> LIBXSMM_ASSERT ( 0 != l_row && 0 != l_column ) ; 
1937,"<S2SV_StartBug> float * w = get_window ( f , n ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( w == NULL ) return 0 
1938,"<S2SV_StartBug> if ( ReadDDSInfo ( image , & dds_info ) != MagickTrue ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> for ( n = 0 ; n < num_images ; n ++ ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( num_images < 1 ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; "
1939,"<S2SV_StartBug> int16_t * const dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> skip_recode ) <S2SV_EndBug> <S2SV_StartBug> vp9_xform_quant ( x , plane , block , plane_bsize , tx_size ) ; <S2SV_EndBug> <S2SV_StartBug> optimize_b ( plane , block , plane_bsize , tx_size , x , a , l ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( tx_size ) { <S2SV_EndBug> <S2SV_StartBug> vp9_idct32x32_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_idct16x16_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_idct8x8_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; <S2SV_EndBug> <S2SV_StartBug> xd -> itxm_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> { if ( x -> quant_fp ) { if ( x -> skip_txfm [ 0 ] == SKIP_TXFM_AC_DC && plane == 0 ) { p -> eobs [ block ] = 0 ; * a = * l = 0 ; return ; } else { vp9_xform_quant_fp ( x , plane , block , plane_bsize , tx_size ) ; } } else { if ( max_txsize_lookup [ plane_bsize ] == tx_size ) { int txfm_blk_index = ( plane << 2 ) + ( block >> ( tx_size << 1 ) ) ; if ( x -> skip_txfm [ txfm_blk_index ] == SKIP_TXFM_NONE ) { <S2SV_ModStart> } else if ( x -> skip_txfm [ txfm_blk_index ] == SKIP_TXFM_AC_ONLY ) { vp9_xform_quant_dc ( x , plane , block , plane_bsize , tx_size ) ; } else { p -> eobs [ block ] = 0 ; * a = * l = 0 ; return ; } } else { vp9_xform_quant ( x , plane , block , plane_bsize , tx_size ) ; } } } <S2SV_ModStart> const int ctx = combine_entropy_contexts ( * a , * l ) ; * a = * l = optimize_b ( x , plane , block , tx_size , ctx ) > 0 <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> vp9_highbd_idct32x32_add <S2SV_ModEnd> <S2SV_ModStart> p -> eobs [ block ] , xd -> bd <S2SV_ModEnd> <S2SV_ModStart> vp9_highbd_idct16x16_add <S2SV_ModEnd> <S2SV_ModStart> p -> eobs [ block ] , xd -> bd <S2SV_ModEnd> <S2SV_ModStart> vp9_highbd_idct8x8_add <S2SV_ModEnd> <S2SV_ModStart> p -> eobs [ block ] , xd -> bd <S2SV_ModEnd> <S2SV_ModStart> x -> highbd_itxm_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] , xd -> bd <S2SV_ModEnd> <S2SV_ModStart> return ; } # endif switch ( tx_size ) { case TX_32X32 : vp9_idct32x32_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; break ; case TX_16X16 : vp9_idct16x16_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; break ; case TX_8X8 : vp9_idct8x8_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; break ; case TX_4X4 : x -> itxm_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; break ; default : assert ( 0 && ""Invalid<S2SV_blank>transform<S2SV_blank>size"" ) ; break ; } "
1940,<S2SV_StartBug> iris_info . dimension = ReadBlobMSBShort ( image ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; if ( ( iris_info . dimension == 0 ) || ( iris_info . dimension > 3 ) ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" "
1941,<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> int rowstep ; <S2SV_EndBug> ,<S2SV_ModStart> jas_matind_t i ; jas_matind_t <S2SV_ModEnd> <S2SV_ModStart> jas_matind_t <S2SV_ModEnd> 
1942,<S2SV_StartBug> for ( ifa1 = in_dev -> ifa_list ; ifa1 ; ifa1 = ifa1 -> ifa_next ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( in_dev -> dead ) goto no_promotions ; <S2SV_ModStart> no_promotions : 
1943,<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug> ,<S2SV_ModStart> Py_RETURN_NONE <S2SV_ModEnd> 
1944,<S2SV_StartBug> BUG ( ) ; <S2SV_EndBug> <S2SV_StartBug> BUG ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> return false ; } } else if ( r -> CRn == 0 && r -> CRm == 9 ) { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX ; <S2SV_ModEnd> <S2SV_ModStart> return false <S2SV_ModEnd> 
1945,"<S2SV_StartBug> static void xen_netbk_idx_release ( struct xen_netbk * netbk , u16 pending_idx ) <S2SV_EndBug> <S2SV_StartBug> make_tx_response ( vif , & pending_tx_info -> req , XEN_NETIF_RSP_OKAY ) ; <S2SV_EndBug> ","<S2SV_ModStart> , u8 status <S2SV_ModStart> status <S2SV_ModEnd> "
1946,"<S2SV_StartBug> status = usb_ep_queue ( hidg -> in_ep , req , GFP_ATOMIC ) ; <S2SV_EndBug> <S2SV_StartBug> goto release_write_pending_unlocked ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & hidg -> write_spinlock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> release_write_pending_unlocked : <S2SV_EndBug> ","<S2SV_ModStart> spin_unlock_irqrestore ( & hidg -> write_spinlock , flags ) ; <S2SV_ModStart> release_write_pending <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1947,"<S2SV_StartBug> ret = mount ( path , destpath , ""none"" , MS_BIND , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> safe_mount ( path , destpath , ""none"" , MS_BIND , NULL , conf -> rootfs . mount <S2SV_ModEnd> "
1948,"<S2SV_StartBug> status = ocfs2_rw_lock ( inode , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> goto bail_unlock ; <S2SV_EndBug> ",<S2SV_ModStart> inode_dio_wait ( inode ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
1949,"<S2SV_StartBug> count = yr_max ( 64 , ( index + 1 ) * 2 ) ; <S2SV_EndBug> <S2SV_StartBug> array -> items = ( YR_ARRAY_ITEMS * ) yr_realloc ( <S2SV_EndBug> ",<S2SV_ModStart> 64 ; while ( count <= index ) count *= 2 <S2SV_ModEnd> <S2SV_ModStart> while ( count <= index ) count *= 2 ; 
1950,<S2SV_StartBug> if ( len > count ) <S2SV_EndBug> ,<S2SV_ModStart> ( unsigned long ) len > ( unsigned long ) <S2SV_ModEnd> 
1951,<S2SV_StartBug> return KADM5_BAD_MASK ; <S2SV_EndBug> ,<S2SV_ModStart> if ( mask & KADM5_TL_DATA ) { for ( tl_data_tail = entry -> tl_data ; tl_data_tail != NULL ; tl_data_tail = tl_data_tail -> tl_data_next ) { if ( tl_data_tail -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; } } 
1952,"<S2SV_StartBug> int rose_parse_facilities ( unsigned char * p , <S2SV_EndBug> <S2SV_StartBug> if ( facilities_len == 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( facilities_len > 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( len < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( len < 0 ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ","<S2SV_ModStart> , unsigned packet_len <S2SV_ModStart> || ( unsigned ) facilities_len > packet_len <S2SV_ModStart> >= 3 && <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> break ; default : printk ( KERN_DEBUG ""ROSE:<S2SV_blank>rose_parse_facilities<S2SV_blank>-<S2SV_blank>unknown<S2SV_blank>facilities<S2SV_blank>family<S2SV_blank>%02X\\n"" , * p ) ; len = 1 ; break ; } <S2SV_ModStart> ) return 0 ; if ( WARN_ON ( len >= facilities_len ) <S2SV_ModStart> } return facilities_len == 0 <S2SV_ModEnd> "
1953,<S2SV_StartBug> if ( ( creds -> pid == task_tgid_vnr ( current ) || nsown_capable ( CAP_SYS_ADMIN ) ) && <S2SV_EndBug> ,"<S2SV_ModStart> ns_capable ( current -> nsproxy -> pid_ns -> user_ns , <S2SV_ModEnd> "
1954,<S2SV_StartBug> outpos += <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> sprintf ( outputbuffer <S2SV_ModEnd> <S2SV_ModStart> sendClean ( outputbuffer ) ; 
1955,"<S2SV_StartBug> media_device_kpad_to_upad ( & entity -> pads [ p ] , & pad ) ; <S2SV_EndBug> <S2SV_StartBug> media_device_kpad_to_upad ( entity -> links [ l ] . source , <S2SV_EndBug> ","<S2SV_ModStart> memset ( & pad , 0 , sizeof ( pad ) ) ; <S2SV_ModStart> memset ( & link , 0 , sizeof ( link ) ) ; "
1956,<S2SV_StartBug> efx -> rxq_entries = efx -> txq_entries = EFX_DEFAULT_DMAQ_SIZE ; <S2SV_EndBug> ,<S2SV_ModStart> BUILD_BUG_ON ( EFX_DEFAULT_DMAQ_SIZE < EFX_RXQ_MIN_ENT ) ; if ( WARN_ON ( EFX_DEFAULT_DMAQ_SIZE < EFX_TXQ_MIN_ENT ( efx ) ) ) { rc = - EINVAL ; goto fail3 ; } 
1957,<S2SV_StartBug> struct sock * sk = sock -> sk ; <S2SV_EndBug> <S2SV_StartBug> if ( ! err ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && msg -> msg_name ) { struct sockaddr_at * sat = msg -> msg_name ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
1958,"<S2SV_StartBug> if ( ( st = krb5_add_ber_mem_ldap_mod ( & mods , ""krbprincipalkey"" , <S2SV_EndBug> <S2SV_StartBug> LDAP_MOD_REPLACE | LDAP_MOD_BVALUES , bersecretkey ) ) != 0 ) <S2SV_EndBug> ",<S2SV_ModStart> bersecretkey == NULL ) { st = ENOMEM ; goto cleanup ; } if ( bersecretkey [ 0 ] != NULL || ! create_standalone_prinicipal ) { <S2SV_ModEnd> <S2SV_ModStart> ; if ( st != 0 ) goto cleanup ; } <S2SV_ModEnd> 
1959,<S2SV_StartBug> pirlvl = pi -> picomp -> pirlvls ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( pi -> x == pi -> xstart && ( ( trx0 << r ) % ( 1 << rpx ) ) ) || <S2SV_EndBug> <S2SV_StartBug> ( ( pi -> y == pi -> ystart && ( ( try0 << r ) % ( 1 << rpy ) ) ) || <S2SV_EndBug> ,"<S2SV_ModStart> if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> "
1960,<S2SV_StartBug> bh -> b_size = map . m_len << inode -> i_blkbits ; <S2SV_EndBug> ,<S2SV_ModStart> ( u64 ) 
1961,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && frame -> linesize [ plane ] 
1962,"<S2SV_StartBug> memcpy ( ptr , VSB_data ( synth_body ) + o , l ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( l > ll ) l = ll ; 
1963,<S2SV_StartBug> addr -> sap_family = AF_ATMPVC ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( addr , 0 , sizeof ( * addr ) ) ; "
1964,<S2SV_StartBug> file_sb_list_del ( file ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1965,<S2SV_StartBug> for ( i = 0 ; i < 4 && out -> data [ i ] ; i ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && out -> linesize [ i ] 
1966,<S2SV_StartBug> WORD16 i2_level_arr [ 16 ] ; <S2SV_EndBug> ,<S2SV_ModStart> ai2_level_arr [ 19 ] ; WORD16 * i2_level_arr = & ai2_level_arr [ 3 <S2SV_ModEnd> 
1967,"<S2SV_StartBug> image = 0 ; <S2SV_EndBug> <S2SV_StartBug> jas_eprintf ( ""corrupt<S2SV_blank>bit<S2SV_blank>stream\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> bmp_dec_importopts_t opts ; size_t num_samples ; image = 0 ; info = 0 ; if ( bmp_dec_parseopts ( optstr , & opts ) ) { goto error <S2SV_ModEnd> <S2SV_ModStart> ) ; goto error ; } if ( ! jas_safe_size_mul3 ( info -> width , info -> height , info -> numplanes , & num_samples ) ) { jas_eprintf ( ""image<S2SV_blank>size<S2SV_blank>too<S2SV_blank>large\\n"" ) ; goto error ; } if ( opts . max_samples > 0 && num_samples > opts . max_samples ) { jas_eprintf ( ""maximum<S2SV_blank>number<S2SV_blank>of<S2SV_blank>pixels<S2SV_blank>exceeded<S2SV_blank>(%zu)\\n"" , opts . max_samples "
1968,"<S2SV_StartBug> q = strchr ( context -> buffer , '<S2SV_blank>' ) ; <S2SV_EndBug> <S2SV_StartBug> q = strchr ( uri , '<S2SV_blank>' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> osStrchr <S2SV_ModEnd> 
1969,<S2SV_StartBug> BUG_ON ( ! thresholds ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & memcg -> thresholds_lock ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! thresholds -> primary ) goto unlock <S2SV_ModStart> unlock : 
1970,"<S2SV_StartBug> char query [ 255 ] ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( query , ""SELECT<S2SV_blank>COUNT(*)<S2SV_blank>FROM<S2SV_blank>`%s`"" , trow [ 0 ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> NAME_LEN + 100 <S2SV_ModEnd> <S2SV_ModStart> my_snprintf <S2SV_ModEnd> <S2SV_ModStart> sizeof ( query ) , "
1971,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> return - ENOMEM ; } return <S2SV_ModEnd> 
1972,"<S2SV_StartBug> skb = skb_recv_datagram ( sk , flags , 0 , & ret ) ; <S2SV_EndBug> ",<S2SV_ModStart> m -> msg_namelen = 0 ; 
1973,<S2SV_StartBug> tok -> err = json_tokener_success ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ( len < - 1 ) || ( len == - 1 && strlen ( str ) > INT32_MAX ) ) { tok -> err = json_tokener_error_size ; return NULL ; } 
1974,<S2SV_StartBug> ascii = malloc ( strlen ( str ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ascii = malloc ( str_len ) ; <S2SV_EndBug> ,<S2SV_ModStart> safe_calloc <S2SV_ModEnd> <S2SV_ModStart> safe_calloc <S2SV_ModEnd> 
1975,<S2SV_StartBug> prepenv ( const struct rule * rule ) <S2SV_EndBug> <S2SV_StartBug> env = createenv ( rule ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , const struct passwd * mypw , const struct passwd * targpw ) { <S2SV_ModEnd> <S2SV_ModStart> , mypw , targpw <S2SV_ModEnd> "
1976,<S2SV_StartBug> if ( hashbin -> hb_type & HB_LOCK ) { <S2SV_EndBug> <S2SV_StartBug> queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> while ( queue ) { <S2SV_EndBug> <S2SV_StartBug> ( * free_func ) ( queue ) ; <S2SV_EndBug> <S2SV_StartBug> if ( hashbin -> hb_type & HB_LOCK ) { <S2SV_EndBug> <S2SV_StartBug> # ifdef CONFIG_LOCKDEP <S2SV_EndBug> ,"<S2SV_ModStart> spin_lock_irqsave ( & hashbin -> hb_spinlock , flags ) ; <S2SV_ModEnd> <S2SV_ModStart> while ( 1 ) { <S2SV_ModStart> if ( ! queue ) break ; <S2SV_ModEnd> <S2SV_ModStart> { if ( hashbin -> hb_type & HB_LOCK ) spin_unlock_irqrestore ( & hashbin -> hb_spinlock , flags ) ; free_func ( queue ) ; if ( hashbin -> hb_type & HB_LOCK ) spin_lock_irqsave ( & hashbin -> hb_spinlock , flags ) ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
1977,<S2SV_StartBug> section -> spatial_layer_id = frame -> spatial_layer_id ; <S2SV_EndBug> <S2SV_StartBug> section -> ssim_weighted_pred_err += frame -> ssim_weighted_pred_err ; <S2SV_EndBug> <S2SV_StartBug> section -> pcnt_neutral += frame -> pcnt_neutral ; <S2SV_EndBug> ,<S2SV_ModStart> weight += frame -> weight ; section -> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; section -> intra_skip_pct += frame -> intra_skip_pct ; section -> inactive_zone_rows += frame -> inactive_zone_rows ; section -> inactive_zone_cols += frame -> inactive_zone_cols 
1978,<S2SV_StartBug> struct loop_device * lo = disk -> private_data ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & lo -> lo_ctl_mutex ) ; <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & loop_index_mutex ) ; __lo_release ( <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> <S2SV_ModStart> loop_index_mutex <S2SV_ModEnd> 
1979,"<S2SV_StartBug> if ( ! caller_is_in_ancestor ( fc -> pid , controller , cgroup , NULL ) ) { <S2SV_EndBug> ","<S2SV_ModStart> caller_may_see_dir ( fc -> pid , controller , cgroup ) ) { ret = - ENOENT ; goto out ; } if ( ! "
1980,<S2SV_StartBug> error = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1981,<S2SV_StartBug> countersize = COUNTER_OFFSET ( tmp . nentries ) * nr_cpu_ids ; <S2SV_EndBug> ,<S2SV_ModStart> tmp . name [ sizeof ( tmp . name ) - 1 ] = 0 ; 
1982,"<S2SV_StartBug> unsigned char * buf ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( buf = jas_realloc2 ( m -> buf_ , bufsize , sizeof ( unsigned char ) ) ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && bufsize 
1983,<S2SV_StartBug> if ( val > sysctl_wmem_max ) <S2SV_EndBug> <S2SV_StartBug> if ( ( val * 2 ) < SOCK_MIN_SNDBUF ) <S2SV_EndBug> <S2SV_StartBug> if ( val > sysctl_rmem_max ) <S2SV_EndBug> <S2SV_StartBug> if ( ( val * 2 ) < SOCK_MIN_RCVBUF ) <S2SV_EndBug> ,"<S2SV_ModStart> val = min_t ( u32 , val , sysctl_wmem_max ) <S2SV_ModEnd> <S2SV_ModStart> sk -> sk_sndbuf = max_t ( u32 , <S2SV_ModEnd> <S2SV_ModStart> , SOCK_MIN_SNDBUF ) <S2SV_ModEnd> <S2SV_ModStart> val = min_t ( u32 , val , sysctl_rmem_max ) <S2SV_ModEnd> <S2SV_ModStart> sk -> sk_rcvbuf = max_t ( u32 , <S2SV_ModEnd> <S2SV_ModStart> , SOCK_MIN_RCVBUF ) <S2SV_ModEnd> "
1984,"<S2SV_StartBug> GetPixelIndex ( image , q ) , q ) ; <S2SV_EndBug> ","<S2SV_ModStart> ConstrainColormapIndex ( image , <S2SV_ModStart> ) , exception "
1985,"<S2SV_StartBug> while ( ( ch = getopt ( ac , av , ""cDdksE:a:t:"" ) ) != - 1 ) { <S2SV_EndBug> <S2SV_StartBug> k_flag ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ac == 0 && ! c_flag && ! s_flag ) { <S2SV_EndBug> <S2SV_StartBug> if ( pledge ( ""stdio<S2SV_blank>cpath<S2SV_blank>unix<S2SV_blank>id<S2SV_blank>proc<S2SV_blank>exec"" , NULL ) == - 1 ) <S2SV_EndBug> ","<S2SV_ModStart> ""cDdksE:a:P:t:"" <S2SV_ModEnd> <S2SV_ModStart> ; break ; case 'P' : if ( pkcs11_whitelist != NULL ) fatal ( ""-P<S2SV_blank>option<S2SV_blank>already<S2SV_blank>specified"" ) ; pkcs11_whitelist = xstrdup ( optarg ) <S2SV_ModStart> pkcs11_whitelist == NULL ) pkcs11_whitelist = xstrdup ( DEFAULT_PKCS11_WHITELIST ) ; if ( <S2SV_ModStart> ""stdio<S2SV_blank>rpath<S2SV_blank>cpath<S2SV_blank>unix<S2SV_blank>id<S2SV_blank>proc<S2SV_blank>exec"" <S2SV_ModEnd> "
1986,<S2SV_StartBug> int i ; <S2SV_EndBug> ,<S2SV_ModStart> jas_matind_t i ; jas_matind_t <S2SV_ModEnd> 
1987,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( packet -> payload [ 0 ] == 0x16 && packet -> payload [ 1 ] == 0x80 && packet -> payload [ 4 ] == 0x06 && packet -> payload [ 5 ] == 0x00 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> { if ( ( packet -> payload_packet_len >= 5 ) && <S2SV_ModEnd> <S2SV_ModStart> ) && ( <S2SV_ModEnd> <S2SV_ModStart> ) && ( <S2SV_ModEnd> <S2SV_ModStart> ) && ( <S2SV_ModEnd> <S2SV_ModStart> ) 
1988,<S2SV_StartBug> mnt_flags |= mnt -> mnt . mnt_flags & MNT_PROPAGATION_MASK ; <S2SV_EndBug> ,<S2SV_ModStart> ~ MNT_USER_SETTABLE_MASK <S2SV_ModEnd> 
1989,<S2SV_StartBug> path = g_get_tmp_dir ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> g_get_home_dir <S2SV_ModEnd> 
1990,<S2SV_StartBug> align = ( 1 << xcs ) - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! img ) { <S2SV_EndBug> ,"<S2SV_ModStart> w = d_w ; h = d_h ; s = ( fmt & VPX_IMG_FMT_PLANAR ) ? w : bps * w / 8 ; s = ( s + stride_align - 1 ) & ~ ( stride_align - 1 ) ; stride_in_bytes = ( fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? s * 2 : s ; if ( ! img ) { img = ( vpx_image_t * ) calloc ( 1 , sizeof ( vpx_image_t ) ) ; if ( ! img ) goto fail ; img -> self_allocd = 1 ; } else { memset ( img , 0 , sizeof ( vpx_image_t ) ) ; } img -> img_data = img_data ; if ( ! img_data ) { uint64_t alloc_size ; <S2SV_ModStart>  <S2SV_ModEnd> "
1991,<S2SV_StartBug> INIT_LIST_HEAD ( & f -> f_u . fu_list ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
1992,<S2SV_StartBug> saddr . sin_addr . s_addr = htonl ( INADDR_ANY ) ; <S2SV_EndBug> ,<S2SV_ModStart> INADDR_LOOPBACK <S2SV_ModEnd> 
1993,<S2SV_StartBug> if ( count < sizeof hdr ) <S2SV_EndBug> ,<S2SV_ModStart> WARN_ON_ONCE ( ! ib_safe_file_access ( filp ) ) ) return - EACCES ; if ( 
1994,<S2SV_StartBug> len = ntohl ( * ( u_int32_t * ) & packet -> payload [ offset ] ) ; <S2SV_EndBug> <S2SV_StartBug> offset += 4 + len ; <S2SV_EndBug> <S2SV_StartBug> len = ntohl ( * ( u_int32_t * ) & packet -> payload [ offset ] ) ; <S2SV_EndBug> <S2SV_StartBug> len = ntohl ( * ( u_int32_t * ) & packet -> payload [ offset ] ) ; <S2SV_EndBug> <S2SV_StartBug> len = ntohl ( * ( u_int32_t * ) & packet -> payload [ offset ] ) ; <S2SV_EndBug> <S2SV_StartBug> offset += 4 + len ; <S2SV_EndBug> ,<S2SV_ModStart> if ( offset + sizeof ( u_int32_t ) >= packet -> payload_packet_len ) goto invalid_payload ; <S2SV_ModStart> ; if ( offset + sizeof ( u_int32_t ) >= packet -> payload_packet_len ) goto invalid_payload <S2SV_ModStart> if ( offset + sizeof ( u_int32_t ) >= packet -> payload_packet_len ) goto invalid_payload ; <S2SV_ModStart> if ( offset + sizeof ( u_int32_t ) >= packet -> payload_packet_len ) goto invalid_payload ; <S2SV_ModStart> if ( offset + sizeof ( u_int32_t ) >= packet -> payload_packet_len ) goto invalid_payload ; <S2SV_ModStart> ; if ( offset + sizeof ( u_int32_t ) >= packet -> payload_packet_len ) goto invalid_payload 
1995,<S2SV_StartBug> jumpstack [ stackidx ++ ] = e ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( stackidx >= private -> stacksize ) ) { verdict = NF_DROP ; break ; } 
1996,<S2SV_StartBug> for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( int ) 
1997,"<S2SV_StartBug> list_add_tail ( & info -> list , & xen_irq_list_head ) ; <S2SV_EndBug> ",<S2SV_ModStart> INIT_LIST_HEAD ( & info -> eoi_list ) ; 
1998,"<S2SV_StartBug> const VP9_COMMON * const cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> rc -> bits_off_target += rc -> av_per_frame_bandwidth - encoded_frame_size ; <S2SV_EndBug> <S2SV_StartBug> rc -> bits_off_target = MIN ( rc -> bits_off_target , oxcf -> maximum_buffer_size ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> use_svc && cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_ModStart> rc <S2SV_ModEnd> <S2SV_ModStart> is_one_pass_cbr_svc ( cpi ) <S2SV_ModEnd> 
1999,"<S2SV_StartBug> sun_data = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) sun_info . length , <S2SV_EndBug> <S2SV_StartBug> sizeof ( * sun_data ) ) ; <S2SV_EndBug> <S2SV_StartBug> height = sun_info . height ; <S2SV_EndBug> ","<S2SV_ModStart> bytes_per_line = sun_info . width * sun_info . depth ; <S2SV_ModStart> MagickMax ( <S2SV_ModStart> bytes_per_line * sun_info . width ) , <S2SV_ModStart>  <S2SV_ModEnd> "
2000,<S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> skip_metadata ( ps ) ; 
2001,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> # if 0 <S2SV_ModStart> # endif 
2002,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2003,"<S2SV_StartBug> error = copy_to_user ( buf , & socket_packet -> icmp_packet , <S2SV_EndBug> <S2SV_StartBug> socket_packet -> icmp_len ) ; <S2SV_EndBug> ","<S2SV_ModStart> packet_len = min ( count , socket_packet -> icmp_len ) ; <S2SV_ModStart> packet_len ) <S2SV_ModEnd> "
2004,<S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( up -> replay_window > up -> bmp_len * sizeof ( __u32 ) * 8 ) return - EINVAL ; 
2005,"<S2SV_StartBug> uint32_t chan_chunk = 0 , channel_layout = 0 , bcount ; <S2SV_EndBug> <S2SV_StartBug> WavpackBigEndianToNative ( & caf_audio_format , CAFAudioFormatFormat ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! DoReadFile ( infile , & mEditCount , sizeof ( mEditCount ) , & bcount ) || <S2SV_EndBug> ","<S2SV_ModStart> = 0 , desc_chunk <S2SV_ModStart> ; desc_chunk = 1 <S2SV_ModStart> desc_chunk || ! "
2006,"<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> set_acl_inode ( inode , inode -> i_mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( error <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2007,<S2SV_StartBug> } else { <S2SV_EndBug> ,"<S2SV_ModStart> { uint8_t computedHvi [ 32 ] ; uint16_t HelloMessageLength = zrtpChannelContext -> selfPackets [ HELLO_MESSAGE_STORE_ID ] -> messageLength ; uint16_t DHPartHelloMessageStringLength = zrtpPacket -> messageLength + HelloMessageLength ; uint8_t * DHPartHelloMessageString = ( uint8_t * ) malloc ( DHPartHelloMessageStringLength * sizeof ( uint8_t ) ) ; memcpy ( DHPartHelloMessageString , input + ZRTP_PACKET_HEADER_LENGTH , zrtpPacket -> messageLength ) ; memcpy ( DHPartHelloMessageString + zrtpPacket -> messageLength , zrtpChannelContext -> selfPackets [ HELLO_MESSAGE_STORE_ID ] -> packetString + ZRTP_PACKET_HEADER_LENGTH , HelloMessageLength ) ; zrtpChannelContext -> hashFunction ( DHPartHelloMessageString , DHPartHelloMessageStringLength , 32 , computedHvi ) ; free ( DHPartHelloMessageString ) ; if ( memcmp ( computedHvi , peerCommitMessageData -> hvi , 32 ) != 0 ) { free ( messageData ) ; return BZRTP_PARSER_ERROR_UNMATCHINGHVI ; } } "
2008,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ca . name [ sizeof ( ca . name ) - 1 ] = 0 ; 
2009,<S2SV_StartBug> if ( keyring ) <S2SV_EndBug> ,<S2SV_ModStart> && link_ret == 0 
2010,"<S2SV_StartBug> size_t pos = luaL_optinteger ( L , 3 , 1 ) - 1 ; <S2SV_EndBug> <S2SV_StartBug> luaL_argcheck ( L , pos + size <= ld , 2 , ""data<S2SV_blank>string<S2SV_blank>too<S2SV_blank>short"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; luaL_argcheck ( L , pos > 0 , 3 , ""offset<S2SV_blank>must<S2SV_blank>be<S2SV_blank>1<S2SV_blank>or<S2SV_blank>greater"" ) ; pos -- <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && pos <= ld - size , <S2SV_ModEnd> "
2011,<S2SV_StartBug> up_read ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> & control -> id ) ; <S2SV_EndBug> ,<S2SV_ModStart> struct snd_ctl_elem_id id = control -> id ; <S2SV_ModStart> & <S2SV_ModEnd> 
2012,<S2SV_StartBug> evtchn = info -> evtchn ; <S2SV_EndBug> <S2SV_StartBug> if ( ! VALID_EVTCHN ( evtchn ) ) <S2SV_EndBug> ,"<S2SV_ModStart> unsigned int cpu ; <S2SV_ModStart> || ! list_empty ( & info -> eoi_list ) ) return ; cpu = info -> eoi_cpu ; if ( info -> eoi_time && info -> irq_epoch == per_cpu ( irq_epoch , cpu ) ) { lateeoi_list_add ( info ) ; return ; } info -> eoi_time = 0 <S2SV_ModEnd> "
2013,"<S2SV_StartBug> static vpx_codec_err_t vp8_set_postproc ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_INCAPABLE ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( void ) ctx ; ( void ) args ; 
2014,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , regs -> ARM_pc ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2015,<S2SV_StartBug> file_update_time ( vma -> vm_file ) ; <S2SV_EndBug> <S2SV_StartBug> sb_end_pagefault ( inode -> i_sb ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; down_read ( & EXT4_I ( inode ) -> i_mmap_sem <S2SV_ModStart> up_read ( & EXT4_I ( inode ) -> i_mmap_sem ) ; 
2016,"<S2SV_StartBug> uint8_t * const buffers [ 4 ] = { src -> y_buffer , src -> u_buffer , src -> v_buffer , <S2SV_EndBug> <S2SV_StartBug> const int strides [ 4 ] = { src -> y_stride , src -> uv_stride , src -> uv_stride , <S2SV_EndBug> ",<S2SV_ModStart> 3 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 3 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2017,"<S2SV_StartBug> char * buf , * payload ; <S2SV_EndBug> <S2SV_StartBug> int ret = - 1 , result = - 1 ; <S2SV_EndBug> <S2SV_StartBug> int total = 0 ; <S2SV_EndBug> <S2SV_StartBug> } else if ( 0 == ret ) { <S2SV_EndBug> ","<S2SV_ModStart> int result <S2SV_ModEnd> <S2SV_ModStart> ; ws_ctx_t * wsctx = ( ws_ctx_t * ) cl -> wsctx ; rfbLog ( ""%s_enter:<S2SV_blank>len=%d;<S2SV_blank>"" ""CTX:<S2SV_blank>readlen=%d<S2SV_blank>readPos=%p<S2SV_blank>"" ""writeTo=%p<S2SV_blank>"" ""state=%d<S2SV_blank>toRead=%d<S2SV_blank>remaining=%d<S2SV_blank>"" ""<S2SV_blank>nReadRaw=%d<S2SV_blank>carrylen=%d<S2SV_blank>carryBuf=%p\\n"" , __func__ , len , wsctx -> readlen , wsctx -> readPos , wsctx -> writePos , wsctx -> hybiDecodeState , wsctx -> nToRead , hybiRemaining ( wsctx ) , wsctx -> nReadRaw , wsctx -> carrylen , wsctx -> carryBuf ) ; switch ( wsctx -> hybiDecodeState ) { case WS_HYBI_STATE_HEADER_PENDING : wsctx -> hybiDecodeState = hybiReadHeader ( cl , & result ) ; if ( wsctx -> hybiDecodeState == WS_HYBI_STATE_ERR ) { goto spor ; } if ( wsctx -> hybiDecodeState != WS_HYBI_STATE_HEADER_PENDING ) { wsctx -> hybiDecodeState = hybiReadAndDecode ( cl , dst , len , & result ) ; } break ; case WS_HYBI_STATE_DATA_AVAILABLE : wsctx -> hybiDecodeState = hybiReturnData ( dst , len , wsctx , & result ) ; break ; case WS_HYBI_STATE_DATA_NEEDED : wsctx -> hybiDecodeState = hybiReadAndDecode ( cl , dst , len , & result ) ; break ; case WS_HYBI_STATE_CLOSE_REASON_PENDING : wsctx -> hybiDecodeState = hybiReadAndDecode ( cl , dst , len , & result ) ; break ; default : rfbErr ( ""%s:<S2SV_blank>called<S2SV_blank>with<S2SV_blank>invalid<S2SV_blank>state<S2SV_blank>%d\\n"" , wsctx -> hybiDecodeState ) ; <S2SV_ModEnd> <S2SV_ModStart> errno = EIO ; wsctx -> hybiDecodeState = WS_HYBI_STATE_ERR ; } spor : if ( wsctx -> hybiDecodeState == WS_HYBI_STATE_FRAME_COMPLETE ) { rfbLog ( ""frame<S2SV_blank>received<S2SV_blank>successfully,<S2SV_blank>cleaning<S2SV_blank>up:<S2SV_blank>read=%d<S2SV_blank>hlen=%d<S2SV_blank>plen=%d\\n"" , wsctx -> header . nRead , wsctx -> header . headerLen , wsctx -> header . payloadLen ) ; hybiDecodeCleanup ( wsctx ) <S2SV_ModEnd> <S2SV_ModStart> wsctx -> hybiDecodeState == WS_HYBI_STATE_ERR ) { hybiDecodeCleanup ( wsctx ) ; } rfbLog ( ""%s_exit:<S2SV_blank>len=%d;<S2SV_blank>"" ""CTX:<S2SV_blank>readlen=%d<S2SV_blank>readPos=%p<S2SV_blank>"" ""writePos=%p<S2SV_blank>"" ""state=%d<S2SV_blank>toRead=%d<S2SV_blank>remaining=%d<S2SV_blank>"" ""nRead=%d<S2SV_blank>carrylen=%d<S2SV_blank>carryBuf=%p<S2SV_blank>"" ""result=%d\\n"" , __func__ , len , wsctx -> readlen , wsctx -> readPos , wsctx -> writePos , wsctx -> hybiDecodeState , wsctx -> nToRead , hybiRemaining ( wsctx ) , wsctx -> nReadRaw , wsctx -> carrylen , wsctx -> carryBuf , result ) ; return <S2SV_ModEnd> "
2018,<S2SV_StartBug> double motion_pct = next_frame -> pcnt_motion ; <S2SV_EndBug> ,<S2SV_ModStart> ; ( void ) cpi 
2019,"<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error == 0 ) <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( error ) return error ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2020,<S2SV_StartBug> opt -> optlen = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt ) <S2SV_EndBug> ,"<S2SV_ModStart> struct ip_options_rcu * inet_opt ; inet_opt = rcu_dereference_protected ( inet -> inet_opt , sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> inet_opt ) memcpy ( optbuf , & inet_opt -> opt , sizeof ( struct ip_options ) + inet_opt -> opt . <S2SV_ModEnd> "
2021,"<S2SV_StartBug> UINT32 PathLength ; <S2SV_EndBug> <S2SV_StartBug> Stream_Seek ( irp -> input , 28 ) ; <S2SV_EndBug> <S2SV_StartBug> status = ConvertFromUnicode ( CP_UTF8 , 0 , ( WCHAR * ) Stream_Pointer ( irp -> input ) , PathLength / 2 , <S2SV_EndBug> ","<S2SV_ModStart> WCHAR * ptr ; <S2SV_ModStart> if ( ! Stream_SafeSeek <S2SV_ModEnd> <S2SV_ModStart> ) return ERROR_INVALID_DATA ; if ( Stream_GetRemainingLength ( irp -> input ) < 4 ) return ERROR_INVALID_DATA <S2SV_ModStart> ptr = ( WCHAR * ) Stream_Pointer ( irp -> input ) ; if ( ! Stream_SafeSeek ( irp -> input , PathLength ) ) return ERROR_INVALID_DATA ; <S2SV_ModStart> ptr <S2SV_ModEnd> "
2022,<S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug> ,<S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> 
2023,<S2SV_StartBug> void * buffer ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( params -> buffer . fragment_size == 0 || params -> buffer . fragments > SIZE_MAX / params -> buffer . fragment_size ) return - EINVAL 
2024,<S2SV_StartBug> if ( md_sk != NULL ) { <S2SV_EndBug> <S2SV_StartBug> if ( PKCS7_is_detached ( p7 ) || ( in_bio != NULL ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> data_body == NULL && in_bio == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE , PKCS7_R_NO_CONTENT ) ; goto err ; } if ( <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2025,<S2SV_StartBug> touch_atime ( & path ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! IS_ERR ( raw ) ) 
2026,<S2SV_StartBug> proc = rqstp -> rq_procinfo ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( nfs_request_too_big ( rqstp , proc ) ) { dprintk ( ""nfsd:<S2SV_blank>NFSv%d<S2SV_blank>argument<S2SV_blank>too<S2SV_blank>large\\n"" , rqstp -> rq_vers ) ; * statp = rpc_garbage_args ; return 1 ; } "
2027,"<S2SV_StartBug> if ( my_copystat ( org_name , tmp_name , MyFlags ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> goto end ; <S2SV_EndBug> ",<S2SV_ModStart> ! ( MyFlags & MY_REDEL_NO_COPY_STAT ) ) { if ( <S2SV_ModStart> } 
2028,<S2SV_StartBug> e . ifindex = port -> dev -> ifindex ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & e , 0 , sizeof ( e ) ) ; "
2029,"<S2SV_StartBug> u_int len , j ; <S2SV_EndBug> ","<S2SV_ModStart> if ( * rdnSeqBuf_offset >= rdnSeqBuf_len ) { # ifdef DEBUG_TLS printf ( ""[TLS]<S2SV_blank>%s()<S2SV_blank>[buffer<S2SV_blank>capacity<S2SV_blank>reached][%u]\\n"" , __FUNCTION__ , rdnSeqBuf_len ) ; # endif return - 1 ; } "
2030,<S2SV_StartBug> sec = t % 86400 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( days > 2932896 ) { days = 2932896 ; sec = 86399 ; } 
2031,"<S2SV_StartBug> struct rose_sock * rose = rose_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( srose != NULL ) { <S2SV_EndBug> <S2SV_StartBug> memset ( srose , 0 , msg -> msg_namelen ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> msg -> msg_name ) { struct sockaddr_rose * srose ; memset ( msg -> msg_name <S2SV_ModEnd> <S2SV_ModStart> sizeof ( struct full_sockaddr_rose ) ) ; srose = msg -> msg_name <S2SV_ModEnd> 
2032,"<S2SV_StartBug> if ( ( o + s < o ) || ( o + s < s ) || ( o + s > ds ) || ( o > ds ) ) { <S2SV_EndBug> <S2SV_StartBug> exif_log ( data -> priv -> log , EXIF_LOG_CODE_DEBUG , ""ExifData"" , <S2SV_EndBug> ","<S2SV_ModStart> o >= ds <S2SV_ModEnd> <S2SV_ModStart> ""Bogus<S2SV_blank>thumbnail<S2SV_blank>offset<S2SV_blank>(%u)."" , o ) ; return ; } if ( s > ds - o ) { exif_log ( data -> priv -> log , EXIF_LOG_CODE_DEBUG , ""ExifData"" , ""Bogus<S2SV_blank>thumbnail<S2SV_blank>size<S2SV_blank>(%u),<S2SV_blank>max<S2SV_blank>would<S2SV_blank>be<S2SV_blank>%u."" , s , ds - o <S2SV_ModEnd> "
2033,<S2SV_StartBug> if ( ! handle ) <S2SV_EndBug> ,<S2SV_ModStart> || ! SecIsValidHandle ( handle ) 
2034,<S2SV_StartBug> fdput ( f ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2035,<S2SV_StartBug> if ( len < 20 ) <S2SV_EndBug> ,"<S2SV_ModStart> 32 ) ND_PRINT ( ( ndo , ""<S2SV_blank>len=%d<S2SV_blank>[bad:<S2SV_blank><<S2SV_blank>32]"" <S2SV_ModEnd> "
2036,<S2SV_StartBug> ( ( YR_OBJECT_INTEGER * ) copy ) -> value = UNDEFINED ; <S2SV_EndBug> <S2SV_StartBug> ( ( YR_OBJECT_STRING * ) copy ) -> value = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> ( ( YR_OBJECT_INTEGER * ) object ) -> value <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModStart> object ) -> value != NULL ) { ( ( YR_OBJECT_STRING * ) copy ) -> value = sized_string_dup ( ( ( YR_OBJECT_STRING * ) object ) -> value ) ; } else { ( ( YR_OBJECT_STRING * ) copy ) -> value = NULL ; } break ; case OBJECT_TYPE_FLOAT : ( ( YR_OBJECT_DOUBLE * ) copy ) -> value = ( ( YR_OBJECT_DOUBLE * ) object ) -> value <S2SV_ModEnd> 
2037,<S2SV_StartBug> if ( ( e -> target_offset == sizeof ( struct ipt_entry ) && <S2SV_EndBug> <S2SV_StartBug> t -> verdict < 0 && unconditional ( & e -> ip ) ) || <S2SV_EndBug> ,<S2SV_ModStart> unconditional ( e <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2038,<S2SV_StartBug> if ( ( p -> flags & XFRM_STATE_ESN ) && ! rt ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> ,<S2SV_ModStart> struct xfrm_replay_state_esn * rs ; if <S2SV_ModEnd> <S2SV_ModStart> { if ( <S2SV_ModEnd> <S2SV_ModStart> rs = nla_data ( rt ) ; if ( rs -> bmp_len > XFRMA_REPLAY_ESN_MAX / sizeof ( rs -> bmp [ 0 ] ) / 8 ) return - EINVAL ; if ( nla_len ( rt ) < xfrm_replay_state_esn_len ( rs ) && nla_len ( rt ) != sizeof ( * rs ) ) return - EINVAL ; } 
2039,"<S2SV_StartBug> int abrt_core_fd = xopen3 ( path , O_WRONLY | O_CREAT | O_TRUNC , 0600 ) ; <S2SV_EndBug> ",<S2SV_ModStart> unlink ( path ) ; <S2SV_ModStart> O_EXCL <S2SV_ModEnd> 
2040,"<S2SV_StartBug> krb5_principal client_principal , <S2SV_EndBug> <S2SV_StartBug> krb5_principal_get_realm ( context , krbtgt -> entry . principal ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> , const char * tgt_realm <S2SV_ModStart> tgt_realm <S2SV_ModEnd> "
2041,"<S2SV_StartBug> static void evtchn_fifo_handle_events ( unsigned cpu ) <S2SV_EndBug> <S2SV_StartBug> __evtchn_fifo_handle_events ( cpu , false ) ; <S2SV_EndBug> ","<S2SV_ModStart> , struct evtchn_loop_ctrl * ctrl <S2SV_ModStart> ctrl <S2SV_ModEnd> "
2042,<S2SV_StartBug> fdput ( f ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2043,<S2SV_StartBug> queueItem -> srcPort = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> interface = interface ; queueItem -> 
2044,"<S2SV_StartBug> static void encode_sb ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int output_enabled , BLOCK_SIZE bsize ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> const int bsl = b_width_log2 ( bsize ) , hbs = ( 1 << bsl ) / 4 ; <S2SV_EndBug> <S2SV_StartBug> BLOCK_SIZE subsize ; <S2SV_EndBug> <S2SV_StartBug> subsize = * get_sb_partitioning ( x , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> partition = partition_lookup [ bsl ] [ subsize ] ; <S2SV_EndBug> <S2SV_StartBug> if ( output_enabled && bsize >= BLOCK_8X8 ) <S2SV_EndBug> <S2SV_StartBug> encode_b ( cpi , tile , tp , mi_row , mi_col , output_enabled , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( output_enabled ) <S2SV_EndBug> <S2SV_StartBug> if ( mi_col + hbs < cm -> mi_cols ) { <S2SV_EndBug> <S2SV_StartBug> if ( output_enabled ) <S2SV_EndBug> <S2SV_StartBug> if ( mi_row + hbs < cm -> mi_rows ) { <S2SV_EndBug> <S2SV_StartBug> subsize = get_subsize ( bsize , PARTITION_SPLIT ) ; <S2SV_EndBug> <S2SV_StartBug> encode_sb ( cpi , tile , tp , mi_row , mi_col , output_enabled , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> encode_sb ( cpi , tile , tp , mi_row , mi_col + hbs , output_enabled , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> encode_sb ( cpi , tile , tp , mi_row + hbs , mi_col , output_enabled , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( ""Invalid<S2SV_blank>partition<S2SV_blank>type."" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ThreadData * td , <S2SV_ModStart> , PC_TREE * pc_tree <S2SV_ModStart> td <S2SV_ModEnd> <S2SV_ModStart> b_width_log2_lookup [ bsize ] <S2SV_ModEnd> <S2SV_ModStart> = bsize <S2SV_ModStart> get_subsize ( bsize , pc_tree -> partitioning <S2SV_ModEnd> <S2SV_ModStart> ; if ( output_enabled && bsize != BLOCK_4X4 ) td -> counts -> partition [ ctx ] [ partition ] ++ <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> td , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> none <S2SV_ModEnd> <S2SV_ModStart> encode_b ( cpi , tile , td , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> vertical [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> && bsize > BLOCK_8X8 ) { encode_b ( cpi , tile , td , tp , mi_row , mi_col + hbs , output_enabled , subsize , & pc_tree -> vertical [ 1 ] <S2SV_ModEnd> <S2SV_ModStart> encode_b ( cpi , tile , td , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> horizontal [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> && bsize > BLOCK_8X8 ) { encode_b ( cpi , tile , td , tp , mi_row + hbs , mi_col , output_enabled , subsize , & pc_tree -> horizontal [ 1 ] <S2SV_ModEnd> <S2SV_ModStart> if ( bsize == BLOCK_8X8 ) { encode_b ( cpi , tile , td , tp , mi_row , mi_col , output_enabled , subsize , pc_tree -> leaf_split [ 0 ] ) ; } else { <S2SV_ModEnd> <S2SV_ModStart> td , tile , tp , mi_row , mi_col , output_enabled , subsize , pc_tree -> split [ 0 ] ) ; encode_sb ( cpi , td , tile , tp , mi_row , mi_col + hbs , output_enabled , subsize , pc_tree -> split [ 1 ] ) <S2SV_ModEnd> <S2SV_ModStart> td , tile , tp , mi_row + hbs , mi_col , output_enabled , subsize , pc_tree -> split [ 2 ] ) <S2SV_ModEnd> <S2SV_ModStart> td , tile , tp , mi_row + hbs , mi_col + hbs , output_enabled , subsize , pc_tree -> split [ 3 ] ) ; } <S2SV_ModEnd> <S2SV_ModStart> 0 && ""Invalid<S2SV_blank>partition<S2SV_blank>type."" ) ; break <S2SV_ModEnd> "
2045,<S2SV_StartBug> spin_lock_bh ( & g_cdev . lock ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( count > sizeof ( ei -> data ) - sizeof ( * elt ) - sizeof ( * app_hdr ) ) return - EINVAL ; 
2046,"<S2SV_StartBug> list_add_tail ( & sp -> auto_asconf_list , <S2SV_EndBug> <S2SV_StartBug> sp -> do_auto_asconf = 1 ; <S2SV_EndBug> <S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> sp -> do_auto_asconf = 0 ; <S2SV_EndBug> ",<S2SV_ModStart> spin_lock ( & sock_net ( sk ) -> sctp . addr_wq_lock ) ; <S2SV_ModStart> ; spin_unlock ( & sock_net ( sk ) -> sctp . addr_wq_lock ) <S2SV_ModStart> { <S2SV_ModStart> } 
2047,<S2SV_StartBug> file_sb_list_del ( file ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2048,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( ! item -> valuestring ) { cJSON_Delete ( item ) ; return 0 ; } } <S2SV_ModEnd> 
2049,<S2SV_StartBug> sizeof ( uint16_t ) ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ) || ( ( effect_param_t * ) pCmdData ) -> psize > * replySize - sizeof ( effect_param_t 
2050,<S2SV_StartBug> return - EEXIST ; <S2SV_EndBug> ,<S2SV_ModStart> 0 <S2SV_ModEnd> 
2051,"<S2SV_StartBug> strncpy ( result , ""undefined"" , 10 ) ; <S2SV_EndBug> ",<S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2052,<S2SV_StartBug> FreeStmt ( ( ParseCommon * ) & append ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2053,<S2SV_StartBug> out_release_nounlock : <S2SV_EndBug> ,<S2SV_ModStart> if ( vm_shared ) unlock_page ( page ) ; out_release_nounlock : <S2SV_ModEnd> 
2054,<S2SV_StartBug> frag = ( hm_fragment * ) item -> data ; <S2SV_EndBug> ,<S2SV_ModStart> rdata = ( DTLS1_RECORD_DATA * ) item -> data ; if ( rdata -> rbuf . buf ) { OPENSSL_free ( rdata -> rbuf . buf ) ; } OPENSSL_free ( item -> data <S2SV_ModEnd> 
2055,"<S2SV_StartBug> struct range * range ; <S2SV_EndBug> <S2SV_StartBug> size_t content_length ; <S2SV_EndBug> <S2SV_StartBug> int code = 500 , fd = - 1 , i , nranges , ret ; <S2SV_EndBug> <S2SV_StartBug> if ( ( range = parse_range ( range_str , st -> st_size , & nranges ) ) == NULL ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( evb = evbuffer_new ( ) ) == NULL ) { <S2SV_EndBug> <S2SV_StartBug> ( void ) snprintf ( content_range , sizeof ( content_range ) , <S2SV_EndBug> <S2SV_StartBug> content_length = range -> end - range -> start + 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( buffer_add_range ( fd , evb , range ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> content_length = 0 ; <S2SV_EndBug> <S2SV_StartBug> content_length += i ; <S2SV_EndBug> <S2SV_StartBug> range ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ( i = evbuffer_add_printf ( evb , ""\\r\\n--%ud--\\r\\n"" , <S2SV_EndBug> <S2SV_StartBug> content_length += i ; <S2SV_EndBug> <S2SV_StartBug> ""byteranges;<S2SV_blank>boundary=%ud"" , boundary ) ; <S2SV_EndBug> <S2SV_StartBug> close ( fd ) ; <S2SV_EndBug> <S2SV_StartBug> goto done ; <S2SV_EndBug> <S2SV_StartBug> if ( server_bufferevent_write_buffer ( clt , evb ) == - 1 ) <S2SV_EndBug> <S2SV_StartBug> bufferevent_enable ( clt -> clt_bev , EV_READ | EV_WRITE ) ; <S2SV_EndBug> <S2SV_StartBug> if ( clt -> clt_persist ) <S2SV_EndBug> <S2SV_StartBug> if ( evb != NULL ) <S2SV_EndBug> ","<S2SV_ModStart> range_data * r = & clt -> clt_ranges ; struct range * range <S2SV_ModEnd> <S2SV_ModStart> = 0 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> nranges = parse_ranges ( clt , <S2SV_ModEnd> <S2SV_ModStart> ) ) < 1 <S2SV_ModEnd> <S2SV_ModStart> r -> range_media = media ; <S2SV_ModEnd> <S2SV_ModStart> range = & r -> range [ 0 ] ; <S2SV_ModStart> range = & r -> range [ 0 ] ; content_length += <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> arc4random_buf ( & clt -> clt_boundary , sizeof ( clt -> clt_boundary ) ) ; for ( i = 0 ; i < nranges ; i ++ ) { range = & r -> range [ i ] ; if ( ( ret = snprintf ( NULL , 0 , ""\\r\\n--%llu\\r\\n"" ""Content-Type:<S2SV_blank>%s/%s\\r\\n"" ""Content-Range:<S2SV_blank>bytes<S2SV_blank>%lld-%lld/%lld\\r\\n\\r\\n"" , clt -> clt_boundary , media -> media_type , media -> media_subtype , range -> start , range -> end , st -> st_size ) ) < 0 <S2SV_ModEnd> <S2SV_ModStart> ret + <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ret = snprintf ( NULL , 0 , ""\\r\\n--%llu--\\r\\n"" , clt -> clt_boundary ) ) < 0 <S2SV_ModEnd> <S2SV_ModStart> ret <S2SV_ModEnd> <S2SV_ModStart> ""byteranges;<S2SV_blank>boundary=%llu"" , clt -> clt_boundary <S2SV_ModEnd> <S2SV_ModStart> r -> range_toread = TOREAD_HTTP_RANGE <S2SV_ModEnd> <S2SV_ModStart> close ( fd ) ; <S2SV_ModStart> clt -> clt_fd = fd ; if ( clt -> clt_srvbev != NULL ) bufferevent_free ( clt -> clt_srvbev ) ; clt -> clt_srvbev_throttled = 0 ; clt -> clt_srvbev = bufferevent_new ( clt -> clt_fd , server_read_httprange , server_write , server_file_error , clt ) ; if ( clt -> clt_srvbev == NULL ) { errstr = ""failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>file<S2SV_blank>buffer<S2SV_blank>event"" ; <S2SV_ModEnd> <S2SV_ModStart> } bufferevent_setwatermark ( clt -> clt_srvbev , EV_READ , 0 , clt -> clt_sndbufsiz ) ; bufferevent_settimeout ( clt -> clt_srvbev , srv_conf -> timeout . tv_sec , srv_conf -> timeout . tv_sec ) ; bufferevent_enable ( clt -> clt_srvbev , EV_READ ) ; bufferevent_disable ( clt -> clt_bev , EV_READ ) ; done : server_reset_http ( clt ) ; return ( 0 ) ; fail : bufferevent_disable <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2056,<S2SV_StartBug> io -> io_cleanup = port_cleanup ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> io -> io_cleanup = port_cleanup ; 
2057,"<S2SV_StartBug> ""<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>timerID<S2SV_blank>=<S2SV_blank>setInterval(\'checkSession()\',<S2SV_blank>%s);\\n"" <S2SV_EndBug> <S2SV_StartBug> if ( s_poll_interval == NULL ) <S2SV_EndBug> <S2SV_StartBug> session_state , op_iframe_id , s_poll_interval , redirect_uri , <S2SV_EndBug> ","<S2SV_ModStart> ""<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>timerID<S2SV_blank>=<S2SV_blank>setInterval(\'checkSession()\',<S2SV_blank>%d);\\n"" <S2SV_ModEnd> <S2SV_ModStart> int poll_interval = s_poll_interval ? strtol ( s_poll_interval , NULL , 10 ) : 0 ; if ( ( poll_interval <= 0 ) || ( poll_interval > 3600 * 24 ) ) poll_interval = 3000 <S2SV_ModEnd> <S2SV_ModStart> poll_interval <S2SV_ModEnd> "
2058,<S2SV_StartBug> exit ( i ) ; <S2SV_EndBug> ,"<S2SV_ModStart> # ifdef HAVE_MKDTEMP if ( no_rc_dir && tmp_dir != rc_dir ) if ( rmdir ( tmp_dir ) != 0 ) { fprintf ( stderr , ""Can\'t<S2SV_blank>remove<S2SV_blank>temporary<S2SV_blank>directory<S2SV_blank>(%s)!\\n"" , tmp_dir ) ; exit ( 1 ) ; } # endif "
2059,"<S2SV_StartBug> remaining = tvb_captured_length_remaining ( tvb , offset ) ; <S2SV_EndBug> ",<S2SV_ModStart> tvb_reported_length_remaining <S2SV_ModEnd> 
2060,<S2SV_StartBug> new_timer -> it_overrun = - 1 ; <S2SV_EndBug> ,<S2SV_ModStart> 1LL <S2SV_ModEnd> 
2061,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && in -> linesize [ plane ] 
2062,<S2SV_StartBug> struct o2nm_cluster * cluster = to_o2nm_cluster_from_node ( node ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tmp && tmp == cluster -> cl_has_local && <S2SV_EndBug> <S2SV_StartBug> return - EBUSY ; <S2SV_EndBug> <S2SV_StartBug> if ( tmp && ! cluster -> cl_has_local ) { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> <S2SV_StartBug> return count ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if ( ! cluster ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> { ret = <S2SV_ModEnd> <S2SV_ModStart> goto out ; } <S2SV_ModStart> goto out <S2SV_ModEnd> <S2SV_ModStart> ret = count ; out : o2nm_unlock_subsystem ( ) ; return ret <S2SV_ModEnd> 
2063,<S2SV_StartBug> if ( ! vcpu -> arch . time_page ) <S2SV_EndBug> ,<S2SV_ModStart> pv_time_enabled <S2SV_ModEnd> 
2064,"<S2SV_StartBug> while ( nr > 0 ) { <S2SV_EndBug> <S2SV_StartBug> c = tty -> ops -> write ( tty , b , nr ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct n_tty_data * ldata = tty -> disc_data ; <S2SV_ModStart> mutex_lock ( & ldata -> output_lock ) ; <S2SV_ModStart> ) ; mutex_unlock ( & ldata -> output_lock 
2065,"<S2SV_StartBug> s_alDriver = Cvar_Get ( ""s_alDriver"" , ALDRIVER_DEFAULT , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> <S2SV_StartBug> s_alDevice = Cvar_Get ( ""s_alDevice"" , """" , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> ","<S2SV_ModStart> | CVAR_PROTECTED <S2SV_ModStart> if ( COM_CompareExtension ( s_alDriver -> string , "".pk3"" ) ) { Com_Printf ( ""Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\""%s\\"""" , s_alDriver -> string ) ; return qfalse ; } "
2066,<S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2067,"<S2SV_StartBug> subobj_type = EXTRACT_8BITS ( obj_tptr + offset ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Switching<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u)"" , <S2SV_EndBug> <S2SV_StartBug> EXTRACT_8BITS ( obj_tptr + offset + 2 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> bw . i = EXTRACT_32BITS ( obj_tptr + offset + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Wavelength:<S2SV_blank>%u"" , <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_16BITS ( obj_tptr + offset ) ; <S2SV_ModStart> ND_TCHECK_8BITS ( obj_tptr + offset + 2 ) ; <S2SV_ModStart> ) ; ND_TCHECK_8BITS ( obj_tptr + offset + 3 <S2SV_ModStart> ND_TCHECK_32BITS ( obj_tptr + offset + 8 ) ; <S2SV_ModStart> ND_TCHECK_32BITS ( obj_tptr + offset + 4 ) ; 
2068,"<S2SV_StartBug> static BLOCK_SIZE get_rd_var_based_fixed_partition ( VP9_COMP * cpi , <S2SV_EndBug> <S2SV_StartBug> unsigned int var = get_sby_perpixel_diff_variance ( cpi , & cpi -> mb , <S2SV_EndBug> ","<S2SV_ModStart> , MACROBLOCK * x <S2SV_ModStart> x -> plane [ 0 ] . src <S2SV_ModEnd> "
2069,<S2SV_StartBug> nfca_poll -> nfcid1_len = * data ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> min_t ( __u8 , <S2SV_ModStart> , NFC_NFCID1_MAXSIZE ) "
2070,"<S2SV_StartBug> int mi_row , int mi_col , BLOCK_SIZE bsize ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> const int mb_row = mi_row >> 1 ; <S2SV_EndBug> <S2SV_StartBug> x -> mb_activity_ptr = & cpi -> mb_activity_map [ idx_map ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_setup_dst_planes ( xd , get_frame_new_buffer ( cm ) , mi_row , mi_col ) ; <S2SV_EndBug> <S2SV_StartBug> x -> rddiv = cpi -> RDDIV ; <S2SV_EndBug> <S2SV_StartBug> x -> rdmult = cpi -> RDMULT ; <S2SV_EndBug> <S2SV_StartBug> mbmi -> segment_id = vp9_get_segment_id ( cm , map , bsize , mi_row , mi_col ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> MACROBLOCK * const x , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> set_mode_info_offsets ( cm , x <S2SV_ModEnd> <S2SV_ModStart> -> plane <S2SV_ModStart> rd . <S2SV_ModStart> rd . <S2SV_ModStart> get_segment_id <S2SV_ModEnd> <S2SV_ModStart> xd -> tile = * tile ; "
2071,<S2SV_StartBug> if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0 , NULL ) ) ; } if ( "
2072,<S2SV_StartBug> ps_codec -> s_parse . s_cu . i4_cu_qp_delta = cu_qp_delta_abs ; <S2SV_EndBug> ,<S2SV_ModStart> if ( cu_qp_delta_abs < MIN_CU_QP_DELTA_ABS ( ps_sps -> i1_bit_depth_luma_minus8 ) || cu_qp_delta_abs > MAX_CU_QP_DELTA_ABS ( ps_sps -> i1_bit_depth_luma_minus8 ) ) { return IHEVCD_INVALID_PARAMETER ; } 
2073,"<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ret = key_read_state ( key ) ; if ( ret < 0 ) return ret ; <S2SV_ModEnd> 
2074,"<S2SV_StartBug> u64 t = ca -> sum_rtt ; <S2SV_EndBug> <S2SV_StartBug> do_div ( t , ca -> cnt_rtt ) ; <S2SV_EndBug> <S2SV_StartBug> info . tcpv_rtt = t ; <S2SV_EndBug> ",<S2SV_ModStart> if ( info . tcpv_rttcnt > 0 ) { <S2SV_ModStart> info . tcpv_rttcnt <S2SV_ModEnd> <S2SV_ModStart> } 
2075,<S2SV_StartBug> for ( i = 0 ; i <= SERDES_MAX ; i ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> < <S2SV_ModEnd> 
2076,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2077,"<S2SV_StartBug> static void write_ref_frames ( const VP9_COMP * cpi , vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> if ( vp9_segfeature_active ( & cm -> seg , segment_id , SEG_LVL_REF_FRAME ) ) { <S2SV_EndBug> <S2SV_StartBug> assert ( ! is_compound ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> reference_mode == REFERENCE_MODE_SELECT ) { <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , mbmi -> ref_frame [ 0 ] == GOLDEN_FRAME , <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , bit0 , vp9_get_pred_prob_single_ref_p1 ( cm , xd ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , bit1 , vp9_get_pred_prob_single_ref_p2 ( cm , xd ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> VP9_COMMON * cm , const MACROBLOCKD * xd , vpx_writer * w ) { const MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; const int is_compound = has_second_ref ( mbmi ) ; const int segment_id = mbmi -> segment_id ; if ( segfeature_active ( & cm -> seg , segment_id , SEG_LVL_REF_FRAME ) ) { assert ( ! is_compound ) ; assert ( mbmi -> ref_frame [ 0 ] == get_segdata ( & <S2SV_ModEnd> <S2SV_ModStart> ; } else { if ( cm -> reference_mode == REFERENCE_MODE_SELECT ) { vpx_write ( w , is_compound , vp9_get_reference_mode_prob ( cm , xd ) ) ; } else <S2SV_ModStart> == <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> "
2078,"<S2SV_StartBug> strlcpy ( racomp . type , ""acomp"" , sizeof ( racomp . type ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> strncpy <S2SV_ModEnd> 
2079,<S2SV_StartBug> void * H264SwDecMalloc ( u32 size ) { <S2SV_EndBug> <S2SV_StartBug> return malloc ( size ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , u32 num ) { if ( size > UINT32_MAX / num ) { ALOGE ( ""can\'t<S2SV_blank>allocate<S2SV_blank>%u<S2SV_blank>*<S2SV_blank>%u<S2SV_blank>bytes"" , size , num ) ; android_errorWriteLog ( 0x534e4554 , ""27855419"" ) ; return NULL ; } <S2SV_ModEnd> <S2SV_ModStart> * num "
2080,<S2SV_StartBug> hdrlen = sizeof ( * h . h2 ) ; <S2SV_EndBug> ,<S2SV_ModStart> h . h2 -> tp_padding = 0 ; 
2081,<S2SV_StartBug> pinctrl_unregister ( gpio_dev -> pctrl ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2082,"<S2SV_StartBug> strcpy ( m , name ) ; <S2SV_EndBug> ","<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> , nlen + 1 "
2083,"<S2SV_StartBug> nmv_context * fc = & cm -> fc . nmvc ; <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_mv_joint_tree , pre_fc -> joints , counts -> joints , fc -> joints ) ; <S2SV_EndBug> <S2SV_StartBug> comp -> sign = adapt_prob ( pre_comp -> sign , c -> sign ) ; <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_mv_class_tree , pre_comp -> classes , c -> classes , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_mv_class0_tree , pre_comp -> class0 , c -> class0 , comp -> class0 ) ; <S2SV_EndBug> <S2SV_StartBug> comp -> bits [ j ] = adapt_prob ( pre_comp -> bits [ j ] , c -> bits [ j ] ) ; <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_mv_fp_tree , pre_comp -> class0_fp [ j ] , c -> class0_fp [ j ] , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_mv_fp_tree , pre_comp -> fp , c -> fp , comp -> fp ) ; <S2SV_EndBug> <S2SV_StartBug> comp -> class0_hp = adapt_prob ( pre_comp -> class0_hp , c -> class0_hp ) ; <S2SV_EndBug> <S2SV_StartBug> comp -> hp = adapt_prob ( pre_comp -> hp , c -> hp ) ; <S2SV_EndBug> ",<S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_merge_probs <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_merge_probs <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_merge_probs <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_merge_probs <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_merge_probs <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs <S2SV_ModEnd> 
2084,<S2SV_StartBug> if ( len != set_arglen [ SET_CMDID ( cmd ) ] ) { <S2SV_EndBug> ,<S2SV_ModStart> cmd < IP_VS_BASE_CTL || cmd > IP_VS_SO_SET_MAX ) return - EINVAL ; if ( len < 0 || len > MAX_ARG_LEN ) return - EINVAL ; if ( 
2085,"<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> warn ( ""[http]<S2SV_blank>Missing<S2SV_blank>final<S2SV_blank>\\""boundary\\""<S2SV_blank>for<S2SV_blank>\\""multipart/form-data\\""!"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> else <S2SV_ModEnd> <S2SV_ModStart> ""[http]<S2SV_blank>Ignorning<S2SV_blank>broken<S2SV_blank>multipart/form-data"" ) ; break ; } } if ( lastPart ) { warn ( "
2086,<S2SV_StartBug> interface = socket -> interface ; <S2SV_EndBug> ,<S2SV_ModStart> if ( message -> interface != NULL ) { interface = message -> interface ; } else { interface = socket -> interface ; } <S2SV_ModEnd> 
2087,<S2SV_StartBug> variance_node node ; <S2SV_EndBug> ,"<S2SV_ModStart> ; memset ( & node , 0 , sizeof ( node ) ) "
2088,"<S2SV_StartBug> const vp9_prob * oldp , <S2SV_EndBug> <S2SV_StartBug> vp9_prob upd ) { <S2SV_EndBug> <S2SV_StartBug> vp9_prob bestnewp , newplist [ ENTROPY_NODES ] , oldplist [ ENTROPY_NODES ] ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( newplist , oldp , sizeof ( vp9_prob ) * UNCONSTRAINED_NODES ) ; <S2SV_EndBug> <S2SV_StartBug> step = ( * bestp > oldp [ PIVOT_NODE ] ? - 1 : 1 ) ; <S2SV_EndBug> <S2SV_StartBug> * bestp = bestnewp ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_prob * oldp , vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_prob upd , int stepsize ) { int <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> if ( * bestp > oldp [ PIVOT_NODE ] ) { step = - stepsize ; for ( newp = * bestp ; newp > <S2SV_ModEnd> <S2SV_ModStart> } else { step = stepsize ; for ( newp = * bestp ; newp < oldp [ PIVOT_NODE ] ; newp += step ) { if ( newp < 1 || newp > 255 ) continue ; newplist [ PIVOT_NODE ] = newp ; vp9_model_to_full_probs ( newplist , newplist ) ; for ( i = UNCONSTRAINED_NODES , new_b = 0 ; i < ENTROPY_NODES ; ++ i ) new_b += cost_branch256 ( ct + 2 * i , newplist [ i ] ) ; new_b += cost_branch256 ( ct + 2 * PIVOT_NODE , newplist [ PIVOT_NODE ] ) ; update_b = prob_diff_update_cost ( newp , oldp [ PIVOT_NODE ] ) + vp9_cost_upd256 ; savings = old_b - new_b - update_b ; if ( savings > bestsavings ) { bestsavings = savings ; bestnewp = newp ; } } } * bestp = bestnewp <S2SV_ModEnd> "
2089,"<S2SV_StartBug> static int target_xcopy_locate_se_dev_e4 ( const unsigned char * dev_wwn , <S2SV_EndBug> <S2SV_StartBug> struct se_device * * found_dev ) <S2SV_EndBug> <S2SV_StartBug> struct xcopy_dev_search_info info ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> struct se_session * sess , <S2SV_ModStart> _found_dev , struct percpu_ref * * _found_lun_ref <S2SV_ModEnd> <S2SV_ModStart> se_dev_entry * deve ; struct se_node_acl * nacl ; struct se_lun * this_lun = NULL ; struct se_device * found_dev = NULL ; if ( ! sess ) goto err_out ; pr_debug ( ""XCOPY<S2SV_blank>0xe4:<S2SV_blank>searching<S2SV_blank>for:<S2SV_blank>%*ph\\n"" , XCOPY_NAA_IEEE_REGEX_LEN , dev_wwn ) ; nacl = sess -> se_node_acl ; rcu_read_lock ( ) ; hlist_for_each_entry_rcu ( deve , & nacl -> lun_entry_hlist , link ) { struct se_device * this_dev ; int rc ; this_lun = rcu_dereference ( deve -> se_lun ) ; this_dev = rcu_dereference_raw ( this_lun -> lun_se_dev ) ; rc = target_xcopy_locate_se_dev_e4_iter ( this_dev , dev_wwn ) ; if ( rc ) { if ( percpu_ref_tryget_live ( & this_lun -> lun_ref ) ) found_dev = this_dev ; break ; } } rcu_read_unlock ( ) ; if ( found_dev == NULL ) goto err_out ; pr_debug ( ""lun_ref<S2SV_blank>held<S2SV_blank>for<S2SV_blank>se_dev:<S2SV_blank>%p<S2SV_blank>se_dev->se_dev_group:<S2SV_blank>%p\\n"" , found_dev , & found_dev -> dev_group ) ; * _found_dev = found_dev ; * _found_lun_ref = & this_lun -> lun_ref <S2SV_ModEnd> <S2SV_ModStart> err_out : <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2090,<S2SV_StartBug> if ( idx >= ARRAY_SIZE ( hwsim_world_regdom_custom ) ) <S2SV_EndBug> <S2SV_StartBug> param . regd = hwsim_world_regdom_custom [ idx ] ; <S2SV_EndBug> ,<S2SV_ModStart> { kfree ( hwname ) ; <S2SV_ModStart> } 
2091,<S2SV_StartBug> reason = malloc ( ( uint64_t ) reasonLen + 1 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( reasonLen > 1 << 20 ) { rfbClientLog ( ""VNC<S2SV_blank>connection<S2SV_blank>failed,<S2SV_blank>but<S2SV_blank>sent<S2SV_blank>reason<S2SV_blank>length<S2SV_blank>of<S2SV_blank>%u<S2SV_blank>exceeds<S2SV_blank>limit<S2SV_blank>of<S2SV_blank>1MB"" , ( unsigned int ) reasonLen ) ; return ; } <S2SV_ModStart>  <S2SV_ModEnd> "
2092,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> if ( cpu_has_secondary_exec_ctrls ( ) ) { if ( kvm_vcpu_apicv_active ( vcpu ) ) vmcs_set_bits ( SECONDARY_VM_EXEC_CONTROL , SECONDARY_EXEC_APIC_REGISTER_VIRT | SECONDARY_EXEC_VIRTUAL_INTR_DELIVERY ) ; else vmcs_clear_bits ( SECONDARY_VM_EXEC_CONTROL , SECONDARY_EXEC_APIC_REGISTER_VIRT | SECONDARY_EXEC_VIRTUAL_INTR_DELIVERY ) ; } if ( cpu_has_vmx_msr_bitmap ( ) ) vmx_set_msr_bitmap ( vcpu ) ; "
2093,"<S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 3 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_24BITS ( p + 2 <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( p + <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_32BITS ( p + 2 <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( p + <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( p + <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_32BITS ( p + 2 <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( p + <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 
2094,"<S2SV_StartBug> char * dbuf ; <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = process_one_ticket ( ac , secret , & p , end , <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> ret = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return ret ; } return 0 <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2095,<S2SV_StartBug> for ( arc = 0 ; arc < dfa_state -> s_narcs ; ++ arc ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( ch_type == suite && TYPE ( tree ) == funcdef ) { ch_type = func_body_suite ; } 
2096,<S2SV_StartBug> bitlen2 = VARBITLEN ( arg2 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; if ( bitlen1 > VARBITMAXLEN - bitlen2 ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""bit<S2SV_blank>string<S2SV_blank>length<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , VARBITMAXLEN ) ) "
2097,<S2SV_StartBug> return alg -> cra_rng . rng_make_random ? <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2098,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 4 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""horAcc32"" , ""%s"" , ""cc%(4*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> return 1 ; "
2099,<S2SV_StartBug> get_page ( page ) ; <S2SV_EndBug> ,<S2SV_ModStart> { if ( unlikely ( ! try_get_page ( page ) ) ) { page = ERR_PTR ( - ENOMEM ) ; goto out ; } } <S2SV_ModEnd> 
2100,"<S2SV_StartBug> err = scm_send ( sock , msg , siocb -> scm ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false "
2101,"<S2SV_StartBug> if ( credit < 0 ) <S2SV_EndBug> <S2SV_StartBug> state = decrease_reservation ( - credit , GFP_BALLOON ) ; <S2SV_EndBug> ","<S2SV_ModStart> { long n_pages ; n_pages = min ( - credit , si_mem_available ( ) ) ; <S2SV_ModStart> n_pages <S2SV_ModEnd> <S2SV_ModStart> if ( state == BP_DONE && n_pages != - credit && n_pages < totalreserve_pages ) state = BP_EAGAIN ; } "
2102,<S2SV_StartBug> ps_dec -> u2_disp_height = i4_cropped_ht ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ( u2_pic_wd << ps_seq -> u1_mb_aff_flag ) > H264_MAX_FRAME_WIDTH ) { return IVD_STREAM_WIDTH_HEIGHT_NOT_SUPPORTED ; } 
2103,"<S2SV_StartBug> void generic_pipe_buf_get ( struct pipe_inode_info * pipe , struct pipe_buffer * buf ) <S2SV_EndBug> <S2SV_StartBug> get_page ( buf -> page ) ; <S2SV_EndBug> ",<S2SV_ModStart> bool <S2SV_ModEnd> <S2SV_ModStart> return try_get_page <S2SV_ModEnd> 
2104,<S2SV_StartBug> byteStrm = byteStrmStart = ( u8 * ) H264SwDecMalloc ( sizeof ( u8 ) * strmLen ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , <S2SV_ModEnd> "
2105,"<S2SV_StartBug> static INLINE void add_token ( TOKENEXTRA * * t , const vp9_prob * context_tree , <S2SV_EndBug> <S2SV_StartBug> int16_t extra , uint8_t token , <S2SV_EndBug> ",<S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> int32_t <S2SV_ModEnd> 
2106,<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> int rowstep ; <S2SV_EndBug> ,<S2SV_ModStart> jas_matind_t i ; jas_matind_t <S2SV_ModEnd> <S2SV_ModStart> jas_matind_t <S2SV_ModEnd> 
2107,<S2SV_StartBug> struct siginfo info ; <S2SV_EndBug> ,<S2SV_ModStart> = { } 
2108,<S2SV_StartBug> # ifdef CONFIG_SMP <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2109,"<S2SV_StartBug> rc = expandRegular ( fi , dest , psm , nodigest , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> rc = expandRegular ( fi , dest , psm , nodigest , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> rc = expandRegular ( fi , dest , psm , nodigest , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> 1 , <S2SV_ModStart> 1 , <S2SV_ModStart> 0 , "
2110,"<S2SV_StartBug> const uint8_t * const src = & p -> src . buf [ raster_block_offset ( BLOCK_8X8 , i , <S2SV_EndBug> <S2SV_StartBug> uint8_t * const dst = & pd -> dst . buf [ raster_block_offset ( BLOCK_8X8 , i , <S2SV_EndBug> <S2SV_StartBug> const InterpKernel * kernel = vp9_get_interp_kernel ( mi -> mbmi . interp_filter ) ; <S2SV_EndBug> <S2SV_StartBug> const uint8_t * pre = & pd -> pre [ ref ] . buf [ raster_block_offset ( BLOCK_8X8 , i , <S2SV_EndBug> <S2SV_StartBug> vp9_build_inter_predictor ( pre , pd -> pre [ ref ] . stride , <S2SV_EndBug> <S2SV_StartBug> & xd -> block_refs [ ref ] -> sf , width , height , ref , <S2SV_EndBug> <S2SV_StartBug> mi_row * MI_SIZE + 4 * ( i / 2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_subtract_block ( height , width , <S2SV_EndBug> <S2SV_StartBug> dst , pd -> dst . stride ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t * coeff ; <S2SV_EndBug> <S2SV_StartBug> x -> fwd_txm4x4 ( raster_block_offset_int16 ( BLOCK_8X8 , k , p -> src_diff ) , <S2SV_EndBug> <S2SV_StartBug> vp9_regular_quantize_b_4x4 ( x , 0 , k , so -> scan , so -> iscan ) ; <S2SV_EndBug> <S2SV_StartBug> thissse += ssz ; <S2SV_EndBug> ","<S2SV_ModStart> vp9_raster_block_offset <S2SV_ModEnd> <S2SV_ModStart> vp9_raster_block_offset <S2SV_ModEnd> <S2SV_ModStart> vp9_filter_kernels [ <S2SV_ModEnd> <S2SV_ModStart> ] <S2SV_ModEnd> <S2SV_ModStart> vp9_raster_block_offset <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_highbd_build_inter_predictor <S2SV_ModEnd> <S2SV_ModStart> ref , <S2SV_ModEnd> <S2SV_ModStart> , xd -> bd <S2SV_ModStart> else { vp9_build_inter_predictor ( pre , pd -> pre [ ref ] . stride , dst , pd -> dst . stride , & mi -> bmi [ i ] . as_mv [ ref ] . as_mv , & xd -> block_refs [ ref ] -> sf , width , height , ref , kernel , MV_PRECISION_Q3 , mi_col * MI_SIZE + 4 * ( i % 2 ) , mi_row * MI_SIZE + 4 * ( i / 2 ) ) ; } # else vp9_build_inter_predictor ( pre , pd -> pre [ ref ] . stride , dst , pd -> dst . stride , & mi -> bmi [ i ] . as_mv [ ref ] . as_mv , & xd -> block_refs [ ref ] -> sf , width , height , ref , kernel , MV_PRECISION_Q3 , mi_col * MI_SIZE + 4 * ( i % 2 ) , mi_row * MI_SIZE + 4 * ( i / 2 ) ) ; # endif } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_highbd_subtract_block ( height , width , vp9_raster_block_offset_int16 <S2SV_ModEnd> <S2SV_ModStart> dst , pd -> dst . stride , xd -> bd ) ; } else { vpx_subtract_block ( height , width , vp9_raster_block_offset_int16 ( BLOCK_8X8 , i , p -> src_diff ) , 8 , src , p -> src . stride , dst , pd -> dst . stride ) ; } # else vpx_subtract_block ( height , width , vp9_raster_block_offset_int16 ( BLOCK_8X8 , i , p -> src_diff ) , 8 , src , p -> src . stride , dst , pd -> dst . stride ) ; # endif <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> vp9_raster_block_offset_int16 <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { thisdistortion += vp9_highbd_block_error ( coeff , BLOCK_OFFSET ( pd -> dqcoeff , k ) , 16 , & ssz , xd -> bd ) ; } else { <S2SV_ModStart> } # else thisdistortion += vp9_block_error ( coeff , BLOCK_OFFSET ( pd -> dqcoeff , k ) , 16 , & ssz ) ; # endif "
2111,<S2SV_StartBug> sixel_buffer = ( char * ) RelinquishMagickMemory ( sixel_buffer ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; sixel_pixels = ( unsigned char * ) RelinquishMagickMemory ( sixel_pixels 
2112,<S2SV_StartBug> const char * old_name ; <S2SV_EndBug> <S2SV_StartBug> old_name = fsnotify_oldname_init ( old_dentry -> d_name . name ) ; <S2SV_EndBug> <S2SV_StartBug> fsnotify_oldname_free ( old_name ) ; <S2SV_EndBug> ,"<S2SV_ModStart> struct name_snapshot <S2SV_ModEnd> <S2SV_ModStart> take_dentry_name_snapshot ( & old_name , old_dentry ) ; error = simple_rename ( d_inode ( old_dir ) , old_dentry , d_inode ( new_dir ) , dentry , 0 ) ; if ( error ) { release_dentry_name_snapshot ( & old_name ) ; goto exit ; } d_move ( old_dentry , dentry ) ; fsnotify_move ( d_inode ( old_dir ) , d_inode ( new_dir ) , old_name . name <S2SV_ModEnd> <S2SV_ModStart> release_dentry_name_snapshot ( & <S2SV_ModEnd> "
2113,<S2SV_StartBug> if ( ! offset ) { <S2SV_EndBug> ,<S2SV_ModStart> || ! ht 
2114,<S2SV_StartBug> * flags &= ~ FOLL_WRITE ; <S2SV_EndBug> ,<S2SV_ModStart> |= FOLL_COW <S2SV_ModEnd> 
2115,"<S2SV_StartBug> sprintf ( op -> buf_asm , ""packed-switch-payload<S2SV_blank>%d,<S2SV_blank>%d"" , array_size , first_key ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( op -> buf_asm , ""sparse-switch-payload<S2SV_blank>%d"" , array_size ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i"" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i"" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i"" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i"" , vA ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>%#x"" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>%#04hx"" , vA , sB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i:v%i,<S2SV_blank>0x%"" PFMT64x , vA , vA + 1 , lB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i"" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%#x"" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%#x"" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i}"" , buf [ 4 ] & 0x0f ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i,<S2SV_blank>v%i}"" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}"" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 , buf [ 5 ] & 0x0f ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}"" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{}"" ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "",<S2SV_blank>[%04x]"" , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i..v%i},<S2SV_blank>[%04x]"" , vC , vC + vA - 1 , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i}"" , buf [ 4 ] & 0x0f ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i,<S2SV_blank>v%i}"" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}"" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}"" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{}"" ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "",<S2SV_blank>[%04x]"" , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>string+%i"" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>0x%"" PFMT64x , vA , offset ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>class+%i"" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>%s"" , vA , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>field+%i"" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>%s"" , vA , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>[obj+%04x]"" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>[0x%"" PFMT64x ""]"" , vA , vB , offset ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>thing+%i"" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>0x%"" PFMT64x , vA , offset ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%s"" , vA , vB , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>class+%i"" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%s"" , vA , vB , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>field+%i"" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>string+%i"" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>v%i,<S2SV_blank>0x%"" PFMT64x , vA , offset ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i..v%i},<S2SV_blank>%s"" , vC , vC + vA - 1 , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i..v%i},<S2SV_blank>class+%i"" , vC , vC + vA - 1 , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i..v%i},<S2SV_blank>%s"" , vC , vC + vA - 1 , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i..v%i},<S2SV_blank>method+%i"" , vC , vC + vA - 1 , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i}"" , buf [ 4 ] & 0x0f ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i,<S2SV_blank>v%i}"" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}"" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}"" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}"" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ""<S2SV_blank>{}"" ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "",<S2SV_blank>%s<S2SV_blank>;<S2SV_blank>0x%x"" , flag_str , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "",<S2SV_blank>class+%i"" , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "",<S2SV_blank>%s<S2SV_blank>;<S2SV_blank>0x%x"" , flag_str , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "",<S2SV_blank>method+%i"" , vB ) ; <S2SV_EndBug> ","<S2SV_ModStart> snprintf <S2SV_ModEnd> <S2SV_ModStart> sizeof ( op -> buf_asm ) , <S2SV_ModStart> snprintf <S2SV_ModEnd> <S2SV_ModStart> , sizeof ( op -> buf_asm ) <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> <S2SV_ModStart> snprintf ( str , sizeof ( str ) <S2SV_ModEnd> "
2116,"<S2SV_StartBug> gf_bs_read_data ( bs , ptr -> key_info + 21 , iv_size ) ; <S2SV_EndBug> <S2SV_StartBug> return GF_OK ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ( iv_size != 8 ) && ( iv_size != 16 ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( ""[iso<S2SV_blank>file]<S2SV_blank>Invalid<S2SV_blank>constant<S2SV_blank>IV<S2SV_blank>size<S2SV_blank>%d,<S2SV_blank>must<S2SV_blank>be<S2SV_blank>8<S2SV_blank>or<S2SV_blank>16\\n"" , ( u32 ) iv_size ) ) ; ptr -> key_info [ 20 ] = 16 ; return GF_NON_COMPLIANT_BITSTREAM ; } <S2SV_ModStart> else if ( ( iv_size != 0 ) && ( iv_size != 8 ) && ( iv_size != 16 ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( ""[iso<S2SV_blank>file]<S2SV_blank>Invalid<S2SV_blank>IV<S2SV_blank>size<S2SV_blank>%d,<S2SV_blank>must<S2SV_blank>be<S2SV_blank>0,<S2SV_blank>8<S2SV_blank>or<S2SV_blank>16\\n"" , ( u32 ) iv_size ) ) ; return GF_NON_COMPLIANT_BITSTREAM ; } "
2117,<S2SV_StartBug> if ( ret == - EEXIST ) <S2SV_EndBug> ,<S2SV_ModStart> || ret == - EOVERFLOW 
2118,<S2SV_StartBug> if ( i4_prev_row != i4_row ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> < <S2SV_ModEnd> <S2SV_ModStart> else if ( i4_prev_row > i4_row ) { android_errorWriteLog ( 0x534e4554 , ""26070014"" ) ; } "
2119,"<S2SV_StartBug> struct hstate * h = hstate_vma ( vma ) ; <S2SV_EndBug> <S2SV_StartBug> struct page * page ; <S2SV_EndBug> <S2SV_StartBug> if ( hugetlb_get_quota ( inode -> i_mapping , chg ) ) <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( inode -> i_mapping , chg ) ; <S2SV_EndBug> <S2SV_StartBug> set_page_private ( page , ( unsigned long ) mapping ) ; <S2SV_EndBug> ",<S2SV_ModStart> hugepage_subpool * spool = subpool_vma ( vma ) ; struct <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> hugepage_subpool_get_pages ( spool <S2SV_ModEnd> <S2SV_ModStart> hugepage_subpool_put_pages ( spool <S2SV_ModEnd> <S2SV_ModStart> spool <S2SV_ModEnd> 
2120,"<S2SV_StartBug> if ( svm_set_msr ( & svm -> vcpu , & msr ) ) { <S2SV_EndBug> ",<S2SV_ModStart> kvm_set_msr <S2SV_ModEnd> 
2121,<S2SV_StartBug> uchar * dp ; <S2SV_EndBug> ,<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
2122,<S2SV_StartBug> len -= EVP_CCM_TLS_EXPLICIT_IV_LEN ; <S2SV_EndBug> <S2SV_StartBug> if ( ! EVP_CIPHER_CTX_encrypting ( c ) ) <S2SV_EndBug> <S2SV_StartBug> len -= cctx -> M ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len < EVP_CCM_TLS_EXPLICIT_IV_LEN ) return 0 ; <S2SV_ModStart> { if ( len < cctx -> M ) return 0 ; <S2SV_ModStart> } 
2123,"<S2SV_StartBug> MATLAB_KO : ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> <S2SV_ModStart> } 
2124,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2125,<S2SV_StartBug> char * ptr ; <S2SV_EndBug> ,"<S2SV_ModStart> return bad_format_check ( ""^"" SAFE_STRING ""%s"" SAFE_STRING ""%lu"" SAFE_STRING ""%lu"" SAFE_STRING ""$"" , fmt <S2SV_ModEnd> "
2126,"<S2SV_StartBug> buf = PyObject_CallObject ( tok -> decoding_readline , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart> _PyObject_CallNoArg <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2127,"<S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2128,"<S2SV_StartBug> struct ip_options * opt = NULL ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( opt -> __data , buf , buf_len ) ; <S2SV_EndBug> <S2SV_StartBug> opt -> optlen = opt_len ; <S2SV_EndBug> <S2SV_StartBug> opt -> cipso = sizeof ( struct iphdr ) ; <S2SV_EndBug> <S2SV_StartBug> kfree ( opt ) ; <S2SV_EndBug> ","<S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> if ( opt ) call_rcu ( & opt -> rcu , opt_kfree_rcu <S2SV_ModEnd> "
2129,"<S2SV_StartBug> char * curl_env = r_sys_getenv ( ""R2_CURL"" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> return socket_http_get_recursive ( url , code , rlen , SOCKET_HTTP_MAX_REDIRECTS <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2130,"<S2SV_StartBug> flags = AV_RL16 ( p + sizeof ( ff_asf_guid ) * 3 + 24 ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( ! memcmp ( p , ff_asf_ext_stream_header , sizeof ( ff_asf_guid ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> if ( end - p >= ( sizeof ( ff_asf_guid ) * 3 + 26 ) ) { <S2SV_ModStart> } <S2SV_ModStart> if ( chunksize > end - p ) { av_log ( NULL , AV_LOG_ERROR , ""Corrupt<S2SV_blank>stream<S2SV_blank>(header<S2SV_blank>chunksize<S2SV_blank>%"" PRId64 ""<S2SV_blank>is<S2SV_blank>invalid)\\n"" , chunksize ) ; return AVERROR_INVALIDDATA ; } "
2131,"<S2SV_StartBug> kref_put ( & reservations -> refs , resv_map_release ) ; <S2SV_EndBug> ",<S2SV_ModStart> resv_map_put ( vma <S2SV_ModEnd> 
2132,"<S2SV_StartBug> int file_is_raw ( struct VpxInputContext * input ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! vpx_codec_peek_stream_info ( decoder -> interface ( ) , <S2SV_EndBug> ",<S2SV_ModStart> static <S2SV_ModStart> codec_interface <S2SV_ModEnd> 
2133,"<S2SV_StartBug> vpx_memcpy ( seg -> feature_data , feature_data , sizeof ( seg -> feature_data ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> 
2134,"<S2SV_StartBug> & key_datums , & key_nulls , & key_count ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; if ( key_count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , key_count , ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) "
2135,<S2SV_StartBug> return ( ( iova < mem -> iova ) || <S2SV_EndBug> <S2SV_StartBug> ( ( iova + length ) > ( mem -> iova + mem -> length ) ) ) ? <S2SV_EndBug> ,<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> || length > mem -> length || iova > <S2SV_ModEnd> <S2SV_ModStart> - length ) return - EFAULT ; return <S2SV_ModEnd> 
2136,<S2SV_StartBug> s -> filesize = - 1 ; <S2SV_EndBug> ,<S2SV_ModStart> UINT64_MAX <S2SV_ModEnd> 
2137,"<S2SV_StartBug> static void write_tile_info ( VP9_COMMON * cm , struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , cm -> log2_tile_rows != 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , cm -> log2_tile_rows != 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> const VP9_COMMON * const <S2SV_ModEnd> <S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> 
2138,"<S2SV_StartBug> memcpy ( & global_options , & new_global_options , sizeof ( GLOBAL_OPTIONS ) ) ; <S2SV_EndBug> <S2SV_StartBug> number_of_sections = num ; <S2SV_EndBug> ","<S2SV_ModStart> , sizeof ( GLOBAL_OPTIONS ) ) ; memset ( & new_global_options , 0 <S2SV_ModStart> memset ( & new_service_options , 0 , sizeof ( SERVICE_OPTIONS ) ) ; "
2139,"<S2SV_StartBug> int j , len = apdu . resp [ i + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( file -> name , d , len ) ; <S2SV_EndBug> <S2SV_StartBug> file -> namelen = len ; <S2SV_EndBug> ","<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> file -> namelen = MIN ( sizeof file -> name , len ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModEnd> "
2140,<S2SV_StartBug> dentry -> d_fsdata = ( void * ) ns -> ops ; <S2SV_EndBug> ,<S2SV_ModStart> d_flags |= DCACHE_RCUACCESS ; dentry -> 
2141,"<S2SV_StartBug> LPSTR tmp = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( NULL == tmp ) <S2SV_EndBug> ",<S2SV_ModStart> = NULL ; LPSTR tmp2 <S2SV_ModStart> { tmp2 <S2SV_ModEnd> <S2SV_ModStart> if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 ; } <S2SV_ModStart> tmp2 <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> tmp2 <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> tmp2 <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> tmp2 <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> tmp2 <S2SV_ModEnd> <S2SV_ModStart> ! tmp2 ) free ( tmp ) ; tmp = tmp2 ; if ( 
2142,<S2SV_StartBug> uint8_t verify_crls = cred -> x509Credential . x509CrlVerifyMode ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> verify_crls = cred -> x509Credential . x509CrlVerifyMode ; 
2143,"<S2SV_StartBug> char * pathname = RUNTIME_PATH ""/lock/lxc/var/lib/lxc/"" ; <S2SV_EndBug> ","<S2SV_ModStart> ""/lxc/lock/var/lib/lxc/"" <S2SV_ModEnd> "
2144,"<S2SV_StartBug> _iov -> iov_len = min ( ( u64 ) len , size ) ; <S2SV_EndBug> ",<S2SV_ModStart> - s 
2145,<S2SV_StartBug> if ( err < 0 ) <S2SV_EndBug> <S2SV_StartBug> return err ; <S2SV_EndBug> ,<S2SV_ModStart> { kfree ( partdata ) ; <S2SV_ModStart> } 
2146,<S2SV_StartBug> if ( unlikely ( chunk_length < required_length ) ) <S2SV_EndBug> ,<S2SV_ModStart> chunk -> pdiscard ) ) return 0 ; if ( unlikely ( 
2147,"<S2SV_StartBug> show ( obj , base , name , cb_data ) ; <S2SV_EndBug> ","<S2SV_ModStart> strbuf_addstr ( base , name ) ; <S2SV_ModStart> -> buf , cb_data <S2SV_ModEnd> "
2148,<S2SV_StartBug> else if ( ( cmd == HIDIOCGUSAGES || cmd == HIDIOCSUSAGES ) && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2149,<S2SV_StartBug> switch ( bps / 8 ) <S2SV_EndBug> ,"<S2SV_ModStart> if ( bytes_per_pixel > sizeof ( swapbuff ) ) { TIFFError ( ""reverseSamplesBytes"" , ""bytes_per_pixel<S2SV_blank>too<S2SV_blank>large"" ) ; return ( 1 ) ; } "
2150,"<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>[|truncated]"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ND_TCHECK ( opt -> rpl_dio_len ) ; <S2SV_ModStart> ""%s"" , rpl_tstr <S2SV_ModEnd> "
2151,<S2SV_StartBug> done : <S2SV_EndBug> <S2SV_StartBug> ctxt -> memopp -> addr . mem . ea += ctxt -> _eip ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> done : 
2152,<S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart> if ( strlen ( password ) > MAX_PASSWORD_LEN ) return 0 ; 
2153,<S2SV_StartBug> value = ( unsigned short ) ( ( buffer [ 1 ] << 8 ) | buffer [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffff ) ; <S2SV_EndBug> <S2SV_StartBug> value = ( unsigned short ) ( ( ( ( unsigned char * ) buffer ) [ 0 ] << 8 ) | <S2SV_EndBug> <S2SV_StartBug> ( ( unsigned char * ) buffer ) [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffff ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; value |= ( unsigned short ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> buffer <S2SV_ModEnd> <S2SV_ModStart> ; value |= ( unsigned short ) buffer <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2154,"<S2SV_StartBug> btrfs_file_extent_compression ( leaf , fi ) == 0 && <S2SV_EndBug> <S2SV_StartBug> if ( test_bit ( BTRFS_ROOT_REF_COWS , & root -> state ) ) <S2SV_EndBug> <S2SV_StartBug> new_size ) ; <S2SV_EndBug> ","<S2SV_ModStart> btrfs_file_extent_encryption ( leaf , fi ) == 0 && btrfs_file_extent_other_encoding ( leaf , fi ) == 0 ) { if ( <S2SV_ModStart> != BTRFS_COMPRESS_NONE && pending_del_nr ) { err = btrfs_del_items ( trans , root , path , pending_del_slot , pending_del_nr ) ; if ( err ) { btrfs_abort_transaction ( trans , root , err ) ; goto error ; } pending_del_nr = 0 ; } err = truncate_inline_extent ( inode , path , & found_key , item_end , new_size ) ; if ( err ) { btrfs_abort_transaction ( trans , root , err ) ; goto error ; } } else <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart>  <S2SV_ModEnd> "
2155,"<S2SV_StartBug> wait_for_unix_gc ( ) ; <S2SV_EndBug> <S2SV_StartBug> unix_state_lock ( other ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_flag ( other , SOCK_DEAD ) ) { <S2SV_EndBug> <S2SV_StartBug> err = 0 ; <S2SV_EndBug> <S2SV_StartBug> unix_state_lock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> unix_peer ( sk ) = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( unix_peer ( other ) != sk && unix_recvq_full ( other ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! timeo ) { <S2SV_EndBug> <S2SV_StartBug> goto out_unlock ; <S2SV_EndBug> <S2SV_StartBug> timeo = unix_wait_for_peer ( other , timeo ) ; <S2SV_EndBug> <S2SV_StartBug> unix_state_unlock ( other ) ; <S2SV_EndBug> ","<S2SV_ModStart> int sk_locked ; <S2SV_ModStart> sk_locked = 0 ; <S2SV_ModStart> restart_locked : <S2SV_ModStart> unlikely ( <S2SV_ModStart> ) <S2SV_ModStart> if ( ! sk_locked ) unix_state_lock ( sk ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; unix_dgram_peer_wake_disconnect_wakeup ( sk , other ) <S2SV_ModStart> unlikely ( <S2SV_ModStart> ) { if ( timeo ) { timeo = unix_wait_for_peer ( other , timeo ) ; err = sock_intr_errno ( timeo ) ; if ( signal_pending ( current ) ) goto out_free ; goto restart ; } <S2SV_ModEnd> <S2SV_ModStart> sk_locked ) { unix_state_unlock ( other ) ; unix_state_double_lock ( sk , other ) ; } if ( unix_peer ( sk ) != other || unix_dgram_peer_wake_me ( sk , other ) <S2SV_ModEnd> <S2SV_ModStart> sk_locked = 1 ; <S2SV_ModStart> if ( ! sk_locked ) { sk_locked = 1 ; goto restart_locked ; } } if ( unlikely ( sk_locked ) ) unix_state_unlock ( sk ) ; <S2SV_ModEnd> <S2SV_ModStart> if ( sk_locked ) unix_state_unlock ( sk ) ; "
2156,<S2SV_StartBug> pinctrl_unregister ( gpio_dev -> pctrl ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2157,<S2SV_StartBug> load_xid_epoch ( & state ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; StaticAssertStmt ( MAX_BACKENDS * 2 <= TXID_SNAPSHOT_MAX_NXIP , ""possible<S2SV_blank>overflow<S2SV_blank>in<S2SV_blank>txid_current_snapshot()"" "
2158,"<S2SV_StartBug> err = - EMSGSIZE ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> hdrincl ) <S2SV_EndBug> <S2SV_StartBug> inet -> hdrincl ? IPPROTO_RAW : sk -> sk_protocol , <S2SV_EndBug> <S2SV_StartBug> ( inet -> hdrincl ? FLOWI_FLAG_KNOWN_NH : 0 ) , <S2SV_EndBug> <S2SV_StartBug> if ( ! inet -> hdrincl ) { <S2SV_EndBug> <S2SV_StartBug> if ( inet -> hdrincl ) <S2SV_EndBug> ",<S2SV_ModStart> int hdrincl ; <S2SV_ModStart> ; hdrincl = inet -> hdrincl <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2159,<S2SV_StartBug> case IO_DISCONNECTED : <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2160,<S2SV_StartBug> if ( ! ( ( pi -> y % ( OPJ_INT32 ) ( comp -> dy << rpy ) == 0 ) || ( ( pi -> y == pi -> ty0 ) && <S2SV_EndBug> ,<S2SV_ModStart> rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx ) != comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy ) != comp -> dy ) { continue ; } if ( 
2161,<S2SV_StartBug> if ( ! chart || ! * chart ) { <S2SV_EndBug> ,<S2SV_ModStart> fix_google_param ( google_out ) ; fix_google_param ( google_sig ) ; fix_google_param ( google_reqId ) ; fix_google_param ( google_version ) ; fix_google_param ( responseHandler ) ; fix_google_param ( outFileName ) ; 
2162,<S2SV_StartBug> if ( ! ( flags & TTM_PAGE_FLAG_DMA32 ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( i < npages ) { <S2SV_EndBug> ,<S2SV_ModStart> && ( npages - i ) >= HPAGE_PMD_NR <S2SV_ModStart> ( npages - i ) >= HPAGE_PMD_NR <S2SV_ModEnd> 
2163,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> die ( ""Oops<S2SV_blank>-<S2SV_blank>bad<S2SV_blank>mode"" , regs , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> siginfo_t info ; void __user * pc = ( void __user * ) instruction_pointer ( regs ) ; <S2SV_ModStart> __show_regs ( regs ) ; info . si_signo = SIGILL ; info . si_errno = 0 ; info . si_code = ILL_ILLOPC ; info . si_addr = pc ; arm64_notify_die <S2SV_ModEnd> <S2SV_ModStart> & info , 0 <S2SV_ModEnd> "
2164,<S2SV_StartBug> status = sBtInterface -> enable ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> false 
2165,"<S2SV_StartBug> l_strnstart ( const char * tstr1 , u_int tl1 , const char * str2 , u_int l2 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ","<S2SV_ModStart> netdissect_options * ndo , <S2SV_ModStart> if ( ! ND_TTEST2 ( * str2 , tl1 ) ) { return 0 ; } "
2166,<S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> iif = l3mdev_master_ifindex ( skb_dst ( skb ) -> dev ) ; <S2SV_EndBug> ,<S2SV_ModStart> { dst = skb_dst ( skb ) ; <S2SV_ModStart> dst ? dst -> dev : skb -> dev ) ; } <S2SV_ModEnd> 
2167,"<S2SV_StartBug> int ntlm_read_message_fields_buffer ( wStream * s , NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug> <S2SV_StartBug> if ( ( fields -> BufferOffset + fields -> Len ) > Stream_Length ( s ) ) <S2SV_EndBug> ",<S2SV_ModStart> static <S2SV_ModStart> const UINT64 offset = ( UINT64 ) <S2SV_ModEnd> <S2SV_ModStart> ( UINT64 ) <S2SV_ModStart> ; if ( offset <S2SV_ModEnd> 
2168,"<S2SV_StartBug> if ( ( tf = fopen ( tfile -> file_path , ""w"" ) ) ) { <S2SV_EndBug> ",<S2SV_ModStart> fopen_safe <S2SV_ModEnd> 
2169,"<S2SV_StartBug> rad_get_vendor_attr ( u_int32_t * vendor , const void * * data , size_t * len ) <S2SV_EndBug> <S2SV_StartBug> attr = ( struct vendor_attribute * ) * data ; <S2SV_EndBug> <S2SV_StartBug> * vendor = ntohl ( attr -> vendor_value ) ; <S2SV_EndBug> <S2SV_StartBug> return ( attr -> attrib_type ) ; <S2SV_EndBug> ","<S2SV_ModStart> , unsigned char * type <S2SV_ModStart> , const void * raw , size_t raw_len <S2SV_ModStart> if ( raw_len < sizeof ( struct vendor_attribute ) ) { return - 1 ; } <S2SV_ModStart> raw <S2SV_ModEnd> <S2SV_ModStart> ; * type = attr -> attrib_type <S2SV_ModStart> if ( ( attr -> attrib_len + 4 ) > raw_len ) { return - 1 ; } "
2170,<S2SV_StartBug> mutex_lock ( & tu -> tread_sem ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & tu -> tread_sem ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2171,"<S2SV_StartBug> strlcpy ( comp1_str , comp1 -> data , comp1 -> length + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( krb5_princ_type ( kdc_context , request -> server ) == KRB5_NT_SRV_HST || <S2SV_EndBug> <S2SV_StartBug> strlcpy ( temp_buf , comp2 -> data , comp2 -> length + 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> != NULL ) memcpy ( comp1_str , comp1 -> data , comp1 -> length ) ; if ( ( krb5_princ_type ( kdc_context , request -> server ) == KRB5_NT_SRV_HST || krb5_princ_type ( kdc_context , request -> server ) == KRB5_NT_SRV_INST || ( krb5_princ_type ( kdc_context , request -> server ) == KRB5_NT_UNKNOWN && kdc_active_realm -> realm_host_based_services != NULL && ( krb5_match_config_pattern ( kdc_active_realm -> realm_host_based_services , comp1_str ) == TRUE || krb5_match_config_pattern ( kdc_active_realm -> realm_host_based_services , KRB5_CONF_ASTERISK ) == TRUE ) ) ) && ( kdc_active_realm -> realm_no_host_referral == NULL || ( krb5_match_config_pattern ( kdc_active_realm -> realm_no_host_referral , KRB5_CONF_ASTERISK ) == FALSE && krb5_match_config_pattern ( kdc_active_realm -> realm_no_host_referral , comp1_str ) == FALSE ) ) ) { if ( memchr ( comp2 -> data , '.' , comp2 -> length ) == NULL ) goto cleanup ; temp_buf = calloc ( 1 , comp2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( comp2 -> data != NULL ) memcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2172,"<S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) MagickMin ( length , MagickPathExtent - 1 ) ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) ( GetQuantumRange ( depth ) + 1 ) ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> pixel . red = scale [ pixel . red ] ; <S2SV_EndBug> <S2SV_StartBug> pixel . green = scale [ pixel . green ] ; <S2SV_EndBug> <S2SV_StartBug> pixel . blue = scale [ pixel . blue ] ; <S2SV_EndBug> ",<S2SV_ModStart> if ( data == ( unsigned char * ) NULL ) break ; <S2SV_ModStart> if ( data == ( unsigned char * ) NULL ) break ; <S2SV_ModStart> <= <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( pixel . red <= GetQuantumRange ( depth ) ) <S2SV_ModStart> if ( pixel . green <= GetQuantumRange ( depth ) ) <S2SV_ModStart> if ( pixel . blue <= GetQuantumRange ( depth ) ) 
2173,"<S2SV_StartBug> size_t ss = CDF_SEC_SIZE ( h ) ; <S2SV_EndBug> <S2SV_StartBug> if ( pos > ss * sst -> sst_len ) { <S2SV_EndBug> <S2SV_StartBug> pos , ss * sst -> sst_len ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> CDF_SHORT_SEC_SIZE <S2SV_ModEnd> <S2SV_ModStart> CDF_SEC_SIZE ( h ) <S2SV_ModEnd> <S2SV_ModStart> CDF_SEC_SIZE ( h ) <S2SV_ModEnd> 
2174,<S2SV_StartBug> ( * offset ) = ( u64 ) stco -> offsets [ sampleNumber - 1 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( ! co64 -> offsets ) return GF_ISOM_INVALID_FILE ; <S2SV_EndBug> ,<S2SV_ModStart> if ( stco -> nb_entries < sampleNumber ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> ) return GF_ISOM_INVALID_FILE ; if ( co64 -> nb_entries < sampleNumber 
2175,"<S2SV_StartBug> memcpy ( newnp , np , sizeof ( struct ipv6_pinfo ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; newnp -> ipv6_mc_list = NULL ; newnp -> ipv6_ac_list = NULL ; newnp -> ipv6_fl_list = NULL 
2176,"<S2SV_StartBug> vpx_memcpy ( cpi -> common . fc . mvc , vp8_default_mv_context , sizeof ( vp8_default_mv_context ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cpi -> lfc_a , & cpi -> common . fc , sizeof ( cpi -> common . fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cpi -> lfc_g , & cpi -> common . fc , sizeof ( cpi -> common . fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cpi -> lfc_n , & cpi -> common . fc , sizeof ( cpi -> common . fc ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
2177,"<S2SV_StartBug> rsrc . type_count = read_rsrc_short ( & rsrc , rsrc . map_offset + 28 ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> { marker = read_rsrc_marker ( & rsrc , rsrc . type_offset + k * 8 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( rsrc . map_offset + 28 > rsrc . rsrc_len ) { psf_log_printf ( psf , ""Bad<S2SV_blank>map<S2SV_blank>offset.\\n"" ) ; goto parse_rsrc_fork_cleanup ; } ; <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> > rsrc . rsrc_len ) { psf_log_printf ( psf , ""Bad<S2SV_blank>rsrc<S2SV_blank>marker.\\n"" ) ; goto parse_rsrc_fork_cleanup ; } ; marker = read_rsrc_marker ( & rsrc , rsrc . type_offset + k * 8 "
2178,"<S2SV_StartBug> int start = 0 ; <S2SV_EndBug> <S2SV_StartBug> kvm_pit_load_count ( kvm , 0 , kvm -> arch . vpit -> pit_state . channels [ 0 ] . count , start ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; int i <S2SV_ModStart> for ( i = 0 ; i < 3 ; i ++ ) <S2SV_ModStart> i <S2SV_ModEnd> <S2SV_ModStart> i <S2SV_ModEnd> 
2179,"<S2SV_StartBug> strcat ( t1_buf_array , t1_line_array ) ; <S2SV_EndBug> ","<S2SV_ModStart> alloc_array ( t1_buf , strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE ) ; <S2SV_ModStart> ) ; alloc_array ( t1_line , strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE "
2180,<S2SV_StartBug> if ( ( s -> options & SSL_OP_EPHEMERAL_RSA ) <S2SV_EndBug> <S2SV_StartBug> s -> s3 -> tmp . use_rsa_tmp = 1 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 0 ; if ( <S2SV_ModEnd> 
2181,"<S2SV_StartBug> ! inode_capable ( VFS_I ( ip ) , CAP_FSETID ) ) <S2SV_EndBug> ",<S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> 
2182,<S2SV_StartBug> release_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> msg -> msg_namelen = 0 ; 
2183,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> else if ( ( too_many_pipe_buffers_hard ( pipe -> user ) || too_many_pipe_buffers_soft ( pipe -> user ) ) && ! capable ( CAP_SYS_RESOURCE ) && ! capable ( CAP_SYS_ADMIN ) ) { ret = - EPERM ; goto out ; } 
2184,<S2SV_StartBug> # ifdef CONFIG_SWAP <S2SV_EndBug> <S2SV_StartBug> * prev = vma ; <S2SV_EndBug> <S2SV_StartBug> * prev = vma ; <S2SV_EndBug> <S2SV_StartBug> * prev = vma ; <S2SV_EndBug> ,<S2SV_ModStart> * prev = vma ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2185,<S2SV_StartBug> sig_none = ( timr -> it_sigev_notify & ~ SIGEV_THREAD_ID ) == SIGEV_NONE ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2186,"<S2SV_StartBug> uint8_t i ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Priority:<S2SV_blank>%d,<S2SV_blank>RES:<S2SV_blank>%d,<S2SV_blank>Sel:<S2SV_blank>%d"" , <S2SV_EndBug> <S2SV_StartBug> tval >> 5 , ( tval >> 3 ) & 0x03 , ( tval & 0x07 ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> u_int <S2SV_ModEnd> <S2SV_ModStart> ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>RES:<S2SV_blank>%u,<S2SV_blank>Sel:<S2SV_blank>%u,<S2SV_blank>Protocol<S2SV_blank>ID:<S2SV_blank>%u"" <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> "
2187,<S2SV_StartBug> if ( ! ( matrix = jas_malloc ( sizeof ( jas_matrix_t ) ) ) ) { <S2SV_EndBug> ,<S2SV_ModStart> numrows < 0 || numcols < 0 ) { return 0 ; } if ( 
2188,"<S2SV_StartBug> int len = mutt_b64_decode ( buffer , encoded ) ; <S2SV_EndBug> ","<S2SV_ModStart> , sizeof ( buffer ) "
2189,<S2SV_StartBug> if ( enable_ertm ) <S2SV_EndBug> ,<S2SV_ModStart> case L2CAP_MODE_STREAMING : 
2190,<S2SV_StartBug> if ( bIntToNull && pDup && pDup -> op == TK_INTEGER ) { <S2SV_EndBug> <S2SV_StartBug> pDup -> flags &= ~ ( EP_IntValue | EP_IsTrue | EP_IsFalse ) ; <S2SV_EndBug> ,"<S2SV_ModStart> assert ( pDup == 0 || ! ExprHasProperty ( pDup , EP_MemToken ) ) ; <S2SV_ModStart> ; pDup -> u . zToken = 0 "
2191,<S2SV_StartBug> return self ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( p_key ) rb_ivar_set ( self , id_key_set , Qtrue ) ; "
2192,<S2SV_StartBug> rhost_old [ 0 ] = '\\0' ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( desc == NULL ) desc = """" ; "
2193,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t\\t<S2SV_blank>packet<S2SV_blank>exceeded<S2SV_blank>snapshot"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , tstr <S2SV_ModEnd> "
2194,"<S2SV_StartBug> uint64 nstrips64 ; <S2SV_EndBug> <S2SV_StartBug> nstrips64 = TIFFhowmany_64 ( bytecount , stripbytes ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( nstrips64 == 0 ) || ( nstrips64 > 0xFFFFFFFF ) ) <S2SV_EndBug> <S2SV_StartBug> newcounts = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips32 , sizeof ( uint64 ) , <S2SV_EndBug> <S2SV_StartBug> newoffsets = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips32 , sizeof ( uint64 ) , <S2SV_EndBug> <S2SV_StartBug> for ( strip = 0 ; strip < nstrips32 ; strip ++ ) { <S2SV_EndBug> <S2SV_StartBug> newoffsets [ strip ] = offset ; <S2SV_EndBug> <S2SV_StartBug> td -> td_stripsperimage = td -> td_nstrips = nstrips32 ; <S2SV_EndBug> ","<S2SV_ModStart> uint32 nstrips <S2SV_ModEnd> <S2SV_ModStart> nstrips = TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip ) ; if ( nstrips <S2SV_ModEnd> <S2SV_ModStart> return ; <S2SV_ModEnd> <S2SV_ModStart> nstrips <S2SV_ModEnd> <S2SV_ModStart> nstrips <S2SV_ModEnd> <S2SV_ModStart> nstrips <S2SV_ModEnd> <S2SV_ModStart> stripbytes ? offset : 0 <S2SV_ModEnd> <S2SV_ModStart> nstrips <S2SV_ModEnd> "
2195,<S2SV_StartBug> static ssize_t aio_setup_single_vector ( struct kiocb * kiocb ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> kiocb -> ki_iovec -> iov_len = kiocb -> ki_left ; <S2SV_EndBug> ,"<S2SV_ModStart> int type , struct file * file , <S2SV_ModStart> int bytes ; bytes = rw_verify_area ( type , file , & kiocb -> ki_pos , kiocb -> ki_left ) ; if ( bytes < 0 ) return bytes ; <S2SV_ModStart> bytes <S2SV_ModEnd> "
2196,<S2SV_StartBug> switch ( c = ( * dis_getc ) ( stream ) ) <S2SV_EndBug> ,"<S2SV_ModStart> if ( count >= dis_umaxd ) { if ( count > dis_umaxd ) goto overflow ; if ( memcmp ( scratch , dis_umax , dis_umaxd ) > 0 ) goto overflow ; } "
2197,"<S2SV_StartBug> if ( ioctl ( socket -> fd , FIONREAD , & size ) == - 1 ) <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
2198,"<S2SV_StartBug> static void write_partition ( VP9_COMMON * cm , MACROBLOCKD * xd , <S2SV_EndBug> <S2SV_StartBug> PARTITION_TYPE p , BLOCK_SIZE bsize , vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> const vp9_prob * const probs = get_partition_probs ( cm , ctx ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , p == PARTITION_SPLIT , probs [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , p == PARTITION_SPLIT , probs [ 2 ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> const VP9_COMMON * const cm , const MACROBLOCKD * const <S2SV_ModEnd> <S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> vpx_prob * const probs = xd -> partition_probs [ ctx ] <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> "
2199,<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> for ( i = NELEMENTS ( ctx -> mmaps ) - 1 ; i >= 0 ; i -- ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vpx_free ( ctx ) ; <S2SV_ModEnd> 
2200,<S2SV_StartBug> void ntlm_free_message_fields_buffer ( NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug> ,<S2SV_ModStart> static 
2201,"<S2SV_StartBug> USB_DT_SECURITY , ( void * * ) & secd ) ; <S2SV_EndBug> ","<S2SV_ModStart> , sizeof ( * secd ) "
2202,"<S2SV_StartBug> vpx_memcpy ( udp , up , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( vdp , vp , 4 ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
2203,<S2SV_StartBug> regs [ value_regno ] . var_off = <S2SV_EndBug> ,"<S2SV_ModStart> coerce_reg_to_size ( & <S2SV_ModStart> , size <S2SV_ModEnd> "
2204,"<S2SV_StartBug> int pkt_len ; <S2SV_EndBug> <S2SV_StartBug> char line [ NETSCREEN_LINE_LENGTH ] ; <S2SV_EndBug> <S2SV_StartBug> pkt_len = parse_netscreen_rec_hdr ( & wth -> phdr , line , cap_int , & cap_dir , <S2SV_EndBug> <S2SV_StartBug> if ( ! parse_netscreen_hex_dump ( wth -> fh , pkt_len , cap_int , <S2SV_EndBug> <S2SV_StartBug> cap_dst , & wth -> phdr , wth -> frame_buffer , err , err_info ) ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> parse_netscreen_packet <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , line "
2205,"<S2SV_StartBug> off_t pos = sys -> tell ( fh ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! fn ) return MSPACK_ERR_NOMEMORY ; <S2SV_EndBug> <S2SV_StartBug> hdr -> filename = fn ; <S2SV_EndBug> <S2SV_StartBug> if ( sys -> read ( fh , & buf [ 0 ] , 9 ) != 9 ) return MSPACK_ERR_READ ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 9 ; i ++ , fn ++ ) if ( ! ( * fn = buf [ i ] ) ) break ; <S2SV_EndBug> <S2SV_StartBug> pos += ( i < 9 ) ? i + 1 : 9 ; <S2SV_EndBug> <S2SV_StartBug> return MSPACK_ERR_SEEK ; <S2SV_EndBug> <S2SV_StartBug> if ( sys -> read ( fh , & buf [ 0 ] , 4 ) != 4 ) return MSPACK_ERR_READ ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 4 ; i ++ , fn ++ ) if ( ! ( * fn = buf [ i ] ) ) break ; <S2SV_EndBug> <S2SV_StartBug> pos += ( i < 4 ) ? i + 1 : 4 ; <S2SV_EndBug> <S2SV_StartBug> return MSPACK_ERR_SEEK ; <S2SV_EndBug> ","<S2SV_ModStart> int len <S2SV_ModEnd> <S2SV_ModStart> ( hdr -> filename = fn ) ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( len = <S2SV_ModStart> ) < 2 <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> ) if ( ! ( * fn ++ <S2SV_ModEnd> <S2SV_ModStart> if ( i == 9 && buf [ 8 ] != '\\0' ) return MSPACK_ERR_DATAFORMAT ; if ( sys -> seek ( fh , ( off_t ) ( <S2SV_ModEnd> <S2SV_ModStart> - len ) , MSPACK_SYS_SEEK_CUR <S2SV_ModEnd> <S2SV_ModStart> ; fn -- <S2SV_ModStart> ( len = <S2SV_ModStart> ) < 2 <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> ) if ( ! ( * fn ++ <S2SV_ModEnd> <S2SV_ModStart> if ( i == 4 && buf [ 3 ] != '\\0' ) return MSPACK_ERR_DATAFORMAT ; if ( sys -> seek ( fh , ( off_t ) ( <S2SV_ModEnd> <S2SV_ModStart> - len ) , MSPACK_SYS_SEEK_CUR <S2SV_ModEnd> <S2SV_ModStart> ; fn -- "
2206,<S2SV_StartBug> size_t * buf_size_out ) <S2SV_EndBug> <S2SV_StartBug> if ( iovcnt < 0 || ( iovcnt > 0 && ! iov ) || ! buf_out || ! buf_size_out ) <S2SV_EndBug> <S2SV_StartBug> * buf_size_out = buf_size ; <S2SV_EndBug> <S2SV_StartBug> buf = NULL ; <S2SV_EndBug> ,"<S2SV_ModStart> , size_t * data_size_out <S2SV_ModStart> data_size_out ) * data_size_out = 0 ; if ( <S2SV_ModStart> || ! data_size_out <S2SV_ModStart> ; * data_size_out = data_size <S2SV_ModStart> * data_size_out = data_size ; "
2207,"<S2SV_StartBug> if ( ! ( siz -> comps = jas_alloc2 ( siz -> numcomps , sizeof ( jpc_sizcomp_t ) ) ) ) { <S2SV_EndBug> ","<S2SV_ModStart> siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all<S2SV_blank>tiles<S2SV_blank>are<S2SV_blank>outside<S2SV_blank>the<S2SV_blank>image<S2SV_blank>area\\n"" ) ; return - 1 ; } if ( "
2208,"<S2SV_StartBug> if ( ! IS_POSIXACL ( inode ) || ! inode -> i_op -> set_acl ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> error = inode -> i_op -> set_acl ( inode , argp -> acl_access , ACL_TYPE_ACCESS ) ; <S2SV_EndBug> <S2SV_StartBug> error = inode -> i_op -> set_acl ( inode , argp -> acl_default , <S2SV_EndBug> <S2SV_StartBug> out_drop_write : <S2SV_EndBug> ","<S2SV_ModStart> error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> <S2SV_ModStart> fh_lock ( fh ) ; error = set_posix_acl ( inode , ACL_TYPE_ACCESS <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode , ACL_TYPE_DEFAULT <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( error ) goto out_drop_lock ; fh_unlock ( fh ) <S2SV_ModEnd> <S2SV_ModStart> out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> "
2209,"<S2SV_StartBug> offset > 0 ? flags | RE_FLAGS_NOT_AT_START : flags , <S2SV_EndBug> <S2SV_StartBug> offset > 0 ? flags | RE_FLAGS_NOT_AT_START : flags , <S2SV_EndBug> <S2SV_StartBug> data + offset , <S2SV_EndBug> ","<S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> offset , data_size - "
2210,"<S2SV_StartBug> bh = sb_bread ( rs -> inode -> i_sb , rs -> cont_extent ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ++ rs -> cont_loops >= RR_MAX_CE_ENTRIES ) goto out ; 
2211,"<S2SV_StartBug> SEPARATE_ZVAL ( var2 ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_double ( * var2 ) ; <S2SV_EndBug> <S2SV_StartBug> matrix [ i ] [ j ] = ( float ) Z_DVAL_PP ( var2 ) ; <S2SV_EndBug> <S2SV_StartBug> php_error_docref ( NULL TSRMLS_CC , E_WARNING , ""You<S2SV_blank>must<S2SV_blank>have<S2SV_blank>a<S2SV_blank>3x3<S2SV_blank>matrix"" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> if ( Z_TYPE_PP <S2SV_ModEnd> <S2SV_ModStart> != IS_DOUBLE ) { zval dval ; dval = * * var ; zval_copy_ctor ( & dval ) <S2SV_ModStart> & dval ) ; matrix [ i ] [ j ] = ( float ) Z_DVAL ( dval ) ; } else { matrix [ i ] [ j ] = ( float ) Z_DVAL_PP ( <S2SV_ModEnd> <S2SV_ModStart> } } else { php_error_docref ( NULL TSRMLS_CC , E_WARNING , ""You<S2SV_blank>must<S2SV_blank>have<S2SV_blank>a<S2SV_blank>3x3<S2SV_blank>matrix"" ) ; RETURN_FALSE ; } } } } res = gdImageConvolution ( im_src , matrix , <S2SV_ModEnd> <S2SV_ModStart> div , ( float ) offset ) ; if ( res ) { RETURN_TRUE <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2212,"<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> set_acl_inode ( inode , inode -> i_mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( error <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2213,"<S2SV_StartBug> vpx_memset ( cpi -> segmentation_map , 0 , mbs_in_frame ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> common . frame_type != KEY_FRAME ) <S2SV_EndBug> <S2SV_StartBug> cpi -> cyclic_refresh_mode_index = i ; <S2SV_EndBug> ",<S2SV_ModStart> if ( cpi -> oxcf . screen_content_mode ) { int qp_thresh = ( cpi -> oxcf . screen_content_mode == 2 ) ? 80 : 100 ; if ( Q >= qp_thresh ) { cpi -> cyclic_refresh_mode_max_mbs_perframe = ( cpi -> common . mb_rows * cpi -> common . mb_cols ) / 10 ; } else if ( cpi -> frames_since_key > 250 && Q < 20 && cpi -> mb . skip_true_count > ( int ) ( 0.95 * mbs_in_frame ) ) { cpi -> cyclic_refresh_mode_max_mbs_perframe = 0 ; } else { cpi -> cyclic_refresh_mode_max_mbs_perframe = ( cpi -> common . mb_rows * cpi -> common . mb_cols ) / 20 ; } block_count = cpi -> cyclic_refresh_mode_max_mbs_perframe ; } memset <S2SV_ModEnd> <S2SV_ModStart> && block_count > 0 <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity > 0 ) { if ( cpi -> denoiser . denoiser_mode == kDenoiserOnYUVAggressive && Q < ( int ) cpi -> denoiser . denoise_pars . qp_thresh && ( cpi -> frames_since_key > 2 * cpi -> denoiser . denoise_pars . consec_zerolast ) ) { cpi -> cyclic_refresh_q = Q ; lf_adjustment = - 40 ; for ( i = 0 ; i < mbs_in_frame ; ++ i ) { seg_map [ i ] = ( cpi -> consec_zero_last [ i ] > cpi -> denoiser . denoise_pars . consec_zerolast ) ? 1 : 0 ; } } } # endif 
2214,<S2SV_StartBug> struct serial_icounter_struct icount ; <S2SV_EndBug> ,<S2SV_ModStart> = { } 
2215,"<S2SV_StartBug> other_branch = push_stack ( env , * insn_idx + insn -> off + 1 , * insn_idx ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false "
2216,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( check_secure ( ) ) return ; 
2217,<S2SV_StartBug> msc -> ntouches = 0 ; <S2SV_EndBug> <S2SV_StartBug> npoints = ( size - 6 ) / 8 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( npoints > 15 ) { hid_warn ( hdev , ""invalid<S2SV_blank>size<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>for<S2SV_blank>TRACKPAD_REPORT_ID\\n"" , size ) ; return 0 ; } <S2SV_ModStart> if ( npoints > 15 ) { hid_warn ( hdev , ""invalid<S2SV_blank>size<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>for<S2SV_blank>MOUSE_REPORT_ID\\n"" , size ) ; return 0 ; } "
2218,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( inode_capable ( inode , CAP_FOWNER ) ) <S2SV_EndBug> ","<S2SV_ModStart> struct user_namespace * ns ; <S2SV_ModStart> ns = current_user_ns ( ) ; if ( ns_capable ( ns , CAP_FOWNER ) && kuid_has_mapping ( ns , inode -> i_uid <S2SV_ModEnd> "
2219,<S2SV_StartBug> filename [ filename_size ++ ] = '\\0' ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2220,<S2SV_StartBug> goto error ; <S2SV_EndBug> ,<S2SV_ModStart> usb_free_urb ( urb ) ; 
2221,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2222,"<S2SV_StartBug> OPJ_UINT32 * p_data_written , <S2SV_EndBug> <S2SV_StartBug> opj_write_bytes ( p_data , J2K_MS_SOT , <S2SV_EndBug> ","<S2SV_ModStart> p_total_data_size , OPJ_UINT32 <S2SV_ModStart> if ( p_total_data_size < 12 ) { opj_event_msg ( p_manager , EVT_ERROR , ""Not<S2SV_blank>enough<S2SV_blank>bytes<S2SV_blank>in<S2SV_blank>output<S2SV_blank>buffer<S2SV_blank>to<S2SV_blank>write<S2SV_blank>SOT<S2SV_blank>marker\\n"" ) ; return OPJ_FALSE ; } "
2223,"<S2SV_StartBug> void fadst16_sse2 ( __m128i * in0 , __m128i * in1 ) { <S2SV_EndBug> ",<S2SV_ModStart> static 
2224,<S2SV_StartBug> ! SSL_USE_ETM ( s ) && SSL_USE_EXPLICIT_IV ( s ) && <S2SV_EndBug> ,<S2SV_ModStart> SSL_WRITE_ETM <S2SV_ModEnd> 
2225,"<S2SV_StartBug> const u_char * p , const u_char * ep , <S2SV_EndBug> <S2SV_StartBug> if ( p [ 0 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> if ( ep < p + totlen ) { <S2SV_EndBug> <S2SV_StartBug> return ep + 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""value="" ) ) ; <S2SV_EndBug> <S2SV_StartBug> rawprint ( ndo , ( const uint8_t * ) & p [ 2 ] , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""len=%d<S2SV_blank>value="" , EXTRACT_16BITS ( & p [ 2 ] ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> rawprint ( ndo , ( const uint8_t * ) & p [ 4 ] , EXTRACT_16BITS ( & p [ 2 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> return p + totlen ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ep2 <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> { ND_TCHECK_16BITS ( & p [ 2 ] ) ; <S2SV_ModStart> } if ( ep2 <S2SV_ModEnd> <S2SV_ModStart> ep2 <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( & p [ 0 ] ) ; <S2SV_ModStart> ) ; ND_TCHECK_16BITS ( & p [ 2 ] <S2SV_ModStart> { if ( ! <S2SV_ModStart> ) { ND_PRINT ( ( ndo , "")"" ) ) ; goto trunc ; } } <S2SV_ModEnd> <S2SV_ModStart> totlen - 4 ) ) ; if ( ! <S2SV_ModEnd> <S2SV_ModStart> totlen - 4 ) ) { <S2SV_ModEnd> <S2SV_ModStart> goto trunc ; } } ND_PRINT ( ( ndo , "")"" ) ) ; <S2SV_ModStart> trunc : return NULL ; "
2226,<S2SV_StartBug> u32 offset ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2227,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( ! i ) return NULL ; 
2228,<S2SV_StartBug> if ( pixdepth == 1 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( pixdepth == 8 ) { <S2SV_EndBug> ,<S2SV_ModStart> bpp == 1 && <S2SV_ModStart> bpp == 8 && 
2229,"<S2SV_StartBug> void vp9_loop_filter_frame ( VP9_COMMON * cm , MACROBLOCKD * xd , <S2SV_EndBug> <S2SV_StartBug> vp9_loop_filter_rows ( cm -> frame_to_show , cm , xd , <S2SV_EndBug> ","<S2SV_ModStart> YV12_BUFFER_CONFIG * frame , <S2SV_ModStart> frame <S2SV_ModEnd> <S2SV_ModStart> -> plane "
2230,<S2SV_StartBug> queueItem -> srcPort = ntohs ( header -> srcPort ) ; <S2SV_EndBug> ,<S2SV_ModStart> interface = interface ; queueItem -> 
2231,"<S2SV_StartBug> server . vm_enabled = 0 ; <S2SV_EndBug> <S2SV_StartBug> server . vm_swap_file = zstrdup ( ""/tmp/redis-%p.vm"" ) ; <S2SV_EndBug> <S2SV_StartBug> server . vm_max_memory = 1024LL * 1024 * 1024 * 1 ; <S2SV_EndBug> ","<S2SV_ModStart> ds_enabled = 0 ; server . ds_path <S2SV_ModEnd> <S2SV_ModStart> ""/tmp/redis.ds"" ) ; server . cache_max_memory = 64LL <S2SV_ModEnd> <S2SV_ModStart> ; server . cache_blocked_clients <S2SV_ModEnd> "
2232,<S2SV_StartBug> int this_rd ; <S2SV_EndBug> <S2SV_StartBug> if ( this_mode == ZEROMV ) <S2SV_EndBug> <S2SV_StartBug> if ( ( cpi -> ref_frame_flags & VP8_LAST_FRAME & <S2SV_EndBug> ,<S2SV_ModStart> ; int denoise_aggressive = 0 <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity > 0 ) { denoise_aggressive = ( cpi -> denoiser . denoiser_mode == kDenoiserOnYUVAggressive ) ? 1 : 0 ; } # endif if ( ! cpi -> oxcf . screen_content_mode && <S2SV_ModEnd> <S2SV_ModStart> && x -> e_mbd . mode_info_context -> mbmi . ref_frame == LAST_FRAME && ( denoise_aggressive || ( cpi -> closest_reference_frame == LAST_FRAME ) ) <S2SV_ModStart> x -> is_skin <S2SV_ModEnd> 
2233,<S2SV_StartBug> if ( ! adis -> buffer ) <S2SV_EndBug> <S2SV_StartBug> rx = adis -> buffer ; <S2SV_EndBug> ,<S2SV_ModStart> { kfree ( adis -> xfer ) ; adis -> xfer = NULL ; <S2SV_ModStart> } 
2234,"<S2SV_StartBug> static inline void jmp_rel ( struct x86_emulate_ctxt * ctxt , int rel ) <S2SV_EndBug> <S2SV_StartBug> assign_eip_near ( ctxt , ctxt -> _eip + rel ) ; <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return 
2235,<S2SV_StartBug> option_number += option_ext ; <S2SV_EndBug> <S2SV_StartBug> option_number += 269 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( sn_coap_parser_add_u16_limit ( option_number , option_ext , & option_number ) != 0 ) { return - 1 ; } <S2SV_ModEnd> <S2SV_ModStart> if ( sn_coap_parser_add_u16_limit ( option_number , 269 , & option_number ) != 0 ) { return - 1 ; } <S2SV_ModEnd> "
2236,"<S2SV_StartBug> if ( io -> status ) { <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & io -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> || io -> count == 0 <S2SV_ModStart> io -> count ++ ; <S2SV_ModStart> spin_lock_irqsave ( & io -> lock , flags ) ; io -> count -- ; if ( ! io -> count ) complete ( & io -> complete ) ; spin_unlock_irqrestore ( & io -> lock , flags ) ; "
2237,"<S2SV_StartBug> else if ( n <= 15 && ! strchr ( name , '.' ) && type == HOST_TYPE_IPV4 ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! strchr ( name , '.' ) ) <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> osStrchr <S2SV_ModEnd> 
2238,"<S2SV_StartBug> hlen = ip6_find_1stfragopt ( skb , & prevhdr ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( hlen < 0 ) { err = hlen ; goto fail ; } 
2239,"<S2SV_StartBug> rdsdebug ( ""size<S2SV_blank>%zu<S2SV_blank>flags<S2SV_blank>0x%x<S2SV_blank>timeo<S2SV_blank>%ld\\n"" , size , msg_flags , timeo ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> ; msg -> msg_namelen = 0 <S2SV_ModStart> msg -> msg_namelen = sizeof ( * sin ) ; 
2240,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> * addr_len = sizeof ( * saddr ) ; } <S2SV_ModEnd> 
2241,<S2SV_StartBug> void fadst8_sse2 ( __m128i * in ) { <S2SV_EndBug> <S2SV_StartBug> const __m128i k__cospi_p16_p16 = _mm_set1_epi16 ( cospi_16_64 ) ; <S2SV_EndBug> ,<S2SV_ModStart> static <S2SV_ModStart> ( int16_t ) 
2242,"<S2SV_StartBug> int rc ; <S2SV_EndBug> <S2SV_StartBug> rc = ecryptfs_parse_options ( sbi , raw_data ) ; <S2SV_EndBug> <S2SV_StartBug> ecryptfs_set_superblock_lower ( s , path . dentry -> d_sb ) ; <S2SV_EndBug> ","<S2SV_ModStart> uid_t check_ruid ; <S2SV_ModStart> , & check_ruid <S2SV_ModStart> if ( check_ruid && path . dentry -> d_inode -> i_uid != current_uid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount<S2SV_blank>of<S2SV_blank>device<S2SV_blank>(uid:<S2SV_blank>%d)<S2SV_blank>not<S2SV_blank>owned<S2SV_blank>by<S2SV_blank>"" ""requested<S2SV_blank>user<S2SV_blank>(uid:<S2SV_blank>%d)\\n"" , path . dentry -> d_inode -> i_uid , current_uid ( ) ) ; goto out_free ; } "
2243,"<S2SV_StartBug> ret = anon_inode_getfd ( ops -> name , & kvm_device_fops , dev , O_RDWR | O_CLOEXEC ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & kvm -> lock ) ; <S2SV_EndBug> <S2SV_StartBug> kvm_get_kvm ( kvm ) ; <S2SV_EndBug> ",<S2SV_ModStart> kvm_get_kvm ( kvm ) ; <S2SV_ModStart> kvm_put_kvm ( kvm ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
2244,<S2SV_StartBug> int is_entity ; <S2SV_EndBug> <S2SV_StartBug> if ( obj -> fixedtype == DWG_TYPE_TABLE ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> else if ( obj -> fixedtype == DWG_TYPE_DATATABLE ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> unhandled : <S2SV_ModEnd> <S2SV_ModStart> DWG_TYPE_UNKNOWN_ENT ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> DWG_TYPE_UNKNOWN_OBJ ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2245,<S2SV_StartBug> evtchn_to_irq [ row ] [ col ] = irq ; <S2SV_EndBug> ,"<S2SV_ModStart> WRITE_ONCE ( <S2SV_ModStart> , irq ) <S2SV_ModEnd> "
2246,"<S2SV_StartBug> inl = i2d ( data , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( signature -> type == V_ASN1_BIT_STRING && signature -> flags & 0x7 ) { ASN1err ( ASN1_F_ASN1_VERIFY , ASN1_R_INVALID_BIT_STRING_BITS_LEFT ) ; goto err ; } "
2247,"<S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2248,<S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> BUG_ON ( ! ptr ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! cursor ) goto gc_complete ; <S2SV_ModStart> cursor <S2SV_ModEnd> 
2249,<S2SV_StartBug> down_write ( & mm -> mmap_sem ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! mmget_still_valid ( mm ) ) goto out_unlock 
2250,<S2SV_StartBug> goto present_leaves_cluster_but_not_new_leaf ; <S2SV_EndBug> <S2SV_StartBug> present_leaves_cluster_but_not_new_leaf : <S2SV_EndBug> ,"<S2SV_ModStart> pr_devel ( ""present<S2SV_blank>leaves<S2SV_blank>cluster<S2SV_blank>but<S2SV_blank>not<S2SV_blank>new<S2SV_blank>leaf\\n"" ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2251,<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; msg -> msg_namelen = 0 
2252,"<S2SV_StartBug> struct mount * m , * child ; <S2SV_EndBug> <S2SV_StartBug> source = get_source ( m , prev_dest_mnt , prev_src_mnt , & type ) ; <S2SV_EndBug> ",<S2SV_ModStart> user_namespace * user_ns = current -> nsproxy -> mnt_ns -> user_ns ; struct <S2SV_ModStart> ; if ( m -> mnt_ns -> user_ns != user_ns ) type |= CL_UNPRIVILEGED 
2253,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> INTL_CHECK_LOCALE_LEN ( slocale_len ) ; 
2254,<S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; } 
2255,<S2SV_StartBug> if ( client -> priv -> protocol_timeout > 0 ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2256,<S2SV_StartBug> args -> valuelen = be32_to_cpu ( name_rmt -> valuelen ) ; <S2SV_EndBug> <S2SV_StartBug> args -> valuelen ) ; <S2SV_EndBug> ,<S2SV_ModStart> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; args -> rmtblkno <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rmtvaluelen <S2SV_ModEnd> 
2257,"<S2SV_StartBug> void sum_2_variances ( const var * a , const var * b , var * r ) { <S2SV_EndBug> <S2SV_StartBug> a -> sum_error + b -> sum_error , a -> count + b -> count , r ) ; <S2SV_EndBug> ",<S2SV_ModStart> static <S2SV_ModStart> assert ( a -> log2_count == b -> log2_count ) ; <S2SV_ModStart> log2_count + 1 <S2SV_ModEnd> 
2258,<S2SV_StartBug> goto next_desc ; <S2SV_EndBug> ,"<S2SV_ModStart> ; } if ( ( buflen < elength ) || ( elength < 3 ) ) { dev_err ( & intf -> dev , ""invalid<S2SV_blank>descriptor<S2SV_blank>buffer<S2SV_blank>length\\n"" ) ; break "
2259,<S2SV_StartBug> DevInfo . MaxRDMBufferSize = BUFFER_4K ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & DevInfo , 0 , sizeof ( DevInfo ) ) ; "
2260,"<S2SV_StartBug> for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> data [ i ] = jas_matrix_create ( 1 , jas_image_width ( image ) ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> z = ( z << 8 ) | c ; <S2SV_EndBug> ","<S2SV_ModStart> assert ( <S2SV_ModEnd> <S2SV_ModStart> <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if ( ! ( <S2SV_ModEnd> <S2SV_ModStart> ) ) { goto error ; } <S2SV_ModEnd> <S2SV_ModStart> goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ] , x , ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ] , x , ( RAS_GETGREEN ( v ) ) ) ; jas_matrix_setv ( data [ 2 ] , x , ( RAS_GETBLUE ( v ) ) ) ; } else { jas_matrix_setv ( data [ 0 ] , x , ( v ) ) ; } } if ( pad ) { if ( ( c = jas_stream_getc ( in ) ) == EOF ) { goto error ; } } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if ( jas_image_writecmpt ( image , i , 0 , y , hdr -> width , 1 , data [ i ] ) ) { goto error ; } } } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { jas_matrix_destroy ( data [ i ] ) ; data [ i ] = 0 ; } return 0 ; error : for ( i = 0 ; i < 3 ; ++ i ) { if ( data [ i ] ) { jas_matrix_destroy ( data [ i ] ) ; } } <S2SV_ModStart>  <S2SV_ModEnd> "
2261,"<S2SV_StartBug> # ifndef _MSC_VER <S2SV_EndBug> <S2SV_StartBug> char fpath [ grub_strlen ( currpath ) + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> * currfound = currnode ; <S2SV_EndBug> <S2SV_StartBug> return grub_error ( GRUB_ERR_BAD_FILE_TYPE , ""not<S2SV_blank>a<S2SV_blank>directory"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( grub_errno ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> return grub_error ( GRUB_ERR_SYMLINK_LOOP , <S2SV_EndBug> <S2SV_StartBug> free_node ( oldnode , c ) ; <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return grub_error ( GRUB_ERR_FILE_NOT_FOUND , ""file<S2SV_blank>not<S2SV_blank>found"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> char * fpath = grub_malloc ( <S2SV_ModEnd> <S2SV_ModStart> ) ; char * name = fpath ; char * next ; enum grub_fshelp_filetype type = GRUB_FSHELP_DIR ; grub_fshelp_node_t currnode = currroot ; grub_fshelp_node_t oldnode = currroot ; c -> currroot = currroot ; grub_strncpy ( fpath , currpath , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; free ( fpath ) <S2SV_ModStart> free ( fpath ) ; <S2SV_ModStart> { free ( fpath ) ; <S2SV_ModStart> } <S2SV_ModStart> free ( fpath ) ; <S2SV_ModStart> ) ; free ( fpath <S2SV_ModStart> free ( fpath ) ; <S2SV_ModStart> free ( fpath ) ; <S2SV_ModStart> free ( fpath ) ; "
2262,"<S2SV_StartBug> clips = kzalloc ( num_clips * sizeof ( * clips ) , GFP_KERNEL ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; } 
2263,<S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> match_data -> cmp = asymmetric_key_cmp ; 
2264,"<S2SV_StartBug> ret = security_file_permission ( file , MAY_READ ) ; <S2SV_EndBug> <S2SV_StartBug> ret = security_file_permission ( file , MAY_WRITE ) ; <S2SV_EndBug> <S2SV_StartBug> ret = security_file_permission ( file , MAY_READ ) ; <S2SV_EndBug> <S2SV_StartBug> ret = security_file_permission ( file , MAY_WRITE ) ; <S2SV_EndBug> ","<S2SV_ModStart> aio_setup_single_vector ( READ , file , <S2SV_ModEnd> <S2SV_ModStart> aio_setup_single_vector ( WRITE , file , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2265,<S2SV_StartBug> long start ; <S2SV_EndBug> <S2SV_StartBug> char * header ; <S2SV_EndBug> <S2SV_StartBug> start = ftell ( fp ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = safe_calloc ( <S2SV_ModEnd> <S2SV_ModStart> long 
2266,<S2SV_StartBug> dev -> netdev_ops = & bnep_netdev_ops ; <S2SV_EndBug> ,<S2SV_ModStart> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> 
2267,<S2SV_StartBug> return ret != - EEXIST ? ret : 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2268,<S2SV_StartBug> for ( pass = 0 ; pass < 10 ; pass ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> || image 
2269,<S2SV_StartBug> int64_t old_off = s -> off ; <S2SV_EndBug> <S2SV_StartBug> else if ( ( s -> filesize == - 1 && whence == SEEK_END ) ) <S2SV_EndBug> ,<S2SV_ModStart> uint64_t <S2SV_ModEnd> <S2SV_ModStart> UINT64_MAX <S2SV_ModEnd> 
2270,<S2SV_StartBug> vpx_scale_rtcd ( ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2271,"<S2SV_StartBug> int len = OBJ_obj2txt ( obj_txt , sizeof ( obj_txt ) , obj , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> BIO_write ( bio , obj_txt , len ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> BIO_printf <S2SV_ModEnd> <S2SV_ModStart> ""%s\\n"" , obj_txt <S2SV_ModEnd> "
2272,<S2SV_StartBug> return in ; <S2SV_EndBug> ,<S2SV_ModStart> NULL <S2SV_ModEnd> 
2273,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> list_for_each_entry ( event , & current -> perf_event_list , owner_entry ) <S2SV_EndBug> <S2SV_StartBug> perf_event_for_each_child ( event , perf_event_disable ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct perf_event_context * ctx ; <S2SV_ModStart> { ctx = perf_event_ctx_lock ( event ) ; <S2SV_ModStart> _perf_event_disable ) ; perf_event_ctx_unlock ( event , ctx ) ; } <S2SV_ModEnd> "
2274,<S2SV_StartBug> if ( ! unconditional ( & e -> ipv6 ) ) <S2SV_EndBug> ,<S2SV_ModStart> e <S2SV_ModEnd> 
2275,<S2SV_StartBug> return code ; <S2SV_EndBug> ,"<S2SV_ModStart> { * status = ""DECODE_PA_S4U_X509_USER"" ; return code ; } <S2SV_ModEnd> "
2276,"<S2SV_StartBug> arg ( identifier arg , expr_ty annotation , int lineno , int col_offset , int <S2SV_EndBug> <S2SV_StartBug> p -> lineno = lineno ; <S2SV_EndBug> ","<S2SV_ModStart> string type_comment , <S2SV_ModStart> type_comment = type_comment ; p -> "
2277,"<S2SV_StartBug> int hdrlen ; <S2SV_EndBug> <S2SV_StartBug> if ( caplen < 3 ) { <S2SV_EndBug> <S2SV_StartBug> switch ( ( fc >> 10 ) & 0x3 ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%04x:%04x<S2SV_blank>"" , panid , EXTRACT_LE_16BITS ( p ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> case 0x03 : <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%04x:%s<S2SV_blank>"" , panid , le64addr_string ( ndo , p ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<<S2SV_blank>"" ) ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( ( fc >> 14 ) & 0x3 ) { <S2SV_EndBug> <S2SV_StartBug> case 0x00 : <S2SV_EndBug> <S2SV_StartBug> case 0x01 : <S2SV_EndBug> <S2SV_StartBug> case 0x02 : <S2SV_EndBug> <S2SV_StartBug> if ( ! ( fc & ( 1 << 6 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case 0x03 : <S2SV_EndBug> <S2SV_StartBug> if ( ! ( fc & ( 1 << 6 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> caplen -= hdrlen ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> u_int <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( caplen < 3 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return caplen ; } hdrlen = 3 ; fc = EXTRACT_LE_16BITS ( p ) ; seq = EXTRACT_LE_8BITS ( p + 2 ) ; p += 3 ; caplen -= 3 ; ND_PRINT ( ( ndo , ""IEEE<S2SV_blank>802.15.4<S2SV_blank>%s<S2SV_blank>packet<S2SV_blank>"" , ftypes [ FC_FRAME_TYPE ( fc ) ] ) ) ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo , ""seq<S2SV_blank>%02x<S2SV_blank>"" , seq ) ) ; switch ( FC_DEST_ADDRESSING_MODE ( fc ) ) { case FC_ADDRESSING_MODE_NONE : if ( fc & FC_PAN_ID_COMPRESSION ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo , ""none<S2SV_blank>"" ) ) ; break ; case FC_ADDRESSING_MODE_RESERVED : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo , ""reserved<S2SV_blank>destination<S2SV_blank>addressing<S2SV_blank>mode"" ) ) ; return hdrlen ; case FC_ADDRESSING_MODE_SHORT : if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } <S2SV_ModEnd> <S2SV_ModStart> caplen -= 2 ; hdrlen += 2 ; if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModStart> + 2 ) ) ) ; p += 2 ; caplen -= 2 ; hdrlen <S2SV_ModEnd> <S2SV_ModStart> FC_ADDRESSING_MODE_LONG : if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } <S2SV_ModEnd> <S2SV_ModStart> caplen -= 2 ; hdrlen += 2 ; if ( caplen < 8 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModStart> + 2 <S2SV_ModStart> caplen -= 8 ; hdrlen += 8 ; <S2SV_ModStart> if ( ndo -> ndo_vflag ) <S2SV_ModStart> FC_SRC_ADDRESSING_MODE ( fc ) <S2SV_ModEnd> <S2SV_ModStart> FC_ADDRESSING_MODE_NONE : if ( ndo -> ndo_vflag ) <S2SV_ModEnd> <S2SV_ModStart> FC_ADDRESSING_MODE_RESERVED : if ( ndo -> ndo_vflag ) <S2SV_ModEnd> <S2SV_ModStart> FC_ADDRESSING_MODE_SHORT <S2SV_ModEnd> <S2SV_ModStart> FC_PAN_ID_COMPRESSION ) ) { if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } <S2SV_ModEnd> <S2SV_ModStart> caplen -= 2 ; hdrlen += 2 ; } if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModEnd> <S2SV_ModStart> caplen -= 2 ; hdrlen += 2 ; <S2SV_ModStart> FC_ADDRESSING_MODE_LONG <S2SV_ModEnd> <S2SV_ModStart> FC_PAN_ID_COMPRESSION ) ) { if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } <S2SV_ModEnd> <S2SV_ModStart> caplen -= 2 ; hdrlen += 2 ; } if ( caplen < 8 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModEnd> <S2SV_ModStart> caplen -= 8 ; hdrlen += 8 ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> hdrlen <S2SV_ModEnd> "
2278,"<S2SV_StartBug> l2tp_framing_type_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> const uint32_t * ptr = ( const uint32_t * ) dat ; <S2SV_EndBug> ","<S2SV_ModStart> , u_int length <S2SV_ModStart> if ( length < 4 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } "
2279,"<S2SV_StartBug> int filt_mid = cm -> filter_level ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ss_err , 0 , sizeof ( ss_err ) ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
2280,"<S2SV_StartBug> strlcpy ( rcipher . type , ""cipher"" , sizeof ( rcipher . type ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> strncpy <S2SV_ModEnd> 
2281,<S2SV_StartBug> vpx_active_map_t map = { 0 } ; <S2SV_EndBug> ,"<S2SV_ModStart> 0 , 0 , "
2282,<S2SV_StartBug> return NGHTTP2_ERR_INVALID_ARGUMENT ; <S2SV_EndBug> ,<S2SV_ModStart> ; } if ( settings_payloadlen / NGHTTP2_FRAME_SETTINGS_ENTRY_LENGTH > session -> max_settings ) { return NGHTTP2_ERR_TOO_MANY_SETTINGS 
2283,<S2SV_StartBug> then = now ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! cfg -> rc_target_bitrate ) return ; 
2284,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> } if ( free < 0 ) { err = - ENOMEM ; goto out ; 
2285,<S2SV_StartBug> ( unsigned char * ) e + sizeof ( struct ipt_entry ) >= limit ) { <S2SV_EndBug> ,<S2SV_ModStart> limit || ( unsigned char * ) e + e -> next_offset > 
2286,<S2SV_StartBug> wp -> socket_mode = 0666 ; <S2SV_EndBug> ,<S2SV_ModStart> 0660 <S2SV_ModEnd> 
2287,"<S2SV_StartBug> strncpy ( str , ""?["" , len ) ; <S2SV_EndBug> ","<S2SV_ModStart> espruino_snprintf ( str , len , ""?[%d]"" , token <S2SV_ModEnd> "
2288,"<S2SV_StartBug> rds_info_copy ( iter , & minfo , sizeof ( minfo ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> minfo . flags = 0 ; 
2289,<S2SV_StartBug> srose -> srose_family = AF_ROSE ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( srose , 0 , msg -> msg_namelen ) ; "
2290,"<S2SV_StartBug> if ( ! ND_TTEST2 ( cp , len ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2291,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2292,<S2SV_StartBug> newinet -> opt = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> inet_opt <S2SV_ModEnd> 
2293,"<S2SV_StartBug> static double get_prediction_decay_rate ( const VP9_COMMON * cm , <S2SV_EndBug> <S2SV_StartBug> const double mb_sr_err_diff = ( next_frame -> sr_coded_error - <S2SV_EndBug> <S2SV_StartBug> const double second_ref_decay = mb_sr_err_diff <= 512.0 <S2SV_EndBug> <S2SV_StartBug> ? fclamp ( pow ( 1.0 - ( mb_sr_err_diff / 512.0 ) , 0.5 ) , 0.85 , 1.0 ) <S2SV_EndBug> ","<S2SV_ModStart> VP9_COMP * cpi <S2SV_ModEnd> <S2SV_ModStart> sr_decay_rate = get_sr_decay_rate ( cpi , next_frame ) <S2SV_ModEnd> <S2SV_ModStart> zero_motion_factor = ( 0.95 * pow ( ( next_frame -> pcnt_inter - next_frame -> pcnt_motion ) , ZM_POWER_FACTOR ) ) ; return MAX ( zero_motion_factor , ( sr_decay_rate + ( <S2SV_ModEnd> <S2SV_ModStart> sr_decay_rate ) * zero_motion_factor ) ) <S2SV_ModEnd> "
2294,"<S2SV_StartBug> ret = put_user ( task_thread_info ( child ) -> tp_value , <S2SV_EndBug> ",<S2SV_ModStart> [ 0 ] 
2295,"<S2SV_StartBug> vpx_codec_enc_init ( & stream -> encoder , global -> codec -> interface ( ) , <S2SV_EndBug> <S2SV_StartBug> vpx_codec_dec_init ( & stream -> decoder , decoder -> interface ( ) , NULL , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH flags |= stream -> config . use_16bit_internal ? VPX_CODEC_USE_HIGHBITDEPTH : 0 ; # endif <S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> codec_interface <S2SV_ModEnd> 
2296,"<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> dev_name ( & qedi -> pdev -> dev ) , nfunc , line , <S2SV_EndBug> <S2SV_StartBug> pr_notice ( ""[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV"" , nfunc , line , & vaf ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> 
2297,<S2SV_StartBug> * head = NULL ; <S2SV_EndBug> ,"<S2SV_ModStart> giterr_set_str ( GITERR_NET , ""Invalid<S2SV_blank>empty<S2SV_blank>packet"" ) ; return GIT_ERROR <S2SV_ModEnd> "
2298,"<S2SV_StartBug> static struct ion_handle * ion_handle_get_by_id ( struct ion_client * client , <S2SV_EndBug> <S2SV_StartBug> handle = idr_find ( & client -> idr , id ) ; <S2SV_EndBug> <S2SV_StartBug> return handle ? handle : ERR_PTR ( - EINVAL ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ion_handle_get_by_id_nolock ( client , id <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2299,"<S2SV_StartBug> void Huff_offsetTransmit ( huff_t * huff , int ch , byte * fout , int * offset ) { <S2SV_EndBug> <S2SV_StartBug> send ( huff -> loc [ ch ] , NULL , fout ) ; <S2SV_EndBug> ","<S2SV_ModStart> , int maxoffset <S2SV_ModStart> , maxoffset "
2300,"<S2SV_StartBug> int i , j , offset ; <S2SV_EndBug> <S2SV_StartBug> uint32_t loc ; <S2SV_EndBug> <S2SV_StartBug> struct sparablePartitionMap * spm = <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( udf_load_sparable_map ( sb , map , ( <S2SV_ModEnd> <S2SV_ModStart> ) gpm ) < 0 ) goto out_bh <S2SV_ModEnd> "
2301,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ( void ) _y4m ; ( void ) _dst ; ( void ) _aux ; 
2302,"<S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_get ( ext2_xattr_cache , bh -> b_bdev , bh -> b_blocknr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ce ) <S2SV_EndBug> <S2SV_StartBug> le32_add_cpu ( & HDR ( bh ) -> h_refcount , - 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> __u32 hash = le32_to_cpu ( HDR ( bh ) -> h_hash ) ; mb2_cache_entry_delete_block ( EXT2_SB ( inode -> i_sb ) -> s_mb_cache , hash , bh -> b_blocknr <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2303,<S2SV_StartBug> if ( ! ( ( pi -> y % ( OPJ_INT32 ) ( comp -> dy << rpy ) == 0 ) || ( ( pi -> y == pi -> ty0 ) && <S2SV_EndBug> ,<S2SV_ModStart> rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx ) != comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy ) != comp -> dy ) { continue ; } if ( 
2304,<S2SV_StartBug> int m ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( n < 0 ) { jas_deprecated ( ""negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_gobble"" ) ; } "
2305,<S2SV_StartBug> kfree ( resp ) ; <S2SV_EndBug> ,<S2SV_ModStart> req ) ; kfree ( 
2306,"<S2SV_StartBug> char buf [ MAX_PKT_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> len = recvfrom ( sd , buf , sizeof ( buf ) , MSG_DONTWAIT , & sa , & salen ) ; <S2SV_EndBug> <S2SV_StartBug> buf [ len ] = 0 ; <S2SV_EndBug> ",<S2SV_ModStart> + 1 <S2SV_ModStart> - 1 <S2SV_ModStart>  <S2SV_ModEnd> 
2307,"
","
"
2308,"<S2SV_StartBug> unsigned int maxw , maxh , max ; <S2SV_EndBug> <S2SV_StartBug> maxw = ( unsigned int ) img -> comps [ 0 ] . w ; maxh = ( unsigned int ) img -> comps [ 0 ] . h ; <S2SV_EndBug> <S2SV_StartBug> d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0U ; i < ( maxh & ~ ( unsigned int ) 1U ) ; i += 2U ) <S2SV_EndBug> <S2SV_StartBug> ny = y + maxw ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < ( maxw & ~ ( unsigned int ) 1U ) ; j += 2U ) <S2SV_EndBug> <S2SV_StartBug> if ( j < maxw ) <S2SV_EndBug> <S2SV_StartBug> if ( i < maxh ) <S2SV_EndBug> <S2SV_StartBug> for ( j = 0U ; j < ( maxw & ~ ( unsigned int ) 1U ) ; j += 2U ) <S2SV_EndBug> <S2SV_StartBug> # if defined ( USE_JPWL ) || defined ( USE_MJ2 ) <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 1 ] . w = maxw ; img -> comps [ 1 ] . h = maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . w = maxw ; img -> comps [ 2 ] . h = maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 1 ] . w = ( OPJ_UINT32 ) maxw ; img -> comps [ 1 ] . h = ( OPJ_UINT32 ) maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . w = ( OPJ_UINT32 ) maxw ; img -> comps [ 2 ] . h = ( OPJ_UINT32 ) maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . dy = img -> comps [ 0 ] . dy ; <S2SV_EndBug> <S2SV_StartBug> if ( r ) free ( r ) ; <S2SV_EndBug> <S2SV_StartBug> if ( g ) free ( g ) ; <S2SV_EndBug> <S2SV_StartBug> if ( b ) free ( b ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t maxw , maxh , max , offx , loopmaxw , offy , loopmaxh ; int offset , upb ; size_t i <S2SV_ModEnd> <S2SV_ModStart> size_t ) img -> comps [ 0 ] . w ; maxh = ( size_t ) img -> comps [ 0 ] . h ; max = maxw * maxh ; y = img -> comps [ 0 ] . data ; cb = img -> comps [ 1 ] . data ; cr = img -> comps [ 2 ] . data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> d2 = b <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> offx = img -> x0 & 1U ; loopmaxw = maxw - offx ; offy = img -> y0 & 1U ; loopmaxh = maxh - offy ; if ( offy > 0U ) { size_t j ; for ( j = 0 ; j < maxw ; ++ j ) { sycc_to_rgb ( offset , upb , * y , 0 , 0 , r , g , b ) ; ++ y ; ++ r ; ++ g ; ++ b ; } } <S2SV_ModStart> loopmaxh <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t j ; <S2SV_ModStart> if ( offx > 0U ) { sycc_to_rgb ( offset , upb , * y , 0 , 0 , r , g , b ) ; ++ y ; ++ r ; ++ g ; ++ b ; sycc_to_rgb ( offset , upb , * ny , * cb , * cr , nr , ng , nb ) ; ++ ny ; ++ nr ; ++ ng ; ++ nb ; } <S2SV_ModStart> loopmaxw <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> loopmaxw <S2SV_ModEnd> <S2SV_ModStart> loopmaxh ) { size_t j ; <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> img -> comps [ 2 ] . w = img -> comps [ 0 ] . w ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> h = img -> comps [ 0 ] . h ; img -> comps [ 1 ] . dx = <S2SV_ModEnd> <S2SV_ModStart> dx = img -> comps [ 0 ] . dx ; <S2SV_ModEnd> <S2SV_ModStart> dy = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> color_space = OPJ_CLRSPC_SRGB <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2309,<S2SV_StartBug> if ( * p == '#' ) { <S2SV_EndBug> ,"<S2SV_ModStart> len = FFMIN ( FFMAX ( len , 0 ) , sizeof ( color_name ) - 1 ) ; "
2310,<S2SV_StartBug> print_bpf_insn ( insn ) ; <S2SV_EndBug> ,"<S2SV_ModStart> env , "
2311,"<S2SV_StartBug> if ( uid_eq ( uid , current_fsuid ( ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( gid_eq ( gid , current_fsgid ( ) ) ) <S2SV_EndBug> ",<S2SV_ModStart> file -> f_cred -> fsuid <S2SV_ModEnd> <S2SV_ModStart> file -> f_cred -> fsgid <S2SV_ModEnd> 
2312,<S2SV_StartBug> return true ; <S2SV_EndBug> ,<S2SV_ModStart> nf_generic_should_process ( nf_ct_protonum ( ct ) ) <S2SV_ModEnd> 
2313,"<S2SV_StartBug> im = ( gdImage * ) gdCalloc ( 1 , sizeof ( gdImage ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( overflow2 ( sizeof ( unsigned char * ) , sx ) ) { return NULL ; } "
2314,<S2SV_StartBug> if ( cpi -> pass == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) <S2SV_EndBug> <S2SV_StartBug> if ( q == 0 ) <S2SV_EndBug> ,<S2SV_ModStart> oxcf . <S2SV_ModStart> rc_mode == VPX_CBR <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2315,<S2SV_StartBug> if ( packet -> size + act_size > MT_PACKET_LEN ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> - packet -> size 
2316,"<S2SV_StartBug> while ( * s && * s != \'\\""\' ) <S2SV_EndBug> <S2SV_StartBug> while ( isdigit ( ( unsigned char ) * s ) ) <S2SV_EndBug> ",<S2SV_ModStart> ( <S2SV_ModStart> ) && ( ptmp != ( tmp + sizeof ( tmp ) - 1 ) ) <S2SV_ModStart> ) && ( ptmp != ( tmp + sizeof ( tmp ) - 1 ) 
2317,"
","
"
2318,<S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug> ,<S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> 
2319,<S2SV_StartBug> s -> s3 -> flags &= ~ TLS1_FLAGS_ENCRYPT_THEN_MAC ; <S2SV_EndBug> <S2SV_StartBug> s -> s3 -> flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC ; <S2SV_EndBug> ,<S2SV_ModStart> tlsext_use_etm = 0 <S2SV_ModEnd> <S2SV_ModStart> tlsext_use_etm = 1 <S2SV_ModEnd> 
2320,<S2SV_StartBug> int cpu = smp_processor_id ( ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ) ; read_lock ( & evtchn_rwlock <S2SV_ModStart> read_unlock ( & evtchn_rwlock ) ; 
2321,"<S2SV_StartBug> const char * path = conn -> data -> state . path ; <S2SV_EndBug> <S2SV_StartBug> smtpc -> domain = curl_easy_unescape ( conn -> data , path , 0 , & len ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> result = Curl_urldecode ( conn -> data , path , 0 , & <S2SV_ModStart> , NULL , TRUE ) ; if ( result ) return result <S2SV_ModEnd> "
2322,<S2SV_StartBug> while ( ! * ( iter -> substr_cur ) ) <S2SV_EndBug> ,"<S2SV_ModStart> iter -> substr_end = strchr ( iter -> substr_cur , ',' ) ; if ( ! iter -> substr_end ) iter -> substr_end = iter -> eostr ; else * ( iter -> substr_end ++ <S2SV_ModEnd> "
2323,<S2SV_StartBug> const struct aodv_hello * ah ; <S2SV_EndBug> <S2SV_StartBug> goto trunc ; <S2SV_EndBug> ,"<S2SV_ModStart> ; ND_TCHECK ( * ep ) <S2SV_ModStart> if ( ep -> length < 4 ) { ND_PRINT ( ( ndo , ""\\n\\text<S2SV_blank>HELLO<S2SV_blank>-<S2SV_blank>bad<S2SV_blank>length<S2SV_blank>%u"" , ep -> length ) ) ; break ; } "
2324,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && frame -> linesize [ plane ] 
2325,"<S2SV_StartBug> if ( drop_privileges ( nagios_user , nagios_group ) == ERROR ) { <S2SV_EndBug> <S2SV_StartBug> exit ( EXIT_FAILURE ) ; <S2SV_EndBug> ","<S2SV_ModStart> daemon_mode == TRUE && sigrestart == FALSE ) { result = daemon_init ( ) ; if ( result == ERROR ) { logit ( NSLOG_PROCESS_INFO | NSLOG_RUNTIME_ERROR , TRUE , ""Bailing<S2SV_blank>out<S2SV_blank>due<S2SV_blank>to<S2SV_blank>failure<S2SV_blank>to<S2SV_blank>daemonize.<S2SV_blank>(PID=%d)"" , ( int ) getpid ( ) ) ; cleanup ( ) ; exit ( EXIT_FAILURE ) ; } nagios_pid = ( int ) getpid ( ) ; } if ( <S2SV_ModStart>  <S2SV_ModEnd> "
2326,<S2SV_StartBug> if ( ( ( int ) arg >= cdi -> capacity ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2327,<S2SV_StartBug> rc -> sb64_target_rate = ( ( int64_t ) rc -> this_frame_target * 64 * 64 ) / <S2SV_EndBug> ,<S2SV_ModStart> if ( cpi -> oxcf . resize_mode == RESIZE_DYNAMIC && rc -> frame_size_selector != UNSCALED ) rc -> this_frame_target = ( int ) ( rc -> this_frame_target * rate_thresh_mult [ rc -> frame_size_selector ] ) ; 
2328,<S2SV_StartBug> for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( int ) 
2329,"<S2SV_StartBug> if ( ! fdt_getprop ( fit , 0 , FIT_DESC_PROP , NULL ) ) { <S2SV_EndBug> ","<S2SV_ModStart> CONFIG_IS_ENABLED ( FIT_FULL_CHECK ) ) { if ( size == IMAGE_SIZE_INVAL ) size = fdt_totalsize ( fit ) ; ret = fdt_check_full ( fit , size ) ; if ( ret ) { log_debug ( ""FIT<S2SV_blank>check<S2SV_blank>error<S2SV_blank>%d\\n"" , ret ) ; return - EINVAL ; } } if ( "
2330,"<S2SV_StartBug> dwc3_gadget_giveback ( dep , req , ret ) ; <S2SV_EndBug> ",<S2SV_ModStart> dwc3_gadget_del_and_unmap_request <S2SV_ModEnd> 
2331,"<S2SV_StartBug> return r ? : __blkdev_driver_ioctl ( bdev , mode , cmd , arg ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! r && ti -> len != i_size_read ( bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL , cmd ) ; "
2332,<S2SV_StartBug> return - EOPNOTSUPP ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2333,<S2SV_StartBug> if ( rs -> rs_bound_addr == 0 ) { <S2SV_EndBug> ,<S2SV_ModStart> || ! rs -> rs_transport 
2334,"<S2SV_StartBug> iwl_sta_ucode_activate ( priv , sta_id ) ; <S2SV_EndBug> ","<S2SV_ModStart> ret = iwl_sta_ucode_activate ( priv , sta_id ) <S2SV_ModEnd> "
2335,<S2SV_StartBug> if ( ( e -> target_offset == sizeof ( struct ip6t_entry ) && <S2SV_EndBug> <S2SV_StartBug> t -> verdict < 0 && <S2SV_EndBug> ,<S2SV_ModStart> unconditional ( e <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2336,"<S2SV_StartBug> nla_for_each_nested ( attr , info -> attrs [ NL80211_ATTR_SCAN_SSIDS ] , tmp ) { <S2SV_EndBug> <S2SV_StartBug> request -> ssids [ i ] . ssid_len = nla_len ( attr ) ; <S2SV_EndBug> ",<S2SV_ModStart> request -> ssids [ i ] . ssid_len = nla_len ( attr ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
2337,"<S2SV_StartBug> sraSpanInsertBefore ( sraSpan * newspan , sraSpan * before ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> before ) { if ( newspan && <S2SV_ModStart> } 
2338,<S2SV_StartBug> int just_opened = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! v -> finished && <S2SV_EndBug> ,<S2SV_ModStart> = 0 ; int reload_count <S2SV_ModStart> reload_count ++ ; if ( reload_count > c -> max_reload ) return AVERROR_EOF ; 
2339,<S2SV_StartBug> spin_lock_init ( & sta -> lock ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ps_lock 
2340,<S2SV_StartBug> out_size = in_len + 32 ; <S2SV_EndBug> ,<S2SV_ModStart> int max_input_expansion = ( ( int ) ( in_len / 32000 ) + 1 ) * 5 ; out_size = 10 + 8 + max_input_expansion + in_len <S2SV_ModEnd> 
2341,<S2SV_StartBug> cmap_len = get_ushort ( & tga [ 5 ] ) ; <S2SV_EndBug> <S2SV_StartBug> x_origin = get_ushort ( & tga [ 8 ] ) ; <S2SV_EndBug> <S2SV_StartBug> y_origin = get_ushort ( & tga [ 10 ] ) ; <S2SV_EndBug> <S2SV_StartBug> image_w = get_ushort ( & tga [ 12 ] ) ; <S2SV_EndBug> <S2SV_StartBug> image_h = get_ushort ( & tga [ 14 ] ) ; <S2SV_EndBug> ,<S2SV_ModStart> get_tga_ushort <S2SV_ModEnd> <S2SV_ModStart> get_tga_ushort <S2SV_ModEnd> <S2SV_ModStart> get_tga_ushort <S2SV_ModEnd> <S2SV_ModStart> get_tga_ushort <S2SV_ModEnd> <S2SV_ModStart> get_tga_ushort <S2SV_ModEnd> 
2342,"<S2SV_StartBug> ( void ) ReadBlob ( image , sizeof ( iris_info . name ) , ( unsigned char * ) <S2SV_EndBug> <S2SV_StartBug> iris_info . name ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) count ; <S2SV_EndBug> <S2SV_StartBug> if ( EOFBlob ( image ) != MagickFalse ) <S2SV_EndBug> ","<S2SV_ModStart> count = <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( count != sizeof ( iris_info . name ) ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" <S2SV_ModStart> if ( count != sizeof ( iris_info . filler ) ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2343,<S2SV_StartBug> if ( key_is_instantiated ( key ) ) <S2SV_EndBug> ,<S2SV_ModStart> key_is_positive <S2SV_ModEnd> 
2344,<S2SV_StartBug> if ( retval ) <S2SV_EndBug> ,<S2SV_ModStart> ! retval ) <S2SV_ModEnd> 
2345,"<S2SV_StartBug> vpx_memset ( cpi -> mb . e_mbd . ref_lf_deltas , 0 , sizeof ( cpi -> mb . e_mbd . ref_lf_deltas ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cpi -> mb . e_mbd . mode_lf_deltas , 0 , sizeof ( cpi -> mb . e_mbd . mode_lf_deltas ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
2346,"<S2SV_StartBug> if ( icsk -> icsk_af_ops -> conn_request ( sk , skb ) < 0 ) <S2SV_EndBug> ",<S2SV_ModStart> th -> fin ) goto discard ; if ( 
2347,"<S2SV_StartBug> u64 insn_bitness = ( BPF_CLASS ( insn -> code ) == BPF_ALU64 ) ? 64 : 32 ; <S2SV_EndBug> <S2SV_StartBug> if ( signed_add_overflows ( dst_reg -> smin_value , smin_val ) || <S2SV_EndBug> <S2SV_StartBug> if ( signed_sub_overflows ( dst_reg -> smin_value , smax_val ) || <S2SV_EndBug> ","<S2SV_ModStart> ; u32 dst = insn -> dst_reg ; int ret <S2SV_ModStart> ret = sanitize_val_alu ( env , insn ) ; if ( ret < 0 ) { verbose ( env , ""R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>add<S2SV_blank>from<S2SV_blank>different<S2SV_blank>pointers<S2SV_blank>or<S2SV_blank>scalars\\n"" , dst ) ; return ret ; } <S2SV_ModStart> ret = sanitize_val_alu ( env , insn ) ; if ( ret < 0 ) { verbose ( env , ""R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>sub<S2SV_blank>from<S2SV_blank>different<S2SV_blank>pointers<S2SV_blank>or<S2SV_blank>scalars\\n"" , dst ) ; return ret ; } "
2348,"<S2SV_StartBug> static int m88rs2000_frontend_attach ( struct dvb_usb_adapter * d ) <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 1 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> d -> fe_adap [ 0 ] . fe = dvb_attach ( m88rs2000_attach , & s421_m88rs2000_config , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap ) ; <S2SV_EndBug> <S2SV_StartBug> if ( d -> fe_adap [ 0 ] . fe == NULL ) <S2SV_EndBug> <S2SV_StartBug> if ( dvb_attach ( ts2020_attach , d -> fe_adap [ 0 ] . fe , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap ) ) { <S2SV_EndBug> ","<S2SV_ModStart> adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0x51 <S2SV_ModEnd> <S2SV_ModStart> , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> adap <S2SV_ModEnd> <S2SV_ModStart> adap <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2349,<S2SV_StartBug> if ( ! vcpu -> arch . time_page ) <S2SV_EndBug> ,<S2SV_ModStart> pv_time_enabled <S2SV_ModEnd> 
2350,<S2SV_StartBug> default : <S2SV_EndBug> ,<S2SV_ModStart> case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ; 
2351,"<S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ldt_selector , VCPU_SREG_LDTR , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> es , VCPU_SREG_ES , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> cs , VCPU_SREG_CS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ss , VCPU_SREG_SS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ds , VCPU_SREG_DS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> fs , VCPU_SREG_FS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> gs , VCPU_SREG_GS , cpl , true ) ; <S2SV_EndBug> ","<S2SV_ModStart> cpl , true , NULL <S2SV_ModEnd> <S2SV_ModStart> true , NULL <S2SV_ModEnd> <S2SV_ModStart> true , NULL <S2SV_ModEnd> <S2SV_ModStart> true , NULL <S2SV_ModEnd> <S2SV_ModStart> true , NULL <S2SV_ModEnd> <S2SV_ModStart> true , NULL <S2SV_ModEnd> <S2SV_ModStart> true , NULL <S2SV_ModEnd> "
2352,"<S2SV_StartBug> atomic_inc ( & ( ( struct bpf_prog * ) raw ) -> aux -> refcnt ) ; <S2SV_EndBug> <S2SV_StartBug> bpf_map_inc ( raw , true ) ; <S2SV_EndBug> ",<S2SV_ModStart> raw = bpf_prog_inc ( raw <S2SV_ModEnd> <S2SV_ModStart> raw = 
2353,"<S2SV_StartBug> signed long personality ; <S2SV_EndBug> <S2SV_StartBug> ret = lxc_attach_to_ns ( init_pid , options -> namespaces ) ; <S2SV_EndBug> <S2SV_StartBug> . exec_payload = exec_payload <S2SV_EndBug> ","<S2SV_ModStart> int procfd ; <S2SV_ModStart> procfd = open ( ""/proc"" , O_DIRECTORY | O_RDONLY ) ; if ( procfd < 0 ) { SYSERROR ( ""Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>/proc"" ) ; shutdown ( ipc_sockets [ 1 ] , SHUT_RDWR ) ; rexit ( - 1 ) ; } <S2SV_ModStart> , . procfd = procfd "
2354,"<S2SV_StartBug> timeout = sock_rcvtimeo ( sk , flags & MSG_DONTWAIT ) ; <S2SV_EndBug> ",<S2SV_ModStart> m -> msg_namelen = 0 ; 
2355,<S2SV_StartBug> if ( * rsize >= 30 && rdesc [ 29 ] == 0x05 && rdesc [ 30 ] == 0x09 ) { <S2SV_EndBug> ,<S2SV_ModStart> 31 <S2SV_ModEnd> 
2356,"<S2SV_StartBug> pfn = kvm_pin_pages ( slot , gfn , page_size ) ; <S2SV_EndBug> <S2SV_StartBug> kvm_unpin_pages ( kvm , pfn , page_size ) ; <S2SV_EndBug> ",<S2SV_ModStart> >> PAGE_SHIFT <S2SV_ModStart> >> PAGE_SHIFT 
2357,<S2SV_StartBug> if ( skb_is_nonlinear ( skb ) ) <S2SV_EndBug> ,<S2SV_ModStart> ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr 
2358,<S2SV_StartBug> int is_udplite = IS_UDPLITE ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( udp_lib_checksum_complete ( skb ) ) <S2SV_EndBug> <S2SV_StartBug> if ( skb_csum_unnecessary ( skb ) ) <S2SV_EndBug> ,<S2SV_ModStart> ; bool checksum_valid = false <S2SV_ModStart> checksum_valid = ! <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! checksum_valid <S2SV_ModStart> checksum_valid || 
2359,<S2SV_StartBug> Z_STRVAL_P ( return_value ) = emalloc ( length + 1 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( length > INT_MAX ) { php_error_docref ( NULL TSRMLS_CC , E_WARNING , ""Length<S2SV_blank>parameter<S2SV_blank>must<S2SV_blank>be<S2SV_blank>no<S2SV_blank>more<S2SV_blank>than<S2SV_blank>%d"" , INT_MAX ) ; RETURN_FALSE ; } "
2360,"<S2SV_StartBug> jas_iccprof_t * jas_iccprof_createfrombuf ( uchar * buf , int len ) <S2SV_EndBug> ",<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
2361,<S2SV_StartBug> return ret != - EEXIST ? ret : 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2362,<S2SV_StartBug> TfLiteIntArray * ret = <S2SV_EndBug> <S2SV_StartBug> ( TfLiteIntArray * ) malloc ( TfLiteIntArrayGetSizeInBytes ( size ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> int alloc_size = TfLiteIntArrayGetSizeInBytes ( size ) ; if ( alloc_size <= 0 ) return NULL ; <S2SV_ModStart> alloc_size ) ; if ( ! ret ) return ret <S2SV_ModEnd> 
2363,"<S2SV_StartBug> struct gs_host_config hconf = { <S2SV_EndBug> <S2SV_StartBug> struct gs_device_config dconf ; <S2SV_EndBug> <S2SV_StartBug> & hconf , <S2SV_EndBug> <S2SV_StartBug> sizeof ( hconf ) , <S2SV_EndBug> <S2SV_StartBug> if ( rc < 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> & dconf , <S2SV_EndBug> <S2SV_StartBug> sizeof ( dconf ) , <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! dev ) <S2SV_EndBug> <S2SV_StartBug> init_usb_anchor ( & dev -> rx_submitted ) ; <S2SV_EndBug> <S2SV_StartBug> dev -> canch [ i ] = gs_make_candev ( i , intf , & dconf ) ; <S2SV_EndBug> <S2SV_StartBug> kfree ( dev ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> * hconf <S2SV_ModEnd> <S2SV_ModStart> * dconf ; hconf = kmalloc ( sizeof ( * hconf ) , GFP_KERNEL ) ; if ( ! hconf ) return - ENOMEM ; hconf -> byte_order = 0x0000beef <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * <S2SV_ModStart> kfree ( hconf ) ; <S2SV_ModStart> dconf = kmalloc ( sizeof ( * dconf ) , GFP_KERNEL ) ; if ( ! dconf ) return - ENOMEM ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * <S2SV_ModStart> kfree ( dconf ) ; return rc ; } icount = dconf -> <S2SV_ModEnd> <S2SV_ModStart> kfree ( dconf ) ; <S2SV_ModStart> { kfree ( dconf ) ; <S2SV_ModStart> } <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> dconf ) ; kfree ( <S2SV_ModStart> kfree ( dconf ) ; "
2364,<S2SV_StartBug> p += 2 ; <S2SV_EndBug> <S2SV_StartBug> p += 3 ; <S2SV_EndBug> <S2SV_StartBug> p += 4 ; <S2SV_EndBug> <S2SV_StartBug> l = p [ 1 ] ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len < 2 ) return - 1 ; <S2SV_ModStart> if ( len < 3 ) return - 1 ; <S2SV_ModStart> if ( len < 4 ) return - 1 ; <S2SV_ModStart> if ( len < 2 ) return - 1 ; 
2365,"<S2SV_StartBug> utee_param_to_param ( param , callee_params ) ; <S2SV_EndBug> ","<S2SV_ModStart> res = utee_param_to_param ( utc , <S2SV_ModEnd> <S2SV_ModStart> ; if ( res != TEE_SUCCESS ) return res "
2366,<S2SV_StartBug> if ( image -> storage_class == PseudoClass ) <S2SV_EndBug> ,"<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
2367,<S2SV_StartBug> vcpu -> arch . time_offset = data & ~ ( PAGE_MASK | 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( vcpu -> arch . time_offset & ( sizeof ( struct pvclock_vcpu_time_info ) - 1 ) ) break 
2368,<S2SV_StartBug> for ( i = 0 ; i <= SERDES_MAX ; i ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> < <S2SV_ModEnd> 
2369,<S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart> * objp = NULL ; 
2370,<S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> iif = l3mdev_master_ifindex ( skb_dst ( skb ) -> dev ) ; <S2SV_EndBug> ,<S2SV_ModStart> { dst = skb_dst ( skb ) ; <S2SV_ModStart> dst ? dst -> dev : skb -> dev ) ; } <S2SV_ModEnd> 
2371,"<S2SV_StartBug> const char * data , int optional ) <S2SV_EndBug> <S2SV_StartBug> if ( mount ( fsname , target , fstype , mountflags & ~ MS_REMOUNT , data ) ) { <S2SV_EndBug> <S2SV_StartBug> mountflags | MS_REMOUNT , data ) ) { <S2SV_EndBug> ","<S2SV_ModStart> , const char * rootfs <S2SV_ModStart> safe_mount <S2SV_ModEnd> <S2SV_ModStart> , rootfs <S2SV_ModStart> < 0 "
2372,"<S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2373,"<S2SV_StartBug> cleanup_free char * base_path = NULL ; <S2SV_EndBug> <S2SV_StartBug> base_path = xasprintf ( ""/run/user/%d/.bubblewrap"" , real_uid ) ; <S2SV_EndBug> ","<S2SV_ModStart> const <S2SV_ModEnd> <S2SV_ModStart> ""/tmp"" ; <S2SV_ModEnd> "
2374,"<S2SV_StartBug> void vp9_fht4x4_c ( const int16_t * input , int16_t * output , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct4x4_c ( input , output , stride ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t out [ 4 * 4 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t * outptr = & out [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t temp_in [ 4 ] , temp_out [ 4 ] ; <S2SV_EndBug> <S2SV_StartBug> outptr [ j * 4 + i ] = temp_out [ j ] ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> vpx_fdct4x4_c <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> 
2375,"<S2SV_StartBug> static const char * parse_array ( cJSON * item , const char * value ) <S2SV_EndBug> <S2SV_StartBug> ep = value ; <S2SV_EndBug> <S2SV_StartBug> return value + 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( item -> child = child = cJSON_New_Item ( ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ( value = skip ( parse_value ( child , skip ( value ) ) ) ) ) <S2SV_EndBug> <S2SV_StartBug> child = new_item ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( value = skip ( parse_value ( child , skip ( value + 1 ) ) ) ) ) <S2SV_EndBug> <S2SV_StartBug> return value + 1 ; <S2SV_EndBug> ","<S2SV_ModStart> , const char * * ep <S2SV_ModStart> * ep = value ; return 0 ; <S2SV_ModEnd> <S2SV_ModStart> return value + 1 ; <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! item -> child ) return 0 ; <S2SV_ModEnd> <S2SV_ModStart> , ep ) ) ; if ( ! value ) <S2SV_ModEnd> <S2SV_ModStart> child = new_item ; <S2SV_ModEnd> <S2SV_ModStart> , ep ) ) ; if ( ! value ) <S2SV_ModEnd> <S2SV_ModStart> return value + 1 ; * ep = value ; <S2SV_ModEnd> "
2376,"<S2SV_StartBug> int yy , mm , dd , hr , min , sec , csec ; <S2SV_EndBug> <S2SV_StartBug> ""%4d-%2d-%2d,%2d:%2d:%2d.%9d:<S2SV_blank>%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9u,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]"" , <S2SV_EndBug> <S2SV_StartBug> ""%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9u,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]"" , <S2SV_EndBug> <S2SV_StartBug> yy = mm = dd = hr = min = sec = csec = 0 ; <S2SV_EndBug> ","<S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> ""%4d-%2d-%2d,%2d:%2d:%2d.%9d:<S2SV_blank>%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9d,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]"" <S2SV_ModEnd> <S2SV_ModStart> ""%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9d,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]"" <S2SV_ModEnd> <S2SV_ModStart> ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""cosine:<S2SV_blank>packet<S2SV_blank>header<S2SV_blank>has<S2SV_blank>a<S2SV_blank>negative<S2SV_blank>packet<S2SV_blank>length"" ) ; return FALSE "
2377,"<S2SV_StartBug> const char * args [ 11 ] ; <S2SV_EndBug> <S2SV_StartBug> args [ i ++ ] = ""--"" ; <S2SV_EndBug> <S2SV_StartBug> execvp ( EXECUTABLE , ( char * * ) args ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> char tmp_directory [ ] = LARGE_DATA_TMP_DIR ""/abrt-tmp-debuginfo.XXXXXX"" ; if ( mkdtemp ( tmp_directory ) == NULL ) perror_msg_and_die ( ""Failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>working<S2SV_blank>directory"" ) ; log_info ( ""Created<S2SV_blank>working<S2SV_blank>directory:<S2SV_blank>%s"" , tmp_directory ) ; const char * args [ 13 <S2SV_ModEnd> <S2SV_ModStart> ""--tmpdir"" ; args [ i ++ ] = tmp_directory ; args [ i ++ ] = <S2SV_ModStart> pid_t pid = fork ( ) ; if ( pid < 0 ) perror_msg_and_die ( ""fork"" ) ; if ( pid == 0 ) { <S2SV_ModStart> int status ; if ( safe_waitpid ( pid , & status , 0 ) < 0 ) perror_msg_and_die ( ""waitpid"" ) ; if ( rmdir ( tmp_directory ) >= 0 ) log_info ( ""Removed<S2SV_blank>working<S2SV_blank>directory:<S2SV_blank>%s"" , tmp_directory ) ; else if ( errno != ENOENT ) perror_msg ( ""Failed<S2SV_blank>to<S2SV_blank>remove<S2SV_blank>working<S2SV_blank>directory"" ) ; if ( WIFEXITED ( status ) ) return WEXITSTATUS ( status ) ; if ( WIFSIGNALED ( status ) ) error_msg_and_die ( ""Child<S2SV_blank>terminated<S2SV_blank>with<S2SV_blank>signal<S2SV_blank>%d"" , WTERMSIG ( status ) ) ; error_msg_and_die ( ""Child<S2SV_blank>exit<S2SV_blank>failed"" ) ; } "
2378,<S2SV_StartBug> kern_msg -> msg_name = kern_address ; <S2SV_EndBug> ,<S2SV_ModStart> if ( kern_msg -> msg_name ) 
2379,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> id_key_set = rb_intern_const ( ""key_set"" ) ; "
2380,"<S2SV_StartBug> if ( strchr ( page , '/' ) ) <S2SV_EndBug> ",<S2SV_ModStart> ! page_name_is_good ( page <S2SV_ModEnd> 
2381,"<S2SV_StartBug> int do_rf64 = 0 , write_junk = 1 ; <S2SV_EndBug> <S2SV_StartBug> DS64Chunk ds64_chunk ; <S2SV_EndBug> <S2SV_StartBug> if ( write_junk ) total_riff_bytes += sizeof ( junkchunk ) ; <S2SV_EndBug> <S2SV_StartBug> ds64hdr . ckSize = sizeof ( ds64_chunk ) ; <S2SV_EndBug> <S2SV_StartBug> ds64_chunk . sampleCount64 = total_samples ; <S2SV_EndBug> <S2SV_StartBug> WavpackNativeToLittleEndian ( & riffhdr , ChunkHeaderFormat ) ; <S2SV_EndBug> <S2SV_StartBug> ( do_rf64 && ( ! DoWriteFile ( outfile , & ds64_chunk , sizeof ( ds64_chunk ) , & bcount ) || bcount != sizeof ( ds64_chunk ) ) ) || <S2SV_EndBug> ","<S2SV_ModStart> , table_length = 0 <S2SV_ModStart> ; CS64Chunk cs64_chunk <S2SV_ModStart> total_riff_bytes += table_length * sizeof ( CS64Chunk ) ; if ( write_junk ) total_riff_bytes += <S2SV_ModEnd> <S2SV_ModStart> + ( table_length * sizeof ( CS64Chunk ) ) <S2SV_ModStart> ; ds64_chunk . tableLength = table_length <S2SV_ModStart> if ( table_length ) { strncpy ( cs64_chunk . ckID , ""dmmy"" , sizeof ( cs64_chunk . ckID ) ) ; cs64_chunk . chunkSize64 = 12345678 ; WavpackNativeToLittleEndian ( & cs64_chunk , CS64ChunkFormat ) ; } <S2SV_ModStart> ) { error_line ( ""can\'t<S2SV_blank>write<S2SV_blank>.WAV<S2SV_blank>data,<S2SV_blank>disk<S2SV_blank>probably<S2SV_blank>full!"" ) ; return FALSE ; } while ( table_length -- ) if ( ! DoWriteFile ( outfile , & cs64_chunk , sizeof ( cs64_chunk ) , & bcount ) || bcount != sizeof ( cs64_chunk ) ) { error_line ( ""can\'t<S2SV_blank>write<S2SV_blank>.WAV<S2SV_blank>data,<S2SV_blank>disk<S2SV_blank>probably<S2SV_blank>full!"" ) ; return FALSE ; } if ( <S2SV_ModEnd> "
2382,<S2SV_StartBug> pipe -> curbuf = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> account_pipe_buffers ( pipe , pipe -> buffers , nr_pages ) ; "
2383,"<S2SV_StartBug> cli_writeint32 ( & exe [ pe + 0x28 ] , cli_readint32 ( wwsect + 0x295 ) + sects [ scount ] . rva + 0x299 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! CLI_ISCONTAINED ( wwsect , sects [ scount ] . rsz , wwsect + 0x295 , 4 ) || ! CLI_ISCONTAINED ( wwsect , sects [ scount ] . rsz , wwsect + 0x295 + sects [ scount ] . rva , 4 ) || ! CLI_ISCONTAINED ( wwsect , sects [ scount ] . rsz , wwsect + 0x295 + sects [ scount ] . rva + 0x299 , 4 ) ) { cli_dbgmsg ( ""WWPack:<S2SV_blank>unpack<S2SV_blank>memory<S2SV_blank>address<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds.\\n"" ) ; return CL_EFORMAT ; } "
2384,<S2SV_StartBug> if ( shdr -> sh_size < 1 ) { <S2SV_EndBug> ,<S2SV_ModStart> || shdr -> sh_size > SIZE_MAX 
2385,"<S2SV_StartBug> int ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( d2i_ECDSA_SIG ( & s , & sigbuf , sig_len ) == NULL ) goto err ; <S2SV_EndBug> <S2SV_StartBug> ECDSA_SIG_free ( s ) ; <S2SV_EndBug> ","<S2SV_ModStart> const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> p <S2SV_ModEnd> <S2SV_ModStart> goto err ; derlen = i2d_ECDSA_SIG ( s , & der ) ; if ( derlen != sig_len || memcmp ( sigbuf , der , derlen ) ) <S2SV_ModStart> if ( derlen > 0 ) { OPENSSL_cleanse ( der , derlen ) ; OPENSSL_free ( der ) ; } "
2386,<S2SV_StartBug> NAPI_GRO_CB ( skb ) -> udp_mark = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> encap_mark <S2SV_ModEnd> 
2387,"
","
"
2388,"<S2SV_StartBug> struct mb_cache_entry * ce = NULL ; <S2SV_EndBug> <S2SV_StartBug> struct mb_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_get ( ext4_mb_cache , bs -> bh -> b_bdev , <S2SV_EndBug> <S2SV_StartBug> if ( ce ) { <S2SV_EndBug> <S2SV_StartBug> if ( ce ) { <S2SV_EndBug> <S2SV_StartBug> le32_add_cpu ( & BHDR ( new_bh ) -> h_refcount , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_release ( ce ) ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_release ( ce ) ; <S2SV_EndBug> ","<S2SV_ModStart> mb2_cache_entry <S2SV_ModEnd> <S2SV_ModStart> mb2_cache <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> __u32 hash = le32_to_cpu ( BHDR ( bs -> bh ) -> h_hash ) ; mb2_cache_entry_delete_block ( ext4_mb_cache , hash , bs -> bh -> b_blocknr ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( hlist_bl_unhashed ( & ce -> e_hash_list ) ) { unlock_buffer ( new_bh ) ; dquot_free_block ( inode , EXT4_C2B ( EXT4_SB ( sb ) , 1 ) ) ; brelse ( new_bh ) ; mb2_cache_entry_put ( ext4_mb_cache , ce ) ; ce = NULL ; new_bh = NULL ; goto inserted ; } <S2SV_ModStart> mb2_cache_entry_touch ( ext4_mb_cache , ce ) ; mb2_cache_entry_put ( ext4_mb_cache , <S2SV_ModEnd> <S2SV_ModStart> mb2_cache_entry_put ( ext4_mb_cache , <S2SV_ModEnd> "
2389,<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug> ,<S2SV_ModStart> void 
2390,<S2SV_StartBug> static void oidc_scrub_headers ( request_rec * r ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2391,"<S2SV_StartBug> readBytes = readFromSocket ( self , buffer + bufPos , self -> packetSize - bufPos ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( self -> packetSize <= bufPos ) goto exit_error ; 
2392,<S2SV_StartBug> size_t e ; <S2SV_EndBug> <S2SV_StartBug> if ( mrb_basic_ptr ( v ) -> tt == MRB_TT_FREE ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ; mrb_value nil <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> e = c -> stend - c -> stbase ; nil = mrb_nil_value ( ) ; for ( ; i < e ; i ++ ) { c -> stbase [ i ] = nil ; 
2393,"<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) <S2SV_EndBug> ",<S2SV_ModStart> key_is_negative ( key <S2SV_ModEnd> 
2394,<S2SV_StartBug> if ( ! new_buffer ) <S2SV_EndBug> <S2SV_StartBug> return AVERROR ( ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! new_buffer ) <S2SV_EndBug> <S2SV_StartBug> return AVERROR ( ENOMEM ) ; <S2SV_EndBug> ,<S2SV_ModStart> { pc -> index = 0 ; <S2SV_ModStart> } <S2SV_ModStart> { pc -> overread_index = pc -> index = 0 ; <S2SV_ModStart> } 
2395,"<S2SV_StartBug> const cdf_stream_t * sst , const uint64_t clsid [ 2 ] ) <S2SV_EndBug> <S2SV_StartBug> str = cdf_clsid_to_mime ( clsid , clsid2desc ) ; <S2SV_EndBug> <S2SV_StartBug> return - 2 ; <S2SV_EndBug> <S2SV_StartBug> m = cdf_file_property_info ( ms , info , count , clsid ) ; <S2SV_EndBug> ",<S2SV_ModStart> cdf_directory_t * root_storage <S2SV_ModEnd> <S2SV_ModStart> if ( root_storage ) { <S2SV_ModStart> root_storage -> d_storage_uuid <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> root_storage <S2SV_ModEnd> 
2396,<S2SV_StartBug> op -> regs [ reg_index ] = reg ; <S2SV_EndBug> <S2SV_StartBug> ++ reg_index ; <S2SV_EndBug> <S2SV_StartBug> op -> offset += temp ; <S2SV_EndBug> <S2SV_StartBug> op -> regs [ reg_index ] = X86R_UNDEFINED ; <S2SV_EndBug> ,<S2SV_ModStart> if ( reg_index < 2 ) { <S2SV_ModStart> } <S2SV_ModStart> if ( reg_index < 2 ) { <S2SV_ModStart> } 
2397,"<S2SV_StartBug> gpio_dev -> pctrl = pinctrl_register ( & amd_pinctrl_desc , <S2SV_EndBug> <S2SV_StartBug> & pdev -> dev , gpio_dev ) ; <S2SV_EndBug> <S2SV_StartBug> goto out1 ; <S2SV_EndBug> <S2SV_StartBug> out1 : <S2SV_EndBug> ","<S2SV_ModStart> devm_pinctrl_register ( & pdev -> dev , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return ret <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2398,"<S2SV_StartBug> decoder_info -> log2_sb_size = get_flc ( 3 , stream ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; decoder_info -> log2_sb_size = clip ( decoder_info -> log2_sb_size , log2i ( MIN_BLOCK_SIZE ) , log2i ( MAX_SB_SIZE ) "
2399,<S2SV_StartBug> int is_udplite = IS_UDPLITE ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( udp_lib_checksum_complete ( skb ) ) <S2SV_EndBug> <S2SV_StartBug> if ( skb_csum_unnecessary ( skb ) ) <S2SV_EndBug> ,<S2SV_ModStart> ; bool checksum_valid = false <S2SV_ModStart> checksum_valid = ! <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! checksum_valid <S2SV_ModStart> checksum_valid || 
2400,"<S2SV_StartBug> int ret , last_pwd ; <S2SV_EndBug> <S2SV_StartBug> ret = decrypt_key_data ( handle -> context , <S2SV_EndBug> <S2SV_StartBug> kdb -> n_key_data , kdb -> key_data , <S2SV_EndBug> ","<S2SV_ModStart> , n_new_keys <S2SV_ModStart> n_new_keys = count_new_keys ( kdb -> n_key_data , kdb -> key_data ) ; <S2SV_ModStart> n_new_keys <S2SV_ModEnd> "
2401,"<S2SV_StartBug> int isopen ; <S2SV_EndBug> <S2SV_StartBug> size = offsetof ( POLYGON , p [ 0 ] ) + sizeof ( poly -> p [ 0 ] ) * npts ; <S2SV_EndBug> ","<S2SV_ModStart> base_size ; int <S2SV_ModStart> base_size = sizeof ( poly -> p [ 0 ] ) * npts ; <S2SV_ModStart> base_size ; if ( base_size / npts != <S2SV_ModStart> || size <= base_size ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""too<S2SV_blank>many<S2SV_blank>points<S2SV_blank>requested"" ) ) ) <S2SV_ModEnd> "
2402,"<S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 4 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_32BITS <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2403,<S2SV_StartBug> # if CONFIG_MULTIPLE_ARF <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2404,"<S2SV_StartBug> _iov -> iov_len = min ( ( u64 ) len , size ) ; <S2SV_EndBug> ",<S2SV_ModStart> - s 
2405,<S2SV_StartBug> struct desc_struct * desc ; <S2SV_EndBug> <S2SV_StartBug> desc = get_desc ( sel ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! desc ) <S2SV_EndBug> <S2SV_StartBug> limit = get_desc_limit ( desc ) ; <S2SV_EndBug> <S2SV_StartBug> if ( desc -> g ) <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> get_desc ( & desc , sel ) <S2SV_ModEnd> <S2SV_ModStart> & <S2SV_ModStart> . <S2SV_ModEnd> "
2406,<S2SV_StartBug> ( void ) CloseBlob ( pwp_image ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2407,<S2SV_StartBug> count = Z_LVAL_P ( pcount ) ; <S2SV_EndBug> <S2SV_StartBug> if ( Z_TYPE ( entry ) != IS_OBJECT ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> ,<S2SV_ModStart> ) ; ZVAL_UNDEF ( & entry ) ; ZVAL_UNDEF ( & inf <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( Z_TYPE ( entry ) != IS_OBJECT ) { zval_ptr_dtor ( & entry ) ; zval_ptr_dtor ( & inf ) ; goto outexcept <S2SV_ModEnd> 
2408,"<S2SV_StartBug> unsigned long tpgt ; <S2SV_EndBug> <S2SV_StartBug> if ( kstrtoul ( name + 5 , 10 , & tpgt ) || tpgt > UINT_MAX ) <S2SV_EndBug> ",<S2SV_ModStart> u16 <S2SV_ModEnd> <S2SV_ModStart> kstrtou16 <S2SV_ModEnd> <S2SV_ModStart> >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> 
2409,"<S2SV_StartBug> void headerMergeLegacySigs ( Header h , Header sigh ) <S2SV_EndBug> <S2SV_StartBug> hi = headerInitIterator ( sigh ) ; <S2SV_EndBug> <S2SV_StartBug> td . tag = RPMTAG_SIGSIZE ; <S2SV_EndBug> <S2SV_StartBug> td . tag = RPMTAG_SIGPGP ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( td . tag >= HEADER_SIGBASE && td . tag < HEADER_TAGBASE ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! headerIsEntry ( h , td . tag ) ) { <S2SV_EndBug> <S2SV_StartBug> ( void ) headerPut ( h , & td , HEADERPUT_DEFAULT ) ; <S2SV_EndBug> ","<S2SV_ModStart> rpmTagVal <S2SV_ModEnd> <S2SV_ModStart> , char * * msg ) { const struct taglate_s * xl <S2SV_ModEnd> <S2SV_ModStart> rpmtdReset ( & td ) ; for ( xl = xlateTags ; xl -> stag ; xl ++ ) { if ( headerIsEntry ( h , xl -> xtag ) ) break ; if ( headerGet ( sigh , xl -> stag , & td , HEADERGET_RAW | HEADERGET_MINMEM ) ) { if ( xl -> stag != xl -> xtag ) <S2SV_ModEnd> <S2SV_ModStart> xl -> xtag ; if ( td . type != rpmTagGetTagType ( <S2SV_ModEnd> <S2SV_ModStart> ) ) break ; if ( td . count < 1 || td . count > 16 * 1024 * 1024 ) break ; if ( xl -> count && td . count != xl -> count ) break ; <S2SV_ModEnd> <S2SV_ModStart> headerPut <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) break ; rpmtdFreeData ( & td ) ; } } rpmtdFreeData ( & td ) ; if ( xl -> stag ) { rasprintf ( msg , ""invalid<S2SV_blank>signature<S2SV_blank>tag<S2SV_blank>%s<S2SV_blank>(%d)"" , rpmTagGetName ( xl -> xtag ) , xl -> xtag ) ; } return xl -> stag <S2SV_ModEnd> "
2410,"<S2SV_StartBug> ""Pushing<S2SV_blank>input<S2SV_blank>%d<S2SV_blank>:<S2SV_blank>%.30s\\n"" , ctxt -> inputNr + 1 , input -> cur ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; } if ( ( ( ctxt -> inputNr > 40 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) || ( ctxt -> inputNr > 1024 ) ) { xmlFatalErr ( ctxt , XML_ERR_ENTITY_LOOP , NULL ) ; while ( ctxt -> inputNr > 1 ) xmlFreeInputStream ( inputPop ( ctxt ) ) ; return ( - 1 "
2411,<S2SV_StartBug> if ( ! ext4_handle_valid ( handle ) ) <S2SV_EndBug> ,<S2SV_ModStart> EXT4_SB ( sb ) -> s_journal <S2SV_ModEnd> 
2412,<S2SV_StartBug> ND_TCHECK ( * ext ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK2 ( * ext , sizeof ( a ) <S2SV_ModEnd> "
2413,"<S2SV_StartBug> netdev -> dcbnl_ops -> getpermhwaddr ( netdev , perm_addr ) ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( perm_addr , 0 , sizeof ( perm_addr ) ) ; "
2414,"<S2SV_StartBug> if ( NFS_PROTO ( inode ) -> have_delegation ( inode , FMODE_WRITE ) ) <S2SV_EndBug> <S2SV_StartBug> if ( nfs_write_pageuptodate ( page , inode ) && ( inode -> i_flock == NULL || <S2SV_EndBug> <S2SV_StartBug> inode -> i_flock -> fl_type != F_RDLCK ) ) ) <S2SV_EndBug> ","<S2SV_ModStart> ! nfs_write_pageuptodate ( page , inode ) ) return 0 ; if ( <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2415,"<S2SV_StartBug> struct ext4_ext_path * path ) <S2SV_EndBug> <S2SV_StartBug> struct ext4_extent * ex ; <S2SV_EndBug> <S2SV_StartBug> ext_debug ( ""ext4_convert_unwritten_extents_endio:<S2SV_blank>inode<S2SV_blank>%lu,<S2SV_blank>logical"" <S2SV_EndBug> <S2SV_StartBug> ( unsigned long long ) le32_to_cpu ( ex -> ee_block ) , <S2SV_EndBug> ","<S2SV_ModStart> ext4_map_blocks * map , struct <S2SV_ModStart> ; ext4_lblk_t ee_block ; unsigned int ee_len <S2SV_ModStart> ee_block = le32_to_cpu ( ex -> ee_block ) ; ee_len = ext4_ext_get_actual_len ( ex ) ; <S2SV_ModStart> ee_block , ee_len ) ; if ( ee_block != map -> m_lblk || ee_len > map -> m_len ) { err = ext4_split_unwritten_extents ( handle , inode , map , path , EXT4_GET_BLOCKS_CONVERT ) ; if ( err < 0 ) goto out ; ext4_ext_drop_refs ( path ) ; path = ext4_ext_find_extent ( inode , map -> m_lblk , path ) ; if ( IS_ERR ( path ) ) { err = PTR_ERR ( path ) ; goto out ; } depth = ext_depth ( inode ) ; ex = path [ depth ] . p_ext ; } <S2SV_ModEnd> "
2416,<S2SV_StartBug> return ret ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ci -> platdata -> flags & CI13XXX_DISABLE_STREAMING ) hw_write ( ci , OP_USBMODE , USBMODE_CI_SDIS , USBMODE_CI_SDIS ) ; "
2417,<S2SV_StartBug> if ( noblock ) <S2SV_EndBug> ,<S2SV_ModStart> cond_resched ( ) <S2SV_ModEnd> 
2418,"<S2SV_StartBug> if ( ( fifo -> fd = open ( fifo -> name , O_RDWR | O_CLOEXEC | O_NONBLOCK ) ) == - 1 ) { <S2SV_EndBug> ",<S2SV_ModStart> | O_NOFOLLOW 
2419,<S2SV_StartBug> init_thread : <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! test_opt ( sbi , FLUSH_MERGE ) ) return err ; "
2420,"<S2SV_StartBug> bool valid_handle ; <S2SV_EndBug> <S2SV_StartBug> valid_handle = ion_handle_validate ( client , handle ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ion_free_nolock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2421,"<S2SV_StartBug> else umount_tree ( mnt , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> UMOUNT_CONNECTED <S2SV_ModEnd> 
2422,<S2SV_StartBug> s -> decode_mb = mpeg4_decode_studio_mb ; <S2SV_EndBug> ,<S2SV_ModStart> interlaced_dct = 0 ; s -> 
2423,"<S2SV_StartBug> k -> get_config ( vdev , vdev -> config ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart>  <S2SV_ModEnd> 
2424,"<S2SV_StartBug> static void encode_frame ( vpx_codec_ctx_t * ctx , <S2SV_EndBug> <S2SV_StartBug> VpxVideoWriter * writer ) { <S2SV_EndBug> <S2SV_StartBug> while ( ( pkt = vpx_codec_get_cx_data ( ctx , & iter ) ) != NULL ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> int got_pkts = 0 ; <S2SV_ModStart> got_pkts = 1 ; <S2SV_ModStart> return got_pkts ; 
2425,"<S2SV_StartBug> static double calc_frame_boost ( VP9_COMP * cpi , FIRSTPASS_STATS * this_frame , <S2SV_EndBug> <S2SV_StartBug> double this_frame_mv_in_out ) { <S2SV_EndBug> <S2SV_StartBug> if ( this_frame -> intra_error > cpi -> twopass . gf_intra_err_min ) <S2SV_EndBug> <S2SV_StartBug> frame_boost = ( IIFACTOR * this_frame -> intra_error / <S2SV_EndBug> <S2SV_StartBug> DOUBLE_DIVIDE_CHECK ( this_frame -> coded_error ) ) ; <S2SV_EndBug> <S2SV_StartBug> return MIN ( frame_boost , GF_RMAX ) ; <S2SV_EndBug> ","<S2SV_ModStart> const <S2SV_ModStart> , double max_boost <S2SV_ModStart> const double lq = vp9_convert_qindex_to_q ( cpi -> rc . avg_frame_qindex [ INTER_FRAME ] , cpi -> common . bit_depth ) ; const double boost_q_correction = MIN ( ( 0.5 + ( lq * 0.015 ) ) , 1.5 ) ; int num_mbs = ( cpi -> oxcf . resize_mode != RESIZE_NONE ) ? cpi -> initial_mbs : cpi -> common . MBs ; num_mbs = ( int ) MAX ( 1 , num_mbs * calculate_active_area ( cpi , this_frame ) ) ; <S2SV_ModEnd> <S2SV_ModStart> BASELINE_ERR_PER_MB * num_mbs ) <S2SV_ModEnd> <S2SV_ModStart> ; frame_boost = frame_boost * BOOST_FACTOR * boost_q_correction <S2SV_ModEnd> <S2SV_ModStart> max_boost * boost_q_correction <S2SV_ModEnd> "
2426,"<S2SV_StartBug> static void __update_open_stateid ( struct nfs4_state * state , nfs4_stateid * open_stateid , const nfs4_stateid * deleg_stateid , int open_flags ) <S2SV_EndBug> <S2SV_StartBug> nfs_set_open_stateid_locked ( state , open_stateid , open_flags ) ; <S2SV_EndBug> <S2SV_StartBug> update_open_stateflags ( state , open_flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> fmode_t fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> 
2427,"<S2SV_StartBug> ZEND_FETCH_RESOURCE ( im , gdImagePtr , & IM , - 1 , ""Image"" , le_gd ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC , E_WARNING , ""Gamma<S2SV_blank>values<S2SV_blank>should<S2SV_blank>be<S2SV_blank>positive"" ) ; RETURN_FALSE ; } "
2428,"<S2SV_StartBug> q = ( const uint8_t * ) ( const void * ) <S2SV_EndBug> <S2SV_StartBug> CDF_GETUINT32 ( p , ( i << 1 ) + 1 ) ) - 2 * sizeof ( uint32_t ) ; <S2SV_EndBug> <S2SV_StartBug> DPRINTF ( ( ""%"" SIZE_T_FORMAT ""u)<S2SV_blank>id=%x<S2SV_blank>type=%x<S2SV_blank>offs=0x%tx,0x%x\\n"" , i , <S2SV_EndBug> <S2SV_StartBug> CDF_GETUINT32 ( p , ( i << 1 ) + 1 ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t ofs = CDF_GETUINT32 ( p , ( i << 1 ) + 1 ) ; <S2SV_ModStart> ofs <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> i , <S2SV_ModEnd> <S2SV_ModStart> offs <S2SV_ModEnd> "
2429,"<S2SV_StartBug> char linebuf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> if ( fgets ( linebuf , L_BUF_SIZE , fp ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> sscanf ( linebuf , ""<S2SV_blank><S2SV_blank>------<S2SV_blank><S2SV_blank>%s<S2SV_blank><S2SV_blank>------"" , selname ) ; <S2SV_EndBug> ","<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> ""<S2SV_blank><S2SV_blank>------<S2SV_blank><S2SV_blank>%200s<S2SV_blank><S2SV_blank>------"" <S2SV_ModEnd> "
2430,<S2SV_StartBug> struct net_device * dev = vif -> dev ; <S2SV_EndBug> <S2SV_StartBug> if ( netif_carrier_ok ( dev ) ) { <S2SV_EndBug> <S2SV_StartBug> xenvif_down ( vif ) ; <S2SV_EndBug> <S2SV_StartBug> rtnl_unlock ( ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vif -> <S2SV_ModEnd> <S2SV_ModStart> xenvif_carrier_off <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2431,"<S2SV_StartBug> static u32 __ipv6_select_ident ( struct net * net , u32 hashrnd , <S2SV_EndBug> <S2SV_StartBug> u32 hash , id ; <S2SV_EndBug> <S2SV_StartBug> hash = __ipv6_addr_jhash ( dst , hashrnd ) ; <S2SV_EndBug> <S2SV_StartBug> hash = __ipv6_addr_jhash ( src , hash ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const struct { struct in6_addr dst ; struct in6_addr src ; } __aligned ( SIPHASH_ALIGNMENT ) combined = { . dst = * dst , . src = * src , } ; <S2SV_ModStart> if ( unlikely ( siphash_key_is_zero ( & net -> ipv4 . ip_id_key ) ) ) get_random_bytes ( & net -> ipv4 . ip_id_key , sizeof ( net -> ipv4 . ip_id_key ) <S2SV_ModEnd> <S2SV_ModStart> siphash ( & combined , sizeof ( combined ) , & net -> ipv4 . ip_id_key <S2SV_ModEnd> "
2432,"<S2SV_StartBug> err ( ndp , ""Failed<S2SV_blank>to<S2SV_blank>setsockopt<S2SV_blank>IPV6_MULTICAST_HOPS."" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock , IPPROTO_IPV6 , IPV6_RECVHOPLIMIT , & val , sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp , ""Failed<S2SV_blank>to<S2SV_blank>setsockopt<S2SV_blank>IPV6_RECVHOPLIMIT,."" "
2433,<S2SV_StartBug> hlist_del ( & pin -> m_list ) ; <S2SV_EndBug> <S2SV_StartBug> hlist_del ( & pin -> s_list ) ; <S2SV_EndBug> ,<S2SV_ModStart> hlist_del_init <S2SV_ModEnd> <S2SV_ModStart> hlist_del_init <S2SV_ModEnd> 
2434,"<S2SV_StartBug> MACROBLOCK * x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> int step_param ; <S2SV_EndBug> <S2SV_StartBug> int bestsme = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> speed < 8 ) <S2SV_EndBug> <S2SV_StartBug> step_param = MIN ( step_param , ( cpi -> sf . max_step_search_steps - 2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> & cpi -> fn_ptr [ BLOCK_16X16 ] , 0 , & best_ref_mv1 , ref_mv ) ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ","<S2SV_ModStart> const x = & cpi -> td . <S2SV_ModEnd> <S2SV_ModStart> const MV_SPEED_FEATURES * const mv_sf = & cpi -> sf . mv ; <S2SV_ModStart> ; int distortion ; unsigned int sse ; int cost_list [ 5 ] <S2SV_ModStart> step_param = mv_sf -> reduce_first_step_size ; step_param = MIN ( step_param , MAX_MVSEARCH_STEPS <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cond_cost_list ( cpi , cost_list ) , <S2SV_ModStart> bestsme = cpi -> find_fractional_mv_step ( x , ref_mv , & best_ref_mv1 , cpi -> common . allow_high_precision_mv , x -> errorperbit , & cpi -> fn_ptr [ BLOCK_16X16 ] , 0 , mv_sf -> subpel_iters_per_step , cond_cost_list ( cpi , cost_list ) , NULL , NULL , & distortion , & sse , NULL , 0 , 0 ) ; <S2SV_ModEnd> "
2435,<S2SV_StartBug> packet_size = le16_to_cpu ( alt -> endpoint [ 0 ] . desc . wMaxPacketSize ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( alt -> desc . bNumEndpoints < 1 ) return - ENODEV ; 
2436,"<S2SV_StartBug> ses = cifs_find_smb_ses ( server , volume_info -> username ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2437,<S2SV_StartBug> ybf -> uv_width = uv_width ; <S2SV_EndBug> ,<S2SV_ModStart> uv_crop_width = ( width + 1 ) / 2 ; ybf -> uv_crop_height = ( height + 1 ) / 2 ; ybf -> 
2438,<S2SV_StartBug> f2fs_wait_discard_bios ( sbi ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , true "
2439,<S2SV_StartBug> s += padlen + 3 ; <S2SV_EndBug> <S2SV_StartBug> ( * psig ) = s ; <S2SV_EndBug> ,"<S2SV_ModStart> ( * psig ) = s + <S2SV_ModEnd> <S2SV_ModStart> { const u_char * p ; size_t cnt_ffs = 0 ; for ( p = s + 2 ; p < s + padlen + 2 ; p ++ ) if ( * p == 0xFF ) cnt_ffs ++ ; if ( cnt_ffs != padlen ) return ""4"" ""invalid<S2SV_blank>Padding<S2SV_blank>String"" ; } <S2SV_ModEnd> "
2440,<S2SV_StartBug> if ( ctx -> mb_height > 68 || <S2SV_EndBug> <S2SV_StartBug> ctx -> data_offset = 0x280 ; <S2SV_EndBug> ,"<S2SV_ModStart> ) { av_log ( ctx -> avctx , AV_LOG_ERROR , ""mb<S2SV_blank>height<S2SV_blank>too<S2SV_blank>big:<S2SV_blank>%d\\n"" , ctx -> mb_height ) ; return AVERROR_INVALIDDATA ; } ctx -> data_offset = 0x280 ; } if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2441,<S2SV_StartBug> if ( likely ( port -> exists && ! filtered ) ) <S2SV_EndBug> ,<S2SV_ModStart> serio <S2SV_ModEnd> 
2442,"<S2SV_StartBug> reslevel -> band = av_malloc_array ( reslevel -> nbands , sizeof ( * reslevel -> band ) ) ; <S2SV_EndBug> <S2SV_StartBug> band -> prec = av_malloc_array ( reslevel -> num_precincts_x * <S2SV_EndBug> ",<S2SV_ModStart> av_calloc <S2SV_ModEnd> <S2SV_ModStart> av_calloc <S2SV_ModEnd> 
2443,<S2SV_StartBug> free_netdev ( net ) ; <S2SV_EndBug> ,<S2SV_ModStart> cancel_work_sync ( & dev -> kevent ) ; del_timer_sync ( & dev -> delay ) ; 
2444,<S2SV_StartBug> char fstr [ MAXDATELEN + 1 ] ; <S2SV_EndBug> ,<S2SV_ModStart> 7 ] ; int i ; cp ++ ; for ( i = 0 ; i < 6 ; i ++ ) fstr [ i ] = * cp != '\\0' ? * cp ++ : '0' ; fstr [ i ] <S2SV_ModEnd> 
2445,<S2SV_StartBug> ctxt -> dst . type = OP_REG ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> dst . bytes = ctxt -> op_bytes ; <S2SV_EndBug> ,"<S2SV_ModStart> int rc ; unsigned long eip ; rc = emulate_pop ( ctxt , & eip , <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( rc != X86EMUL_CONTINUE ) return rc ; return assign_eip_near ( ctxt , eip <S2SV_ModEnd> "
2446,<S2SV_StartBug> if ( calldata -> arg . open_flags == 0 ) <S2SV_EndBug> ,<S2SV_ModStart> fmode <S2SV_ModEnd> 
2447,<S2SV_StartBug> if ( prev ) { <S2SV_EndBug> <S2SV_StartBug> int i = ( FRAG6_CB ( prev ) -> offset + prev -> len ) - offset ; <S2SV_EndBug> <S2SV_StartBug> if ( i > 0 ) { <S2SV_EndBug> <S2SV_StartBug> while ( next && FRAG6_CB ( next ) -> offset < end ) { <S2SV_EndBug> <S2SV_StartBug> err : <S2SV_EndBug> ,<S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> goto discard_fq ; if <S2SV_ModEnd> <S2SV_ModStart> goto discard_fq ; <S2SV_ModEnd> <S2SV_ModStart> discard_fq : fq_kill ( fq ) ; 
2448,<S2SV_StartBug> if ( sbinfo -> max_blocks >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> buf -> f_blocks = sbinfo -> max_blocks ; <S2SV_EndBug> <S2SV_StartBug> buf -> f_bavail = buf -> f_bfree = sbinfo -> free_blocks ; <S2SV_EndBug> ,<S2SV_ModStart> spool ) { long free_pages ; spin_lock ( & sbinfo -> spool -> lock ) ; <S2SV_ModEnd> <S2SV_ModStart> spool -> max_hpages ; free_pages = sbinfo -> spool -> max_hpages - sbinfo -> spool -> used_hpages <S2SV_ModEnd> <S2SV_ModStart> free_pages ; spin_unlock ( & sbinfo -> spool -> lock ) <S2SV_ModEnd> 
2449,<S2SV_StartBug> if ( op -> operands [ operand ] . shift != ARM_NO_SHIFT ) { <S2SV_EndBug> ,<S2SV_ModStart> strlen ( token ) > 4 && 
2450,<S2SV_StartBug> ps_dec -> pu4_wt_ofsts = ps_dec -> pu4_wts_ofsts_mat ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2451,"<S2SV_StartBug> vpx_memset ( pbi -> mt_yabove_row [ 0 ] + VP8BORDERINPIXELS - 1 , 127 , yv12_fb_new -> y_width + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( pbi -> mt_uabove_row [ 0 ] + ( VP8BORDERINPIXELS >> 1 ) - 1 , 127 , ( yv12_fb_new -> y_width >> 1 ) + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( pbi -> mt_vabove_row [ 0 ] + ( VP8BORDERINPIXELS >> 1 ) - 1 , 127 , ( yv12_fb_new -> y_width >> 1 ) + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( pbi -> mt_yabove_row [ j ] + VP8BORDERINPIXELS - 1 , ( unsigned char ) 129 , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( pbi -> mt_uabove_row [ j ] + ( VP8BORDERINPIXELS >> 1 ) - 1 , ( unsigned char ) 129 , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( pbi -> mt_vabove_row [ j ] + ( VP8BORDERINPIXELS >> 1 ) - 1 , ( unsigned char ) 129 , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( pbi -> mt_yleft_col [ j ] , ( unsigned char ) 129 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( pbi -> mt_uleft_col [ j ] , ( unsigned char ) 129 , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( pbi -> mt_vleft_col [ j ] , ( unsigned char ) 129 , 8 ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
2452,"<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> # line 2369 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 832 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> # line 2405 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 868 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2451 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 914 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2474 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 936 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2487 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 945 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2500 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 954 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2519 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 969 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2535 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 981 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2553 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 995 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2570 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1008 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2585 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1019 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> # line 1027 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2631 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1057 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2670 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1092 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2753 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1171 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2787 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1201 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2840 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1250 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2850 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1256 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2860 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1262 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2890 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1288 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2930 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1324 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2959 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1349 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2999 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1385 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3012 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1394 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3025 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1403 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3038 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1412 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3051 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1421 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3064 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1430 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3077 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1439 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3085 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1443 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3093 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1450 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3099 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1451 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3105 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1457 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3127 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1479 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3143 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1491 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3158 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1506 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3167 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1512 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3178 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1529 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3189 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1536 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3200 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1548 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3208 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1552 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3216 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1560 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3224 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1564 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3238 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1574 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3256 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1588 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3276 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1604 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3290 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1614 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3303 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1623 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3332 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1648 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3348 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1660 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3364 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1672 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3384 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1688 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3400 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1700 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3420 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1716 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3469 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1761 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3492 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1780 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3514 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1798 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3536 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1816 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3558 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1834 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3588 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1860 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3610 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1878 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3624 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1888 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3638 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1898 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3652 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1908 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3666 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1918 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3680 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1928 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3694 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1938 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3702 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 3706 ""grammar.c"" <S2SV_EndBug> ",<S2SV_ModStart> default : assert ( FALSE ) ; <S2SV_ModStart> 2371 <S2SV_ModEnd> <S2SV_ModStart> 834 <S2SV_ModEnd> <S2SV_ModStart> default : assert ( FALSE ) ; <S2SV_ModStart> 2409 <S2SV_ModEnd> <S2SV_ModStart> 872 <S2SV_ModEnd> <S2SV_ModStart> 2455 <S2SV_ModEnd> <S2SV_ModStart> 918 <S2SV_ModEnd> <S2SV_ModStart> 2478 <S2SV_ModEnd> <S2SV_ModStart> 940 <S2SV_ModEnd> <S2SV_ModStart> 2491 <S2SV_ModEnd> <S2SV_ModStart> 949 <S2SV_ModEnd> <S2SV_ModStart> 2504 <S2SV_ModEnd> <S2SV_ModStart> 958 <S2SV_ModEnd> <S2SV_ModStart> 2523 <S2SV_ModEnd> <S2SV_ModStart> 973 <S2SV_ModEnd> <S2SV_ModStart> 2539 <S2SV_ModEnd> <S2SV_ModStart> 985 <S2SV_ModEnd> <S2SV_ModStart> 2557 <S2SV_ModEnd> <S2SV_ModStart> 999 <S2SV_ModEnd> <S2SV_ModStart> 2574 <S2SV_ModEnd> <S2SV_ModStart> 1012 <S2SV_ModEnd> <S2SV_ModStart> 2589 <S2SV_ModEnd> <S2SV_ModStart> 1023 <S2SV_ModEnd> <S2SV_ModStart> YYERROR ; } # line 2603 <S2SV_ModEnd> <S2SV_ModStart> 1033 <S2SV_ModEnd> <S2SV_ModStart> 2637 <S2SV_ModEnd> <S2SV_ModStart> 1063 <S2SV_ModEnd> <S2SV_ModStart> 2676 <S2SV_ModEnd> <S2SV_ModStart> 1098 <S2SV_ModEnd> <S2SV_ModStart> 2759 <S2SV_ModEnd> <S2SV_ModStart> 1177 <S2SV_ModEnd> <S2SV_ModStart> 2793 <S2SV_ModEnd> <S2SV_ModStart> 1207 <S2SV_ModEnd> <S2SV_ModStart> 2846 <S2SV_ModEnd> <S2SV_ModStart> 1256 <S2SV_ModEnd> <S2SV_ModStart> 2856 <S2SV_ModEnd> <S2SV_ModStart> 1262 <S2SV_ModEnd> <S2SV_ModStart> 2866 <S2SV_ModEnd> <S2SV_ModStart> 1268 <S2SV_ModEnd> <S2SV_ModStart> 2896 <S2SV_ModEnd> <S2SV_ModStart> 1294 <S2SV_ModEnd> <S2SV_ModStart> 2936 <S2SV_ModEnd> <S2SV_ModStart> 1330 <S2SV_ModEnd> <S2SV_ModStart> 2965 <S2SV_ModEnd> <S2SV_ModStart> 1355 <S2SV_ModEnd> <S2SV_ModStart> 3005 <S2SV_ModEnd> <S2SV_ModStart> 1391 <S2SV_ModEnd> <S2SV_ModStart> 3018 <S2SV_ModEnd> <S2SV_ModStart> 1400 <S2SV_ModEnd> <S2SV_ModStart> 3031 <S2SV_ModEnd> <S2SV_ModStart> 1409 <S2SV_ModEnd> <S2SV_ModStart> 3044 <S2SV_ModEnd> <S2SV_ModStart> 1418 <S2SV_ModEnd> <S2SV_ModStart> 3057 <S2SV_ModEnd> <S2SV_ModStart> 1427 <S2SV_ModEnd> <S2SV_ModStart> 3070 <S2SV_ModEnd> <S2SV_ModStart> 1436 <S2SV_ModEnd> <S2SV_ModStart> 3083 <S2SV_ModEnd> <S2SV_ModStart> 1445 <S2SV_ModEnd> <S2SV_ModStart> 3091 <S2SV_ModEnd> <S2SV_ModStart> 1449 <S2SV_ModEnd> <S2SV_ModStart> 3099 <S2SV_ModEnd> <S2SV_ModStart> 1456 <S2SV_ModEnd> <S2SV_ModStart> 3105 <S2SV_ModEnd> <S2SV_ModStart> 1457 <S2SV_ModEnd> <S2SV_ModStart> 3111 <S2SV_ModEnd> <S2SV_ModStart> 1463 <S2SV_ModEnd> <S2SV_ModStart> 3133 <S2SV_ModEnd> <S2SV_ModStart> 1485 <S2SV_ModEnd> <S2SV_ModStart> 3149 <S2SV_ModEnd> <S2SV_ModStart> 1497 <S2SV_ModEnd> <S2SV_ModStart> 3164 <S2SV_ModEnd> <S2SV_ModStart> 1512 <S2SV_ModEnd> <S2SV_ModStart> 3173 <S2SV_ModEnd> <S2SV_ModStart> 1518 <S2SV_ModEnd> <S2SV_ModStart> 3184 <S2SV_ModEnd> <S2SV_ModStart> 1535 <S2SV_ModEnd> <S2SV_ModStart> 3195 <S2SV_ModEnd> <S2SV_ModStart> 1542 <S2SV_ModEnd> <S2SV_ModStart> 3206 <S2SV_ModEnd> <S2SV_ModStart> 1554 <S2SV_ModEnd> <S2SV_ModStart> 3214 <S2SV_ModEnd> <S2SV_ModStart> 1558 <S2SV_ModEnd> <S2SV_ModStart> 3222 <S2SV_ModEnd> <S2SV_ModStart> 1566 <S2SV_ModEnd> <S2SV_ModStart> 3230 <S2SV_ModEnd> <S2SV_ModStart> 1570 <S2SV_ModEnd> <S2SV_ModStart> 3244 <S2SV_ModEnd> <S2SV_ModStart> 1580 <S2SV_ModEnd> <S2SV_ModStart> 3262 <S2SV_ModEnd> <S2SV_ModStart> 1594 <S2SV_ModEnd> <S2SV_ModStart> 3282 <S2SV_ModEnd> <S2SV_ModStart> 1610 <S2SV_ModEnd> <S2SV_ModStart> 3296 <S2SV_ModEnd> <S2SV_ModStart> 1620 <S2SV_ModEnd> <S2SV_ModStart> 3309 <S2SV_ModEnd> <S2SV_ModStart> 1629 <S2SV_ModEnd> <S2SV_ModStart> 3338 <S2SV_ModEnd> <S2SV_ModStart> 1654 <S2SV_ModEnd> <S2SV_ModStart> 3354 <S2SV_ModEnd> <S2SV_ModStart> 1666 <S2SV_ModEnd> <S2SV_ModStart> 3370 <S2SV_ModEnd> <S2SV_ModStart> 1678 <S2SV_ModEnd> <S2SV_ModStart> 3390 <S2SV_ModEnd> <S2SV_ModStart> 1694 <S2SV_ModEnd> <S2SV_ModStart> 3406 <S2SV_ModEnd> <S2SV_ModStart> 1706 <S2SV_ModEnd> <S2SV_ModStart> 3426 <S2SV_ModEnd> <S2SV_ModStart> 1722 <S2SV_ModEnd> <S2SV_ModStart> 3475 <S2SV_ModEnd> <S2SV_ModStart> 1767 <S2SV_ModEnd> <S2SV_ModStart> 3498 <S2SV_ModEnd> <S2SV_ModStart> 1786 <S2SV_ModEnd> <S2SV_ModStart> 3520 <S2SV_ModEnd> <S2SV_ModStart> 1804 <S2SV_ModEnd> <S2SV_ModStart> 3542 <S2SV_ModEnd> <S2SV_ModStart> 1822 <S2SV_ModEnd> <S2SV_ModStart> 3564 <S2SV_ModEnd> <S2SV_ModStart> 1840 <S2SV_ModEnd> <S2SV_ModStart> 3594 <S2SV_ModEnd> <S2SV_ModStart> 1866 <S2SV_ModEnd> <S2SV_ModStart> 3616 <S2SV_ModEnd> <S2SV_ModStart> 1884 <S2SV_ModEnd> <S2SV_ModStart> 3630 <S2SV_ModEnd> <S2SV_ModStart> 1894 <S2SV_ModEnd> <S2SV_ModStart> 3644 <S2SV_ModEnd> <S2SV_ModStart> 1904 <S2SV_ModEnd> <S2SV_ModStart> 3658 <S2SV_ModEnd> <S2SV_ModStart> 1914 <S2SV_ModEnd> <S2SV_ModStart> 3672 <S2SV_ModEnd> <S2SV_ModStart> 1924 <S2SV_ModEnd> <S2SV_ModStart> 3686 <S2SV_ModEnd> <S2SV_ModStart> 1934 <S2SV_ModEnd> <S2SV_ModStart> 3700 <S2SV_ModEnd> <S2SV_ModStart> 1944 <S2SV_ModEnd> <S2SV_ModStart> 3708 <S2SV_ModEnd> <S2SV_ModStart> 3712 <S2SV_ModEnd> 
2453,<S2SV_StartBug> if ( roishift == 0 && bgshift == 0 ) { <S2SV_EndBug> <S2SV_StartBug> mask = ( 1 << numbps ) - 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> < 0 ) { jas_eprintf ( ""warning:<S2SV_blank>forcing<S2SV_blank>negative<S2SV_blank>ROI<S2SV_blank>shift<S2SV_blank>to<S2SV_blank>zero<S2SV_blank>"" ""(bitstream<S2SV_blank>is<S2SV_blank>probably<S2SV_blank>corrupt)\\n"" ) ; roishift = 0 ; } if ( roishift <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> "
2454,"<S2SV_StartBug> static void get_frame_stats ( vpx_codec_ctx_t * ctx , <S2SV_EndBug> <S2SV_StartBug> vpx_fixed_buf_t * stats ) { <S2SV_EndBug> <S2SV_StartBug> if ( pkt -> kind == VPX_CODEC_STATS_PKT ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> int got_pkts = 0 ; <S2SV_ModStart> got_pkts = 1 ; <S2SV_ModStart> return got_pkts ; 
2455,"<S2SV_StartBug> int vp9_loop_filter_worker ( void * arg1 , void * arg2 ) { <S2SV_EndBug> <S2SV_StartBug> LFWorkerData * const lf_data = ( LFWorkerData * ) arg1 ; <S2SV_EndBug> <S2SV_StartBug> ( void ) arg2 ; <S2SV_EndBug> <S2SV_StartBug> vp9_loop_filter_rows ( lf_data -> frame_buffer , lf_data -> cm , & lf_data -> xd , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , void * unused ) { <S2SV_ModEnd> <S2SV_ModStart> unused <S2SV_ModEnd> <S2SV_ModStart> lf_data -> planes <S2SV_ModEnd> "
2456,"<S2SV_StartBug> ( void ) memmove ( cp , cp + 2 , strlen ( file ) - 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> cp <S2SV_ModEnd> 
2457,<S2SV_StartBug> if ( ( e -> target_offset == sizeof ( struct arpt_entry ) && <S2SV_EndBug> <S2SV_StartBug> t -> verdict < 0 && unconditional ( & e -> arp ) ) || <S2SV_EndBug> ,<S2SV_ModStart> unconditional ( e <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2458,<S2SV_StartBug> int event_id = event -> attr . config ; <S2SV_EndBug> ,<S2SV_ModStart> u64 <S2SV_ModEnd> 
2459,<S2SV_StartBug> alarm_timer = alarm_new ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> btif_config_devcache_cleanup ( ) ; 
2460,<S2SV_StartBug> int groups_per_flex = 0 ; <S2SV_EndBug> <S2SV_StartBug> groups_per_flex = 1 << sbi -> s_log_groups_per_flex ; <S2SV_EndBug> <S2SV_StartBug> if ( groups_per_flex < 2 ) { <S2SV_EndBug> ,<S2SV_ModStart> unsigned <S2SV_ModStart> if ( sbi -> s_log_groups_per_flex < 1 || sbi -> s_log_groups_per_flex > 31 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModStart>  <S2SV_ModEnd> 
2461,<S2SV_StartBug> for ( k = passIC + 2 ; k < passIC + 2 + passInstructions [ passIC + 1 ] ; k ++ ) <S2SV_EndBug> ,<S2SV_ModStart> ( ( <S2SV_ModStart> ) && ( kk < input -> length ) ) 
2462,<S2SV_StartBug> kfree_skb ( skb ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2463,"<S2SV_StartBug> int rc ; <S2SV_EndBug> <S2SV_StartBug> struct crypto_skcipher * tfm_des ; <S2SV_EndBug> <S2SV_StartBug> tfm_des = crypto_alloc_skcipher ( ""ecb(des)"" , 0 , CRYPTO_ALG_ASYNC ) ; <S2SV_EndBug> <S2SV_StartBug> rc = PTR_ERR ( tfm_des ) ; <S2SV_EndBug> <S2SV_StartBug> goto smbhash_err ; <S2SV_EndBug> <S2SV_StartBug> sg_init_one ( & sgin , in , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> smbhash_err : <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> crypto_cipher * tfm_des <S2SV_ModEnd> <S2SV_ModStart> crypto_alloc_cipher ( ""des"" <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return PTR_ERR ( tfm_des ) ; } crypto_cipher_setkey <S2SV_ModEnd> <S2SV_ModStart> crypto_cipher_encrypt_one ( tfm_des , out , in ) ; crypto_free_cipher <S2SV_ModEnd> <S2SV_ModStart> return 0 <S2SV_ModEnd> "
2464,<S2SV_StartBug> Jpeg2000Prec * prec = band -> prec + precno ; <S2SV_EndBug> <S2SV_StartBug> av_freep ( & band -> prec ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( band -> prec ) { <S2SV_ModStart> } 
2465,<S2SV_StartBug> if ( ret ) { <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> ,"<S2SV_ModStart> ret = - EINVAL ; if ( ! ret && CONFIG_IS_ENABLED ( FIT_SIGNATURE ) ) { ret = fdt_check_no_at ( fit , 0 ) ; if ( ret ) <S2SV_ModStart> ret ; } } if ( ret ) { log_debug ( ""FIT<S2SV_blank>check<S2SV_blank>error<S2SV_blank>%d\\n"" , ret ) ; return ret <S2SV_ModEnd> "
2466,<S2SV_StartBug> if ( len > BUFSIZE + sizeof ( struct nbd_reply ) ) <S2SV_EndBug> ,<S2SV_ModStart> - <S2SV_ModEnd> 
2467,<S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> lvd = ( struct logicalVolDesc * ) bh -> b_data ; <S2SV_EndBug> <S2SV_StartBug> i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; <S2SV_EndBug> ,"<S2SV_ModStart> unsigned int table_len ; <S2SV_ModStart> table_len = le32_to_cpu ( lvd -> mapTableLength ) ; if ( sizeof ( * lvd ) + table_len > sb -> s_blocksize ) { udf_err ( sb , ""error<S2SV_blank>loading<S2SV_blank>logical<S2SV_blank>volume<S2SV_blank>descriptor:<S2SV_blank>"" ""Partition<S2SV_blank>table<S2SV_blank>too<S2SV_blank>long<S2SV_blank>(%u<S2SV_blank>><S2SV_blank>%lu)\\n"" , table_len , sb -> s_blocksize - sizeof ( * lvd ) ) ; goto out_bh ; } <S2SV_ModStart> table_len <S2SV_ModEnd> "
2468,<S2SV_StartBug> int shift = VP8_BD_VALUE_SIZE - 8 - ( count + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> size_t n = bytes_left > sizeof ( decrypted ) ? sizeof ( decrypted ) : bytes_left ; <S2SV_EndBug> ,"<S2SV_ModStart> CHAR_BIT <S2SV_ModEnd> <S2SV_ModStart> CHAR_BIT <S2SV_ModEnd> <S2SV_ModStart> MIN ( sizeof ( decrypted ) , bytes_left ) <S2SV_ModEnd> "
2469,"<S2SV_StartBug> if ( in ) { <S2SV_EndBug> <S2SV_StartBug> dev -> out_pipe = usb_sndbulkpipe ( udev , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( out ) <S2SV_ModStart>  <S2SV_ModEnd> 
2470,<S2SV_StartBug> for ( y = 0 ; y < s -> height ; ++ y ) { <S2SV_EndBug> ,<S2SV_ModStart> av_assert0 ( s -> bit_depth > 1 ) ; 
2471,"<S2SV_StartBug> static void nfs4_return_incompatible_delegation ( struct inode * inode , mode_t open_flags ) <S2SV_EndBug> <S2SV_StartBug> if ( delegation == NULL || ( delegation -> type & open_flags ) == open_flags ) { <S2SV_EndBug> ",<S2SV_ModStart> fmode_t fmode <S2SV_ModEnd> <S2SV_ModStart> fmode ) == fmode <S2SV_ModEnd> 
2472,"<S2SV_StartBug> void jslTokenAsString ( int token , char * str , size_t len ) { <S2SV_EndBug> <S2SV_StartBug> case LEX_EOF : strncpy ( str , ""EOF"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_ID : strncpy ( str , ""ID"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_INT : strncpy ( str , ""INT"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_FLOAT : strncpy ( str , ""FLOAT"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_STR : strncpy ( str , ""STRING"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_UNFINISHED_STR : strncpy ( str , ""UNFINISHED<S2SV_blank>STRING"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_TEMPLATE_LITERAL : strncpy ( str , ""TEMPLATE<S2SV_blank>LITERAL"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_UNFINISHED_TEMPLATE_LITERAL : strncpy ( str , ""UNFINISHED<S2SV_blank>TEMPLATE<S2SV_blank>LITERAL"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_REGEX : strncpy ( str , ""REGEX"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_UNFINISHED_REGEX : strncpy ( str , ""UNFINISHED<S2SV_blank>REGEX"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> case LEX_UNFINISHED_COMMENT : strncpy ( str , ""UNFINISHED<S2SV_blank>COMMENT"" , len ) ; return ; <S2SV_EndBug> <S2SV_StartBug> strncpy ( str , & tokenNames [ p ] , len ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( len >= 10 ) ; <S2SV_EndBug> ",<S2SV_ModStart> assert ( len > 28 ) ; <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2473,<S2SV_StartBug> if ( ! handle ) <S2SV_EndBug> ,<S2SV_ModStart> || ! SecIsValidHandle ( handle ) 
2474,<S2SV_StartBug> sax -> sax25_family = AF_NETROM ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( sax , 0 , sizeof ( sax ) ) ; "
2475,"<S2SV_StartBug> static int jas_iccputuint ( jas_stream_t * out , int n , ulonglong val ) <S2SV_EndBug> ",<S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> 
2476,<S2SV_StartBug> return res ; <S2SV_EndBug> ,<S2SV_ModStart> cleanup : <S2SV_ModEnd> 
2477,"<S2SV_StartBug> } else if ( cmd == CMD_FREE ) { <S2SV_EndBug> <S2SV_StartBug> if ( section == & service_options || section == & new_service_options ) <S2SV_EndBug> <S2SV_StartBug> s_log ( LOG_DEBUG , ""Deallocating<S2SV_blank>section<S2SV_blank>defaults"" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> s_log ( LOG_NOTICE , <S2SV_EndBug> <S2SV_StartBug> if ( section == & service_options ) <S2SV_EndBug> ","<S2SV_ModStart> if ( section == & service_options ) s_log ( LOG_ERR , ""INTERNAL<S2SV_blank>ERROR:<S2SV_blank>Initializing<S2SV_blank>deployed<S2SV_blank>section<S2SV_blank>defaults"" ) ; else if ( section == & new_service_options ) s_log ( LOG_INFO , ""Initializing<S2SV_blank>inetd<S2SV_blank>mode<S2SV_blank>configuration"" ) ; else s_log ( LOG_INFO , ""Initializing<S2SV_blank>service<S2SV_blank>[%s]"" , section -> servname ) ; <S2SV_ModStart> ) s_log ( LOG_DEBUG , ""Deallocating<S2SV_blank>deployed<S2SV_blank>section<S2SV_blank>defaults"" ) ; else if ( <S2SV_ModEnd> <S2SV_ModStart> ""Deallocating<S2SV_blank>temporary<S2SV_blank>section<S2SV_blank>defaults"" <S2SV_ModEnd> <S2SV_ModStart> # if OPENSSL_VERSION_NUMBER >= 0x10100000L switch ( cmd ) { case CMD_SET_DEFAULTS : section -> security_level = - 1 ; break ; case CMD_SET_COPY : section -> security_level = new_service_options . security_level ; break ; case CMD_FREE : break ; case CMD_SET_VALUE : if ( strcasecmp ( opt , ""securityLevel"" ) ) break ; { char * tmp_str ; int tmp_int = ( int ) strtol ( arg , & tmp_str , 10 ) ; if ( tmp_str == arg || * tmp_str || tmp_int < 0 || tmp_int > 5 ) return ""Illegal<S2SV_blank>security<S2SV_blank>level"" ; section -> security_level = tmp_int ; } return NULL ; case CMD_INITIALIZE : break ; case CMD_PRINT_DEFAULTS : s_log ( LOG_NOTICE , ""%-22s<S2SV_blank>=<S2SV_blank>%d"" , ""securityLevel"" , DEFAULT_SECURITY_LEVEL ) ; break ; case CMD_PRINT_HELP : s_log ( LOG_NOTICE , ""%-22s<S2SV_blank>=<S2SV_blank>set<S2SV_blank>the<S2SV_blank>security<S2SV_blank>level"" , ""securityLevel"" ) ; break ; } # endif <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> || section == & new_service_options "
2478,<S2SV_StartBug> lockdep_assert_irqs_disabled ( ) ; <S2SV_EndBug> <S2SV_StartBug> preempt_count_sub ( cnt ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; if ( preempt_count ( ) == cnt ) trace_preempt_on ( CALLER_ADDR0 , get_lock_parent_ip ( ) <S2SV_ModStart> __preempt_count_sub <S2SV_ModEnd> "
2479,"<S2SV_StartBug> vp8_clamp_mv ( ref_mv , x -> mv_col_min , x -> mv_col_max , x -> mv_row_min , x -> mv_row_max ) ; <S2SV_EndBug> <S2SV_StartBug> bestsad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; <S2SV_EndBug> <S2SV_StartBug> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; <S2SV_EndBug> <S2SV_StartBug> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; <S2SV_EndBug> <S2SV_StartBug> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; <S2SV_EndBug> <S2SV_StartBug> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; <S2SV_EndBug> <S2SV_StartBug> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; <S2SV_EndBug> ",<S2SV_ModStart> ( void ) mvcost ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> else ( void ) search_param ; # <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2480,"<S2SV_StartBug> struct mount * child , * p ; <S2SV_EndBug> <S2SV_StartBug> if ( IS_MNT_SHARED ( dest_mnt ) ) { <S2SV_EndBug> <S2SV_StartBug> err = propagate_mnt ( dest_mnt , dest_mp , source_mnt , & tree_list ) ; <S2SV_EndBug> <S2SV_StartBug> umount_tree ( child , UMOUNT_SYNC ) ; <S2SV_EndBug> <S2SV_StartBug> return err ; <S2SV_EndBug> ","<S2SV_ModStart> mnt_namespace * ns = dest_mnt -> mnt_ns ; struct <S2SV_ModStart> ! parent_path ) { err = count_mounts ( ns , source_mnt <S2SV_ModEnd> <S2SV_ModStart> } if ( IS_MNT_SHARED ( dest_mnt ) ) { err = invent_group_ids ( source_mnt , true ) ; if ( err ) goto out ; <S2SV_ModStart> child -> mnt_parent -> mnt_ns -> pending_mounts = 0 ; <S2SV_ModStart> ns -> pending_mounts = 0 ; "
2481,"<S2SV_StartBug> int contentlen = 0 ; <S2SV_EndBug> <S2SV_StartBug> contentlen = atoi ( sb ) ; <S2SV_EndBug> <S2SV_StartBug> printstr ( & pp , ""<form<S2SV_blank>method=\\""POST\\""<S2SV_blank>action=\\""/U\\""><textarea<S2SV_blank>cols=\\""80\\""<S2SV_blank>rows=\\""30\\""<S2SV_blank>name=\\""conffile\\"">"" ) ; <S2SV_EndBug> <S2SV_StartBug> int l = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! writable || fseek ( writable , 0 , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( ( i = sockgetlinebuf ( param , CLIENT , ( unsigned char * ) buf , LINESIZE - 1 , '+' , conf . timeouts [ STRING_S ] ) ) > 0 ) { <S2SV_EndBug> <S2SV_StartBug> buf [ i ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! error ) { <S2SV_EndBug> <S2SV_StartBug> l += i ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned <S2SV_ModEnd> <S2SV_ModStart> sscanf ( sb , ""%u"" , & contentlen ) ; if ( contentlen > LINESIZE * 1024 ) contentlen = 0 <S2SV_ModEnd> <S2SV_ModStart> ""<form<S2SV_blank>method=\\""POST\\""<S2SV_blank>action=\\""/U\\""<S2SV_blank>enctype=\\""application/x-www-form-urlencoded\\""><textarea<S2SV_blank>cols=\\""80\\""<S2SV_blank>rows=\\""30\\""<S2SV_blank>name=\\""conffile\\"">"" <S2SV_ModEnd> <S2SV_ModStart> unsigned <S2SV_ModEnd> <S2SV_ModStart> ! contentlen || <S2SV_ModStart> l < contentlen && <S2SV_ModStart> ( contentlen - l ) > <S2SV_ModStart> ? LINESIZE - 1 : contentlen - l <S2SV_ModStart> if ( ! l ) { if ( i < 9 || <S2SV_ModEnd> <S2SV_ModStart> buf [ i ] = 0 ; <S2SV_ModStart>  <S2SV_ModEnd> "
2482,"<S2SV_StartBug> __skb_complete_tx_timestamp ( skb , sk , SCM_TSTAMP_SND ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false "
2483,"<S2SV_StartBug> static int nfs4_intent_set_file ( struct nameidata * nd , struct path * path , struct nfs4_state * state ) <S2SV_EndBug> <S2SV_StartBug> if ( nd -> intent . open . flags & FMODE_EXEC ) { <S2SV_EndBug> <S2SV_StartBug> nfs4_close_sync ( path , state , nd -> intent . open . flags ) ; <S2SV_EndBug> ","<S2SV_ModStart> , fmode_t fmode <S2SV_ModStart> fmode <S2SV_ModEnd> <S2SV_ModStart> fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> "
2484,"<S2SV_StartBug> bpf_map_inc ( map , true ) ; <S2SV_EndBug> ",<S2SV_ModStart> map = 
2485,"<S2SV_StartBug> value -> x = MinF ( 1.0f , MaxF ( 0.0f , value -> x ) ) ; <S2SV_EndBug> <S2SV_StartBug> value -> y = MinF ( 1.0f , MaxF ( 0.0f , value -> y ) ) ; <S2SV_EndBug> <S2SV_StartBug> value -> z = MinF ( 1.0f , MaxF ( 0.0f , value -> z ) ) ; <S2SV_EndBug> <S2SV_StartBug> value -> w = MinF ( 1.0f , MaxF ( 0.0f , value -> w ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> MagickMax <S2SV_ModEnd> <S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> MagickMax <S2SV_ModEnd> <S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> MagickMax <S2SV_ModEnd> <S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> MagickMax <S2SV_ModEnd> 
2486,"<S2SV_StartBug> int col_offset , end_col_offset ; <S2SV_EndBug> <S2SV_StartBug> ps -> p_flags |= CO_FUTURE_BARRY_AS_BDFL ; <S2SV_EndBug> <S2SV_StartBug> if ( ( err_ret -> error = <S2SV_EndBug> <S2SV_StartBug> ps -> p_tree = NULL ; <S2SV_EndBug> ","<S2SV_ModStart> growable_int_array type_ignores ; if ( ! growable_int_array_init ( & type_ignores , 10 ) ) { err_ret -> error = E_NOMEM ; PyTokenizer_Free ( tok ) ; return NULL ; } <S2SV_ModStart> ; if ( * flags & PyPARSE_TYPE_COMMENTS ) ps -> p_flags |= PyCF_TYPE_COMMENTS <S2SV_ModStart> type == TYPE_IGNORE ) { if ( ! growable_int_array_add ( & type_ignores , tok -> lineno ) ) { err_ret -> error = E_NOMEM ; break ; } continue ; } if ( <S2SV_ModStart> ; if ( n -> n_type == file_input ) { int num ; node * ch ; size_t i ; num = NCH ( n ) ; ch = CHILD ( n , num - 1 ) ; REQ ( ch , ENDMARKER ) ; for ( i = 0 ; i < type_ignores . num_items ; i ++ ) { PyNode_AddChild ( ch , TYPE_IGNORE , NULL , type_ignores . items [ i ] , 0 , type_ignores . items [ i ] , 0 ) ; } } growable_int_array_deallocate ( & type_ignores ) "
2487,"<S2SV_StartBug> vpx_memcpy ( cpi -> segmentation_map , segmentation_map , ( cpi -> common . mb_rows * cpi -> common . mb_cols ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> 
2488,<S2SV_StartBug> cpi -> common . last_frame_type = cpi -> common . frame_type ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cpi -> rc . rc_2_frame = 0 ; cpi -> rc . rc_1_frame = 0 ; 
2489,"<S2SV_StartBug> ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_EndBug> <S2SV_StartBug> ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_EndBug> <S2SV_StartBug> ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_EndBug> <S2SV_StartBug> height ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""ImproperImageHeader"" <S2SV_ModEnd> <S2SV_ModStart> ""ImproperImageHeader"" <S2SV_ModEnd> <S2SV_ModStart> ""ImproperImageHeader"" <S2SV_ModEnd> <S2SV_ModStart> else { if ( sun_info . length > ( height * bytes_per_line ) ) ThrowReaderException ( ResourceLimitError , ""ImproperImageHeader"" ) ; ( void ) CopyMagickMemory ( sun_pixels , sun_data , sun_info . length ) ; } "
2490,"<S2SV_StartBug> total_len = iov_length ( iov , nr_segs ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> void * addr ; <S2SV_EndBug> <S2SV_StartBug> size_t chars = buf -> len ; <S2SV_EndBug> <S2SV_StartBug> int error , atomic ; <S2SV_EndBug> <S2SV_StartBug> atomic = ! iov_fault_in_pages_write ( iov , chars ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct iov_iter iter ; <S2SV_ModStart> ; iov_iter_init ( & iter , iov , nr_segs , total_len , 0 ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; size_t written <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> written = copy_page_to_iter ( buf -> page , buf -> offset , chars , & iter ) ; if ( unlikely ( written < chars ) ) { if ( ! ret ) ret = - EFAULT <S2SV_ModEnd> "
2491,<S2SV_StartBug> ke = & md -> chain [ ISAKMP_NEXT_v2KE ] -> payload . v2ke ; <S2SV_EndBug> <S2SV_StartBug> libreswan_log ( <S2SV_EndBug> <S2SV_StartBug> return v2N_INVALID_KE_PAYLOAD ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! md -> chain [ ISAKMP_NEXT_v2KE ] ) { if ( md -> chain [ ISAKMP_NEXT_v2N ] ) { libreswan_log ( ""Received<S2SV_blank>Notify(%d):<S2SV_blank>%s"" , md -> chain [ ISAKMP_NEXT_v2N ] -> payload . v2n . isan_type , enum_name ( & ikev2_notify_names , md -> chain [ ISAKMP_NEXT_v2N ] -> payload . v2n . isan_type ) ) ; } libreswan_log ( ""rejecting<S2SV_blank>I1<S2SV_blank>from<S2SV_blank>%s:%u,<S2SV_blank>no<S2SV_blank>KE<S2SV_blank>payload<S2SV_blank>present"" , fromname , md -> sender_port ) ; return STF_FAIL + v2N_INVALID_KE_PAYLOAD ; } ke = & md -> chain [ ISAKMP_NEXT_v2KE ] -> payload . v2ke ; st -> st_oakley . group = lookup_group ( ke -> isak_group ) ; if ( st -> st_oakley . group == NULL ) { libreswan_log ( <S2SV_ModEnd> <S2SV_ModStart> STF_FAIL + "
2492,<S2SV_StartBug> if ( count < DJREPORT_SHORT_LENGTH - 2 ) <S2SV_EndBug> ,<S2SV_ModStart> > <S2SV_ModEnd> 
2493,"<S2SV_StartBug> record_and_restart ( event , val , regs , nmi ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2494,"<S2SV_StartBug> id = idr_alloc ( & ids -> ipcs_idr , new , <S2SV_EndBug> <S2SV_StartBug> current_euid_egid ( & euid , & egid ) ; <S2SV_EndBug> ","<S2SV_ModStart> current_euid_egid ( & euid , & egid ) ; new -> cuid = new -> uid = euid ; new -> gid = new -> cgid = egid ; <S2SV_ModStart>  <S2SV_ModEnd> "
2495,<S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart> * tl_data_head = NULL ; 
2496,"<S2SV_StartBug> spin_lock ( & desc -> iuspin ) ; <S2SV_EndBug> <S2SV_StartBug> desc -> reslength = urb -> actual_length ; <S2SV_EndBug> <S2SV_StartBug> memmove ( desc -> ubuf + desc -> length , desc -> inbuf , desc -> reslength ) ; <S2SV_EndBug> ","<S2SV_ModStart> int length = urb -> actual_length ; <S2SV_ModStart> if ( length + desc -> length > desc -> wMaxCommand ) { set_bit ( WDM_OVERFLOW , & desc -> flags ) ; } else { if ( ! test_bit ( WDM_OVERFLOW , & desc -> flags ) ) { <S2SV_ModEnd> <S2SV_ModStart> length ) ; desc -> length += length ; <S2SV_ModStart> = length ; } } <S2SV_ModEnd> "
2497,<S2SV_StartBug> goto no_match ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( cd -> flags & DETECT_CONTENT_RELATIVE_NEXT ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( det_ctx -> discontinue_matching ) <S2SV_EndBug> ,"<S2SV_ModStart> if ( ( cd -> flags & ( DETECT_CONTENT_DISTANCE | DETECT_CONTENT_WITHIN ) ) == 0 ) { det_ctx -> discontinue_matching = 1 ; } <S2SV_ModStart> smd -> is_last ) { goto match <S2SV_ModEnd> <S2SV_ModStart> SCLogDebug ( ""no<S2SV_blank>match<S2SV_blank>for<S2SV_blank>\'next<S2SV_blank>sm\'"" ) ; <S2SV_ModStart> { SCLogDebug ( ""\'next<S2SV_blank>sm\'<S2SV_blank>said<S2SV_blank>to<S2SV_blank>discontinue<S2SV_blank>this<S2SV_blank>right<S2SV_blank>now"" ) ; goto no_match ; } if ( ( cd -> flags & DETECT_CONTENT_RELATIVE_NEXT ) == 0 ) { SCLogDebug ( ""\'next<S2SV_blank>sm\'<S2SV_blank>does<S2SV_blank>not<S2SV_blank>depend<S2SV_blank>on<S2SV_blank>me,<S2SV_blank>so<S2SV_blank>we<S2SV_blank>can<S2SV_blank>give<S2SV_blank>up"" ) ; det_ctx -> discontinue_matching = 1 ; goto no_match ; } SCLogDebug ( ""\'next<S2SV_blank>sm\'<S2SV_blank>depends<S2SV_blank>on<S2SV_blank>me<S2SV_blank>%p,<S2SV_blank>lets<S2SV_blank>see<S2SV_blank>what<S2SV_blank>we<S2SV_blank>can<S2SV_blank>do<S2SV_blank>(flags<S2SV_blank>%u)"" , cd , cd -> flags ) <S2SV_ModEnd> "
2498,<S2SV_StartBug> usleep ( 10000 ) ; <S2SV_EndBug> ,<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
2499,<S2SV_StartBug> struct trusted_key_payload * p = key -> payload . data [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> struct trusted_key_payload * new_p ; <S2SV_EndBug> ,"<S2SV_ModStart> p ; struct trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob ; int ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) return - ENOKEY ; <S2SV_ModStart>  <S2SV_ModEnd> "
2500,"<S2SV_StartBug> return ( xdr_opaque ( xdrs , * objp , size ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! <S2SV_ModEnd> <S2SV_ModStart> return FALSE ; if ( ( * objp ) [ size - 1 ] != '\\0' ) return FALSE ; if ( memchr ( * objp , '\\0' , size - 1 ) != NULL ) return FALSE ; return TRUE "
2501,<S2SV_StartBug> FreeStmt ( ( ParseCommon * ) & append ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2502,"<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> nfunc , line , qedi -> host_no , & vaf ) ; <S2SV_EndBug> <S2SV_StartBug> pr_warn ( ""[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV"" , nfunc , line , & vaf ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> 
2503,<S2SV_StartBug> for ( i = 0 ; i < name_len ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> int name_len ; <S2SV_EndBug> ,"<S2SV_ModStart> avio_skip ( pb , name_len <S2SV_ModEnd> <S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA "
2504,"<S2SV_StartBug> int len ; <S2SV_EndBug> <S2SV_StartBug> imapc -> mailbox = curl_easy_unescape ( data , path , 0 , & len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! imapc -> mailbox ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return Curl_urldecode <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , NULL , TRUE ) <S2SV_ModEnd> "
2505,<S2SV_StartBug> if ( ! npages ) { <S2SV_EndBug> ,<S2SV_ModStart> || base_gfn != old . base_gfn 
2506,<S2SV_StartBug> return FALSE ; <S2SV_EndBug> ,<S2SV_ModStart> transport -> credssp = NULL ; 
2507,<S2SV_StartBug> ( unsigned char * ) e + sizeof ( struct arpt_entry ) >= limit ) { <S2SV_EndBug> ,<S2SV_ModStart> limit || ( unsigned char * ) e + e -> next_offset > 
2508,"<S2SV_StartBug> sParse . rc = SQLITE_OK ; <S2SV_EndBug> <S2SV_StartBug> sqlite3SelectPrep ( & sParse , sParse . pNewTable -> pSelect , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> pSelect -> selFlags &= ~ SF_View ; <S2SV_ModStart>  <S2SV_ModEnd> 
2509,<S2SV_StartBug> pthread_mutex_lock ( & lock ) ; <S2SV_EndBug> ,<S2SV_ModStart> btif_config_write ( <S2SV_ModEnd> 
2510,<S2SV_StartBug> gctx = group_leader -> ctx ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & gctx -> mutex ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & gctx -> mutex ) ; <S2SV_EndBug> ,"<S2SV_ModStart> __perf_event_ctx_lock_double ( group_leader , ctx <S2SV_ModEnd> <S2SV_ModStart> if ( ! ( group_leader -> group_caps & PERF_EV_CAP_SOFTWARE ) ) { if ( gctx != ctx ) { err = - EINVAL ; goto err_locked ; } else { perf_event_ctx_unlock ( group_leader , gctx ) ; move_group = 0 ; } } <S2SV_ModStart> perf_event_ctx_unlock ( group_leader , gctx <S2SV_ModEnd> <S2SV_ModStart> perf_event_ctx_unlock ( group_leader , gctx <S2SV_ModEnd> "
2511,<S2SV_StartBug> EVP_MD_CTX_init ( & ctx ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( signature -> type == V_ASN1_BIT_STRING && signature -> flags & 0x7 ) { ASN1err ( ASN1_F_ASN1_VERIFY , ASN1_R_INVALID_BIT_STRING_BITS_LEFT ) ; return - 1 ; } "
2512,"<S2SV_StartBug> # if defined ( MAGICKCORE_BUILD_MODULES ) || defined ( _DLL ) <S2SV_EndBug> <S2SV_StartBug> ""<S2SV_blank>HDRI"" <S2SV_EndBug> <S2SV_StartBug> ; <S2SV_EndBug> ","<S2SV_ModStart> MAGICKCORE_WINDOWS_SUPPORT ) && defined ( _DEBUG ) ""<S2SV_blank>Debug"" # endif # if defined ( MAGICKCORE_CIPHER_SUPPORT ) ""<S2SV_blank>Cipher"" <S2SV_ModEnd> <S2SV_ModStart> # endif # if defined ( MAGICKCORE_BUILD_MODULES ) || defined ( _DLL ) ""<S2SV_blank>Modules"" <S2SV_ModStart> # if defined ( ZERO_CONFIGURATION_SUPPORT ) ""<S2SV_blank>Zero-configuration"" # endif "
2513,"<S2SV_StartBug> vmcs_writel ( HOST_CR0 , read_cr0 ( ) & ~ X86_CR0_TS ) ; <S2SV_EndBug> <S2SV_StartBug> vmcs_writel ( HOST_CR4 , read_cr4 ( ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned long cr4 ; <S2SV_ModStart> HOST_CR3 , read_cr3 ( ) ) ; cr4 = read_cr4 ( ) ; vmcs_writel ( HOST_CR4 , cr4 ) ; vmx -> host_state . vmcs_host_cr4 = cr4 <S2SV_ModEnd> "
2514,"<S2SV_StartBug> int64_t * time_stamp , int64_t * time_end_stamp , <S2SV_EndBug> <S2SV_StartBug> vp9_ppflags_t * flags ) { <S2SV_EndBug> <S2SV_StartBug> int ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( pbi -> common . show_frame == 0 ) <S2SV_EndBug> <S2SV_StartBug> * time_stamp = pbi -> last_time_stamp ; <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_VP9_POSTPROC <S2SV_EndBug> <S2SV_StartBug> ret = vp9_post_proc_frame ( & pbi -> common , sd , flags ) ; <S2SV_EndBug> <S2SV_StartBug> * sd = * pbi -> common . frame_to_show ; <S2SV_EndBug> <S2SV_StartBug> vp9_clear_system_state ( ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> VP9_COMMON * const cm = & pbi -> common ; <S2SV_ModStart> # if ! CONFIG_VP9_POSTPROC ( void ) * flags ; # endif <S2SV_ModStart> pbi -> ready_for_new_data = 1 ; if ( ! cm -> show_frame <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! cm -> show_existing_frame ) { <S2SV_ModStart> cm <S2SV_ModEnd> <S2SV_ModStart> } else { * sd = * cm -> frame_to_show ; ret = 0 ; } <S2SV_ModStart> cm -> frame_to_show <S2SV_ModEnd> <S2SV_ModStart> vpx_clear_system_state <S2SV_ModEnd> 
2515,"<S2SV_StartBug> dev_net_set ( dev , net ) ; <S2SV_EndBug> ","<S2SV_ModStart> err = dev_get_valid_name ( net , dev , name ) ; if ( err ) goto err_free_dev ; "
2516,"<S2SV_StartBug> isoclns_print ( ndo , p , length , length ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2517,"<S2SV_StartBug> DPRINTF ( ""Data<S2SV_blank>ready<S2SV_blank>tag=0x%x<S2SV_blank>len=%zd\\n"" , r -> req . tag , r -> iov . iov_len ) ; <S2SV_EndBug> <S2SV_StartBug> n = r -> iov . iov_len / 512 ; <S2SV_EndBug> <S2SV_StartBug> scsi_req_data ( & r -> req , r -> iov . iov_len ) ; <S2SV_EndBug> ",<S2SV_ModStart> qiov . size <S2SV_ModEnd> <S2SV_ModStart> qiov . size <S2SV_ModEnd> <S2SV_ModStart> qiov . size <S2SV_ModEnd> 
2518,<S2SV_StartBug> ( cm -> frame_flags & FRAMEFLAGS_KEY ) || <S2SV_EndBug> <S2SV_StartBug> ( cpi -> oxcf . auto_key && test_for_kf_one_pass ( cpi ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> rc -> frames_to_key = cpi -> key_frame_frequency ; <S2SV_EndBug> <S2SV_StartBug> rc -> source_alt_ref_active = 0 ; <S2SV_EndBug> <S2SV_StartBug> target = calc_pframe_target_size_one_pass_cbr ( cpi ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> rc -> frames_till_gf_update_due = INT_MAX ; <S2SV_EndBug> ,<S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> oxcf . key_freq <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } if ( rc -> frames_till_gf_update_due == 0 ) { if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ ) vp9_cyclic_refresh_set_golden_update ( cpi ) ; else rc -> baseline_gf_interval = ( rc -> min_gf_interval + rc -> max_gf_interval ) / 2 ; rc -> frames_till_gf_update_due = rc -> baseline_gf_interval ; if ( rc -> frames_till_gf_update_due > rc -> frames_to_key ) rc -> frames_till_gf_update_due = rc -> frames_to_key ; cpi -> refresh_golden_frame = 1 ; rc -> gfu_boost = DEFAULT_GF_BOOST ; } if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ ) vp9_cyclic_refresh_update_parameters ( cpi ) ; if ( cm -> frame_type == KEY_FRAME ) target = calc_iframe_target_size_one_pass_cbr ( cpi ) ; else target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> oxcf . resize_mode == RESIZE_DYNAMIC ) cpi -> resize_pending = vp9_resize_one_pass_cbr ( cpi ) ; else cpi -> resize_pending = 0 <S2SV_ModEnd> 
2519,"<S2SV_StartBug> u8 * data , * output ; <S2SV_EndBug> <S2SV_StartBug> u32 pck_size , prev_pck_size ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> data = ( char * ) gf_filter_pck_get_data ( pck , & pck_size ) ; <S2SV_EndBug> ",<S2SV_ModStart> = NULL <S2SV_ModStart> = 0 <S2SV_ModStart> else { <S2SV_ModStart> } 
2520,<S2SV_StartBug> if ( radiotap_header -> it_version ) <S2SV_EndBug> <S2SV_StartBug> ( unsigned long ) iterator -> _rtheader > <S2SV_EndBug> ,<S2SV_ModStart> max_length < sizeof ( struct ieee80211_radiotap_header ) ) return - EINVAL ; if ( <S2SV_ModStart> + sizeof ( uint32_t ) 
2521,"<S2SV_StartBug> opt = flowlabel ? flowlabel -> opt : np -> opt ; <S2SV_EndBug> <S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , opt , & final ) ; <S2SV_EndBug> ",<S2SV_ModStart> rcu_read_lock ( ) ; <S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) <S2SV_ModStart> ) ; rcu_read_unlock ( 
2522,"<S2SV_StartBug> int pkt_len ; <S2SV_EndBug> <S2SV_StartBug> pkt_len = parse_cosine_rec_hdr ( phdr , line , err , err_info ) ; <S2SV_EndBug> <S2SV_StartBug> return parse_cosine_hex_dump ( wth -> random_fh , phdr , pkt_len , buf , err , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return parse_cosine_packet <S2SV_ModEnd> <S2SV_ModStart> buf , line <S2SV_ModEnd> "
2523,<S2SV_StartBug> if ( class == BPF_ALU || class == BPF_ALU64 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> ,<S2SV_ModStart> env -> insn_aux_data [ insn_idx ] . seen = true ; <S2SV_ModStart> env -> insn_aux_data [ insn_idx ] . seen = true ; 
2524,<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> int rowstep ; <S2SV_EndBug> ,<S2SV_ModStart> jas_matind_t i ; jas_matind_t <S2SV_ModEnd> <S2SV_ModStart> jas_matind_t <S2SV_ModEnd> 
2525,"<S2SV_StartBug> Huff_transmit ( & huff , ch , seq ) ; <S2SV_EndBug> ","<S2SV_ModStart> , size << 3 "
2526,"<S2SV_StartBug> ( void ) TIFFGetField ( in , TIFFTAG_PLANARCONFIG , & shortv ) ; <S2SV_EndBug> ",<S2SV_ModStart> TIFFGetFieldDefaulted <S2SV_ModEnd> 
2527,"<S2SV_StartBug> # define ThrowPICTException ( exception , message ) { if ( tile_image != ( Image * ) NULL ) tile_image = DestroyImage ( tile_image ) ; if ( read_info != ( ImageInfo * ) NULL ) read_info = DestroyImageInfo ( read_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> if ( length != 0x000a ) <S2SV_EndBug> <S2SV_StartBug> if ( ReadRectangle ( image , & frame ) == MagickFalse ) <S2SV_EndBug> <S2SV_StartBug> length = ReadBlobMSBShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> length = ReadBlobMSBShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> length = ReadBlobMSBShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> if ( length == 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( length > 154 ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) length ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) length ; i ++ ) <S2SV_EndBug> ","<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , ""InsufficientImageDataInFile"" ) ; if ( <S2SV_ModStart> ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , ""InsufficientImageDataInFile"" <S2SV_ModStart> ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , ""InsufficientImageDataInFile"" <S2SV_ModStart> ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , ""InsufficientImageDataInFile"" <S2SV_ModStart> > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , ""InsufficientImageDataInFile"" ) ; if ( length > <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , ""InsufficientImageDataInFile"" ) ; "
2528,"<S2SV_StartBug> Assign ( asdl_seq * targets , expr_ty value , int lineno , int col_offset , int <S2SV_EndBug> <S2SV_StartBug> p -> lineno = lineno ; <S2SV_EndBug> ","<S2SV_ModStart> string type_comment , <S2SV_ModStart> v . Assign . type_comment = type_comment ; p -> "
2529,<S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; } 
2530,"<S2SV_StartBug> u64 nr , int nmi , <S2SV_EndBug> <S2SV_StartBug> perf_swevent_event ( event , nr , nmi , data , regs ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2531,"<S2SV_StartBug> uint32_t _WM_SetupMidiEvent ( struct _mdi * mdi , uint8_t * event_data , uint8_t running_event ) { <S2SV_EndBug> <S2SV_StartBug> if ( event_data [ 0 ] >= 0x80 ) { <S2SV_EndBug> <S2SV_StartBug> ret_cnt ++ ; <S2SV_EndBug> <S2SV_StartBug> data_1 = * event_data ++ ; <S2SV_EndBug> <S2SV_StartBug> data_1 = * event_data ++ ; <S2SV_EndBug> <S2SV_StartBug> data_1 = * event_data ++ ; <S2SV_EndBug> <S2SV_StartBug> data_1 = * event_data ++ ; <S2SV_EndBug> <S2SV_StartBug> data_1 = * event_data ++ ; <S2SV_EndBug> <S2SV_StartBug> midi_setup_sequenceno ( mdi , ( ( event_data [ 2 ] << 8 ) + event_data [ 3 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * event_data > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> ret_cnt ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> text = malloc ( tmp_length + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * event_data > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> ret_cnt ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ret_cnt ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( * event_data > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> ret_cnt ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> text = malloc ( tmp_length + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * event_data > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> ret_cnt ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> text = malloc ( tmp_length + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * event_data > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> ret_cnt ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> text = malloc ( tmp_length + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * event_data > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> ret_cnt ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> text = malloc ( tmp_length + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * event_data > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> ret_cnt ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> text = malloc ( tmp_length + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( ( event_data [ 0 ] == 0x20 ) && ( event_data [ 1 ] == 0x01 ) ) { <S2SV_EndBug> <S2SV_StartBug> midi_setup_portprefix ( mdi , event_data [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> _WM_midi_setup_endoftrack ( mdi ) ; <S2SV_EndBug> <S2SV_StartBug> _WM_midi_setup_tempo ( mdi , ( ( event_data [ 2 ] << 16 ) + ( event_data [ 3 ] << 8 ) + event_data [ 4 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( ( event_data [ 0 ] == 0x54 ) && ( event_data [ 1 ] == 0x05 ) ) { <S2SV_EndBug> <S2SV_StartBug> midi_setup_timesignature ( mdi , ( ( event_data [ 2 ] << 24 ) + ( event_data [ 3 ] << 16 ) + ( event_data [ 4 ] << 8 ) + event_data [ 5 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> midi_setup_keysignature ( mdi , ( ( event_data [ 2 ] << 8 ) + event_data [ 3 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * event_data > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> ret_cnt ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> ret_cnt ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! sysex_len ) break ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> uint32_t siz , <S2SV_ModStart> ! siz ) goto shortbuf ; if ( <S2SV_ModStart> ; if ( -- siz == 0 ) goto shortbuf <S2SV_ModStart> if ( siz < 2 ) goto shortbuf ; <S2SV_ModStart> if ( siz < 2 ) goto shortbuf ; <S2SV_ModStart> if ( siz < 2 ) goto shortbuf ; <S2SV_ModStart> if ( siz < 2 ) goto shortbuf ; <S2SV_ModStart> if ( siz < 2 ) goto shortbuf ; <S2SV_ModStart> if ( siz < 4 ) goto shortbuf ; <S2SV_ModStart> -- siz && <S2SV_ModStart> if ( ! siz ) break ; <S2SV_ModStart> siz -- ; <S2SV_ModStart> if ( ! siz ) goto shortbuf ; <S2SV_ModStart> if ( -- siz < tmp_length ) goto shortbuf ; if ( ! tmp_length ) break ; <S2SV_ModStart> -- siz && <S2SV_ModStart> if ( ! siz ) break ; <S2SV_ModStart> siz -- ; <S2SV_ModStart> if ( ! siz ) goto shortbuf ; <S2SV_ModStart> ; if ( -- siz < tmp_length ) goto shortbuf ; if ( ! tmp_length ) break <S2SV_ModStart> -- siz && <S2SV_ModStart> if ( ! siz ) break ; <S2SV_ModStart> siz -- ; <S2SV_ModStart> if ( ! siz ) goto shortbuf ; <S2SV_ModStart> if ( -- siz < tmp_length ) goto shortbuf ; if ( ! tmp_length ) break ; <S2SV_ModStart> -- siz && <S2SV_ModStart> if ( ! siz ) break ; <S2SV_ModStart> siz -- ; <S2SV_ModStart> if ( ! siz ) goto shortbuf ; <S2SV_ModStart> if ( -- siz < tmp_length ) goto shortbuf ; if ( ! tmp_length ) break ; <S2SV_ModStart> -- siz && <S2SV_ModStart> if ( ! siz ) break ; <S2SV_ModStart> siz -- ; <S2SV_ModStart> if ( ! siz ) goto shortbuf ; <S2SV_ModStart> if ( -- siz < tmp_length ) goto shortbuf ; if ( ! tmp_length ) break ; <S2SV_ModStart> -- siz && <S2SV_ModStart> if ( ! siz ) break ; <S2SV_ModStart> siz -- ; <S2SV_ModStart> if ( ! siz ) goto shortbuf ; <S2SV_ModStart> if ( -- siz < tmp_length ) goto shortbuf ; if ( ! tmp_length ) break ; <S2SV_ModStart> -- siz && <S2SV_ModStart> if ( ! siz ) break ; <S2SV_ModStart> siz -- ; <S2SV_ModStart> if ( ! siz ) goto shortbuf ; <S2SV_ModStart> if ( -- siz < tmp_length ) goto shortbuf ; if ( ! tmp_length ) break ; <S2SV_ModStart> if ( siz < 3 ) goto shortbuf ; <S2SV_ModStart> if ( siz < 3 ) goto shortbuf ; <S2SV_ModStart> if ( siz < 2 ) goto shortbuf ; <S2SV_ModStart> if ( siz < 5 ) goto shortbuf ; <S2SV_ModStart> if ( siz < 7 ) goto shortbuf ; <S2SV_ModStart> if ( siz < 6 ) goto shortbuf ; <S2SV_ModStart> if ( siz < 4 ) goto shortbuf ; <S2SV_ModStart> -- siz && <S2SV_ModStart> if ( ! siz ) break ; <S2SV_ModStart> siz -- ; <S2SV_ModStart> if ( ! siz ) goto shortbuf ; <S2SV_ModStart> if ( -- siz < tmp_length ) goto shortbuf ; <S2SV_ModStart> if ( ! siz ) break ; <S2SV_ModStart> siz -- ; <S2SV_ModStart> if ( ! siz ) goto shortbuf ; <S2SV_ModStart> ret_cnt ++ ; if ( -- siz < sysex_len ) goto shortbuf ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> shortbuf : _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , ""(input<S2SV_blank>too<S2SV_blank>short)"" , 0 ) ; return 0 ; "
2532,"<S2SV_StartBug> sprintf ( outfilename , ""%s_%05d.j2k"" , argv [ 2 ] , snum ) ; <S2SV_EndBug> ","<S2SV_ModStart> int num = snprintf <S2SV_ModEnd> <S2SV_ModStart> sizeof ( outfilename ) , <S2SV_ModStart> if ( num >= sizeof ( outfilename ) ) { fprintf ( stderr , ""maximum<S2SV_blank>length<S2SV_blank>of<S2SV_blank>output<S2SV_blank>prefix<S2SV_blank>exceeded\\n"" ) ; return 1 ; } "
2533,"<S2SV_StartBug> memset ( & rinfo [ val ] , 0 , SZ_SG_REQ_INFO ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2534,"<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_target ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( tmp == NULL ) goto failed ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_iter ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( tmp == NULL ) goto failed ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( ifs , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_is_async ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( tmp == NULL ) goto failed ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> ","<S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } <S2SV_ModEnd> <S2SV_ModStart> { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""target\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>comprehension"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } <S2SV_ModEnd> <S2SV_ModStart> { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""iter\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>comprehension"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_ifs , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""ifs\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>comprehension"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } <S2SV_ModEnd> <S2SV_ModStart> { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""is_async\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>comprehension"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2535,"<S2SV_StartBug> hlen = ip6_find_1stfragopt ( skb , & prevhdr ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( hlen < 0 ) { err = hlen ; goto fail ; } 
2536,"<S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> struct buf_2d backup_yv12 [ MAX_MB_PLANE ] = { { 0 } } ; <S2SV_EndBug> <S2SV_StartBug> int further_steps , step_param ; <S2SV_EndBug> <S2SV_StartBug> MV ref_mv = mbmi -> ref_mvs [ ref ] [ 0 ] . as_mv ; <S2SV_EndBug> <S2SV_StartBug> int tmp_row_max = x -> mv_row_max ; <S2SV_EndBug> <S2SV_StartBug> pred_mv [ 0 ] = mbmi -> ref_mvs [ ref ] [ 0 ] . as_mv ; <S2SV_EndBug> <S2SV_StartBug> pred_mv [ 1 ] = mbmi -> ref_mvs [ ref ] [ 1 ] . as_mv ; <S2SV_EndBug> <S2SV_StartBug> pred_mv [ 2 ] = x -> pred_mv [ ref ] . as_mv ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . auto_mv_step_size && cpi -> common . show_frame ) { <S2SV_EndBug> <S2SV_StartBug> step_param = ( vp9_init_search_range ( cpi , x -> max_mv_context [ ref ] ) + <S2SV_EndBug> <S2SV_StartBug> cpi -> mv_step_param ) >> 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . adaptive_motion_search && bsize < BLOCK_64X64 && <S2SV_EndBug> <S2SV_StartBug> int boffset = 2 * ( b_width_log2 ( BLOCK_64X64 ) - MIN ( b_height_log2 ( bsize ) , <S2SV_EndBug> <S2SV_StartBug> int bhl = b_height_log2_lookup [ bsize ] ; <S2SV_EndBug> <S2SV_StartBug> for ( i = LAST_FRAME ; i <= ALTREF_FRAME && cpi -> common . show_frame ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> x -> pred_mv [ ref ] . as_int = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < MAX_MB_PLANE ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> further_steps = ( cpi -> sf . max_step_search_steps - 1 ) - step_param ; <S2SV_EndBug> <S2SV_StartBug> bestsme = vp9_get_mvpred_var ( x , & tmp_mv -> as_mv , & ref_mv , <S2SV_EndBug> <S2SV_StartBug> & cpi -> fn_ptr [ bsize ] , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> sf . search_method == FAST_HEX ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> sf . search_method == HEX ) { <S2SV_EndBug> <S2SV_StartBug> & dis , & x -> pred_sse [ ref ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . adaptive_motion_search && cpi -> common . show_frame ) <S2SV_EndBug> <S2SV_StartBug> x -> pred_mv [ ref ] . as_int = tmp_mv -> as_int ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> , 0 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> x -> mbmi_ext <S2SV_ModEnd> <S2SV_ModStart> ; int cost_list [ 5 ] <S2SV_ModStart> x -> mbmi_ext <S2SV_ModEnd> <S2SV_ModStart> x -> mbmi_ext <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mv . auto_mv_step_size && cm -> <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> / 2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> b_width_log2_lookup [ BLOCK_64X64 ] <S2SV_ModEnd> <S2SV_ModStart> b_height_log2_lookup [ bsize ] , b_width_log2_lookup [ bsize ] <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> oxcf . resize_mode != RESIZE_DYNAMIC ) { int i ; <S2SV_ModStart> cm -> <S2SV_ModEnd> <S2SV_ModStart> row = 0 ; x -> pred_mv [ ref ] . col <S2SV_ModEnd> <S2SV_ModStart> ++ i <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> bestsme = vp9_full_pixel_search ( cpi , x , bsize , & mvp_full , step_param , sadpb , cond_cost_list ( cpi , cost_list ) , & ref_mv , & tmp_mv -> as_mv , INT_MAX , 1 ) ; x -> mv_col_min = tmp_col_min ; x -> mv_col_max = tmp_col_max ; x -> mv_row_min = tmp_row_min ; x -> mv_row_max = tmp_row_max <S2SV_ModEnd> <S2SV_ModStart> { int dis ; cpi -> find_fractional_mv_step <S2SV_ModEnd> <S2SV_ModStart> cm -> allow_high_precision_mv , x -> errorperbit , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mv . subpel_force_stop , <S2SV_ModEnd> <S2SV_ModStart> mv . subpel_iters_per_step , cond_cost_list ( cpi , cost_list ) , x -> nmvjointcost , x -> mvcost , & dis <S2SV_ModEnd> <S2SV_ModStart> , NULL , 0 , 0 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> as_mv <S2SV_ModEnd> "
2537,<S2SV_StartBug> u16 offset = sizeof ( struct ipv6hdr ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( * * nexthdr ) { <S2SV_EndBug> <S2SV_StartBug> offset += ipv6_optlen ( exthdr ) ; <S2SV_EndBug> ,<S2SV_ModStart> unsigned int <S2SV_ModEnd> <S2SV_ModStart> unsigned int len ; <S2SV_ModStart> len = ipv6_optlen ( exthdr ) ; if ( len + offset >= IPV6_MAXPLEN ) return - EINVAL ; offset += len <S2SV_ModEnd> 
2538,"<S2SV_StartBug> memcpy ( & ualg -> cru_name , & alg -> cra_name , sizeof ( ualg -> cru_name ) ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ualg -> cru_driver_name , & alg -> cra_driver_name , <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ualg -> cru_module_name , module_name ( alg -> cra_module ) , <S2SV_EndBug> <S2SV_StartBug> CRYPTO_MAX_ALG_NAME ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( rl . type , CRYPTO_MAX_ALG_NAME , ""%s"" , ""larval"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> strncpy ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strncpy ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strncpy ( <S2SV_ModEnd> <S2SV_ModStart> sizeof ( ualg -> cru_module_name ) ) ; ualg -> cru_type = 0 ; ualg -> cru_mask = 0 <S2SV_ModEnd> <S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> ""larval"" , sizeof ( rl . type ) <S2SV_ModEnd> "
2539,"<S2SV_StartBug> if ( ( fp = pcap_open_live ( source , <S2SV_EndBug> ","<S2SV_ModStart> is_url ( source ) ) { pcap_snprintf ( errmsgbuf , PCAP_ERRBUF_SIZE , ""Source<S2SV_blank>string<S2SV_blank>refers<S2SV_blank>to<S2SV_blank>a<S2SV_blank>remote<S2SV_blank>device"" ) ; goto error ; } if ( "
2540,"<S2SV_StartBug> imap_quote_string ( dest , dlen , buf ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false "
2541,"<S2SV_StartBug> u16 selector , int seg , u8 cpl , bool in_task_switch ) <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug> ","<S2SV_ModStart> , struct desc_struct * desc <S2SV_ModStart> if ( desc ) * desc = seg_desc ; "
2542,"<S2SV_StartBug> struct blkif_response resp ; <S2SV_EndBug> <S2SV_StartBug> resp . id = id ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( RING_GET_RESPONSE ( & blk_rings -> native , blk_rings -> native . rsp_prod_pvt ) , <S2SV_EndBug> <S2SV_StartBug> memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32 , blk_rings -> x86_32 . rsp_prod_pvt ) , <S2SV_EndBug> <S2SV_StartBug> memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64 , blk_rings -> x86_64 . rsp_prod_pvt ) , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> * <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> resp = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> resp = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> resp = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> resp -> id = id ; resp -> operation = op ; resp -> status = st ; 
2543,"<S2SV_StartBug> fprintf ( dump , ""%s"" , sdp ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( sdp && size ) 
2544,<S2SV_StartBug> if ( read != entry . uncompressed_filesize ) { <S2SV_EndBug> ,<S2SV_ModStart> || read <= 8 
2545,<S2SV_StartBug> r1 . event = SNDRV_TIMER_EVENT_RESOLUTION ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & r1 , 0 , sizeof ( r1 ) ) ; "
2546,"<S2SV_StartBug> ret = block_write_begin ( file , mapping , pos , len , flags , pagep , fsdata , <S2SV_EndBug> <S2SV_StartBug> ext4_get_block ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ext4_should_dioread_nolock ( inode ) ) <S2SV_ModStart> ext4_get_block_write ) ; else ret = block_write_begin ( file , mapping , pos , len , flags , pagep , fsdata , "
2547,"<S2SV_StartBug> int16_t vp9_ac_quant ( int qindex , int delta ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , vpx_bit_depth_t bit_depth ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : <S2SV_ModEnd> <S2SV_ModStart> case VPX_BITS_10 : return ac_qlookup_10 [ clamp ( qindex + delta , 0 , MAXQ ) ] ; case VPX_BITS_12 : return ac_qlookup_12 [ clamp ( qindex + delta , 0 , MAXQ ) ] ; default : assert ( 0 && ""bit_depth<S2SV_blank>should<S2SV_blank>be<S2SV_blank>VPX_BITS_8,<S2SV_blank>VPX_BITS_10<S2SV_blank>or<S2SV_blank>VPX_BITS_12"" ) ; return - 1 ; } # else ( void ) bit_depth ; return ac_qlookup [ clamp ( qindex + delta , 0 , MAXQ ) ] ; # endif "
2548,"<S2SV_StartBug> add_mibfile ( const char * tmpstr , const char * d_name , FILE * ip ) <S2SV_EndBug> <S2SV_StartBug> if ( ip ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2549,<S2SV_StartBug> if ( wp -> listening_socket != STDIN_FILENO ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2550,"<S2SV_StartBug> int i , retval ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> ",<S2SV_ModStart> test_parser_param ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2551,<S2SV_StartBug> assert ( c != NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( c -> rbytes >= c -> rsize ) { <S2SV_EndBug> ,<S2SV_ModStart> int num_allocs = 0 ; <S2SV_ModStart> if ( num_allocs == 4 ) { return gotdata ; } ++ num_allocs ; 
2552,"<S2SV_StartBug> Rd_WP_DWORD ( image , & Rec . RecordLength ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; if ( Rec . RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" "
2553,"<S2SV_StartBug> int len , err = - ENOBUFS ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( nlk -> cb_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> module_put ( cb -> module ) ; <S2SV_EndBug> <S2SV_StartBug> consume_skb ( cb -> skb ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct module * module ; <S2SV_ModStart> module = cb -> module ; skb = cb -> skb ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2554,"<S2SV_StartBug> s_alDriver = Cvar_Get ( ""s_alDriver"" , ALDRIVER_DEFAULT , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> <S2SV_StartBug> s_alDevice = Cvar_Get ( ""s_alDevice"" , """" , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> ","<S2SV_ModStart> | CVAR_PROTECTED <S2SV_ModStart> if ( COM_CompareExtension ( s_alDriver -> string , "".pk3"" ) ) { Com_Printf ( ""Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\""%s\\"""" , s_alDriver -> string ) ; return qfalse ; } "
2555,<S2SV_StartBug> if ( envs [ h_env -> envc ] . env == HTML_DL_COMPACT ) { <S2SV_EndBug> ,<S2SV_ModStart> h_env -> envc == 0 || ( h_env -> envc_real < h_env -> nenv && envs [ h_env -> envc ] . env != HTML_DL && envs [ h_env -> envc ] . env != HTML_DL_COMPACT ) ) { PUSH_ENV ( HTML_DL ) ; } if ( 
2556,"<S2SV_StartBug> if ( * p ) { <S2SV_EndBug> <S2SV_StartBug> * q = 0 ; <S2SV_EndBug> <S2SV_StartBug> cmd = p + 1 ; <S2SV_EndBug> <S2SV_StartBug> * p = \'""\' ; <S2SV_EndBug> ",<S2SV_ModStart> char op0 = 0 ; <S2SV_ModStart> op0 = * q ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> op0 <S2SV_ModEnd> 
2557,<S2SV_StartBug> return AUTH_FOUND ; <S2SV_EndBug> ,<S2SV_ModStart> fclose ( opwfile ) ; 
2558,<S2SV_StartBug> return parser_flags ; <S2SV_EndBug> ,<S2SV_ModStart> if ( flags -> cf_flags & PyCF_TYPE_COMMENTS ) parser_flags |= PyPARSE_TYPE_COMMENTS ; 
2559,"<S2SV_StartBug> ND_PRINT ( ( ndo , "",<S2SV_blank>Flags<S2SV_blank>[%s]"" , <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK ( bp -> bp_flags ) ; 
2560,"<S2SV_StartBug> if ( cid <= 0 ) <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = avpriv_dnxhd_get_frame_size ( cid ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) { <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = dnxhd_get_hr_frame_size ( cid , dctx -> w , dctx -> h ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) <S2SV_EndBug> <S2SV_StartBug> return dctx -> remaining ; <S2SV_EndBug> ",<S2SV_ModStart> int remaining ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> continue ; } dctx -> remaining = remaining ; <S2SV_ModEnd> 
2561,<S2SV_StartBug> blockcnt = ( ( len + pos ) + blocksize - 1 ) >> <S2SV_EndBug> ,<S2SV_ModStart> if ( len < 1 || len == 0xffffffff ) { return - 1 ; } 
2562,"<S2SV_StartBug> int expected_count = 1 + extra_count ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> radix_tree_replace_slot ( pslot , newpage ) ; <S2SV_EndBug> <S2SV_StartBug> __dec_zone_page_state ( page , NR_FILE_PAGES ) ; <S2SV_EndBug> <S2SV_StartBug> __inc_zone_page_state ( newpage , NR_FILE_PAGES ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! PageSwapCache ( page ) && PageSwapBacked ( page ) ) { <S2SV_EndBug> ","<S2SV_ModStart> struct zone * oldzone , * newzone ; int dirty ; <S2SV_ModStart> oldzone = page_zone ( page ) ; newzone = page_zone ( newpage ) ; <S2SV_ModStart> dirty = PageDirty ( page ) ; if ( dirty ) { ClearPageDirty ( page ) ; SetPageDirty ( newpage ) ; } <S2SV_ModStart> spin_unlock ( & mapping -> tree_lock ) ; if ( newzone != oldzone ) { __dec_zone_state ( oldzone <S2SV_ModEnd> <S2SV_ModStart> __inc_zone_state ( newzone <S2SV_ModEnd> <S2SV_ModStart> PageSwapBacked ( page ) && <S2SV_ModStart> ) { __dec_zone_state ( oldzone , NR_SHMEM ) ; __inc_zone_state ( newzone , NR_SHMEM ) ; } if ( dirty && mapping_cap_account_dirty ( mapping ) ) { __dec_zone_state ( oldzone , NR_FILE_DIRTY ) ; __inc_zone_state ( newzone , NR_FILE_DIRTY ) ; } } local_irq_enable ( <S2SV_ModEnd> "
2563,"<S2SV_StartBug> guint32 off = offset ; <S2SV_EndBug> <S2SV_StartBug> level , offset ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , last_off <S2SV_ModStart> ; last_off = off <S2SV_ModStart> if ( off < last_off ) { THROW ( ReportedBoundsError ) ; } last_off = off ; "
2564,"<S2SV_StartBug> Stream_Read_UINT32 ( s , scopeCount ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( Stream_GetRemainingLength ( s ) / sizeof ( LICENSE_BLOB ) < scopeCount ) return FALSE 
2565,<S2SV_StartBug> count = be32_to_cpu ( aclp -> acl_cnt ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; if ( count > XFS_ACL_MAX_ENTRIES ) return ERR_PTR ( - EFSCORRUPTED 
2566,<S2SV_StartBug> # ifdef KEY_DEBUGGING <S2SV_EndBug> ,<S2SV_ModStart> if ( flags & KEY_ALLOC_UID_KEYRING ) key -> flags |= 1 << KEY_FLAG_UID_KEYRING ; 
2567,<S2SV_StartBug> if ( ! send && ! SSL_USE_ETM ( ssl ) && <S2SV_EndBug> <S2SV_StartBug> if ( ! send && ! SSL_USE_ETM ( ssl ) && FIPS_mode ( ) ) <S2SV_EndBug> ,<S2SV_ModStart> SSL_READ_ETM <S2SV_ModEnd> <S2SV_ModStart> SSL_READ_ETM <S2SV_ModEnd> 
2568,<S2SV_StartBug> mark_files_ro ( sb ) ; <S2SV_EndBug> ,<S2SV_ModStart> sb -> s_readonly_remount = 1 ; smp_wmb ( <S2SV_ModEnd> 
2569,<S2SV_StartBug> g_object_unref ( subdir ) ; <S2SV_EndBug> <S2SV_StartBug> dir = GSF_INFILE_TAR ( subdir ) ; <S2SV_EndBug> ,<S2SV_ModStart> dir = GSF_IS_INFILE_TAR ( subdir ) ? GSF_INFILE_TAR ( subdir ) : dir ; <S2SV_ModStart>  <S2SV_ModEnd> 
2570,"<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> struct stat st ; <S2SV_EndBug> <S2SV_StartBug> if ( lstat ( filename , & st ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> file = fopen ( filename , ""a"" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> fd = open ( filename , O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; if ( fd >= 0 && ( fstat ( fd <S2SV_ModEnd> <S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart> fdopen ( fd <S2SV_ModEnd> <S2SV_ModStart> cfg -> is_custom_debug_file = 1 ; file = NULL ; fd = - 1 ; <S2SV_ModEnd> <S2SV_ModStart> if ( fd != - 1 ) close ( fd ) ; if ( file != NULL ) fclose ( file ) ; "
2571,<S2SV_StartBug> int buflen = bin -> buf -> length ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! ( ret = r_list_newf ( ( RListFree ) free ) ) ) { return NULL ; } ut8 * buf = bin -> buf -> buf + ( ut32 ) sec -> payload_data ; <S2SV_ModStart> - <S2SV_ModEnd> 
2572,<S2SV_StartBug> gdFree ( tmp_im ) ; <S2SV_EndBug> ,<S2SV_ModStart> gdImageDestroy <S2SV_ModEnd> 
2573,<S2SV_StartBug> if ( SCTP_CID_SHUTDOWN_ACK == ch -> type ) <S2SV_EndBug> <S2SV_StartBug> ch = ( sctp_chunkhdr_t * ) ch_end ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( SCTP_CID_SHUTDOWN_ACK == ch -> type ) ootb_shut_ack = 1 ; if ( SCTP_CID_ABORT == ch -> type ) return sctp_sf_pdiscard ( net , ep , asoc , type , arg , commands ) ; if ( SCTP_CID_COOKIE_ACK == ch -> type ) ootb_cookie_ack = 1 ; if ( SCTP_CID_ERROR == ch -> type ) { sctp_walk_errors ( err , ch ) { if ( SCTP_ERROR_STALE_COOKIE == err -> cause ) { ootb_cookie_ack = 1 ; break ; } } } "
2574,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2575,"<S2SV_StartBug> if ( len < 0 ) <S2SV_EndBug> <S2SV_StartBug> l2cap_send_cmd ( conn , cmd -> ident , L2CAP_CONF_RSP , len , rsp ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> { struct l2cap_disconn_req req ; req . dcid = cpu_to_le16 ( l2cap_pi ( sk ) -> dcid ) ; req . scid = cpu_to_le16 ( l2cap_pi ( sk ) -> scid ) ; l2cap_send_cmd ( conn , l2cap_get_ident ( conn ) , L2CAP_DISCONN_REQ , sizeof ( req ) , & req ) ; <S2SV_ModStart> } <S2SV_ModStart> ; l2cap_pi ( sk ) -> num_conf_rsp ++ <S2SV_ModStart> l2cap_pi ( sk ) -> num_conf_req ++ ; "
2576,"<S2SV_StartBug> struct inode * inode , int regard_xa ) <S2SV_EndBug> <S2SV_StartBug> int cnt , sig ; <S2SV_EndBug> <S2SV_StartBug> if ( regard_xa ) { <S2SV_EndBug> <S2SV_StartBug> ISOFS_I ( inode ) -> i_first_extent = <S2SV_EndBug> <S2SV_StartBug> isofs_iget ( inode -> i_sb , <S2SV_EndBug> <S2SV_StartBug> ISOFS_I ( inode ) -> i_first_extent , <S2SV_EndBug> ","<S2SV_ModStart> flags <S2SV_ModEnd> <S2SV_ModStart> ; unsigned int reloc_block <S2SV_ModStart> flags & RR_REGARD_XA <S2SV_ModEnd> <S2SV_ModStart> if ( flags & RR_RELOC_DE ) { printk ( KERN_ERR ""ISOFS:<S2SV_blank>Recursive<S2SV_blank>directory<S2SV_blank>relocation<S2SV_blank>"" ""is<S2SV_blank>not<S2SV_blank>supported\\n"" ) ; goto eio ; } reloc_block = isonum_733 ( rr -> u . CL . location ) ; if ( reloc_block == <S2SV_ModStart> i_iget5_block && ISOFS_I ( inode ) -> i_iget5_offset == 0 ) { printk ( KERN_ERR ""ISOFS:<S2SV_blank>Directory<S2SV_blank>relocation<S2SV_blank>points<S2SV_blank>to<S2SV_blank>"" ""itself\\n"" ) ; goto eio ; } ISOFS_I ( inode ) -> i_first_extent = reloc_block <S2SV_ModEnd> <S2SV_ModStart> isofs_iget_reloc <S2SV_ModEnd> <S2SV_ModStart> reloc_block , <S2SV_ModEnd> "
2577,"<S2SV_StartBug> DEBUG ( ""snmp<S2SV_blank>plugin:<S2SV_blank>all<S2SV_blank>variables<S2SV_blank>have<S2SV_blank>left<S2SV_blank>their<S2SV_blank>subtree"" ) ; <S2SV_EndBug> <S2SV_StartBug> req = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( req != NULL ) <S2SV_EndBug> ",<S2SV_ModStart> ) ; snmp_free_pdu ( req <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2578,"<S2SV_StartBug> int res ; <S2SV_EndBug> <S2SV_StartBug> const void * data ; <S2SV_EndBug> <S2SV_StartBug> u_int32_t vendor ; <S2SV_EndBug> <S2SV_StartBug> if ( zend_parse_parameters ( ZEND_NUM_ARGS ( ) TSRMLS_CC , ""s"" , & data , & len ) == FAILURE ) { <S2SV_EndBug> <S2SV_StartBug> res = rad_get_vendor_attr ( & vendor , & data , ( size_t * ) & len ) ; <S2SV_EndBug> <S2SV_StartBug> add_assoc_long ( return_value , ""attr"" , res ) ; <S2SV_EndBug> <S2SV_StartBug> add_assoc_stringl ( return_value , ""data"" , ( char * ) data , len , 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , * raw <S2SV_ModStart> ; unsigned char type ; size_t data_len <S2SV_ModStart> raw <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> type , & data , & data_len , raw , len ) <S2SV_ModEnd> <S2SV_ModStart> type <S2SV_ModEnd> <S2SV_ModStart> data_len <S2SV_ModEnd> "
2579,<S2SV_StartBug> if ( ! encoding && c -> palette_size && c -> bpp <= 8 ) { <S2SV_EndBug> ,<S2SV_ModStart> && c -> format != CHUNKY 
2580,"<S2SV_StartBug> if ( strchr ( "",<S2SV_blank>\\t"" , param -> value [ i + n ] ) ) <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> != NULL ) { break ; } <S2SV_ModEnd> 
2581,<S2SV_StartBug> if ( par -> color_primaries != AVCOL_PRI_UNSPECIFIED ) <S2SV_EndBug> ,"<S2SV_ModStart> print_primaries ( w , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2582,<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return num ; <S2SV_EndBug> ,<S2SV_ModStart> fpl -> user = NULL ; <S2SV_ModStart> if ( ! fpl -> user ) fpl -> user = get_uid ( current_user ( ) ) ; 
2583,"<S2SV_StartBug> static void show_object ( struct object * object , struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , void * data ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> 
2584,<S2SV_StartBug> assert ( c != NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( c -> rbytes >= c -> rsize ) { <S2SV_EndBug> ,<S2SV_ModStart> int num_allocs = 0 ; <S2SV_ModStart> if ( num_allocs == 4 ) { return gotdata ; } ++ num_allocs ; 
2585,<S2SV_StartBug> draw_info -> geometry = AcquireString ( geometry ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ( void ) CloneString ( & <S2SV_ModStart> , <S2SV_ModEnd> "
2586,<S2SV_StartBug> __be32 * pdata = ( __be32 * ) data ; <S2SV_EndBug> ,<S2SV_ModStart> pdata ; if ( datalen != 4 ) return - EINVAL ; 
2587,<S2SV_StartBug> if ( dctx -> bytes ) { <S2SV_EndBug> ,<S2SV_ModStart> ! ctx -> gf128 ) return - ENOKEY ; if ( 
2588,<S2SV_StartBug> int i ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! config -> sample_rate ) { strcpy ( wpc -> error_message , ""sample<S2SV_blank>rate<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>zero!"" ) ; return FALSE ; } "
2589,<S2SV_StartBug> 0 ) ; <S2SV_EndBug> ,<S2SV_ModStart> false <S2SV_ModEnd> 
2590,"<S2SV_StartBug> uint32_t len ; <S2SV_EndBug> <S2SV_StartBug> n = r -> iov . iov_len / 512 ; <S2SV_EndBug> <S2SV_StartBug> len = r -> sector_count * 512 ; <S2SV_EndBug> <S2SV_StartBug> DPRINTF ( ""Write<S2SV_blank>complete<S2SV_blank>tag=0x%x<S2SV_blank>more=%d\\n"" , r -> req . tag , len ) ; <S2SV_EndBug> <S2SV_StartBug> scsi_req_data ( & r -> req , len ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> qiov . size <S2SV_ModEnd> <S2SV_ModStart> scsi_init_iovec ( r ) <S2SV_ModEnd> <S2SV_ModStart> r -> qiov . size <S2SV_ModEnd> <S2SV_ModStart> r -> qiov . size <S2SV_ModEnd> 
2591,"<S2SV_StartBug> static MagickPixelPacket * * AcquirePixelThreadSet ( const Image * image ) <S2SV_EndBug> <S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> pixels [ i ] = ( MagickPixelPacket * ) AcquireQuantumMemory ( image -> columns , <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < ( ssize_t ) image -> columns ; j ++ ) <S2SV_EndBug> <S2SV_StartBug> GetMagickPixelPacket ( image , & pixels [ i ] [ j ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> images ) { const Image * next ; <S2SV_ModEnd> <S2SV_ModStart> columns , <S2SV_ModStart> columns = images -> columns ; for ( next = images ; next != ( Image * ) NULL ; next = next -> next ) columns = MagickMax ( next -> columns , columns ) ; for ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> images <S2SV_ModEnd> "
2592,"<S2SV_StartBug> vpx_memset ( oci -> ref_frame_sign_bias , 0 , sizeof ( oci -> ref_frame_sign_bias ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> 
2593,<S2SV_StartBug> if ( ! ext_dp -> icmp_length ) { <S2SV_EndBug> <S2SV_StartBug> vec [ 0 ] . ptr = ( const uint8_t * ) ( const void * ) & ext_dp -> icmp_ext_version_res ; <S2SV_EndBug> <S2SV_StartBug> hlen -= 4 ; <S2SV_EndBug> ,"<S2SV_ModStart> && ND_TTEST2 ( ext_dp -> icmp_ext_version_res , plen - ICMP_EXTD_MINLEN ) <S2SV_ModStart> if ( ND_TTEST2 ( ext_dp -> icmp_ext_version_res , hlen ) ) { <S2SV_ModStart> } "
2594,"<S2SV_StartBug> u64 nsec = ( u64 ) jiffies * TICK_NSEC ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & value -> tv_nsec ) ; <S2SV_EndBug> ","<S2SV_ModStart> u32 rem ; value -> tv_sec = div_u64_rem ( <S2SV_ModEnd> <S2SV_ModStart> , NSEC_PER_SEC , & rem ) <S2SV_ModStart> tv_nsec = rem <S2SV_ModEnd> "
2595,"<S2SV_StartBug> duplexMode = enc624j600ReadReg ( interface , ENC624J600_REG_ESTAT ) & ESTAT_PHYDPX ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MACON2 , MACON2_DEFER | <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MABBIPG , 0x15 ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MACON2 , MACON2_DEFER | <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MABBIPG , 0x12 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ENC624J600_ESTAT ) & ENC624J600_ESTAT_PHYDPX <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MACON2 , ENC624J600_MACON2_DEFER | ENC624J600_MACON2_PADCFG_AUTO | ENC624J600_MACON2_TXCRCEN | ENC624J600_MACON2_R1_DEFAULT | ENC624J600_MACON2_FULDPX <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MABBIPG , ENC624J600_MABBIPG_BBIPG_DEFAULT_FD <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MACON2 , ENC624J600_MACON2_DEFER | ENC624J600_MACON2_PADCFG_AUTO | ENC624J600_MACON2_TXCRCEN | ENC624J600_MACON2_R1_DEFAULT <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MABBIPG , ENC624J600_MABBIPG_BBIPG_DEFAULT_HD <S2SV_ModEnd> "
2596,"<S2SV_StartBug> adts_dmx_check_pid ( filter , ctx ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ctx -> hdr . frame_size < ctx -> hdr . hdr_size ) { GF_LOG ( GF_LOG_WARNING , GF_LOG_PARSER , ( ""[ADTSDmx]<S2SV_blank>Corrupted<S2SV_blank>ADTS<S2SV_blank>frame<S2SV_blank>header,<S2SV_blank>resyncing\\n"" ) ) ; ctx -> nb_frames = 0 ; goto drop_byte ; } "
2597,"<S2SV_StartBug> void vp9_rc_update_rate_correction_factors ( VP9_COMP * cpi , int damp_var ) { <S2SV_EndBug> <S2SV_StartBug> vp9_clear_system_state ( ) ; <S2SV_EndBug> <S2SV_StartBug> rate_correction_factor ) ; <S2SV_EndBug> <S2SV_StartBug> if ( projected_size_based_on_q > 0 ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> rc . is_src_frame_alt_ref ) return ; vpx_clear_system_state ( ) ; if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cpi -> common . seg . enabled ) { projected_size_based_on_q = vp9_cyclic_refresh_estimate_bits_at_q ( cpi , rate_correction_factor ) ; } else { projected_size_based_on_q = vp9_estimate_bits_at_q ( cpi -> common . <S2SV_ModEnd> <S2SV_ModStart> , cm -> bit_depth ) ; } <S2SV_ModEnd> <S2SV_ModStart> FRAME_OVERHEAD_BITS ) correction_factor = ( int ) ( ( 100 * ( int64_t ) cpi -> rc . projected_frame_size ) / projected_size_based_on_q ) ; adjustment_limit = 0.25 + 0.5 * MIN ( 1 , fabs ( log10 ( 0.01 * correction_factor ) ) ) ; cpi -> rc . q_2_frame = cpi -> rc . q_1_frame ; cpi -> rc . q_1_frame = cm -> base_qindex ; cpi -> rc . rc_2_frame = cpi -> rc . rc_1_frame ; if ( correction_factor > 110 ) cpi -> rc . rc_1_frame = - 1 ; else if ( correction_factor < 90 ) cpi -> rc . rc_1_frame = 1 ; else cpi -> rc . rc_1_frame = 0 ; <S2SV_ModEnd> "
2598,"<S2SV_StartBug> if ( isparam ( ""value"" ) && * getparam ( ""value"" ) ) <S2SV_EndBug> <S2SV_StartBug> rsputs ( loc ( getparam ( ""value"" ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> { strencode2 ( str , getparam ( ""value"" ) , sizeof ( str ) ) ; <S2SV_ModStart> str ) ) ; } <S2SV_ModEnd> "
2599,"<S2SV_StartBug> for ( k = 0 ; k < bufsize - 1 ; k ++ ) <S2SV_EndBug> <S2SV_StartBug> { if ( psf -> headindex < psf -> headend ) <S2SV_EndBug> <S2SV_StartBug> { psf -> headend += psf_fread ( psf -> header + psf -> headend , 1 , 1 , psf ) ; <S2SV_EndBug> <S2SV_StartBug> ptr [ k ] = psf -> header [ psf -> headindex ] ; <S2SV_EndBug> ","<S2SV_ModStart> if ( psf -> header . indx + bufsize >= psf -> header . len && psf_bump_header_allocation ( psf , bufsize ) ) return 0 ; <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . end ) { ptr [ k ] = psf -> header . ptr [ psf -> header . indx ] ; psf -> header . indx <S2SV_ModEnd> <S2SV_ModStart> header . end <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . end <S2SV_ModEnd> <S2SV_ModStart> . ptr [ psf -> header . indx ] ; psf -> header . indx = psf -> header . end <S2SV_ModEnd> "
2600,"<S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , delim ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false <S2SV_ModStart> , false <S2SV_ModStart> , false <S2SV_ModStart> , false <S2SV_ModStart> , false "
2601,"<S2SV_StartBug> int jas_matrix_resize ( jas_matrix_t * matrix , int numrows , int numcols ) <S2SV_EndBug> <S2SV_StartBug> int size ; <S2SV_EndBug> ","<S2SV_ModStart> jas_matind_t numrows , jas_matind_t <S2SV_ModEnd> <S2SV_ModStart> jas_matind_t size ; jas_matind_t <S2SV_ModEnd> "
2602,<S2SV_StartBug> if ( info -> stagemasks [ ( int ) partword [ j ] [ i ] ] & ( 1 << s ) ) { <S2SV_EndBug> ,<S2SV_ModStart> int idx = ( int ) partword [ j ] [ i ] ; if ( idx < info -> partitions && <S2SV_ModEnd> <S2SV_ModStart> idx <S2SV_ModEnd> 
2603,"<S2SV_StartBug> const struct oe_sockaddr * src_addr , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2604,"<S2SV_StartBug> err = ops -> cee_peer_getpg ( netdev , & pg ) ; <S2SV_EndBug> <S2SV_StartBug> struct cee_pfc pfc ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( & pg , 0 , sizeof ( pg ) ) ; <S2SV_ModStart> ; memset ( & pfc , 0 , sizeof ( pfc ) ) "
2605,<S2SV_StartBug> if ( vcpu -> mmio_cur_fragment == vcpu -> mmio_nr_fragments ) { <S2SV_EndBug> ,<S2SV_ModStart> >= <S2SV_ModEnd> 
2606,"<S2SV_StartBug> ret = get_tag ( * der , len , tag_out , & contents , & clen , & remainder , & rlen ) ; <S2SV_EndBug> ","<S2SV_ModStart> , 0 "
2607,<S2SV_StartBug> free ( name ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! strcmp ( key , ""path"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options , data -> obj , FSCK_MSG_GITMODULES_PATH , ""disallowed<S2SV_blank>submodule<S2SV_blank>path:<S2SV_blank>%s"" , value ) ; "
2608,<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! tty ) return 
2609,<S2SV_StartBug> unsigned char buffer [ 3 ] ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ,"<S2SV_ModStart> * buffer ; int ret ; buffer = kmalloc ( 3 , GFP_KERNEL ) ; if ( ! buffer ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> kfree ( buffer ) ; "
2610,"<S2SV_StartBug> HANDLE Token ; <S2SV_EndBug> <S2SV_StartBug> if ( LogonUser ( username , ""."" , password , LOGON32_LOGON_NETWORK , LOGON32_PROVIDER_DEFAULT , & Token ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> pcap_fmt_errmsg_for_win32_err ( errbuf , PCAP_ERRBUF_SIZE , <S2SV_EndBug> <S2SV_StartBug> GetLastError ( ) , ""LogonUser()<S2SV_blank>failed"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ImpersonateLoggedOnUser ( Token ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug> <S2SV_StartBug> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , ""Authentication<S2SV_blank>failed:<S2SV_blank>user<S2SV_blank>name<S2SV_blank>or<S2SV_blank>password<S2SV_blank>incorrect"" ) ; <S2SV_EndBug> <S2SV_StartBug> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , ""Authentication<S2SV_blank>failed:<S2SV_blank>user<S2SV_blank>name<S2SV_blank>or<S2SV_blank>password<S2SV_blank>incorrect"" ) ; <S2SV_EndBug> <S2SV_StartBug> crypt_password = crypt ( password , user_password ) ; <S2SV_EndBug> <S2SV_StartBug> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , ""Authentication<S2SV_blank>failed"" ) ; <S2SV_EndBug> <S2SV_StartBug> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , ""Authentication<S2SV_blank>failed:<S2SV_blank>user<S2SV_blank>name<S2SV_blank>or<S2SV_blank>password<S2SV_blank>incorrect"" ) ; <S2SV_EndBug> <S2SV_StartBug> pcap_fmt_errmsg_for_errno ( errbuf , PCAP_ERRBUF_SIZE , <S2SV_EndBug> <S2SV_StartBug> errno , ""setuid"" ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> ","<S2SV_ModStart> DWORD error ; <S2SV_ModStart> char errmsgbuf [ PCAP_ERRBUF_SIZE ] ; <S2SV_ModStart> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , ""Authentication<S2SV_blank>failed"" ) ; error = GetLastError ( ) ; if ( error != ERROR_LOGON_FAILURE ) { pcap_fmt_errmsg_for_win32_err ( errmsgbuf , PCAP_ERRBUF_SIZE , error , ""LogonUser()<S2SV_blank>failed"" ) ; rpcapd_log ( LOGPRIO_ERROR , ""%s"" , errmsgbuf ) ; } return - 1 ; } if ( ImpersonateLoggedOnUser ( Token ) == 0 ) { pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , ""Authentication<S2SV_blank>failed"" ) ; pcap_fmt_errmsg_for_win32_err ( errmsgbuf <S2SV_ModEnd> <S2SV_ModStart> ""ImpersonateLoggedOnUser()<S2SV_blank>failed"" ) ; rpcapd_log ( LOGPRIO_ERROR , ""%s"" , errmsgbuf ) ; CloseHandle <S2SV_ModEnd> <S2SV_ModStart> ; return - 1 ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int error ; <S2SV_ModStart> ""Authentication<S2SV_blank>failed"" <S2SV_ModEnd> <S2SV_ModStart> ""Authentication<S2SV_blank>failed"" <S2SV_ModEnd> <S2SV_ModStart> errno = 0 ; <S2SV_ModStart> error = errno ; pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , ""Authentication<S2SV_blank>failed"" ) ; if ( error == 0 ) { rpcapd_log ( LOGPRIO_ERROR , ""crypt()<S2SV_blank>failed"" ) ; } else { rpcapd_log ( LOGPRIO_ERROR , ""crypt()<S2SV_blank>failed:<S2SV_blank>%s"" , strerror ( error ) ) ; } <S2SV_ModEnd> <S2SV_ModStart> ""Authentication<S2SV_blank>failed"" <S2SV_ModEnd> <S2SV_ModStart> error = errno ; <S2SV_ModStart> error <S2SV_ModEnd> <S2SV_ModStart> rpcapd_log ( LOGPRIO_ERROR , ""setuid()<S2SV_blank>failed:<S2SV_blank>%s"" , strerror ( error ) ) ; "
2611,"<S2SV_StartBug> _Unpickler_MemoGet ( UnpicklerObject * self , Py_ssize_t idx ) <S2SV_EndBug> <S2SV_StartBug> if ( idx < 0 || idx >= self -> memo_size ) <S2SV_EndBug> ",<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2612,<S2SV_StartBug> sas_port_delete ( port -> port ) ; <S2SV_EndBug> ,<S2SV_ModStart> sas_destruct_devices ( port ) ; 
2613,"<S2SV_StartBug> ast_for_with_stmt ( struct compiling * c , const node * n , int is_async ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> return AsyncWith ( items , body , type_comment , LINENO ( n ) , n -> n_col_offset , c -> c_arena ) ; <S2SV_EndBug> ","<S2SV_ModStart> n0 , bool <S2SV_ModEnd> <S2SV_ModStart> const node * const n = is_async ? CHILD ( n0 , 1 ) : n0 ; <S2SV_ModStart> n0 ) , n0 <S2SV_ModEnd> "
2614,"<S2SV_StartBug> struct request * rq = tags -> rqs [ tag ] ; <S2SV_EndBug> <S2SV_StartBug> struct blk_flush_queue * fq = blk_get_flush_queue ( rq -> q , rq -> mq_ctx ) ; <S2SV_EndBug> ",<S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2615,<S2SV_StartBug> if ( f -> map & ( 1 << rec ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> rec >= f -> num ) { ldm_error ( ""REC<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>NUM<S2SV_blank>value<S2SV_blank>(%d)"" , rec , f -> num ) ; return false ; } if ( "
2616,<S2SV_StartBug> goto retry_rebind ; <S2SV_EndBug> ,<S2SV_ModStart> switch ( task -> tk_status ) { case - EACCES : case - EIO : goto die ; default : <S2SV_ModStart> } 
2617,<S2SV_StartBug> if ( request -> ssids [ i ] . ssid_len > <S2SV_EndBug> <S2SV_StartBug> request -> ssids [ i ] . ssid_len = nla_len ( attr ) ; <S2SV_EndBug> ,<S2SV_ModStart> request -> ssids [ i ] . ssid_len = nla_len ( attr ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
2618,<S2SV_StartBug> if ( iter > CIPSO_V4_TAG_MAXCNT ) <S2SV_EndBug> <S2SV_StartBug> if ( iter < CIPSO_V4_TAG_MAXCNT ) <S2SV_EndBug> <S2SV_StartBug> doi_def -> tags [ iter ] = CIPSO_V4_TAG_INVALID ; <S2SV_EndBug> ,<S2SV_ModStart> >= <S2SV_ModEnd> <S2SV_ModStart> while <S2SV_ModEnd> <S2SV_ModStart> ++ 
2619,"<S2SV_StartBug> int is_async ; <S2SV_EndBug> <S2SV_StartBug> if ( TYPE ( CHILD ( n , 0 ) ) == ASYNC ) { <S2SV_EndBug> <S2SV_StartBug> if ( NCH ( n ) == ( 5 + is_async ) ) { <S2SV_EndBug> <S2SV_StartBug> n = CHILD ( n , 4 + is_async ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> count_comp_for : <S2SV_ModEnd> <S2SV_ModStart> NCH ( n ) == 2 ) { REQ ( CHILD ( n , 0 ) , NAME ) ; assert ( strcmp ( STR ( CHILD ( n , 0 ) ) , ""async"" ) == 0 ) ; n = CHILD ( n , 1 ) ; } else if ( NCH ( n ) == 1 ) { n = CHILD ( n , 0 ) ; } else { goto error <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> error : "
2620,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>n<S2SV_blank>len=%d"" , ntohs ( e . len ) - 4 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( 2 < ndo -> ndo_vflag && 4 < ntohs ( e . len ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( 1 < ndo -> ndo_vflag && 4 < ntohs ( e . len ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ike_show_somedata ( ndo , ( const u_char * ) ( const uint8_t * ) ( ext + 1 ) , ep ) ) <S2SV_EndBug> <S2SV_StartBug> return ( const u_char * ) ext + ntohs ( e . len ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""<S2SV_blank>n<S2SV_blank>len=%u"" <S2SV_ModEnd> <S2SV_ModStart> ntohs ( e . len ) > 4 ) { if ( <S2SV_ModEnd> <S2SV_ModStart> > 2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> > 1 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } "
2621,"<S2SV_StartBug> futex_wait_queue_me ( hb , & q , to ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( match_futex ( & q . key , & key2 ) ) { ret = - EINVAL ; goto out_put_keys ; } "
2622,<S2SV_StartBug> last_source = source_mnt ; <S2SV_EndBug> ,<S2SV_ModStart> first_source = source_mnt ; 
2623,"<S2SV_StartBug> struct dw2102_state * state = d -> priv ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x02 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x83 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x83 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x51 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 1 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> err ( ""command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed."" ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data , 1 , state -> data <S2SV_ModEnd> <S2SV_ModStart> ) ; mutex_unlock ( & d -> data_mutex "
2624,"<S2SV_StartBug> u8 * gb_cur , * version_tlv , version , version_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += version_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += lto_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += wks_length ; <S2SV_EndBug> <S2SV_StartBug> & miux_length ) ; <S2SV_EndBug> ","<S2SV_ModStart> version , version_length ; u8 lto_length , wks_length , miux_length ; u8 * version_tlv = NULL , * lto_tlv = NULL , * wks_tlv = NULL , * miux_tlv = NULL <S2SV_ModEnd> <S2SV_ModStart> if ( ! version_tlv ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> if ( ! lto_tlv ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> if ( ! wks_tlv ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> if ( ! miux_tlv ) { ret = - ENOMEM ; goto out ; } "
2625,<S2SV_StartBug> * state = CCS_VALUE ; <S2SV_EndBug> ,<S2SV_ModStart> if ( * state != CCS_START ) 
2626,"<S2SV_StartBug> int pkt_len , pktnum , hr , min , sec , csec ; <S2SV_EndBug> <S2SV_StartBug> num_items_scanned = sscanf ( line + 64 , ""LEN=%9d"" , & pkt_len ) ; <S2SV_EndBug> <S2SV_StartBug> phdr -> rec_type = REC_TYPE_PACKET ; <S2SV_EndBug> <S2SV_StartBug> ws_buffer_assure_space ( buf , TOSHIBA_MAX_PACKET_LEN ) ; <S2SV_EndBug> ","<S2SV_ModStart> guint pkt_len ; int <S2SV_ModEnd> <S2SV_ModStart> ""LEN=%9u"" <S2SV_ModEnd> <S2SV_ModStart> if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba:<S2SV_blank>File<S2SV_blank>has<S2SV_blank>%u-byte<S2SV_blank>packet,<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>maximum<S2SV_blank>of<S2SV_blank>%u"" , pkt_len , WTAP_MAX_PACKET_SIZE ) ; return FALSE ; } <S2SV_ModStart> pkt_len <S2SV_ModEnd> "
2627,"<S2SV_StartBug> void * p = au -> reply_buf ; <S2SV_EndBug> <S2SV_StartBug> ret = ceph_x_decrypt ( & th -> session_key , & p , end , & reply , sizeof ( reply ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> preply = & reply ; void * <S2SV_ModStart> preply <S2SV_ModEnd> 
2628,<S2SV_StartBug> if ( length > 0 ) <S2SV_EndBug> ,<S2SV_ModStart> 1 <S2SV_ModEnd> 
2629,"<S2SV_StartBug> isoclns_print ( ndo , p , length , length ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2630,"<S2SV_StartBug> atomic_inc ( & ( ( struct bpf_prog * ) raw ) -> aux -> refcnt ) ; <S2SV_EndBug> <S2SV_StartBug> bpf_map_inc ( raw , true ) ; <S2SV_EndBug> ",<S2SV_ModStart> raw = bpf_prog_inc ( raw <S2SV_ModEnd> <S2SV_ModStart> raw = 
2631,"<S2SV_StartBug> static void predict_and_reconstruct_intra_block ( int plane , int block , <S2SV_EndBug> <S2SV_StartBug> TX_SIZE tx_size , void * arg ) { <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * const mi = xd -> mi [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE mode = ( plane == 0 ) ? get_y_mode ( mi , block ) <S2SV_EndBug> <S2SV_StartBug> txfrm_block_to_raster_xy ( plane_bsize , tx_size , block , & x , & y ) ; <S2SV_EndBug> <S2SV_StartBug> dst = & pd -> dst . buf [ 4 * y * pd -> dst . stride + 4 * x ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_predict_intra_block ( xd , block >> ( tx_size << 1 ) , <S2SV_EndBug> <S2SV_StartBug> if ( ! mi -> mbmi . skip ) { <S2SV_EndBug> <S2SV_StartBug> const int eob = vp9_decode_block_tokens ( cm , xd , plane , block , <S2SV_EndBug> ","<S2SV_ModStart> MACROBLOCKD * const xd , vpx_reader * r , MB_MODE_INFO * const mbmi , int plane , int row , int col <S2SV_ModEnd> <S2SV_ModStart> ) { <S2SV_ModEnd> <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> mbmi -> mode : mbmi -> uv_mode ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> row <S2SV_ModEnd> <S2SV_ModStart> col ] ; if ( mbmi -> sb_type < BLOCK_8X8 ) if ( plane == 0 ) mode = xd -> mi [ 0 ] -> bmi [ ( row <S2SV_ModEnd> <S2SV_ModStart> + col ] . as_mode ; vp9_predict_intra_block ( xd , pd -> n4_wl , tx_size , mode , dst , pd -> dst . stride , dst , pd -> dst . stride , col , row <S2SV_ModEnd> <S2SV_ModStart> mbmi -> <S2SV_ModEnd> <S2SV_ModStart> TX_TYPE tx_type = ( plane || xd -> lossless ) ? DCT_DCT : intra_mode_to_tx_type_lookup [ mode ] ; const scan_order * sc = ( plane || xd -> lossless ) ? & vp9_default_scan_orders [ tx_size ] : & vp9_scan_orders [ tx_size ] [ tx_type ] ; const <S2SV_ModStart> xd , plane , sc , col , row , tx_size , r , mbmi -> segment_id ) ; inverse_transform_block_intra ( xd , plane , tx_type , tx_size , dst , pd -> dst . stride , <S2SV_ModEnd> "
2632,"<S2SV_StartBug> impeg2d_next_code ( ps_dec , SEQUENCE_HEADER_CODE ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( IMPEG2D_UNSUPPORTED_DIMENSIONS == e_error ) { ps_op -> s_ivd_video_decode_op_t . u4_num_bytes_consumed = 0 ; ps_dec -> u2_header_done = 0 ; ps_op -> s_ivd_video_decode_op_t . u4_pic_ht = ps_dec -> u2_reinit_max_height ; ps_op -> s_ivd_video_decode_op_t . u4_pic_wd = ps_dec -> u2_reinit_max_width ; } 
2633,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> [ plane ] && in -> linesize 
2634,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug> ",<S2SV_ModStart> int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> rc = <S2SV_ModStart> rc <S2SV_ModEnd> 
2635,<S2SV_StartBug> char data [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> * data ; data = kmalloc ( 2 , GFP_KERNEL ) ; if ( ! data ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> goto out ; <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> goto out ; } ret = snprintf ( buf , PAGE_SIZE , ""%s\\n"" , macro_mode ) ; out : kfree ( data ) ; return ret <S2SV_ModEnd> "
2636,"<S2SV_StartBug> cntsize ( in , & sumlen , & nnode ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; if ( TSQUERY_TOO_BIG ( nnode , sumlen ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""tsquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large"" ) ) "
2637,<S2SV_StartBug> line = picture -> data [ plane ] + y * picture -> linesize [ plane ] ; <S2SV_EndBug> <S2SV_StartBug> dst = line + x * pixelsize + compno * ! planar ; <S2SV_EndBug> <S2SV_StartBug> linel = ( uint16_t * ) picture -> data [ plane ] + y * ( picture -> linesize [ plane ] >> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> dst = linel + ( x * pixelsize + compno * ! planar ) ; <S2SV_EndBug> ,<S2SV_ModStart> / s -> cdy [ compno ] <S2SV_ModStart> / s -> cdx [ compno ] <S2SV_ModStart> / s -> cdy [ compno ] <S2SV_ModStart> / s -> cdx [ compno ] 
2638,"<S2SV_StartBug> void oz_hcd_get_desc_cnf ( void * hport , u8 req_id , int status , const u8 * desc , <S2SV_EndBug> <S2SV_StartBug> int length , int offset , int total_size ) <S2SV_EndBug> <S2SV_StartBug> int copy_len ; <S2SV_EndBug> <S2SV_StartBug> int required_size = urb -> transfer_buffer_length ; <S2SV_EndBug> ","<S2SV_ModStart> u8 <S2SV_ModEnd> <S2SV_ModStart> u8 length , u16 offset , u16 <S2SV_ModEnd> <S2SV_ModStart> unsigned <S2SV_ModStart> unsigned "
2639,"<S2SV_StartBug> int len = OBJ_obj2txt ( obj_txt , sizeof ( obj_txt ) , obj , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> BIO_write ( bio , obj_txt , len ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> BIO_printf <S2SV_ModEnd> <S2SV_ModStart> ""%s\\n"" , obj_txt <S2SV_ModEnd> "
2640,<S2SV_StartBug> if ( idx >= ARRAY_SIZE ( hwsim_world_regdom_custom ) ) <S2SV_EndBug> <S2SV_StartBug> param . regd = hwsim_world_regdom_custom [ idx ] ; <S2SV_EndBug> ,<S2SV_ModStart> { kfree ( hwname ) ; <S2SV_ModStart> } 
2641,"<S2SV_StartBug> BLOCK_SIZE bsize , int use_rd ) { <S2SV_EndBug> <S2SV_StartBug> ( mbmi -> mv [ 0 ] . as_int != 0 && <S2SV_EndBug> <S2SV_StartBug> cr -> projected_dist_sb > cr -> thresh_dist_sb ) || <S2SV_EndBug> <S2SV_StartBug> ! is_inter_block ( mbmi ) ) <S2SV_EndBug> <S2SV_StartBug> if ( bsize < cr -> min_block_size || <S2SV_EndBug> <S2SV_StartBug> mbmi -> mv [ 0 ] . as_int != 0 || <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> ","<S2SV_ModStart> int64_t rate , int64_t dist , int bsize ) { MV mv = <S2SV_ModEnd> <S2SV_ModStart> as_mv ; if ( dist <S2SV_ModEnd> <S2SV_ModStart> && ( mv . row > cr -> motion_thresh || mv . row < - cr -> motion_thresh || mv . col > cr -> motion_thresh || mv . col < - cr -> motion_thresh <S2SV_ModEnd> <S2SV_ModStart> ) return CR_SEGMENT_ID_BASE ; else <S2SV_ModEnd> <S2SV_ModStart> >= BLOCK_16X16 && rate <S2SV_ModStart> thresh_rate_sb && is_inter_block ( mbmi ) && <S2SV_ModEnd> <S2SV_ModStart> == 0 && cr -> rate_boost_fac > 10 ) return CR_SEGMENT_ID_BOOST2 <S2SV_ModEnd> <S2SV_ModStart> CR_SEGMENT_ID_BOOST1 ; } <S2SV_ModEnd> "
2642,"<S2SV_StartBug> int ntlm_read_message_fields ( wStream * s , NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug> ",<S2SV_ModStart> static 
2643,"<S2SV_StartBug> int offs , int count , int pmgr_flag ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & ( ( char * ) & sysex ) [ offs ] , & ( addr ) [ offs ] , hdr_size - offs ) ) <S2SV_EndBug> <S2SV_StartBug> if ( count < sysex . len ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sysex , addr , hdr_size <S2SV_ModEnd> <S2SV_ModStart> ( unsigned ) count < ( unsigned ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2644,"<S2SV_StartBug> spin_unlock ( & ctx -> event_wqh . lock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ret ) { <S2SV_EndBug> <S2SV_StartBug> uwq = list_first_entry ( & fork_event , <S2SV_EndBug> <S2SV_StartBug> userfaultfd_event_complete ( ctx , uwq ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & ctx -> event_wqh . lock ) ; <S2SV_EndBug> ",<S2SV_ModStart> userfaultfd_ctx_get ( fork_nctx ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> userfaultfd_ctx_put ( fork_nctx ) ; <S2SV_ModStart> if ( likely ( ! ret ) ) <S2SV_ModStart> else { if ( ret ) userfaultfd_ctx_put ( fork_nctx ) ; } spin_unlock ( & ctx -> event_wqh . lock ) ; <S2SV_ModEnd> 
2645,"<S2SV_StartBug> static int decode_coefs ( VP9_COMMON * cm , const MACROBLOCKD * xd , PLANE_TYPE type , <S2SV_EndBug> <S2SV_StartBug> int16_t * dqcoeff , TX_SIZE tx_size , const int16_t * dq , <S2SV_EndBug> <S2SV_StartBug> vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> const FRAME_CONTEXT * const fc = & cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> const vp9_prob ( * coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = <S2SV_EndBug> <S2SV_StartBug> const vp9_prob * prob ; <S2SV_EndBug> <S2SV_StartBug> unsigned int ( * coef_counts ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES + 1 ] = <S2SV_EndBug> <S2SV_StartBug> unsigned int ( * eob_branch_count ) [ COEFF_CONTEXTS ] = <S2SV_EndBug> <S2SV_StartBug> uint8_t token_cache [ 32 * 32 ] ; <S2SV_EndBug> <S2SV_StartBug> int val ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_read ( r , prob [ EOB_CONTEXT_NODE ] ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( ! vp9_read ( r , prob [ ZERO_CONTEXT_NODE ] ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_read ( r , prob [ ONE_CONTEXT_NODE ] ) ) { <S2SV_EndBug> <S2SV_StartBug> WRITE_COEF_CONTINUE ( 1 , ONE_TOKEN ) ; <S2SV_EndBug> <S2SV_StartBug> prob = vp9_pareto8_full [ prob [ PIVOT_NODE ] - 1 ] ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> vpx_reader * r ) { FRAME_COUNTS * counts = xd -> counts ; <S2SV_ModEnd> <S2SV_ModStart> xd -> fc <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> ; unsigned int ( * eob_branch_count ) [ COEFF_CONTEXTS ] ; uint8_t token_cache [ 32 * 32 ] ; const uint8_t * band_translate = get_band_translate ( tx_size ) ; const int dq_shift = ( tx_size == TX_32X32 ) ; int v , token ; int16_t dqv = dq [ 0 ] ; const uint8_t * cat1_prob ; const uint8_t * cat2_prob ; const uint8_t * cat3_prob ; const uint8_t * cat4_prob ; const uint8_t * cat5_prob ; const uint8_t * cat6_prob ; if ( counts ) { coef_counts = <S2SV_ModEnd> <S2SV_ModStart> eob_branch_count = <S2SV_ModEnd> <S2SV_ModStart> } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> bd > VPX_BITS_8 ) { if ( xd -> bd == VPX_BITS_10 ) { cat1_prob = vp9_cat1_prob_high10 ; cat2_prob = vp9_cat2_prob_high10 ; cat3_prob = vp9_cat3_prob_high10 ; cat4_prob = vp9_cat4_prob_high10 ; cat5_prob = vp9_cat5_prob_high10 ; cat6_prob = vp9_cat6_prob_high10 ; } else { cat1_prob = vp9_cat1_prob_high12 ; cat2_prob = vp9_cat2_prob_high12 ; cat3_prob = vp9_cat3_prob_high12 ; cat4_prob = vp9_cat4_prob_high12 ; cat5_prob = vp9_cat5_prob_high12 ; cat6_prob = vp9_cat6_prob_high12 ; } } else { cat1_prob = vp9_cat1_prob ; cat2_prob = vp9_cat2_prob ; cat3_prob = vp9_cat3_prob ; cat4_prob = vp9_cat4_prob ; cat5_prob = vp9_cat5_prob ; cat6_prob = vp9_cat6_prob ; } # else cat1_prob = vp9_cat1_prob ; cat2_prob = vp9_cat2_prob ; cat3_prob = vp9_cat3_prob ; cat4_prob = vp9_cat4_prob ; cat5_prob = vp9_cat5_prob ; cat6_prob = vp9_cat6_prob ; # endif <S2SV_ModEnd> <S2SV_ModStart> = - 1 <S2SV_ModStart> counts <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> token = ONE_TOKEN ; val = 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart> token = vpx_read_tree ( r , vp9_coef_con_tree , <S2SV_ModEnd> <S2SV_ModStart> ) ; switch ( token ) { case TWO_TOKEN : case THREE_TOKEN : case FOUR_TOKEN : val = token ; break ; case CATEGORY1_TOKEN : val = CAT1_MIN_VAL + read_coeff ( cat1_prob , 1 , r ) ; break ; case CATEGORY2_TOKEN : val = CAT2_MIN_VAL + read_coeff ( cat2_prob , 2 , r ) ; break ; case CATEGORY3_TOKEN : val = CAT3_MIN_VAL + read_coeff ( cat3_prob , 3 , r ) ; break ; case CATEGORY4_TOKEN : val = CAT4_MIN_VAL + read_coeff ( cat4_prob , 4 , r ) ; break ; case CATEGORY5_TOKEN : val = CAT5_MIN_VAL + read_coeff ( cat5_prob , 5 , r ) ; break ; case CATEGORY6_TOKEN : # if CONFIG_VP9_HIGHBITDEPTH switch ( xd -> bd ) { case VPX_BITS_8 : val = CAT6_MIN_VAL + read_coeff ( cat6_prob , 14 , r ) ; break ; case VPX_BITS_10 : val = CAT6_MIN_VAL + read_coeff ( cat6_prob , 16 , r ) ; break ; case VPX_BITS_12 : val = CAT6_MIN_VAL + read_coeff ( cat6_prob , 18 , r ) ; break ; default : assert ( 0 ) ; return - 1 ; } # else val = CAT6_MIN_VAL + read_coeff ( cat6_prob , 14 , r ) ; # endif break ; } } v = ( val * dqv ) >> dq_shift ; # if CONFIG_COEFFICIENT_RANGE_CHECKING # if CONFIG_VP9_HIGHBITDEPTH dqcoeff [ scan [ c ] ] = highbd_check_range ( ( vpx_read_bit ( r ) ? - v : v ) , xd -> bd ) ; # else dqcoeff [ scan [ c ] ] = check_range ( vpx_read_bit ( r ) ? - v : v ) ; # endif # else dqcoeff [ scan [ c ] ] = vpx_read_bit ( r ) ? - v : v ; # endif token_cache [ scan [ c ] ] = vp9_pt_energy_class [ token ] ; ++ c ; ctx = get_coef_context ( nb , token_cache , c ) ; dqv = dq [ 1 ] <S2SV_ModEnd> "
2646,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> return ; 
2647,"<S2SV_StartBug> void vp9_fht4x4_sse2 ( const int16_t * input , int16_t * output , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct4x4_sse2 ( input , output , stride ) ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> vpx_fdct4x4_sse2 <S2SV_ModEnd> 
2648,"<S2SV_StartBug> error_t mqttSnClientDisconnect ( MqttSnClientContext * context ) <S2SV_EndBug> <S2SV_StartBug> error = mqttSnClientSendDisconnect ( context , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> error = mqttSnClientSendDisconnect ( context , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , systime_t duration <S2SV_ModStart> duration / 1000 <S2SV_ModEnd> <S2SV_ModStart> duration / 1000 <S2SV_ModEnd> "
2649,"<S2SV_StartBug> hfs_bnode_read ( fd . bnode , & entry , fd . entryoffset , <S2SV_EndBug> <S2SV_StartBug> hfs_bnode_read ( fd . bnode , & entry , fd . entryoffset , <S2SV_EndBug> ",<S2SV_ModStart> if ( fd . entrylength > sizeof ( entry ) || fd . entrylength < 0 ) { err = - EIO ; goto out ; } <S2SV_ModStart> if ( fd . entrylength > sizeof ( entry ) || fd . entrylength < 0 ) { err = - EIO ; goto out ; } 
2650,"<S2SV_StartBug> SET_NETDEV_DEV ( dev , dmdev ) ; <S2SV_EndBug> ",<S2SV_ModStart> dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; 
2651,<S2SV_StartBug> sd -> gspca_dev . usb_err = - EIO ; <S2SV_EndBug> ,<S2SV_ModStart> ; return ; } if ( alt -> desc . bNumEndpoints < 1 ) { sd -> gspca_dev . usb_err = - ENODEV 
2652,"<S2SV_StartBug> num = port >= 0 ? port : 0 ; <S2SV_EndBug> <S2SV_StartBug> write_unlock_irqrestore ( & client -> ports_lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & client -> ports_mutex ) ; <S2SV_EndBug> ","<S2SV_ModStart> snd_use_lock_use ( & new_port -> use_lock ) ; <S2SV_ModStart> sprintf ( new_port -> name , ""port-%d"" , num ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
2653,<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; msg -> msg_namelen = 0 
2654,<S2SV_StartBug> NULL ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , true "
2655,"<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> ret = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; ret = posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( ret ) return ret <S2SV_ModEnd> "
2656,<S2SV_StartBug> mflags = EXTRACT_LE_8BITS ( rhp -> rh_short . sh_flags ) ; <S2SV_EndBug> ,<S2SV_ModStart> ND_TCHECK ( rhp -> rh_short . sh_flags ) ; 
2657,"<S2SV_StartBug> char aacFileName [ 255 ] ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( audioFileName , optarg ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( adtsFileName , optarg ) ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> strcpy ( audioFileName , aacFileName ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> * aacFileName = NULL ; char * audioFileName = NULL ; char * adtsFileName = NULL <S2SV_ModEnd> <S2SV_ModStart> audioFileName = ( char * ) malloc ( sizeof ( char ) * ( strlen ( optarg ) + 1 ) ) ; if ( audioFileName == NULL ) { faad_fprintf ( stderr , ""Error<S2SV_blank>allocating<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>audioFileName.\\n"" ) ; return 1 ; } <S2SV_ModStart> adtsFileName = ( char * ) malloc ( sizeof ( char ) * ( strlen ( optarg ) + 1 ) ) ; if ( adtsFileName == NULL ) { faad_fprintf ( stderr , ""Error<S2SV_blank>allocating<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>adtsFileName.\\n"" ) ; return 1 ; } <S2SV_ModStart> aacFileName = ( char * ) malloc ( sizeof ( char ) * ( strlen ( argv [ optind ] ) + 1 ) ) ; if ( aacFileName == NULL ) { faad_fprintf ( stderr , ""Error<S2SV_blank>allocating<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>aacFileName.\\n"" ) ; return 1 ; } <S2SV_ModStart> audioFileName = ( char * ) malloc ( sizeof ( char ) * ( strlen ( aacFileName ) + strlen ( file_ext [ format ] ) + 1 ) ) ; if ( audioFileName == NULL ) { faad_fprintf ( stderr , ""Error<S2SV_blank>allocating<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>audioFileName.\\n"" ) ; return 1 ; } <S2SV_ModStart> if ( audioFileName != NULL ) free ( audioFileName ) ; if ( adtsFileName != NULL ) free ( adtsFileName ) ; <S2SV_ModStart> if ( aacFileName != NULL ) free ( aacFileName ) ; "
2658,<S2SV_StartBug> key_put ( ci -> ci_keyring_key ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2659,"<S2SV_StartBug> rv = zsocket_connect ( * sock , info -> description ) ; <S2SV_EndBug> <S2SV_StartBug> rv = zsocket_bind ( * sock , info -> description ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , <S2SV_ModStart> ""%s"" , "
2660,<S2SV_StartBug> fptr = ( struct frag_hdr * ) ( ( u8 * ) ipv6h + unfrag_ip6hlen ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; 
2661,<S2SV_StartBug> if ( ! ( fhdr -> frag_off & htons ( 0xFFF9 ) ) ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2662,<S2SV_StartBug> client -> auth_end_offset = AUTH_END_INIT_OFFSET ; <S2SV_EndBug> ,<S2SV_ModStart> auth_buffer = g_byte_array_new ( ) <S2SV_ModEnd> 
2663,"<S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_OVERRIDE ) ) <S2SV_EndBug> <S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_READ_SEARCH ) ) <S2SV_EndBug> <S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_OVERRIDE ) ) <S2SV_EndBug> <S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_READ_SEARCH ) ) <S2SV_EndBug> ",<S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> <S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> <S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> <S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> 
2664,<S2SV_StartBug> key_pairs = palloc ( sizeof ( Pairs ) * key_count ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( key_count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , key_count , ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ; "
2665,"<S2SV_StartBug> struct ip_options * opt = NULL ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt ) <S2SV_EndBug> <S2SV_StartBug> icsk -> icsk_ext_hdr_len -= inet -> opt -> optlen ; <S2SV_EndBug> <S2SV_StartBug> icsk -> icsk_ext_hdr_len += opt -> optlen ; <S2SV_EndBug> <S2SV_StartBug> opt = xchg ( & inet -> opt , opt ) ; <S2SV_EndBug> ","<S2SV_ModStart> ip_options_rcu * old , <S2SV_ModEnd> <S2SV_ModStart> ; old = rcu_dereference_protected ( inet -> inet_opt , sock_owned_by_user ( sk ) ) <S2SV_ModStart> old <S2SV_ModEnd> <S2SV_ModStart> old -> opt . <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> rcu_assign_pointer ( inet -> inet_opt , opt ) ; if ( old ) call_rcu ( & old -> rcu , opt_kfree_rcu <S2SV_ModEnd> "
2666,"<S2SV_StartBug> l2tp_framing_cap_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> const uint32_t * ptr = ( const uint32_t * ) dat ; <S2SV_EndBug> ","<S2SV_ModStart> , u_int length <S2SV_ModStart> if ( length < 4 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } "
2667,"<S2SV_StartBug> } else if ( ! av_strcasecmp ( tag , ""Content-Length"" ) && s -> filesize == - 1 ) { <S2SV_EndBug> <S2SV_StartBug> s -> filesize = strtoll ( p , NULL , 10 ) ; <S2SV_EndBug> <S2SV_StartBug> s -> filesize = - 1 ; <S2SV_EndBug> <S2SV_StartBug> ff_http_auth_handle_header ( & s -> auth_state , tag , p ) ; <S2SV_EndBug> <S2SV_StartBug> s -> icy_metaint = strtoll ( p , NULL , 10 ) ; <S2SV_EndBug> ","<S2SV_ModStart> UINT64_MAX <S2SV_ModEnd> <S2SV_ModStart> strtoull <S2SV_ModEnd> <S2SV_ModStart> UINT64_MAX ; s -> chunksize = 0 ; } else if ( ! av_strcasecmp ( tag , ""WWW-Authenticate"" ) ) { ff_http_auth_handle_header ( & s -> auth_state , tag , p ) ; } else if ( ! av_strcasecmp ( tag , ""Authentication-Info"" ) ) { ff_http_auth_handle_header ( & s -> auth_state , tag , p ) ; } else if ( ! av_strcasecmp ( tag , ""Proxy-Authenticate"" ) ) { ff_http_auth_handle_header ( & s -> proxy_auth_state , tag , p ) ; } else if ( ! av_strcasecmp ( tag , ""Connection"" ) ) { if ( ! strcmp ( p , ""close"" ) ) s -> willclose = 1 ; } else if ( ! av_strcasecmp ( tag , ""Server"" ) ) { if ( ! av_strcasecmp ( p , ""AkamaiGHost"" ) ) { s -> is_akamai = 1 ; } else if ( ! av_strncasecmp ( p , ""MediaGateway"" , 12 ) ) { s -> is_mediagateway = 1 ; } } else if ( ! av_strcasecmp ( tag , ""Content-Type"" ) ) { av_free ( s -> mime_type ) ; s -> mime_type = av_strdup ( p ) ; } else if ( ! av_strcasecmp ( tag , ""Set-Cookie"" ) ) { if ( parse_cookie ( s , p , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strtoull <S2SV_ModEnd> "
2668,"<S2SV_StartBug> if ( CheckMemoryOverflow ( count , quantum ) != MagickFalse ) <S2SV_EndBug> ",<S2SV_ModStart> HeapOverflowSanityCheck <S2SV_ModEnd> 
2669,<S2SV_StartBug> out_dqrele : <S2SV_EndBug> ,"<S2SV_ModStart> xfs_iunlock ( ip , XFS_ILOCK_EXCL ) ; "
2670,"<S2SV_StartBug> case 'c' : return getnum ( fmt , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> int sz = getnum ( fmt , sizeof ( int ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> L , <S2SV_ModStart> L , "
2671,"<S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> qcoeff , 0 , sizeof ( xd -> qcoeff ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> eobs , 0 , 25 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> eobs , 0 , 25 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 2 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 16 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 2 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> else ( void ) mb_idx ; # <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
2672,"<S2SV_StartBug> ND_PRINT ( ( ndo , "",<S2SV_blank>Config<S2SV_blank>Rev<S2SV_blank>%x"" , EXTRACT_32BITS ( tptr ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> while ( tptr < ( pptr + length ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ND_TCHECK_8BITS ( tptr ) ; 
2673,<S2SV_StartBug> ssize_t count ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( bytes == 0 || items == 0 ) return 0 
2674,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""seq<S2SV_blank>0x%03x,<S2SV_blank>Flags<S2SV_blank>[%s],<S2SV_blank>length<S2SV_blank>%u"" , <S2SV_EndBug> ","<S2SV_ModStart> if ( length < 2 ) { ND_PRINT ( ( ndo , ""[|mlppp]"" ) ) ; return ; } if ( ! ND_TTEST_16BITS ( p ) ) { ND_PRINT ( ( ndo , ""[|mlppp]"" ) ) ; return ; } "
2675,"<S2SV_StartBug> if ( ! __archive_ppmd7_functions . Ppmd7_Alloc ( & rar -> ppmd7_context , <S2SV_EndBug> ","<S2SV_ModStart> rar -> dictionary_size == 0 ) { archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , ""Invalid<S2SV_blank>zero<S2SV_blank>dictionary<S2SV_blank>size"" ) ; return ( ARCHIVE_FATAL ) ; } if ( "
2676,"<S2SV_StartBug> int offs , int count , int pmgr_flag ) <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & ( ( char * ) & ins ) [ offs ] , addr + offs , sizeof ( ins ) - offs ) ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ins , addr <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2677,<S2SV_StartBug> if ( dctx -> bytes ) { <S2SV_EndBug> ,<S2SV_ModStart> ! ctx -> gf128 ) return - ENOKEY ; if ( 
2678,"<S2SV_StartBug> if ( cgroup && ! fc_may_access ( fc , controller , cgroup , NULL , O_RDONLY ) ) { <S2SV_EndBug> ","<S2SV_ModStart> ) { if ( ! caller_may_see_dir ( fc -> pid , controller , cgroup ) ) return - ENOENT ; if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2679,<S2SV_StartBug> len = INT_MAX ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( unlikely ( ! access_ok ( VERIFY_READ , buff , len ) ) ) return - EFAULT "
2680,"<S2SV_StartBug> throttle_event . header . size , 1 , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2681,"<S2SV_StartBug> if ( svm_set_msr ( & svm -> vcpu , & msr ) ) { <S2SV_EndBug> ",<S2SV_ModStart> kvm_set_msr <S2SV_ModEnd> 
2682,"<S2SV_StartBug> Stream_Read_UINT16 ( licenseStream , os_minor ) ; <S2SV_EndBug> <S2SV_StartBug> Stream_Read_UINT32 ( licenseStream , cbCompanyName ) ; <S2SV_EndBug> <S2SV_StartBug> Stream_Read_UINT32 ( licenseStream , cbProductId ) ; <S2SV_EndBug> <S2SV_StartBug> Stream_Read_UINT32 ( licenseStream , cbLicenseInfo ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( Stream_GetRemainingLength ( licenseStream ) < 8 ) goto out_free_stream ; <S2SV_ModStart> if ( Stream_GetRemainingLength ( licenseStream ) < 4 ) goto out_free_stream ; <S2SV_ModStart> if ( Stream_GetRemainingLength ( licenseStream ) < 4 ) goto out_free_stream ; <S2SV_ModStart> if ( Stream_GetRemainingLength ( licenseStream ) < 4 ) goto out_free_stream ; 
2683,"<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> gossip_err ( ""%s:<S2SV_blank>posix_acl_equiv_mode<S2SV_blank>err:<S2SV_blank>%d\\n"" , <S2SV_EndBug> <S2SV_StartBug> if ( error == 0 ) <S2SV_EndBug> ","<S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( error <S2SV_ModEnd> <S2SV_ModStart> ""%s:<S2SV_blank>posix_acl_update_mode<S2SV_blank>err:<S2SV_blank>%d\\n"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2684,<S2SV_StartBug> return SECURE_ELEMENT_ERROR_NPE ; <S2SV_EndBug> ,<S2SV_ModStart> ; } if ( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE ) { return SECURE_ELEMENT_ERROR_BUF_SIZE 
2685,<S2SV_StartBug> if ( skb -> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) ) <S2SV_EndBug> ,<S2SV_ModStart> skb_is_err_queue ( skb ) && 
2686,<S2SV_StartBug> while ( f != upto ) ; <S2SV_EndBug> ,<S2SV_ModStart> && f 
2687,"<S2SV_StartBug> pfd . events = POLLIN ; <S2SV_EndBug> <S2SV_StartBug> len = recv ( fd , kvp_recv_buffer , sizeof ( kvp_recv_buffer ) , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( len < 0 ) { <S2SV_EndBug> <S2SV_StartBug> syslog ( LOG_ERR , ""recv<S2SV_blank>failed;<S2SV_blank>error:%d"" , len ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct sockaddr * addr_p = ( struct sockaddr * ) & addr ; socklen_t addr_l = sizeof ( addr ) ; <S2SV_ModStart> recvfrom <S2SV_ModEnd> <S2SV_ModStart> , addr_p , & addr_l <S2SV_ModStart> || addr . nl_pid <S2SV_ModStart> ""recvfrom<S2SV_blank>failed;<S2SV_blank>pid:%u<S2SV_blank>error:%d<S2SV_blank>%s"" , addr . nl_pid , errno , strerror ( errno ) <S2SV_ModEnd> "
2688,<S2SV_StartBug> inode_init_once ( & ei -> vfs_inode ) ; <S2SV_EndBug> ,<S2SV_ModStart> init_rwsem ( & ei -> i_mmap_sem ) ; 
2689,<S2SV_StartBug> if ( pbi -> common . frame_to_show ) <S2SV_EndBug> ,<S2SV_ModStart> ( void ) flags ; 
2690,"<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( max_packets , <S2SV_EndBug> ","<S2SV_ModStart> MagickMax ( number_pixels , max_packets ) , <S2SV_ModEnd> "
2691,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2692,"<S2SV_StartBug> ReflectionMethodBuilder rmb ; <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> mb -> mhandle = reflection_methodbuilder_to_mono_method ( klass , & rmb , sig ) ; <S2SV_EndBug> ","<S2SV_ModStart> MonoReferenceQueue * queue ; MonoMethod * handle ; DynamicMethodReleaseData * release_data ; <S2SV_ModStart> if ( mono_runtime_is_shutting_down ( ) ) mono_raise_exception ( mono_get_exception_invalid_operation ( """" ) ) ; if ( ! ( queue = dynamic_method_queue ) ) { mono_loader_lock ( ) ; if ( ! ( queue = dynamic_method_queue ) ) queue = dynamic_method_queue = mono_gc_reference_queue_new ( free_dynamic_method ) ; mono_loader_unlock ( ) ; } <S2SV_ModStart> handle = <S2SV_ModStart> ) ; release_data = g_new ( DynamicMethodReleaseData , 1 ) ; release_data -> handle = handle ; release_data -> domain = mono_object_get_domain ( ( MonoObject * ) mb ) ; if ( ! mono_gc_reference_queue_add ( queue , ( MonoObject * ) mb , release_data ) ) g_free ( release_data "
2693,<S2SV_StartBug> double correction_factor ) { <S2SV_EndBug> <S2SV_StartBug> const double q = vp9_convert_qindex_to_q ( qindex ) ; <S2SV_EndBug> <S2SV_StartBug> int enumerator = frame_type == KEY_FRAME ? 3300000 : 2250000 ; <S2SV_EndBug> <S2SV_StartBug> return ( int ) ( 0.5 + ( enumerator * correction_factor / q ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , vpx_bit_depth_t bit_depth <S2SV_ModStart> , bit_depth <S2SV_ModStart> 2700000 : 1800000 ; assert ( correction_factor <= MAX_BPB_FACTOR && correction_factor >= MIN_BPB_FACTOR ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2694,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""(ni:<S2SV_blank>ho=0x%04x<S2SV_blank>co=0x%04x)"" , <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ; ND_TCHECK_16BITS ( & bp [ i + 4 ] ) ; 
2695,<S2SV_StartBug> mark_files_ro ( sb ) ; <S2SV_EndBug> ,<S2SV_ModStart> sb -> s_readonly_remount = 1 ; smp_wmb ( <S2SV_ModEnd> 
2696,"<S2SV_StartBug> while ( ( s = mcs_recv ( & channel , is_fastpath , & fastpath_hdr ) ) != NULL ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> in_uint8s ( s , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> uint8 swapbyte ; <S2SV_EndBug> ","<S2SV_ModStart> struct stream packet ; <S2SV_ModStart> packet = * s ; <S2SV_ModStart> if ( ! s_check_rem ( s , 8 ) ) { rdp_protocol_error ( ""sec_recv(),<S2SV_blank>consume<S2SV_blank>fastpath<S2SV_blank>signature<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } <S2SV_ModStart> if ( ! s_check_rem ( s , 8 ) ) { rdp_protocol_error ( ""sec_recv(),<S2SV_blank>consume<S2SV_blank>encrypt<S2SV_blank>signature<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } <S2SV_ModStart> if ( ! s_check_rem ( s , 8 ) ) { rdp_protocol_error ( ""sec_recv(),<S2SV_blank>consume<S2SV_blank>redirect<S2SV_blank>signature<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } "
2697,"<S2SV_StartBug> static void ip6_append_data_mtu ( int * mtu , <S2SV_EndBug> <S2SV_StartBug> struct rt6_info * rt ) <S2SV_EndBug> <S2SV_StartBug> * mtu = dst_mtu ( rt -> dst . path ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned <S2SV_ModStart> , bool pmtuprobe <S2SV_ModStart> min ( * mtu , pmtuprobe ? rt -> dst . dev -> mtu : <S2SV_ModStart> ) "
2698,"<S2SV_StartBug> vpx_memset ( & lfm -> lfl_y [ index ] , filter_level , w ) ; <S2SV_EndBug> <S2SV_StartBug> * int_4x4_y |= ( size_mask [ block_size ] & 0xffffffffffffffff ) << shift_y ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> 0xffffffffffffffffULL <S2SV_ModEnd> 
2699,<S2SV_StartBug> rfcomm_dlc_accept ( d ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; msg -> msg_namelen = 0 
2700,<S2SV_StartBug> if ( ! vct_iscrlf ( hp -> rxbuf [ l ] ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! vct_iscrlf ( hp -> rxbuf [ l + 1 ] ) ) <S2SV_EndBug> ,<S2SV_ModStart> & <S2SV_ModStart> & 
2701,<S2SV_StartBug> if ( trk -> vos_len == 0 && par -> extradata_size > 0 && <S2SV_EndBug> ,"<S2SV_ModStart> samples_in_chunk < 1 ) { av_log ( s , AV_LOG_ERROR , ""fatal<S2SV_blank>error,<S2SV_blank>input<S2SV_blank>packet<S2SV_blank>contains<S2SV_blank>no<S2SV_blank>samples\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( "
2702,"
","
"
2703,"<S2SV_StartBug> if ( strcmp ( ( const char * ) ( data1 + 2 ) , ""\\\\MAILSLOT\\\\BROWSE"" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( ( const char * ) ( data1 + 2 ) , ""\\\\PIPE\\\\LANMAN"" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( paramlen ) <S2SV_EndBug> ","<S2SV_ModStart> # define MAILSLOT_BROWSE_STR ""\\\\MAILSLOT\\\\BROWSE"" ND_TCHECK2 ( * ( data1 + 2 ) , strlen ( MAILSLOT_BROWSE_STR ) + 1 ) ; <S2SV_ModStart> MAILSLOT_BROWSE_STR <S2SV_ModEnd> <S2SV_ModStart> # undef MAILSLOT_BROWSE_STR # define PIPE_LANMAN_STR ""\\\\PIPE\\\\LANMAN"" ND_TCHECK2 ( * ( data1 + 2 ) , strlen ( PIPE_LANMAN_STR ) + 1 ) ; <S2SV_ModStart> PIPE_LANMAN_STR <S2SV_ModEnd> <S2SV_ModStart> # undef PIPE_LANMAN_STR "
2704,"<S2SV_StartBug> void open_input_file ( struct VpxInputContext * input ) { <S2SV_EndBug> <S2SV_StartBug> input -> detect . buf_read = fread ( input -> detect . buf , 1 , 4 , input -> file ) ; <S2SV_EndBug> <S2SV_StartBug> input -> framerate . numerator = input -> y4m . fps_n ; <S2SV_EndBug> <S2SV_StartBug> input -> use_i420 = 0 ; <S2SV_EndBug> ",<S2SV_ModStart> static <S2SV_ModStart> pixel_aspect_ratio . numerator = 1 ; input -> pixel_aspect_ratio . denominator = 1 ; input -> <S2SV_ModStart> pixel_aspect_ratio . numerator = input -> y4m . par_n ; input -> pixel_aspect_ratio . denominator = input -> y4m . par_d ; input -> <S2SV_ModStart> fmt = input -> y4m . vpx_fmt ; input -> bit_depth = input -> y4m . bit_depth <S2SV_ModEnd> 
2705,<S2SV_StartBug> # if ENABLE_BGP_VNC <S2SV_EndBug> ,<S2SV_ModStart> ENABLE_BGP_VNC_ATTR <S2SV_ModEnd> 
2706,"<S2SV_StartBug> err = ops -> ieee_getets ( netdev , & ets ) ; <S2SV_EndBug> <S2SV_StartBug> err = ops -> ieee_getmaxrate ( netdev , & maxrate ) ; <S2SV_EndBug> <S2SV_StartBug> struct ieee_pfc pfc ; <S2SV_EndBug> <S2SV_StartBug> err = ops -> ieee_peer_getets ( netdev , & ets ) ; <S2SV_EndBug> <S2SV_StartBug> struct ieee_pfc pfc ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( & ets , 0 , sizeof ( ets ) ) ; <S2SV_ModStart> memset ( & maxrate , 0 , sizeof ( maxrate ) ) ; <S2SV_ModStart> ; memset ( & pfc , 0 , sizeof ( pfc ) ) <S2SV_ModStart> memset ( & ets , 0 , sizeof ( ets ) ) ; <S2SV_ModStart> ; memset ( & pfc , 0 , sizeof ( pfc ) ) "
2707,"<S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> case CFM_CHASSIS_ID_MAC_ADDRESS : <S2SV_EndBug> <S2SV_StartBug> hexdump |= cfm_network_addr_print ( ndo , tptr ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( mgmt_addr_length ) { <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> cfm_tlv_len -= mgmt_addr_length ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>(TLV<S2SV_blank>too<S2SV_blank>short)"" ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mgmt_addr_length ) { <S2SV_EndBug> <S2SV_StartBug> cfm_tlv_len -= mgmt_addr_length ; <S2SV_EndBug> <S2SV_StartBug> tptr += cfm_tlv_len ; <S2SV_EndBug> ","<S2SV_ModStart> goto next_tlv <S2SV_ModEnd> <S2SV_ModStart> goto next_tlv <S2SV_ModEnd> <S2SV_ModStart> goto next_tlv <S2SV_ModEnd> <S2SV_ModStart> if ( chassis_id_length != ETHER_ADDR_LEN ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(invalid<S2SV_blank>MAC<S2SV_blank>address<S2SV_blank>length)"" ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> + 1 , chassis_id_length <S2SV_ModStart> break <S2SV_ModEnd> <S2SV_ModStart> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address<S2SV_blank>Domain<S2SV_blank>Length<S2SV_blank>%u"" , mgmt_addr_length ) ) ; <S2SV_ModStart> goto next_tlv <S2SV_ModEnd> <S2SV_ModStart> ; hex_print ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address<S2SV_blank>Domain:<S2SV_blank>"" , tptr , mgmt_addr_length ) <S2SV_ModStart> ""<S2SV_blank>(Management<S2SV_blank>Address<S2SV_blank>Length<S2SV_blank>is<S2SV_blank>missing)"" ) ) ; hexdump = TRUE ; break <S2SV_ModEnd> <S2SV_ModStart> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address<S2SV_blank>Length<S2SV_blank>%u"" , mgmt_addr_length ) ) ; <S2SV_ModStart> ; hex_print ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address:<S2SV_blank>"" , tptr , mgmt_addr_length ) <S2SV_ModStart> next_tlv : "
2708,<S2SV_StartBug> void fadst4_sse2 ( __m128i * in ) { <S2SV_EndBug> <S2SV_StartBug> const __m128i k__sinpi_p03_p03 = _mm_set1_epi16 ( sinpi_3_9 ) ; <S2SV_EndBug> ,<S2SV_ModStart> static <S2SV_ModStart> ( int16_t ) 
2709,"<S2SV_StartBug> printf ( ""Using<S2SV_blank>%s\\n"" , vpx_codec_iface_name ( decoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_dec_init ( & codec , decoder -> interface ( ) , NULL , 0 ) ) <S2SV_EndBug> ",<S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> codec_interface <S2SV_ModEnd> 
2710,"<S2SV_StartBug> int copied , error = - EINVAL ; <S2SV_EndBug> ",<S2SV_ModStart> ; msg -> msg_namelen = 0 
2711,"<S2SV_StartBug> rc = target_xcopy_locate_se_dev_e4 ( xop -> dst_tid_wwn , <S2SV_EndBug> <S2SV_StartBug> & xop -> dst_dev ) ; <S2SV_EndBug> <S2SV_StartBug> rc = target_xcopy_locate_se_dev_e4 ( xop -> src_tid_wwn , <S2SV_EndBug> <S2SV_StartBug> & xop -> src_dev ) ; <S2SV_EndBug> ","<S2SV_ModStart> se_cmd -> se_sess , <S2SV_ModStart> , & xop -> remote_lun_ref <S2SV_ModStart> se_cmd -> se_sess , <S2SV_ModStart> , & xop -> remote_lun_ref "
2712,"<S2SV_StartBug> void ipc_rcu_getref ( void * ptr ) <S2SV_EndBug> <S2SV_StartBug> container_of ( ptr , struct ipc_rcu_hdr , data ) -> refcount ++ ; <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return atomic_inc_not_zero ( & <S2SV_ModStart> ) <S2SV_ModEnd> 
2713,"<S2SV_StartBug> err = scm_send ( sock , msg , siocb -> scm ) ; <S2SV_EndBug> ","<S2SV_ModStart> , true "
2714,"<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( max_packets , <S2SV_EndBug> ","<S2SV_ModStart> MagickMax ( number_pixels , max_packets ) , <S2SV_ModEnd> "
2715,"<S2SV_StartBug> size_t size ; <S2SV_EndBug> <S2SV_StartBug> JAS_DBGLOG ( 10 , ( ""jpeg_start_decompress(%p)\\n"" , & cinfo ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opts . max_size ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! jas_safe_size_mul ( cinfo . output_width , cinfo . output_height , <S2SV_EndBug> <S2SV_StartBug> if ( size > opts . max_size ) { <S2SV_EndBug> <S2SV_StartBug> jas_eprintf ( ""image<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> num_samples ; JAS_DBGLOG ( 100 , ( ""jpg_decode(%p,<S2SV_blank>\\""%s\\"")\\n"" , in , optstr ) ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> max_samples > 0 <S2SV_ModEnd> <S2SV_ModStart> jas_safe_size_mul3 ( cinfo . image_width , cinfo . image_height , cinfo . num_components , & num_samples <S2SV_ModEnd> <S2SV_ModStart> num_samples <S2SV_ModEnd> <S2SV_ModStart> max_samples <S2SV_ModEnd> <S2SV_ModStart> ""image<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large<S2SV_blank>(%zu<S2SV_blank>><S2SV_blank>%zu)\\n"" , num_samples , opts . max_samples <S2SV_ModEnd> <S2SV_ModStart> JAS_DBGLOG ( 10 , ( ""jpeg_start_decompress(%p)\\n"" , & cinfo ) ) ; ret = jpeg_start_decompress ( & cinfo ) ; JAS_DBGLOG ( 10 , ( ""jpeg_start_decompress<S2SV_blank>return<S2SV_blank>value<S2SV_blank>%d\\n"" , ret ) ) ; JAS_DBGLOG ( 10 , ( ""header:<S2SV_blank>output_width<S2SV_blank>%d;<S2SV_blank>output_height<S2SV_blank>%d;<S2SV_blank>output_components<S2SV_blank>%d\\n"" , cinfo . output_width , cinfo . output_height , cinfo . output_components ) ) ; "
2716,<S2SV_StartBug> mutex_lock ( & tu -> tread_sem ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & tu -> tread_sem ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2717,<S2SV_StartBug> if ( IS_NOT_NULL ( Else ) ) { <S2SV_EndBug> <S2SV_StartBug> len += SIZE_OP_JUMP ; <S2SV_EndBug> ,<S2SV_ModStart> len += SIZE_OP_JUMP + SIZE_OP_ATOMIC_END ; <S2SV_ModStart>  <S2SV_ModEnd> 
2718,<S2SV_StartBug> dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug> ,<S2SV_ModStart> ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> 
2719,"<S2SV_StartBug> int i , protocol ; <S2SV_EndBug> <S2SV_StartBug> switch ( protocol ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! h1 -> bInCollection ) { <S2SV_EndBug> <S2SV_StartBug> dev_info ( & dev -> dev , ""skipping<S2SV_blank>empty<S2SV_blank>audio<S2SV_blank>interface<S2SV_blank>(v1)\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; int rest_bytes <S2SV_ModStart> rest_bytes = ( void * ) ( host_iface -> extra + host_iface -> extralen ) - control_header ; if ( rest_bytes <= 0 ) { dev_err ( & dev -> dev , ""invalid<S2SV_blank>control<S2SV_blank>header\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> rest_bytes < sizeof ( * h1 ) ) { dev_err ( & dev -> dev , ""too<S2SV_blank>short<S2SV_blank>v1<S2SV_blank>buffer<S2SV_blank>descriptor\\n"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> ) ; return - EINVAL ; } if ( rest_bytes < h1 -> bLength ) { dev_err ( & dev -> dev , ""invalid<S2SV_blank>buffer<S2SV_blank>length<S2SV_blank>(v1)\\n"" "
2720,"<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> nfunc , line , qedi -> host_no , & vaf ) ; <S2SV_EndBug> <S2SV_StartBug> pr_info ( ""[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV"" , nfunc , line , & vaf ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> 
2721,<S2SV_StartBug> if ( sock_owned_by_user ( sk ) ) { <S2SV_EndBug> ,<S2SV_ModStart> sk != rcvr -> sk ) { sctp_bh_unlock_sock ( sk ) ; sk = rcvr -> sk ; sctp_bh_lock_sock ( sk ) ; } if ( 
2722,"<S2SV_StartBug> Com_Printf ( ""Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; return ; } if ( ! COM_CompareExtension ( filename , "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\"".cfg\\""<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"" "
2723,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 4 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""horDiff32"" , ""%s"" , ""(cc%(4*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> return 1 ; "
2724,"<S2SV_StartBug> struct r_bin_dyldcache_obj_t * bin ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( bin = malloc ( sizeof ( struct r_bin_dyldcache_obj_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> memset ( bin , 0 , sizeof ( struct r_bin_dyldcache_obj_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! r_buf_set_bytes ( bin -> b , buf , size ) ) { <S2SV_EndBug> ",<S2SV_ModStart> = R_NEW0 ( struct r_bin_dyldcache_obj_t ) <S2SV_ModStart> bin <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ! bin -> b || 
2725,<S2SV_StartBug> static unsigned short len = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> size_t <S2SV_ModEnd> 
2726,"<S2SV_StartBug> static int shash_no_setkey ( struct crypto_shash * tfm , const u8 * key , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2727,"<S2SV_StartBug> tile -> mi_row_start = get_tile_offset ( row , cm -> mi_rows , cm -> log2_tile_rows ) ; <S2SV_EndBug> ","<S2SV_ModStart> vp9_tile_set_row ( tile , cm , row ) ; vp9_tile_set_col ( tile , cm , col <S2SV_ModEnd> "
2728,<S2SV_StartBug> static double get_rate_correction_factor ( const VP9_COMP * cpi ) { <S2SV_EndBug> <S2SV_StartBug> return cpi -> rc . key_frame_rate_correction_factor ; <S2SV_EndBug> <S2SV_StartBug> ! cpi -> rc . is_src_frame_alt_ref && <S2SV_EndBug> <S2SV_StartBug> ! ( cpi -> use_svc && cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) ) <S2SV_EndBug> ,"<S2SV_ModStart> const RATE_CONTROL * const rc = & cpi -> rc ; double rcf ; <S2SV_ModStart> rcf = rc -> rate_correction_factors [ KF_STD ] ; } else if ( cpi -> oxcf . pass == 2 ) { RATE_FACTOR_LEVEL rf_lvl = cpi -> twopass . gf_group . rf_level [ cpi -> twopass . gf_group . index ] ; rcf = rc -> rate_correction_factors [ rf_lvl ] <S2SV_ModEnd> <S2SV_ModStart> rc -> <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( <S2SV_ModStart> rc_mode != VPX_CBR || cpi -> oxcf . gf_cbr_boost_pct > 20 ) ) rcf = rc -> rate_correction_factors [ GF_ARF_STD ] ; else rcf = rc -> rate_correction_factors [ INTER_NORMAL ] ; } rcf *= rcf_mult [ rc -> frame_size_selector ] ; return fclamp ( rcf , MIN_BPB_FACTOR , MAX_BPB_FACTOR ) ; <S2SV_ModEnd> "
2729,"<S2SV_StartBug> # define ThrowDCMException ( exception , message ) { if ( info . scale != ( Quantum * ) NULL ) info . scale = ( Quantum * ) RelinquishMagickMemory ( info . scale ) ; if ( data != ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap != ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( bluemap != ( int * ) NULL ) bluemap = ( int * ) RelinquishMagickMemory ( bluemap ) ; if ( greenmap != ( int * ) NULL ) greenmap = ( int * ) RelinquishMagickMemory ( greenmap ) ; if ( redmap != ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( stream_info -> offsets != ( ssize_t * ) NULL ) stream_info -> offsets = ( ssize_t * ) RelinquishMagickMemory ( stream_info -> offsets ) ; if ( stream_info != ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> if ( tag == 0xFFFEE0DD ) <S2SV_EndBug> ","<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> length > ( size_t ) GetBlobSize ( image ) ) ThrowDCMException ( CorruptImageError , ""InsufficientImageDataInFile"" ) ; if ( "
2730,<S2SV_StartBug> int val = 1 ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ssocket == NULL ) return - ENOTSOCK 
2731,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> recovery_started = false ; 
2732,"<S2SV_StartBug> char query [ 255 ] , rows [ NAME_LEN ] , fields [ 16 ] ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( query , ""SELECT<S2SV_blank>COUNT(*)<S2SV_blank>FROM<S2SV_blank>`%s`"" , row [ 0 ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> NAME_LEN + 100 <S2SV_ModEnd> <S2SV_ModStart> my_snprintf <S2SV_ModEnd> <S2SV_ModStart> sizeof ( query ) , "
2733,<S2SV_StartBug> mlock_vma_page ( page ) ; <S2SV_EndBug> <S2SV_StartBug> if ( page == check_page ) <S2SV_EndBug> <S2SV_StartBug> ret = SWAP_MLOCK ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { mlock_vma_page ( page ) ; <S2SV_ModStart> } else if ( trylock_page ( page ) ) { mlock_vma_page ( page ) ; unlock_page ( page ) ; } 
2734,<S2SV_StartBug> if ( rs -> rs_bound_addr == 0 ) { <S2SV_EndBug> ,<S2SV_ModStart> || ! rs -> rs_transport 
2735,<S2SV_StartBug> int n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! body -> unit_size ) break ; n 
2736,<S2SV_StartBug> data = malloc ( blk_sz * n_blks ) ; <S2SV_EndBug> ,<S2SV_ModStart> safe_calloc ( <S2SV_ModEnd> 
2737,"<S2SV_StartBug> int vp8_denoiser_filter_sse2 ( YV12_BUFFER_CONFIG * mc_running_avg , <S2SV_EndBug> <S2SV_StartBug> unsigned char * sig = signal -> thismb ; <S2SV_EndBug> <S2SV_StartBug> unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; <S2SV_EndBug> <S2SV_StartBug> unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; <S2SV_EndBug> <S2SV_StartBug> __m128i acc_diff = _mm_setzero_si128 ( ) ; <S2SV_EndBug> <S2SV_StartBug> ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) ? 7 : 6 ) ; <S2SV_EndBug> <S2SV_StartBug> union sum_union s ; <S2SV_EndBug> <S2SV_StartBug> s . v = acc_diff ; <S2SV_EndBug> <S2SV_StartBug> sum_diff = s . e [ 0 ] + s . e [ 1 ] + s . e [ 2 ] + s . e [ 3 ] + s . e [ 4 ] + s . e [ 5 ] <S2SV_EndBug> <S2SV_StartBug> if ( abs ( sum_diff ) > SUM_DIFF_THRESHOLD ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> signal -> thismb , sig_stride ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mc_running_avg_y , int mc_avg_y_stride , <S2SV_ModEnd> <S2SV_ModStart> running_avg_y , int avg_y_stride , <S2SV_ModEnd> <S2SV_ModStart> sig , int sig_stride , unsigned int motion_magnitude , int increase_denoising ) { unsigned char * running_avg_y_start = running_avg_y ; unsigned char * sig_start = sig ; unsigned int sum_diff_thresh <S2SV_ModEnd> <S2SV_ModStart> int shift_inc = ( increase_denoising && <S2SV_ModEnd> <S2SV_ModStart> 1 : 0 ; __m128i acc_diff = _mm_setzero_si128 ( ) ; const __m128i k_0 = _mm_setzero_si128 ( ) ; const __m128i k_4 = _mm_set1_epi8 ( 4 + shift_inc ) ; const __m128i k_8 = _mm_set1_epi8 ( 8 ) ; const __m128i k_16 = _mm_set1_epi8 ( 16 ) ; const __m128i l3 = _mm_set1_epi8 ( ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) ? 7 + shift_inc <S2SV_ModEnd> <S2SV_ModStart> unsigned int abs_sum_diff = abs_sum_diff_16x1 ( acc_diff ) ; sum_diff_thresh = SUM_DIFF_THRESHOLD ; if ( increase_denoising ) sum_diff_thresh = SUM_DIFF_THRESHOLD_HIGH ; if ( abs_sum_diff > sum_diff_thresh ) { int delta = ( ( abs_sum_diff - sum_diff_thresh ) >> 8 ) + 1 ; if ( delta < 4 ) { const __m128i k_delta = _mm_set1_epi8 ( delta ) ; sig -= sig_stride * 16 ; mc_running_avg_y -= mc_avg_y_stride * 16 ; running_avg_y -= avg_y_stride * 16 ; for ( r <S2SV_ModEnd> <S2SV_ModStart> r < 16 ; ++ r ) { __m128i v_running_avg_y = _mm_loadu_si128 ( ( __m128i * ) ( & running_avg_y <S2SV_ModEnd> <S2SV_ModStart> ) ) ; const __m128i v_sig = _mm_loadu_si128 ( ( __m128i * ) ( & sig [ 0 ] ) ) ; const __m128i v_mc_running_avg_y = _mm_loadu_si128 ( ( __m128i * ) ( & mc_running_avg_y [ 0 ] ) ) ; const __m128i pdiff = _mm_subs_epu8 ( v_mc_running_avg_y , v_sig ) ; const __m128i ndiff = _mm_subs_epu8 ( v_sig , v_mc_running_avg_y ) ; const __m128i diff_sign = _mm_cmpeq_epi8 ( pdiff , k_0 ) ; const __m128i adj = _mm_min_epu8 ( _mm_or_si128 ( pdiff , ndiff ) , k_delta ) ; __m128i padj , nadj ; padj = _mm_andnot_si128 ( diff_sign , adj ) ; nadj = _mm_and_si128 ( diff_sign , adj ) ; v_running_avg_y = _mm_subs_epu8 ( v_running_avg_y , padj ) ; v_running_avg_y = _mm_adds_epu8 ( v_running_avg_y , nadj ) ; _mm_storeu_si128 ( ( __m128i * ) running_avg_y , v_running_avg_y ) ; acc_diff = _mm_subs_epi8 ( acc_diff , padj ) ; acc_diff = _mm_adds_epi8 ( acc_diff , nadj ) ; sig += sig_stride ; mc_running_avg_y += mc_avg_y_stride ; running_avg_y += avg_y_stride ; } abs_sum_diff = abs_sum_diff_16x1 ( acc_diff ) <S2SV_ModEnd> <S2SV_ModStart> abs_sum_diff > sum_diff_thresh ) <S2SV_ModEnd> <S2SV_ModStart> else { return COPY_BLOCK ; } } } vp8_copy_mem16x16 ( running_avg_y_start <S2SV_ModEnd> <S2SV_ModStart> sig_start <S2SV_ModEnd> "
2738,<S2SV_StartBug> r = vapic_enter ( vcpu ) ; <S2SV_EndBug> <S2SV_StartBug> vapic_exit ( vcpu ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2739,"<S2SV_StartBug> unsigned char type , void * * ptr ) <S2SV_EndBug> <S2SV_StartBug> if ( header -> bLength < 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( header -> bDescriptorType == type ) { <S2SV_EndBug> ","<S2SV_ModStart> , size_t minsize <S2SV_ModStart> || header -> bLength > size <S2SV_ModStart> && header -> bLength >= minsize "
2740,<S2SV_StartBug> case DH6OPT_RECONF_MSG : <S2SV_EndBug> ,"<S2SV_ModStart> if ( optlen != 1 ) { ND_PRINT ( ( ndo , ""<S2SV_blank>?)"" ) ) ; break ; } "
2741,"<S2SV_StartBug> wait_event_interruptible_timeout ( sunkbd -> wait , sunkbd -> reset >= 0 , HZ ) ; <S2SV_EndBug> <S2SV_StartBug> serio_write ( sunkbd -> serio , SUNKBD_CMD_SETLED ) ; <S2SV_EndBug> ",<S2SV_ModStart> || ! sunkbd -> enabled <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> reset >= 0 && sunkbd -> enabled ) sunkbd_set_leds_beeps ( sunkbd <S2SV_ModEnd> 
2742,"<S2SV_StartBug> MATLAB_KO : ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> <S2SV_ModStart> } 
2743,"<S2SV_StartBug> buffer_copy_buffer ( con -> physical . basedir , ds -> value ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( uri_ptr [ alias_len ] == '.' ) { char * s = uri_ptr + alias_len + 1 ; if ( * s == '.' ) ++ s ; if ( * s == '/' || * s == '\\0' ) { size_t vlen = buffer_string_length ( ds -> value ) ; if ( 0 != alias_len && ds -> key -> ptr [ alias_len - 1 ] != '/' && 0 != vlen && ds -> value -> ptr [ vlen - 1 ] == '/' ) { con -> http_status = 403 ; return HANDLER_FINISHED ; } } } 
2744,"<S2SV_StartBug> unsigned int len ; <S2SV_EndBug> <S2SV_StartBug> fbdev = to_au1100fb_device ( fbi ) ; <S2SV_EndBug> <S2SV_StartBug> if ( io_remap_pfn_range ( vma , vma -> vm_start , off >> PAGE_SHIFT , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return vm_iomap_memory <S2SV_ModEnd> <S2SV_ModStart> fbdev -> fb_phys , fbdev -> fb_len ) <S2SV_ModEnd> "
2745,"<S2SV_StartBug> if ( mount ( ""none"" , path , ""tmpfs"" , 0 , ""size=100000,mode=755"" ) ) { <S2SV_EndBug> ","<S2SV_ModStart> safe_mount <S2SV_ModEnd> <S2SV_ModStart> , rootfs -> path ? rootfs -> mount : NULL "
2746,<S2SV_StartBug> assert ( pMatch -> iCursor == pExpr -> iTable ) ; <S2SV_EndBug> ,<S2SV_ModStart> pExpr -> y . pTab != 0 ) ; assert ( <S2SV_ModStart> if ( pExpr -> y . pTab -> tabFlags & TF_HasGenerated ) { Column * pCol = pExpr -> y . pTab -> aCol + pExpr -> iColumn ; if ( pCol -> colFlags & COLFLAG_GENERATED ) n = BMS - 1 ; } 
2747,<S2SV_StartBug> const vp9_tree_index * tree ) { <S2SV_EndBug> ,<S2SV_ModStart> vpx_tree_index <S2SV_ModEnd> 
2748,<S2SV_StartBug> # ifdef _WITH_VRRP_ <S2SV_EndBug> ,"<S2SV_ModStart> fprintf ( stderr , ""<S2SV_blank><S2SV_blank>-u,<S2SV_blank>--umask=MASK<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>umask<S2SV_blank>for<S2SV_blank>file<S2SV_blank>creation<S2SV_blank>(in<S2SV_blank>numeric<S2SV_blank>form)\\n"" ) ; "
2749,<S2SV_StartBug> if ( conf . strip ) { <S2SV_EndBug> ,<S2SV_ModStart> have_hashseed ) json_object_seed ( conf . hashseed ) ; if ( conf . 
2750,"<S2SV_StartBug> if ( cid <= 0 ) <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = avpriv_dnxhd_get_frame_size ( cid ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) { <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = ff_dnxhd_get_hr_frame_size ( cid , dctx -> w , dctx -> h ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) <S2SV_EndBug> <S2SV_StartBug> return dctx -> remaining ; <S2SV_EndBug> ",<S2SV_ModStart> int remaining ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> continue ; } dctx -> remaining = remaining ; <S2SV_ModEnd> 
2751,<S2SV_StartBug> slave -> master = master ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irq ( & slave_active_lock ) ; <S2SV_EndBug> ,<S2SV_ModStart> spin_lock ( & master -> timer -> lock ) ; <S2SV_ModStart> spin_unlock ( & master -> timer -> lock ) ; 
2752,"<S2SV_StartBug> int offs , int count , int pmgr_flag ) <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & ( ( char * ) & ins ) [ offs ] , addr + offs , sizeof ( ins ) - offs ) ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ins , addr <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2753,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> [ plane ] && in -> linesize 
2754,"<S2SV_StartBug> int hours , minutes , seconds ; <S2SV_EndBug> ",<S2SV_ModStart> int64_t <S2SV_ModEnd> 
2755,<S2SV_StartBug> # ifndef PGEN <S2SV_EndBug> ,<S2SV_ModStart> if ( * flags & PyPARSE_TYPE_COMMENTS ) { tok -> type_comments = 1 ; } 
2756,<S2SV_StartBug> if ( * rsize >= 74 && <S2SV_EndBug> <S2SV_StartBug> rdesc [ 61 ] == 0x05 && rdesc [ 62 ] == 0x08 && <S2SV_EndBug> ,"<S2SV_ModStart> 75 && rdesc [ 61 ] == 0x05 && rdesc [ 62 ] == 0x08 && rdesc [ 63 ] == 0x19 && rdesc [ 64 ] == 0x08 && rdesc [ 65 ] == 0x29 && rdesc [ 66 ] == 0x0f && rdesc [ 71 ] == 0x75 && rdesc [ 72 ] == 0x08 && rdesc [ 73 ] == 0x95 && rdesc [ 74 ] == 0x01 ) { hid_info ( hdev , ""fixing<S2SV_blank>up<S2SV_blank>Kye/Genius<S2SV_blank>Ergo<S2SV_blank>Mouse<S2SV_blank>"" ""report<S2SV_blank>descriptor\\n"" ) ; <S2SV_ModEnd> <S2SV_ModStart> = 0x09 ; rdesc [ 64 ] = 0x04 ; rdesc [ 66 ] = 0x07 ; rdesc [ 72 ] = 0x01 ; rdesc [ 74 ] = 0x08 <S2SV_ModEnd> "
2757,"<S2SV_StartBug> char * ksep , * vsep , * val ; <S2SV_EndBug> <S2SV_StartBug> vsep = memchr ( var -> ptr , '&' , var -> end - var -> ptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! eof ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> ","<S2SV_ModStart> start , * <S2SV_ModStart> start = var -> ptr + var -> already_scanned ; <S2SV_ModStart> start <S2SV_ModEnd> <S2SV_ModStart> start <S2SV_ModEnd> <S2SV_ModStart> var -> already_scanned = var -> end - var -> ptr ; <S2SV_ModStart> var -> already_scanned = 0 ; "
2758,"<S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , mp4 -> metaoffsets [ index ] , SEEK_SET ) ; <S2SV_EndBug> <S2SV_StartBug> return MP4buffer ; <S2SV_EndBug> ",<S2SV_ModStart> if ( mp4 -> filesize > mp4 -> metaoffsets [ index ] + mp4 -> metasizes [ index ] ) { <S2SV_ModStart> mp4 -> filepos = mp4 -> metaoffsets [ index ] + mp4 -> metasizes [ index ] ; <S2SV_ModStart> } 
2759,"<S2SV_StartBug> RefBuffer * ref_buf = NULL ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_bufs [ free_fb ] . ref_count -- ; <S2SV_EndBug> <S2SV_StartBug> ref_cnt_fb ( cm -> frame_bufs , ref_fb_ptr , free_fb ) ; <S2SV_EndBug> <S2SV_StartBug> ref_buf -> buf = & cm -> frame_bufs [ * ref_fb_ptr ] . buf ; <S2SV_EndBug> ",<S2SV_ModStart> ; RefCntBuffer * const frame_bufs = cm -> buffer_pool -> frame_bufs <S2SV_ModStart> if ( cm -> new_fb_idx == INVALID_IDX ) return VPX_CODEC_MEM_ERROR ; -- <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2760,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( ! uc_more_data_flag && ( 0 == ( i2_cur_mb_addr & 1 ) ) ) { return ERROR_EOB_FLUSHBITS_T ; } 
2761,"<S2SV_StartBug> static int write_skip ( const VP9_COMP * cpi , int segment_id , const MODE_INFO * mi , <S2SV_EndBug> <S2SV_StartBug> vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> const MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , skip , vp9_get_skip_prob ( & cpi -> common , xd ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> VP9_COMMON * cm , const MACROBLOCKD * xd , <S2SV_ModEnd> <S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> if ( segfeature_active ( & cm -> <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> cm <S2SV_ModEnd> "
2762,"<S2SV_StartBug> ip_printts ( ndo , cp , option_len ) ; <S2SV_EndBug> <S2SV_StartBug> case IPOPT_RA : <S2SV_EndBug> ","<S2SV_ModStart> if ( ip_printts <S2SV_ModEnd> <S2SV_ModStart> IPOPT_RR : case IPOPT_SSRR : case IPOPT_LSRR : if ( ip_printroute ( ndo , cp , option_len ) == - 1 ) goto trunc ; break ; case "
2763,"<S2SV_StartBug> pr_err ( ""Underflows<S2SV_blank>must<S2SV_blank>be<S2SV_blank>unconditional<S2SV_blank>and<S2SV_blank>"" <S2SV_EndBug> ",<S2SV_ModStart> pr_debug <S2SV_ModEnd> 
2764,<S2SV_StartBug> if ( _payload ) { <S2SV_EndBug> ,<S2SV_ModStart> plen <S2SV_ModEnd> 
2765,<S2SV_StartBug> name_rmt -> valuelen = cpu_to_be32 ( args -> valuelen ) ; <S2SV_EndBug> ,<S2SV_ModStart> rmtvaluelen <S2SV_ModEnd> 
2766,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug> <S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MAJ , 1 , 0 , <S2SV_EndBug> <S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN , 1 , 0 , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2767,<S2SV_StartBug> if ( env -> allow_ptr_leaks || BPF_SRC ( insn -> code ) == BPF_K ) <S2SV_EndBug> <S2SV_StartBug> if ( aux -> alu_state && <S2SV_EndBug> <S2SV_StartBug> return - EACCES ; <S2SV_EndBug> ,"<S2SV_ModStart> can_skip_alu_sanitation ( env , insn ) <S2SV_ModEnd> <S2SV_ModStart> update_alu_sanitation_state ( aux , alu_state , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2768,"<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_name ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_name ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_identifier ( tmp , & name , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> ","<S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""name\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>alias"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_identifier ( tmp , & name , arena ) ; if ( res != 0 <S2SV_ModEnd> <S2SV_ModStart> Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj , & PyId_asname , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; asname = NULL ; } else { int res ; <S2SV_ModStart> asname <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2769,"<S2SV_StartBug> offset += q -> buf_offset ; <S2SV_EndBug> <S2SV_StartBug> skb_add_rx_frag ( skb , skb_shinfo ( skb ) -> nr_frags , page , offset , len , <S2SV_EndBug> <S2SV_StartBug> q -> buf_size ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct skb_shared_info * shinfo = skb_shinfo ( skb ) ; if ( shinfo -> nr_frags < ARRAY_SIZE ( shinfo -> frags ) ) { <S2SV_ModStart> shinfo <S2SV_ModEnd> <S2SV_ModStart> } 
2770,"<S2SV_StartBug> int mutt_b64_decode ( char * out , const char * in ) <S2SV_EndBug> <S2SV_StartBug> * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; <S2SV_EndBug> <S2SV_StartBug> * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 2 ) ; <S2SV_EndBug> <S2SV_StartBug> * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | base64val ( digit4 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , size_t olen <S2SV_ModStart> if ( len == olen ) return len ; <S2SV_ModStart> if ( len == olen ) return len ; <S2SV_ModStart> if ( len == olen ) return len ; "
2771,"<S2SV_StartBug> err = security_sb_remount ( sb , data ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ( mnt -> mnt . mnt_flags & MNT_LOCK_NODEV ) && ! ( mnt_flags & MNT_NODEV ) ) { return - EPERM ; } if ( ( mnt -> mnt . mnt_flags & MNT_LOCK_NOSUID ) && ! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } if ( ( mnt -> mnt . mnt_flags & MNT_LOCK_NOEXEC ) && ! ( mnt_flags & MNT_NOEXEC ) ) { return - EPERM ; } if ( ( mnt -> mnt . mnt_flags & MNT_LOCK_ATIME ) && ( ( mnt -> mnt . mnt_flags & MNT_ATIME_MASK ) != ( mnt_flags & MNT_ATIME_MASK ) ) ) { return - EPERM ; } 
2772,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> recovery_started = false ; 
2773,"<S2SV_StartBug> device = btrfs_find_device ( fs_info -> fs_devices , devid , NULL , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> , true "
2774,<S2SV_StartBug> for ( i = 0 ; i < planes ; i ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( ymax < avctx -> height ) 
2775,<S2SV_StartBug> if ( ( * name != '\\0' ) && ( * name != '#' ) ) <S2SV_EndBug> ,<S2SV_ModStart> count < 0 ) || ( ( size_t ) count > length ) ) { length = 0 ; continue ; } if ( ( 
2776,<S2SV_StartBug> port -> exists = false ; <S2SV_EndBug> <S2SV_StartBug> port -> serio = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> spin_lock_irq ( & i8042_lock ) ; <S2SV_ModStart> ; port -> serio = NULL ; spin_unlock_irq ( & i8042_lock ) <S2SV_ModStart>  <S2SV_ModEnd> 
2777,<S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( opened & FILE_OPENED ) ) { <S2SV_EndBug> ,<S2SV_ModStart> out2 <S2SV_ModEnd> <S2SV_ModStart> out2 : 
2778,"<S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2779,<S2SV_StartBug> while ( begin && isspace ( ( ut8 ) str [ * begin ] ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( isalpha ( ( ut8 ) str [ * begin ] ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( end && isalnum ( ( ut8 ) str [ * end ] ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( isdigit ( ( ut8 ) str [ * begin ] ) ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( * begin > strlen ( str ) ) { return TT_EOF ; } <S2SV_ModStart> str [ * begin ] && <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> str [ * end ] && <S2SV_ModStart>  <S2SV_ModEnd> 
2780,"<S2SV_StartBug> int contentlen = 0 ; <S2SV_EndBug> <S2SV_StartBug> contentlen = atoi ( sb ) ; <S2SV_EndBug> <S2SV_StartBug> printstr ( & pp , ""<form<S2SV_blank>method=\\""POST\\""<S2SV_blank>action=\\""/U\\""><textarea<S2SV_blank>cols=\\""80\\""<S2SV_blank>rows=\\""30\\""<S2SV_blank>name=\\""conffile\\"">"" ) ; <S2SV_EndBug> <S2SV_StartBug> int l = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! writable || fseek ( writable , 0 , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( ( i = sockgetlinebuf ( param , CLIENT , ( unsigned char * ) buf , LINESIZE - 1 , '+' , conf . timeouts [ STRING_S ] ) ) > 0 ) { <S2SV_EndBug> <S2SV_StartBug> buf [ i ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! error ) { <S2SV_EndBug> <S2SV_StartBug> l += i ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned <S2SV_ModEnd> <S2SV_ModStart> sscanf ( sb , ""%u"" , & contentlen ) ; if ( contentlen > LINESIZE * 1024 ) contentlen = 0 <S2SV_ModEnd> <S2SV_ModStart> ""<form<S2SV_blank>method=\\""POST\\""<S2SV_blank>action=\\""/U\\""<S2SV_blank>enctype=\\""application/x-www-form-urlencoded\\""><textarea<S2SV_blank>cols=\\""80\\""<S2SV_blank>rows=\\""30\\""<S2SV_blank>name=\\""conffile\\"">"" <S2SV_ModEnd> <S2SV_ModStart> unsigned <S2SV_ModEnd> <S2SV_ModStart> ! contentlen || <S2SV_ModStart> l < contentlen && <S2SV_ModStart> ( contentlen - l ) > <S2SV_ModStart> ? LINESIZE - 1 : contentlen - l <S2SV_ModStart> if ( ! l ) { if ( i < 9 || <S2SV_ModEnd> <S2SV_ModStart> buf [ i ] = 0 ; <S2SV_ModStart>  <S2SV_ModEnd> "
2781,<S2SV_StartBug> struct mlx5_ib_create_qp_resp resp ; <S2SV_EndBug> ,<S2SV_ModStart> = { } 
2782,"<S2SV_StartBug> vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> const nmv_context * nmvc = & cm -> fc . nmvc ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE mode = mbmi -> mode ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob pred_prob = vp9_get_pred_prob_seg_id ( seg , xd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , pred_flag , pred_prob ) ; <S2SV_EndBug> <S2SV_StartBug> skip = write_skip ( cpi , segment_id , mi , w ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) ) <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , is_inter , vp9_get_intra_inter_prob ( cm , xd ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( skip || vp9_segfeature_active ( seg , segment_id , SEG_LVL_SKIP ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> write_selected_tx_size ( cpi , mbmi -> tx_size , bsize , w ) ; <S2SV_EndBug> <S2SV_StartBug> write_intra_mode ( w , mode , cm -> fc . y_mode_prob [ size_group_lookup [ bsize ] ] ) ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE b_mode = mi -> bmi [ idy * 2 + idx ] . as_mode ; <S2SV_EndBug> <S2SV_StartBug> write_intra_mode ( w , b_mode , cm -> fc . y_mode_prob [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> write_intra_mode ( w , mbmi -> uv_mode , cm -> fc . uv_mode_prob [ mode ] ) ; <S2SV_EndBug> <S2SV_StartBug> const int mode_ctx = mbmi -> mode_context [ mbmi -> ref_frame [ 0 ] ] ; <S2SV_EndBug> <S2SV_StartBug> const vp9_prob * const inter_probs = cm -> fc . inter_mode_probs [ mode_ctx ] ; <S2SV_EndBug> <S2SV_StartBug> write_ref_frames ( cpi , w ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_segfeature_active ( seg , segment_id , SEG_LVL_SKIP ) ) { <S2SV_EndBug> <S2SV_StartBug> ++ cm -> counts . inter_mode [ mode_ctx ] [ INTER_OFFSET ( mode ) ] ; <S2SV_EndBug> <S2SV_StartBug> cm -> fc . switchable_interp_prob [ ctx ] , <S2SV_EndBug> <S2SV_StartBug> & switchable_interp_encodings [ mbmi -> interp_filter ] ) ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE b_mode = mi -> bmi [ j ] . as_mode ; <S2SV_EndBug> <S2SV_StartBug> write_inter_mode ( w , b_mode , inter_probs ) ; <S2SV_EndBug> <S2SV_StartBug> & mbmi -> ref_mvs [ mbmi -> ref_frame [ ref ] ] [ 0 ] . as_mv , <S2SV_EndBug> <S2SV_StartBug> & mbmi -> ref_mvs [ mbmi -> ref_frame [ ref ] ] [ 0 ] . as_mv , nmvc , <S2SV_EndBug> ","<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> -> nmvc ; const MACROBLOCK * const x = & cpi -> td . <S2SV_ModEnd> <S2SV_ModStart> MB_MODE_INFO_EXT * const mbmi_ext = x -> mbmi_ext ; const PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> cm , xd <S2SV_ModEnd> <S2SV_ModStart> segfeature_active <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> skip <S2SV_ModEnd> <S2SV_ModStart> cm , xd <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> mbmi_ext <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> cm , xd <S2SV_ModEnd> <S2SV_ModStart> segfeature_active <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> ; ++ cpi -> interp_filter_selected [ 0 ] [ mbmi -> interp_filter ] <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mbmi_ext <S2SV_ModEnd> <S2SV_ModStart> mbmi_ext <S2SV_ModEnd> "
2783,"<S2SV_StartBug> unsigned int len = sizeof ( * ctx ) + crypto_skcipher_reqsize ( private ) ; <S2SV_EndBug> <S2SV_StartBug> ctx -> iv = sock_kmalloc ( sk , crypto_skcipher_ivsize ( private ) , <S2SV_EndBug> <S2SV_StartBug> memset ( ctx -> iv , 0 , crypto_skcipher_ivsize ( private ) ) ; <S2SV_EndBug> <S2SV_StartBug> skcipher_request_set_tfm ( & ctx -> req , private ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct skcipher_tfm * tfm = private ; struct crypto_skcipher * skcipher = tfm -> skcipher ; <S2SV_ModStart> skcipher ) ; if ( ! tfm -> has_key ) return - ENOKEY <S2SV_ModEnd> <S2SV_ModStart> skcipher <S2SV_ModEnd> <S2SV_ModStart> skcipher ) ) ; INIT_LIST_HEAD ( & ctx -> tsgl ) ; ctx -> len = len ; ctx -> used = 0 ; ctx -> more = 0 ; ctx -> merge = 0 ; ctx -> enc = 0 ; atomic_set ( & ctx -> inflight , 0 ) ; af_alg_init_completion ( & ctx -> completion ) ; ask -> private <S2SV_ModEnd> <S2SV_ModStart> skcipher <S2SV_ModEnd> "
2784,"<S2SV_StartBug> while ( ( c != '\\n' ) && ( c != '\\0' ) ) <S2SV_EndBug> <S2SV_StartBug> ( void ) sscanf ( value , ""%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g"" , <S2SV_EndBug> <S2SV_StartBug> & white_point [ 0 ] , & white_point [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ( void ) sscanf ( value , ""%d<S2SV_blank>+X<S2SV_blank>%d"" , & height , & width ) ; <S2SV_EndBug> <S2SV_StartBug> image -> rows = ( size_t ) height ; <S2SV_EndBug> ",<S2SV_ModStart> && ( c != EOF ) <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> == 8 ) { <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> == 2 ) { <S2SV_ModEnd> <S2SV_ModStart> } 
2785,"<S2SV_StartBug> return mutt_bcache_del ( bcache , id ) ; <S2SV_EndBug> ",<S2SV_ModStart> cache_id ( id ) <S2SV_ModEnd> 
2786,<S2SV_StartBug> uint16_t keylen ; <S2SV_EndBug> <S2SV_StartBug> uint16_t keylen ; <S2SV_EndBug> ,<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> int <S2SV_ModEnd> 
2787,"<S2SV_StartBug> # define ThrowCUTReaderException ( severity , tag ) { if ( palette != NULL ) palette = DestroyImage ( palette ) ; if ( clone_info != NULL ) clone_info = DestroyImageInfo ( clone_info ) ; ThrowReaderException ( severity , tag ) ; } <S2SV_EndBug> <S2SV_StartBug> offset = SeekBlob ( image , 6 , SEEK_SET ) ; <S2SV_EndBug> ","<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> ( void ) memset ( BImgBuff , 0 , ( size_t ) ldblk * sizeof ( * BImgBuff ) ) ; "
2788,"<S2SV_StartBug> NOEXPORT char * parse_global_option ( CMD cmd , char * opt , char * arg ) { <S2SV_EndBug> <S2SV_StartBug> new_global_options . chroot_dir = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = global_options . chroot_dir ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . chroot_dir = str_dup ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . compression = COMP_NONE ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . compression = COMP_DEFLATE ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . compression = COMP_ZLIB ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . egd_sock = EGD_SOCKET ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . egd_sock = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = global_options . egd_sock ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . egd_sock = str_dup ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . fips = 0 ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( ! strcasecmp ( arg , ""yes"" ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! strcasecmp ( arg , ""no"" ) ) <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . fips = 0 ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug> <S2SV_StartBug> case CMD_PRINT_DEFAULTS : <S2SV_EndBug> <S2SV_StartBug> s_log ( LOG_NOTICE , ""%-22s<S2SV_blank>=<S2SV_blank>yes|no<S2SV_blank>FIPS<S2SV_blank>140-2<S2SV_blank>mode"" , <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . foreground = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_stderr = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . foreground = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_stderr = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . foreground = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_stderr = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . foreground = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_stderr = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . icon [ ICON_ACTIVE ] = load_icon_default ( ICON_ACTIVE ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( new_global_options . icon [ ICON_ACTIVE ] = load_icon_file ( arg ) ) ) <S2SV_EndBug> <S2SV_StartBug> new_global_options . icon [ ICON_ERROR ] = load_icon_default ( ICON_ERROR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( new_global_options . icon [ ICON_ERROR ] = load_icon_file ( arg ) ) ) <S2SV_EndBug> <S2SV_StartBug> new_global_options . icon [ ICON_IDLE ] = load_icon_default ( ICON_IDLE ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( new_global_options . icon [ ICON_IDLE ] = load_icon_file ( arg ) ) ) <S2SV_EndBug> <S2SV_StartBug> new_global_options . log_file_mode = FILE_MODE_APPEND ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . log_file_mode = FILE_MODE_APPEND ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . log_file_mode = FILE_MODE_OVERWRITE ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . output_file = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = global_options . output_file ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . output_file = str_dup ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! new_global_options . option . foreground && <S2SV_EndBug> <S2SV_StartBug> new_global_options . output_file && <S2SV_EndBug> <S2SV_StartBug> new_global_options . pidfile = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = global_options . pidfile ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . pidfile = str_dup ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . pidfile = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! new_global_options . option . foreground && <S2SV_EndBug> <S2SV_StartBug> new_global_options . pidfile && <S2SV_EndBug> <S2SV_StartBug> new_global_options . random_bytes = RANDOM_BYTES ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . random_bytes = ( long ) strtol ( arg , & tmp_str , 10 ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . rand_file = str_dup ( RANDOM_FILE ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . rand_file = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = global_options . rand_file ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . rand_file = str_dup ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . rand_write = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . rand_write = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . rand_write = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_syslog = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_syslog = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_syslog = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . taskbar = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . taskbar = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . taskbar = 0 ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( ssl_configure ( & new_global_options ) ) <S2SV_EndBug> ","<S2SV_ModStart> , GLOBAL_OPTIONS * options <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> chroot_dir ; options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> egd_sock ; options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> FIPS_mode ( ) ? 1 : <S2SV_ModStart> if ( ! strcasecmp ( arg , ""yes"" ) ) { <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> # else return ""FIPS<S2SV_blank>support<S2SV_blank>is<S2SV_blank>not<S2SV_blank>available"" ; # endif } else <S2SV_ModEnd> <S2SV_ModStart> { # ifdef USE_FIPS if ( FIPS_mode ( ) ) return ""Failed<S2SV_blank>to<S2SV_blank>override<S2SV_blank>system-wide<S2SV_blank>FIPS<S2SV_blank>mode"" ; options -> <S2SV_ModEnd> <S2SV_ModStart> # endif } else { <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""%-22s<S2SV_blank>=<S2SV_blank>%s"" , ""fips"" , FIPS_mode ( ) ? ""yes"" : ""no"" ) ; # endif break ; case CMD_PRINT_HELP : # ifdef USE_FIPS s_log ( LOG_NOTICE , <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> output_file ; options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> output_file && options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> pidfile ; options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> pidfile && options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> rand_file ; options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> options -> <S2SV_ModEnd> <S2SV_ModStart> memset ( options , 0 , sizeof ( GLOBAL_OPTIONS ) ) ; <S2SV_ModStart> options <S2SV_ModEnd> "
2789,"<S2SV_StartBug> len = strlen ( ""/lock/lxc/"" ) + strlen ( n ) + strlen ( p ) + 3 ; <S2SV_EndBug> <S2SV_StartBug> ret = snprintf ( dest , len , ""%s/lock/lxc/%s"" , rundir , p ) ; <S2SV_EndBug> <S2SV_StartBug> int l2 = 22 + strlen ( n ) + strlen ( p ) ; <S2SV_EndBug> <S2SV_StartBug> free ( rundir ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""/lxc/lock/"" <S2SV_ModEnd> <S2SV_ModStart> ""%s/lxc/lock/%s"" <S2SV_ModEnd> <S2SV_ModStart> free ( dest ) ; free ( rundir ) ; return NULL ; } ret = snprintf ( dest , len , ""%s/lxc/lock/%s/.%s"" , rundir , p , n ) ; free ( rundir <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2790,"<S2SV_StartBug> void * data ) <S2SV_EndBug> <S2SV_StartBug> if ( ! se_dev -> dev_attrib . emulate_3pc ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> rc = memcmp ( & tmp_dev_wwn [ 0 ] , info -> dev_wwn , XCOPY_NAA_IEEE_REGEX_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rc != 0 ) <S2SV_EndBug> <S2SV_StartBug> info -> found_dev = se_dev ; <S2SV_EndBug> <S2SV_StartBug> rc = target_depend_item ( & se_dev -> dev_group . cg_item ) ; <S2SV_EndBug> ","<S2SV_ModStart> const unsigned char * dev_wwn ) { <S2SV_ModEnd> <S2SV_ModStart> { pr_debug ( ""XCOPY:<S2SV_blank>emulate_3pc<S2SV_blank>disabled<S2SV_blank>on<S2SV_blank>se_dev<S2SV_blank>%p\\n"" , se_dev ) ; <S2SV_ModStart> } <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { pr_debug ( ""XCOPY:<S2SV_blank>skip<S2SV_blank>non-matching:<S2SV_blank>%*ph\\n"" , XCOPY_NAA_IEEE_REGEX_LEN , tmp_dev_wwn ) ; <S2SV_ModStart> } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2791,"<S2SV_StartBug> struct i2s_platform_data * i2s_pdata ; <S2SV_EndBug> <S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> <S2SV_StartBug> adev -> acp . acp_res = kcalloc ( 5 , sizeof ( struct resource ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> kfree ( adev -> acp . acp_cell ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> kfree ( adev -> acp . acp_res ) ; <S2SV_EndBug> <S2SV_StartBug> return r ; <S2SV_EndBug> <S2SV_StartBug> return r ; <S2SV_EndBug> <S2SV_StartBug> return - ETIMEDOUT ; <S2SV_EndBug> <S2SV_StartBug> return - ETIMEDOUT ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> = NULL <S2SV_ModStart> { r = <S2SV_ModEnd> <S2SV_ModStart> goto failure ; } <S2SV_ModStart> r = <S2SV_ModEnd> <S2SV_ModStart> goto failure ; <S2SV_ModStart> r = - ENOMEM ; goto failure <S2SV_ModEnd> <S2SV_ModStart> goto failure <S2SV_ModEnd> <S2SV_ModStart> goto failure <S2SV_ModEnd> <S2SV_ModStart> r = - ETIMEDOUT ; goto failure <S2SV_ModEnd> <S2SV_ModStart> r = - ETIMEDOUT ; goto failure <S2SV_ModEnd> <S2SV_ModStart> failure : kfree ( i2s_pdata ) ; kfree ( adev -> acp . acp_res ) ; kfree ( adev -> acp . acp_cell ) ; kfree ( adev -> acp . acp_genpd ) ; return r ; 
2792,"<S2SV_StartBug> int old_bin_num , bin_num ; <S2SV_EndBug> <S2SV_StartBug> bin_num = ZEND_MM_SMALL_SIZE_TO_BIN ( size ) ; <S2SV_EndBug> <S2SV_StartBug> return ptr ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( size <= ZEND_MM_MAX_SMALL_SIZE ) { int <S2SV_ModStart> } 
2793,<S2SV_StartBug> coerce_reg_to_32 ( dst_reg ) ; <S2SV_EndBug> <S2SV_StartBug> coerce_reg_to_32 ( & src_reg ) ; <S2SV_EndBug> ,"<S2SV_ModStart> coerce_reg_to_size ( dst_reg , 4 ) ; coerce_reg_to_size <S2SV_ModEnd> <S2SV_ModStart> , 4 "
2794,<S2SV_StartBug> free ( p ) ; <S2SV_EndBug> ,<S2SV_ModStart> * pp = p -> next ; 
2795,"<S2SV_StartBug> struct oabi_flock64 user ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & user , ( struct oabi_flock64 __user * ) arg , <S2SV_EndBug> <S2SV_StartBug> ret = sys_fcntl64 ( fd , cmd , local_arg ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return do_locks ( fd , cmd , arg ) ; default : return <S2SV_ModEnd> <S2SV_ModStart> arg <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2796,"<S2SV_StartBug> state -> frame [ 0 ] = kzalloc ( sizeof ( struct bpf_func_state ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> verbose ( env , ""\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d:<S2SV_blank>safe\\n"" , <S2SV_EndBug> <S2SV_StartBug> env -> prev_insn_idx , env -> insn_idx ) ; <S2SV_EndBug> <S2SV_StartBug> verbose ( env , ""\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d:"" , <S2SV_EndBug> <S2SV_StartBug> env -> prev_insn_idx , env -> insn_idx ) ; <S2SV_EndBug> ","<S2SV_ModStart> speculative = false ; state -> <S2SV_ModStart> ""\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d%s:<S2SV_blank>safe\\n"" <S2SV_ModEnd> <S2SV_ModStart> , env -> cur_state -> speculative ? ""<S2SV_blank>(speculative<S2SV_blank>execution)"" : """" <S2SV_ModStart> ""\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d%s:"" <S2SV_ModEnd> <S2SV_ModStart> , env -> cur_state -> speculative ? ""<S2SV_blank>(speculative<S2SV_blank>execution)"" : """" "
2797,"<S2SV_StartBug> input = xmlNewEntityInputStream ( ctxt , entity ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ( entity -> etype == XML_EXTERNAL_PARAMETER_ENTITY ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> validate == 0 ) ) return ; 
2798,"<S2SV_StartBug> static void dist_block ( int plane , int block , TX_SIZE tx_size , <S2SV_EndBug> <S2SV_StartBug> struct rdcost_block_args * args ) { <S2SV_EndBug> <S2SV_StartBug> const int ss_txfrm_size = tx_size << 1 ; <S2SV_EndBug> <S2SV_StartBug> int16_t * const coeff = BLOCK_OFFSET ( p -> coeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t * const dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> args -> dist = vp9_block_error ( coeff , dqcoeff , 16 << ss_txfrm_size , <S2SV_EndBug> <S2SV_StartBug> & this_sse ) >> shift ; <S2SV_EndBug> <S2SV_StartBug> ( 1 << ss_txfrm_size ) ) >> ( shift + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> args -> sse += p ; <S2SV_EndBug> ","<S2SV_ModStart> MACROBLOCK * x , <S2SV_ModStart> int64_t * out_dist , int64_t * out_sse <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH const int bd = ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) ? xd -> bd : 8 ; * out_dist = vp9_highbd_block_error <S2SV_ModEnd> <S2SV_ModStart> , bd ) >> shift ; # else * out_dist = vp9_block_error ( coeff , dqcoeff , 16 << ss_txfrm_size , & this_sse ) >> shift ; # endif * out_sse <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> + ( bd - 8 ) * 2 ) ; # else ( shift + 2 ) ; # endif * out_dist <S2SV_ModEnd> <S2SV_ModStart> * out_sse <S2SV_ModEnd> "
2799,"<S2SV_StartBug> ""The<S2SV_blank>OpenID<S2SV_blank>Connect<S2SV_blank>callback<S2SV_blank>URL<S2SV_blank>received<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>request:<S2SV_blank>%s"" , <S2SV_EndBug> ","<S2SV_ModStart> ""The<S2SV_blank>OpenID<S2SV_blank>Connect<S2SV_blank>callback<S2SV_blank>URL<S2SV_blank>received<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>request"" ) , <S2SV_ModEnd> "
2800,<S2SV_StartBug> ps_dec -> u4_cur_bs_mb_num = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> = 0 ; ps_dec -> u4_start_recon_deblk 
2801,<S2SV_StartBug> unix_inflight ( scm -> fp -> fp [ i ] ) ; <S2SV_EndBug> ,"<S2SV_ModStart> user , scm -> fp -> "
2802,<S2SV_StartBug> static int cipso_v4_delopt ( struct ip_options * * opt_ptr ) <S2SV_EndBug> <S2SV_StartBug> struct ip_options * opt = * opt_ptr ; <S2SV_EndBug> <S2SV_StartBug> if ( opt -> srr || opt -> rr || opt -> ts || opt -> router_alert ) { <S2SV_EndBug> <S2SV_StartBug> cipso_off = opt -> cipso - sizeof ( struct iphdr ) ; <S2SV_EndBug> <S2SV_StartBug> cipso_ptr = & opt -> __data [ cipso_off ] ; <S2SV_EndBug> <S2SV_StartBug> if ( opt -> srr > opt -> cipso ) <S2SV_EndBug> <S2SV_StartBug> if ( opt -> rr > opt -> cipso ) <S2SV_EndBug> <S2SV_StartBug> if ( opt -> ts > opt -> cipso ) <S2SV_EndBug> <S2SV_StartBug> if ( opt -> router_alert > opt -> cipso ) <S2SV_EndBug> <S2SV_StartBug> opt -> cipso = 0 ; <S2SV_EndBug> <S2SV_StartBug> opt -> optlen - cipso_off - cipso_len ) ; <S2SV_EndBug> <S2SV_StartBug> while ( iter < opt -> optlen ) <S2SV_EndBug> <S2SV_StartBug> iter += opt -> __data [ iter + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> hdr_delta = opt -> optlen ; <S2SV_EndBug> <S2SV_StartBug> hdr_delta -= opt -> optlen ; <S2SV_EndBug> <S2SV_StartBug> hdr_delta = opt -> optlen ; <S2SV_EndBug> ,"<S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> opt . cipso ) opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . cipso ) opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . cipso ) opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . cipso ) opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> opt . optlen ) if ( opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . optlen ; opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . optlen ; call_rcu ( & opt -> rcu , opt_kfree_rcu <S2SV_ModEnd> "
2803,"<S2SV_StartBug> char * command , * args = value ; <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> if ( size == PAGE_SIZE ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> args [ size ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( name , ""current"" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( command , ""permhat"" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( name , ""exec"" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> aad . error = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> ","<S2SV_ModStart> largs = NULL , * <S2SV_ModStart> ; if ( current != task ) return - EACCES <S2SV_ModStart> largs = args = kmalloc ( size + 1 , GFP_KERNEL ) ; if ( ! args <S2SV_ModEnd> <S2SV_ModStart> ENOMEM ; memcpy ( args , value , size ) ; args [ size ] = '\\0' ; } error = - <S2SV_ModStart> = strim ( args ) ; command = strsep ( & args , ""<S2SV_blank>"" ) ; if ( ! args ) goto out ; args = skip_spaces ( args ) ; if ( ! * args ) goto out ; arg_size = size - ( args - ( char * ) value ) ; if ( strcmp ( name , ""current"" ) == 0 ) { if ( strcmp ( command , ""changehat"" ) == 0 ) { error = aa_setprocattr_changehat ( args , arg_size , ! AA_DO_TEST ) ; } else if ( strcmp ( command , ""permhat"" ) == 0 ) { error = aa_setprocattr_changehat ( args , arg_size , AA_DO_TEST ) ; } else if ( strcmp ( command , ""changeprofile"" ) == 0 ) { error = aa_setprocattr_changeprofile ( args , ! AA_ONEXEC , ! AA_DO_TEST ) ; } else if ( strcmp ( command , ""permprofile"" ) == 0 ) { error = aa_setprocattr_changeprofile ( args , ! AA_ONEXEC , AA_DO_TEST ) ; } else goto fail ; } else <S2SV_ModEnd> <S2SV_ModStart> ""exec"" ) == 0 ) { if ( strcmp ( command , ""exec"" ) == 0 ) error = aa_setprocattr_changeprofile ( args , AA_ONEXEC <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! error ) error = size ; out : kfree ( largs ) <S2SV_ModEnd> <S2SV_ModStart> error = <S2SV_ModStart> goto out <S2SV_ModEnd> "
2804,<S2SV_StartBug> long timeo ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2805,"<S2SV_StartBug> void vp9_write_prob_diff_update ( vp9_writer * w , vp9_prob newp , vp9_prob oldp ) { <S2SV_EndBug> ","<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> vpx_prob newp , vpx_prob <S2SV_ModEnd> "
2806,"<S2SV_StartBug> static int getnum ( lua_State * L , const char * * fmt , int df ) { <S2SV_EndBug> <S2SV_StartBug> if ( a > ( INT_MAX / 10 ) || a * 10 > ( INT_MAX - ( * * fmt - '0' ) ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2807,<S2SV_StartBug> usb_kill_urb ( mixer -> urb ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( mixer -> disconnected ) return ; if ( mixer -> urb ) <S2SV_ModStart> if ( mixer -> rc_urb ) <S2SV_ModStart> mixer -> disconnected = true ; 
2808,"<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> nfunc , line , qedi -> host_no , & vaf ) ; <S2SV_EndBug> <S2SV_StartBug> pr_err ( ""[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV"" , nfunc , line , & vaf ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> 
2809,"<S2SV_StartBug> memcpy ( ie -> ie_buffer + le16_to_cpu ( ie -> ie_length ) , <S2SV_EndBug> ",<S2SV_ModStart> if ( le16_to_cpu ( ie -> ie_length ) + vs_ie -> len + 2 > IEEE_MAX_IE_SIZE ) return - EINVAL ; 
2810,"<S2SV_StartBug> ssize_t ret = write ( uart_fd , data + transmitted_length , length ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
2811,<S2SV_StartBug> evtchn_to_irq [ row ] [ col ] = - 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> WRITE_ONCE ( <S2SV_ModStart> , - 1 ) <S2SV_ModEnd> "
2812,"<S2SV_StartBug> CALL_AND_WAIT ( error = bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> ",<S2SV_ModStart> false 
2813,"<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , ""\\nStream<S2SV_blank>timebase<S2SV_blank>(--timebase):\\n"" <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < get_vpx_encoder_count ( ) ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , ""<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%-6s<S2SV_blank>-<S2SV_blank>%s\\n"" , <S2SV_EndBug> <S2SV_StartBug> encoder -> name , vpx_codec_iface_name ( encoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> void <S2SV_ModStart> ; const int num_encoder = get_vpx_encoder_count ( ) <S2SV_ModStart> # if CONFIG_VP10_ENCODER fprintf ( stderr , ""\\nVP10<S2SV_blank>Specific<S2SV_blank>Options:\\n"" ) ; arg_show_usage ( stderr , vp10_args ) ; # endif <S2SV_ModStart> num_encoder <S2SV_ModEnd> <S2SV_ModStart> const char * defstr = ( i == ( num_encoder - 1 ) ) ? ""(default)"" : """" ; fprintf ( stderr , ""<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%-6s<S2SV_blank>-<S2SV_blank>%s<S2SV_blank>%s\\n"" <S2SV_ModEnd> <S2SV_ModStart> codec_interface ( ) ) , defstr <S2SV_ModEnd> <S2SV_ModStart> fprintf ( stderr , ""\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>"" ) ; fprintf ( stderr , ""Use<S2SV_blank>--codec<S2SV_blank>to<S2SV_blank>switch<S2SV_blank>to<S2SV_blank>a<S2SV_blank>non-default<S2SV_blank>encoder.\\n\\n"" ) ; "
2814,"<S2SV_StartBug> ( void ) memmove ( cp , cp + 2 , strlen ( file ) - 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> cp <S2SV_ModEnd> 
2815,<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( clk_src ) ; 
2816,<S2SV_StartBug> if ( ! ( buf = g_try_malloc ( size ) ) ) { <S2SV_EndBug> ,<S2SV_ModStart> g_try_malloc0 <S2SV_ModEnd> 
2817,<S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> if ( j >= MAX_REF_BUFS ) { ALOGE ( ""b/25818142"" ) ; android_errorWriteLog ( 0x534e4554 , ""25818142"" ) ; ps_dpb_cmds -> u1_num_of_commands = 0 ; return - 1 ; } "
2818,<S2SV_StartBug> read_lock ( & evtchn_rwlock ) ; <S2SV_EndBug> <S2SV_StartBug> xen_evtchn_handle_events ( cpu ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> struct evtchn_loop_ctrl ctrl = { 0 } ; <S2SV_ModStart> , & ctrl <S2SV_ModStart> __this_cpu_inc ( irq_epoch ) ; "
2819,<S2SV_StartBug> length = 1 ; <S2SV_EndBug> <S2SV_StartBug> else if ( header -> flags & TCP_FLAG_FIN ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } else { length = queueItem -> length ; } <S2SV_ModEnd> 
2820,<S2SV_StartBug> struct user_struct * user = group -> inotify_data . user ; <S2SV_EndBug> <S2SV_StartBug> atomic_dec ( & user -> inotify_devs ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2821,"<S2SV_StartBug> atomic_set ( & new -> count , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! atomic_add_unless ( & ucounts -> count , 1 , INT_MAX ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = 0 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> 
2822,"<S2SV_StartBug> mark_desktop_file_trusted ( job , <S2SV_EndBug> ",<S2SV_ModStart> mark_desktop_file_executable <S2SV_ModEnd> 
2823,<S2SV_StartBug> get_page ( page ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( ! try_get_page ( page ) ) ) { spin_unlock ( ptl ) ; return ERR_PTR ( - ENOMEM ) ; } <S2SV_ModEnd> 
2824,"<S2SV_StartBug> case 0 : <S2SV_EndBug> <S2SV_StartBug> ( intmax_t ) rsrc -> uncompressed_size ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( mp , p , bytes_avail ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( rsrc -> uncompressed_size != rsrc -> compressed_size ) { archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , ""Malformed<S2SV_blank>OS<S2SV_blank>X<S2SV_blank>metadata<S2SV_blank>entry:<S2SV_blank>inconsistent<S2SV_blank>size"" ) ; return ( ARCHIVE_FATAL ) ; } <S2SV_ModStart> ) ; return ( ARCHIVE_WARN ) ; } if ( rsrc -> compressed_size > ( 4 * 1024 * 1024 ) ) { archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , ""Mac<S2SV_blank>metadata<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large:<S2SV_blank>%jd<S2SV_blank>><S2SV_blank>4M<S2SV_blank>bytes"" , ( intmax_t ) rsrc -> compressed_size <S2SV_ModStart> if ( ( size_t ) bytes_avail > metadata_bytes ) bytes_avail = metadata_bytes ; "
2825,"<S2SV_StartBug> jas_eprintf ( ""warning:<S2SV_blank>number<S2SV_blank>of<S2SV_blank>components<S2SV_blank>mismatch\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> jas_eprintf ( ""warning:<S2SV_blank>component<S2SV_blank>data<S2SV_blank>type<S2SV_blank>mismatch<S2SV_blank>(IHDR)\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> dec -> image ) ) ) { <S2SV_EndBug> <S2SV_StartBug> jas_eprintf ( ""warning:<S2SV_blank>component<S2SV_blank>data<S2SV_blank>type<S2SV_blank>mismatch<S2SV_blank>(BPCC)\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""error:<S2SV_blank>number<S2SV_blank>of<S2SV_blank>components<S2SV_blank>mismatch<S2SV_blank>(IHDR)\\n"" ) ; goto error <S2SV_ModEnd> <S2SV_ModStart> ""error:<S2SV_blank>component<S2SV_blank>data<S2SV_blank>type<S2SV_blank>mismatch<S2SV_blank>(IHDR)\\n"" ) ; goto error <S2SV_ModEnd> <S2SV_ModStart> dec -> image ) ) ) { jas_eprintf ( ""error:<S2SV_blank>number<S2SV_blank>of<S2SV_blank>components<S2SV_blank>mismatch<S2SV_blank>(BPCC)\\n"" ) ; goto error <S2SV_ModEnd> <S2SV_ModStart> ""error:<S2SV_blank>component<S2SV_blank>data<S2SV_blank>type<S2SV_blank>mismatch<S2SV_blank>(BPCC)\\n"" ) ; goto error <S2SV_ModEnd> "
2826,<S2SV_StartBug> char lowstr [ MAXDATELEN + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( str ) >= sizeof ( lowstr ) ) <S2SV_EndBug> ,<S2SV_ModStart> MAXDATEFIELDS <S2SV_ModEnd> <S2SV_ModStart> > MAXDATELEN <S2SV_ModEnd> 
2827,"<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> if ( ! js_regexec ( re -> prog , text , & m , opts ) ) { <S2SV_EndBug> ","<S2SV_ModStart> result ; int <S2SV_ModStart> result = <S2SV_ModEnd> <S2SV_ModStart> ; if ( result < 0 ) js_error ( J , ""regexec<S2SV_blank>failed"" ) ; if ( result == 0 "
2828,"<S2SV_StartBug> if ( ( event -> sigev_notify & SIGEV_THREAD_ID ) && <S2SV_EndBug> <S2SV_StartBug> ( ! ( rtn = find_task_by_vpid ( event -> sigev_notify_thread_id ) ) || <S2SV_EndBug> <S2SV_StartBug> ! same_thread_group ( rtn , current ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( ( event -> sigev_notify & ~ SIGEV_THREAD_ID ) != SIGEV_NONE ) && <S2SV_EndBug> <S2SV_StartBug> ( ( event -> sigev_signo <= 0 ) || ( event -> sigev_signo > SIGRTMAX ) ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> switch <S2SV_ModEnd> <S2SV_ModStart> ) { case SIGEV_SIGNAL | SIGEV_THREAD_ID : <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! rtn <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> case SIGEV_SIGNAL : case SIGEV_THREAD : if <S2SV_ModEnd> <S2SV_ModStart> || <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> case SIGEV_NONE : <S2SV_ModStart> default : return NULL ; } 
2829,"<S2SV_StartBug> # ifdef __linux__ <S2SV_EndBug> <S2SV_StartBug> sun . sun_path [ 0 ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> sun_len = offsetof ( struct sockaddr_un , sun_path ) + strlen ( path ) + 1 ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sizeof <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> 
2830,<S2SV_StartBug> local_vec = ( struct rds_iovec __user * ) ( unsigned long ) args -> local_vec_addr ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( args -> nr_local == 0 ) return - EINVAL 
2831,"<S2SV_StartBug> vpx_memset ( ybf , 0 , sizeof ( YV12_BUFFER_CONFIG ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> 
2832,"<S2SV_StartBug> headerMergeLegacySigs ( h , sigh ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( <S2SV_ModStart> , & msg ) ) goto exit <S2SV_ModEnd> "
2833,<S2SV_StartBug> rcu_read_lock ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! head -> dev ) <S2SV_EndBug> <S2SV_StartBug> if ( qp -> user == IP_DEFRAG_CONNTRACK_IN && ! skb_dst ( head ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> const struct iphdr * iph ; int err ; <S2SV_ModStart> ) goto out_rcu_unlock ; skb_dst_drop ( head ) ; iph = ip_hdr ( head ) ; err = ip_route_input_noref ( head , iph -> daddr , iph -> saddr , iph -> tos , head -> dev ) ; if ( err <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2834,"<S2SV_StartBug> u64 insn_bitness = ( BPF_CLASS ( insn -> code ) == BPF_ALU64 ) ? 64 : 32 ; <S2SV_EndBug> <S2SV_StartBug> coerce_reg_to_size ( & src_reg , 4 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( insn_bitness == 32 ) { coerce_reg_to_size ( dst_reg , 4 ) ; coerce_reg_to_size ( & src_reg , 4 ) ; } <S2SV_ModStart>  <S2SV_ModEnd> "
2835,"<S2SV_StartBug> for ( ac = 0 ; ac < IEEE80211_NUM_ACS ; ac ++ ) { <S2SV_EndBug> <S2SV_StartBug> ieee80211_add_pending_skbs_fn ( local , & pending , clear_sta_ps_flags , sta ) ; <S2SV_EndBug> ",<S2SV_ModStart> spin_lock ( & sta -> ps_lock ) ; <S2SV_ModStart> ) ; spin_unlock ( & sta -> ps_lock 
2836,"<S2SV_StartBug> cJSON_AddIntToObject ( test -> json_start , ""tcp_mss"" , test -> settings -> mss ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( test -> json_start , ""tcp_mss_default"" , opt ) ; <S2SV_EndBug> ",<S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> <S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> 
2837,<S2SV_StartBug> ret = fscrypt_get_crypt_info ( dir ) ; <S2SV_EndBug> ,<S2SV_ModStart> fscrypt_get_encryption_info <S2SV_ModEnd> 
2838,<S2SV_StartBug> if ( nh . nh_type == 1 && i == 0 ) <S2SV_EndBug> ,<S2SV_ModStart> len > 1024 || len < 0 ) continue ; if ( 
2839,"<S2SV_StartBug> static void send ( node_t * node , node_t * child , byte * fout ) { <S2SV_EndBug> <S2SV_StartBug> send ( node -> parent , node , fout ) ; <S2SV_EndBug> <S2SV_StartBug> if ( child ) { <S2SV_EndBug> ","<S2SV_ModStart> , int maxoffset <S2SV_ModStart> , maxoffset <S2SV_ModStart> if ( bloc >= maxoffset ) { bloc = maxoffset + 1 ; return ; } "
2840,"<S2SV_StartBug> BT_DBG ( ""sock<S2SV_blank>%p,<S2SV_blank>sk<S2SV_blank>%p"" , sock , sk ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; memset ( la , 0 , sizeof ( struct sockaddr_l2 ) "
2841,"<S2SV_StartBug> if ( js_regexec ( re -> prog , text , & m , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( js_regexec ( re -> prog , a , & m , a > text ? REG_NOTBOL : 0 ) ) <S2SV_EndBug> ","<S2SV_ModStart> js_doregexec ( J , <S2SV_ModEnd> <S2SV_ModStart> js_doregexec ( J , <S2SV_ModEnd> "
2842,"<S2SV_StartBug> if ( ! file || ( iovcnt && ! iov ) || iovcnt < 0 || iovcnt > OE_IOV_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( iov , iovcnt , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> OE_RAISE_ERRNO ( OE_ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_sync ( iov , iovcnt , buf , buf_size ) != 0 ) <S2SV_EndBug> ","<S2SV_ModStart> size_t data_size = 0 ; <S2SV_ModStart> , & data_size <S2SV_ModStart> ) ; if ( data_size > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ret > ( ssize_t ) data_size ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( "
2843,"<S2SV_StartBug> JSObjectRef globalobject ; <S2SV_EndBug> <S2SV_StartBug> globalobject = JSContextGetGlobalObject ( context ) ; <S2SV_EndBug> <S2SV_StartBug> JSObjectDeleteProperty ( context , globalobject , var_name , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2844,"<S2SV_StartBug> ut8 * directory_base ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( int ) obj -> hdr -> number_of_streams ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> entry = ( struct minidump_directory * ) ( directory_base + ( i * sizeof ( struct minidump_directory ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> r_bin_mdmp_init_directory_entry ( obj , entry ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct minidump_directory entry <S2SV_ModEnd> <S2SV_ModStart> ut64 rvadir = obj -> hdr -> stream_directory_rva ; <S2SV_ModStart> ut32 delta = <S2SV_ModEnd> <S2SV_ModStart> ; int r = r_buf_read_at ( obj -> b , rvadir + delta , ( ut8 * ) & entry , sizeof ( struct minidump_directory <S2SV_ModStart> if ( r ) { <S2SV_ModStart> & <S2SV_ModStart> } "
2845,<S2SV_StartBug> intra_pred_var = vp8_get_mb_ss ( x -> src_diff ) ; <S2SV_EndBug> ,<S2SV_ModStart> vpx_get_mb_ss <S2SV_ModEnd> 
2846,<S2SV_StartBug> ih264d_init_arch ( ps_dec ) ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( ps_dec -> ps_cur_slice , 0 , sizeof ( dec_slice_params_t ) ) ; "
2847,<S2SV_StartBug> if ( pin_code == NULL ) <S2SV_EndBug> ,<S2SV_ModStart> || pin_len > PIN_CODE_LEN 
2848,"<S2SV_StartBug> pathlen = get_node_path_locked ( node -> parent , buf , bufsize - namelen - 2 ) ; <S2SV_EndBug> ",<S2SV_ModStart> 1 <S2SV_ModEnd> 
2849,"<S2SV_StartBug> ! DoReadFile ( infile , & ds64_chunk , chunk_header . ckSize , & bcount ) || <S2SV_EndBug> <S2SV_StartBug> bcount != chunk_header . ckSize ) { <S2SV_EndBug> <S2SV_StartBug> ! WavpackAddWrapper ( wpc , & ds64_chunk , chunk_header . ckSize ) ) { <S2SV_EndBug> ",<S2SV_ModStart> sizeof ( DS64Chunk ) <S2SV_ModEnd> <S2SV_ModStart> sizeof ( DS64Chunk ) <S2SV_ModEnd> <S2SV_ModStart> sizeof ( DS64Chunk ) <S2SV_ModEnd> 
2850,<S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart> else ( void ) cfg ; ( void ) mem_loc ; # 
2851,<S2SV_StartBug> unsigned long kflags = key -> flags ; <S2SV_EndBug> <S2SV_StartBug> if ( kflags & ( 1 << KEY_FLAG_NEGATIVE ) ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> result = ERR_PTR ( key -> reject_error ) ; <S2SV_EndBug> ,<S2SV_ModStart> READ_ONCE ( key -> flags ) ; short state = READ_ONCE ( key -> state ) <S2SV_ModEnd> <S2SV_ModStart> state < 0 ) { <S2SV_ModEnd> <S2SV_ModStart> state <S2SV_ModEnd> 
2852,"<S2SV_StartBug> char b64 [ len + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> i_data = vlc_b64_decode_binary ( & p_orig , b64 ) ; <S2SV_EndBug> ",<S2SV_ModStart> * b64 = malloc ( <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( ! b64 ) return VLC_EGENERIC <S2SV_ModEnd> <S2SV_ModStart> b64 ) ; free ( 
2853,"<S2SV_StartBug> isoclns_print ( ndo , p - 1 , length + 1 , ndo -> ndo_snapend - p + 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; break ; case NLPID_SNAP : if ( snap_print ( ndo , p , length <S2SV_ModStart>  <S2SV_ModEnd> "
2854,<S2SV_StartBug> record = addStyleRecord ( shape ) ; <S2SV_EndBug> ,"<S2SV_ModStart> else if ( idx >= 255 && shape -> useVersion == SWF_SHAPE1 ) { SWF_error ( ""Too<S2SV_blank>many<S2SV_blank>fills<S2SV_blank>for<S2SV_blank>SWFShape<S2SV_blank>V1.\\n"" ""Use<S2SV_blank>a<S2SV_blank>higher<S2SV_blank>SWFShape<S2SV_blank>version\\n"" ) ; } "
2855,<S2SV_StartBug> struct sock * sk = sock -> sk ; <S2SV_EndBug> <S2SV_StartBug> if ( ! err ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && msg -> msg_name ) { struct sockaddr_at * sat = msg -> msg_name ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2856,"<S2SV_StartBug> umount_tree ( mnt , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( mnt -> mnt . mnt_flags & MNT_UMOUNT ) { struct mount * p , * tmp ; list_for_each_entry_safe ( p , tmp , & mnt -> mnt_mounts , mnt_child ) { hlist_add_head ( & p -> mnt_umount . s_list , & unmounted ) ; umount_mnt ( p ) ; } } else "
2857,<S2SV_StartBug> if ( cpi -> common . frame_to_show ) <S2SV_EndBug> ,<S2SV_ModStart> ( void ) flags ; 
2858,"<S2SV_StartBug> rq = blk_mq_tag_to_rq ( hctx -> tags , off + bit ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> -> rqs [ <S2SV_ModEnd> <S2SV_ModStart> ] <S2SV_ModEnd> 
2859,<S2SV_StartBug> MODE new_qc = MODE_BESTQUALITY ; <S2SV_EndBug> <S2SV_StartBug> if ( deadline ) { <S2SV_EndBug> <S2SV_StartBug> ( uint64_t ) ctx -> cfg . g_timebase . num / <S2SV_EndBug> <S2SV_StartBug> ( uint64_t ) ctx -> cfg . g_timebase . den ; <S2SV_EndBug> <S2SV_StartBug> new_qc = ( deadline > duration_us ) ? MODE_GOODQUALITY : MODE_REALTIME ; <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> oxcf . mode != new_qc ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> oxcf . mode = new_qc ; <S2SV_EndBug> ,<S2SV_ModStart> new_mode = BEST ; switch ( ctx -> cfg . g_pass ) { case VPX_RC_ONE_PASS : <S2SV_ModEnd> <S2SV_ModStart> > 0 ) { const vpx_codec_enc_cfg_t * const cfg = & ctx -> cfg ; <S2SV_ModEnd> <S2SV_ModStart> cfg -> <S2SV_ModEnd> <S2SV_ModStart> cfg -> <S2SV_ModEnd> <S2SV_ModStart> new_mode <S2SV_ModEnd> <S2SV_ModStart> GOOD : REALTIME ; } else { new_mode = BEST ; } break ; case VPX_RC_FIRST_PASS : break ; case VPX_RC_LAST_PASS : new_mode = deadline > 0 ? GOOD : BEST ; break ; } <S2SV_ModEnd> <S2SV_ModStart> new_mode <S2SV_ModEnd> <S2SV_ModStart> new_mode <S2SV_ModEnd> 
2860,"<S2SV_StartBug> static int get_minq_index ( double maxq , double x3 , double x2 , double x1 ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < QINDEX_RANGE ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> if ( minqtarget <= vp9_convert_qindex_to_q ( i ) ) <S2SV_EndBug> <S2SV_StartBug> return i ; <S2SV_EndBug> ","<S2SV_ModStart> , vpx_bit_depth_t bit_depth <S2SV_ModStart> { <S2SV_ModStart> , bit_depth <S2SV_ModStart> } "
2861,<S2SV_StartBug> bmp_info . number_colors = ReadBlobLSBLong ( image ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; if ( bmp_info . number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError , ""InsufficientImageDataInFile"" "
2862,"<S2SV_StartBug> struct strbuf * path , const char * component , <S2SV_EndBug> <S2SV_StartBug> finish_object ( obj , path , component , cb_data ) ; <S2SV_EndBug> <S2SV_StartBug> show_object_with_name ( stdout , obj , path , component ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> 
2863,"<S2SV_StartBug> const struct ipv6_pinfo * np = inet6_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( np -> opt != NULL ) <S2SV_EndBug> <S2SV_StartBug> newnp -> opt = ipv6_dup_options ( newsk , np -> opt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( newnp -> opt != NULL ) <S2SV_EndBug> <S2SV_StartBug> inet_csk ( newsk ) -> icsk_ext_hdr_len = ( newnp -> opt -> opt_nflen + <S2SV_EndBug> <S2SV_StartBug> newnp -> opt -> opt_flen ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; struct ipv6_txoptions * opt <S2SV_ModStart> opt = rcu_dereference <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( opt ) { <S2SV_ModEnd> <S2SV_ModStart> opt ) ; RCU_INIT_POINTER ( newnp -> opt , opt ) ; } <S2SV_ModEnd> <S2SV_ModStart> opt <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2864,<S2SV_StartBug> if ( SCTP_CID_SHUTDOWN_ACK == ch -> type ) <S2SV_EndBug> <S2SV_StartBug> ch = ( sctp_chunkhdr_t * ) ch_end ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( SCTP_CID_SHUTDOWN_ACK == ch -> type ) ootb_shut_ack = 1 ; if ( SCTP_CID_ABORT == ch -> type ) return sctp_sf_pdiscard ( net , ep , asoc , type , arg , commands ) ; if ( SCTP_CID_COOKIE_ACK == ch -> type ) ootb_cookie_ack = 1 ; if ( SCTP_CID_ERROR == ch -> type ) { sctp_walk_errors ( err , ch ) { if ( SCTP_ERROR_STALE_COOKIE == err -> cause ) { ootb_cookie_ack = 1 ; break ; } } } "
2865,"<S2SV_StartBug> up_read ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> snd_ctl_notify ( card , SNDRV_CTL_EVENT_MASK_TLV , & kctl -> id ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct snd_ctl_elem_id id = kctl -> id ; <S2SV_ModStart>  <S2SV_ModEnd> 
2866,"<S2SV_StartBug> printf ( ""%10d<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>FAT<S2SV_blank>(=<S2SV_blank>%u<S2SV_blank>sectors)\\n"" , fs -> fat_size , <S2SV_EndBug> <S2SV_StartBug> fs -> fat_size / lss ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%10lld<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>FAT<S2SV_blank>(=<S2SV_blank>%llu<S2SV_blank>sectors)\\n"" , ( long long ) <S2SV_ModEnd> <S2SV_ModStart> ( long long ) "
2867,"<S2SV_StartBug> if ( copy_from_user ( & u_ent . id , & uent -> id , sizeof ( u_ent . id ) ) ) <S2SV_EndBug> ","<S2SV_ModStart> memset ( & u_ent , 0 , sizeof ( u_ent ) ) ; "
2868,"<S2SV_StartBug> unsigned int maxw , maxh , max , i ; <S2SV_EndBug> <S2SV_StartBug> maxw = ( unsigned int ) img -> comps [ 0 ] . w ; maxh = ( unsigned int ) img -> comps [ 0 ] . h ; <S2SV_EndBug> <S2SV_StartBug> d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( r ) free ( r ) ; <S2SV_EndBug> ",<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> img -> color_space = OPJ_CLRSPC_SRGB ; <S2SV_ModStart> free ( r ) ; free ( g ) ; <S2SV_ModEnd> 
2869,"<S2SV_StartBug> sync . clock_rate = FST_RDL ( card , portConfig [ i ] . lineSpeed ) ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( & sync , 0 , sizeof ( sync ) ) ; "
2870,"<S2SV_StartBug> int chroma_planes , chroma_h_shift , chroma_v_shift , transparency ; <S2SV_EndBug> <S2SV_StartBug> f -> colorspace = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( f -> version > 0 ) <S2SV_EndBug> <S2SV_StartBug> f -> avctx -> bits_per_raw_sample = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> chroma_planes = get_rac ( c , state ) ; <S2SV_EndBug> <S2SV_StartBug> chroma_h_shift = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chroma_planes != f -> chroma_planes <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , colorspace , bits_per_raw_sample <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> bits_per_raw_sample = <S2SV_ModEnd> <S2SV_ModStart> ? get_symbol ( c , state , 0 ) : <S2SV_ModEnd> <S2SV_ModStart> ; chroma_planes = get_rac ( c , state ) ; chroma_h_shift <S2SV_ModStart> chroma_v_shift = get_symbol ( c , state , 0 ) ; transparency <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> colorspace != f -> colorspace || bits_per_raw_sample != f -> avctx -> bits_per_raw_sample || <S2SV_ModStart> f -> colorspace = colorspace ; f -> avctx -> bits_per_raw_sample = bits_per_raw_sample ; "
2871,<S2SV_StartBug> struct fscrypt_info * ci = inode -> i_crypt_info ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ci || <S2SV_EndBug> ,"<S2SV_ModStart> crypt_info ; struct fscrypt_context ctx ; struct crypto_skcipher * ctfm ; const char * cipher_str ; int keysize ; u8 * raw_key = NULL ; int res ; if ( <S2SV_ModEnd> <S2SV_ModStart> ) return 0 ; res = fscrypt_initialize ( inode -> i_sb -> s_cop -> flags ) ; if ( res ) return res <S2SV_ModStart> inode -> i_sb -> s_cop -> get_context ) return - EOPNOTSUPP ; res = inode -> i_sb -> s_cop -> get_context ( inode , & ctx , sizeof ( ctx ) ) ; if ( res < 0 ) { if ( ! fscrypt_dummy_context_enabled ( inode ) || inode -> i_sb -> s_cop -> is_encrypted ( inode ) ) return res ; memset ( & ctx , 0 , sizeof ( ctx ) ) ; ctx . format = FS_ENCRYPTION_CONTEXT_FORMAT_V1 ; ctx . contents_encryption_mode = FS_ENCRYPTION_MODE_AES_256_XTS ; ctx . filenames_encryption_mode = FS_ENCRYPTION_MODE_AES_256_CTS ; memset ( ctx . master_key_descriptor , 0x42 , FS_KEY_DESCRIPTOR_SIZE ) ; } else if ( res != sizeof ( ctx ) ) { return - EINVAL ; } if ( ctx . format != FS_ENCRYPTION_CONTEXT_FORMAT_V1 ) return - EINVAL ; if ( ctx . flags & ~ FS_POLICY_FLAGS_VALID ) return - EINVAL ; crypt_info = kmem_cache_alloc ( fscrypt_info_cachep , GFP_NOFS ) ; if ( ! crypt_info ) return - ENOMEM ; crypt_info -> ci_flags = ctx . flags ; crypt_info -> ci_data_mode = ctx . contents_encryption_mode ; crypt_info -> ci_filename_mode = ctx . filenames_encryption_mode ; crypt_info -> ci_ctfm = NULL ; memcpy ( crypt_info -> ci_master_key , ctx . master_key_descriptor , sizeof ( crypt_info -> ci_master_key ) ) ; res = determine_cipher_type ( crypt_info , inode , & cipher_str , & keysize ) ; if ( res ) goto out ; res = - ENOMEM ; raw_key = kmalloc ( FS_MAX_KEY_SIZE , GFP_NOFS ) ; if ( ! raw_key ) goto out ; res = validate_user_key ( crypt_info , & ctx , raw_key , FS_KEY_DESC_PREFIX ) ; if ( res && inode -> i_sb -> s_cop -> key_prefix ) { int res2 = validate_user_key ( crypt_info , & ctx , raw_key , inode -> i_sb -> s_cop -> key_prefix ) ; if ( res2 ) { if ( res2 == - ENOKEY ) res = - ENOKEY ; goto out ; } } else if ( res ) { goto out ; } ctfm = crypto_alloc_skcipher ( cipher_str , 0 , 0 ) ; if ( ! ctfm || IS_ERR ( ctfm ) ) { res = ctfm ? PTR_ERR ( ctfm ) : - ENOMEM ; printk ( KERN_DEBUG ""%s:<S2SV_blank>error<S2SV_blank>%d<S2SV_blank>(inode<S2SV_blank>%u)<S2SV_blank>allocating<S2SV_blank>crypto<S2SV_blank>tfm\\n"" , __func__ , res , ( unsigned ) inode -> i_ino ) ; goto out ; } crypt_info -> ci_ctfm = ctfm ; crypto_skcipher_clear_flags ( ctfm , ~ 0 ) ; crypto_skcipher_set_flags ( ctfm , CRYPTO_TFM_REQ_WEAK_KEY ) ; res = crypto_skcipher_setkey ( ctfm , raw_key , keysize ) ; if ( res ) goto out ; if ( cmpxchg ( & inode -> i_crypt_info , NULL , crypt_info ) == NULL ) crypt_info = NULL ; out : if ( res == - ENOKEY ) res = 0 ; put_crypt_info ( crypt_info ) ; kzfree ( raw_key ) ; return res <S2SV_ModEnd> "
2872,"<S2SV_StartBug> static void update_skip_probs ( VP9_COMMON * cm , vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> vp9_cond_prob_diff_update ( w , & cm -> fc . skip_probs [ k ] , cm -> counts . skip [ k ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_writer * w , FRAME_COUNTS * counts <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> "
2873,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , addr ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
2874,<S2SV_StartBug> touch_atime ( & path ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! IS_ERR ( raw ) ) 
2875,"<S2SV_StartBug> if ( ! state ) <S2SV_EndBug> <S2SV_StartBug> screen = vterm_allocator_malloc ( vt , sizeof ( VTermScreen ) ) ; <S2SV_EndBug> <S2SV_StartBug> vterm_state_set_callbacks ( screen -> state , & state_cbs , screen ) ; <S2SV_EndBug> ",<S2SV_ModStart> state == NULL <S2SV_ModEnd> <S2SV_ModStart> ; if ( screen == NULL ) return NULL <S2SV_ModStart> if ( screen -> buffer == NULL || screen -> sb_buffer == NULL ) { vterm_screen_free ( screen ) ; return NULL ; } 
2876,"<S2SV_StartBug> list_add ( & mnt -> mnt_list , & new_ns -> list ) ; <S2SV_EndBug> ",<S2SV_ModStart> new_ns -> mounts ++ ; 
2877,"<S2SV_StartBug> memcpy ( & payload [ j ] , msg -> buf , msg -> len ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( len < j + msg -> len + 1 ) { LM_ERR ( ""not<S2SV_blank>enough<S2SV_blank>space<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>sip<S2SV_blank>message\\n"" ) ; return - 1 ; } "
2878,<S2SV_StartBug> msg -> msg_namelen = sizeof ( * sipx ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( sipx ) { sipx -> sipx_family = AF_IPX ; sipx -> sipx_port = ipx -> ipx_source . sock ; memcpy ( sipx -> sipx_node , ipx -> ipx_source . node , IPX_NODE_LEN ) ; sipx -> sipx_network = IPX_SKB_CB ( skb ) -> ipx_source_net ; sipx -> sipx_type = ipx -> ipx_type ; sipx -> sipx_zero = 0 ; <S2SV_ModStart>  <S2SV_ModEnd> "
2879,<S2SV_StartBug> vhost_net_ubuf_put_and_wait ( oldubufs ) ; <S2SV_EndBug> <S2SV_StartBug> vhost_net_ubuf_put_and_wait ( ubufs ) ; <S2SV_EndBug> ,<S2SV_ModStart> vhost_net_ubuf_put_wait_and_free <S2SV_ModEnd> <S2SV_ModStart> vhost_net_ubuf_put_wait_and_free <S2SV_ModEnd> 
2880,"<S2SV_StartBug> size_t buf_size = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( iov , iovcnt , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> OE_RAISE_ERRNO ( OE_ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_sync ( iov , iovcnt , buf , buf_size ) != 0 ) <S2SV_EndBug> ","<S2SV_ModStart> = 0 ; size_t data_size <S2SV_ModStart> , & data_size <S2SV_ModStart> ) ; if ( data_size > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ret > ( ssize_t ) data_size ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( "
2881,<S2SV_StartBug> str_free ( b64 ) ; <S2SV_EndBug> ,<S2SV_ModStart> BIO_free <S2SV_ModEnd> 
2882,"<S2SV_StartBug> JAS_DBGLOG ( 101 , ( ""jas_malloc<S2SV_blank>called<S2SV_blank>with<S2SV_blank>%zu\\n"" , size ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""jas_malloc(%zu)\\n"" <S2SV_ModEnd> "
2883,<S2SV_StartBug> len = INT_MAX ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( unlikely ( ! access_ok ( VERIFY_READ , buff , len ) ) ) return - EFAULT "
2884,"<S2SV_StartBug> err = ops -> ieee_getets ( netdev , & ets ) ; <S2SV_EndBug> <S2SV_StartBug> err = ops -> ieee_getmaxrate ( netdev , & maxrate ) ; <S2SV_EndBug> <S2SV_StartBug> struct ieee_pfc pfc ; <S2SV_EndBug> <S2SV_StartBug> err = ops -> ieee_peer_getets ( netdev , & ets ) ; <S2SV_EndBug> <S2SV_StartBug> struct ieee_pfc pfc ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( & ets , 0 , sizeof ( ets ) ) ; <S2SV_ModStart> memset ( & maxrate , 0 , sizeof ( maxrate ) ) ; <S2SV_ModStart> ; memset ( & pfc , 0 , sizeof ( pfc ) ) <S2SV_ModStart> memset ( & ets , 0 , sizeof ( ets ) ) ; <S2SV_ModStart> ; memset ( & pfc , 0 , sizeof ( pfc ) ) "
2885,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2886,<S2SV_StartBug> c -> req -> res = NULL ; <S2SV_EndBug> ,"<S2SV_ModStart> memcpy ( c -> req -> remote , c -> remote , sizeof ( c -> remote ) ) ; "
2887,<S2SV_StartBug> WORD32 ret ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2888,<S2SV_StartBug> if ( ctx -> state == BODY_CHUNK_END ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> state = BODY_CHUNK ; <S2SV_EndBug> <S2SV_StartBug> return APR_EGENERAL ; <S2SV_EndBug> <S2SV_StartBug> ctx -> chunkbits = sizeof ( long ) * 8 ; <S2SV_EndBug> <S2SV_StartBug> if ( c == ';' || c == CR ) { <S2SV_EndBug> <S2SV_StartBug> else if ( c == LF ) { <S2SV_EndBug> <S2SV_StartBug> int xvalue = 0 ; <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> return APR_EGENERAL ; <S2SV_EndBug> <S2SV_StartBug> ctx -> chunkbits -= 4 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> || ctx -> state == BODY_CHUNK_END_LF <S2SV_ModStart> ; } else if ( c == CR && ctx -> state == BODY_CHUNK_END ) { ctx -> state = BODY_CHUNK_END_LF ; } else { return APR_EINVAL <S2SV_ModStart> APR_EINVAL <S2SV_ModEnd> <S2SV_ModStart> apr_off_t <S2SV_ModEnd> <S2SV_ModStart> LF ) { if ( ctx -> remaining ) { ctx -> state = BODY_CHUNK_DATA ; } else { ctx -> state = BODY_CHUNK_TRAILER ; } } else if ( ctx -> state == BODY_CHUNK_LF ) { return APR_EINVAL ; } else if ( c == CR ) { ctx -> state = BODY_CHUNK_LF ; } else if ( c == ';' <S2SV_ModEnd> <S2SV_ModStart> ctx -> state == BODY_CHUNK_EXT ) { if ( c != '\\t' && apr_iscntrl ( c ) ) { return APR_EINVAL ; } } else if ( ctx -> state == BODY_CHUNK_PART <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; } ctx -> chunkbits -= 4 ; if ( ctx -> chunkbits < 0 ) { return APR_ENOSPC <S2SV_ModStart> APR_EINVAL <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> } else { return APR_EGENERAL ; 
2889,"<S2SV_StartBug> int net ; <S2SV_EndBug> <S2SV_StartBug> CLIENT * client ; <S2SV_EndBug> <S2SV_StartBug> if ( ( net = accept ( sock , ( struct sockaddr * ) & addrin , & addrinlen ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> client = negotiate ( net , NULL , servers , NEG_INIT | NEG_MODERN ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> handle_modern_connection ( servers , sock ) ; } for ( i = 0 ; i < servers -> len ; i ++ ) { int net ; SERVER * serve ; serve = & ( g_array_index ( servers , SERVER , i ) ) ; if ( serve -> socket < 0 ) { continue ; } if ( FD_ISSET ( serve -> socket , & rset ) ) { <S2SV_ModEnd> <S2SV_ModStart> serve -> socket <S2SV_ModEnd> <S2SV_ModStart> handle_connection ( servers , net , serve , NULL <S2SV_ModEnd> "
2890,"<S2SV_StartBug> ! CU_add_test ( pSuite , ""session_removed_closed_stream"" , <S2SV_EndBug> ","<S2SV_ModStart> ""session_too_many_settings"" , test_nghttp2_session_too_many_settings ) || ! CU_add_test ( pSuite , "
2891,<S2SV_StartBug> WORD32 slice_address ; <S2SV_EndBug> <S2SV_StartBug> slice_header_t * ps_slice_hdr_next ; <S2SV_EndBug> <S2SV_StartBug> ps_codec -> i4_slice_error = 1 ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ,<S2SV_ModStart> ; WORD32 prev_slice_incomplete_flag = 0 <S2SV_ModStart> prev_slice_incomplete_flag = 1 <S2SV_ModEnd> <S2SV_ModStart> prev_slice_incomplete_flag = 1 ; ASSERT ( ps_codec -> s_parse . i4_cur_slice_idx == 1 ) <S2SV_ModEnd> <S2SV_ModStart> if ( prev_slice_incomplete_flag ) { ps_codec -> i4_slice_error = 1 ; ps_codec -> s_parse . i4_cur_slice_idx -- ; if ( ps_codec -> s_parse . i4_cur_slice_idx < 0 ) ps_codec -> s_parse . i4_cur_slice_idx = 0 ; } 
2892,"<S2SV_StartBug> eprintf ( ""Can\'t<S2SV_blank>find<S2SV_blank>debug<S2SV_blank>filename\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; return 1 ; } if ( ! is_valid_guid ( info -> guid ) ) { eprintf ( ""Invalid<S2SV_blank>GUID<S2SV_blank>for<S2SV_blank>file\\n"" "
2893,<S2SV_StartBug> if ( msg -> msg_name && msg -> msg_namelen > 0 ) <S2SV_EndBug> ,"<S2SV_ModStart> ) { size_t len = sizeof ( call -> conn -> trans -> peer -> srx ) ; memcpy ( msg -> msg_name , & call -> conn -> trans -> peer -> srx , len ) ; <S2SV_ModEnd> <S2SV_ModStart> = len ; } <S2SV_ModEnd> "
2894,"<S2SV_StartBug> virCheckDomainReturn ( dom , - 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; virCheckReadOnlyGoto ( dom -> conn -> flags , error "
2895,"<S2SV_StartBug> struct mount * n , * p ; <S2SV_EndBug> <S2SV_StartBug> if ( p == dest_master || IS_MNT_MARKED ( p ) ) { <S2SV_EndBug> ","<S2SV_ModStart> ; bool done <S2SV_ModStart> break ; } do { struct mount * parent = last_source -> mnt_parent ; if ( last_source == first_source ) break ; done = parent -> mnt_master == p ; if ( done && peers ( n , parent ) ) break ; last_source = last_source -> mnt_master ; } while ( ! done ) ; <S2SV_ModEnd> "
2896,<S2SV_StartBug> disconnect = ! IS_MNT_LOCKED_AND_LAZY ( p ) ; <S2SV_EndBug> ,<S2SV_ModStart> ( ( ( how & UMOUNT_CONNECTED ) && mnt_has_parent ( p ) && ( p -> mnt_parent -> mnt . mnt_flags & MNT_UMOUNT ) ) || <S2SV_ModStart> ) 
2897,"<S2SV_StartBug> pr_err ( ""Underflows<S2SV_blank>must<S2SV_blank>be<S2SV_blank>unconditional<S2SV_blank>and<S2SV_blank>"" <S2SV_EndBug> ",<S2SV_ModStart> pr_debug <S2SV_ModEnd> 
2898,"<S2SV_StartBug> static inline void jmp_rel ( struct x86_emulate_ctxt * ctxt , int rel ) <S2SV_EndBug> <S2SV_StartBug> assign_eip_near ( ctxt , ctxt -> _eip + rel ) ; <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return 
2899,"<S2SV_StartBug> struct ext4_extent * ex , newex , orig_ex ; <S2SV_EndBug> <S2SV_StartBug> struct ext4_extent * ex1 = NULL ; <S2SV_EndBug> <S2SV_StartBug> ext4_fsblk_t newblock ; <S2SV_EndBug> <S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> eh = path [ depth ] . p_hdr ; <S2SV_EndBug> <S2SV_StartBug> newblock = map -> m_lblk - ee_block + ext4_ext_pblock ( ex ) ; <S2SV_EndBug> <S2SV_StartBug> may_zeroout = ee_block + ee_len <= eof_block ; <S2SV_EndBug> <S2SV_StartBug> if ( ee_len <= 2 * EXT4_EXT_ZERO_LEN && may_zeroout ) { <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_zeroout ( inode , & orig_ex ) ; <S2SV_EndBug> <S2SV_StartBug> goto fix_extent_len ; <S2SV_EndBug> <S2SV_StartBug> return allocated ; <S2SV_EndBug> <S2SV_StartBug> if ( allocated <= EXT4_EXT_ZERO_LEN && may_zeroout ) { <S2SV_EndBug> <S2SV_StartBug> ex -> ee_len = cpu_to_le16 ( ee_len - allocated ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_ext_store_pblock ( ex , ext4_ext_pblock ( & orig_ex ) ) ; <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_zeroout ( inode , & orig_ex ) ; <S2SV_EndBug> <S2SV_StartBug> goto fix_extent_len ; <S2SV_EndBug> <S2SV_StartBug> } else if ( err ) <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_zeroout ( inode , ex3 ) ; <S2SV_EndBug> <S2SV_StartBug> eh = path [ depth ] . p_hdr ; <S2SV_EndBug> <S2SV_StartBug> if ( err == - ENOSPC && may_zeroout ) { <S2SV_EndBug> <S2SV_StartBug> ext4_ext_show_leaf ( inode , path ) ; <S2SV_EndBug> <S2SV_StartBug> return err ? err : allocated ; <S2SV_EndBug> ","<S2SV_ModStart> ext4_map_blocks split_map ; struct ext4_extent zero_ex <S2SV_ModEnd> <S2SV_ModStart> ex <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> split_flag = 0 <S2SV_ModEnd> <S2SV_ModStart> ex <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> WARN_ON ( map -> m_lblk < ee_block ) ; split_flag |= <S2SV_ModEnd> <S2SV_ModStart> ? EXT4_EXT_MAY_ZEROOUT : 0 <S2SV_ModEnd> <S2SV_ModStart> ( EXT4_EXT_MAY_ZEROOUT & split_flag ) <S2SV_ModEnd> <S2SV_ModStart> ex <S2SV_ModEnd> <S2SV_ModStart> out ; err = ext4_ext_get_access ( handle , inode , path + depth ) ; if ( err ) goto out ; ext4_ext_mark_initialized ( ex ) ; ext4_ext_try_to_merge ( inode , path , ex ) ; err = <S2SV_ModEnd> <S2SV_ModStart> goto out ; } split_map . m_lblk = map -> m_lblk ; split_map . m_len = map -> m_len ; if ( allocated > map -> m_len ) { <S2SV_ModEnd> <S2SV_ModStart> ( EXT4_EXT_MAY_ZEROOUT & split_flag ) ) { zero_ex . ee_block = cpu_to_le32 ( map -> m_lblk + map -> m_len ) ; zero_ex . <S2SV_ModEnd> <S2SV_ModStart> allocated - map -> m_len <S2SV_ModEnd> <S2SV_ModStart> & zero_ex , ext4_ext_pblock ( ex ) + map -> m_lblk - ee_block ) ; <S2SV_ModEnd> <S2SV_ModStart> zero_ex <S2SV_ModEnd> <S2SV_ModStart> out ; split_map . m_lblk = map -> m_lblk ; split_map . m_len = <S2SV_ModEnd> <S2SV_ModStart> ( map -> m_lblk - ee_block + map -> m_len < EXT4_EXT_ZERO_LEN ) && ( EXT4_EXT_MAY_ZEROOUT & split_flag ) ) { if ( map -> m_lblk != ee_block ) { zero_ex . ee_block = ex -> ee_block ; zero_ex . ee_len = cpu_to_le16 ( map -> m_lblk - ee_block ) ; ext4_ext_store_pblock ( & zero_ex , ext4_ext_pblock ( ex ) ) <S2SV_ModEnd> <S2SV_ModStart> & zero_ex ) ; if ( err ) <S2SV_ModEnd> <S2SV_ModStart> allocated = map -> m_lblk - ee_block + map -> m_len ; split_map . m_lblk = ee_block ; split_map . m_len = allocated ; } } allocated = ext4_split_extent ( handle , inode , path , & split_map , split_flag <S2SV_ModEnd> <S2SV_ModStart> allocated < 0 ) err = allocated <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2900,"<S2SV_StartBug> return parsetok ( tok , g , start , err_ret , flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( * flags & PyPARSE_ASYNC_ALWAYS ) tok -> async_always = 1 ; 
2901,<S2SV_StartBug> if ( ! prev_pkt [ channel_id ] . read ) { <S2SV_EndBug> ,"<S2SV_ModStart> prev_pkt [ channel_id ] . read && size != prev_pkt [ channel_id ] . size ) { av_log ( NULL , AV_LOG_ERROR , ""RTMP<S2SV_blank>packet<S2SV_blank>size<S2SV_blank>mismatch<S2SV_blank>%d<S2SV_blank>!=<S2SV_blank>%d\\n"" , size , prev_pkt [ channel_id ] . size ) ; ff_rtmp_packet_destroy ( & prev_pkt [ channel_id ] ) ; prev_pkt [ channel_id ] . read = 0 ; } if ( "
2902,"<S2SV_StartBug> static VALUE read_memory ( VALUE klass , VALUE content ) <S2SV_EndBug> <S2SV_StartBug> ) ; <S2SV_EndBug> <S2SV_StartBug> VALUE errors = rb_ary_new ( ) ; <S2SV_EndBug> <S2SV_StartBug> return rb_schema ; <S2SV_EndBug> ","<S2SV_ModStart> int argc , VALUE * argv , VALUE klass ) { VALUE content ; VALUE parse_options ; xmlRelaxNGParserCtxtPtr ctx ; xmlRelaxNGPtr schema ; VALUE errors ; VALUE rb_schema ; int scanned_args = 0 ; scanned_args = rb_scan_args ( argc , argv , ""11"" , & content , & parse_options ) ; if ( scanned_args == 1 ) { parse_options = rb_const_get ( rb_const_get ( mNokogiriXml , rb_intern ( ""ParseOptions"" ) ) , rb_intern ( ""DEFAULT_SCHEMA"" ) ) ; } ctx <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rb_iv_set ( rb_schema , ""@parse_options"" , parse_options ) ; "
2903,<S2SV_StartBug> case '+' : <S2SV_EndBug> <S2SV_StartBug> else if ( * string == 0 ) <S2SV_EndBug> ,<S2SV_ModStart> '/' : if ( open ) open = 0 ; case <S2SV_ModStart> open && * string == '/' ) { string ++ ; continue ; } else if ( 
2904,"<S2SV_StartBug> memcpy ( bss_cfg -> rates , rate_ie + 1 , rate_ie -> len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rate_ie ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( bss_cfg -> rates + rate_len , rate_ie + 1 , rate_ie -> len ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( rate_ie -> len > MWIFIEX_SUPPORTED_RATES ) return ; <S2SV_ModStart> { if ( rate_ie -> len > MWIFIEX_SUPPORTED_RATES - rate_len ) return ; <S2SV_ModStart> } 
2905,"<S2SV_StartBug> pfkey_broadcast ( skb , GFP_ATOMIC , BROADCAST_ALL , NULL , c -> net ) ; <S2SV_EndBug> ",<S2SV_ModStart> hdr -> sadb_msg_reserved = 0 ; 
2906,"<S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MIREGADR , MIREGADR_R8 | address ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MICMD , MICMD_MIIRD ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( enc624j600ReadReg ( interface , ENC624J600_REG_MISTAT ) & MISTAT_BUSY ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MICMD , 0x00 ) ; <S2SV_EndBug> <S2SV_StartBug> return enc624j600ReadReg ( interface , ENC624J600_REG_MIRD ) ; <S2SV_EndBug> ","<S2SV_ModStart> uint16_t status ; <S2SV_ModStart> ENC624J600_MIREGADR , ENC624J600_MIREGADR_R12_8_DEFAULT <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MICMD , ENC624J600_MICMD_MIIRD <S2SV_ModEnd> <S2SV_ModStart> do { status = <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MISTAT ) ; } while ( ( status & ENC624J600_MISTAT_BUSY <S2SV_ModEnd> <S2SV_ModStart> ; <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MICMD <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MIRD <S2SV_ModEnd> "
2907,"<S2SV_StartBug> ( * respond ) ( arg , 0 , NULL , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> ( * respond ) ( arg , 0 , NULL , NULL , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart> EINVAL <S2SV_ModEnd> <S2SV_ModStart> EINVAL <S2SV_ModEnd> 
2908,"<S2SV_StartBug> static u32 ip6_proxy_idents_hashrnd __read_mostly ; <S2SV_EndBug> <S2SV_StartBug> net_get_random_once ( & ip6_proxy_idents_hashrnd , <S2SV_EndBug> <S2SV_StartBug> id = __ipv6_select_ident ( net , ip6_proxy_idents_hashrnd , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2909,"<S2SV_StartBug> int64_t time , offset ; <S2SV_EndBug> ",<S2SV_ModStart> if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; } 
2910,<S2SV_StartBug> dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug> ,<S2SV_ModStart> ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> 
2911,"<S2SV_StartBug> opj_write_bytes ( p_data , J2K_MS_SOD , <S2SV_EndBug> ","<S2SV_ModStart> if ( p_total_data_size < 4 ) { opj_event_msg ( p_manager , EVT_ERROR , ""Not<S2SV_blank>enough<S2SV_blank>bytes<S2SV_blank>in<S2SV_blank>output<S2SV_blank>buffer<S2SV_blank>to<S2SV_blank>write<S2SV_blank>SOD<S2SV_blank>marker\\n"" ) ; return OPJ_FALSE ; } "
2912,"<S2SV_StartBug> perror ( ""malloc<S2SV_blank>(ret)"" ) ; <S2SV_EndBug> <S2SV_StartBug> image_infos = ( struct dyld_cache_image_info * ) ( bin -> b -> buf + bin -> hdr . startaddr ) ; <S2SV_EndBug> <S2SV_StartBug> dyld_vmbase = * ( ut64 * ) ( bin -> b -> buf + bin -> hdr . baseaddroff ) ; <S2SV_EndBug> <S2SV_StartBug> if ( image_infos [ idx ] . pathFileOffset > bin -> size ) { <S2SV_EndBug> <S2SV_StartBug> eprintf ( ""corrupted<S2SV_blank>file\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> libname = ( char * ) ( bin -> b -> buf + image_infos [ idx ] . pathFileOffset ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int sz = bin -> nlibs * sizeof ( struct dyld_cache_image_info ) ; image_infos = malloc ( sz ) ; if ( ! image_infos ) { free ( ret ) ; return NULL ; } r_buf_read_at <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , ( ut8 * ) image_infos , sz <S2SV_ModStart> r_buf_read64le <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> int pfo = <S2SV_ModEnd> <S2SV_ModStart> ; if ( pfo < 0 || pfo <S2SV_ModStart> ""corrupted<S2SV_blank>file:<S2SV_blank>pathFileOffset<S2SV_blank>><S2SV_blank>bin->size<S2SV_blank>(%d)\\n"" , pfo <S2SV_ModEnd> <S2SV_ModStart> r_buf_read_string <S2SV_ModEnd> <S2SV_ModStart> , pfo , 64 <S2SV_ModEnd> "
2913,"<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( image -> columns , <S2SV_EndBug> ","<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
2914,"<S2SV_StartBug> int length ; <S2SV_EndBug> <S2SV_StartBug> STREAM s ; <S2SV_EndBug> <S2SV_StartBug> ber_parse_header ( s , MCS_CONNECT_RESPONSE , & length ) ; <S2SV_EndBug> <S2SV_StartBug> mcs_parse_domain_params ( s ) ; <S2SV_EndBug> ","<S2SV_ModStart> uint32 <S2SV_ModEnd> <S2SV_ModStart> ; struct stream packet <S2SV_ModStart> packet = * s ; <S2SV_ModStart> if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(),<S2SV_blank>consume<S2SV_blank>connect<S2SV_blank>id<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } "
2915,<S2SV_StartBug> e . ifindex = port -> dev -> ifindex ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & e , 0 , sizeof ( e ) ) ; "
2916,<S2SV_StartBug> value = ( unsigned short ) ( buffer [ 0 ] << 8 ) ; <S2SV_EndBug> <S2SV_StartBug> value |= buffer [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffff ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( unsigned short ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2917,"<S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT0 , hashTable [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT1 , hashTable [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT2 , hashTable [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT3 , hashTable [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT4 , hashTable [ 4 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT5 , hashTable [ 5 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT6 , hashTable [ 6 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT7 , hashTable [ 7 ] ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT0<S2SV_blank>=<S2SV_blank>%02"" PRIX8 ""\\r\\n"" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT1<S2SV_blank>=<S2SV_blank>%02"" PRIX8 ""\\r\\n"" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT2<S2SV_blank>=<S2SV_blank>%02"" PRIX8 ""\\r\\n"" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT3<S2SV_blank>=<S2SV_blank>%02"" PRIX8 ""\\r\\n"" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT3 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT0<S2SV_blank>=<S2SV_blank>%02"" PRIX8 ""\\r\\n"" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT4 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT1<S2SV_blank>=<S2SV_blank>%02"" PRIX8 ""\\r\\n"" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT5 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT2<S2SV_blank>=<S2SV_blank>%02"" PRIX8 ""\\r\\n"" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT6 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>EHT3<S2SV_blank>=<S2SV_blank>%02"" PRIX8 ""\\r\\n"" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT7 ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> ENC28J60_EHT0 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT1 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT2 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT3 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT4 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT5 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT6 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT7 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT0 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT1 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT2 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT3 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT4 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT5 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT6 <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_EHT7 <S2SV_ModEnd> 
2918,"<S2SV_StartBug> char * sockaddr_url , * stratum_port , * tmp ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_disable_client_reconnect ) { <S2SV_EndBug> <S2SV_StartBug> url = ( char * ) json_string_value ( json_array_get ( val , 0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( address , ""%s:%s"" , url , port ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( opt_disable_client_reconnect ) { applog ( LOG_WARNING , ""Stratum<S2SV_blank>client.reconnect<S2SV_blank>received<S2SV_blank>but<S2SV_blank>is<S2SV_blank>disabled,<S2SV_blank>not<S2SV_blank>reconnecting."" ) ; return false ; } <S2SV_ModEnd> <S2SV_ModStart> char * sockaddr_url , * stratum_port , * tmp ; url = ( char * ) json_string_value ( json_array_get ( val , 0 ) ) ; if ( ! url ) url = pool -> sockaddr_url ; port <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> snprintf ( address , sizeof ( address ) <S2SV_ModEnd> "
2919,<S2SV_StartBug> goto out ; <S2SV_EndBug> ,<S2SV_ModStart> out2 <S2SV_ModEnd> 
2920,<S2SV_StartBug> subobj_len = EXTRACT_16BITS ( obj_tptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( subobj_len == 0 ) <S2SV_EndBug> ,<S2SV_ModStart> if ( total_subobj_len < 4 ) goto invalid ; <S2SV_ModStart> < 4 || subobj_len > total_subobj_len <S2SV_ModEnd> 
2921,<S2SV_StartBug> if ( REMAIN > INT_MAX ) <S2SV_EndBug> ,<S2SV_ModStart> == 0 || REMAIN 
2922,"<S2SV_StartBug> if ( disk != NULL ) { <S2SV_EndBug> <S2SV_StartBug> const int blocksize = 512 ; <S2SV_EndBug> <S2SV_StartBug> if ( bio ) iob = bio ; <S2SV_EndBug> <S2SV_StartBug> ret = iob -> read_at ( iob -> io , delta + ( blocksize * sector ) , <S2SV_EndBug> <S2SV_StartBug> ( ut8 * ) buf , size * blocksize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret == - 1 ) <S2SV_EndBug> <S2SV_StartBug> } else eprintf ( ""oops.<S2SV_blank>no<S2SV_blank>disk\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ! disk ) { eprintf ( ""oops.<S2SV_blank>no<S2SV_blank>disk\\n"" ) ; return 1 ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart>  <S2SV_ModEnd> "
2923,"<S2SV_StartBug> sas_unregister_dev ( port , dev ) ; <S2SV_EndBug> ",<S2SV_ModStart> ) ; sas_destruct_devices ( port 
2924,<S2SV_StartBug> ps_dec -> u2_total_mbs_coded ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( u1_tfr_n_mb ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ps_dec -> u2_total_mbs_coded += u1_num_mbs ; 
2925,<S2SV_StartBug> buffer = malloc ( ( uint64_t ) msg . sct . length + 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2926,"<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_lineno ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_lineno ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_int ( tmp , & lineno , arena ) ; <S2SV_EndBug> <S2SV_StartBug> if ( res != 0 ) goto failed ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> ","<S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""lineno\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>TypeIgnore"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_int ( tmp , & lineno , arena ) ; if ( res != 0 <S2SV_ModEnd> <S2SV_ModStart> Py_CLEAR ( tmp ) ; } * out = TypeIgnore ( <S2SV_ModEnd> <S2SV_ModStart> * out == NULL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2927,"<S2SV_StartBug> printf ( ""Using<S2SV_blank>%s\\n"" , vpx_codec_iface_name ( decoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_dec_init ( & codec , decoder -> interface ( ) , NULL , 0 ) ) <S2SV_EndBug> ",<S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> codec_interface <S2SV_ModEnd> 
2928,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_INCAPABLE ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( void ) ctx ; ( void ) args ; 
2929,<S2SV_StartBug> ACPI_FUNCTION_TRACE ( NsTerminate ) ; <S2SV_EndBug> <S2SV_StartBug> ACPI_OPERAND_OBJECT * Next ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; ACPI_FUNCTION_TRACE ( NsTerminate ) <S2SV_ModStart>  <S2SV_ModEnd> 
2930,<S2SV_StartBug> uint_t i ; <S2SV_EndBug> <S2SV_StartBug> if ( ( segment -> dataOffset * 4 + length ) > TCP_MAX_HEADER_LENGTH ) <S2SV_EndBug> <S2SV_StartBug> i = segment -> dataOffset * 4 - sizeof ( TcpHeader ) ; <S2SV_EndBug> <S2SV_StartBug> segment -> options [ i ++ ] = TCP_OPTION_NOP ; <S2SV_EndBug> <S2SV_StartBug> option = ( TcpOption * ) ( segment -> options + i ) ; <S2SV_EndBug> <S2SV_StartBug> return NO_ERROR ; <S2SV_EndBug> ,<S2SV_ModStart> error_t error ; size_t <S2SV_ModEnd> <S2SV_ModStart> <= TCP_MAX_HEADER_LENGTH ) { i = ( <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> error = NO_ERROR ; } else { error = ERROR_FAILURE ; } return error <S2SV_ModEnd> 
2931,"<S2SV_StartBug> return crypto_skcipher_setkey ( private , key , keylen ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> struct skcipher_tfm * tfm = private ; int err ; err = crypto_skcipher_setkey ( tfm -> skcipher <S2SV_ModEnd> <S2SV_ModStart> tfm -> has_key = ! err ; return err ; 
2932,<S2SV_StartBug> if ( bt_terminal ( wp -> w_buffer ) ) <S2SV_EndBug> ,<S2SV_ModStart> curwin <S2SV_ModEnd> 
2933,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> [ plane ] && in -> linesize 
2934,"<S2SV_StartBug> struct twopass_rc * const twopass = & cpi -> twopass ; <S2SV_EndBug> <S2SV_StartBug> const FIRSTPASS_STATS * start_position = twopass -> stats_in ; <S2SV_EndBug> <S2SV_StartBug> double decay_accumulator = 1.0 ; <S2SV_EndBug> <S2SV_StartBug> rc -> this_key_frame_forced = rc -> next_key_frame_forced ; <S2SV_EndBug> <S2SV_StartBug> rc -> frames_till_gf_update_due = 0 ; <S2SV_EndBug> <S2SV_StartBug> kf_mod_err = calculate_modified_err ( cpi , this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> while ( twopass -> stats_in < twopass -> stats_in_end ) { <S2SV_EndBug> <S2SV_StartBug> kf_group_err += calculate_modified_err ( cpi , this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> lookup_next_frame_stats ( twopass , & next_frame ) != EOF ) { <S2SV_EndBug> <S2SV_StartBug> if ( test_candidate_kf ( twopass , & last_frame , this_frame , & next_frame ) ) <S2SV_EndBug> <S2SV_StartBug> loop_decay_rate = get_prediction_decay_rate ( & cpi -> common , & next_frame ) ; <S2SV_EndBug> <S2SV_StartBug> if ( detect_transition_to_still ( twopass , i , cpi -> key_frame_frequency - i , <S2SV_EndBug> <S2SV_StartBug> if ( rc -> frames_to_key >= 2 * ( int ) cpi -> key_frame_frequency ) <S2SV_EndBug> <S2SV_StartBug> rc -> frames_to_key > ( int ) cpi -> key_frame_frequency ) { <S2SV_EndBug> <S2SV_StartBug> kf_group_err = 0 ; <S2SV_EndBug> <S2SV_StartBug> kf_group_err += calculate_modified_err ( cpi , & tmp_frame ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( twopass -> stats_in == twopass -> stats_in_end ) { <S2SV_EndBug> <S2SV_StartBug> if ( twopass -> stats_in >= twopass -> stats_in_end ) { <S2SV_EndBug> <S2SV_StartBug> kf_group_err += calculate_modified_err ( cpi , this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> reset_fpf_position ( twopass , start_position ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < rc -> frames_to_key ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( next_frame . pcnt_inter - next_frame . pcnt_motion ) < <S2SV_EndBug> <S2SV_StartBug> if ( i <= ( rc -> max_gf_interval * 2 ) ) { <S2SV_EndBug> <S2SV_StartBug> const double loop_decay_rate = get_prediction_decay_rate ( & cpi -> common , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> boost_score += ( decay_accumulator * r ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < rc -> frames_to_key ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> twopass -> section_intra_rating = ( int ) ( sectionstats . intra_error / <S2SV_EndBug> <S2SV_StartBug> kf_boost = ( rc -> frames_to_key * 3 ) ; <S2SV_EndBug> <S2SV_StartBug> allocation_chunks = ( ( rc -> frames_to_key - 1 ) * 10 ) + kf_boost ; <S2SV_EndBug> <S2SV_StartBug> allocation_chunks = ( ( rc -> frames_to_key - 1 ) * 100 ) + kf_boost ; <S2SV_EndBug> <S2SV_StartBug> twopass -> kf_group_bits -= twopass -> kf_bits ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> TWO_PASS <S2SV_ModEnd> <S2SV_ModStart> ; GF_GROUP * const gf_group = & twopass -> gf_group ; const VP9EncoderConfig * const oxcf = & cpi -> oxcf <S2SV_ModStart> const <S2SV_ModStart> int kf_bits = 0 ; int loop_decay_counter = 0 ; <S2SV_ModStart> ; double av_decay_accumulator = 0.0 <S2SV_ModStart> vp9_zero ( * gf_group ) ; <S2SV_ModStart> cpi -> multi_arf_last_grp_enabled = 0 ; <S2SV_ModStart> , twopass , oxcf <S2SV_ModStart> && rc -> frames_to_key < cpi -> oxcf . key_freq <S2SV_ModStart> twopass , oxcf , <S2SV_ModStart> twopass -> stats_in < twopass -> stats_in_end <S2SV_ModEnd> <S2SV_ModStart> twopass -> stats_in <S2SV_ModEnd> <S2SV_ModStart> cpi , twopass -> stats_in <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> oxcf . key_freq <S2SV_ModEnd> <S2SV_ModStart> cpi -> oxcf . key_freq <S2SV_ModEnd> <S2SV_ModStart> cpi -> oxcf . key_freq <S2SV_ModEnd> <S2SV_ModStart> 0.0 <S2SV_ModEnd> <S2SV_ModStart> twopass , oxcf , <S2SV_ModStart> || rc -> frames_to_key >= cpi -> oxcf . key_freq <S2SV_ModStart> is_two_pass_svc ( cpi ) && cpi -> svc . number_temporal_layers > 1 ) { int count = ( 1 << ( cpi -> svc . number_temporal_layers - 1 ) ) - 1 ; int new_frame_to_key = ( rc -> frames_to_key + count ) & ( ~ count ) ; int j ; for ( j = 0 ; j < new_frame_to_key - rc -> frames_to_key ; ++ j ) { if ( EOF == input_stats ( twopass , this_frame ) ) break ; <S2SV_ModEnd> <S2SV_ModStart> twopass , oxcf , this_frame ) ; } rc -> frames_to_key = new_frame_to_key ; } if ( twopass -> stats_in >= twopass -> stats_in_end ) { kf_group_err += calculate_modified_err ( cpi , twopass , oxcf , <S2SV_ModStart> twopass -> kf_group_bits = MAX ( 0 , twopass -> kf_group_bits ) ; <S2SV_ModStart> ( rc -> frames_to_key - 1 ) <S2SV_ModEnd> <S2SV_ModStart> zero_motion_accumulator = MIN ( zero_motion_accumulator , get_zero_motion_factor ( cpi , & next_frame ) ) ; if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) || ( ( i <= ( rc -> max_gf_interval * 4 ) ) && ( decay_accumulator > 0.5 ) ) ) { const double frame_boost = calc_frame_boost ( cpi , this_frame , 0 , KF_MAX_BOOST ) <S2SV_ModEnd> <S2SV_ModStart> cpi , <S2SV_ModEnd> <S2SV_ModStart> av_decay_accumulator += decay_accumulator ; ++ loop_decay_counter ; <S2SV_ModStart> frame_boost ) ; } } av_decay_accumulator /= ( double ) loop_decay_counter <S2SV_ModEnd> <S2SV_ModStart> twopass -> kf_zeromotion_pct = ( int ) ( zero_motion_accumulator * 100.0 <S2SV_ModEnd> <S2SV_ModStart> calculate_section_intra_ratio ( start_position , twopass -> stats_in_end , rc -> frames_to_key ) ; rc -> kf_boost = <S2SV_ModStart> av_decay_accumulator * boost_score ) ; rc -> kf_boost = MAX ( rc -> kf_boost , <S2SV_ModEnd> <S2SV_ModStart> ; rc -> kf_boost = MAX ( rc -> kf_boost , MIN_KF_BOOST ) ; kf_bits = calculate_boost_bits <S2SV_ModEnd> <S2SV_ModStart> , rc -> kf_boost , twopass -> kf_group_bits ) ; if ( twopass -> kf_group_bits ) { twopass -> kfgroup_inter_fraction = ( double ) ( twopass -> kf_group_bits - kf_bits ) / ( double ) twopass -> kf_group_bits <S2SV_ModEnd> <S2SV_ModStart> twopass -> kfgroup_inter_fraction = 1.0 <S2SV_ModEnd> <S2SV_ModStart> kf_bits ; gf_group -> bit_allocation [ 0 ] = kf_bits ; gf_group -> update_type [ 0 ] = KF_UPDATE ; gf_group -> rf_level [ 0 ] = KF_STD ; <S2SV_ModEnd> <S2SV_ModStart> if ( oxcf -> resize_mode == RESIZE_DYNAMIC ) { cpi -> rc . next_frame_size_selector = UNSCALED ; } "
2935,"<S2SV_StartBug> static inline bool unconditional ( const struct ip6t_ip6 * ipv6 ) <S2SV_EndBug> <S2SV_StartBug> return memcmp ( ipv6 , & uncond , sizeof ( uncond ) ) == 0 ; <S2SV_EndBug> ",<S2SV_ModStart> ip6t_entry * e <S2SV_ModEnd> <S2SV_ModStart> e -> target_offset == sizeof ( struct ip6t_entry ) && memcmp ( & e -> <S2SV_ModEnd> 
2936,<S2SV_StartBug> if ( i > ( sizeof ( outbuff ) - 20 ) ) { <S2SV_EndBug> ,<S2SV_ModStart> 128 <S2SV_ModEnd> 
2937,"<S2SV_StartBug> assert ( pow ( ( float ) r + 1 , dim ) > entries ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( ( int ) floor ( pow ( ( float ) r , dim ) ) <= entries ) ; <S2SV_EndBug> ",<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> <= entries ) return - 1 ; if <S2SV_ModEnd> <S2SV_ModStart> > entries ) return - 1 <S2SV_ModEnd> 
2938,"<S2SV_StartBug> sctp_add_cmd_sf ( commands , SCTP_CMD_NEW_ASOC , SCTP_ASOC ( new_asoc ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> SCTP_CMD_SET_ASOC <S2SV_ModEnd> 
2939,"<S2SV_StartBug> nego_process_negotiation_response ( nego , s ) ; <S2SV_EndBug> <S2SV_StartBug> nego_process_negotiation_failure ( nego , s ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! <S2SV_ModStart> ) return - 1 <S2SV_ModStart> if ( ! <S2SV_ModStart> ) return - 1 
2940,<S2SV_StartBug> int max_plane ) { <S2SV_EndBug> <S2SV_StartBug> struct macroblock_plane * const p = x -> plane ; <S2SV_EndBug> <S2SV_StartBug> struct macroblockd_plane * const pd = x -> e_mbd . plane ; <S2SV_EndBug> <S2SV_StartBug> p [ i ] . coeff = ctx -> coeff_pbuf [ i ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> p [ i ] . qcoeff = ctx -> qcoeff_pbuf [ i ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> pd [ i ] . dqcoeff = ctx -> dqcoeff_pbuf [ i ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> p [ i ] . eobs = ctx -> eobs_pbuf [ i ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> ctx -> qcoeff_pbuf [ i ] [ 0 ] = p [ i ] . qcoeff ; <S2SV_EndBug> <S2SV_StartBug> ctx -> dqcoeff_pbuf [ i ] [ 0 ] = pd [ i ] . dqcoeff ; <S2SV_EndBug> <S2SV_StartBug> ctx -> eobs_pbuf [ i ] [ 0 ] = p [ i ] . eobs ; <S2SV_EndBug> ,"<S2SV_ModStart> m , int n , int min_plane , int <S2SV_ModStart> int i ; for ( i = min_plane ; i < max_plane ; ++ i ) { <S2SV_ModStart> & <S2SV_ModStart> [ i ] <S2SV_ModStart> & <S2SV_ModStart> [ i ] ; p -> <S2SV_ModEnd> <S2SV_ModStart> m ] ; p -> <S2SV_ModEnd> <S2SV_ModStart> m <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> m ] ; p -> <S2SV_ModEnd> <S2SV_ModStart> m ] ; ctx -> coeff_pbuf [ i ] [ m ] = ctx -> coeff_pbuf [ i ] [ n ] ; ctx -> qcoeff_pbuf [ i ] [ m ] = ctx -> qcoeff_pbuf [ i ] [ n ] ; ctx -> dqcoeff_pbuf [ i ] [ m ] = ctx -> dqcoeff_pbuf [ i ] [ n ] ; ctx -> eobs_pbuf [ i ] [ m ] = ctx -> eobs_pbuf [ i ] [ n ] ; ctx -> coeff_pbuf [ i ] [ n ] = p -> <S2SV_ModEnd> <S2SV_ModStart> n ] = p -> <S2SV_ModEnd> <S2SV_ModStart> n <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> n ] = p -> <S2SV_ModEnd> "
2941,"<S2SV_StartBug> memset ( mp4 , 0 , sizeof ( mp4object ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( len == 8 ) <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , lastsize - 8 - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> fread ( & qtsize , 1 , 8 , mp4 -> mediafp ) ; <S2SV_EndBug> <S2SV_StartBug> qttag == MAKEID ( 'u' , 'd' , 't' , 'a' ) ) <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 'a' , 'l' , 'i' , 's' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 'a' , 'l' , 'i' , 's' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 's' , 't' , 'b' , 'l' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 's' , 't' , 't' , 's' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 's' , 't' , 's' , 'c' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 's' , 't' , 's' , 'z' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 's' , 't' , 'c' , 'o' ) && <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( temp != MAKEID ( 'a' , 'l' , 'i' , 's' ) ) <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> mp4 -> metastsc = ( SampleToChunk * ) malloc ( num * 12 ) ; <S2SV_EndBug> <S2SV_StartBug> uint32_t total_stsc = num ; <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> metastsc_count == 1 && mp4 -> metastsc [ 0 ] . samples == 1 ) <S2SV_EndBug> <S2SV_StartBug> mp4 -> metastsc_count = 0 ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> mp4 -> metasizes = ( uint32_t * ) malloc ( num * 4 ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> metastsc_count > 0 && num != mp4 -> metasize_count ) <S2SV_EndBug> <S2SV_StartBug> mp4 -> indexcount = mp4 -> metasize_count ; <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> metaoffsets ) free ( mp4 -> metaoffsets ) ; <S2SV_EndBug> <S2SV_StartBug> mp4 -> metaoffsets = ( uint64_t * ) malloc ( mp4 -> metasize_count * 8 ) ; <S2SV_EndBug> <S2SV_StartBug> while ( num < mp4 -> metasize_count ) <S2SV_EndBug> <S2SV_StartBug> stco_pos ++ ; <S2SV_EndBug> <S2SV_StartBug> repeat = 1 ; <S2SV_EndBug> <S2SV_StartBug> repeat ++ ; <S2SV_EndBug> <S2SV_StartBug> mp4 -> indexcount = num ; <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> metaoffsets ) free ( mp4 -> metaoffsets ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( num * 8 <= qtsize - 8 - len ) <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> metaoffsets ) free ( mp4 -> metaoffsets ) ; <S2SV_EndBug> <S2SV_StartBug> mp4 -> indexcount = num ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ; struct stat64 mp4stat ; stat64 ( filename , & mp4stat ) ; mp4 -> filesize = mp4stat . st_size ; if ( mp4 -> filesize < 64 ) return 0 <S2SV_ModStart> mp4 -> filepos += len ; <S2SV_ModStart> && mp4 -> filepos < mp4 -> filesize <S2SV_ModStart> CloseSource ( ( size_t ) mp4 ) ; mp4 = NULL ; break <S2SV_ModEnd> <S2SV_ModStart> len = <S2SV_ModStart> ; mp4 -> filepos += len <S2SV_ModStart> || qttag == MAKEID ( 'f' , 'r' , 'e' , 'e' ) ) { LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 's' , 't' , 'b' , 'l' <S2SV_ModEnd> <S2SV_ModStart> 's' , 't' , 't' <S2SV_ModEnd> <S2SV_ModStart> 's' , 'c' <S2SV_ModEnd> <S2SV_ModStart> 's' , 'z' <S2SV_ModEnd> <S2SV_ModStart> 'c' , 'o' <S2SV_ModEnd> <S2SV_ModStart> 'c' , 'o' , '6' , '4' <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mp4 -> filepos += len ; LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mp4 -> filepos += len ; LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && temp != MAKEID ( 'u' , 'r' , 'l' , '<S2SV_blank>' ) <S2SV_ModStart> mp4 -> filepos += len ; LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mp4 -> filepos += len ; LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( num > 0 ) { <S2SV_ModStart> sizeof ( SampleToChunk ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } else { CloseSource ( ( size_t ) mp4 ) ; mp4 <S2SV_ModEnd> <S2SV_ModStart> break ; } } mp4 -> filepos += len ; LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( num > 0 ) { <S2SV_ModStart> else { CloseSource ( ( size_t ) mp4 ) ; mp4 = NULL ; break ; } } mp4 -> filepos += len ; LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> uint32_t metastco_count = num ; <S2SV_ModStart> num <S2SV_ModEnd> <S2SV_ModStart> if ( num > 0 ) { <S2SV_ModStart> num <S2SV_ModEnd> <S2SV_ModStart> indexcount ) { if ( ( uint32_t ) <S2SV_ModEnd> <S2SV_ModStart> if ( ( uint32_t ) stco_pos + 1 < metastco_count ) { <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } if ( ( uint32_t ) stsc_pos + 1 < mp4 -> metastsc_count ) if ( mp4 -> metastsc [ stsc_pos + 1 ] . chunk_num == ( uint32_t ) stco_pos + 1 ) stsc_pos ++ ; repeat = 1 ; } else { fileoffset += ( uint64_t ) mp4 -> metasizes [ num - 1 ] ; <S2SV_ModStart> CloseSource ( ( size_t ) mp4 ) ; mp4 = NULL ; break ; } } else { <S2SV_ModStart> if ( num > 0 ) { <S2SV_ModStart> else { CloseSource ( ( size_t ) mp4 ) ; mp4 = NULL ; break ; } } } mp4 -> filepos += len ; LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> == 0 ) { CloseSource ( ( size_t ) mp4 ) ; mp4 = NULL ; break ; } if ( num <S2SV_ModStart> if ( mp4 -> metasize_count ) { <S2SV_ModStart> CloseSource ( ( size_t ) mp4 ) ; mp4 = NULL ; break ; } } else { <S2SV_ModStart> mp4 -> filepos += len ; LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mp4 -> filepos += len ; LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> LongSeek ( mp4 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( mp4 ) { if ( mp4 -> metasizes == NULL || mp4 -> metaoffsets == NULL ) { CloseSource ( ( size_t ) mp4 ) ; mp4 = NULL ; } } "
2942,<S2SV_StartBug> line = picture -> data [ plane ] + y * picture -> linesize [ plane ] ; <S2SV_EndBug> <S2SV_StartBug> dst = line + x * pixelsize + compno * ! planar ; <S2SV_EndBug> <S2SV_StartBug> linel = ( uint16_t * ) picture -> data [ plane ] + y * ( picture -> linesize [ plane ] >> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> dst = linel + ( x * pixelsize + compno * ! planar ) ; <S2SV_EndBug> ,<S2SV_ModStart> / s -> cdy [ compno ] <S2SV_ModStart> / s -> cdx [ compno ] <S2SV_ModStart> / s -> cdy [ compno ] <S2SV_ModStart> / s -> cdx [ compno ] 
2943,"<S2SV_StartBug> split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ? <S2SV_EndBug> <S2SV_StartBug> err = ext4_split_extent_at ( handle , inode , path , <S2SV_EndBug> <S2SV_StartBug> split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ? <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( split_flag & EXT4_EXT_DATA_VALID2 ) split_flag1 |= EXT4_EXT_DATA_VALID1 ; <S2SV_ModStart> ( EXT4_EXT_MAY_ZEROOUT | EXT4_EXT_DATA_VALID2 ) <S2SV_ModEnd> 
2944,"<S2SV_StartBug> err = bnep_add_connection ( & ca , nsock ) ; <S2SV_EndBug> ",<S2SV_ModStart> ca . device [ sizeof ( ca . device ) - 1 ] = 0 ; 
2945,"<S2SV_StartBug> strcpy ( buf , mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> else strcpy ( mode , """" ) ; "
2946,<S2SV_StartBug> if ( q > e ) { <S2SV_EndBug> ,"<S2SV_ModStart> < p ) { DPRINTF ( ( ""Wrapped<S2SV_blank>around<S2SV_blank>%p<S2SV_blank><<S2SV_blank>%p\\n"" , q , p ) ) ; goto out ; } if ( q "
2947,<S2SV_StartBug> ps_dec -> ps_parse_cur_slice ++ ; <S2SV_EndBug> <S2SV_StartBug> ps_dec -> u2_cur_slice_num ++ ; <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> ps_dec -> u2_cur_slice_num ++ ; } <S2SV_ModStart>  <S2SV_ModEnd> 
2948,"<S2SV_StartBug> sqlite3VdbeChangeP5 ( v , OPFLAG_TYPEOFARG ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( sqlite3VdbeGetOp ( v , - 1 ) -> opcode == OP_Column ) { <S2SV_ModStart> } "
2949,<S2SV_StartBug> ( Rec2 . RecordLength - 2 - 2 ) / 3 ) <S2SV_EndBug> ,"<S2SV_ModStart> ) ThrowReaderException ( CorruptImageError , ""InvalidColormapIndex"" ) ; if ( WPG_Palette . StartIndex > WPG_Palette . NumOfEntries "
2950,"<S2SV_StartBug> if ( js_regexec ( re -> prog , source , & m , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! js_regexec ( re -> prog , source , & m , REG_NOTBOL ) ) <S2SV_EndBug> ","<S2SV_ModStart> js_doregexec ( J , <S2SV_ModEnd> <S2SV_ModStart> js_doregexec ( J , <S2SV_ModEnd> "
2951,<S2SV_StartBug> while ( 0xff == u4_bits ) <S2SV_EndBug> <S2SV_StartBug> while ( 0xff == u4_bits ) <S2SV_EndBug> <S2SV_StartBug> while ( 0 == ih264d_check_byte_aligned ( ps_bitstrm ) ) <S2SV_EndBug> ,<S2SV_ModStart> && ! EXCEED_OFFSET ( ps_bitstrm ) <S2SV_ModStart> && ! EXCEED_OFFSET ( ps_bitstrm ) <S2SV_ModStart> ( ps_bitstrm ) && ! EXCEED_OFFSET 
2952,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> usb_conv_info -> class_data_type = USB_CONV_VIDEO ; } else if ( usb_conv_info -> class_data_type != USB_CONV_VIDEO ) { return descriptor_len ; 
2953,<S2SV_StartBug> while ( header_buf [ i ] == '\\r' || header_buf [ i ] == '\\n' ) <S2SV_EndBug> ,<S2SV_ModStart> ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> ) 
2954,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> ","<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : gss_release_buffer ( & minor_stat , & client_name ) ; gss_release_buffer ( & minor_stat , & service_name ) ; <S2SV_ModEnd> "
2955,<S2SV_StartBug> if ( ! static_key_enabled ( work -> key ) ) <S2SV_EndBug> ,<S2SV_ModStart> BUG_ON <S2SV_ModEnd> <S2SV_ModStart> ; static_key_slow_dec <S2SV_ModEnd> 
2956,"<S2SV_StartBug> if ( strchr ( topicName , '#' ) == NULL && strchr ( topicName , '+' ) == NULL ) <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> osStrchr <S2SV_ModEnd> 
2957,"<S2SV_StartBug> pipe -> bufs = kzalloc ( sizeof ( struct pipe_buffer ) * PIPE_DEF_BUFFERS , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> pipe -> buffers = PIPE_DEF_BUFFERS ; <S2SV_EndBug> <S2SV_StartBug> kfree ( pipe ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned long pipe_bufs = PIPE_DEF_BUFFERS ; struct user_struct * user = get_current_user ( ) ; if ( ! too_many_pipe_buffers_hard ( user ) ) { if ( too_many_pipe_buffers_soft ( user ) ) pipe_bufs = 1 ; <S2SV_ModStart> pipe_bufs <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> pipe_bufs ; pipe -> user = user ; account_pipe_buffers ( pipe , 0 , pipe_bufs ) <S2SV_ModEnd> <S2SV_ModStart> free_uid ( user ) ; "
2958,<S2SV_StartBug> if ( trk -> vos_len == 0 && par -> extradata_size > 0 && <S2SV_EndBug> ,"<S2SV_ModStart> samples_in_chunk < 1 ) { av_log ( s , AV_LOG_ERROR , ""fatal<S2SV_blank>error,<S2SV_blank>input<S2SV_blank>packet<S2SV_blank>contains<S2SV_blank>no<S2SV_blank>samples\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( "
2959,<S2SV_StartBug> xmlNodePtr cur = NULL ; <S2SV_EndBug> <S2SV_StartBug> xmlXPathObjectPtr obj ; <S2SV_EndBug> <S2SV_StartBug> xmlXPathFreeObject ( obj ) ; <S2SV_EndBug> <S2SV_StartBug> val = ( long ) ( ( char * ) cur - ( char * ) doc ) ; <S2SV_EndBug> ,<S2SV_ModStart> = NULL ; xmlXPathObjectPtr obj <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( obj ) xmlXPathFreeObject ( obj ) ; 
2960,<S2SV_StartBug> if ( ! fs_searchpaths ) <S2SV_EndBug> <S2SV_StartBug> for ( search = fs_searchpaths ; search ; search = search -> next ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> qboolean isLocalConfig ; <S2SV_ModStart> isLocalConfig = ! strcmp ( filename , ""autoexec.cfg"" ) || ! strcmp ( filename , Q3CONFIG_CFG ) ; <S2SV_ModStart> if ( isLocalConfig && search -> pack ) continue ; "
2961,"<S2SV_StartBug> walk -> private += __mincore_unmapped_range ( addr , end , <S2SV_EndBug> ","<S2SV_ModStart> unsigned char * vec = walk -> private ; unsigned long nr = ( end - addr ) >> PAGE_SHIFT ; memset ( vec , 0 , nr ) ; <S2SV_ModStart> nr <S2SV_ModEnd> "
2962,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return 0 ; 
2963,"<S2SV_StartBug> int rc ; <S2SV_EndBug> <S2SV_StartBug> rc = ecryptfs_parse_options ( sbi , raw_data ) ; <S2SV_EndBug> <S2SV_StartBug> ecryptfs_set_superblock_lower ( s , path . dentry -> d_sb ) ; <S2SV_EndBug> ","<S2SV_ModStart> uid_t check_ruid ; <S2SV_ModStart> , & check_ruid <S2SV_ModStart> if ( check_ruid && path . dentry -> d_inode -> i_uid != current_uid ( ) ) { rc = - EPERM ; printk ( KERN_ERR ""Mount<S2SV_blank>of<S2SV_blank>device<S2SV_blank>(uid:<S2SV_blank>%d)<S2SV_blank>not<S2SV_blank>owned<S2SV_blank>by<S2SV_blank>"" ""requested<S2SV_blank>user<S2SV_blank>(uid:<S2SV_blank>%d)\\n"" , path . dentry -> d_inode -> i_uid , current_uid ( ) ) ; goto out_free ; } "
2964,<S2SV_StartBug> return AUTH_FOUND ; <S2SV_EndBug> ,<S2SV_ModStart> fclose ( opwfile ) ; 
2965,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 4 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""horAcc32"" , ""%s"" , ""cc%(4*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> return 1 ; "
2966,<S2SV_StartBug> random_ether_addr ( dev -> dev_addr ) ; <S2SV_EndBug> ,<S2SV_ModStart> dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; 
2967,<S2SV_StartBug> timr -> it_overrun += ( unsigned int ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2968,"<S2SV_StartBug> tlv = cp + i ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>(%u)"" , optlen + 4 ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( i + 4 > length ) return - 1 ; <S2SV_ModStart> ; if ( i + 4 + optlen > length ) return - 1 
2969,"<S2SV_StartBug> vpx_memset ( ypred_ptr , expected_dc , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ypred_ptr , yleft_col [ r ] , 16 ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
2970,<S2SV_StartBug> if ( ! asoc -> temp ) { <S2SV_EndBug> ,<S2SV_ModStart> list_empty ( & asoc -> asocs ) <S2SV_ModEnd> 
2971,<S2SV_StartBug> default : <S2SV_EndBug> ,"<S2SV_ModStart> case Opt_dioread_nolock : set_opt ( sbi -> s_mount_opt , DIOREAD_NOLOCK ) ; break ; case Opt_dioread_lock : clear_opt ( sbi -> s_mount_opt , DIOREAD_NOLOCK ) ; break ; "
2972,<S2SV_StartBug> if ( noblock ) <S2SV_EndBug> ,<S2SV_ModStart> cond_resched ( ) <S2SV_ModEnd> 
2973,"<S2SV_StartBug> TX_SIZE max_tx_size , vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> const int ctx = vp9_get_tx_size_context ( xd ) ; <S2SV_EndBug> <S2SV_StartBug> const vp9_prob * tx_probs = get_tx_probs ( max_tx_size , ctx , & cm -> fc . tx_probs ) ; <S2SV_EndBug> <S2SV_StartBug> int tx_size = vp9_read ( r , tx_probs [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> tx_size += vp9_read ( r , tx_probs [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> tx_size += vp9_read ( r , tx_probs [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> <S2SV_StartBug> ++ get_tx_counts ( max_tx_size , ctx , & cm -> counts . tx ) [ tx_size ] ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> <S2SV_ModStart> FRAME_COUNTS * counts = xd -> counts ; <S2SV_ModStart> get_tx_size_context <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> counts <S2SV_ModEnd> <S2SV_ModStart> counts -> <S2SV_ModEnd> 
2974,<S2SV_StartBug> evt -> event . lun [ 1 ] = tpg -> tport_tpgt & 0xFF ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2975,<S2SV_StartBug> int64_t cur_offset = avio_tell ( pb ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( par -> codec_type == AVMEDIA_TYPE_AUDIO && ! pkt -> size ) { av_log ( s , AV_LOG_WARNING , ""Empty<S2SV_blank>audio<S2SV_blank>Packet\\n"" ) ; return AVERROR ( EINVAL ) ; } "
2976,"<S2SV_StartBug> if ( ! sock_flag ( sk , SOCK_ZAPPED ) ) <S2SV_EndBug> <S2SV_StartBug> if ( sk -> sk_state != TCP_CLOSE ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ! sock_flag ( sk , SOCK_ZAPPED ) ) goto out_unlock ; if ( "
2977,"<S2SV_StartBug> strncpy ( result , ""undefined"" , 10 ) ; <S2SV_EndBug> ",<S2SV_ModStart> strcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
2978,"<S2SV_StartBug> GsmXSMPClient * client ; <S2SV_EndBug> <S2SV_StartBug> client = ice_conn -> context ; <S2SV_EndBug> <S2SV_StartBug> g_return_val_if_fail ( client != NULL , TRUE ) ; <S2SV_EndBug> <S2SV_StartBug> gsm_xsmp_client_connect ( client , sms_conn , mask_ret , callbacks_ret ) ; <S2SV_EndBug> ","<S2SV_ModStart> GsmClient * client ; GsmIceConnectionWatch * data <S2SV_ModEnd> <S2SV_ModStart> data <S2SV_ModEnd> <S2SV_ModStart> free_ice_connection_watch ( data ) ; client = gsm_xsmp_client_new ( ice_conn ) ; gsm_store_add ( server -> priv -> client_store , gsm_client_peek_id ( client ) , G_OBJECT ( client ) ) ; g_object_unref ( client <S2SV_ModEnd> <S2SV_ModStart> GSM_XSMP_CLIENT ( client ) <S2SV_ModEnd> "
2979,"<S2SV_StartBug> udf_pc_to_char ( inode -> i_sb , symlink , inode -> i_size , p ) ; <S2SV_EndBug> <S2SV_StartBug> brelse ( bh ) ; <S2SV_EndBug> ","<S2SV_ModStart> err = <S2SV_ModStart> , PAGE_SIZE <S2SV_ModStart> ; if ( err ) goto out_unlock_inode "
2980,"<S2SV_StartBug> static char * print_array ( cJSON * item , int depth , int fmt ) <S2SV_EndBug> <S2SV_StartBug> while ( child ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) <S2SV_EndBug> <S2SV_StartBug> while ( child && ! fail ) { <S2SV_EndBug> <S2SV_StartBug> ret = print_value ( child , depth + 1 , fmt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! fail ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < numentries ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < numentries ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> ptr += strlen ( entries [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( i != numentries - 1 ) { <S2SV_EndBug> <S2SV_StartBug> cJSON_free ( entries [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> * ptr ++ = 0 ; <S2SV_EndBug> ","<S2SV_ModStart> , printbuffer * p <S2SV_ModStart> size_t tmplen = 0 ; <S2SV_ModStart> numentries ++ , <S2SV_ModEnd> <S2SV_ModStart> if ( ! numentries ) { if ( p ) out = ensure ( p , 3 ) ; else out = ( char <S2SV_ModEnd> <S2SV_ModStart> 3 ) ; if ( out ) strcpy ( out , ""[]"" ) ; return out ; } if ( p ) { i = p -> offset ; ptr = ensure ( p , 1 ) ; if ( ! ptr ) return 0 ; * ptr = '[' ; p -> offset ++ <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModEnd> <S2SV_ModStart> , p ) ; p -> offset = update ( p ) ; if ( child -> next ) { len = fmt ? 2 : 1 ; ptr = ensure ( p , len + 1 ) ; if ( ! ptr ) return 0 ; * ptr ++ = ',' ; if ( fmt ) * ptr ++ = '<S2SV_blank>' ; * ptr = 0 ; p -> offset += len ; } child = child -> next ; } ptr = ensure ( p , 2 ) ; if ( ! ptr ) return 0 ; * ptr ++ = ']' ; * ptr = 0 ; out = ( p -> buffer ) + i ; } else { entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ; if ( ! entries ) return 0 ; memset ( entries , 0 , numentries * sizeof ( char * ) ) ; child = item -> child ; while ( child && ! fail ) { ret = print_value ( child , depth + 1 , fmt , 0 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> i ++ ) <S2SV_ModEnd> <S2SV_ModStart> i ++ ) { tmplen = strlen ( <S2SV_ModEnd> <S2SV_ModStart> memcpy ( ptr , entries [ i ] , tmplen ) ; ptr += tmplen ; if ( i != numentries - 1 ) { * ptr ++ = ',' ; if ( fmt ) * ptr ++ = '<S2SV_blank>' ; * ptr = 0 ; } cJSON_free <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * ptr ++ = 0 ; } <S2SV_ModEnd> "
2981,<S2SV_StartBug> if ( ! vma -> vm_userfaultfd_ctx . ctx ) <S2SV_EndBug> ,<S2SV_ModStart> WARN_ON ( ! ( vma -> vm_flags & VM_MAYWRITE ) ) ; 
2982,"<S2SV_StartBug> if ( ! fc_may_access ( fc , controller , path1 , path2 , fi -> flags ) ) { <S2SV_EndBug> ","<S2SV_ModStart> caller_may_see_dir ( fc -> pid , controller , path1 ) ) { ret = - ENOENT ; goto out ; } if ( ! "
2983,<S2SV_StartBug> # if CONFIG_ALPHA <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2984,<S2SV_StartBug> if ( serial -> port [ 0 ] == usbcons_info . port ) { <S2SV_EndBug> ,<S2SV_ModStart> serial -> port [ 0 ] && 
2985,"<S2SV_StartBug> static int ion_handle_put ( struct ion_handle * handle ) <S2SV_EndBug> <S2SV_StartBug> ret = kref_put ( & handle -> ref , ion_handle_destroy ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ion_handle_put_nolock ( handle <S2SV_ModEnd> 
2986,<S2SV_StartBug> DEFINE_WAKE_Q ( wake_q ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( nr_wake < 0 || nr_requeue < 0 ) return - EINVAL 
2987,"<S2SV_StartBug> vpx_memset ( dest_ptr1 , src_ptr1 [ 0 ] , el ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr1 + el , src_ptr1 , w ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr1 , src_ptr1 , linesize ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr2 , src_ptr2 , linesize ) ; <S2SV_EndBug> ","<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memcpy ( dest_ptr1 + el , src_ptr1 , w ) ; memset <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> "
2988,"<S2SV_StartBug> if ( my_copystat ( org_name , tmp_name , MyFlags ) < 0 ) <S2SV_EndBug> ",<S2SV_ModStart> ! my_disable_copystat_in_redel && 
2989,<S2SV_StartBug> static inline int <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2990,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> usb_conv_info -> class_data_type = USB_CONV_VIDEO ; } else if ( usb_conv_info -> class_data_type != USB_CONV_VIDEO ) { return descriptor_len ; 
2991,"<S2SV_StartBug> if ( mount ( console -> name , lxcpath , ""none"" , MS_BIND , 0 ) ) { <S2SV_EndBug> ","<S2SV_ModStart> safe_mount ( console -> name , lxcpath , ""none"" , MS_BIND , 0 , rootfs -> mount ) ) { ERROR ( ""failed<S2SV_blank>to<S2SV_blank>mount<S2SV_blank>\'%s\'<S2SV_blank>on<S2SV_blank>\'%s\'"" , <S2SV_ModEnd> <S2SV_ModStart> ) ; return - 1 ; } ret = snprintf ( lxcpath , sizeof ( lxcpath ) , ""%s/console"" , ttydir ) ; if ( ret >= sizeof ( lxcpath ) ) { ERROR ( ""lxc/console<S2SV_blank>path<S2SV_blank>too<S2SV_blank>long"" ) ; return - 1 ; } ret = symlink ( lxcpath , path ) ; if ( ret ) { SYSERROR ( ""failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>symlink<S2SV_blank>for<S2SV_blank>console"" ) ; return - 1 ; } INFO ( ""console<S2SV_blank>has<S2SV_blank>been<S2SV_blank>setup<S2SV_blank>on<S2SV_blank>%s"" , lxcpath ) ; return 0 <S2SV_ModEnd> "
2992,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> ","<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : gss_release_buffer ( & minor_stat , & client_name ) ; gss_release_buffer ( & minor_stat , & service_name ) ; <S2SV_ModEnd> "
2993,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""[|icmp6]"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , mldv2_tstr <S2SV_ModEnd> "
2994,"<S2SV_StartBug> strcpy ( m , name ) ; <S2SV_EndBug> ","<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> , nlen + 1 "
2995,<S2SV_StartBug> ps_dec -> u4_first_slice_in_pic = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
2996,<S2SV_StartBug> mptctl_eventenable ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> struct mpt_ioctl_eventenable karg ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> ,"<S2SV_ModStart> MPT_ADAPTER * ioc , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
2997,<S2SV_StartBug> if ( ! sock || ( count && ! buf ) ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ,<S2SV_ModStart> || count > OE_SSIZE_MAX <S2SV_ModStart> if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } 
2998,<S2SV_StartBug> MACROBLOCKD * const xd = args -> xd ; <S2SV_EndBug> <S2SV_StartBug> struct macroblock_plane * p = & args -> cpi -> mb . plane [ plane ] ; <S2SV_EndBug> ,<S2SV_ModStart> ThreadData * const td = args -> td ; MACROBLOCK * const x = & td -> mb ; <S2SV_ModStart> & x -> e_mbd <S2SV_ModEnd> <S2SV_ModStart> x -> <S2SV_ModEnd> 
2999,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug> ",<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : <S2SV_ModStart>  <S2SV_ModEnd> 
3000,"<S2SV_StartBug> ps_dec -> u2_frame_rate_code = impeg2d_bit_stream_get ( ps_stream , 4 ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ps_dec -> u2_frame_rate_code > MPEG2_MAX_FRAME_RATE_CODE ) { return IMPEG2D_FRM_HDR_DECODE_ERR ; } 
3001,"<S2SV_StartBug> return print_value ( item , 0 , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , 0 "
3002,"<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_args ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> arg_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_arg ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( args , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_vararg ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_vararg ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> arg_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_arg ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( kwonlyargs , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_kw_defaults ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( kw_defaults , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_kwarg ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_kwarg ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( defaults , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> * out = arguments ( args , vararg , kwonlyargs , kw_defaults , kwarg , defaults , <S2SV_EndBug> ","<S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""args\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>arguments"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_vararg , & tmp ) < 0 ) { <S2SV_ModEnd> <S2SV_ModStart> tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; vararg = NULL ; } else { int res ; res = obj2ast_arg ( tmp , & vararg , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_kwonlyargs , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""kwonlyargs\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>arguments"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_kw_defaults , & tmp ) < 0 ) { <S2SV_ModEnd> <S2SV_ModStart> tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""kw_defaults\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>arguments"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_kwarg , & tmp ) < 0 ) { <S2SV_ModEnd> <S2SV_ModStart> tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; kwarg = NULL ; } else { int res ; res = obj2ast_arg ( tmp , & kwarg , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_defaults , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""defaults\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>arguments"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> * out = arguments ( args , vararg , kwonlyargs , kw_defaults , kwarg , defaults , arena ) ; return 0 ; failed : Py_XDECREF ( tmp <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3003,<S2SV_StartBug> if ( ! ( ifa1 -> ifa_flags & IFA_F_SECONDARY ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> in_dev -> dead ) goto no_promotions ; if ( <S2SV_ModStart> no_promotions : 
3004,<S2SV_StartBug> if ( likely ( walk . nbytes == nbytes ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3005,"<S2SV_StartBug> final_p = fl6_update_dst ( fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> dst = __inet6_csk_dst_check ( sk , np -> dst_cookie ) ; <S2SV_EndBug> ",<S2SV_ModStart> rcu_read_lock ( ) ; <S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) <S2SV_ModStart> rcu_read_unlock ( ) ; 
3006,"<S2SV_StartBug> if ( CheckMemoryOverflow ( count , quantum ) != MagickFalse ) <S2SV_EndBug> ",<S2SV_ModStart> HeapOverflowSanityCheck <S2SV_ModEnd> 
3007,"<S2SV_StartBug> number_planes , <S2SV_EndBug> <S2SV_StartBug> if ( ( number_pixels * number_planes ) != ( size_t ) ( number_pixels * number_planes ) ) <S2SV_EndBug> <S2SV_StartBug> pixel_info_length = image -> columns * image -> rows * MagickMax ( number_planes , 4 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , number_planes_filled <S2SV_ModStart> number_planes_filled = ( number_planes % 2 == 0 ) ? number_planes : number_planes + 1 ; <S2SV_ModStart> number_planes_filled <S2SV_ModEnd> <S2SV_ModStart> number_planes_filled <S2SV_ModEnd> <S2SV_ModStart> number_planes_filled <S2SV_ModEnd> "
3008,"<S2SV_StartBug> final_p = fl6_update_dst ( fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> fl6 -> saddr = ireq -> ir_v6_loc_addr ; <S2SV_EndBug> ",<S2SV_ModStart> rcu_read_lock ( ) ; <S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) <S2SV_ModStart> rcu_read_unlock ( ) ; 
3009,<S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug> ,<S2SV_ModStart> abort ( <S2SV_ModEnd> 
3010,"<S2SV_StartBug> char * ksep , * vsep , * val ; <S2SV_EndBug> <S2SV_StartBug> vsep = memchr ( var -> ptr , '&' , var -> end - var -> ptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! eof ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> ","<S2SV_ModStart> start , * <S2SV_ModStart> start = var -> ptr + var -> already_scanned ; <S2SV_ModStart> start <S2SV_ModEnd> <S2SV_ModStart> start <S2SV_ModEnd> <S2SV_ModStart> var -> already_scanned = var -> end - var -> ptr ; <S2SV_ModStart> var -> already_scanned = 0 ; "
3011,<S2SV_StartBug> if ( ape -> totalframes > UINT_MAX / sizeof ( APEFrame ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> ! ape -> totalframes ) { av_log ( s , AV_LOG_ERROR , ""No<S2SV_blank>frames<S2SV_blank>in<S2SV_blank>the<S2SV_blank>file!\\n"" ) ; return AVERROR ( EINVAL ) ; } if ( "
3012,<S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> hrtimer_try_to_cancel ( & stime -> hrt ) ; 
3013,"<S2SV_StartBug> static void update_state_rt ( VP9_COMP * cpi , PICK_MODE_CONTEXT * ctx , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> * ( xd -> mi [ 0 ] ) = ctx -> mic ; <S2SV_EndBug> <S2SV_StartBug> if ( ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ ) && seg -> enabled ) { <S2SV_EndBug> <S2SV_StartBug> vp9_cyclic_refresh_update_segment ( cpi , & xd -> mi [ 0 ] -> mbmi , <S2SV_EndBug> <S2SV_StartBug> mi_row , mi_col , bsize , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_update_mv_count ( cm , xd ) ; <S2SV_EndBug> <S2SV_StartBug> ++ cm -> counts . switchable_interp [ pred_ctx ] [ mbmi -> interp_filter ] ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ThreadData * td , <S2SV_ModStart> td <S2SV_ModEnd> <S2SV_ModStart> MODE_INFO * const mi = xd -> mi [ 0 ] ; <S2SV_ModStart> const int bw = num_8x8_blocks_wide_lookup [ mi -> mbmi . sb_type ] ; const int bh = num_8x8_blocks_high_lookup [ mi -> mbmi . sb_type ] ; const int x_mis = MIN ( bw , cm -> mi_cols - mi_col ) ; const int y_mis = MIN ( bh , cm -> mi_rows - mi_row ) ; <S2SV_ModStart> * ( x -> mbmi_ext ) = ctx -> mbmi_ext ; if ( seg -> enabled && cpi -> oxcf . aq_mode ) { if <S2SV_ModEnd> <S2SV_ModStart> COMPLEXITY_AQ || cpi -> oxcf . aq_mode == VARIANCE_AQ ) { const uint8_t * const map = seg -> update_map ? cpi -> segmentation_map : cm -> last_frame_seg_map ; mbmi -> segment_id = get_segment_id ( cm , map , bsize , mi_row , mi_col ) ; } else <S2SV_ModEnd> <S2SV_ModStart> mbmi , <S2SV_ModEnd> <S2SV_ModStart> ctx -> rate , ctx -> dist , x -> skip ) ; } <S2SV_ModEnd> <S2SV_ModStart> td <S2SV_ModEnd> <S2SV_ModStart> td -> counts -> <S2SV_ModEnd> <S2SV_ModStart> if ( mbmi -> sb_type < BLOCK_8X8 ) { mbmi -> mv [ 0 ] . as_int = mi -> bmi [ 3 ] . as_mv [ 0 ] . as_int ; mbmi -> mv [ 1 ] . as_int = mi -> bmi [ 3 ] . as_mv [ 1 ] . as_int ; } } if ( cm -> use_prev_frame_mvs ) { MV_REF * const frame_mvs = cm -> cur_frame -> mvs + mi_row * cm -> mi_cols + mi_col ; int w , h ; for ( h = 0 ; h < y_mis ; ++ h ) { MV_REF * const frame_mv = frame_mvs + h * cm -> mi_cols ; for ( w = 0 ; w < x_mis ; ++ w ) { MV_REF * const mv = frame_mv + w ; mv -> ref_frame [ 0 ] = mi -> mbmi . ref_frame [ 0 ] ; mv -> ref_frame [ 1 ] = mi -> mbmi . ref_frame [ 1 ] ; mv -> mv [ 0 ] . as_int = mi -> mbmi . mv [ 0 ] . as_int ; mv -> mv [ 1 ] . as_int = mi -> mbmi . mv [ 1 ] . as_int ; } } <S2SV_ModStart> x -> skip_txfm [ 0 ] = mbmi -> segment_id ? 0 : ctx -> skip_txfm [ 0 ] ; "
3014,"<S2SV_StartBug> p ++ ; <S2SV_EndBug> <S2SV_StartBug> return xdr_argsize_check ( rqstp , p ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; if ( ! xdr_argsize_check ( rqstp , p ) ) return 0 <S2SV_ModStart> 1 <S2SV_ModEnd> "
3015,"<S2SV_StartBug> # ifndef _MSC_VER <S2SV_EndBug> <S2SV_StartBug> char filename [ dirent . namelen + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> enum grub_fshelp_filetype type = GRUB_FSHELP_UNKNOWN ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( hook ( filename , type , fdiro , closure ) ) <S2SV_EndBug> ",<S2SV_ModStart> char * filename = grub_malloc ( <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> <S2SV_ModStart> if ( ! filename ) { break ; } <S2SV_ModStart> { free ( filename ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> { free ( filename ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> { free ( filename ) ; <S2SV_ModEnd> <S2SV_ModStart> { free ( filename ) ; return 1 ; } free ( filename ) <S2SV_ModEnd> 
3016,<S2SV_StartBug> if ( o == NULL ) return ; <S2SV_EndBug> ,"<S2SV_ModStart> || checkType ( c , o , OBJ_STREAM ) "
3017,<S2SV_StartBug> ( unsigned char * ) e + sizeof ( struct ip6t_entry ) >= limit ) { <S2SV_EndBug> ,<S2SV_ModStart> limit || ( unsigned char * ) e + e -> next_offset > 
3018,"<S2SV_StartBug> rad_get_vendor_attr ( u_int32_t * vendor , const void * * data , size_t * len ) <S2SV_EndBug> <S2SV_StartBug> attr = ( struct vendor_attribute * ) * data ; <S2SV_EndBug> <S2SV_StartBug> * vendor = ntohl ( attr -> vendor_value ) ; <S2SV_EndBug> <S2SV_StartBug> return ( attr -> attrib_type ) ; <S2SV_EndBug> ","<S2SV_ModStart> , unsigned char * type <S2SV_ModStart> , const void * raw , size_t raw_len <S2SV_ModStart> if ( raw_len < sizeof ( struct vendor_attribute ) ) { return - 1 ; } <S2SV_ModStart> raw <S2SV_ModEnd> <S2SV_ModStart> ; * type = attr -> attrib_type <S2SV_ModStart> if ( ( attr -> attrib_len + 4 ) > raw_len ) { return - 1 ; } "
3019,<S2SV_StartBug> if ( clone_info ) <S2SV_EndBug> <S2SV_StartBug> DeleteImageFromList ( & tmp ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( tmp == image2 ) image2 = ( Image * ) NULL ; 
3020,<S2SV_StartBug> buffer = malloc ( ( uint64_t ) msg . sct . length + 1 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( msg . sct . length > 1 << 20 ) { rfbClientErr ( ""Ignoring<S2SV_blank>too<S2SV_blank>big<S2SV_blank>cut<S2SV_blank>text<S2SV_blank>length<S2SV_blank>sent<S2SV_blank>by<S2SV_blank>server:<S2SV_blank>%u<S2SV_blank>B<S2SV_blank>><S2SV_blank>1<S2SV_blank>MB\\n"" , ( unsigned int ) msg . sct . length ) ; return FALSE ; } "
3021,"<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mode != inode -> i_mode ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode , & inode -> i_mode , & acl ) ; if ( error ) return error <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3022,"<S2SV_StartBug> int64_t target_end = s -> end_off ? s -> end_off : s -> filesize ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ! s -> willclose || s -> chunksize < 0 ) && <S2SV_EndBug> <S2SV_StartBug> if ( ! len && ( ! s -> willclose || s -> chunksize < 0 ) && <S2SV_EndBug> <S2SV_StartBug> ""Stream<S2SV_blank>ends<S2SV_blank>prematurely<S2SV_blank>at<S2SV_blank>%"" PRId64 "",<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%"" PRId64 ""\\n"" , <S2SV_EndBug> ","<S2SV_ModStart> uint64_t <S2SV_ModEnd> <S2SV_ModStart> == UINT64_MAX ) <S2SV_ModEnd> <S2SV_ModStart> == UINT64_MAX ) && s -> off < <S2SV_ModEnd> <S2SV_ModStart> PRIu64 "",<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%"" PRIu64 <S2SV_ModEnd> "
3023,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ( void ) cpi ; 
3024,<S2SV_StartBug> if ( length > 0 ) <S2SV_EndBug> ,<S2SV_ModStart> 1 <S2SV_ModEnd> 
3025,"<S2SV_StartBug> if ( ! bin ) <S2SV_EndBug> <S2SV_StartBug> ret = v3d_job_init ( v3d , file_priv , & bin -> base , <S2SV_EndBug> <S2SV_StartBug> v3d_job_put ( & render -> base ) ; <S2SV_EndBug> ",<S2SV_ModStart> { v3d_job_put ( & render -> base ) ; <S2SV_ModStart> } <S2SV_ModStart> ) ; kfree ( bin 
3026,"<S2SV_StartBug> With ( asdl_seq * items , asdl_seq * body , int lineno , int col_offset , int <S2SV_EndBug> <S2SV_StartBug> p -> lineno = lineno ; <S2SV_EndBug> ","<S2SV_ModStart> string type_comment , <S2SV_ModStart> v . With . type_comment = type_comment ; p -> "
3027,<S2SV_StartBug> bool compat ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> , struct iov_iter * iter <S2SV_ModStart> iov_iter_init ( iter , rw , * iovec , * nr_segs , * len ) ; "
3028,<S2SV_StartBug> struct tpacket_req * req = & req_u -> req ; <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> release_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( pg_vec ) <S2SV_EndBug> ,"<S2SV_ModStart> ; lock_sock ( sk ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( pg_vec ) free_pg_vec ( pg_vec , order , req -> tp_block_nr ) ; out : <S2SV_ModStart>  <S2SV_ModEnd> "
3029,<S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_16 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 32 ) <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_32 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 64 ) <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_64 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 128 ) <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_128 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 256 ) <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_256 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 512 ) <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_512 ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_1024 ; <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = coapClientGetMaxBlockSize ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } else { <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } 
3030,"<S2SV_StartBug> struct sas_task * task = TO_SAS_TASK ( cmd ) ; <S2SV_EndBug> <S2SV_StartBug> scsi_eh_finish_cmd ( cmd , & sas_ha -> eh_done_q ) ; <S2SV_EndBug> ","<S2SV_ModStart> domain_device * dev = cmd_to_domain_dev ( cmd ) ; struct <S2SV_ModStart> if ( dev_is_sata ( dev ) ) { list_move_tail ( & cmd -> eh_entry , & sas_ha -> eh_ata_q ) ; return ; } "
3031,"<S2SV_StartBug> char * * values = NULL , * strval [ 10 ] = { NULL } , errbuf [ 1024 ] ; <S2SV_EndBug> <S2SV_StartBug> krb5_boolean krb_identity_exists = FALSE , establish_links = FALSE ; <S2SV_EndBug> <S2SV_StartBug> int dnlen = 0 , subtreelen = 0 ; <S2SV_EndBug> <S2SV_StartBug> goto cleanup ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( subtreelist == NULL ) { st = krb5_get_subtree_info ( ldap_context , & subtreelist , & ntrees ) ; if ( st ) goto cleanup ; } st = validate_xargs ( context , ldap_server_handle , & xargs , standalone_principal_dn , subtreelist , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3032,"<S2SV_StartBug> ! ( e -> ip . flags & IPT_F_GOTO ) ) <S2SV_EndBug> <S2SV_StartBug> e = get_entry ( table_base , v ) ; <S2SV_EndBug> ",<S2SV_ModStart> { if ( unlikely ( stackidx >= private -> stacksize ) ) { verdict = NF_DROP ; break ; } <S2SV_ModStart> } 
3033,<S2SV_StartBug> copy_flags |= CL_SHARED_TO_SLAVE ; <S2SV_EndBug> ,<S2SV_ModStart> | CL_UNPRIVILEGED 
3034,"<S2SV_StartBug> num_pages = get_user_pages_fast ( base , size , 0 , & page [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( num_pages != size ) || <S2SV_EndBug> ",<S2SV_ModStart> if ( i + size > MAX_SKB_FRAGS ) return - EMSGSIZE ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3035,<S2SV_StartBug> for ( y = 0 ; y < s -> height ; ++ y ) { <S2SV_EndBug> ,<S2SV_ModStart> av_assert0 ( s -> bit_depth > 1 ) ; 
3036,"<S2SV_StartBug> static void utee_param_to_param ( struct tee_ta_param * p , struct utee_params * up ) <S2SV_EndBug> <S2SV_StartBug> switch ( TEE_PARAM_TYPE_GET ( types , n ) ) { <S2SV_EndBug> <S2SV_StartBug> case TEE_PARAM_TYPE_MEMREF_INPUT : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> TEE_Result utee_param_to_param ( struct user_ta_ctx * utc , <S2SV_ModEnd> <S2SV_ModStart> uint32_t flags = TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER ; <S2SV_ModStart> TEE_PARAM_TYPE_MEMREF_OUTPUT : case TEE_PARAM_TYPE_MEMREF_INOUT : flags |= TEE_MEMORY_ACCESS_WRITE ; case TEE_PARAM_TYPE_MEMREF_INPUT <S2SV_ModEnd> <S2SV_ModStart> if ( tee_mmu_check_access_rights ( utc , flags , a , b ) ) return TEE_ERROR_ACCESS_DENIED ; <S2SV_ModStart> return TEE_SUCCESS ; "
3037,<S2SV_StartBug> if ( sk != asoc -> base . sk ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3038,"<S2SV_StartBug> gchar * filename ; <S2SV_EndBug> <S2SV_StartBug> filename = g_build_filename ( g_get_tmp_dir ( ) , ""gimp-test.xcf"" , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> = NULL ; gint file_handle <S2SV_ModStart> file_handle = g_file_open_tmp ( ""gimp-test-XXXXXX.xcf"" , & filename , NULL ) ; g_assert ( file_handle != - 1 ) ; close ( file_handle <S2SV_ModEnd> "
3039,"<S2SV_StartBug> stride = ( ( Info_h . biWidth * Info_h . biBitCount + 31U ) / 32U ) * 4U ; <S2SV_EndBug> <S2SV_StartBug> if ( Info_h . biBitCount == 4 && Info_h . biCompression == 2 ) { <S2SV_EndBug> <S2SV_StartBug> pData = ( OPJ_UINT8 * ) calloc ( 1 , stride * Info_h . biHeight * sizeof ( OPJ_UINT8 ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( Info_h . biWidth == 0 || Info_h . biHeight == 0 ) { fclose ( IN ) ; return NULL ; } if ( Info_h . biBitCount > ( ( ( OPJ_UINT32 ) - 1 ) - 31 ) / Info_h . biWidth ) { fclose ( IN ) ; return NULL ; } <S2SV_ModStart> if ( 8 > ( ( ( OPJ_UINT32 ) - 1 ) - 31 ) / Info_h . biWidth ) { fclose ( IN ) ; return NULL ; } <S2SV_ModStart> if ( stride > ( ( OPJ_UINT32 ) - 1 ) / sizeof ( OPJ_UINT8 ) / Info_h . biHeight ) { fclose ( IN ) ; return NULL ; } 
3040,<S2SV_StartBug> pte_unmap ( page_table ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! vma -> vm_ops -> fault ) return VM_FAULT_SIGBUS 
3041,"<S2SV_StartBug> struct nfs_open_context * nfs_find_open_context ( struct inode * inode , struct rpc_cred * cred , int mode ) <S2SV_EndBug> ",<S2SV_ModStart> fmode_t <S2SV_ModEnd> 
3042,<S2SV_StartBug> } else if ( event -> type == et_char ) { <S2SV_EndBug> ,"<S2SV_ModStart> et_controlevent && event -> u . control . subtype == et_textchanged ) { sd -> fv -> script_unsaved = ! GTextFieldIsEmpty ( GWidgetGetControl ( sd -> gw , CID_Script ) ) ; } else if ( event -> type == et_controlevent && event -> u . control . subtype == et_save ) { sd -> fv -> script_unsaved = false ; } else if ( event -> type == "
3043,"<S2SV_StartBug> for ( i = 0 ; i < numcmpts ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> data [ i ] = jas_matrix_create ( jas_image_height ( image ) , jas_image_width ( image ) ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> nz -= 8 ; <S2SV_EndBug> ","<S2SV_ModStart> assert ( numcmpts <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } <S2SV_ModStart> if ( ! ( <S2SV_ModStart> ) ) { goto error ; } <S2SV_ModEnd> <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> goto error ; } nz -= 8 ; z &= RAS_ONES ( nz ) ; } } if ( nz > 0 ) { c = ( z >> ( 8 - nz ) ) & RAS_ONES ( nz ) ; if ( jas_stream_putc ( out , c ) == EOF ) { goto error ; } } if ( pad % 2 ) { if ( jas_stream_putc ( out , 0 ) == EOF ) { goto error ; } } } for ( i = 0 ; i < numcmpts ; ++ i ) { jas_matrix_destroy ( data [ i ] ) ; data [ i ] = 0 ; } return 0 ; error : for ( i = 0 ; i < numcmpts ; ++ i ) { if ( data [ i ] ) { jas_matrix_destroy ( data [ i ] ) ; } } <S2SV_ModStart>  <S2SV_ModEnd> "
3044,"<S2SV_StartBug> quit ( 1 , ""Failed<S2SV_blank>to<S2SV_blank>convert<S2SV_blank>header<S2SV_blank>to<S2SV_blank>header_bin<S2SV_blank>in<S2SV_blank>parse_notify"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> { applog ( LOG_WARNING , ""%s:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>convert<S2SV_blank>header<S2SV_blank>to<S2SV_blank>header_bin,<S2SV_blank>got<S2SV_blank>%s"" , __func__ , header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> "
3045,<S2SV_StartBug> vcpu -> arch . time_offset = data & ~ ( PAGE_MASK | 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( vcpu -> arch . time_offset & ( sizeof ( struct pvclock_vcpu_time_info ) - 1 ) ) break 
3046,"<S2SV_StartBug> if ( ! ( box = jas_malloc ( sizeof ( jp2_box_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> memset ( box , 0 , sizeof ( jp2_box_t ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> jp2_box_create0 ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3047,"<S2SV_StartBug> int align ; <S2SV_EndBug> <S2SV_StartBug> default : <S2SV_EndBug> <S2SV_StartBug> xcs = 1 ; <S2SV_EndBug> <S2SV_StartBug> case VPX_IMG_FMT_YV12 : <S2SV_EndBug> <S2SV_StartBug> case VPX_IMG_FMT_VPXYV12 : <S2SV_EndBug> <S2SV_StartBug> if ( ! img ) { <S2SV_EndBug> <S2SV_StartBug> img -> img_data = img_buf_memalign ( buf_align , ( ( fmt & VPX_IMG_FMT_PLANAR ) ? <S2SV_EndBug> <S2SV_StartBug> h * s * bps / 8 : h * s ) ) ; <S2SV_EndBug> <S2SV_StartBug> img -> fmt = fmt ; <S2SV_EndBug> <S2SV_StartBug> img -> stride [ VPX_PLANE_Y ] = img -> stride [ VPX_PLANE_ALPHA ] = s ; <S2SV_EndBug> <S2SV_StartBug> img -> stride [ VPX_PLANE_U ] = img -> stride [ VPX_PLANE_V ] = s >> xcs ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned int stride_in_bytes ; <S2SV_ModStart> case VPX_IMG_FMT_I422 : case VPX_IMG_FMT_I440 : bps = 16 ; break ; case VPX_IMG_FMT_I444 : bps = 24 ; break ; case VPX_IMG_FMT_I42016 : bps = 24 ; break ; case VPX_IMG_FMT_I42216 : case VPX_IMG_FMT_I44016 : bps = 32 ; break ; case VPX_IMG_FMT_I44416 : bps = 48 ; break ; <S2SV_ModStart> case VPX_IMG_FMT_I422 : case VPX_IMG_FMT_I42016 : case VPX_IMG_FMT_I42216 : <S2SV_ModStart> VPX_IMG_FMT_I440 : case <S2SV_ModStart> : case VPX_IMG_FMT_I42016 : case VPX_IMG_FMT_I44016 <S2SV_ModStart> stride_in_bytes = ( fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? s * 2 : s ; <S2SV_ModStart> const uint64_t alloc_size = <S2SV_ModEnd> <S2SV_ModStart> ( uint64_t ) <S2SV_ModStart> ( uint64_t ) <S2SV_ModStart> ; if ( alloc_size != ( size_t ) alloc_size <S2SV_ModEnd> <S2SV_ModStart> img_data = ( uint8_t * ) vpx_memalign ( buf_align , ( size_t ) alloc_size ) ; img -> img_data_owner = 1 ; } if ( ! img -> img_data ) goto fail ; img -> fmt = fmt ; img -> bit_depth = ( fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 16 : 8 <S2SV_ModEnd> <S2SV_ModStart> stride_in_bytes <S2SV_ModEnd> <S2SV_ModStart> stride_in_bytes <S2SV_ModEnd> "
3048,"<S2SV_StartBug> static int match ( Reinst * pc , const char * sp , const char * bol , int flags , Resub * out ) <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> for ( ; ; ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( match ( pc -> x , sp , bol , flags , & scratch ) ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! match ( pc -> x , sp , bol , flags , out ) ) <S2SV_EndBug> <S2SV_StartBug> if ( match ( pc -> x , sp , bol , flags , & scratch ) ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> , int depth <S2SV_ModStart> result ; int <S2SV_ModStart> if ( depth > MAXREC ) return - 1 ; <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> result = <S2SV_ModEnd> <S2SV_ModStart> , depth + 1 ) ; if ( result == - 1 ) return - 1 ; if ( result == 0 <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> result = <S2SV_ModEnd> <S2SV_ModStart> , depth + 1 ) ; if ( result == - 1 ) return - 1 ; if ( result == 1 ) return 1 <S2SV_ModEnd> <S2SV_ModStart> result = <S2SV_ModEnd> <S2SV_ModStart> , depth + 1 ) ; if ( result == - 1 ) return - 1 ; if ( result == 0 ) return 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> "
3049,"<S2SV_StartBug> unix_state_double_unlock ( sk , other ) ; <S2SV_EndBug> ","<S2SV_ModStart> unix_dgram_peer_wake_disconnect_wakeup ( sk , old_peer ) ; "
3050,"<S2SV_StartBug> return luaL_argerror ( L , 0 , ""MessagePack<S2SV_blank>pack<S2SV_blank>needs<S2SV_blank>input."" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; if ( ! lua_checkstack ( L , nargs ) ) return luaL_argerror ( L , 0 , ""Too<S2SV_blank>many<S2SV_blank>arguments<S2SV_blank>for<S2SV_blank>MessagePack<S2SV_blank>pack."" "
3051,<S2SV_StartBug> # undef _ <S2SV_EndBug> ,<S2SV_ModStart> _ ( NPNVprivateModeBool ) ; _ ( NPNVsupportsAdvancedKeyHandling ) ; 
3052,<S2SV_StartBug> tilebuf = _TIFFmalloc ( tile_buffsize ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""readContigTilesIntoBuffer"" , ""Integer<S2SV_blank>overflow<S2SV_blank>when<S2SV_blank>calculating<S2SV_blank>buffer<S2SV_blank>size."" ) ; exit ( - 1 ) ; } <S2SV_ModStart> + 3 <S2SV_ModStart> 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize + 1 ] = 0 ; tilebuf [ tile_buffsize + 2 ] = "
3053,<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * num_params ) ; <S2SV_EndBug> ,"<S2SV_ModStart> size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , num_params , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> alloc_size <S2SV_ModEnd> "
3054,"<S2SV_StartBug> for ( cnt = 0 , i = 0 ; cnt < shdr -> sh_info && ( ( char * ) defs + i < end ) ; ++ cnt ) { <S2SV_EndBug> <S2SV_StartBug> i += verdef -> vd_next ; <S2SV_EndBug> ","<S2SV_ModStart> i >= 0 && <S2SV_ModStart> if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( ""Warning:<S2SV_blank>Invalid<S2SV_blank>vd_next<S2SV_blank>in<S2SV_blank>the<S2SV_blank>ELF<S2SV_blank>version\\n"" ) ; break ; } "
3055,"<S2SV_StartBug> ( * sp -> decodepfunc ) ( tif , op0 , occ0 ) ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> ",<S2SV_ModStart> return <S2SV_ModStart>  <S2SV_ModEnd> 
3056,<S2SV_StartBug> for ( i = 0 ; mechbuf [ i ] ; i ++ ) mechbuf [ i ] = tolower ( mechbuf [ i ] ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; log_debug ( ZONE , ""sx<S2SV_blank>sasl<S2SV_blank>callback:<S2SV_blank>check<S2SV_blank>mech<S2SV_blank>(mech=%s)"" , mechbuf "
3057,"<S2SV_StartBug> static int jas_iccputsint ( jas_stream_t * out , int n , longlong val ) <S2SV_EndBug> <S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug> ",<S2SV_ModStart> jas_longlong <S2SV_ModEnd> <S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> 
3058,"<S2SV_StartBug> size_t buf_size = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( msg -> msg_iov , ( int ) msg -> msg_iovlen , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> & msg -> msg_namelen , <S2SV_EndBug> <S2SV_StartBug> & msg -> msg_controllen , <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_sync ( msg -> msg_iov , ( int ) msg -> msg_iovlen , buf , buf_size ) != 0 ) <S2SV_EndBug> ","<S2SV_ModStart> = 0 ; size_t data_size = 0 ; oe_socklen_t namelen_out = 0 ; size_t controllen_out <S2SV_ModStart> , & data_size <S2SV_ModStart> if ( data_size > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> namelen_out <S2SV_ModEnd> <S2SV_ModStart> controllen_out <S2SV_ModEnd> <S2SV_ModStart> ! msg -> msg_name ) msg -> msg_namelen = 0 ; else { if ( namelen_out > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( msg -> msg_namelen >= namelen_out ) msg -> msg_namelen = namelen_out ; } if ( ! msg -> msg_control ) msg -> msg_controllen = 0 ; else { if ( msg -> msg_controllen >= controllen_out ) msg -> msg_controllen = controllen_out ; else msg -> msg_flags |= OE_MSG_CTRUNC ; } if ( ret > ( ssize_t ) data_size ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( "
3059,<S2SV_StartBug> struct usb_serial * serial = port -> serial ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3060,<S2SV_StartBug> if ( ! handle -> h_transaction ) { <S2SV_EndBug> <S2SV_StartBug> err = jbd2_journal_stop ( handle ) ; <S2SV_EndBug> <S2SV_StartBug> return handle -> h_err ? handle -> h_err : err ; <S2SV_EndBug> <S2SV_StartBug> sb = handle -> h_transaction -> t_journal -> j_private ; <S2SV_EndBug> ,<S2SV_ModStart> err = handle -> h_err ; <S2SV_ModStart> rc <S2SV_ModEnd> <S2SV_ModStart> err ? err : rc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3061,<S2SV_StartBug> ( unsigned char * ) e + sizeof ( struct arpt_entry ) >= limit ) { <S2SV_EndBug> ,<S2SV_ModStart> limit || ( unsigned char * ) e + e -> next_offset > 
3062,"<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""gnuplot<S2SV_blank>%s"" , cmdname ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""wgnuplot<S2SV_blank>%s"" , cmdname ) ; <S2SV_EndBug> ",<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> 
3063,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3064,"<S2SV_StartBug> char * * values = NULL , * strval [ 10 ] = { NULL } , errbuf [ 1024 ] ; <S2SV_EndBug> <S2SV_StartBug> krb5_boolean krb_identity_exists = FALSE , establish_links = FALSE ; <S2SV_EndBug> <S2SV_StartBug> int dnlen = 0 , subtreelen = 0 ; <S2SV_EndBug> <S2SV_StartBug> goto cleanup ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( subtreelist == NULL ) { st = krb5_get_subtree_info ( ldap_context , & subtreelist , & ntrees ) ; if ( st ) goto cleanup ; } st = validate_xargs ( context , ldap_server_handle , & xargs , standalone_principal_dn , subtreelist , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3065,"<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error < 0 ) <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl <S2SV_ModStart> ) return error <S2SV_ModEnd> "
3066,<S2SV_StartBug> bufsize = file -> size ; <S2SV_EndBug> ,"<S2SV_ModStart> MIN ( <S2SV_ModStart> , sizeof buf ) "
3067,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> break ; default : fastd_buffer_free ( buffer ) ; pr_debug ( ""received<S2SV_blank>packet<S2SV_blank>with<S2SV_blank>invalid<S2SV_blank>type<S2SV_blank>from<S2SV_blank>unknown<S2SV_blank>address<S2SV_blank>%I"" , remote_addr ) ; "
3068,<S2SV_StartBug> static LAYER_CONTEXT * get_layer_context ( SVC * svc ) { <S2SV_EndBug> <S2SV_StartBug> return svc -> number_temporal_layers > 1 ? <S2SV_EndBug> <S2SV_StartBug> & svc -> layer_context [ svc -> spatial_layer_id ] ; <S2SV_EndBug> ,<S2SV_ModStart> VP9_COMP * const cpi ) { if ( is_one_pass_cbr_svc ( cpi ) ) return & cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id * cpi -> svc . number_temporal_layers + cpi -> svc . temporal_layer_id ] ; else return ( cpi -> svc . <S2SV_ModEnd> <S2SV_ModStart> && cpi -> oxcf . rc_mode == VPX_CBR ) ? & cpi -> svc . layer_context [ cpi -> svc . <S2SV_ModEnd> <S2SV_ModStart> cpi -> svc . layer_context [ cpi -> svc . <S2SV_ModEnd> 
3069,<S2SV_StartBug> void unix_inflight ( struct file * fp ) <S2SV_EndBug> <S2SV_StartBug> fp -> f_cred -> user -> unix_inflight ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> struct user_struct * user , <S2SV_ModStart>  <S2SV_ModEnd> "
3070,"<S2SV_StartBug> SCV_NB10_HEADER nb10_hdr ; <S2SV_EndBug> <S2SV_StartBug> ""%x%x"" , nb10_hdr . timestamp , nb10_hdr . age ) ; <S2SV_EndBug> <S2SV_StartBug> nb10_hdr . file_name , sizeof ( res -> file_name ) - 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( dbg_data_len < 20 ) { eprintf ( ""Truncated<S2SV_blank>NB10<S2SV_blank>entry,<S2SV_blank>not<S2SV_blank>enough<S2SV_blank>data<S2SV_blank>to<S2SV_blank>parse\\n"" ) ; return 0 ; } SCV_NB10_HEADER nb10_hdr = { { 0 } } <S2SV_ModEnd> <S2SV_ModStart> res -> file_name [ 0 ] = 0 ; if ( nb10_hdr . file_name ) { <S2SV_ModStart> } "
3071,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( dcfg -> xml_external_entity == NOT_SET ) dcfg -> xml_external_entity = 0 ; 
3072,"<S2SV_StartBug> Com_Printf ( ""Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; return ; } if ( ! COM_CompareExtension ( filename , "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\"".cfg\\""<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"" "
3073,<S2SV_StartBug> num ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>levels<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , num , ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) ) "
3074,<S2SV_StartBug> case MFR_CTRL_IE_MAGIC_NUM : <S2SV_EndBug> ,"<S2SV_ModStart> if ( ie_len != 4 ) { ND_PRINT ( ( ndo , ""(invalid<S2SV_blank>length)"" ) ) ; break ; } "
3075,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> usb_conv_info -> class_data_type = USB_CONV_MASS_STORAGE ; } else if ( usb_conv_info -> class_data_type != USB_CONV_MASS_STORAGE ) { return 0 ; 
3076,<S2SV_StartBug> port -> exists = true ; <S2SV_EndBug> <S2SV_StartBug> mb ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> spin_lock_irq ( & i8042_lock ) ; <S2SV_ModStart> spin_unlock_irq ( & i8042_lock <S2SV_ModEnd> 
3077,"<S2SV_StartBug> nl_parse ( pipenum , & config ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ensure_cloned_binary ( ) < 0 ) bail ( ""could<S2SV_blank>not<S2SV_blank>ensure<S2SV_blank>we<S2SV_blank>are<S2SV_blank>a<S2SV_blank>cloned<S2SV_blank>binary"" ) ; "
3078,"<S2SV_StartBug> 1 , 0 , regs , regs -> cp0_badvaddr ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3079,<S2SV_StartBug> VM_SHARED | VM_MAYSHARE | <S2SV_EndBug> <S2SV_StartBug> VM_SHARED | VM_MAYSHARE | <S2SV_EndBug> ,<S2SV_ModStart> VM_NO_THP <S2SV_ModEnd> <S2SV_ModStart> VM_NO_THP <S2SV_ModEnd> 
3080,"<S2SV_StartBug> rsrc . type_count = read_rsrc_short ( & rsrc , rsrc . map_offset + 28 ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> { marker = read_rsrc_marker ( & rsrc , rsrc . type_offset + k * 8 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( rsrc . map_offset + 28 > rsrc . rsrc_len ) { psf_log_printf ( psf , ""Bad<S2SV_blank>map<S2SV_blank>offset.\\n"" ) ; goto parse_rsrc_fork_cleanup ; } ; <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> > rsrc . rsrc_len ) { psf_log_printf ( psf , ""Bad<S2SV_blank>rsrc<S2SV_blank>marker.\\n"" ) ; goto parse_rsrc_fork_cleanup ; } ; marker = read_rsrc_marker ( & rsrc , rsrc . type_offset + k * 8 "
3081,<S2SV_StartBug> return HTTP_FORBIDDEN ; <S2SV_EndBug> ,"<S2SV_ModStart> SSL_set_verify ( ssl , verify_old , ssl_callback_SSLVerify ) ; "
3082,"<S2SV_StartBug> vpx_codec_ctx_t codec = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> vpx_codec_enc_cfg_t cfg = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> vpx_image_t raw = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> VpxVideoInfo info = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> encoder = get_vpx_encoder_by_name ( argv [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! encoder ) <S2SV_EndBug> <S2SV_StartBug> die ( ""Unsupported<S2SV_blank>codec."" ) ; <S2SV_EndBug> <S2SV_StartBug> printf ( ""Using<S2SV_blank>%s\\n"" , vpx_codec_iface_name ( encoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> res = vpx_codec_enc_config_default ( encoder -> interface ( ) , & cfg , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_enc_init ( & codec , encoder -> interface ( ) , & cfg , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> encode_frame ( & codec , NULL , - 1 , writer ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memset ( & info , 0 , sizeof ( info ) ) ; <S2SV_ModStart> encoder == NULL ) { <S2SV_ModEnd> <S2SV_ModStart> ) ; } assert ( encoder != NULL <S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> while ( <S2SV_ModStart> ) { } <S2SV_ModEnd> "
3083,<S2SV_StartBug> if ( vcpu -> arch . time_page ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pv_time_enabled = false ; } <S2SV_ModEnd> 
3084,<S2SV_StartBug> void close_connection ( h2o_http2_conn_t * conn ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return - 1 ; } return 0 ; <S2SV_ModEnd> 
3085,"<S2SV_StartBug> avio_skip ( pb , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> sscanf ( val , ""%"" SCNu32 ""%"" SCNu32 ""%"" SCNu32 ""%"" SCNu32 , <S2SV_EndBug> <S2SV_StartBug> for ( idx = 0 ; idx < 4 ; idx ++ ) { <S2SV_EndBug> ",<S2SV_ModStart> int ret ; <S2SV_ModStart> ret = <S2SV_ModStart> if ( ret != 4 ) return AVERROR_INVALIDDATA ; 
3086,"<S2SV_StartBug> struct vp9_read_bit_buffer * rb ) { <S2SV_EndBug> <S2SV_StartBug> size_t sz ; <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_rb_read_literal ( rb , 2 ) != VP9_FRAME_MARKER ) <S2SV_EndBug> <S2SV_StartBug> cm -> profile = read_profile ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> show_existing_frame = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> const int frame_to_show = cm -> ref_frame_map [ vp9_rb_read_literal ( rb , 3 ) ] ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_bufs [ frame_to_show ] . ref_count < 1 ) <S2SV_EndBug> <S2SV_StartBug> ref_cnt_fb ( cm -> frame_bufs , & cm -> new_fb_idx , frame_to_show ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_type = ( FRAME_TYPE ) vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> show_frame = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> error_resilient_mode = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> check_sync_code ( cm , rb ) ; <S2SV_EndBug> <S2SV_StartBug> ""RGB<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile<S2SV_blank>0"" ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_refs [ i ] . idx = cm -> new_fb_idx ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_refs [ i ] . buf = get_frame_new_buffer ( cm ) ; <S2SV_EndBug> <S2SV_StartBug> setup_frame_size ( cm , rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> intra_only = cm -> show_frame ? 0 : vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> 0 : vp9_rb_read_literal ( rb , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> check_sync_code ( cm , rb ) ; <S2SV_EndBug> <S2SV_StartBug> pbi -> refresh_frame_flags = vp9_rb_read_literal ( rb , REF_FRAMES ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> pbi -> refresh_frame_flags = vp9_rb_read_literal ( rb , REF_FRAMES ) ; <S2SV_EndBug> <S2SV_StartBug> const int ref = vp9_rb_read_literal ( rb , REF_FRAMES_LOG2 ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_refs [ i ] . idx = idx ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_refs [ i ] . buf = & cm -> frame_bufs [ idx ] . buf ; <S2SV_EndBug> <S2SV_StartBug> cm -> ref_frame_sign_bias [ LAST_FRAME + i ] = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> allow_high_precision_mv = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_setup_scale_factors_for_frame ( & ref_buf -> sf , <S2SV_EndBug> <S2SV_StartBug> cm -> width , cm -> height ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_is_scaled ( & ref_buf -> sf ) ) <S2SV_EndBug> <S2SV_StartBug> vp9_extend_frame_borders ( ref_buf -> buf ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> coding_use_prev_mi = 1 ; <S2SV_EndBug> <S2SV_StartBug> cm -> refresh_frame_context = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> coding_use_prev_mi = 0 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> setup_tile_info ( cm , rb ) ; <S2SV_EndBug> <S2SV_StartBug> sz = vp9_rb_read_literal ( rb , 16 ) ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_read_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> BufferPool * const pool = cm -> buffer_pool ; RefCntBuffer * const frame_bufs = pool -> frame_bufs ; int i , mask , ref_index = 0 ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cm -> last_intra_only = cm -> intra_only ; if ( vpx_rb_read_literal <S2SV_ModEnd> <S2SV_ModStart> vp9_read_profile ( rb ) ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> <S2SV_ModStart> # else if ( cm -> profile >= PROFILE_2 ) vpx_internal_error ( & cm -> error , VPX_CODEC_UNSUP_BITSTREAM , ""Unsupported<S2SV_blank>bitstream<S2SV_blank>profile"" ) ; # endif <S2SV_ModStart> vpx_rb_read_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_rb_read_literal <S2SV_ModEnd> <S2SV_ModStart> lock_buffer_pool ( pool ) ; if ( frame_to_show < 0 || <S2SV_ModEnd> <S2SV_ModStart> { unlock_buffer_pool ( pool ) ; <S2SV_ModStart> } ref_cnt_fb ( <S2SV_ModEnd> <S2SV_ModStart> ) ; unlock_buffer_pool ( pool <S2SV_ModStart> if ( pbi -> frame_parallel_decode ) { for ( i = 0 ; i < REF_FRAMES ; ++ i ) cm -> next_ref_frame_map [ i ] = cm -> ref_frame_map [ i ] ; } <S2SV_ModStart> vpx_rb_read_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_rb_read_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_rb_read_bit <S2SV_ModEnd> <S2SV_ModStart> if ( ! vp9_read_sync_code ( rb ) ) <S2SV_ModEnd> <S2SV_ModStart> ""Invalid<S2SV_blank>frame<S2SV_blank>sync<S2SV_blank>code"" ) ; read_bitdepth_colorspace_sampling ( cm , rb ) ; <S2SV_ModEnd> <S2SV_ModStart> INVALID_IDX <S2SV_ModEnd> <S2SV_ModStart> NULL <S2SV_ModEnd> <S2SV_ModStart> if ( pbi -> need_resync ) { memset ( & cm -> ref_frame_map , - 1 , sizeof ( cm -> ref_frame_map ) ) ; pbi -> need_resync = 0 ; } <S2SV_ModStart> vpx_rb_read_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_rb_read_literal <S2SV_ModEnd> <S2SV_ModStart> if ( ! vp9_read_sync_code ( rb ) ) vpx_internal_error ( & cm -> error , VPX_CODEC_UNSUP_BITSTREAM , ""Invalid<S2SV_blank>frame<S2SV_blank>sync<S2SV_blank>code"" ) ; if ( cm -> profile > PROFILE_0 ) { read_bitdepth_colorspace_sampling ( cm , rb ) ; } else { cm -> color_space = VPX_CS_BT_601 ; cm -> subsampling_y = cm -> subsampling_x = 1 ; cm -> bit_depth = VPX_BITS_8 ; # if CONFIG_VP9_HIGHBITDEPTH cm -> use_highbitdepth = 0 ; # endif } <S2SV_ModEnd> <S2SV_ModStart> vpx_rb_read_literal <S2SV_ModEnd> <S2SV_ModStart> if ( pbi -> need_resync ) { memset ( & cm -> ref_frame_map , - 1 , sizeof ( cm -> ref_frame_map ) ) ; pbi -> need_resync = 0 ; } } else if ( pbi -> need_resync != 1 ) <S2SV_ModEnd> <S2SV_ModStart> vpx_rb_read_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_rb_read_literal <S2SV_ModEnd> <S2SV_ModStart> RefBuffer * const ref_frame = & <S2SV_ModStart> ; ref_frame -> <S2SV_ModEnd> <S2SV_ModStart> ref_frame -> buf = & frame_bufs [ idx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vpx_rb_read_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_rb_read_bit <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> , cm -> use_highbitdepth ) ; # else vp9_setup_scale_factors_for_frame <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> -> y_crop_width , ref_buf -> buf -> y_crop_height , cm -> width , cm -> height ) ; # endif } } } # if CONFIG_VP9_HIGHBITDEPTH get_frame_new_buffer ( cm ) -> bit_depth = cm -> bit_depth ; # endif get_frame_new_buffer ( cm ) -> color_space = cm -> color_space ; if ( pbi -> need_resync ) { vpx_internal_error ( & cm -> error , VPX_CODEC_CORRUPT_FRAME , ""Keyframe<S2SV_blank>/<S2SV_blank>intra-only<S2SV_blank>frame<S2SV_blank>required<S2SV_blank>to<S2SV_blank>reset<S2SV_blank>decoder"" ""<S2SV_blank>state"" ) ; <S2SV_ModEnd> <S2SV_ModStart> refresh_frame_context = vpx_rb_read_bit ( rb ) ; cm -> frame_parallel_decoding_mode = vpx_rb_read_bit ( rb ) ; } else { cm -> refresh_frame_context = 0 ; cm -> frame_parallel_decoding_mode <S2SV_ModEnd> <S2SV_ModStart> } cm -> frame_context_idx = vpx_rb_read_literal ( rb , FRAME_CONTEXTS_LOG2 ) ; lock_buffer_pool ( pool ) ; for ( mask = pbi -> refresh_frame_flags ; mask ; mask >>= 1 ) { if ( mask & 1 ) { cm -> next_ref_frame_map [ ref_index ] = cm -> new_fb_idx ; ++ frame_bufs [ cm -> new_fb_idx ] . ref_count <S2SV_ModEnd> <S2SV_ModStart> next_ref_frame_map [ ref_index ] = cm -> ref_frame_map [ ref_index ] ; } if ( cm -> ref_frame_map [ ref_index ] >= 0 ) ++ frame_bufs [ cm -> ref_frame_map [ ref_index ] ] . ref_count ; ++ ref_index ; } for ( ; ref_index < REF_FRAMES ; ++ ref_index ) { cm -> next_ref_frame_map [ ref_index ] = cm -> ref_frame_map [ ref_index ] ; if ( cm -> ref_frame_map [ ref_index ] >= 0 ) ++ frame_bufs [ cm -> ref_frame_map [ ref_index ] ] . ref_count ; } unlock_buffer_pool ( pool ) ; pbi -> hold_ref_buf <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> setup_segmentation_dequant ( cm ) ; <S2SV_ModStart> vpx_rb_read_literal <S2SV_ModEnd> "
3087,<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> ,"<S2SV_ModStart> ND_PRINT ( ( ndo , ""%s"" , tstr ) ) ; <S2SV_ModStart> ND_PRINT ( ( ndo , ""%s"" , tstr ) ) ; <S2SV_ModStart> ND_PRINT ( ( ndo , ""%s"" , tstr ) ) ; <S2SV_ModStart> ND_PRINT ( ( ndo , ""%s"" , tstr ) ) ; <S2SV_ModStart> ND_PRINT ( ( ndo , ""%s"" , tstr ) ) ; <S2SV_ModStart> ; ND_PRINT ( ( ndo , ""%s"" , tstr ) ) "
3088,<S2SV_StartBug> if ( tu -> timeri ) <S2SV_EndBug> <S2SV_StartBug> snd_timer_close ( tu -> timeri ) ; <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & tu -> ioctl_lock ) ; <S2SV_ModStart> ) ; mutex_unlock ( & tu -> ioctl_lock 
3089,"<S2SV_StartBug> if ( ( tf = fopen ( tfile -> file_path , ""w"" ) ) ) { <S2SV_EndBug> ",<S2SV_ModStart> fopen_safe <S2SV_ModEnd> 
3090,<S2SV_StartBug> kfree ( user ) ; <S2SV_EndBug> ,<S2SV_ModStart> cleanup_srcu_struct ( & user -> release_barrier ) ; 
3091,"<S2SV_StartBug> int blockstodecode ; <S2SV_EndBug> <S2SV_StartBug> if ( ! nblocks || nblocks > INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> av_fast_malloc ( & s -> decoded_buffer , & s -> decoded_size , <S2SV_EndBug> <S2SV_StartBug> 2 * FFALIGN ( blockstodecode , 8 ) * sizeof ( * s -> decoded_buffer ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; uint64_t decoded_buffer_size <S2SV_ModStart> / 2 / sizeof ( * s -> decoded_buffer ) - 8 <S2SV_ModStart> decoded_buffer_size = 2LL * FFALIGN ( blockstodecode , 8 ) * sizeof ( * s -> decoded_buffer ) ; av_assert0 ( decoded_buffer_size <= INT_MAX ) ; <S2SV_ModStart> decoded_buffer_size <S2SV_ModEnd> "
3092,<S2SV_StartBug> if ( ! EXT4_SB ( inode -> i_sb ) -> s_journal ) <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) && ! ( EXT4_SB ( inode -> i_sb ) -> s_mount_state & EXT4_ORPHAN_FS ) 
3093,"<S2SV_StartBug> signed long personality ; <S2SV_EndBug> <S2SV_StartBug> ret = lxc_attach_to_ns ( init_pid , options -> namespaces ) ; <S2SV_EndBug> <S2SV_StartBug> . exec_payload = exec_payload <S2SV_EndBug> ","<S2SV_ModStart> int procfd ; <S2SV_ModStart> procfd = open ( ""/proc"" , O_DIRECTORY | O_RDONLY ) ; if ( procfd < 0 ) { SYSERROR ( ""Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>/proc"" ) ; shutdown ( ipc_sockets [ 1 ] , SHUT_RDWR ) ; rexit ( - 1 ) ; } <S2SV_ModStart> , . procfd = procfd "
3094,"<S2SV_StartBug> static void fdct4 ( const int16_t * input , int16_t * output ) { <S2SV_EndBug> <S2SV_StartBug> int16_t step [ 4 ] ; <S2SV_EndBug> <S2SV_StartBug> int temp1 , temp2 ; <S2SV_EndBug> <S2SV_StartBug> output [ 0 ] = fdct_round_shift ( temp1 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 1 ] = fdct_round_shift ( temp1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> ( tran_low_t ) fdct_round_shift ( temp1 ) ; output [ 2 ] = ( tran_low_t ) <S2SV_ModEnd> <S2SV_ModStart> ( tran_low_t ) fdct_round_shift ( temp1 ) ; output [ 3 ] = ( tran_low_t ) <S2SV_ModEnd> 
3095,"<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.cmd"" , rootname ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.png"" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.ps"" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.eps"" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.tex"" , newroot ) ; <S2SV_EndBug> ",<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> 
3096,<S2SV_StartBug> if ( tlen < oid_len ) { <S2SV_EndBug> ,<S2SV_ModStart> 1U + 
3097,<S2SV_StartBug> client -> auth_end_offset = AUTH_END_INIT_OFFSET ; <S2SV_EndBug> ,<S2SV_ModStart> auth_buffer = g_byte_array_new ( ) <S2SV_ModEnd> 
3098,"<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug> <S2SV_StartBug> decoder -> name , vpx_codec_iface_name ( decoder -> interface ( ) ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> void <S2SV_ModStart> codec_interface <S2SV_ModEnd> 
3099,"<S2SV_StartBug> if ( ( read = recv ( fd , p , len , MSG_NOSIGNAL ) ) == - 1 ) <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3100,<S2SV_StartBug> YV12_BUFFER_CONFIG * lst_yv12 = <S2SV_EndBug> <S2SV_StartBug> lst_yv12 -> y_width * lst_yv12 -> y_height ; <S2SV_EndBug> <S2SV_StartBug> lst_yv12 -> y_width * lst_yv12 -> y_height ; <S2SV_EndBug> <S2SV_StartBug> vp8_remove_common ( & cpi -> common ) ; <S2SV_EndBug> <S2SV_StartBug> # if 0 <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cpi -> common . Width * cpi -> common . Height <S2SV_ModEnd> <S2SV_ModStart> cpi -> common . Width * cpi -> common . Height <S2SV_ModEnd> <S2SV_ModStart> vpx_free ( cpi -> consec_zero_last ) ; vpx_free ( cpi -> consec_zero_last_mvbias ) ; <S2SV_ModStart> ifdef OUTPUT_YUV_DENOISED fclose ( yuv_denoised_file ) ; # endif # 
3101,<S2SV_StartBug> static void init_decoder ( vpx_codec_alg_priv_t * ctx ) { <S2SV_EndBug> <S2SV_StartBug> VP9D_CONFIG oxcf ; <S2SV_EndBug> <S2SV_StartBug> oxcf . max_threads = ctx -> cfg . threads ; <S2SV_EndBug> <S2SV_StartBug> ctx -> pbi = vp9_decoder_create ( & oxcf ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> vpx_codec_err_t <S2SV_ModEnd> <S2SV_ModStart> int i ; const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) ; ctx -> last_show_frame = - 1 ; ctx -> next_submit_worker_id = 0 ; ctx -> last_submit_worker_id = 0 ; ctx -> next_output_worker_id = 0 ; ctx -> frame_cache_read = 0 ; ctx -> frame_cache_write = 0 ; ctx -> num_cache_frames = 0 ; ctx -> need_resync = 1 ; ctx -> num_frame_workers = ( ctx -> frame_parallel_decode == 1 ) ? <S2SV_ModEnd> <S2SV_ModStart> : 1 ; if ( ctx -> num_frame_workers > MAX_DECODE_THREADS ) ctx -> num_frame_workers = MAX_DECODE_THREADS ; ctx -> available_threads = ctx -> num_frame_workers ; ctx -> flushed = 0 ; ctx -> buffer_pool = ( BufferPool * ) vpx_calloc ( 1 , sizeof ( BufferPool ) ) ; if ( ctx -> buffer_pool == NULL ) return VPX_CODEC_MEM_ERROR ; # if CONFIG_MULTITHREAD if ( pthread_mutex_init ( & ctx -> buffer_pool -> pool_mutex , NULL ) ) { set_error_detail ( ctx , ""Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>buffer<S2SV_blank>pool<S2SV_blank>mutex"" ) ; return VPX_CODEC_MEM_ERROR ; } # endif ctx -> frame_workers = ( VPxWorker * ) vpx_malloc ( ctx -> num_frame_workers * sizeof ( * ctx -> frame_workers ) ) ; if ( ctx -> frame_workers == NULL ) { set_error_detail ( ctx , ""Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>frame_workers"" ) ; return VPX_CODEC_MEM_ERROR ; } for ( i = 0 ; i < ctx -> num_frame_workers ; ++ i ) { VPxWorker * const worker = & ctx -> frame_workers [ i ] ; FrameWorkerData * frame_worker_data = NULL ; winterface -> init ( worker ) ; worker -> data1 = vpx_memalign ( 32 , sizeof ( FrameWorkerData ) ) ; if ( worker -> data1 == NULL ) { set_error_detail ( ctx , ""Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>frame_worker_data"" ) ; return VPX_CODEC_MEM_ERROR ; } frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; frame_worker_data <S2SV_ModEnd> <S2SV_ModStart> ctx -> buffer_pool ) ; if ( frame_worker_data <S2SV_ModEnd> <S2SV_ModStart> { set_error_detail ( ctx , ""Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>frame_worker_data"" ) ; return VPX_CODEC_MEM_ERROR ; } frame_worker_data -> pbi -> frame_worker_owner = worker ; frame_worker_data -> worker_id = i ; frame_worker_data -> scratch_buffer = NULL ; frame_worker_data -> scratch_buffer_size = 0 ; frame_worker_data -> frame_context_ready = 0 ; frame_worker_data -> received_frame = 0 ; # if CONFIG_MULTITHREAD if ( pthread_mutex_init ( & frame_worker_data -> stats_mutex , NULL ) ) { set_error_detail ( ctx , ""Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>frame_worker_data<S2SV_blank>mutex"" ) ; return VPX_CODEC_MEM_ERROR ; } if ( pthread_cond_init ( & frame_worker_data -> stats_cond , NULL ) ) { set_error_detail ( ctx , ""Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>frame_worker_data<S2SV_blank>cond"" ) ; return VPX_CODEC_MEM_ERROR ; } # endif frame_worker_data -> pbi -> max_threads = ( ctx -> frame_parallel_decode == 0 ) ? ctx -> cfg . threads : 0 ; frame_worker_data -> pbi -> inv_tile_order = ctx -> invert_tile_order ; frame_worker_data -> pbi -> frame_parallel_decode = ctx -> frame_parallel_decode ; frame_worker_data -> pbi -> common . frame_parallel_decode = ctx -> frame_parallel_decode ; worker -> hook = ( VPxWorkerHook ) frame_worker_hook ; if ( ! winterface -> reset ( worker ) ) { set_error_detail ( ctx , ""Frame<S2SV_blank>Worker<S2SV_blank>thread<S2SV_blank>creation<S2SV_blank>failed"" ) ; return VPX_CODEC_MEM_ERROR ; } } <S2SV_ModEnd> <S2SV_ModStart> return VPX_CODEC_OK ; "
3102,<S2SV_StartBug> mptctl_eventreport ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> MPT_ADAPTER * ioc ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> ,"<S2SV_ModStart> MPT_ADAPTER * ioc , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3103,<S2SV_StartBug> char data [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> * data ; data = kmalloc ( 8 , GFP_KERNEL ) ; if ( ! data ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> ret = - EIO ; goto out <S2SV_ModEnd> <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> goto out ; } ret = snprintf ( buf , PAGE_SIZE , ""%d\\n"" , current_profile ) ; out : kfree ( data ) ; return ret <S2SV_ModEnd> "
3104,<S2SV_StartBug> r = - ENOMEM ; <S2SV_EndBug> ,<S2SV_ModStart> EINVAL ; if ( atomic_read ( & kvm -> online_vcpus ) ) goto create_irqchip_unlock ; r = - 
3105,<S2SV_StartBug> if ( node -> v == & node -> sorted ) <S2SV_EndBug> <S2SV_StartBug> tr_free ( node -> sorted . val . l . vals ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> TR_ASSERT ( node != NULL ) ; <S2SV_ModStart> sorted != NULL <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> tr_free ( node -> sorted ) ; 
3106,<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * param_count ) ; <S2SV_EndBug> ,"<S2SV_ModStart> size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , param_count , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> alloc_size <S2SV_ModEnd> "
3107,"<S2SV_StartBug> if ( fscanf ( fp , ""<S2SV_blank>Number<S2SV_blank>of<S2SV_blank>pts<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>format<S2SV_blank>=<S2SV_blank>%s\\n"" , & n , typestr ) != 2 ) <S2SV_EndBug> ","<S2SV_ModStart> ""<S2SV_blank>Number<S2SV_blank>of<S2SV_blank>pts<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>format<S2SV_blank>=<S2SV_blank>%127s\\n"" <S2SV_ModEnd> "
3108,<S2SV_StartBug> switch ( * arg ) { <S2SV_EndBug> <S2SV_StartBug> case '\\n' : <S2SV_EndBug> <S2SV_StartBug> * b ++ = * arg ; <S2SV_EndBug> ,<S2SV_ModStart> char ch = * arg ; switch ( ch <S2SV_ModEnd> <S2SV_ModStart> '=' : case <S2SV_ModStart> ch <S2SV_ModEnd> 
3109,"<S2SV_StartBug> ThrowReaderException ( CorruptImageError , ""UnableToReadImageData"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart> } 
3110,<S2SV_StartBug> return in ; <S2SV_EndBug> ,<S2SV_ModStart> NULL <S2SV_ModEnd> 
3111,<S2SV_StartBug> if ( setpwnam ( pw ) < 0 ) <S2SV_EndBug> ,"<S2SV_ModStart> , "".chsh"" "
3112,"<S2SV_StartBug> diff = ndpi_min ( packet -> payload_packet_len - a1 , sizeof ( flow -> initial_binary_bytes ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( diff > 0 ) { <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> diff = ndpi_min ( diff , sizeof ( flow -> initial_binary_bytes ) ) ; "
3113,<S2SV_StartBug> if ( ! ( ret = r_list_newf ( ( RListFree ) free ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ut32 len = sec -> payload_len ; <S2SV_EndBug> <S2SV_StartBug> while ( i < len && r < count ) { <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ut32 len = sec -> payload_len ; <S2SV_ModStart> int buflen = bin -> buf -> length - ( ut32 ) sec -> payload_data <S2SV_ModEnd> <S2SV_ModStart> && len < buflen <S2SV_ModStart> goto beach ; } if ( i + 4 >= buflen ) { goto beach <S2SV_ModEnd> <S2SV_ModStart> goto beach <S2SV_ModEnd> <S2SV_ModStart> goto beach ; } if ( i + 4 >= buflen ) { goto beach <S2SV_ModEnd> <S2SV_ModStart> beach : free ( ptr ) ; return ret ; 
3114,<S2SV_StartBug> string -> space = 1 ; <S2SV_EndBug> <S2SV_StartBug> string -> space *= 2 ; <S2SV_EndBug> <S2SV_StartBug> if ( string -> space < 0 ) <S2SV_EndBug> <S2SV_StartBug> new_len = string -> space = G_MAXINT - 8 ; <S2SV_EndBug> ,"<S2SV_ModStart> { <S2SV_ModStart> 4 ; } else { const guint max_space = MIN ( G_MAXINT , G_MAXSIZE / MAX ( sizeof ( PangoGlyphInfo ) , sizeof ( gint ) ) ) ; guint more_space = ( guint ) <S2SV_ModEnd> <S2SV_ModStart> * <S2SV_ModEnd> <S2SV_ModStart> more_space > max_space ) { more_space = max_space ; if ( ( guint ) new_len > max_space ) { g_error ( ""%s:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>glyph<S2SV_blank>string<S2SV_blank>of<S2SV_blank>length<S2SV_blank>%i\\n"" , G_STRLOC , new_len ) ; } } <S2SV_ModEnd> <S2SV_ModStart> more_space <S2SV_ModEnd> "
3115,<S2SV_StartBug> if ( ! ( ret = r_list_newf ( ( RListFree ) free ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ut32 len = sec -> payload_len ; <S2SV_EndBug> <S2SV_StartBug> while ( i < len && r < count ) { <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ut32 len = sec -> payload_len ; <S2SV_ModStart> int buflen = bin -> buf -> length - ( ut32 ) sec -> payload_data <S2SV_ModEnd> <S2SV_ModStart> && len < buflen <S2SV_ModStart> goto beach ; } if ( i + 4 >= buflen ) { goto beach <S2SV_ModEnd> <S2SV_ModStart> goto beach <S2SV_ModEnd> <S2SV_ModStart> goto beach ; } if ( i + 4 >= buflen ) { goto beach <S2SV_ModEnd> <S2SV_ModStart> beach : free ( ptr ) ; return ret ; 
3116,<S2SV_StartBug> ufs -> upper_mnt = clone_private_mount ( & upperpath ) ; <S2SV_EndBug> ,"<S2SV_ModStart> sb -> s_stack_depth = max ( upperpath . mnt -> mnt_sb -> s_stack_depth , lowerpath . mnt -> mnt_sb -> s_stack_depth ) + 1 ; err = - EINVAL ; if ( sb -> s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH ) { pr_err ( ""overlayfs:<S2SV_blank>maximum<S2SV_blank>fs<S2SV_blank>stacking<S2SV_blank>depth<S2SV_blank>exceeded\\n"" ) ; goto out_put_workpath ; } "
3117,"<S2SV_StartBug> if ( ! kvm_read_cr4_bits ( vcpu , X86_CR4_VMXE ) ) { <S2SV_EndBug> ","<S2SV_ModStart> ) ) { kvm_queue_exception ( vcpu , UD_VECTOR ) ; return 1 ; } if ( vmx_get_cpl ( vcpu "
3118,<S2SV_StartBug> r = verify_vc_kbmode ( fd ) ; <S2SV_EndBug> ,<S2SV_ModStart> vt_verify_kbmode <S2SV_ModEnd> 
3119,"<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> ptr = cp [ 2 ] - 1 ; <S2SV_EndBug> <S2SV_StartBug> switch ( cp [ 3 ] & 0xF ) { <S2SV_EndBug> <S2SV_StartBug> type = ""<S2SV_blank>^<S2SV_blank>"" ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> ( 0 ) <S2SV_ModStart> ND_TCHECK ( cp [ 2 ] ) ; <S2SV_ModStart> ND_TCHECK ( cp [ 3 ] ) ; <S2SV_ModStart> ; ND_TCHECK2 ( cp [ len ] , hoplen ) <S2SV_ModStart> return ( 0 ) ; trunc : return ( - 1 ) ; "
3120,<S2SV_StartBug> local_bh_disable ( ) ; <S2SV_EndBug> <S2SV_StartBug> local_bh_enable ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> spin_lock_bh ( & net -> sctp . addr_wq_lock <S2SV_ModEnd> <S2SV_ModStart> spin_unlock_bh ( & net -> sctp . addr_wq_lock <S2SV_ModEnd> 
3121,"<S2SV_StartBug> hlist_add_head ( & mp -> mglist , & br -> mglist ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( hlist_unhashed ( & mp -> mglist ) ) 
3122,"<S2SV_StartBug> vt -> allocator = funcs ; <S2SV_EndBug> <S2SV_StartBug> vt -> outbuffer_len = 200 ; <S2SV_EndBug> <S2SV_StartBug> vt -> outbuffer = vterm_allocator_malloc ( vt , vt -> outbuffer_len ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( vt == NULL ) return NULL ; <S2SV_ModStart> if ( vt -> parser . strbuffer == NULL ) { vterm_allocator_free ( vt , vt ) ; return NULL ; } <S2SV_ModStart> if ( vt -> outbuffer == NULL ) { vterm_allocator_free ( vt , vt -> parser . strbuffer ) ; vterm_allocator_free ( vt , vt ) ; return NULL ; } "
3123,"<S2SV_StartBug> struct ext4_extent * ex , newex , orig_ex ; <S2SV_EndBug> <S2SV_StartBug> unsigned int allocated , ee_len , depth ; <S2SV_EndBug> <S2SV_StartBug> allocated = ee_len - ( map -> m_lblk - ee_block ) ; <S2SV_EndBug> <S2SV_StartBug> may_zeroout = ee_block + ee_len <= eof_block ; <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_get_access ( handle , inode , path + depth ) ; <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_insert_extent ( handle , inode , path , ex3 , flags ) ; <S2SV_EndBug> ","<S2SV_ModStart> ext4_lblk_t eof_block ; ext4_lblk_t ee_block ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ee_len ; int split_flag = 0 , depth <S2SV_ModEnd> <S2SV_ModStart> split_flag |= <S2SV_ModEnd> <S2SV_ModStart> ? EXT4_EXT_MAY_ZEROOUT : 0 ; split_flag |= EXT4_EXT_MARK_UNINIT2 ; flags |= EXT4_GET_BLOCKS_PRE_IO ; return ext4_split_extent <S2SV_ModEnd> <S2SV_ModStart> , map , split_flag <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3124,"<S2SV_StartBug> encT ) ; <S2SV_EndBug> <S2SV_StartBug> return _gcry_aes_arm_encrypt_block ( ctx -> keyschenc , bx , ax , ctx -> rounds , encT ) ; <S2SV_EndBug> ",<S2SV_ModStart> enc_tables . T <S2SV_ModEnd> <S2SV_ModStart> enc_tables . T <S2SV_ModEnd> 
3125,"<S2SV_StartBug> struct strbuf * path , const char * component , <S2SV_EndBug> <S2SV_StartBug> finish_object ( obj , path , component , cb_data ) ; <S2SV_EndBug> <S2SV_StartBug> show_object_with_name ( stdout , obj , path , component ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> 
3126,<S2SV_StartBug> r -> rtm_flags |= RTM_F_NOTIFY ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( IPCB ( skb ) -> flags & IPSKB_DOREDIRECT ) r -> rtm_flags |= RTCF_DOREDIRECT 
3127,"<S2SV_StartBug> if ( X509_check_host ( cert , common_name , FIELD_SIZE , 0 , NULL ) ) <S2SV_EndBug> ",<S2SV_ModStart> == 1 
3128,"<S2SV_StartBug> static inline bool unconditional ( const struct ipt_ip * ip ) <S2SV_EndBug> <S2SV_StartBug> return memcmp ( ip , & uncond , sizeof ( uncond ) ) == 0 ; <S2SV_EndBug> ",<S2SV_ModStart> ipt_entry * e <S2SV_ModEnd> <S2SV_ModStart> e -> target_offset == sizeof ( struct ipt_entry ) && memcmp ( & e -> <S2SV_ModEnd> 
3129,<S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> av_freep ( & x -> buf ) ; x -> buf_size = 0 ; 
3130,"<S2SV_StartBug> u64 nsec = ( u64 ) jiffies * TICK_NSEC ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & tv_usec ) ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_usec = tv_usec ; <S2SV_EndBug> ","<S2SV_ModStart> u32 rem ; value -> tv_sec = div_u64_rem ( <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> rem ) <S2SV_ModEnd> <S2SV_ModStart> rem / NSEC_PER_USEC <S2SV_ModEnd> "
3131,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> tty -> disc_data = NULL ; tty -> receive_room = 0 ; 
3132,<S2SV_StartBug> init_thread : <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! test_opt ( sbi , FLUSH_MERGE ) ) return err ; "
3133,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> else if ( auth_end == FIND_AUTH_END_ABORT ) { buffer_unref ( buffer ) ; if ( client -> proxy -> log_messages ) g_print ( ""Invalid<S2SV_blank>AUTH<S2SV_blank>line,<S2SV_blank>aborting\\n"" ) ; side_closed ( side ) ; break ; } "
3134,"<S2SV_StartBug> struct mb_cache_entry * ce = NULL ; <S2SV_EndBug> <S2SV_StartBug> int error = 0 ; <S2SV_EndBug> <S2SV_StartBug> ea_bdebug ( bh , ""refcount<S2SV_blank>now=0;<S2SV_blank>freeing"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ce ) <S2SV_EndBug> <S2SV_StartBug> if ( ce ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> __u32 hash = le32_to_cpu ( BHDR ( bh ) -> h_hash ) ; <S2SV_ModStart> mb2_cache_entry_delete_block ( EXT4_GET_MB_CACHE ( inode ) , hash , bh -> b_blocknr <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3135,<S2SV_StartBug> p -> y . pTab = pItem -> pTab ; <S2SV_EndBug> <S2SV_StartBug> testcase ( iCol == BMS ) ; <S2SV_EndBug> <S2SV_StartBug> return p ; <S2SV_EndBug> ,<S2SV_ModStart> Table * pTab = <S2SV_ModStart> if ( pTab -> tabFlags & TF_HasGenerated ) { Column * pColumn = pTab -> aCol + iCol ; if ( pColumn -> colFlags & COLFLAG_GENERATED ) { testcase ( pTab -> nCol == 63 ) ; testcase ( pTab -> nCol == 64 ) ; if ( pTab -> nCol >= 64 ) { pItem -> colUsed = ALLBITS ; } else { pItem -> colUsed = MASKBIT ( pTab -> nCol ) - 1 ; } } } else { <S2SV_ModStart> } 
3136,<S2SV_StartBug> pStorage -> mbLayer = ( macroblockLayer_t * ) H264SwDecMalloc ( size ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , 1 "
3137,"<S2SV_StartBug> vpx_memcpy ( mbd -> segment_feature_data , xd -> segment_feature_data , sizeof ( xd -> segment_feature_data ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> ref_lf_deltas , xd -> ref_lf_deltas , sizeof ( xd -> ref_lf_deltas ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> mode_lf_deltas , xd -> mode_lf_deltas , sizeof ( xd -> mode_lf_deltas ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> dequant_y1_dc , xd -> dequant_y1_dc , sizeof ( xd -> dequant_y1_dc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> dequant_y1 , xd -> dequant_y1 , sizeof ( xd -> dequant_y1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> dequant_y2 , xd -> dequant_y2 , sizeof ( xd -> dequant_y2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> dequant_uv , xd -> dequant_uv , sizeof ( xd -> dequant_uv ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
3138,"<S2SV_StartBug> raw_ptr = ( unsigned char * ) ( raw_buffer -> y_buffer + recon_yoffset <S2SV_EndBug> <S2SV_StartBug> vp8_mse16x16 ( src_ptr , src_stride , raw_ptr , raw_stride , <S2SV_EndBug> <S2SV_StartBug> vp8_mse16x16 ( src_ptr , src_stride , ref_ptr , ref_stride , <S2SV_EndBug> ",<S2SV_ModStart> ( void ) cpi ; <S2SV_ModStart> vpx_mse16x16 <S2SV_ModEnd> <S2SV_ModStart> vpx_mse16x16 <S2SV_ModEnd> 
3139,"<S2SV_StartBug> static vpx_codec_err_t vp8e_set_roi_map ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3140,"<S2SV_StartBug> int cflags = REG_EXTENDED | REG_NOSUB ; <S2SV_EndBug> <S2SV_StartBug> if ( regexec ( & preg , string , 0 , NULL , 0 ) != 0 ) <S2SV_EndBug> ",<S2SV_ModStart> ; int ret <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> ; regfree ( & preg ) ; if ( ret 
3141,<S2SV_StartBug> if ( SSL_USE_ETM ( s ) && s -> read_hash ) { <S2SV_EndBug> <S2SV_StartBug> ( EVP_MD_CTX_md ( s -> read_hash ) != NULL ) && ! SSL_USE_ETM ( s ) ) { <S2SV_EndBug> ,<S2SV_ModStart> SSL_READ_ETM <S2SV_ModEnd> <S2SV_ModStart> ! SSL_READ_ETM ( s ) && <S2SV_ModStart>  <S2SV_ModEnd> 
3142,"<S2SV_StartBug> static unsigned int XBMInteger ( Image * image , short int * hex_digits ) <S2SV_EndBug> <S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> return ( value ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> - 1 <S2SV_ModEnd> <S2SV_ModStart> - 1 <S2SV_ModEnd> <S2SV_ModStart> ( int ) 
3143,<S2SV_StartBug> struct completion * vfork_done = tsk -> vfork_done ; <S2SV_EndBug> ,<S2SV_ModStart> # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif # endif 
3144,<S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> ,<S2SV_ModStart> status = MagickFalse ; break <S2SV_ModEnd> 
3145,"<S2SV_StartBug> len = min_t ( unsigned int , len , sizeof ( sec ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> sec . key_size = 0 ; 
3146,"<S2SV_StartBug> char buf [ MAX_PKT_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> len = recvfrom ( sd , buf , sizeof ( buf ) , MSG_DONTWAIT , & sa , & salen ) ; <S2SV_EndBug> <S2SV_StartBug> buf [ len ] = 0 ; <S2SV_EndBug> ",<S2SV_ModStart> + 1 <S2SV_ModStart> - 1 <S2SV_ModStart>  <S2SV_ModEnd> 
3147,"<S2SV_StartBug> * prev = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vma -> vm_file || ! vma -> vm_file -> f_mapping <S2SV_EndBug> <S2SV_StartBug> || ! vma -> vm_file -> f_mapping -> host ) { <S2SV_EndBug> <S2SV_StartBug> up_read ( & current -> mm -> mmap_sem ) ; <S2SV_EndBug> <S2SV_StartBug> error = do_fallocate ( vma -> vm_file , <S2SV_EndBug> <S2SV_StartBug> offset , end - start ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct file * f ; <S2SV_ModStart> f = vma -> vm_file ; <S2SV_ModStart> f || ! f <S2SV_ModEnd> <S2SV_ModStart> f <S2SV_ModEnd> <S2SV_ModStart> get_file ( f ) ; <S2SV_ModStart> f <S2SV_ModEnd> <S2SV_ModStart> ) ; fput ( f 
3148,"<S2SV_StartBug> err = - EMSGSIZE ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> hdrincl ) <S2SV_EndBug> <S2SV_StartBug> inet -> hdrincl ? IPPROTO_RAW : sk -> sk_protocol , <S2SV_EndBug> <S2SV_StartBug> ( inet -> hdrincl ? FLOWI_FLAG_KNOWN_NH : 0 ) , <S2SV_EndBug> <S2SV_StartBug> if ( ! inet -> hdrincl ) { <S2SV_EndBug> <S2SV_StartBug> if ( inet -> hdrincl ) <S2SV_EndBug> ",<S2SV_ModStart> int hdrincl ; <S2SV_ModStart> ; hdrincl = inet -> hdrincl <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3149,"<S2SV_StartBug> size_t count , const uint64_t clsid [ 2 ] ) <S2SV_EndBug> <S2SV_StartBug> if ( ! NOTMIME ( ms ) ) <S2SV_EndBug> <S2SV_StartBug> str = cdf_clsid_to_mime ( clsid , clsid2mime ) ; <S2SV_EndBug> ",<S2SV_ModStart> cdf_directory_t * root_storage <S2SV_ModEnd> <S2SV_ModStart> && root_storage <S2SV_ModStart> root_storage -> d_storage_uuid <S2SV_ModEnd> 
3150,<S2SV_StartBug> struct mount * parent = ACCESS_ONCE ( mnt -> mnt_parent ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( dentry != vfsmnt -> mnt_root ) { bptr = * buffer ; blen = * buflen ; error = 3 ; break ; } 
3151,<S2SV_StartBug> return ( mhlen ) ; <S2SV_EndBug> ,<S2SV_ModStart> - 1 <S2SV_ModEnd> 
3152,"<S2SV_StartBug> static bool tailmatch ( const char * little , const char * bigone ) <S2SV_EndBug> <S2SV_StartBug> size_t littlelen = strlen ( little ) ; <S2SV_EndBug> <S2SV_StartBug> size_t biglen = strlen ( bigone ) ; <S2SV_EndBug> <S2SV_StartBug> if ( littlelen > biglen ) <S2SV_EndBug> <S2SV_StartBug> return Curl_raw_equal ( little , bigone + biglen - littlelen ) ? TRUE : FALSE ; <S2SV_EndBug> ","<S2SV_ModStart> cooke_domain <S2SV_ModEnd> <S2SV_ModStart> hostname <S2SV_ModEnd> <S2SV_ModStart> cookie_domain_len <S2SV_ModEnd> <S2SV_ModStart> cooke_domain <S2SV_ModEnd> <S2SV_ModStart> hostname_len <S2SV_ModEnd> <S2SV_ModStart> hostname <S2SV_ModEnd> <S2SV_ModStart> hostname_len < cookie_domain_len <S2SV_ModEnd> <S2SV_ModStart> if ( ! Curl_raw_equal ( cooke_domain , hostname + hostname_len - cookie_domain_len ) ) return FALSE ; if ( hostname_len == cookie_domain_len ) return TRUE ; if ( '.' == * ( hostname + hostname_len - cookie_domain_len - 1 ) ) return TRUE ; return <S2SV_ModEnd> "
3153,<S2SV_StartBug> if ( ! values [ k ] . name ) <S2SV_EndBug> ,<S2SV_ModStart> { continue ; } <S2SV_ModEnd> 
3154,<S2SV_StartBug> siz -> comps [ i ] . sgnd = ( tmp >> 7 ) & 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( siz -> comps [ i ] . hsamp == 0 || siz -> comps [ i ] . hsamp > 255 ) { jas_eprintf ( ""invalid<S2SV_blank>XRsiz<S2SV_blank>value<S2SV_blank>%d\\n"" , siz -> comps [ i ] . hsamp ) ; jas_free ( siz -> comps ) ; return - 1 ; } if ( siz -> comps [ i ] . vsamp == 0 || siz -> comps [ i ] . vsamp > 255 ) { jas_eprintf ( ""invalid<S2SV_blank>YRsiz<S2SV_blank>value<S2SV_blank>%d\\n"" , siz -> comps [ i ] . vsamp ) ; jas_free ( siz -> comps ) ; return - 1 ; } "
3155,<S2SV_StartBug> s -> s3 -> flags &= ~ TLS1_FLAGS_ENCRYPT_THEN_MAC ; <S2SV_EndBug> <S2SV_StartBug> s -> s3 -> flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC ; <S2SV_EndBug> ,<S2SV_ModStart> tlsext_use_etm = 0 <S2SV_ModEnd> <S2SV_ModStart> tlsext_use_etm = 1 <S2SV_ModEnd> 
3156,"<S2SV_StartBug> int cond_len , then_len , jump_len ; <S2SV_EndBug> <S2SV_StartBug> jump_len = cond_len + then_len + SIZE_OP_ATOMIC_END ; <S2SV_EndBug> <S2SV_StartBug> int else_len = compile_length_tree ( Else , reg ) ; <S2SV_EndBug> <S2SV_StartBug> COP ( reg ) -> jump . addr = else_len + SIZE_INC_OP ; <S2SV_EndBug> <S2SV_StartBug> r = compile_tree ( Else , reg , env ) ; <S2SV_EndBug> ","<S2SV_ModStart> else_len , <S2SV_ModStart> + <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( else_len < 0 ) return else_len ; } else else_len = 0 <S2SV_ModStart> SIZE_OP_ATOMIC_END + <S2SV_ModStart> add_op ( reg , OP_ATOMIC_END ) ; if ( r != 0 ) return r ; if ( IS_NOT_NULL ( Else ) ) { r = "
3157,<S2SV_StartBug> int valuelen = args -> valuelen ; <S2SV_EndBug> <S2SV_StartBug> ASSERT ( ! ( args -> flags & ATTR_KERNOVAL ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; ASSERT ( args -> rmtvaluelen == args -> valuelen ) ; valuelen = args -> rmtvaluelen 
3158,"<S2SV_StartBug> if ( -- container_of ( ptr , struct ipc_rcu_hdr , data ) -> refcount > 0 ) <S2SV_EndBug> ",<S2SV_ModStart> ! atomic_dec_and_test ( & <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModEnd> 
3159,<S2SV_StartBug> ND_TCHECK ( * ext ) ; <S2SV_EndBug> ,<S2SV_ModStart> k <S2SV_ModEnd> 
3160,"<S2SV_StartBug> static int expandRegular ( rpmfi fi , const char * dest , rpmpsm psm , int nodigest , int nocontent ) <S2SV_EndBug> <S2SV_StartBug> wfd = Fopen ( dest , ""w.ufdio"" ) ; <S2SV_EndBug> <S2SV_StartBug> umask ( old_umask ) ; <S2SV_EndBug> ","<S2SV_ModStart> , int exclusive <S2SV_ModStart> exclusive ? ""wx.ufdio"" : ""a.ufdio"" <S2SV_ModEnd> <S2SV_ModStart> if ( ! exclusive && wfd != NULL && ! linkSane ( wfd , dest ) ) { rc = RPMERR_OPEN_FAILED ; goto exit ; } "
3161,<S2SV_StartBug> image -> inmem_ = true ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3162,<S2SV_StartBug> if ( prefixlen < len ) { <S2SV_EndBug> ,<S2SV_ModStart> <= <S2SV_ModEnd> 
3163,<S2SV_StartBug> if ( label_exec ( opt_exec_label ) == - 1 ) <S2SV_EndBug> ,"<S2SV_ModStart> setsid ( ) == ( pid_t ) - 1 ) die_with_error ( ""setsid"" ) ; if ( "
3164,"<S2SV_StartBug> chip -> data_buffer = kmalloc ( TPM_BUFSIZE * sizeof ( u8 ) , GFP_KERNEL ) ; <S2SV_EndBug> ",<S2SV_ModStart> kzalloc ( TPM_BUFSIZE <S2SV_ModEnd> 
3165,"<S2SV_StartBug> set_bit ( HCI_UART_PROTO_READY , & hu -> flags ) ; <S2SV_EndBug> <S2SV_StartBug> clear_bit ( HCI_UART_PROTO_READY , & hu -> flags ) ; <S2SV_EndBug> <S2SV_StartBug> return err ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return err ; } set_bit <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3166,<S2SV_StartBug> line += PKT_LEN_SIZE ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len != 0 && len < PKT_LEN_SIZE ) return GIT_ERROR ; 
3167,<S2SV_StartBug> ut32 len = sec -> payload_len ; <S2SV_EndBug> <S2SV_StartBug> while ( i < len && r < count ) { <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> int buflen = bin -> buf -> length - ( ut32 ) sec -> payload_data ; <S2SV_ModStart> && len < buflen <S2SV_ModStart> goto beach <S2SV_ModEnd> <S2SV_ModStart> goto beach <S2SV_ModEnd> <S2SV_ModStart> goto beach <S2SV_ModEnd> <S2SV_ModStart> beach : free ( ptr ) ; return ret ; 
3168,"<S2SV_StartBug> if ( AcquireImageColormap ( image , image -> colors ) == MagickFalse ) <S2SV_EndBug> <S2SV_StartBug> status = SetImageExtent ( image , image -> columns , image -> rows ) ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ","<S2SV_ModStart> image -> colormap = ( PixelPacket * ) AcquireQuantumMemory ( <S2SV_ModEnd> <S2SV_ModStart> + 1 , sizeof ( * image -> colormap ) ) ; if ( image -> colormap == ( PixelPacket * ) NULL <S2SV_ModEnd> <S2SV_ModStart> if ( ( AcquireMagickResource ( WidthResource <S2SV_ModEnd> <S2SV_ModStart> ) == MagickFalse ) || ( AcquireMagickResource ( HeightResource <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) ThrowReaderException ( ImageError , ""WidthOrHeightExceedsLimit"" ) ; <S2SV_ModEnd> "
3169,<S2SV_StartBug> struct ip_options * sopt ; <S2SV_EndBug> <S2SV_StartBug> if ( sopt -> optlen == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> const <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3170,<S2SV_StartBug> unsigned long size ) <S2SV_EndBug> <S2SV_StartBug> end_gfn = gfn + ( size >> PAGE_SHIFT ) ; <S2SV_EndBug> ,<S2SV_ModStart> npages <S2SV_ModEnd> <S2SV_ModStart> npages <S2SV_ModEnd> 
3171,"<S2SV_StartBug> res = ctx -> iface -> enc . cfg_set ( ctx -> priv -> alg_priv , cfg ) ; <S2SV_EndBug> ",<S2SV_ModStart> get_alg_priv ( ctx ) <S2SV_ModEnd> 
3172,<S2SV_StartBug> status = sctp_v4_protosw_init ( ) ; <S2SV_EndBug> <S2SV_StartBug> status = register_pernet_subsys ( & sctp_net_ops ) ; <S2SV_EndBug> <S2SV_StartBug> unregister_pernet_subsys ( & sctp_net_ops ) ; <S2SV_EndBug> <S2SV_StartBug> err_protosw_init : <S2SV_EndBug> ,<S2SV_ModStart> register_pernet_subsys ( & sctp_defaults_ops ) ; if ( status ) goto err_register_defaults ; status = <S2SV_ModStart> sctp_ctrlsock_ops ) ; if ( status ) goto err_register_ctrlsock <S2SV_ModEnd> <S2SV_ModStart> sctp_ctrlsock_ops ) ; err_register_ctrlsock <S2SV_ModEnd> <S2SV_ModStart> : unregister_pernet_subsys ( & sctp_defaults_ops ) ; err_register_defaults 
3173,<S2SV_StartBug> bpm = nlmsg_data ( nlh ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; memset ( bpm , 0 , sizeof ( * bpm ) "
3174,<S2SV_StartBug> * flags &= ~ FOLL_WRITE ; <S2SV_EndBug> ,<S2SV_ModStart> |= FOLL_COW <S2SV_ModEnd> 
3175,"<S2SV_StartBug> int16_t * const dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> xd -> itxm_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { x -> highbd_itxm_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] , xd -> bd ) ; return ; } # endif x <S2SV_ModEnd> <S2SV_ModStart> } "
3176,"<S2SV_StartBug> void vp9_idct8x8_add ( const int16_t * input , uint8_t * dest , int stride , int eob ) { <S2SV_EndBug> <S2SV_StartBug> vp9_idct8x8_1_add ( input , dest , stride ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( eob <= 10 ) <S2SV_EndBug> <S2SV_StartBug> vp9_idct8x8_64_add ( input , dest , stride ) ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> vpx_idct8x8_1_add <S2SV_ModEnd> <S2SV_ModStart> 12 ) vpx_idct8x8_12_add <S2SV_ModEnd> <S2SV_ModStart> vpx_idct8x8_64_add <S2SV_ModEnd> 
3177,"<S2SV_StartBug> strcpy ( the_url , evt -> navigate . to_url ) ; <S2SV_EndBug> ","<S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> , sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 <S2SV_ModEnd> "
3178,<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> keymap -> num_key_aliases = num_key_aliases ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } 
3179,"<S2SV_StartBug> static inline struct enamemem * <S2SV_EndBug> <S2SV_StartBug> struct enamemem * tp ; <S2SV_EndBug> <S2SV_StartBug> while ( tp -> e_nxt ) <S2SV_EndBug> <S2SV_StartBug> tp -> e_addr1 == j && <S2SV_EndBug> <S2SV_StartBug> tp -> e_addr2 == k && <S2SV_EndBug> <S2SV_StartBug> memcmp ( ( const char * ) bs , ( const char * ) ( tp -> e_bs ) , nlen ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> tp = tp -> e_nxt ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_bs == NULL ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( tp -> e_bs , bs , nlen ) ; <S2SV_EndBug> <S2SV_StartBug> tp -> e_nxt = ( struct enamemem * ) calloc ( 1 , sizeof ( * tp ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_nxt == NULL ) <S2SV_EndBug> ","<S2SV_ModStart> bsnamemem <S2SV_ModEnd> <S2SV_ModStart> bsnamemem <S2SV_ModEnd> <S2SV_ModStart> bs_nxt ) if ( nlen == tp -> bs_nbytes <S2SV_ModEnd> <S2SV_ModStart> bs_addr0 == i <S2SV_ModEnd> <S2SV_ModStart> bs_addr1 == j && tp -> bs_addr2 <S2SV_ModEnd> <S2SV_ModStart> bs_bytes <S2SV_ModEnd> <S2SV_ModStart> bs_nxt ; tp -> bs_addr0 = i ; tp -> bs_addr1 = j ; tp -> bs_addr2 = k ; tp -> bs_bytes <S2SV_ModEnd> <S2SV_ModStart> bs_bytes <S2SV_ModEnd> <S2SV_ModStart> bs_bytes , bs , nlen ) ; tp -> bs_nbytes = nlen ; tp -> bs_nxt <S2SV_ModEnd> <S2SV_ModStart> bsnamemem <S2SV_ModEnd> <S2SV_ModStart> bs_nxt <S2SV_ModEnd> "
3180,"<S2SV_StartBug> printf ( ""Using<S2SV_blank>%s\\n"" , vpx_codec_iface_name ( encoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> res = vpx_codec_enc_config_default ( encoder -> interface ( ) , & cfg , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_enc_init ( & codec , encoder -> interface ( ) , & cfg , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> encode_frame ( & codec , NULL , - 1 , 0 , writer ) ; <S2SV_EndBug> ",<S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> while ( <S2SV_ModStart> ) { } 
3181,<S2SV_StartBug> avail = vec -> iov_len - ( old - ( char * ) vec -> iov_base ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ( void * ) old > vec -> iov_base + vec -> iov_len ) return 0 ; 
3182,"<S2SV_StartBug> recv ( signal_fds [ 0 ] , & sig_recv , sizeof ( sig_recv ) , MSG_WAITALL ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3183,"<S2SV_StartBug> void Huff_offsetTransmit ( huff_t * huff , int ch , byte * fout , int * offset ) { <S2SV_EndBug> <S2SV_StartBug> send ( huff -> loc [ ch ] , NULL , fout ) ; <S2SV_EndBug> ","<S2SV_ModStart> , int maxoffset <S2SV_ModStart> , maxoffset "
3184,<S2SV_StartBug> box -> info = boxinfo ; <S2SV_EndBug> <S2SV_StartBug> box -> ops = & jp2_boxinfo_unk . ops ; <S2SV_EndBug> <S2SV_StartBug> jas_stream_rewind ( tmpstream ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; box -> ops = & boxinfo -> ops 
3185,"<S2SV_StartBug> struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> 
3186,<S2SV_StartBug> if ( key_is_instantiated ( key ) && <S2SV_EndBug> ,<S2SV_ModStart> key_is_positive <S2SV_ModEnd> 
3187,"<S2SV_StartBug> int res , bytes , i , indexes , index_bytes , ids ; <S2SV_EndBug> <S2SV_StartBug> if ( flag ) { <S2SV_EndBug> <S2SV_StartBug> return id_table . xattr_ids ; <S2SV_EndBug> <S2SV_StartBug> res = read_fs_bytes ( fd , sBlk -> xattr_id_table_start + sizeof ( id_table ) , <S2SV_EndBug> <S2SV_StartBug> bytes = SQUASHFS_XATTR_BYTES ( ids ) ; <S2SV_EndBug> <S2SV_StartBug> ( i * SQUASHFS_METADATA_SIZE ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> i , indexes , index_bytes ; unsigned int ids ; long long bytes <S2SV_ModEnd> <S2SV_ModStart> ids = id_table . xattr_ids ; xattr_table_start <S2SV_ModEnd> <S2SV_ModStart> index_bytes = SQUASHFS_XATTR_BLOCK_BYTES ( ( long long ) ids ) ; indexes = SQUASHFS_XATTR_BLOCKS ( ( long long ) ids ) ; if ( index_bytes != ( sBlk -> bytes_used - ( <S2SV_ModEnd> <S2SV_ModStart> ) ) ) { ERROR ( ""read_xattrs_from_disk:<S2SV_blank>Bad<S2SV_blank>xattr_ids<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; return 0 ; } if ( table_start != NULL ) * table_start = id_table . xattr_table_start ; if ( flag ) return id_table . xattr_ids ; index = malloc ( index_bytes ) ; if ( index == NULL ) MEM_ERROR ( ) ; res = read_fs_bytes ( fd , sBlk -> xattr_id_table_start + sizeof ( id_table ) <S2SV_ModStart> ( long long ) <S2SV_ModStart> ( long long ) "
3188,"<S2SV_StartBug> int result = RLC_OK ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( ! bn_is_zero ( t ) ) { <S2SV_EndBug> <S2SV_StartBug> result = RLC_ERR ; <S2SV_EndBug> <S2SV_StartBug> pad |= h1 [ i ] - h2 [ i ] ; <S2SV_EndBug> <S2SV_StartBug> if ( result == RLC_OK ) { <S2SV_EndBug> <S2SV_StartBug> bn_mod_2b ( m , m , 8 * m_len ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( bn_cmp_dig ( t , RSA_PSS ) != RLC_EQ ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! bn_is_zero ( m ) ) { <S2SV_EndBug> <S2SV_StartBug> result = RLC_ERR ; <S2SV_EndBug> ","<S2SV_ModStart> RLC_ERR <S2SV_ModEnd> <S2SV_ModStart> result = RLC_OK ; <S2SV_ModStart> result = RLC_OK ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ^ <S2SV_ModEnd> <S2SV_ModStart> bn_mod_2b ( m , m , 8 * m_len ) ; * p_len = bn_size_bin ( m ) ; ( * p_len ) -- ; bn_rsh ( t , m , * p_len * 8 ) ; if ( pad == 0 && bn_cmp_dig ( t , 1 ) == RLC_EQ ) { result = RLC_OK <S2SV_ModEnd> <S2SV_ModStart> * p_len * 8 ) ; * p_len = k_len - * p_len ; } <S2SV_ModEnd> <S2SV_ModStart> result = RLC_OK ; <S2SV_ModStart> result = RLC_OK ; <S2SV_ModStart> pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad == RSA_PSS ) { int r = 1 ; for ( int i = m_len ; i < 8 * k_len ; i ++ ) { if ( bn_get_bit ( m , i ) != 0 ) { r = 0 <S2SV_ModEnd> <S2SV_ModStart> r == 1 && <S2SV_ModEnd> <S2SV_ModStart> RLC_OK <S2SV_ModEnd> "
3189,"<S2SV_StartBug> MODE_INFO * * mi_8x8 , const int mode_info_stride , <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mip = mi_8x8 ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mip2 = mi_8x8 ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( * lfm ) ; <S2SV_EndBug> <S2SV_StartBug> const uint64_t mask_y = ( ( ( 1 << columns ) - 1 ) ) * 0x0101010101010101 ; <S2SV_EndBug> <S2SV_StartBug> lfm -> left_y [ i ] &= 0xfefefefefefefefe ; <S2SV_EndBug> ",<S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> ) ; assert ( mip [ 0 ] != NULL <S2SV_ModStart> 0x0101010101010101ULL <S2SV_ModEnd> <S2SV_ModStart> 0xfefefefefefefefeULL <S2SV_ModEnd> 
3190,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> cl_assert_equal_b ( false , git_path_isvalid ( NULL , "".gitmodules<S2SV_blank>.<S2SV_blank>.::$DATA"" , S_IFLNK , GIT_PATH_REJECT_DOT_GIT_NTFS ) ) ; "
3191,<S2SV_StartBug> redisAssert ( ! server . vm_enabled || obj -> storage == REDIS_VM_MEMORY ) ; <S2SV_EndBug> ,<S2SV_ModStart> ds_enabled <S2SV_ModEnd> 
3192,<S2SV_StartBug> location = ngx_list_push ( & r -> headers_out . headers ) ; <S2SV_EndBug> ,<S2SV_ModStart> r -> expect_tested = 1 ; if ( ngx_http_discard_request_body ( r ) != NGX_OK ) { r -> keepalive = 0 ; } 
3193,<S2SV_StartBug> if ( ! unconditional ( & e -> ipv6 ) ) <S2SV_EndBug> ,<S2SV_ModStart> e <S2SV_ModEnd> 
3194,<S2SV_StartBug> # endif <S2SV_EndBug> ,"<S2SV_ModStart> conf_write ( fp , ""<S2SV_blank>umask<S2SV_blank>=<S2SV_blank>0%o"" , global_data -> umask ) ; "
3195,"<S2SV_StartBug> transhdrlen , mtu , flags ) ; <S2SV_EndBug> ","<S2SV_ModStart> , rt "
3196,"<S2SV_StartBug> if ( js_regexec ( re -> prog , text , & m , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( js_regexec ( re -> prog , a , & m , a > text ? REG_NOTBOL : 0 ) ) <S2SV_EndBug> ","<S2SV_ModStart> js_doregexec ( J , <S2SV_ModEnd> <S2SV_ModStart> js_doregexec ( J , <S2SV_ModEnd> "
3197,<S2SV_StartBug> for ( i = 0 ; i < table_entries_used ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> nsv -> nsvs_file_offset [ i ] = avio_rl32 ( pb ) + size ; <S2SV_EndBug> ,<S2SV_ModStart> { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> } 
3198,"<S2SV_StartBug> static bool do_write_pids ( pid_t tpid , const char * contrl , const char * cg , const char * file , const char * buf ) <S2SV_EndBug> <S2SV_StartBug> if ( fprintf ( pids_file , ""%d"" , ( int ) cred . pid ) < 0 ) <S2SV_EndBug> ","<S2SV_ModStart> uid_t tuid , <S2SV_ModStart> ! may_move_pid ( tpid , tuid , <S2SV_ModEnd> <S2SV_ModStart> ) { fail = true ; break ; } if ( fprintf ( pids_file , ""%d"" , ( int ) cred . pid ) "
3199,"<S2SV_StartBug> u64 t = ca -> sum_rtt ; <S2SV_EndBug> <S2SV_StartBug> do_div ( t , ca -> cnt_rtt ) ; <S2SV_EndBug> <S2SV_StartBug> info . tcpv_rtt = t ; <S2SV_EndBug> ",<S2SV_ModStart> if ( info . tcpv_rttcnt > 0 ) { <S2SV_ModStart> info . tcpv_rttcnt <S2SV_ModEnd> <S2SV_ModStart> } 
3200,"<S2SV_StartBug> put_cmsg ( msg , SOL_PACKET , PACKET_AUXDATA , sizeof ( aux ) , & aux ) ; <S2SV_EndBug> ",<S2SV_ModStart> aux . tp_padding = 0 ; 
3201,<S2SV_StartBug> BUG_ON ( sk != asoc -> base . sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> goto do_error 
3202,<S2SV_StartBug> # undef _ <S2SV_EndBug> ,<S2SV_ModStart> _ ( NPNVprivateModeBool ) ; _ ( NPNVsupportsAdvancedKeyHandling ) ; 
3203,"<S2SV_StartBug> alarm_set ( alarm_timer , CONFIG_SETTLE_PERIOD_MS , timer_config_save , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart> timer_config_save_cb <S2SV_ModEnd> 
3204,"<S2SV_StartBug> while ( c && cJSON_strcasecmp ( c -> string , string ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> i ++ , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3205,"<S2SV_StartBug> if ( pt [ 6 ] & AX25_HBIT ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> source_digis [ facilities -> source_ndigis ++ ] , pt , AX25_ADDR_LEN ) ; <S2SV_EndBug> ",<S2SV_ModStart> { if ( facilities -> dest_ndigis >= ROSE_MAX_DIGIS ) return - 1 ; <S2SV_ModStart> } else { if ( facilities -> source_ndigis >= ROSE_MAX_DIGIS ) return - 1 ; <S2SV_ModEnd> <S2SV_ModStart> } 
3206,<S2SV_StartBug> hdrlen = sizeof ( * h . h2 ) ; <S2SV_EndBug> ,<S2SV_ModStart> h . h2 -> tp_padding = 0 ; 
3207,<S2SV_StartBug> goto out ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( path . mnt == exp -> ex_path . mnt && path . dentry == dentry && nfsd_mountpoint ( dentry , exp ) == 2 ) { path_put ( & path ) ; goto out ; } "
3208,"<S2SV_StartBug> list_for_each_entry_safe ( chain , nc , & ctx -> table -> chains , list ) { <S2SV_EndBug> <S2SV_StartBug> err = nft_delchain ( ctx ) ; <S2SV_EndBug> <S2SV_StartBug> list_for_each_entry_safe ( set , ns , & ctx -> table -> sets , list ) { <S2SV_EndBug> <S2SV_StartBug> if ( set -> flags & NFT_SET_ANONYMOUS && <S2SV_EndBug> ","<S2SV_ModStart> list_for_each_entry ( chain <S2SV_ModEnd> <S2SV_ModStart> } list_for_each_entry_safe ( set , ns , & ctx -> table -> sets , list ) { if ( set -> flags & NFT_SET_ANONYMOUS && ! list_empty ( & set -> bindings ) ) continue ; err = nft_delset ( ctx , set <S2SV_ModEnd> <S2SV_ModStart> chain , nc <S2SV_ModEnd> <S2SV_ModStart> chains <S2SV_ModEnd> <S2SV_ModStart> ctx -> chain = chain ; err = nft_delchain ( ctx <S2SV_ModEnd> "
3209,<S2SV_StartBug> if ( stringset == ETH_SS_STATS ) <S2SV_EndBug> ,<S2SV_ModStart> || stringset == ETH_SS_PRIV_FLAGS 
3210,<S2SV_StartBug> if ( ( ubridge_config = iniparser_load ( filename ) ) == NULL ) { <S2SV_EndBug> ,"<S2SV_ModStart> , HIDE_ERRORED_LINE_CONTENT "
3211,<S2SV_StartBug> if ( ( skb_headroom ( skb ) < frag_hdr_sz ) && <S2SV_EndBug> ,<S2SV_ModStart> skb_mac_header <S2SV_ModEnd> <S2SV_ModStart> skb -> head + 
3212,<S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; } 
3213,<S2SV_StartBug> bitlen = slen * 4 ; <S2SV_EndBug> ,"<S2SV_ModStart> { if ( slen > VARBITMAXLEN / 4 ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""bit<S2SV_blank>string<S2SV_blank>length<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , VARBITMAXLEN ) ) ) ; <S2SV_ModStart> } "
3214,"<S2SV_StartBug> int udf_get_filename ( struct super_block * sb , uint8_t * sname , uint8_t * dname , <S2SV_EndBug> <S2SV_StartBug> int flen ) <S2SV_EndBug> <S2SV_StartBug> if ( udf_build_ustr_exact ( unifilename , sname , flen ) ) <S2SV_EndBug> <S2SV_StartBug> len = udf_translate_to_linux ( dname , filename -> u_name , filename -> u_len , <S2SV_EndBug> ","<S2SV_ModStart> int slen , <S2SV_ModStart> int dlen <S2SV_ModEnd> <S2SV_ModStart> slen <S2SV_ModEnd> <S2SV_ModStart> dlen , "
3215,<S2SV_StartBug> if ( Stream_GetRemainingLength ( irp -> input ) < PathLength ) <S2SV_EndBug> <S2SV_StartBug> return ERROR_INVALID_DATA ; <S2SV_EndBug> ,"<S2SV_ModStart> ! Stream_SafeSeek ( irp -> input , PathLength ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3216,"<S2SV_StartBug> unsigned_relts_print ( ndo , EXTRACT_16BITS ( bp ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""0x%08x"" , EXTRACT_32BITS ( bp ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""v%d"" , * bp ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>?0x%04x?"" , EXTRACT_16BITS ( bp + 2 ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( olen != 2 ) { ND_PRINT ( ( ndo , ""ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>2<S2SV_blank>Bytes<S2SV_blank>(%u)"" , olen ) ) ; } else { <S2SV_ModStart> } <S2SV_ModStart> if ( olen != 4 ) { ND_PRINT ( ( ndo , ""ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>Bytes<S2SV_blank>(%u)"" , olen ) ) ; } else { <S2SV_ModStart> } <S2SV_ModStart> if ( olen != 4 ) { ND_PRINT ( ( ndo , ""ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>Bytes<S2SV_blank>(%u)"" , olen ) ) ; } else { <S2SV_ModStart> } "
3217,"<S2SV_StartBug> if ( ! strlen ( text ) ) return ""empty<S2SV_blank>string"" ; <S2SV_EndBug> ","<S2SV_ModStart> """" <S2SV_ModEnd> "
3218,"<S2SV_StartBug> arg = arg ( argname , annotation , LINENO ( ch ) , ch -> n_col_offset , <S2SV_EndBug> <S2SV_StartBug> i += 2 ; <S2SV_EndBug> ","<S2SV_ModStart> NULL , <S2SV_ModStart> 1 ; if ( TYPE ( CHILD ( n , i ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if ( ! arg -> type_comment ) goto error ; i += 1 <S2SV_ModEnd> "
3219,"<S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug> ","<S2SV_ModStart> , XEN_NETIF_RSP_OKAY "
3220,"<S2SV_StartBug> BImgBuff = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) ( ldblk ) , sizeof ( unsigned char ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> double <S2SV_ModEnd> 
3221,"<S2SV_StartBug> } else if ( strcmp ( tokens [ 1 ] . value , ""mode"" ) == 0 && ntokens >= 3 && <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( tokens [ 1 ] . value , ""temp_ttl"" ) == 0 && ntokens >= 3 && <S2SV_EndBug> ",<S2SV_ModStart> 4 <S2SV_ModEnd> <S2SV_ModStart> 4 <S2SV_ModEnd> 
3222,<S2SV_StartBug> for ( i = rows ; i < rows + 17 ; i ++ ) <S2SV_EndBug> ,<S2SV_ModStart> 0 ; i < 17 ; i ++ ) s [ ( i + rows ) <S2SV_ModEnd> 
3223,"<S2SV_StartBug> if ( name && memchr ( name , '\\0' , namelen ) ) <S2SV_EndBug> ",<S2SV_ModStart> != NULL && namelen == 0 ) namelen = strlen ( name ) ; if ( name 
3224,"<S2SV_StartBug> ( void ) mch_setperm ( curbuf -> b_ml . ml_mfp -> mf_fname , ( long ) swap_mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> { char_u * swap_fname = <S2SV_ModEnd> <S2SV_ModStart> ; if ( ( swap_mode & 044 ) == 040 ) { stat_T swap_st ; if ( mch_stat ( ( char * ) swap_fname , & swap_st ) >= 0 && st . st_gid != swap_st . st_gid && fchown ( curbuf -> b_ml . ml_mfp -> mf_fd , - 1 , st . st_gid ) == - 1 ) swap_mode &= 0600 ; } ( void ) mch_setperm ( swap_fname <S2SV_ModStart> } "
3225,<S2SV_StartBug> bpm = nlmsg_data ( nlh ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; memset ( bpm , 0 , sizeof ( * bpm ) "
3226,<S2SV_StartBug> rect . x = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . y = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . width = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . height = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . x = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . y = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . width = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . height = <S2SV_ModStart> } 
3227,"<S2SV_StartBug> int temporal_layer = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( temporal_layer = current_temporal_layer + 1 ; <S2SV_EndBug> <S2SV_StartBug> temporal_layer < svc -> number_temporal_layers ; ++ temporal_layer ) { <S2SV_EndBug> <S2SV_StartBug> LAYER_CONTEXT * lc = & svc -> layer_context [ temporal_layer ] ; <S2SV_EndBug> <S2SV_StartBug> lrc -> bits_off_target = MIN ( lrc -> bits_off_target , lc -> maximum_buffer_size ) ; <S2SV_EndBug> ","<S2SV_ModStart> i <S2SV_ModEnd> <S2SV_ModStart> i <S2SV_ModEnd> <S2SV_ModStart> i <S2SV_ModEnd> <S2SV_ModStart> i ) { const int layer = LAYER_IDS_TO_IDX ( svc -> spatial_layer_id , i , svc -> number_temporal_layers ) ; <S2SV_ModEnd> <S2SV_ModStart> layer <S2SV_ModEnd> <S2SV_ModStart> lrc <S2SV_ModEnd> "
3228,<S2SV_StartBug> get_net ( peer ) ; <S2SV_EndBug> ,<S2SV_ModStart> peer = maybe_get_net <S2SV_ModEnd> 
3229,<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> msg -> msg_namelen = 0 ; 
3230,<S2SV_StartBug> speakup_tty = tty ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ldisc_data ) <S2SV_EndBug> <S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & speakup_tty_mutex ) ; if ( speakup_tty ) { mutex_unlock ( & speakup_tty_mutex ) ; return - EBUSY ; } <S2SV_ModStart> { speakup_tty = NULL ; mutex_unlock ( & speakup_tty_mutex ) ; <S2SV_ModStart> } <S2SV_ModStart> mutex_unlock ( & speakup_tty_mutex ) ; 
3231,<S2SV_StartBug> if ( val > sysctl_wmem_max ) <S2SV_EndBug> <S2SV_StartBug> if ( ( val * 2 ) < SOCK_MIN_SNDBUF ) <S2SV_EndBug> <S2SV_StartBug> if ( val > sysctl_rmem_max ) <S2SV_EndBug> <S2SV_StartBug> if ( ( val * 2 ) < SOCK_MIN_RCVBUF ) <S2SV_EndBug> ,"<S2SV_ModStart> val = min_t ( u32 , val , sysctl_wmem_max ) <S2SV_ModEnd> <S2SV_ModStart> sk -> sk_sndbuf = max_t ( u32 , <S2SV_ModEnd> <S2SV_ModStart> , SOCK_MIN_SNDBUF ) <S2SV_ModEnd> <S2SV_ModStart> val = min_t ( u32 , val , sysctl_rmem_max ) <S2SV_ModEnd> <S2SV_ModStart> sk -> sk_rcvbuf = max_t ( u32 , <S2SV_ModEnd> <S2SV_ModStart> , SOCK_MIN_RCVBUF ) <S2SV_ModEnd> "
3232,<S2SV_StartBug> uchar buf [ 2 ] ; <S2SV_EndBug> ,<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
3233,<S2SV_StartBug> newtok = PyMem_MALLOC ( buflen + 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( newtok == NULL ) { Py_DECREF ( u ) ; tok -> done = E_NOMEM ; return EOF ; } 
3234,"<S2SV_StartBug> first_block_offset = round_up ( offset , sb -> s_blocksize ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( last_block_offset > first_block_offset ) <S2SV_EndBug> <S2SV_StartBug> ext4_inode_resume_unlocked_dio ( inode ) ; <S2SV_EndBug> ",<S2SV_ModStart> ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; 
3235,<S2SV_StartBug> kiocb -> ki_nr_segs = kiocb -> ki_nbytes ; <S2SV_EndBug> ,"<S2SV_ModStart> ret = rw_verify_area ( type , kiocb -> ki_filp , & kiocb -> ki_pos , ret ) ; if ( ret < 0 ) goto out ; "
3236,"<S2SV_StartBug> YV12_BUFFER_CONFIG sd = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> const vpx_codec_err_t res = <S2SV_EndBug> <S2SV_StartBug> ctx -> base . iface -> dec . peek_si ( * data , data_sz , & ctx -> si ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! ctx -> decoder_init ) { <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> pbi == NULL ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) ; ( void ) deadline <S2SV_ModEnd> <S2SV_ModStart> int is_intra_only = 0 ; <S2SV_ModStart> decoder_peek_si_internal <S2SV_ModEnd> <S2SV_ModStart> , & is_intra_only , ctx -> decrypt_cb , ctx -> decrypt_state <S2SV_ModStart> if ( ! ctx -> si . is_kf && ! is_intra_only ) return VPX_CODEC_ERROR ; <S2SV_ModStart> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; frame_worker_data -> data = * data ; frame_worker_data -> data_size = data_sz ; frame_worker_data -> user_priv = user_priv ; frame_worker_data -> received_frame = 1 ; frame_worker_data -> pbi -> decrypt_cb = ctx -> decrypt_cb ; frame_worker_data -> pbi -> decrypt_state = ctx -> decrypt_state ; worker -> had_error = 0 ; winterface -> execute ( worker ) ; * data = frame_worker_data -> data_end ; if ( worker -> had_error ) return update_error_state ( ctx , & frame_worker_data -> pbi -> common . error ) ; check_resync ( ctx , frame_worker_data -> pbi ) ; } else { VPxWorker * const worker = & ctx -> frame_workers [ ctx -> next_submit_worker_id ] ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; if ( ctx -> next_submit_worker_id != ctx -> last_submit_worker_id ) vp9_frameworker_copy_context ( & ctx -> frame_workers [ ctx -> next_submit_worker_id ] , & ctx -> frame_workers [ ctx -> last_submit_worker_id ] ) ; frame_worker_data -> pbi -> ready_for_new_data = 0 ; if ( frame_worker_data -> scratch_buffer_size < data_sz ) { frame_worker_data -> scratch_buffer = ( uint8_t * ) vpx_realloc ( frame_worker_data -> scratch_buffer , data_sz ) ; if ( frame_worker_data -> scratch_buffer <S2SV_ModEnd> <S2SV_ModStart> { set_error_detail ( ctx , ""Failed<S2SV_blank>to<S2SV_blank>reallocate<S2SV_blank>scratch<S2SV_blank>buffer"" ) ; return VPX_CODEC_MEM_ERROR ; } frame_worker_data -> scratch_buffer_size = data_sz ; } frame_worker_data -> data_size = data_sz ; memcpy ( frame_worker_data -> scratch_buffer , * data , data_sz ) ; frame_worker_data -> frame_decoded = 0 ; frame_worker_data -> frame_context_ready = 0 ; frame_worker_data -> received_frame <S2SV_ModEnd> <S2SV_ModStart> frame_worker_data -> data = frame_worker_data -> scratch_buffer ; frame_worker_data -> user_priv = user_priv ; if ( ctx -> next_submit_worker_id != ctx -> last_submit_worker_id ) ctx -> last_submit_worker_id = ( ctx -> last_submit_worker_id + 1 ) % ctx -> num_frame_workers ; ctx -> next_submit_worker_id = ( ctx -> next_submit_worker_id + 1 ) % ctx -> num_frame_workers ; -- ctx -> available_threads ; worker -> had_error = 0 ; winterface -> launch ( worker ) ; } <S2SV_ModEnd> "
3237,"<S2SV_StartBug> CAFChannelLayout * caf_channel_layout = malloc ( ( size_t ) caf_chunk_header . mChunkSize ) ; <S2SV_EndBug> <S2SV_StartBug> ! DoReadFile ( infile , caf_channel_layout , ( uint32_t ) caf_chunk_header . mChunkSize , & bcount ) || <S2SV_EndBug> <S2SV_StartBug> int bytes_to_copy = ( uint32_t ) caf_chunk_header . mChunkSize ; <S2SV_EndBug> <S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> caf_chunk_header . mChunkSize > 1024 ) { error_line ( ""this<S2SV_blank>.CAF<S2SV_blank>file<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>\'chan\'<S2SV_blank>chunk!"" ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""\'chan\'<S2SV_blank>chunk<S2SV_blank>is<S2SV_blank>%d<S2SV_blank>bytes"" , ( int ) caf_chunk_header . mChunkSize ) ; caf_channel_layout = malloc ( ( size_t ) caf_chunk_header . mChunkSize ) ; if ( <S2SV_ModStart> uint32_t <S2SV_ModEnd> <S2SV_ModStart> buff ; if ( caf_chunk_header . mChunkSize < 0 || caf_chunk_header . mChunkSize > 1048576 ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.CAF<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } "
3238,<S2SV_StartBug> usleep ( 200000 ) ; <S2SV_EndBug> ,<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3239,"<S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> err = vp9_sad16x16 ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_EndBug> <S2SV_StartBug> xd -> plane [ 0 ] . pre [ 0 ] . buf , xd -> plane [ 0 ] . pre [ 0 ] . stride , <S2SV_EndBug> ",<S2SV_ModStart> td . <S2SV_ModStart> vpx_sad16x16 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3240,"<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_lineno ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_lineno ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_int ( tmp , & lineno , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_name ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_name ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_args ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( decorator_list , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_returns ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_returns ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_name ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_name ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_args ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( decorator_list , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_returns ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_returns ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_name ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_name ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( bases , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> keyword_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_keyword ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( keywords , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( decorator_list , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_targets ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( targets , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_targets ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( targets , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_target ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_target ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & target , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_target ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_target ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & target , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""target\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AnnAssign"" ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_annotation ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_target ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_target ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & target , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_iter ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( orelse , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_type_comment ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_target ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_target ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & target , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_iter ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( orelse , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_type_comment ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_test ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_test ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( orelse , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_test ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_test ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( orelse , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_items ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> withitem_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_withitem ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( items , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_type_comment ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_items ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> withitem_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_withitem ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( items , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_type_comment ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_exc ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_exc ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & exc , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_body ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> excepthandler_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_excepthandler ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( handlers , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( orelse , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( finalbody , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_test ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_test ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & test , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_names ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> alias_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_alias ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( names , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_module ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_module ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> alias_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_alias ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( names , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_level ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_names ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> identifier value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_identifier ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( names , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_names ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> identifier value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_identifier ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( names , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> ","<S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""lineno\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>stmt"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_int ( tmp , & lineno , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_col_offset , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""col_offset\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>stmt"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> col_offset <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""name\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>FunctionDef"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_identifier ( tmp , & name , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_args , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""args\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>FunctionDef"" ) ; return 1 ; } else { int res ; res = obj2ast_arguments ( tmp , & args <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>FunctionDef"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_decorator_list , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""decorator_list\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>FunctionDef"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_returns , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; returns = NULL ; } else { int res ; res = obj2ast_expr ( tmp , & returns , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_type_comment , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_comment = NULL ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_string ( tmp , & type_comment <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""name\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AsyncFunctionDef"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_identifier ( tmp , & name , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_args , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""args\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AsyncFunctionDef"" ) ; return 1 ; } else { int res ; res = obj2ast_arguments ( tmp , & args <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AsyncFunctionDef"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_decorator_list , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""decorator_list\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AsyncFunctionDef"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_returns , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; returns = NULL ; } else { int res ; res = obj2ast_expr ( tmp , & returns , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_type_comment , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_comment = NULL ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_string ( tmp , & type_comment <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""name\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ClassDef"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_identifier ( tmp , & name , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_bases , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""bases\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ClassDef"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_keywords , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""keywords\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ClassDef"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ClassDef"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_decorator_list , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""decorator_list\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ClassDef"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; value = NULL ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""targets\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Delete"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""targets\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Assign"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val ) ; } Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj , & PyId_value , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Assign"" ) ; return 1 ; } else { int res ; res = obj2ast_expr ( tmp , & value , arena ) ; if ( res != 0 ) goto failed ; <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_type_comment , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_comment = NULL ; } else { <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_string ( tmp , & type_comment <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""target\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AugAssign"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & target , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_op , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""op\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AugAssign"" ) ; return 1 ; } else { int res ; res = obj2ast_operator ( tmp , & op , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj , & PyId_value , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AugAssign"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> value <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""target\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AnnAssign"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & target , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_annotation , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""annotation\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AnnAssign"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> annotation <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_value , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; value = NULL ; } else { int res ; res = obj2ast_expr ( tmp , & value , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id ( obj , & PyId_simple , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { <S2SV_ModEnd> <S2SV_ModStart> ""required<S2SV_blank>field<S2SV_blank>\\""simple\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AnnAssign"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_int ( tmp , & simple <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""target\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>For"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & target , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_iter , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""iter\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>For"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> iter <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>For"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_orelse , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""orelse\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>For"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_type_comment , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_comment = NULL ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""target\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AsyncFor"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & target , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_iter , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""iter\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AsyncFor"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> iter <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AsyncFor"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_orelse , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""orelse\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AsyncFor"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_type_comment , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_comment = NULL ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""test\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>While"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & test , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>While"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_orelse , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""orelse\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>While"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""test\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>If"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & test , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>If"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_orelse , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""orelse\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>If"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""items\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>With"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>With"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_type_comment , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_comment = NULL ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""items\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AsyncWith"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AsyncWith"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_type_comment , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type_comment = NULL ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; exc = NULL ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & exc , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_cause , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; cause = NULL ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> cause <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Try"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_handlers , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""handlers\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Try"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_orelse , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""orelse\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Try"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_finalbody , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""finalbody\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Try"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""test\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Assert"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_expr ( tmp , & test , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_msg , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; msg = NULL ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> msg <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""names\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Import"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; module = NULL ; } else <S2SV_ModEnd> <S2SV_ModStart> res = obj2ast_identifier ( tmp , & module , arena ) ; if ( res != 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> PyId_names , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""names\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ImportFrom"" ) ; return 1 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_level , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; level = 0 ; } else { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""names\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Global"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""names\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Nonlocal"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""value\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Expr"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3241,"<S2SV_StartBug> pgprot_t prot = __get_dma_pgprot ( attrs , pgprot_kernel ) ; <S2SV_EndBug> ",<S2SV_ModStart> PAGE_KERNEL <S2SV_ModEnd> 
3242,"<S2SV_StartBug> 1 , 0 , xcp , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3243,<S2SV_StartBug> if ( ! n2size ) { <S2SV_EndBug> ,<S2SV_ModStart> n2size < 1 ) <S2SV_ModEnd> 
3244,"
","
"
3245,"<S2SV_StartBug> cifs_small_buf_release ( req ) ; <S2SV_EndBug> <S2SV_StartBug> free_rsp_buf ( resp_buftype , rsp ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cifs_small_buf_release ( req ) ; 
3246,<S2SV_StartBug> addr . sin_addr . s_addr = htonl ( INADDR_ANY ) ; <S2SV_EndBug> ,<S2SV_ModStart> INADDR_LOOPBACK <S2SV_ModEnd> 
3247,<S2SV_StartBug> bmp_info . number_colors = ReadBlobLSBLong ( image ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; if ( bmp_info . number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError , ""InsufficientImageDataInFile"" "
3248,<S2SV_StartBug> ufs -> upper_mnt = clone_private_mount ( & upperpath ) ; <S2SV_EndBug> ,"<S2SV_ModStart> sb -> s_stack_depth = max ( upperpath . mnt -> mnt_sb -> s_stack_depth , lowerpath . mnt -> mnt_sb -> s_stack_depth ) + 1 ; err = - EINVAL ; if ( sb -> s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH ) { pr_err ( ""overlayfs:<S2SV_blank>maximum<S2SV_blank>fs<S2SV_blank>stacking<S2SV_blank>depth<S2SV_blank>exceeded\\n"" ) ; goto out_put_workpath ; } "
3249,<S2SV_StartBug> static const int16_t * filter = vp9_down2_symodd_half_filter ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3250,"<S2SV_StartBug> mutt_error ( ""%s"" , s + 3 ) ; <S2SV_EndBug> ",<S2SV_ModStart> 2 <S2SV_ModEnd> 
3251,<S2SV_StartBug> bin -> dyld_info = malloc ( sizeof ( struct dyld_info_command ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( off + sizeof ( struct dyld_info_command ) > bin -> size ) { <S2SV_EndBug> <S2SV_StartBug> free ( bin -> dyld_info ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> calloc ( 1 , <S2SV_ModEnd> <S2SV_ModStart> bin -> dyld_info ) { if ( <S2SV_ModStart> R_FREE <S2SV_ModEnd> <S2SV_ModStart> } "
3252,"<S2SV_StartBug> int n ; <S2SV_EndBug> <S2SV_StartBug> long newbufsize ; <S2SV_EndBug> <S2SV_StartBug> newbufsize <<= 1 ; <S2SV_EndBug> <S2SV_StartBug> JAS_DBGLOG ( 100 , ( ""mem_write<S2SV_blank>resizing<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%z\\n"" , m -> bufsize_ , <S2SV_EndBug> <S2SV_StartBug> if ( m -> pos_ > m -> len_ ) { <S2SV_EndBug> ","<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t newbufsize ; size_t <S2SV_ModEnd> <S2SV_ModStart> if ( ! jas_safe_size_mul ( newbufsize , 2 , & newbufsize ) ) { <S2SV_ModEnd> <S2SV_ModStart> ""new<S2SV_blank>buffer<S2SV_blank>size<S2SV_blank>would<S2SV_blank>cause<S2SV_blank>overflow\\n"" ) ) ; <S2SV_ModEnd> <S2SV_ModStart> JAS_DBGLOG ( 100 , ( ""mem_write<S2SV_blank>resizing<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%zu\\n"" , m -> bufsize_ , newbufsize ) ) ; assert ( newbufsize > 0 ) ; if ( mem_resize ( m , newbufsize ) ) { return - 1 ; } } "
3253,<S2SV_StartBug> void * dllhandle ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( COM_CompareExtension ( name , "".pk3"" ) ) { Com_Printf ( ""Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\""%s\\"""" , name ) ; return NULL ; } "
3254,<S2SV_StartBug> rfcomm_dlc_accept ( d ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3255,<S2SV_StartBug> d0u8 = vdup_n_u8 ( ( uint8_t ) bifilter4_coeff [ xoffset ] [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> d1u8 = vdup_n_u8 ( ( uint8_t ) bifilter4_coeff [ xoffset ] [ 1 ] ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3256,<S2SV_StartBug> # endif <S2SV_EndBug> ,"<S2SV_ModStart> conf_write ( fp , ""<S2SV_blank>umask<S2SV_blank>=<S2SV_blank>0%o"" , global_data -> umask ) ; "
3257,"<S2SV_StartBug> char sbuf [ 128 ] ; <S2SV_EndBug> <S2SV_StartBug> err = __video_do_ioctl ( file , cmd , parg ) ; <S2SV_EndBug> ","<S2SV_ModStart> return video_usercopy <S2SV_ModEnd> <S2SV_ModStart> arg , __video_do_ioctl ) <S2SV_ModEnd> "
3258,<S2SV_StartBug> return tok ; <S2SV_EndBug> ,<S2SV_ModStart> tok -> type_comments = 0 ; 
3259,<S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart> strict = true ; 
3260,"<S2SV_StartBug> static void read_inter_mode_probs ( FRAME_CONTEXT * fc , vp9_reader * r ) { <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> 
3261,"<S2SV_StartBug> static void get_sb_partition_size_range ( VP9_COMP * cpi , MODE_INFO * * mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> BLOCK_SIZE * max_block_size ) { <S2SV_EndBug> <S2SV_StartBug> * min_block_size = MIN ( * min_block_size , sb_type ) ; <S2SV_EndBug> ","<S2SV_ModStart> MACROBLOCKD * xd <S2SV_ModEnd> <S2SV_ModStart> , int bs_hist [ BLOCK_SIZES ] ) { <S2SV_ModEnd> <S2SV_ModStart> bs_hist [ sb_type ] ++ ; "
3262,"<S2SV_StartBug> unsigned int len = sizeof ( * ctx ) + crypto_skcipher_reqsize ( private ) ; <S2SV_EndBug> <S2SV_StartBug> ctx -> iv = sock_kmalloc ( sk , crypto_skcipher_ivsize ( private ) , <S2SV_EndBug> <S2SV_StartBug> memset ( ctx -> iv , 0 , crypto_skcipher_ivsize ( private ) ) ; <S2SV_EndBug> <S2SV_StartBug> skcipher_request_set_tfm ( & ctx -> req , private ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct skcipher_tfm * tfm = private ; struct crypto_skcipher * skcipher = tfm -> skcipher ; <S2SV_ModStart> skcipher ) ; if ( ! tfm -> has_key ) return - ENOKEY <S2SV_ModEnd> <S2SV_ModStart> skcipher <S2SV_ModEnd> <S2SV_ModStart> skcipher ) ) ; INIT_LIST_HEAD ( & ctx -> tsgl ) ; ctx -> len = len ; ctx -> used = 0 ; ctx -> more = 0 ; ctx -> merge = 0 ; ctx -> enc = 0 ; atomic_set ( & ctx -> inflight , 0 ) ; af_alg_init_completion ( & ctx -> completion ) ; ask -> private <S2SV_ModEnd> <S2SV_ModStart> skcipher <S2SV_ModEnd> "
3263,"<S2SV_StartBug> uint32_t tag = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( tcm_tmr < 0 ) { <S2SV_EndBug> <S2SV_StartBug> rc = srpt_rx_mgmt_fn_tag ( send_ioctx , srp_tsk -> task_tag ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> unpacked_lun = srpt_unpack_lun ( ( uint8_t * ) & srp_tsk -> lun , sizeof ( srp_tsk -> lun ) ) ; rc = target_submit_tmr ( & send_ioctx -> cmd , sess , NULL , unpacked_lun , srp_tsk , tcm_tmr , GFP_KERNEL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3264,"<S2SV_StartBug> char * command , * args = value ; <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> if ( size == PAGE_SIZE ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> args [ size ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( name , ""current"" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( command , ""permhat"" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( name , ""exec"" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> aad . error = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> ","<S2SV_ModStart> largs = NULL , * <S2SV_ModStart> ; if ( current != task ) return - EACCES <S2SV_ModStart> largs = args = kmalloc ( size + 1 , GFP_KERNEL ) ; if ( ! args <S2SV_ModEnd> <S2SV_ModStart> ENOMEM ; memcpy ( args , value , size ) ; args [ size ] = '\\0' ; } error = - <S2SV_ModStart> = strim ( args ) ; command = strsep ( & args , ""<S2SV_blank>"" ) ; if ( ! args ) goto out ; args = skip_spaces ( args ) ; if ( ! * args ) goto out ; arg_size = size - ( args - ( char * ) value ) ; if ( strcmp ( name , ""current"" ) == 0 ) { if ( strcmp ( command , ""changehat"" ) == 0 ) { error = aa_setprocattr_changehat ( args , arg_size , ! AA_DO_TEST ) ; } else if ( strcmp ( command , ""permhat"" ) == 0 ) { error = aa_setprocattr_changehat ( args , arg_size , AA_DO_TEST ) ; } else if ( strcmp ( command , ""changeprofile"" ) == 0 ) { error = aa_setprocattr_changeprofile ( args , ! AA_ONEXEC , ! AA_DO_TEST ) ; } else if ( strcmp ( command , ""permprofile"" ) == 0 ) { error = aa_setprocattr_changeprofile ( args , ! AA_ONEXEC , AA_DO_TEST ) ; } else goto fail ; } else <S2SV_ModEnd> <S2SV_ModStart> ""exec"" ) == 0 ) { if ( strcmp ( command , ""exec"" ) == 0 ) error = aa_setprocattr_changeprofile ( args , AA_ONEXEC <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! error ) error = size ; out : kfree ( largs ) <S2SV_ModEnd> <S2SV_ModStart> error = <S2SV_ModStart> goto out <S2SV_ModEnd> "
3265,<S2SV_StartBug> ret = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> key_put ( keyring ) ; 
3266,"<S2SV_StartBug> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , <S2SV_EndBug> <S2SV_StartBug> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , <S2SV_EndBug> ","<S2SV_ModStart> p_total_data_size , <S2SV_ModStart> p_total_data_size , "
3267,"<S2SV_StartBug> int ret = select ( ( max_curr_s + 1 ) , & curr_set , NULL , NULL , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3268,"<S2SV_StartBug> ssize_t sent = send ( fd , p_buf -> data + p_buf -> offset , p_buf -> len , MSG_DONTWAIT ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3269,"<S2SV_StartBug> spin_lock ( & inode -> i_lock ) ; <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( inode -> i_mapping , ( chg - freed ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> hugepage_subpool_put_pages ( spool <S2SV_ModEnd> 
3270,<S2SV_StartBug> static void <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3271,"<S2SV_StartBug> struct in6_addr * saddr = NULL , * final_p , final ; <S2SV_EndBug> <S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> if ( np -> opt ) <S2SV_EndBug> <S2SV_StartBug> icsk -> icsk_ext_hdr_len = ( np -> opt -> opt_flen + <S2SV_EndBug> <S2SV_StartBug> np -> opt -> opt_nflen ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; struct ipv6_txoptions * opt <S2SV_ModStart> opt = rcu_dereference_protected ( np -> opt , sock_owned_by_user ( sk ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3272,"<S2SV_StartBug> dwc3_gadget_giveback ( dep , req , ret ) ; <S2SV_EndBug> ",<S2SV_ModStart> dwc3_gadget_del_and_unmap_request <S2SV_ModEnd> 
3273,<S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
3274,<S2SV_StartBug> if ( border < 0 ) { <S2SV_EndBug> ,<S2SV_ModStart> || color < 0 
3275,<S2SV_StartBug> state -> indent = strdup ( RSTRING_PTR ( indent ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> fstrndup <S2SV_ModEnd> <S2SV_ModStart> , len "
3276,"<S2SV_StartBug> if ( strcmp ( ptr , ""get<S2SV_blank>"" ) && strcmp ( ptr , ""gets<S2SV_blank>"" ) ) { <S2SV_EndBug> ","<S2SV_ModStart> ptr - c -> rcurr > 100 || ( strncmp ( ptr , ""get<S2SV_blank>"" , 4 ) && strncmp <S2SV_ModEnd> <S2SV_ModStart> , 5 ) "
3277,<S2SV_StartBug> struct futex_hash_bucket * hb ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3278,"<S2SV_StartBug> addModuleArgument ( db , pTable , sqlite3NameFromToken ( db , pModuleName ) ) ; <S2SV_EndBug> <S2SV_StartBug> addModuleArgument ( db , pTable , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> addModuleArgument ( db , pTable , sqlite3DbStrDup ( db , pTable -> zName ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> pParse <S2SV_ModEnd> <S2SV_ModStart> pParse <S2SV_ModEnd> <S2SV_ModStart> pParse <S2SV_ModEnd> 
3279,"<S2SV_StartBug> switch ( type ) <S2SV_EndBug> <S2SV_StartBug> SetPixelIndex ( image , ( ( ( unsigned char ) pixel ) & <S2SV_EndBug> <S2SV_StartBug> ( 0x01 << ( 7 - bit ) ) ) != 0 ? 0 : 255 , q ) ; <S2SV_EndBug> <S2SV_StartBug> x -- ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ","<S2SV_ModStart> if ( image -> depth > 1 ) { SetPSDPixel ( image , channels , type , packet_size , pixel , q , exception ) ; q += GetPixelChannels ( image ) ; } else <S2SV_ModEnd> <S2SV_ModStart> SetPSDPixel ( image , channels , type , packet_size <S2SV_ModEnd> <S2SV_ModStart> , exception <S2SV_ModEnd> <S2SV_ModStart> if ( x != image -> columns ) <S2SV_ModStart>  <S2SV_ModEnd> "
3280,<S2SV_StartBug> if ( ! mp -> ports && ! mp -> mglist && <S2SV_EndBug> ,<S2SV_ModStart> mp -> timer_armed && 
3281,"<S2SV_StartBug> int sec ; <S2SV_EndBug> <S2SV_StartBug> guint pkt_len ; <S2SV_EndBug> <S2SV_StartBug> guint offset = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( sscanf ( line , ""%9d.%9d:<S2SV_blank>%15[a-z0-9/:.-](%1[io])<S2SV_blank>len=%9u:%12s->%12s/"" , <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> ","<S2SV_ModStart> pkt_len ; int <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> ""%9d.%9d:<S2SV_blank>%15[a-z0-9/:.-](%1[io])<S2SV_blank>len=%9d:%12s->%12s/"" <S2SV_ModEnd> <S2SV_ModStart> ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""netscreen:<S2SV_blank>packet<S2SV_blank>header<S2SV_blank>has<S2SV_blank>a<S2SV_blank>negative<S2SV_blank>packet<S2SV_blank>length"" ) ; return FALSE "
3282,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> id_key_set = rb_intern_const ( ""key_set"" ) ; "
3283,"<S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> vp8_yv12_copy_frame ( <S2SV_EndBug> <S2SV_StartBug> for ( i = 2 ; i < MAX_REF_FRAMES - 1 ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> & cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> for ( i = LAST_FRAME <S2SV_ModEnd> <S2SV_ModStart> ; ++ i <S2SV_ModEnd> <S2SV_ModStart> cpi -> Source <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> oxcf . noise_sensitivity == 4 ) vp8_yv12_copy_frame ( cpi -> Source , & cpi -> denoiser . yv12_last_source ) ; "
3284,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3285,"<S2SV_StartBug> for ( i = 0 ; i < numcmpts ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> data [ i ] = jas_matrix_create ( jas_image_height ( image ) , jas_image_width ( image ) ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> nz -= 8 ; <S2SV_EndBug> ","<S2SV_ModStart> assert ( numcmpts <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } <S2SV_ModStart> if ( ! ( <S2SV_ModStart> ) ) { goto error ; } <S2SV_ModEnd> <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> goto error ; } nz -= 8 ; z &= RAS_ONES ( nz ) ; } } if ( nz > 0 ) { c = ( z >> ( 8 - nz ) ) & RAS_ONES ( nz ) ; if ( jas_stream_putc ( out , c ) == EOF ) { goto error ; } } if ( pad % 2 ) { if ( jas_stream_putc ( out , 0 ) == EOF ) { goto error ; } } } for ( i = 0 ; i < numcmpts ; ++ i ) { jas_matrix_destroy ( data [ i ] ) ; data [ i ] = 0 ; } return 0 ; error : for ( i = 0 ; i < numcmpts ; ++ i ) { if ( data [ i ] ) { jas_matrix_destroy ( data [ i ] ) ; } } <S2SV_ModStart>  <S2SV_ModEnd> "
3286,<S2SV_StartBug> if ( ! ( skb -> dev -> flags & IFF_LOOPBACK ) ) { <S2SV_EndBug> ,<S2SV_ModStart> skb == NULL || 
3287,"<S2SV_StartBug> if ( out ) { <S2SV_EndBug> <S2SV_StartBug> container_of ( out , struct ipc_rcu_hdr , data ) -> refcount = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( out ) { <S2SV_EndBug> <S2SV_StartBug> container_of ( out , struct ipc_rcu_hdr , data ) -> refcount = 1 ; <S2SV_EndBug> ","<S2SV_ModStart> ! out ) goto done ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ! out ) goto done ; <S2SV_ModEnd> <S2SV_ModStart> } atomic_set ( & <S2SV_ModStart> , 1 ) ; done : <S2SV_ModEnd> "
3288,<S2SV_StartBug> if ( last_sec > 0 && last_usec > 0 ) { <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> ,"<S2SV_ModStart> caplentoobig ) { printf ( ""\\n\\nCapture<S2SV_blank>file<S2SV_blank>appears<S2SV_blank>to<S2SV_blank>be<S2SV_blank>damaged<S2SV_blank>or<S2SV_blank>corrupt.\\n"" ""Contains<S2SV_blank>packet<S2SV_blank>of<S2SV_blank>size<S2SV_blank>%u,<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>snap<S2SV_blank>length<S2SV_blank>%u\\n"" , caplen , pcap_fh . snaplen ) ; close ( fd ) ; break ; } if ( <S2SV_ModStart> break <S2SV_ModEnd> "
3289,<S2SV_StartBug> uchar buf [ MIF_MAGICLEN ] ; <S2SV_EndBug> ,<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
3290,"<S2SV_StartBug> static void write_selected_tx_size ( const VP9_COMP * cpi , <S2SV_EndBug> <S2SV_StartBug> vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> const MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> & cpi -> common . fc . tx_probs ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , tx_size != TX_4X4 , tx_probs [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , tx_size != TX_8X8 , tx_probs [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , tx_size != TX_16X16 , tx_probs [ 2 ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> VP9_COMMON * cm , const MACROBLOCKD * xd , vpx_writer <S2SV_ModEnd> <S2SV_ModStart> TX_SIZE tx_size = xd -> mi [ 0 ] -> mbmi . tx_size ; BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi . sb_type ; <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> "
3291,"<S2SV_StartBug> MODE_INFO * * mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> int row8x8_remaining = tile -> mi_row_end - mi_row ; <S2SV_EndBug> <S2SV_StartBug> int col8x8_remaining = tile -> mi_col_end - mi_col ; <S2SV_EndBug> <S2SV_StartBug> int r , c ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * mi_upper_left = cm -> mi + mi_row * mis + mi_col ; <S2SV_EndBug> <S2SV_StartBug> const int src_stride = x -> plane [ 0 ] . src . stride ; <S2SV_EndBug> <S2SV_StartBug> const int pre_stride = cpi -> Last_Source -> y_stride ; <S2SV_EndBug> <S2SV_StartBug> const uint8_t * pre_src = cpi -> Last_Source -> y_buffer + pre_offset ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 4 ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> diff d16 [ 4 ] ; <S2SV_EndBug> <S2SV_StartBug> pre_stride , & d16 [ j ] . sse , & d16 [ j ] . sum ) ; <S2SV_EndBug> <S2SV_StartBug> ( ( ( uint32_t ) d16 [ j ] . sum * d16 [ j ] . sum ) >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( ( cm -> current_video_frame - 1 ) % <S2SV_EndBug> <S2SV_StartBug> use16x16 = 1 ; <S2SV_EndBug> ","<S2SV_ModStart> MACROBLOCK * const x , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> const <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; vp9_setup_src_planes ( x , cpi -> Source , mi_row , mi_col ) <S2SV_ModStart> int i , j ; int index ; diff d32 [ 4 ] ; const int offset = ( mi_row >> 1 ) * cm -> mb_cols + ( mi_col >> 1 ) ; int is_larger_better = 0 ; int use32x32 = 0 ; unsigned int thr <S2SV_ModEnd> <S2SV_ModStart> source_var_thresh ; memset ( d32 , 0 , 4 * sizeof ( diff ) ) ; for ( i = 0 ; i < 4 ; i ++ ) { diff * d16 [ 4 ] ; for ( j = 0 ; j < 4 ; j ++ ) { int b_mi_row = coord_lookup [ i * 4 + j ] . row ; int b_mi_col = coord_lookup [ i * 4 + j ] . col ; int boffset = b_mi_row / 2 * cm -> mb_cols + b_mi_col / 2 ; d16 [ j ] <S2SV_ModEnd> <S2SV_ModStart> source_diff_var + offset + boffset ; index = b_mi_row * mis + b_mi_col ; mi_8x8 [ index ] = mi_upper_left + index ; mi_8x8 [ index ] -> mbmi . sb_type = BLOCK_16X16 ; } is_larger_better = ( d16 [ 0 ] -> var < thr ) && ( d16 [ 1 ] -> var < thr ) && ( d16 [ 2 ] -> var < thr ) && ( d16 [ 3 ] -> var < thr ) ; if ( is_larger_better ) { use32x32 += 1 <S2SV_ModEnd> <S2SV_ModStart> j = 0 ; j < 4 ; j <S2SV_ModEnd> <S2SV_ModStart> d32 [ i <S2SV_ModEnd> <S2SV_ModStart> += d16 [ j ] -> sse ; d32 [ i <S2SV_ModEnd> <S2SV_ModStart> += d16 [ j ] -> sum ; } d32 [ i ] . var = d32 [ i <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } } if ( use32x32 == 4 ) { thr <<= 1 ; is_larger_better = ( d32 [ 0 ] . var < thr ) && ( d32 [ 1 ] . var < thr ) && ( d32 [ 2 ] . var < thr ) && ( d32 [ 3 ] . var < thr ) ; if ( is_larger_better ) { mi_8x8 [ 0 ] = mi_upper_left ; mi_8x8 [ 0 ] -> mbmi . sb_type = BLOCK_64X64 ; } } <S2SV_ModEnd> <S2SV_ModStart> int bh = num_8x8_blocks_high_lookup [ BLOCK_16X16 ] ; int bw = num_8x8_blocks_wide_lookup [ BLOCK_16X16 ] ; set_partial_b64x64_partition ( mi_upper_left , mis , bh , bw , row8x8_remaining , col8x8_remaining , BLOCK_16X16 , mi_8x8 ) ; <S2SV_ModEnd> "
3292,<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! tty ) return 
3293,<S2SV_StartBug> static void parse_input ( h2o_http2_conn_t * conn ) <S2SV_EndBug> <S2SV_StartBug> close_connection ( conn ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModStart> return 0 ; 
3294,"<S2SV_StartBug> IBITS_NXT ( u4_buf , u4_buf_nxt , u4_offset , u4_bits , u4_sym_len ) <S2SV_EndBug> <S2SV_StartBug> DecodedValue = gau2_impeg2d_tab_zero_1_9 [ u4_bits >> 8 ] ; <S2SV_EndBug> ",<S2SV_ModStart> lead_zeros = CLZ ( u4_bits ) - 15 ; if ( lead_zeros > 11 ) { return IMPEG2D_MB_DATA_DECODE_ERR ; } <S2SV_ModStart> lead_zeros = CLZ ( u4_bits ) - 15 ; if ( lead_zeros > 11 ) { return IMPEG2D_MB_DATA_DECODE_ERR ; } 
3295,"<S2SV_StartBug> security_decrypt ( s -> p , length , rdp ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! <S2SV_ModStart> ) return FALSE 
3296,"<S2SV_StartBug> if ( ! ( flags & SOCK_THREAD_FD_EXCEPTION ) || ( ioctl ( sock -> our_fd , FIONREAD , & size ) <S2SV_EndBug> <S2SV_StartBug> int count = recv ( fd , buffer , L2CAP_MAX_SDU_LENGTH , <S2SV_EndBug> <S2SV_StartBug> MSG_NOSIGNAL | MSG_DONTWAIT ) ; <S2SV_EndBug> <S2SV_StartBug> if ( drop_it || ioctl ( sock -> our_fd , FIONREAD , & size ) != 0 || size == 0 ) <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3297,<S2SV_StartBug> bool disconnect ; <S2SV_EndBug> <S2SV_StartBug> __touch_mnt_namespace ( p -> mnt_ns ) ; <S2SV_EndBug> ,<S2SV_ModStart> struct mnt_namespace * ns ; <S2SV_ModStart> ns = p -> mnt_ns ; if ( ns ) { ns -> mounts -- ; __touch_mnt_namespace ( ns ) ; } <S2SV_ModEnd> 
3298,"<S2SV_StartBug> static int renameColumnSelectCb ( Walker * pWalker , Select * p ) { <S2SV_EndBug> ",<S2SV_ModStart> if ( p -> selFlags & SF_View ) return WRC_Prune ; 
3299,"<S2SV_StartBug> dtls1_record_bitmap_update ( s , & ( s -> d1 -> bitmap ) ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3300,<S2SV_StartBug> int iSrc ; <S2SV_EndBug> <S2SV_StartBug> for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { <S2SV_EndBug> <S2SV_StartBug> dTotalWeight += ( res -> ContribRow [ u ] . Weights [ iSrc - iLeft ] = scale_f_d * ( * pFilter ) ( scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> Left = iLeft ; res -> ContribRow [ u ] . Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ] . 
3301,"<S2SV_StartBug> guint32 off = offset ; <S2SV_EndBug> <S2SV_StartBug> DebugLog ( ( ""parse_wbxml_tag_defined<S2SV_blank>(level<S2SV_blank>=<S2SV_blank>%u,<S2SV_blank>offset<S2SV_blank>=<S2SV_blank>%u)\\n"" , * level , offset ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , last_off <S2SV_ModStart> ; last_off = off <S2SV_ModStart> if ( off < last_off ) { THROW ( ReportedBoundsError ) ; } last_off = off ; "
3302,<S2SV_StartBug> if ( sk_acceptq_is_full ( sk ) ) <S2SV_EndBug> <S2SV_StartBug> newinet -> opt = ireq -> opt ; <S2SV_EndBug> ,"<S2SV_ModStart> struct ip_options_rcu * inet_opt ; <S2SV_ModStart> inet_opt = ireq -> opt ; rcu_assign_pointer ( newinet -> inet_opt , inet_opt ) ; <S2SV_ModEnd> <S2SV_ModStart> = NULL ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; inet_csk ( newsk ) -> icsk_ext_hdr_len = 0 ; if ( inet_opt ) inet_csk ( newsk ) -> icsk_ext_hdr_len = inet_opt -> opt . <S2SV_ModEnd> "
3303,"<S2SV_StartBug> USB_DT_SECURITY , ( void * * ) & secd ) ; <S2SV_EndBug> ","<S2SV_ModStart> , sizeof ( * secd ) "
3304,"<S2SV_StartBug> static void set_rt_speed_feature ( VP9_COMMON * cm , SPEED_FEATURES * sf , <S2SV_EndBug> <S2SV_StartBug> int speed ) { <S2SV_EndBug> <S2SV_StartBug> sf -> encode_breakout_thresh = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( speed == 1 ) { <S2SV_EndBug> <S2SV_StartBug> if ( MIN ( cm -> width , cm -> height ) >= 720 ) <S2SV_EndBug> <S2SV_StartBug> sf -> auto_mv_step_size = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_square_partition_only = ! frame_is_intra_only ( cm ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_rd_breakout = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> auto_mv_step_size = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_lastframe_partitioning = LAST_FRAME_PARTITION_LOW_MOTION ; <S2SV_EndBug> <S2SV_StartBug> sf -> adaptive_rd_thresh = 2 ; <S2SV_EndBug> <S2SV_StartBug> sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_lastframe_partitioning = LAST_FRAME_PARTITION_ALL ; <S2SV_EndBug> <S2SV_StartBug> sf -> subpel_iters_per_step = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_fast_coef_updates = ONE_LOOP_REDUCED ; <S2SV_EndBug> <S2SV_StartBug> sf -> lpf_pick = LPF_PICK_FROM_Q ; <S2SV_EndBug> <S2SV_StartBug> ( cm -> current_video_frame + 1 ) % sf -> last_partitioning_redo_frequency ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> subpel_force_stop = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> intra_uv_mode_mask [ i ] = INTRA_DC_ONLY ; <S2SV_EndBug> <S2SV_StartBug> sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_ONLY ; <S2SV_EndBug> <S2SV_StartBug> sf -> encode_breakout_thresh = 1000 ; <S2SV_EndBug> <S2SV_StartBug> sf -> disable_inter_mode_mask [ BLOCK_32X32 ] = 1 << INTER_OFFSET ( ZEROMV ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> disable_inter_mode_mask [ BLOCK_32X64 ] = ~ ( 1 << INTER_OFFSET ( NEARESTMV ) ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> disable_inter_mode_mask [ BLOCK_64X32 ] = ~ ( 1 << INTER_OFFSET ( NEARESTMV ) ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> disable_inter_mode_mask [ BLOCK_64X64 ] = ~ ( 1 << INTER_OFFSET ( NEARESTMV ) ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> max_partition_size = BLOCK_32X32 ; <S2SV_EndBug> <S2SV_StartBug> sf -> min_partition_size = BLOCK_8X8 ; <S2SV_EndBug> <S2SV_StartBug> sf -> partition_check = <S2SV_EndBug> <S2SV_StartBug> sf -> max_delta_qindex = ( cm -> frame_type == KEY_FRAME ) ? 20 : 15 ; <S2SV_EndBug> <S2SV_StartBug> sf -> search_method = FAST_DIAMOND ; <S2SV_EndBug> <S2SV_StartBug> sf -> allow_skip_recode = 0 ; <S2SV_EndBug> <S2SV_StartBug> sf -> partition_search_type = SOURCE_VAR_BASED_PARTITION ; <S2SV_EndBug> <S2SV_StartBug> sf -> search_method = FAST_DIAMOND ; <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> ","<S2SV_ModStart> VP9_COMP * cpi <S2SV_ModEnd> <S2SV_ModStart> , vp9e_tune_content content ) { VP9_COMMON * const cm = & cpi -> common ; const int is_keyframe = cm -> frame_type == KEY_FRAME ; const int frames_since_key = is_keyframe ? 0 : cpi -> rc . frames_since_key ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> >= <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mv . <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mode_search_skip_flags = ( cm -> frame_type == KEY_FRAME ) ? 0 : <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> reference_masking = ( cpi -> oxcf . resize_mode != RESIZE_DYNAMIC && cpi -> svc . number_spatial_layers == 1 ) ? 1 : 0 <S2SV_ModEnd> <S2SV_ModStart> lf_motion_threshold = LOW_MOTION_THRESHOLD <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> TX_16X16 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mv . <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> frames_since_key <S2SV_ModEnd> <S2SV_ModStart> mv . <S2SV_ModStart> INTRA_DC <S2SV_ModEnd> <S2SV_ModStart> INTRA_DC <S2SV_ModEnd> <S2SV_ModStart> mv . <S2SV_ModEnd> <S2SV_ModStart> inter_mode_mask <S2SV_ModEnd> <S2SV_ModStart> INTER_NEAREST_NEAR_NEW ; sf -> inter_mode_mask <S2SV_ModEnd> <S2SV_ModStart> INTER_NEAREST ; sf -> inter_mode_mask <S2SV_ModEnd> <S2SV_ModStart> INTER_NEAREST ; sf -> inter_mode_mask <S2SV_ModEnd> <S2SV_ModStart> INTER_NEAREST <S2SV_ModEnd> <S2SV_ModStart> use_quant_fp = ! is_keyframe ; sf -> auto_min_max_partition_size = is_keyframe ? RELAXED_NEIGHBORING_MIN_MAX : STRICT_NEIGHBORING_MIN_MAX ; sf -> default_max_partition_size <S2SV_ModEnd> <S2SV_ModStart> default_min_partition_size <S2SV_ModEnd> <S2SV_ModStart> force_frame_boost = is_keyframe || ( frames_since_key % <S2SV_ModEnd> <S2SV_ModStart> is_keyframe <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sf -> inter_mode_mask [ BLOCK_32X32 ] = INTER_NEAREST_NEW_ZERO ; sf -> inter_mode_mask [ BLOCK_32X64 ] = INTER_NEAREST_NEW_ZERO ; sf -> inter_mode_mask [ BLOCK_64X32 ] = INTER_NEAREST_NEW_ZERO ; sf -> inter_mode_mask [ BLOCK_64X64 ] = INTER_NEAREST_NEW_ZERO ; sf -> adaptive_rd_thresh = 2 ; sf -> reuse_inter_pred_sby = 1 ; sf -> partition_search_breakout_rate_thr = 200 ; sf -> coeff_prob_appx_step = 4 ; sf -> use_fast_coef_updates = is_keyframe ? TWO_LOOP : ONE_LOOP_REDUCED ; sf -> mode_search_skip_flags = FLAG_SKIP_INTRA_DIRMISMATCH ; sf -> tx_size_search_method = is_keyframe ? USE_LARGESTALL : USE_TX_8X8 ; sf -> simple_model_rd_from_var = 1 ; if ( ! is_keyframe ) { int i ; if ( content == VP9E_CONTENT_SCREEN ) { for ( i = 0 ; i < BLOCK_SIZES ; ++ i ) sf -> intra_y_mode_bsize_mask [ i ] = INTRA_DC_TM_H_V ; } else { for ( i = 0 ; i < BLOCK_SIZES ; ++ i ) if ( i >= BLOCK_16X16 ) sf -> intra_y_mode_bsize_mask [ i ] = INTRA_DC ; else sf -> intra_y_mode_bsize_mask [ i ] = INTRA_DC_H_V ; } } <S2SV_ModStart> VAR_BASED_PARTITION <S2SV_ModEnd> <S2SV_ModStart> mv . search_method = NSTEP ; sf -> mv . reduce_first_step_size = 1 ; sf -> skip_encode_sb = 0 <S2SV_ModEnd> <S2SV_ModStart> sf -> adaptive_rd_thresh = 3 ; sf -> mv . search_method = FAST_DIAMOND ; sf -> mv . fullpel_search_step_param = 10 ; if ( cpi -> svc . number_temporal_layers > 2 && cpi -> svc . temporal_layer_id == 0 ) { sf -> mv . search_method = NSTEP ; sf -> mv . fullpel_search_step_param = 6 ; } } if ( speed >= 8 ) { sf -> adaptive_rd_thresh = 4 ; sf -> mv . subpel_force_stop = 2 ; sf -> lpf_pick = LPF_PICK_MINIMAL_LPF <S2SV_ModEnd> "
3305,"<S2SV_StartBug> zend_throw_error ( exception_ce , message ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , "
3306,"<S2SV_StartBug> box -> len = len ; <S2SV_EndBug> <S2SV_StartBug> jas_eprintf ( ""cannot<S2SV_blank>copy<S2SV_blank>box<S2SV_blank>data\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; JAS_DBGLOG ( 10 , ( ""preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%d\\n"" , \'""\' , boxinfo -> name , \'""\' , box -> type , box -> len ) ) <S2SV_ModStart> box -> ops = & jp2_boxinfo_unk . ops ; "
3307,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3308,<S2SV_StartBug> if ( options . compression ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3309,<S2SV_StartBug> newnp -> ipv6_ac_list = NULL ; <S2SV_EndBug> <S2SV_StartBug> newinet -> inet_opt = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> ipv6_mc_list = NULL ; newnp -> <S2SV_ModStart> = NULL ; newnp -> ipv6_mc_list 
3310,<S2SV_StartBug> unix_notinflight ( scm -> fp -> fp [ i ] ) ; <S2SV_EndBug> ,"<S2SV_ModStart> user , scm -> fp -> "
3311,"<S2SV_StartBug> int recon_uvoffset ) <S2SV_EndBug> <S2SV_StartBug> unsigned int motion_magnitude2 ; <S2SV_EndBug> <S2SV_StartBug> if ( zero_frame ) <S2SV_EndBug> <S2SV_StartBug> int sse_diff = zero_mv_sse - best_sse ; <S2SV_EndBug> <S2SV_StartBug> if ( frame == INTRA_FRAME || <S2SV_EndBug> <S2SV_StartBug> ( ( unsigned int ) ( mv_row * mv_row + mv_col * mv_col ) <S2SV_EndBug> <S2SV_StartBug> if ( best_sse > SSE_THRESHOLD || motion_magnitude2 <S2SV_EndBug> <S2SV_StartBug> > 8 * NOISE_MOTION_THRESHOLD ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> decision = vp8_denoiser_filter ( & denoiser -> yv12_mc_running_avg , <S2SV_EndBug> <S2SV_StartBug> vp8_copy_mem16x16 ( <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , loop_filter_info_n * lfi_n , int mb_row , int mb_col , int block_index <S2SV_ModStart> motion_threshold ; unsigned int motion_magnitude2 ; unsigned int sse_thresh ; int sse_diff_thresh = 0 ; int apply_spatial_loop_filter = 1 <S2SV_ModEnd> <S2SV_ModStart> enum vp8_denoiser_decision decision_u = COPY_BLOCK ; enum vp8_denoiser_decision decision_v = COPY_BLOCK ; <S2SV_ModStart> sse_diff = 0 ; const int zero_bias = denoiser -> denoise_pars . denoise_mv_bias ; zero_mv_sse = ( unsigned int ) ( ( int64_t ) zero_mv_sse * zero_bias / 100 ) ; <S2SV_ModStart> ( unsigned int ) ( mv_row * mv_row + mv_col * mv_col ) <= NOISE_MOTION_THRESHOLD ) sse_diff_thresh = ( int ) SSE_DIFF_THRESHOLD ; if ( <S2SV_ModStart> sse_diff <= sse_diff_thresh ) { x -> denoise_zeromv = 1 ; mbmi -> ref_frame = x -> best_zeromv_reference_frame ; src = & denoiser -> yv12_running_avg [ zero_frame ] ; mbmi -> mode = ZEROMV ; mbmi -> mv . as_int = 0 ; x -> best_sse_inter_mode = ZEROMV ; x -> best_sse_mv . as_int = 0 ; best_sse = zero_mv_sse ; } saved_pre = filter_xd -> pre ; saved_dst = filter_xd -> dst ; filter_xd -> pre . y_buffer = src -> y_buffer + recon_yoffset ; filter_xd -> pre . u_buffer = src -> u_buffer + recon_uvoffset ; filter_xd -> pre . v_buffer = src -> v_buffer + recon_uvoffset ; filter_xd -> dst . y_buffer = dst -> y_buffer + recon_yoffset ; filter_xd -> dst . u_buffer = dst -> u_buffer + recon_uvoffset ; filter_xd -> dst . v_buffer = dst -> v_buffer + recon_uvoffset ; if ( ! x -> skip ) { vp8_build_inter_predictors_mb ( filter_xd ) ; } else { vp8_build_inter16x16_predictors_mb ( filter_xd , filter_xd -> dst . y_buffer , filter_xd -> dst . u_buffer , filter_xd -> dst . v_buffer , filter_xd -> dst . y_stride , filter_xd -> dst . uv_stride ) ; } filter_xd -> pre = saved_pre ; filter_xd -> dst = saved_dst ; * mbmi = saved_mbmi ; } mv_row = x -> best_sse_mv . as_mv . row ; mv_col = x -> best_sse_mv . as_mv . col ; motion_magnitude2 = mv_row * mv_row <S2SV_ModEnd> <S2SV_ModStart> ; motion_threshold = denoiser -> denoise_pars . scale_motion_thresh * NOISE_MOTION_THRESHOLD ; if ( x -> is_skin ) motion_threshold = 1 ; if ( motion_magnitude2 < denoiser -> denoise_pars . scale_increase_filter * NOISE_MOTION_THRESHOLD ) x -> increase_denoising = 1 ; sse_thresh = denoiser -> denoise_pars . scale_sse_thresh * SSE_THRESHOLD ; if ( x -> increase_denoising ) sse_thresh = denoiser -> denoise_pars . scale_sse_thresh * SSE_THRESHOLD_HIGH <S2SV_ModEnd> <S2SV_ModStart> sse_thresh <S2SV_ModEnd> <S2SV_ModStart> motion_threshold ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> unsigned char * mc_running_avg_y = denoiser -> yv12_mc_running_avg . y_buffer + recon_yoffset ; int mc_avg_y_stride = denoiser -> yv12_mc_running_avg . y_stride ; unsigned char * running_avg_y = denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_buffer + recon_yoffset ; int avg_y_stride = denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_stride ; <S2SV_ModStart> mc_running_avg_y , mc_avg_y_stride , running_avg_y , avg_y_stride , x -> thismb , 16 , motion_magnitude2 , x -> increase_denoising ) ; denoiser -> denoise_state [ block_index ] = motion_magnitude2 > 0 ? kFilterNonZeroMV : kFilterZeroMV ; if ( denoiser -> denoiser_mode != kDenoiserOnYOnly && motion_magnitude2 == 0 && decision == FILTER_BLOCK ) { unsigned char * mc_running_avg_u = <S2SV_ModEnd> <S2SV_ModStart> . u_buffer + recon_uvoffset ; unsigned char * running_avg_u = denoiser -> yv12_running_avg [ INTRA_FRAME ] . u_buffer + recon_uvoffset ; unsigned char * mc_running_avg_v = denoiser -> yv12_mc_running_avg . v_buffer + recon_uvoffset ; unsigned char * running_avg_v = denoiser -> yv12_running_avg [ INTRA_FRAME ] . v_buffer + recon_uvoffset ; int mc_avg_uv_stride = denoiser -> yv12_mc_running_avg . uv_stride ; int avg_uv_stride = denoiser -> yv12_running_avg [ INTRA_FRAME ] . uv_stride ; int signal_stride = x -> block [ 16 ] . src_stride ; decision_u = vp8_denoiser_filter_uv ( mc_running_avg_u , mc_avg_uv_stride , running_avg_u , avg_uv_stride , x -> block [ 16 ] . src + * x -> block [ 16 ] . base_src , signal_stride , motion_magnitude2 , 0 ) ; decision_v = vp8_denoiser_filter_uv ( mc_running_avg_v , mc_avg_uv_stride , running_avg_v , avg_uv_stride , x -> block [ 20 ] . src + * x -> block [ 20 ] . base_src , signal_stride , motion_magnitude2 , 0 ) ; } <S2SV_ModEnd> <S2SV_ModStart> x -> denoise_zeromv = 0 ; <S2SV_ModStart> denoiser -> denoise_state [ block_index ] = kNoFilter ; } if ( denoiser -> denoiser_mode != kDenoiserOnYOnly ) { if ( decision_u == COPY_BLOCK ) { vp8_copy_mem8x8 ( x -> block [ 16 ] . src + * x -> block [ 16 ] . base_src , x -> block [ 16 ] . src_stride , denoiser -> yv12_running_avg [ INTRA_FRAME ] . u_buffer + recon_uvoffset , denoiser -> yv12_running_avg [ INTRA_FRAME ] . uv_stride ) ; } if ( decision_v == COPY_BLOCK ) { vp8_copy_mem8x8 ( x -> block [ 20 ] . src + * x -> block [ 20 ] . base_src , x -> block [ 16 ] . src_stride , denoiser -> yv12_running_avg [ INTRA_FRAME ] . v_buffer + recon_uvoffset , denoiser -> yv12_running_avg [ INTRA_FRAME ] . uv_stride ) ; } } if ( apply_spatial_loop_filter ) { loop_filter_info lfi ; int apply_filter_col = 0 ; int apply_filter_row = 0 ; int apply_filter = 0 ; int y_stride = denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_stride ; int uv_stride = denoiser -> yv12_running_avg [ INTRA_FRAME ] . uv_stride ; int filter_level = 48 ; int hev_index = lfi_n -> hev_thr_lut [ INTER_FRAME ] [ filter_level ] ; lfi . mblim = lfi_n -> mblim [ filter_level ] ; lfi . blim = lfi_n -> blim [ filter_level ] ; lfi . lim = lfi_n -> lim [ filter_level ] ; lfi . hev_thr = lfi_n -> hev_thr [ hev_index ] ; if ( mb_col > 0 ) { apply_filter_col = ! ( ( denoiser -> denoise_state [ block_index ] == denoiser -> denoise_state [ block_index - 1 ] ) && denoiser -> denoise_state [ block_index ] != kFilterNonZeroMV ) ; if ( apply_filter_col ) { apply_filter = 1 ; vp8_loop_filter_mbv ( denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_buffer + recon_yoffset , NULL , NULL , y_stride , uv_stride , & lfi ) ; } } if ( mb_row > 0 ) { apply_filter_row = ! ( ( denoiser -> denoise_state [ block_index ] == denoiser -> denoise_state [ block_index - denoiser -> num_mb_cols ] ) && denoiser -> denoise_state [ block_index ] != kFilterNonZeroMV ) ; if ( apply_filter_row ) { apply_filter = 1 ; vp8_loop_filter_mbh ( denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_buffer + recon_yoffset , NULL , NULL , y_stride , uv_stride , & lfi ) ; } } if ( apply_filter ) { vp8_copy_mem16x16 ( denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_buffer + recon_yoffset , y_stride , x -> thismb , 16 ) ; } "
3312,"<S2SV_StartBug> return mutt_bcache_del ( bcache , id ) ; <S2SV_EndBug> ",<S2SV_ModStart> cache_id ( id ) <S2SV_ModEnd> 
3313,<S2SV_StartBug> if ( ! unconditional ( & e -> ip ) ) <S2SV_EndBug> ,<S2SV_ModStart> e <S2SV_ModEnd> 
3314,<S2SV_StartBug> if ( ipv6_addr_type ( & lsa -> l2tp_addr ) & IPV6_ADDR_LINKLOCAL ) <S2SV_EndBug> ,<S2SV_ModStart> lsa -> l2tp_conn_id = 0 ; 
3315,<S2SV_StartBug> kvm_async_pf_hash_reset ( vcpu ) ; <S2SV_EndBug> ,<S2SV_ModStart> vcpu -> arch . pv_time_enabled = false ; 
3316,<S2SV_StartBug> tcon -> bad_network_name = true ; <S2SV_EndBug> ,<S2SV_ModStart> if ( tcon ) 
3317,"<S2SV_StartBug> __skb_complete_tx_timestamp ( skb , sk , SCM_TSTAMP_SND ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false "
3318,<S2SV_StartBug> if ( xWantedSize > 0 ) <S2SV_EndBug> <S2SV_StartBug> xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; <S2SV_EndBug> <S2SV_StartBug> mtCOVERAGE_TEST_MARKER ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) && ( ( xWantedSize + xHeapStructSize ) > xWantedSize ) <S2SV_ModStart> if ( ( xWantedSize + <S2SV_ModEnd> <S2SV_ModStart> ) > xWantedSize ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) <S2SV_ModStart> xWantedSize = 0 ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { xWantedSize = 0 <S2SV_ModEnd> 
3319,<S2SV_StartBug> if ( realms == NULL || realms [ 0 ] == '\\0' || <S2SV_EndBug> ,<S2SV_ModStart> NULL || * realms [ 0 ] == 
3320,"<S2SV_StartBug> static int read_mv_component ( vp9_reader * r , <S2SV_EndBug> <S2SV_StartBug> const int sign = vp9_read ( r , mvcomp -> sign ) ; <S2SV_EndBug> <S2SV_StartBug> const int mv_class = vp9_read_tree ( r , vp9_mv_class_tree , mvcomp -> classes ) ; <S2SV_EndBug> <S2SV_StartBug> d = vp9_read_tree ( r , vp9_mv_class0_tree , mvcomp -> class0 ) ; <S2SV_EndBug> <S2SV_StartBug> d |= vp9_read ( r , mvcomp -> bits [ i ] ) << i ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> fr = vp9_read_tree ( r , vp9_mv_fp_tree , class0 ? mvcomp -> class0_fp [ d ] <S2SV_EndBug> <S2SV_StartBug> hp = usehp ? vp9_read ( r , class0 ? mvcomp -> class0_hp : mvcomp -> hp ) <S2SV_EndBug> <S2SV_StartBug> mag = vp9_get_mv_mag ( mv_class , ( d << 3 ) | ( fr << 1 ) | hp ) + 1 ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> vpx_read_tree <S2SV_ModEnd> <S2SV_ModStart> vpx_read_tree <S2SV_ModEnd> <S2SV_ModStart> ; mag = 0 <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> mag = CLASS0_SIZE << ( mv_class + 2 ) ; <S2SV_ModStart> vpx_read_tree <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> += ( <S2SV_ModEnd> 
3321,<S2SV_StartBug> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; <S2SV_EndBug> <S2SV_StartBug> if ( ses -> server -> sign ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> | NTLMSSP_NEGOTIATE_SEAL <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3322,<S2SV_StartBug> if ( info . si_code >= 0 ) <S2SV_EndBug> <S2SV_StartBug> return - EPERM ; <S2SV_EndBug> ,<S2SV_ModStart> != SI_QUEUE ) { WARN_ON_ONCE ( info . si_code < 0 ) ; <S2SV_ModEnd> <S2SV_ModStart> } 
3323,"<S2SV_StartBug> lxc_attach_options_t * options = payload -> options ; <S2SV_EndBug> <S2SV_StartBug> if ( ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_LSM ) ) { <S2SV_EndBug> <S2SV_StartBug> int proc_mounted ; <S2SV_EndBug> <S2SV_StartBug> proc_mounted = mount_proc_if_needed ( ""/"" ) ; <S2SV_EndBug> <S2SV_StartBug> ret = lsm_process_label_set ( init_ctx -> lsm_label , <S2SV_EndBug> <S2SV_StartBug> rexit ( payload -> exec_function ( payload -> exec_payload ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> int procfd = payload -> procfd ; <S2SV_ModStart> && init_ctx -> lsm_label <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( lsm_set_label_at ( procfd , on_exec , <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModEnd> <S2SV_ModStart> close ( procfd ) ; "
3324,<S2SV_StartBug> static void evtchn_2l_handle_events ( unsigned cpu ) <S2SV_EndBug> <S2SV_StartBug> irq = get_evtchn_to_irq ( port ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , struct evtchn_loop_ctrl * ctrl <S2SV_ModStart> handle_irq_for_port ( port , ctrl <S2SV_ModEnd> "
3325,<S2SV_StartBug> state -> space = strdup ( RSTRING_PTR ( space ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> fstrndup <S2SV_ModEnd> <S2SV_ModStart> , len "
3326,"<S2SV_StartBug> memcpy ( name , fp + n , name_len ) ; n += name_len ; <S2SV_EndBug> <S2SV_StartBug> attr_len = fp [ n ++ ] ; <S2SV_EndBug> ","<S2SV_ModStart> IRDA_ASSERT ( name_len < IAS_MAX_CLASSNAME + 1 , return ; ) ; <S2SV_ModStart> ; IRDA_ASSERT ( attr_len < IAS_MAX_ATTRIBNAME + 1 , return ; ) "
3327,<S2SV_StartBug> assert ( n >= 0 && n < 32 ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( n < 0 || n >= 32 ) { return EOF ; } <S2SV_ModEnd> 
3328,"<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> int active_best_quality ; <S2SV_EndBug> <S2SV_StartBug> if ( frame_is_intra_only ( cm ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( rc -> this_key_frame_forced ) { <S2SV_EndBug> <S2SV_StartBug> int qindex = rc -> last_boosted_qindex ; <S2SV_EndBug> <S2SV_StartBug> double last_boosted_q = vp9_convert_qindex_to_q ( qindex ) ; <S2SV_EndBug> <S2SV_StartBug> last_boosted_q * 0.75 ) ; <S2SV_EndBug> <S2SV_StartBug> active_best_quality = MAX ( qindex + delta_qindex , rc -> best_quality ) ; <S2SV_EndBug> <S2SV_StartBug> active_best_quality = get_active_quality ( active_worst_quality , <S2SV_EndBug> <S2SV_StartBug> q_val = vp9_convert_qindex_to_q ( active_best_quality ) ; <S2SV_EndBug> <S2SV_StartBug> q_val * q_adj_factor ) ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> end_usage == USAGE_CONSTRAINED_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> if ( q < cpi -> cq_target_quality ) <S2SV_EndBug> <S2SV_StartBug> } else if ( oxcf -> end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> active_best_quality = cpi -> cq_target_quality ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( oxcf -> end_usage == USAGE_CONSTRAINED_QUALITY ) && <S2SV_EndBug> <S2SV_StartBug> ( active_best_quality < cpi -> cq_target_quality ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_type == KEY_FRAME && ! rc -> this_key_frame_forced ) { <S2SV_EndBug> <S2SV_StartBug> * top_index = ( active_worst_quality + active_best_quality * 3 ) / 4 ; <S2SV_EndBug> <S2SV_StartBug> q = rc -> last_boosted_qindex ; <S2SV_EndBug> <S2SV_StartBug> if ( q > * top_index ) { <S2SV_EndBug> <S2SV_StartBug> * top_index = q ; <S2SV_EndBug> <S2SV_StartBug> * bottom_index = q ; <S2SV_EndBug> ","<S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> const GF_GROUP * gf_group = & cpi -> twopass . gf_group ; const int cq_level = get_active_cq_level ( rc , oxcf ) ; int active_best_quality ; int active_worst_quality = cpi -> twopass . active_worst_quality ; int q ; int * inter_minq ; ASSIGN_MINQ_TABLE ( cm -> bit_depth , inter_minq ) <S2SV_ModEnd> <S2SV_ModStart> || vp9_is_upper_layer_key_frame ( cpi ) ) { <S2SV_ModEnd> <S2SV_ModStart> double last_boosted_q ; int delta_qindex ; int qindex ; if ( cpi -> twopass . last_kfgroup_zeromotion_pct >= STATIC_MOTION_THRESH ) { qindex = MIN ( rc -> last_kf_qindex , <S2SV_ModEnd> <S2SV_ModStart> ) ; active_best_quality = qindex ; <S2SV_ModEnd> <S2SV_ModStart> , cm -> bit_depth ) ; <S2SV_ModEnd> <S2SV_ModStart> 1.25 , cm -> bit_depth ) ; active_worst_quality = MIN <S2SV_ModEnd> <S2SV_ModStart> active_worst_quality ) ; } else { qindex = rc -> last_boosted_qindex ; last_boosted_q = vp9_convert_qindex_to_q ( qindex , cm -> bit_depth ) ; delta_qindex = vp9_compute_qdelta ( rc , last_boosted_q , last_boosted_q * 0.75 , cm -> bit_depth ) ; active_best_quality = MAX ( qindex + delta_qindex , <S2SV_ModStart> } <S2SV_ModStart> get_kf_active_quality ( rc , active_worst_quality , cm -> bit_depth <S2SV_ModEnd> <S2SV_ModStart> , cm -> bit_depth <S2SV_ModStart> , cm -> bit_depth ) ; } <S2SV_ModEnd> <S2SV_ModStart> rc_mode == VPX_CQ <S2SV_ModEnd> <S2SV_ModStart> cq_level ) q = cq_level ; active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth ) ; <S2SV_ModEnd> <S2SV_ModStart> rc_mode == VPX_Q <S2SV_ModEnd> <S2SV_ModStart> cq_level ; } else { active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth ) ; if ( gf_group -> rf_level [ gf_group -> index ] == GF_ARF_LOW ) active_best_quality = ( active_best_quality + cq_level + 1 ) / 2 ; } } else { active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth <S2SV_ModEnd> <S2SV_ModStart> rc_mode == VPX_Q ) { active_best_quality = cq_level <S2SV_ModEnd> <S2SV_ModStart> rc_mode == VPX_CQ <S2SV_ModEnd> <S2SV_ModStart> cq_level ) ) { active_best_quality = cq_level ; } } } if ( ( cpi -> oxcf . rc_mode != VPX_Q ) && ( cpi -> twopass . gf_zeromotion_pct < VLOW_MOTION_THRESHOLD ) ) { if ( frame_is_intra_only ( cm ) || ( ! rc -> is_src_frame_alt_ref && ( cpi -> refresh_golden_frame || cpi -> refresh_alt_ref_frame ) ) ) { active_best_quality -= ( cpi -> twopass . extend_minq + cpi -> twopass . extend_minq_fast ) ; active_worst_quality += ( cpi -> twopass . extend_maxq / 2 ) ; } else { active_best_quality -= ( cpi -> twopass . extend_minq + cpi -> twopass . extend_minq_fast ) / 2 ; active_worst_quality += cpi -> twopass . extend_maxq ; } } <S2SV_ModEnd> <S2SV_ModStart> vpx_clear_system_state ( ) ; if ( ! ( ( frame_is_intra_only ( cm ) || vp9_is_upper_layer_key_frame ( cpi ) ) ) || ! rc -> this_key_frame_forced || ( cpi -> twopass . last_kfgroup_zeromotion_pct < STATIC_MOTION_THRESH ) ) { int qdelta = vp9_frame_type_qdelta ( cpi , gf_group -> rf_level [ gf_group -> index ] , active_worst_quality ) ; active_worst_quality = MAX ( active_worst_quality + qdelta , active_best_quality ) ; } # endif if ( rc -> frame_size_selector != UNSCALED && ! frame_is_kf_gf_arf ( cpi ) ) { int qdelta = vp9_compute_qdelta_by_rate ( rc , cm -> frame_type , active_best_quality , 2.0 , cm -> bit_depth ) ; active_best_quality = MAX ( active_best_quality + qdelta , rc -> best_quality ) ; } active_best_quality = clamp ( active_best_quality , rc -> best_quality , rc -> worst_quality ) ; active_worst_quality = clamp ( active_worst_quality , active_best_quality , rc -> worst_quality ) ; if ( oxcf -> rc_mode == VPX_Q ) { q = active_best_quality ; } else if ( ( frame_is_intra_only ( cm ) || vp9_is_upper_layer_key_frame ( cpi ) ) && <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> twopass . last_kfgroup_zeromotion_pct >= STATIC_MOTION_THRESH ) { q = MIN ( rc -> last_kf_qindex , <S2SV_ModEnd> <S2SV_ModStart> ) ; } else { q = rc -> last_boosted_qindex ; } <S2SV_ModEnd> <S2SV_ModStart> active_worst_quality <S2SV_ModEnd> <S2SV_ModStart> active_worst_quality = q ; else q = active_worst_quality ; } } clamp ( q , active_best_quality , active_worst_quality ) ; <S2SV_ModStart> active_worst_quality <S2SV_ModEnd> <S2SV_ModStart> active_best_quality ; <S2SV_ModEnd> "
3329,"<S2SV_StartBug> static void rate_block ( int plane , int block , BLOCK_SIZE plane_bsize , <S2SV_EndBug> <S2SV_StartBug> args -> rate = cost_coeffs ( args -> x , plane , block , args -> t_above + x_idx , <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> 
3330,<S2SV_StartBug> int is_udplite = IS_UDPLITE ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( udp_lib_checksum_complete ( skb ) ) <S2SV_EndBug> <S2SV_StartBug> if ( skb_csum_unnecessary ( skb ) ) <S2SV_EndBug> ,<S2SV_ModStart> ; bool checksum_valid = false <S2SV_ModStart> checksum_valid = ! <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! checksum_valid <S2SV_ModStart> checksum_valid || 
3331,"<S2SV_StartBug> static void udf_pc_to_char ( struct super_block * sb , unsigned char * from , <S2SV_EndBug> <S2SV_StartBug> int fromlen , unsigned char * to ) <S2SV_EndBug> <S2SV_StartBug> unsigned char * p = to ; <S2SV_EndBug> <S2SV_StartBug> p = to ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( p , ""./"" , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> p += udf_get_filename ( sb , pc -> componentIdent , p , <S2SV_EndBug> <S2SV_StartBug> * p ++ = '/' ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> , int tolen <S2SV_ModStart> int comp_len ; <S2SV_ModStart> ; tolen -- <S2SV_ModStart> if ( tolen == 0 ) return - ENAMETOOLONG ; <S2SV_ModStart> tolen -- ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; <S2SV_ModEnd> <S2SV_ModStart> tolen -= 3 ; <S2SV_ModStart> if ( tolen < 2 ) return - ENAMETOOLONG ; <S2SV_ModStart> tolen -= 2 ; <S2SV_ModStart> comp_len = udf_get_filename ( sb , pc -> componentIdent , pc -> lengthComponentIdent , p , tolen ) ; p += comp_len ; tolen -= comp_len ; if ( tolen == 0 ) return - ENAMETOOLONG <S2SV_ModEnd> <S2SV_ModStart> ; tolen -- <S2SV_ModStart> return 0 ; "
3332,"<S2SV_StartBug> memset ( sax , 0 , sizeof ( sax ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> * 
3333,"<S2SV_StartBug> if ( is_authenticated ( req , res ) ) { <S2SV_EndBug> ","<S2SV_ModStart> set_header ( res , ""Set-Cookie"" , ""securitytoken=%s;<S2SV_blank>Max-Age=600;<S2SV_blank>HttpOnly;<S2SV_blank>SameSite=strict%s"" , res -> token , Run . httpd . flags & Httpd_Ssl ? "";<S2SV_blank>Secure"" : """" ) ; "
3334,"<S2SV_StartBug> xref -> entries = calloc ( 1 , xref -> n_entries * sizeof ( struct _xref_entry ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> safe_calloc ( <S2SV_ModEnd> 
3335,"<S2SV_StartBug> memory_length += extra_length - available_length + BLOCK_QUEUE ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( cp , qp -> d_memory , memory_length ) ; <S2SV_EndBug> ",<S2SV_ModStart> size_t original_length = memory_length ; <S2SV_ModStart> original_length <S2SV_ModEnd> 
3336,<S2SV_StartBug> || no_port_forwarding_flag || options . disable_forwarding ) { <S2SV_EndBug> ,<S2SV_ModStart> || ! use_privsep 
3337,"<S2SV_StartBug> baswap ( ( void * ) dst , & l2cap_pi ( sock -> sk ) -> chan -> dst ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! l2cap_is_socket ( sock ) ) return - EBADFD ; 
3338,<S2SV_StartBug> kret = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( sprinc == NULL ) return NULL 
3339,"<S2SV_StartBug> if ( dst_group && ! netlink_capable ( sock , NL_NONROOT_SEND ) ) <S2SV_EndBug> ",<S2SV_ModStart> ( dst_group || dst_pid ) <S2SV_ModEnd> 
3340,"<S2SV_StartBug> MB_PREDICTION_MODE vp9_above_block_mode ( const MODE_INFO * cur_mi , <S2SV_EndBug> ",<S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> 
3341,<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * num_params ) ; <S2SV_EndBug> ,"<S2SV_ModStart> size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , num_params , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> alloc_size <S2SV_ModEnd> "
3342,<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return IMPEG2D_MB_TEX_DECODE_ERR ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } IBITS_GET ( u4_buf , u4_buf_nxt , u4_offset , u4_bits , pu4_buf_aligned , u4_sym_len ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } "
3343,<S2SV_StartBug> enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ; <S2SV_EndBug> <S2SV_StartBug> rs -> respond = respond ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; rs -> enc_tkt_reply = enc_tkt_reply 
3344,<S2SV_StartBug> image -> colorspace = RGBColorspace ; <S2SV_EndBug> ,"<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; break ; } "
3345,"<S2SV_StartBug> const int w = vpx_img_plane_width ( img , plane ) ; <S2SV_EndBug> ",<S2SV_ModStart> * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 ) 
3346,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> u64 irq_time ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( rq -> skip_clock_update ) return <S2SV_ModStart>  <S2SV_ModEnd> 
3347,"<S2SV_StartBug> void ntlm_write_message_fields ( wStream * s , NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug> ",<S2SV_ModStart> static 
3348,"<S2SV_StartBug> skb = sock_alloc_send_skb ( sk , <S2SV_EndBug> <S2SV_StartBug> skb -> csum = 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> struct frag_hdr fhdr ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } return skb_append_datato_frags ( sk , skb , getfrag , from , ( length - transhdrlen ) ) <S2SV_ModEnd> "
3349,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3350,<S2SV_StartBug> Z_STRVAL_P ( return_value ) = emalloc ( length + 1 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( length > INT_MAX ) { php_error_docref ( NULL TSRMLS_CC , E_WARNING , ""Length<S2SV_blank>parameter<S2SV_blank>must<S2SV_blank>be<S2SV_blank>no<S2SV_blank>more<S2SV_blank>than<S2SV_blank>%d"" , INT_MAX ) ; RETURN_FALSE ; } "
3351,<S2SV_StartBug> inode_init_once ( & ei -> vfs_inode ) ; <S2SV_EndBug> ,<S2SV_ModStart> init_rwsem ( & ei -> i_mmap_sem ) ; 
3352,"<S2SV_StartBug> return __load_segment_descriptor ( ctxt , selector , seg , cpl , false ) ; <S2SV_EndBug> ","<S2SV_ModStart> , NULL "
3353,"<S2SV_StartBug> char * out = mutt_mem_malloc ( 3 * len / 4 + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> int dlen = mutt_b64_decode ( out , it ) ; <S2SV_EndBug> ","<S2SV_ModStart> const int olen = <S2SV_ModEnd> <S2SV_ModStart> ; char * out = mutt_mem_malloc ( olen <S2SV_ModStart> , olen "
3354,<S2SV_StartBug> struct VpxEncoderConfig * global ) { <S2SV_EndBug> <S2SV_StartBug> global -> codec -> fourcc ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , const struct VpxRational * pixel_aspect_ratio <S2SV_ModStart> , pixel_aspect_ratio "
3355,"<S2SV_StartBug> free_ep_req ( midi -> out_ep , req ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( req -> buf != NULL ) 
3356,<S2SV_StartBug> if ( ctx -> might_cancel ) { <S2SV_EndBug> <S2SV_StartBug> spin_lock ( & cancel_lock ) ; <S2SV_EndBug> <S2SV_StartBug> list_del_rcu ( & ctx -> clist ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & cancel_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ctx -> <S2SV_ModStart> __timerfd_remove_cancel ( ctx <S2SV_ModEnd> <S2SV_ModStart> ctx -> <S2SV_ModStart>  <S2SV_ModEnd> 
3357,"<S2SV_StartBug> vmcs_write32 ( TPR_THRESHOLD , vmcs12 -> tpr_threshold ) ; <S2SV_EndBug> ",<S2SV_ModStart> } else { # ifdef CONFIG_X86_64 exec_control |= CPU_BASED_CR8_LOAD_EXITING | CPU_BASED_CR8_STORE_EXITING ; # endif 
3358,"<S2SV_StartBug> static void prob_diff_update ( const vp9_tree_index * tree , <S2SV_EndBug> <S2SV_StartBug> vp9_prob probs [ ] , <S2SV_EndBug> <S2SV_StartBug> int n , vp9_writer * w ) { <S2SV_EndBug> ",<S2SV_ModStart> vpx_tree_index <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_writer <S2SV_ModEnd> 
3359,<S2SV_StartBug> list_del ( & ti -> active_list ) ; <S2SV_EndBug> ,<S2SV_ModStart> list_del_init <S2SV_ModEnd> 
3360,<S2SV_StartBug> char * message = NULL ; <S2SV_EndBug> <S2SV_StartBug> char * language = NULL ; <S2SV_EndBug> <S2SV_StartBug> size_t reason = _libssh2_ntohu32 ( data + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> message = ( char * ) data + 9 ; <S2SV_EndBug> <S2SV_StartBug> language = ( char * ) data + 9 + message_len + 4 ; <S2SV_EndBug> <S2SV_StartBug> message_len = _libssh2_ntohu32 ( data + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> message = ( char * ) data + 6 ; <S2SV_EndBug> <S2SV_StartBug> language = ( char * ) data + 10 + message_len ; <S2SV_EndBug> <S2SV_StartBug> if ( datalen >= ( 6 + len ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> unsigned <S2SV_ModStart> unsigned <S2SV_ModStart> uint32_t reason = 0 ; struct string_buf buf ; buf . data = ( unsigned <S2SV_ModEnd> <S2SV_ModStart> ; buf . dataptr = buf . data ; buf . len = datalen ; buf . dataptr ++ ; _libssh2_get_u32 ( & buf , & reason ) ; _libssh2_get_string ( & buf , & message , & message_len ) ; _libssh2_get_string ( & buf , & language , & language_len ) ; if ( session -> ssh_msg_disconnect ) { LIBSSH2_DISCONNECT ( session , reason , ( const <S2SV_ModEnd> <S2SV_ModStart> message , message_len , ( const char * ) language , <S2SV_ModEnd> <S2SV_ModStart> struct string_buf buf ; buf . data = ( unsigned <S2SV_ModEnd> <S2SV_ModStart> ; buf . dataptr = buf . data ; buf . len = datalen ; buf . dataptr += 2 ; _libssh2_get_string ( & buf , & message , & message_len ) ; _libssh2_get_string ( & buf , & language , & language_len ) ; } if ( session -> ssh_msg_debug ) { LIBSSH2_DEBUG ( session , always_display , ( const <S2SV_ModEnd> <S2SV_ModStart> message , message_len , ( const char * ) <S2SV_ModEnd> <S2SV_ModStart> ( len <= ( UINT_MAX - 6 ) ) && ( <S2SV_ModStart> ) "
3361,<S2SV_StartBug> SvcInternal * const si = ( SvcInternal * ) svc_ctx -> internal ; <S2SV_EndBug> ,<S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> <S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> 
3362,"<S2SV_StartBug> in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3363,"<S2SV_StartBug> static struct btrfs_dir_item * btrfs_match_dir_item_name ( struct btrfs_root * root , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3364,<S2SV_StartBug> return ms ; <S2SV_EndBug> ,<S2SV_ModStart> ms -> elf_notes_max = FILE_ELF_NOTES_MAX ; 
3365,"<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_lock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3366,<S2SV_StartBug> mflags = EXTRACT_LE_8BITS ( rhp -> rh_short . sh_flags ) ; <S2SV_EndBug> ,<S2SV_ModStart> ND_TCHECK ( rhp -> rh_short . sh_flags ) ; 
3367,<S2SV_StartBug> png_structp p = ( png_structp ) png_ptr ; <S2SV_EndBug> <S2SV_StartBug> png_uint_32 save_flags = p -> flags ; <S2SV_EndBug> ,<S2SV_ModStart> ; png_uint_32 save_flags ; png_uint_32 num_bytes ; if ( png_ptr == NULL ) return ( NULL ) ; p <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3368,<S2SV_StartBug> pkt . kind = VPX_CODEC_STATS_PKT ; <S2SV_EndBug> ,<S2SV_ModStart> ( void ) cpi ; 
3369,"<S2SV_StartBug> if ( buf ) <S2SV_EndBug> <S2SV_StartBug> grub_memcpy ( buf , data + pos + real_offset , len ) ; <S2SV_EndBug> ",<S2SV_ModStart> { if ( pos + real_offset + len >= size ) { grub_errno = GRUB_ERR_BAD_FS ; return grub_errno ; } <S2SV_ModStart> } 
3370,<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> msg -> msg_namelen = sizeof ( struct sockaddr_x25 ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * sx25 ) ; } <S2SV_ModEnd> 
3371,<S2SV_StartBug> get_page ( page ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( ! try_get_page ( page ) ) ) { spin_unlock ( ptl ) ; return ERR_PTR ( - ENOMEM ) ; } <S2SV_ModEnd> 
3372,"<S2SV_StartBug> if ( WARN ( irq >= nr_irqs , ""Invalid<S2SV_blank>irq<S2SV_blank>%d!\\n"" , irq ) ) <S2SV_EndBug> <S2SV_StartBug> return info_for_irq ( irq ) -> evtchn ; <S2SV_EndBug> ",<S2SV_ModStart> const struct irq_info * info = NULL ; if ( likely ( irq < nr_irqs ) ) info = info_for_irq ( irq ) ; if ( ! info <S2SV_ModEnd> <S2SV_ModStart> info <S2SV_ModEnd> 
3373,<S2SV_StartBug> bufp += bytes_read ; <S2SV_EndBug> ,<S2SV_ModStart> stripsize <S2SV_ModEnd> 
3374,"<S2SV_StartBug> err = xt_check_entry_offsets ( e , e -> target_offset , e -> next_offset ) ; <S2SV_EndBug> ","<S2SV_ModStart> elems , e -> "
3375,<S2SV_StartBug> args -> rmtblkno = 0 ; <S2SV_EndBug> <S2SV_StartBug> args -> rmtblkcnt = 0 ; <S2SV_EndBug> <S2SV_StartBug> args -> rmtblkcnt = args -> rmtblkcnt2 ; <S2SV_EndBug> ,<S2SV_ModStart> rmtvaluelen2 = args -> rmtvaluelen ; args -> <S2SV_ModStart> = 0 ; args -> rmtvaluelen <S2SV_ModStart> ; args -> rmtvaluelen = args -> rmtvaluelen2 
3376,"<S2SV_StartBug> union sctp_addr_param * addr_param ; <S2SV_EndBug> <S2SV_StartBug> addr_param = ( union sctp_addr_param * ) hdr -> params ; <S2SV_EndBug> <S2SV_StartBug> ( sctp_paramhdr_t * ) ( ( void * ) addr_param + length ) , <S2SV_EndBug> ","<S2SV_ModStart> __u32 serial <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> chunk , true , <S2SV_ModEnd> "
3377,"<S2SV_StartBug> vp9_writer * w , TOKENEXTRA * * tok , TOKENEXTRA * tok_end ) { <S2SV_EndBug> <S2SV_StartBug> int mi_row , mi_col ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( cpi -> mb . e_mbd . left_seg_context ) ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> const TOKENEXTRA * const <S2SV_ModEnd> <S2SV_ModStart> const VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> td . mb . e_mbd ; <S2SV_ModStart> ; set_partition_probs ( cm , xd ) <S2SV_ModStart> xd -> <S2SV_ModEnd> "
3378,<S2SV_StartBug> bucket = apr_bucket_eos_create ( r -> connection -> bucket_alloc ) ; <S2SV_EndBug> ,<S2SV_ModStart> apr_brigade_cleanup ( brigade ) ; 
3379,"<S2SV_StartBug> checkstackGC ( L , p -> maxstacksize + 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> luaD_checkstack <S2SV_ModEnd> 
3380,<S2SV_StartBug> const char * sender ; <S2SV_EndBug> <S2SV_StartBug> sd_bus_message_handler_t callback ; <S2SV_EndBug> <S2SV_StartBug> assert ( registry ) ; <S2SV_EndBug> ,"<S2SV_ModStart> int c ; # endif <S2SV_ModStart> int r ; assert ( call ) ; assert ( action ) ; assert ( registry ) ; r = check_good_user ( call , good_user ) ; if ( r != 0 ) return r ; # if ENABLE_POLKIT q = hashmap_get ( * registry , call ) ; if ( q ) { int authorized , challenge ; assert ( q -> reply ) ; if ( ! streq ( q -> action , action ) || ! strv_equal ( q -> details , ( char * * ) details ) ) return - ESTALE ; if ( sd_bus_message_is_method_error ( q -> reply , NULL ) ) { const sd_bus_error * e ; e = sd_bus_message_get_error ( q -> reply ) ; if ( sd_bus_error_has_name ( e , SD_BUS_ERROR_SERVICE_UNKNOWN ) || sd_bus_error_has_name ( e , SD_BUS_ERROR_NAME_HAS_NO_OWNER ) ) return - EACCES ; sd_bus_error_copy ( ret_error , e ) ; return - sd_bus_error_get_errno ( e ) ; } r = sd_bus_message_enter_container ( q -> reply , 'r' , ""bba{ss}"" ) ; if ( r >= 0 ) r = sd_bus_message_read ( q -> reply , ""bb"" , & authorized , & challenge ) ; if ( r < 0 ) return r ; if ( authorized ) return 1 ; if ( challenge ) return sd_bus_error_set ( ret_error , SD_BUS_ERROR_INTERACTIVE_AUTHORIZATION_REQUIRED , ""Interactive<S2SV_blank>authentication<S2SV_blank>required."" ) ; return - EACCES ; } # endif r = sd_bus_query_sender_privilege ( call , capability ) ; if ( r < 0 ) return r ; else if ( r > 0 ) return 1 ; sender = sd_bus_message_get_sender ( call ) ; if ( ! sender ) return - EBADMSG ; # if ENABLE_POLKIT c = sd_bus_message_get_allow_interactive_authorization ( call ) ; if ( c < 0 ) return c ; if ( c > 0 ) interactive = true ; r = hashmap_ensure_allocated ( registry , NULL ) ; if ( r < 0 ) return r ; r = sd_bus_message_new_method_call ( call -> bus , & pk , ""org.freedesktop.PolicyKit1"" , ""/org/freedesktop/PolicyKit1/Authority"" , ""org.freedesktop.PolicyKit1.Authority"" , ""CheckAuthorization"" ) ; if ( r < 0 ) return r ; r = sd_bus_message_append ( pk , ""(sa{sv})s"" , ""system-bus-name"" , 1 , ""name"" , ""s"" , sender , <S2SV_ModEnd> <S2SV_ModStart> if ( r < 0 ) return r ; r = bus_message_append_strv_key_value ( pk , details ) ; if ( r < 0 ) return r ; r = sd_bus_message_append ( pk , ""us"" , interactive , NULL ) ; if ( r < 0 ) return r ; q = new ( AsyncPolkitQuery , 1 ) ; if ( ! q ) return - ENOMEM ; * q = ( AsyncPolkitQuery ) { . request = sd_bus_message_ref ( call ) , } ; q -> action = strdup ( action ) ; if ( ! q -> action ) { async_polkit_query_free ( q ) ; return - ENOMEM ; } q -> details = strv_copy ( ( char * * ) details ) ; if ( ! q -> details ) { async_polkit_query_free ( q ) ; return - ENOMEM ; } r = hashmap_put ( * registry , call , q ) ; if ( r < 0 ) { async_polkit_query_free ( q ) ; return r ; } q -> registry = * registry ; r = sd_bus_call_async ( call -> bus , & q -> slot , pk , async_polkit_callback , q , 0 ) ; if ( r < 0 ) { async_polkit_query_free ( q ) ; return r ; } return 0 ; # endif <S2SV_ModEnd> "
3381,<S2SV_StartBug> dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug> ,<S2SV_ModStart> ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> 
3382,"<S2SV_StartBug> if ( ( * ++ ptr == \'""\' ) && ( strchr ( & ptr [ 1 ] , \'""\' ) != NULL ) ) { <S2SV_EndBug> ",<S2SV_ModStart> strlen ( ptr ) > 2 ) && ( 
3383,<S2SV_StartBug> goto err_reprs_clean ; <S2SV_EndBug> <S2SV_StartBug> nfp_repr_free ( repr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( err ) { <S2SV_EndBug> <S2SV_StartBug> nfp_port_free ( port ) ; <S2SV_EndBug> ,<S2SV_ModStart> nfp_repr_free ( repr ) ; <S2SV_ModStart> kfree ( repr_priv ) ; <S2SV_ModStart> kfree ( repr_priv ) ; <S2SV_ModStart> kfree ( repr_priv ) ; 
3384,<S2SV_StartBug> proc = rqstp -> rq_procinfo ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( nfs_request_too_big ( rqstp , proc ) ) { dprintk ( ""nfsd:<S2SV_blank>NFSv%d<S2SV_blank>argument<S2SV_blank>too<S2SV_blank>large\\n"" , rqstp -> rq_vers ) ; * statp = rpc_garbage_args ; return 1 ; } "
3385,"<S2SV_StartBug> NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> GSTD_GSS_ERROR ( maj , min , NULL , ""gss_accept_sec_context"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; gss_release_buffer ( & min , & in <S2SV_ModStart> gss_release_buffer ( & min , & out ) ; "
3386,"<S2SV_StartBug> ( * respond ) ( arg , 0 , NULL , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> ( * respond ) ( arg , 0 , NULL , NULL , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart> EINVAL <S2SV_ModEnd> <S2SV_ModStart> EINVAL <S2SV_ModEnd> 
3387,<S2SV_StartBug> struct twopass_rc * const twopass = & svc -> layer_context [ i ] . twopass ; <S2SV_EndBug> ,<S2SV_ModStart> TWO_PASS <S2SV_ModEnd> 
3388,<S2SV_StartBug> while ( peek ( s ) != '>' && ! eol ( s ) ) <S2SV_EndBug> ,<S2SV_ModStart> && ! eof ( s ) 
3389,"<S2SV_StartBug> avio_skip ( pb , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> sscanf ( val , ""%"" SCNu32 ""%"" SCNu32 ""%"" SCNu32 ""%"" SCNu32 , <S2SV_EndBug> <S2SV_StartBug> for ( idx = 0 ; idx < 4 ; idx ++ ) { <S2SV_EndBug> ",<S2SV_ModStart> int ret ; <S2SV_ModStart> ret = <S2SV_ModStart> if ( ret != 4 ) return AVERROR_INVALIDDATA ; 
3390,"<S2SV_StartBug> if ( drop_privileges ( nagios_user , nagios_group ) == ERROR ) { <S2SV_EndBug> <S2SV_StartBug> exit ( EXIT_FAILURE ) ; <S2SV_EndBug> ","<S2SV_ModStart> daemon_mode == TRUE && sigrestart == FALSE ) { result = daemon_init ( ) ; if ( result == ERROR ) { logit ( NSLOG_PROCESS_INFO | NSLOG_RUNTIME_ERROR , TRUE , ""Bailing<S2SV_blank>out<S2SV_blank>due<S2SV_blank>to<S2SV_blank>failure<S2SV_blank>to<S2SV_blank>daemonize.<S2SV_blank>(PID=%d)"" , ( int ) getpid ( ) ) ; cleanup ( ) ; exit ( EXIT_FAILURE ) ; } nagios_pid = ( int ) getpid ( ) ; } if ( <S2SV_ModStart>  <S2SV_ModEnd> "
3391,<S2SV_StartBug> if ( REMAIN > INT_MAX ) <S2SV_EndBug> ,<S2SV_ModStart> == 0 || REMAIN 
3392,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> check_stack_depth ( ) ; 
3393,"<S2SV_StartBug> vma = find_vma_prev ( mm , start , & prev ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! mmget_still_valid ( mm ) ) goto out_unlock ; 
3394,"<S2SV_StartBug> vpx_memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; memset <S2SV_ModEnd> <S2SV_ModStart> memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; memset <S2SV_ModEnd> <S2SV_ModStart> memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; memset <S2SV_ModEnd> "
3395,"<S2SV_StartBug> struct dentry * dir = nd -> path . dentry ; <S2SV_EndBug> <S2SV_StartBug> error = may_create_in_sticky ( dir , <S2SV_EndBug> ","<S2SV_ModStart> ; kuid_t dir_uid = dir -> d_inode -> i_uid ; umode_t dir_mode = dir -> d_inode -> i_mode <S2SV_ModStart> dir_mode , dir_uid <S2SV_ModEnd> "
3396,"<S2SV_StartBug> static vpx_codec_err_t vp8e_set_previewpp ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> <S2SV_StartBug> vp8_postproc_cfg_t * data = va_arg ( args , vp8_postproc_cfg_t * ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ctr_id ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3397,<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( clk_src ) ; 
3398,<S2SV_StartBug> args -> skippable [ 0 ] &= ( ! args -> x -> plane [ plane ] . eobs [ block ] ) ; <S2SV_EndBug> ,<S2SV_ModStart> ( void ) plane ; ( void ) plane_bsize ; ( void ) tx_size ; <S2SV_ModStart>  <S2SV_ModEnd> 
3399,<S2SV_StartBug> int nAlloc = ( pIn ? pIn [ 0 ] * 2 : 10 ) + nInt ; <S2SV_EndBug> ,<S2SV_ModStart> sqlite3_int64 <S2SV_ModEnd> <S2SV_ModStart> 2 * ( sqlite3_int64 ) pIn [ 0 ] <S2SV_ModEnd> 
3400,"<S2SV_StartBug> if ( sscanf ( l_line , ""%u<S2SV_blank>%u<S2SV_blank>%u"" , o_row_count , o_column_count , o_element_count ) == 3 ) { <S2SV_EndBug> <S2SV_StartBug> l_row -- ; <S2SV_EndBug> ",<S2SV_ModStart> 3 == <S2SV_ModStart> && 0 != * o_row_count && 0 != * o_column_count && 0 != * o_element_count ) <S2SV_ModEnd> <S2SV_ModStart> LIBXSMM_ASSERT ( 0 != l_row && 0 != l_column ) ; 
3401,<S2SV_StartBug> if ( * s == '#' ) { <S2SV_EndBug> <S2SV_StartBug> if ( * s == 'x' || * s == 'X' ) { <S2SV_EndBug> <S2SV_StartBug> while ( * s ) { <S2SV_EndBug> <S2SV_StartBug> while ( isDIGIT ( * s ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( isALNUM ( * s ) ) <S2SV_EndBug> <S2SV_StartBug> if ( * s == ';' ) <S2SV_EndBug> ,<S2SV_ModStart> s < end && <S2SV_ModStart> ( s < end && <S2SV_ModStart> ) <S2SV_ModStart> s < end <S2SV_ModEnd> <S2SV_ModStart> s < end && <S2SV_ModStart> s < end && <S2SV_ModStart> s < end && 
3402,"<S2SV_StartBug> node * n = Ta3Parser_ParseStringObject ( s , filename , <S2SV_EndBug> ",<S2SV_ModStart> n ; if ( feature_version >= 7 ) iflags |= PyPARSE_ASYNC_ALWAYS ; 
3403,"<S2SV_StartBug> int openasuser ; <S2SV_EndBug> <S2SV_StartBug> int should_free_authpending_file = 0 ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , authfile_dir_len , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> cfg -> auth_file = buf ; <S2SV_EndBug> <S2SV_StartBug> openasuser = geteuid ( ) == 0 && cfg -> openasuser ; <S2SV_EndBug> <S2SV_StartBug> if ( openasuser ) { <S2SV_EndBug> <S2SV_StartBug> if ( seteuid ( pw_s . pw_uid ) ) { <S2SV_EndBug> <S2SV_StartBug> DBG ( ""Unable<S2SV_blank>to<S2SV_blank>switch<S2SV_blank>user<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>%i"" , pw_s . pw_uid ) ; <S2SV_EndBug> <S2SV_StartBug> DBG ( ""Switched<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>%i"" , pw_s . pw_uid ) ; <S2SV_EndBug> <S2SV_StartBug> if ( seteuid ( 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> DBG ( ""Switched<S2SV_blank>back<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>0"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> = 0 <S2SV_ModStart> ; PAM_MODUTIL_DEF_PRIVS ( privs ) <S2SV_ModStart> openasuser = geteuid ( ) == 0 ? 1 : 0 ; <S2SV_ModStart> if ( ! openasuser ) { DBG ( ""WARNING:<S2SV_blank>not<S2SV_blank>dropping<S2SV_blank>privileges<S2SV_blank>when<S2SV_blank>reading<S2SV_blank>%s,<S2SV_blank>please<S2SV_blank>"" ""consider<S2SV_blank>setting<S2SV_blank>openasuser=1<S2SV_blank>in<S2SV_blank>the<S2SV_blank>module<S2SV_blank>configuration"" <S2SV_ModEnd> <S2SV_ModStart> } } DBG ( ""Using<S2SV_blank>authentication<S2SV_blank>file<S2SV_blank>%s"" , buf ) ; <S2SV_ModStart> if ( ! openasuser ) { openasuser <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> DBG ( ""Dropping<S2SV_blank>privileges"" ) ; if ( pam_modutil_drop_priv ( pamh , & privs , pw <S2SV_ModEnd> <S2SV_ModStart> pw -> <S2SV_ModEnd> <S2SV_ModStart> pw -> <S2SV_ModEnd> <S2SV_ModStart> pam_modutil_regain_priv ( pamh , & privs ) ) { DBG ( ""could<S2SV_blank>not<S2SV_blank>restore<S2SV_blank>privileges"" <S2SV_ModEnd> <S2SV_ModStart> ""Restored<S2SV_blank>privileges"" <S2SV_ModEnd> "
3404,<S2SV_StartBug> if ( item_num > 65536 ) { <S2SV_EndBug> ,<S2SV_ModStart> || item_num < 0 
3405,<S2SV_StartBug> for ( ( pad = w % 4 ) ? ( 4 - w % 4 ) : 0 ; pad > 0 ; pad -- ) <S2SV_EndBug> ,<S2SV_ModStart> pad = ( <S2SV_ModEnd> 
3406,"<S2SV_StartBug> OPJ_UINT32 x , y ; <S2SV_EndBug> <S2SV_StartBug> x = y = 0U ; <S2SV_EndBug> <S2SV_StartBug> * pix = c1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return OPJ_TRUE ; <S2SV_EndBug> ","<S2SV_ModStart> , written <S2SV_ModStart> written = <S2SV_ModStart> ; written ++ <S2SV_ModStart> written ++ ; <S2SV_ModStart> if ( written != width * height ) { fprintf ( stderr , ""warning,<S2SV_blank>image\'s<S2SV_blank>actual<S2SV_blank>size<S2SV_blank>does<S2SV_blank>not<S2SV_blank>match<S2SV_blank>advertized<S2SV_blank>one\\n"" ) ; return OPJ_FALSE ; } "
3407,"<S2SV_StartBug> id = ipc_addid ( & msg_ids ( ns ) , & msq -> q_perm , ns -> msg_ctlmni ) ; <S2SV_EndBug> <S2SV_StartBug> msq -> q_stime = msq -> q_rtime = 0 ; <S2SV_EndBug> ",<S2SV_ModStart> msq -> q_stime = msq -> q_rtime = 0 ; msq -> q_ctime = get_seconds ( ) ; msq -> q_cbytes = msq -> q_qnum = 0 ; msq -> q_qbytes = ns -> msg_ctlmnb ; msq -> q_lspid = msq -> q_lrpid = 0 ; INIT_LIST_HEAD ( & msq -> q_messages ) ; INIT_LIST_HEAD ( & msq -> q_receivers ) ; INIT_LIST_HEAD ( & msq -> q_senders ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
3408,"<S2SV_StartBug> struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , filter == SWITCHABLE ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , filter_to_literal [ filter ] , 2 ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> 
3409,"<S2SV_StartBug> static void read_switchable_interp_probs ( FRAME_CONTEXT * fc , vp9_reader * r ) { <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> 
3410,"<S2SV_StartBug> JAS_DBGLOG ( 101 , ( ""jas_malloc<S2SV_blank>called<S2SV_blank>with<S2SV_blank>%zu\\n"" , size ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""jas_malloc(%zu)\\n"" <S2SV_ModEnd> "
3411,<S2SV_StartBug> return ret <= 0 ? ret : - EIO ; <S2SV_EndBug> ,<S2SV_ModStart> < <S2SV_ModEnd> 
3412,<S2SV_StartBug> data [ l ++ ] = SEG_REG_PREFIXES [ op -> operands [ 1 ] . regs [ 0 ] ] ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = 0x8b ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = offset ; <S2SV_EndBug> <S2SV_StartBug> return l ; <S2SV_EndBug> <S2SV_StartBug> if ( a -> bits == 64 ) { <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = 0x25 ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 0x5 ; <S2SV_EndBug> <S2SV_StartBug> if ( op -> operands [ 1 ] . scale [ 0 ] > 1 ) { <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 4 ; <S2SV_EndBug> ,<S2SV_ModStart> % 6 <S2SV_ModStart> data [ l ++ ] = ( ( ( ut32 ) op -> operands [ 0 ] . reg ) << 3 ) | 0x5 ; data [ l ++ ] = offset ; data [ l ++ ] = offset >> 8 ; data [ l ++ ] = offset >> 16 ; data [ l ++ ] = offset >> 24 ; return l ; } if ( a -> bits == 64 ) { if ( op -> operands [ 0 ] . type & OT_QWORD ) { if ( ! ( op -> operands [ 1 ] . type & OT_QWORD ) ) { if ( op -> operands [ 1 ] . regs [ 0 ] != - 1 ) { data [ l ++ ] = 0x67 ; } data [ l ++ ] = 0x48 ; } } else if ( op -> operands [ 1 ] . type & OT_DWORD ) { data [ l ++ ] = 0x44 ; } else if ( ! ( op -> operands [ 1 ] . type & OT_QWORD ) ) { data [ l ++ ] = 0x67 ; } if ( op -> operands [ 1 ] . type & OT_QWORD && op -> operands [ 0 ] . type & OT_QWORD ) { data [ l ++ ] = 0x48 ; } } if ( op -> operands [ 0 ] . type & OT_WORD ) { data [ l ++ ] = 0x66 ; data [ l ++ ] = op -> operands [ 1 ] . type & OT_BYTE ? 0x8a : 0x8b ; } else { data [ l ++ ] = ( op -> operands [ 1 ] . type & OT_BYTE || op -> operands [ 0 ] . type & OT_BYTE ) ? 0x8a : 0x8b ; } if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_UNDEFINED ) { if ( a -> bits == 64 ) { data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 0x4 ; data [ l ++ ] = 0x25 ; } else { <S2SV_ModStart> } <S2SV_ModStart> } else { if ( op -> operands [ 1 ] . scale [ 0 ] > 1 ) { data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 4 ; if ( op -> operands [ 1 ] . scale [ 0 ] >= 2 ) { base = 5 ; } if ( base ) { data [ l ++ ] = getsib ( op -> operands [ 1 ] . scale [ 0 ] ) << 6 | op -> operands [ 1 ] . regs [ 0 ] << 3 | base ; } else { data [ l ++ ] = getsib ( op -> operands [ 1 ] . scale [ 0 ] ) << 3 | op -> operands [ 1 ] . regs [ 0 ] ; } if ( offset || base ) { data [ l ++ ] = offset ; data [ l ++ ] = offset >> 8 ; data [ l ++ ] = offset >> 16 ; data [ l ++ ] = offset >> 24 ; } <S2SV_ModStart> op -> operands [ 1 ] . regs [ 1 ] != X86R_UNDEFINED <S2SV_ModEnd> <S2SV_ModStart> op -> operands [ 1 ] . regs [ 1 ] << 3 | op -> operands [ 1 ] . regs [ 0 ] ; return l ; } if ( offset || op -> operands [ 1 ] . regs [ 0 ] == X86R_EBP ) { mod = 0x2 ; if ( op -> operands [ 1 ] . offset > 127 ) { mod = 0x4 ; } } if ( a -> bits == 64 && offset && op -> operands [ 0 ] . type & OT_QWORD ) { if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_RIP ) { data [ l ++ ] = 0x5 <S2SV_ModEnd> <S2SV_ModStart> if ( op -> operands [ 1 ] . offset > 127 ) { data [ l ++ ] = 0x80 | <S2SV_ModEnd> <S2SV_ModStart> op -> operands [ 1 ] . regs [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> data [ l ++ ] = 0x40 | op -> operands [ 1 ] . regs [ 0 ] ; } } if ( op -> operands [ 1 ] . offset > 127 ) { mod = 0x1 ; } } else { if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_EIP && ( op -> operands [ 0 ] . type & OT_DWORD ) ) { data [ l ++ ] = 0x0d ; } else if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_RIP && ( op -> operands [ 0 ] . type & OT_QWORD ) ) { data [ l ++ ] = 0x05 ; } else { data [ l ++ ] = mod << 5 | <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3413,"<S2SV_StartBug> if ( mount ( console -> name , path , ""none"" , MS_BIND , 0 ) ) { <S2SV_EndBug> ","<S2SV_ModStart> safe_mount ( console -> name , path , ""none"" , MS_BIND , 0 , rootfs -> mount <S2SV_ModEnd> "
3414,"<S2SV_StartBug> static int fsmVerify ( const char * path , rpmfi fi ) <S2SV_EndBug> <S2SV_StartBug> rc = fsmStat ( path , 0 , & dsb ) ; <S2SV_EndBug> <S2SV_StartBug> if ( S_ISDIR ( dsb . st_mode ) ) return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> , const struct stat * fsb <S2SV_ModStart> uid_t luid = dsb . st_uid ; <S2SV_ModStart> && ( luid == 0 || luid == fsb -> st_uid ) ) <S2SV_ModEnd> "
3415,"<S2SV_StartBug> int r = ( int ) recv ( p_scb -> socket_id [ 1 ] , p_dcb -> p_tx_pkt , <S2SV_EndBug> <S2SV_StartBug> p_dcb -> mtu , MSG_DONTWAIT ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3416,<S2SV_StartBug> dentry -> d_fsdata = ( void * ) ns -> ops ; <S2SV_EndBug> ,<S2SV_ModStart> d_flags |= DCACHE_RCUACCESS ; dentry -> 
3417,"<S2SV_StartBug> uint8_t * buf = mempool_alloc ( buf_pool ) ; <S2SV_EndBug> <S2SV_StartBug> uint8_t * ptr ; <S2SV_EndBug> <S2SV_StartBug> int n ; <S2SV_EndBug> <S2SV_StartBug> ptr = buf + sizeof ( pack -> hdr ) ; <S2SV_EndBug> <S2SV_StartBug> avp -> M = attr -> M ; <S2SV_EndBug> <S2SV_StartBug> avp -> length = sizeof ( * avp ) + attr -> length ; <S2SV_EndBug> <S2SV_StartBug> n = sendto ( sock , buf , ntohs ( pack -> hdr . length ) , 0 , <S2SV_EndBug> <S2SV_StartBug> if ( n != ntohs ( pack -> hdr . length ) ) { <S2SV_EndBug> <S2SV_StartBug> log_warn ( ""l2tp:<S2SV_blank>short<S2SV_blank>write<S2SV_blank>(%i/%i)\\n"" , n , ntohs ( pack -> hdr . length ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct l2tp_hdr_t * hdr <S2SV_ModEnd> <S2SV_ModStart> buf , * <S2SV_ModStart> , len ; buf = mempool_alloc ( buf_pool <S2SV_ModEnd> <S2SV_ModStart> hdr = ( struct l2tp_hdr_t * ) buf ; ptr = ( uint8_t * ) ( hdr + 1 ) ; len = <S2SV_ModEnd> <S2SV_ModStart> flags = htons ( ( attr -> M ? L2TP_AVP_FLAG_M : 0 ) | ( attr -> H ? L2TP_AVP_FLAG_H : 0 ) | ( ( <S2SV_ModEnd> <S2SV_ModStart> ) & L2TP_AVP_LEN_MASK ) <S2SV_ModEnd> <S2SV_ModStart> hdr -> flags = htons ( pack -> hdr . flags ) ; <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> "
3418,"<S2SV_StartBug> if ( strlen ( str ) >= sizeof ( lowstr ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ParseDateTime ( str , lowstr , field , ftype , & nf , ptr ) != 0 || <S2SV_EndBug> ","<S2SV_ModStart> > MAXDATELEN ) { errno = PGTYPES_TS_BAD_TIMESTAMP ; return ( noresult ) ; } if ( ParseDateTime ( str , lowstr , field , ftype , & nf , ptr ) != 0 || DecodeDateTime ( field , ftype , nf , & dtype , tm , & fsec , 0 ) != 0 ) { errno = PGTYPES_TS_BAD_TIMESTAMP ; return ( noresult ) ; } switch ( dtype ) { case DTK_DATE : if ( tm2timestamp ( tm , fsec , NULL , & result <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3419,<S2SV_StartBug> if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { <S2SV_EndBug> ,<S2SV_ModStart> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo -> 
3420,"<S2SV_StartBug> ""zlib@openssh.com,zlib,none"" : ""none,zlib@openssh.com,zlib"" ; <S2SV_EndBug> ","<S2SV_ModStart> ""zlib@openssh.com,none"" : ""none,zlib@openssh.com"" <S2SV_ModEnd> "
3421,<S2SV_StartBug> len = ( ms -> c . len += 20 ) * sizeof ( * ms -> c . li ) ; <S2SV_EndBug> ,<S2SV_ModStart> = 20 + level <S2SV_ModEnd> 
3422,"<S2SV_StartBug> if ( ! sock_flag ( sk , SOCK_ZAPPED ) ) <S2SV_EndBug> <S2SV_StartBug> if ( sk -> sk_state != TCP_CLOSE ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ! sock_flag ( sk , SOCK_ZAPPED ) ) goto out_unlock ; if ( "
3423,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> usb_conv_info -> class_data_type = USB_CONV_AUDIO ; } else if ( usb_conv_info -> class_data_type != USB_CONV_AUDIO ) { return 0 ; 
3424,<S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> <S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> <S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> ,<S2SV_ModStart> sas_eh_finish_cmd <S2SV_ModEnd> <S2SV_ModStart> sas_eh_finish_cmd <S2SV_ModEnd> <S2SV_ModStart> sas_eh_finish_cmd <S2SV_ModEnd> 
3425,<S2SV_StartBug> void close_connection ( h2o_http2_conn_t * conn ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return - 1 ; } return 0 ; <S2SV_ModEnd> 
3426,<S2SV_StartBug> # if ENABLE_BGP_VNC <S2SV_EndBug> ,<S2SV_ModStart> ENABLE_BGP_VNC_ATTR <S2SV_ModEnd> 
3427,<S2SV_StartBug> while ( res == 0 && dev ) { <S2SV_EndBug> <S2SV_StartBug> dev = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3428,"<S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> case CFM_CHASSIS_ID_MAC_ADDRESS : <S2SV_EndBug> <S2SV_StartBug> hexdump |= cfm_network_addr_print ( ndo , tptr ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( mgmt_addr_length ) { <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> cfm_tlv_len -= mgmt_addr_length ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>(TLV<S2SV_blank>too<S2SV_blank>short)"" ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mgmt_addr_length ) { <S2SV_EndBug> <S2SV_StartBug> cfm_tlv_len -= mgmt_addr_length ; <S2SV_EndBug> <S2SV_StartBug> tptr += cfm_tlv_len ; <S2SV_EndBug> ","<S2SV_ModStart> goto next_tlv <S2SV_ModEnd> <S2SV_ModStart> goto next_tlv <S2SV_ModEnd> <S2SV_ModStart> goto next_tlv <S2SV_ModEnd> <S2SV_ModStart> if ( chassis_id_length != ETHER_ADDR_LEN ) { ND_PRINT ( ( ndo , ""<S2SV_blank>(invalid<S2SV_blank>MAC<S2SV_blank>address<S2SV_blank>length)"" ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> + 1 , chassis_id_length <S2SV_ModStart> break <S2SV_ModEnd> <S2SV_ModStart> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address<S2SV_blank>Domain<S2SV_blank>Length<S2SV_blank>%u"" , mgmt_addr_length ) ) ; <S2SV_ModStart> goto next_tlv <S2SV_ModEnd> <S2SV_ModStart> ; hex_print ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address<S2SV_blank>Domain:<S2SV_blank>"" , tptr , mgmt_addr_length ) <S2SV_ModStart> ""<S2SV_blank>(Management<S2SV_blank>Address<S2SV_blank>Length<S2SV_blank>is<S2SV_blank>missing)"" ) ) ; hexdump = TRUE ; break <S2SV_ModEnd> <S2SV_ModStart> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address<S2SV_blank>Length<S2SV_blank>%u"" , mgmt_addr_length ) ) ; <S2SV_ModStart> ; hex_print ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address:<S2SV_blank>"" , tptr , mgmt_addr_length ) <S2SV_ModStart> next_tlv : "
3429,"<S2SV_StartBug> jas_eprintf ( ""RCT<S2SV_blank>requires<S2SV_blank>at<S2SV_blank>least<S2SV_blank>three<S2SV_blank>components\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> jpc_iict ( tile -> tcomps [ 0 ] . data , tile -> tcomps [ 1 ] . data , <S2SV_EndBug> ","<S2SV_ModStart> ) ; return - 1 ; } if ( ! jas_image_cmpt_domains_same ( dec -> image ) ) { jas_eprintf ( ""RCT<S2SV_blank>requires<S2SV_blank>all<S2SV_blank>components<S2SV_blank>have<S2SV_blank>the<S2SV_blank>same<S2SV_blank>domain\\n"" <S2SV_ModStart> if ( ! jas_image_cmpt_domains_same ( dec -> image ) ) { jas_eprintf ( ""RCT<S2SV_blank>requires<S2SV_blank>all<S2SV_blank>components<S2SV_blank>have<S2SV_blank>the<S2SV_blank>same<S2SV_blank>domain\\n"" ) ; return - 1 ; } "
3430,<S2SV_StartBug> if ( ret ) <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> ptr -> kernel_data = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> ptr -> next = NULL ; ptr -> buffer_length = 0 ; ptr -> kernel_data = NULL ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3431,"<S2SV_StartBug> if ( ! ISOFS_SB ( inode -> i_sb ) -> s_rock ) <S2SV_EndBug> <S2SV_StartBug> if ( ( strlen ( retname ) + rr -> len - 5 ) >= 254 ) { <S2SV_EndBug> <S2SV_StartBug> strncat ( retname , rr -> u . NM . name , rr -> len - 5 ) ; <S2SV_EndBug> <S2SV_StartBug> retnamlen += rr -> len - 5 ; <S2SV_EndBug> ","<S2SV_ModStart> char * p ; int len ; <S2SV_ModStart> len = <S2SV_ModEnd> <S2SV_ModStart> ; if ( retnamlen + len <S2SV_ModEnd> <S2SV_ModStart> p = memchr ( rr -> u . NM . name , '\\0' , len ) ; if ( unlikely ( p ) ) len = p - rr -> u . NM . name ; memcpy ( retname + retnamlen <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> len ; retname [ retnamlen ] = '\\0' <S2SV_ModEnd> "
3432,<S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( inbuffer = ReadInput ( inname ) ) == 0 ) return ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> return ( - 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3433,"<S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , delim ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false <S2SV_ModStart> , false <S2SV_ModStart> , false <S2SV_ModStart> , false <S2SV_ModStart> , false "
3434,"<S2SV_StartBug> static INLINE void right_shift_8x8 ( __m128i * res , int const bit ) { <S2SV_EndBug> <S2SV_StartBug> if ( bit_m02 >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> res [ 0 ] = _mm_srai_epi16 ( res [ 0 ] , bit ) ; <S2SV_EndBug> ","<S2SV_ModStart> const int bit ) { <S2SV_ModEnd> <S2SV_ModStart> bit == 2 ) { const __m128i const_rounding = _mm_set1_epi16 ( 1 ) ; res [ 0 ] = _mm_add_epi16 ( res [ 0 ] , const_rounding ) ; res [ 1 ] = _mm_add_epi16 ( res [ 1 ] , const_rounding ) ; res [ 2 ] = _mm_add_epi16 ( res [ 2 ] , const_rounding ) ; res [ 3 ] = _mm_add_epi16 ( res [ 3 ] , const_rounding ) ; res [ 4 ] = _mm_add_epi16 ( res [ 4 ] , const_rounding ) ; res [ 5 ] = _mm_add_epi16 ( res [ 5 ] , const_rounding ) ; res [ 6 ] = _mm_add_epi16 ( res [ 6 ] , const_rounding ) ; res [ 7 ] = _mm_add_epi16 ( res [ 7 ] , const_rounding <S2SV_ModEnd> <S2SV_ModStart> if ( bit == 1 ) { res [ 0 ] = _mm_srai_epi16 ( res [ 0 ] , 1 ) ; res [ 1 ] = _mm_srai_epi16 ( res [ 1 ] , 1 ) ; res [ 2 ] = _mm_srai_epi16 ( res [ 2 ] , 1 ) ; res [ 3 ] = _mm_srai_epi16 ( res [ 3 ] , 1 ) ; res [ 4 ] = _mm_srai_epi16 ( res [ 4 ] , 1 ) ; res [ 5 ] = _mm_srai_epi16 ( res [ 5 ] , 1 ) ; res [ 6 ] = _mm_srai_epi16 ( res [ 6 ] , 1 ) ; res [ 7 ] = _mm_srai_epi16 ( res [ 7 ] , 1 ) ; } else { res [ 0 ] = _mm_srai_epi16 ( res [ 0 ] , 2 ) ; res [ 1 ] = _mm_srai_epi16 ( res [ 1 ] , 2 ) ; res [ 2 ] = _mm_srai_epi16 ( res [ 2 ] , 2 ) ; res [ 3 ] = _mm_srai_epi16 ( res [ 3 ] , 2 ) ; res [ 4 ] = _mm_srai_epi16 ( res [ 4 ] , 2 ) ; res [ 5 ] = _mm_srai_epi16 ( res [ 5 ] , 2 ) ; res [ 6 ] = _mm_srai_epi16 ( res [ 6 ] , 2 ) ; res [ 7 ] = _mm_srai_epi16 ( res [ 7 ] , 2 ) ; } <S2SV_ModEnd> "
3435,<S2SV_StartBug> if ( ! ext4_handle_valid ( handle ) ) <S2SV_EndBug> ,<S2SV_ModStart> EXT4_SB ( sb ) -> s_journal <S2SV_ModEnd> 
3436,<S2SV_StartBug> newsk -> sk_mark = inet_rsk ( req ) -> ir_mark ; <S2SV_EndBug> ,<S2SV_ModStart> inet_sk ( newsk ) -> mc_list = NULL ; 
3437,"<S2SV_StartBug> status = nfsd4_encode_bitmap ( xdr , NFSD_SUPPATTR_EXCLCREAT_WORD0 , <S2SV_EndBug> ","<S2SV_ModStart> u32 supp [ 3 ] ; memcpy ( supp , nfsd_suppattrs [ minorversion ] , sizeof ( supp ) ) ; supp [ 0 ] &= NFSD_SUPPATTR_EXCLCREAT_WORD0 ; supp [ 1 ] &= NFSD_SUPPATTR_EXCLCREAT_WORD1 ; supp [ 2 ] &= NFSD_SUPPATTR_EXCLCREAT_WORD2 ; <S2SV_ModStart> supp [ 0 ] , supp [ 1 ] , supp [ 2 ] <S2SV_ModEnd> "
3438,<S2SV_StartBug> if ( wsctx && wsctx -> readbuflen ) <S2SV_EndBug> ,<S2SV_ModStart> readlen <S2SV_ModEnd> 
3439,"<S2SV_StartBug> const struct ipv6_pinfo * np = inet6_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( np -> opt != NULL ) <S2SV_EndBug> <S2SV_StartBug> newnp -> opt = ipv6_dup_options ( newsk , np -> opt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( newnp -> opt != NULL ) <S2SV_EndBug> <S2SV_StartBug> inet_csk ( newsk ) -> icsk_ext_hdr_len = ( newnp -> opt -> opt_nflen + <S2SV_EndBug> <S2SV_StartBug> newnp -> opt -> opt_flen ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; struct ipv6_txoptions * opt <S2SV_ModStart> opt = rcu_dereference <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( opt ) { <S2SV_ModEnd> <S2SV_ModStart> opt ) ; RCU_INIT_POINTER ( newnp -> opt , opt ) ; } <S2SV_ModEnd> <S2SV_ModStart> opt <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3440,<S2SV_StartBug> prev = NULL ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & mm -> mmap_sem ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! mmget_still_valid ( mm ) ) goto skip_mm ; <S2SV_ModStart> skip_mm : 
3441,<S2SV_StartBug> pExpr -> iTable = pX -> iIdxCur ; <S2SV_EndBug> ,"<S2SV_ModStart> assert ( pExpr -> y . pTab != 0 ) ; pExpr -> affExpr = sqlite3TableColumnAffinity ( pExpr -> y . pTab , pExpr -> iColumn ) ; "
3442,<S2SV_StartBug> char * path = server . diskstore_path ; <S2SV_EndBug> ,<S2SV_ModStart> ds_path <S2SV_ModEnd> 
3443,"<S2SV_StartBug> Stream_Read_UINT32 ( s , scopeCount ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( Stream_GetRemainingLength ( s ) / sizeof ( LICENSE_BLOB ) < scopeCount ) return FALSE 
3444,"<S2SV_StartBug> void vp9_idct4x4_add ( const int16_t * input , uint8_t * dest , int stride , int eob ) { <S2SV_EndBug> <S2SV_StartBug> vp9_idct4x4_16_add ( input , dest , stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_idct4x4_1_add ( input , dest , stride ) ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> vpx_idct4x4_16_add <S2SV_ModEnd> <S2SV_ModStart> vpx_idct4x4_1_add <S2SV_ModEnd> 
3445,<S2SV_StartBug> INST_HANDLER ( sts ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( len < 4 ) { return ; } 
3446,"<S2SV_StartBug> unsigned int maxw , maxh , max ; <S2SV_EndBug> <S2SV_StartBug> unsigned int i , j ; <S2SV_EndBug> <S2SV_StartBug> maxw = ( unsigned int ) img -> comps [ 0 ] . w ; maxh = ( unsigned int ) img -> comps [ 0 ] . h ; <S2SV_EndBug> <S2SV_StartBug> d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0U ; i < maxh ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> for ( j = 0U ; j < ( maxw & ~ ( unsigned int ) 1U ) ; j += 2U ) <S2SV_EndBug> <S2SV_StartBug> if ( j < maxw ) { <S2SV_EndBug> <S2SV_StartBug> # if defined ( USE_JPWL ) || defined ( USE_MJ2 ) <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 1 ] . w = maxw ; img -> comps [ 1 ] . h = maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . w = maxw ; img -> comps [ 2 ] . h = maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . w = ( OPJ_UINT32 ) maxw ; img -> comps [ 2 ] . h = ( OPJ_UINT32 ) maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . dy = img -> comps [ 0 ] . dy ; <S2SV_EndBug> <S2SV_StartBug> if ( r ) free ( r ) ; <S2SV_EndBug> <S2SV_StartBug> if ( g ) free ( g ) ; <S2SV_EndBug> <S2SV_StartBug> if ( b ) free ( b ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> , offx , loopmaxw <S2SV_ModStart> size_t i <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> offx = img -> x0 & 1U ; loopmaxw = maxw - offx ; <S2SV_ModStart> size_t j ; if ( offx > 0U ) { sycc_to_rgb ( offset , upb , * y , 0 , 0 , r , g , b ) ; ++ y ; ++ r ; ++ g ; ++ b ; } <S2SV_ModStart> loopmaxw <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> loopmaxw <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> img -> comps [ 2 ] . w = img -> comps [ 0 ] . w ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> h = img -> comps [ 0 ] . h ; img -> comps [ 1 ] . dx = <S2SV_ModEnd> <S2SV_ModStart> dx = img -> comps [ 0 ] . dx ; img -> comps [ 1 ] . dy = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> color_space = OPJ_CLRSPC_SRGB <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3447,"<S2SV_StartBug> int i , j , offset ; <S2SV_EndBug> <S2SV_StartBug> uint32_t loc ; <S2SV_EndBug> <S2SV_StartBug> struct sparablePartitionMap * spm = <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( udf_load_sparable_map ( sb , map , ( <S2SV_ModEnd> <S2SV_ModStart> ) gpm ) < 0 ) goto out_bh <S2SV_ModEnd> "
3448,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( ret != 0 ) <S2SV_EndBug> <S2SV_StartBug> DATA_SYNC ( ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ( TOP_FIELD_ONLY | BOT_FIELD_ONLY ) == ps_dec -> u1_top_bottom_decoded ) { ps_dec -> u1_top_bottom_decoded = 0 ; } if ( ps_dec -> u4_pic_buf_got == 1 ) { if ( 1 == ps_dec -> u1_last_pic_not_decoded ) { ret = ih264d_end_of_pic_dispbuf_mgr ( ps_dec ) ; if ( ret != OK ) return ret ; ret = ih264d_end_of_pic ( ps_dec ) ; if ( ret != OK ) return ret ; } else { ret = ih264d_end_of_pic ( ps_dec ) ; if ( ret != OK ) return ret ; } } 
3449,<S2SV_StartBug> if ( x < sx ) { <S2SV_EndBug> <S2SV_StartBug> j = x * size + b ; <S2SV_EndBug> <S2SV_StartBug> if ( y < sy && x < sx ) { <S2SV_EndBug> <S2SV_StartBug> j = ( ( x * sy + y ) * size ) + b ; <S2SV_EndBug> <S2SV_StartBug> if ( z < sz && y < sy && x < sx ) { <S2SV_EndBug> <S2SV_StartBug> ( ( char * ) data -> data ) [ j ] = output [ i ] ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( j >= 0 && j < elements * size ) { <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( j >= 0 && j < elements * size ) { <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( j >= 0 && j < elements * size ) { 
3450,<S2SV_StartBug> ExprList_Init ( & state -> expr_list ) ; <S2SV_EndBug> ,<S2SV_ModStart> state -> fmode = 0 ; 
3451,<S2SV_StartBug> return ret ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! ret ) invalidate_lstat_cache ( ) ; 
3452,<S2SV_StartBug> if ( ! awaiting_character ) { <S2SV_EndBug> ,<S2SV_ModStart> || ! recovery_started 
3453,"<S2SV_StartBug> int sent = send ( sock -> our_fd , buf , len , MSG_DONTWAIT ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3454,<S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( a ) ; 
3455,"<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_lineno ) ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_type ) ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ExceptHandler"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""lineno\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>excepthandler"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_col_offset , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""col_offset\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>excepthandler"" ) ; return 1 ; } else { int res <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> lookup_attr_id <S2SV_ModEnd> <S2SV_ModStart> , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; type = NULL ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_name , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL || tmp == Py_None ) { Py_CLEAR ( tmp ) ; name = NULL ; } else { int res <S2SV_ModEnd> <S2SV_ModStart> if ( lookup_attr_id ( obj , & PyId_body , & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError , ""required<S2SV_blank>field<S2SV_blank>\\""body\\""<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ExceptHandler"" ) ; return 1 ; } else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> val <S2SV_ModEnd> <S2SV_ModStart> * out = ExceptHandler ( type , name , body , lineno , col_offset , arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } PyErr_Format <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3456,"<S2SV_StartBug> u8 reset ; <S2SV_EndBug> <S2SV_StartBug> hx = kmalloc ( sizeof ( * hx ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ret = usb_cypress_writemem ( udev , cypress [ type ] . cpu_cs_register , & reset , 1 ) ) != 1 ) <S2SV_EndBug> <S2SV_StartBug> kfree ( hx ) ; <S2SV_EndBug> <S2SV_StartBug> reset = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ret || usb_cypress_writemem ( udev , cypress [ type ] . cpu_cs_register , & reset , 1 ) != 1 ) { <S2SV_EndBug> <S2SV_StartBug> kfree ( hx ) ; <S2SV_EndBug> ","<S2SV_ModStart> * buf <S2SV_ModEnd> <S2SV_ModStart> u16 cpu_cs_register = <S2SV_ModEnd> <S2SV_ModStart> ; buf = kmalloc ( sizeof ( * hx ) , GFP_KERNEL ) ; if ( ! buf ) return - ENOMEM ; hx = ( struct hexline * ) buf ; buf [ 0 ] = 1 ; if ( usb_cypress_writemem ( udev , cpu_cs_register , buf , 1 <S2SV_ModEnd> <S2SV_ModStart> buf <S2SV_ModEnd> <S2SV_ModStart> buf [ 0 ] = 0 ; if ( <S2SV_ModEnd> <S2SV_ModStart> cpu_cs_register , buf <S2SV_ModEnd> <S2SV_ModStart> buf <S2SV_ModEnd> "
3457,"<S2SV_StartBug> void set_header ( HttpResponse res , const char * name , const char * value ) { <S2SV_EndBug> <S2SV_StartBug> h -> value = Str_dup ( value ) ; <S2SV_EndBug> ","<S2SV_ModStart> , ... <S2SV_ModStart> va_list ap ; va_start ( ap , value ) ; <S2SV_ModStart> Str_vcat ( value , ap ) ; va_end ( ap <S2SV_ModEnd> "
3458,"<S2SV_StartBug> char * mask2 , * mask_decoded , * mask_decoded2 , * mask_decoded3 , * mask_decoded4 ; <S2SV_EndBug> <S2SV_StartBug> mask_decoded = NULL ; <S2SV_EndBug> <S2SV_StartBug> mask2 = weechat_string_replace ( mask , dir_separator , ""\\01"" ) ; <S2SV_EndBug> <S2SV_StartBug> mask_decoded5 = malloc ( length ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! mask_decoded5 ) <S2SV_EndBug> <S2SV_StartBug> mask_decoded5 [ 0 ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> strftime ( mask_decoded5 , length - 1 , mask_decoded4 , date_tmp ) ; <S2SV_EndBug> <S2SV_StartBug> weechat_string_tolower ( mask_decoded5 ) ; <S2SV_EndBug> <S2SV_StartBug> mask , mask_decoded5 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mask_decoded ) <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded ) ; <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded2 ) ; <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded3 ) ; <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded4 ) ; <S2SV_EndBug> <S2SV_StartBug> return mask_decoded5 ; <S2SV_EndBug> ","<S2SV_ModStart> mask3 , * mask4 , * mask5 , * mask6 , * mask7 <S2SV_ModEnd> <S2SV_ModStart> mask3 = NULL ; mask4 = NULL ; mask5 = NULL ; mask6 = NULL ; mask7 <S2SV_ModEnd> <S2SV_ModStart> length = strlen ( mask <S2SV_ModEnd> <S2SV_ModStart> mask2 <S2SV_ModEnd> <S2SV_ModStart> mask2 <S2SV_ModEnd> <S2SV_ModStart> mask2 <S2SV_ModEnd> <S2SV_ModStart> if ( strftime ( mask2 <S2SV_ModEnd> <S2SV_ModStart> mask <S2SV_ModEnd> <S2SV_ModStart> == 0 ) mask2 [ 0 ] = '\\0' ; mask3 = weechat_string_replace ( mask2 , dir_separator , ""\\01"" ) ; if ( ! mask3 ) goto end ; mask4 = weechat_buffer_string_replace_local_var ( buffer , mask3 ) ; if ( ! mask4 ) goto end ; mask5 = weechat_string_replace ( mask4 , dir_separator , weechat_config_string ( logger_config_file_replacement_char ) ) ; if ( ! mask5 ) goto end ; # ifdef __CYGWIN__ mask6 = weechat_string_replace ( mask5 , ""\\\\"" , weechat_config_string ( logger_config_file_replacement_char ) ) ; # else mask6 = strdup ( mask5 ) ; # endif if ( ! mask6 ) goto end ; mask7 = weechat_string_replace ( mask6 , ""\\01"" , dir_separator ) ; if ( ! mask7 ) goto end <S2SV_ModStart> mask7 <S2SV_ModEnd> <S2SV_ModStart> mask7 <S2SV_ModEnd> <S2SV_ModStart> mask3 <S2SV_ModEnd> <S2SV_ModStart> mask3 ) ; if ( mask4 <S2SV_ModEnd> <S2SV_ModStart> mask4 ) ; if ( mask5 <S2SV_ModEnd> <S2SV_ModStart> mask5 ) ; if ( mask6 <S2SV_ModEnd> <S2SV_ModStart> mask6 <S2SV_ModEnd> <S2SV_ModStart> mask7 <S2SV_ModEnd> "
3459,<S2SV_StartBug> xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) && <S2SV_EndBug> ,<S2SV_ModStart> if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize ) { <S2SV_ModStart> } else { xWantedSize = 0 ; } <S2SV_ModStart> ( xWantedSize > 0 ) && 
3460,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , rel ) ; <S2SV_EndBug> ",<S2SV_ModStart> int rc ; <S2SV_ModStart> rc = <S2SV_ModStart> ; if ( rc != X86EMUL_CONTINUE ) return rc 
3461,"<S2SV_StartBug> if ( ( transfer_encoding != NULL ) && ( strstr ( transfer_encoding , ""chunked"" ) != NULL ) ) { <S2SV_EndBug> ",<S2SV_ModStart> m_strcasestr <S2SV_ModEnd> 
3462,<S2SV_StartBug> struct desc_struct * desc ; <S2SV_EndBug> <S2SV_StartBug> desc = get_desc ( sel ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! desc ) <S2SV_EndBug> <S2SV_StartBug> return get_desc_base ( desc ) ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> get_desc ( & desc , sel ) <S2SV_ModEnd> <S2SV_ModStart> & "
3463,<S2SV_StartBug> if ( read != entry . uncompressed_filesize ) { <S2SV_EndBug> ,<S2SV_ModStart> || read <= 8 
3464,"<S2SV_StartBug> spin_unlock ( & ctx -> event_wqh . lock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ret ) { <S2SV_EndBug> <S2SV_StartBug> uwq = list_first_entry ( & fork_event , <S2SV_EndBug> <S2SV_StartBug> userfaultfd_event_complete ( ctx , uwq ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & ctx -> event_wqh . lock ) ; <S2SV_EndBug> ",<S2SV_ModStart> userfaultfd_ctx_get ( fork_nctx ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> userfaultfd_ctx_put ( fork_nctx ) ; <S2SV_ModStart> if ( likely ( ! ret ) ) <S2SV_ModStart> else { if ( ret ) userfaultfd_ctx_put ( fork_nctx ) ; } spin_unlock ( & ctx -> event_wqh . lock ) ; <S2SV_ModEnd> 
3465,"<S2SV_StartBug> vp9_subtract_block ( bh , bw , p -> src_diff , bw , p -> src . buf , p -> src . stride , <S2SV_EndBug> ","<S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( x -> e_mbd . cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_highbd_subtract_block ( bh , bw , p -> src_diff , bw , p -> src . buf , p -> src . stride , pd -> dst . buf , pd -> dst . stride , x -> e_mbd . bd ) ; return ; } # endif vpx_subtract_block <S2SV_ModEnd> "
3466,<S2SV_StartBug> static unsigned short len = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> size_t <S2SV_ModEnd> 
3467,"<S2SV_StartBug> return g_NPN_GetValue_real ( instance , variable , value ) ; <S2SV_EndBug> ",<S2SV_ModStart> case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling : 
3468,"<S2SV_StartBug> ( IN_DEV_SHARED_MEDIA ( out_dev ) || <S2SV_EndBug> <S2SV_StartBug> inet_addr_onlink ( out_dev , saddr , FIB_RES_GW ( * res ) ) ) ) { <S2SV_EndBug> ",<S2SV_ModStart> skb -> protocol == htons ( ETH_P_IP ) && <S2SV_ModStart> IPCB ( skb ) -> flags |= IPSKB_DOREDIRECT ; <S2SV_ModEnd> 
3469,"<S2SV_StartBug> vpx_memcpy ( & t_above , x -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left , x -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
3470,"<S2SV_StartBug> cifs_find_smb_ses ( struct TCP_Server_Info * server , char * username ) <S2SV_EndBug> <S2SV_StartBug> list_for_each ( tmp , & server -> smb_ses_list ) { <S2SV_EndBug> <S2SV_StartBug> if ( strncmp ( ses -> userName , username , MAX_USERNAME_SIZE ) ) <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> ","<S2SV_ModStart> struct smb_vol * vol ) { <S2SV_ModEnd> <S2SV_ModStart> list_for_each_entry ( ses <S2SV_ModEnd> <S2SV_ModStart> , smb_ses_list ) { switch ( server -> secType ) { case Kerberos : if ( vol -> linux_uid != ses -> linux_uid ) continue ; break ; default : <S2SV_ModEnd> <S2SV_ModStart> vol -> <S2SV_ModStart> if ( strlen ( vol -> username ) != 0 && strncmp ( ses -> password , vol -> password , MAX_PASSWORD_SIZE ) ) continue ; } "
3471,"<S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> ",<S2SV_ModStart> rc = <S2SV_ModStart> rc = <S2SV_ModStart> rc = 
3472,<S2SV_StartBug> for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 1 ) ; x += 4 ) <S2SV_EndBug> <S2SV_StartBug> p ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ( image -> columns % 4 ) >= 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( image -> columns % 4 ) >= 2 ) <S2SV_EndBug> ,<S2SV_ModStart> 3 <S2SV_ModEnd> <S2SV_ModStart> q ++ ; p <S2SV_ModEnd> <S2SV_ModStart> > <S2SV_ModEnd> <S2SV_ModStart> > <S2SV_ModEnd> 
3473,"<S2SV_StartBug> skb = sock_alloc_send_skb ( sk , <S2SV_EndBug> <S2SV_StartBug> skb -> csum = 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> struct frag_hdr fhdr ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } return skb_append_datato_frags ( sk , skb , getfrag , from , ( length - transhdrlen ) ) <S2SV_ModEnd> "
3474,"<S2SV_StartBug> PIXA * pixa ; <S2SV_EndBug> <S2SV_StartBug> pix1 = pixaDisplayTiledAndScaled ( pixa , 32 , 400 , 4 , 0 , 20 , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> pixDisplayWithTitle ( pix1 , 100 , 0 , NULL , rp -> display ) ; <S2SV_EndBug> <S2SV_StartBug> pixDestroy ( & pix1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , * pixa2 <S2SV_ModStart> pixa2 = pixaCreate ( 3 ) ; pix1 = pixRead ( ""weasel8.png"" ) ; pixGammaTRC ( pix1 , pix1 , 1.0 , 0 , 270 ) ; pixaAddPix ( pixa2 , pix1 , L_COPY ) ; pixGetDimensions ( pix1 , & w , & h , NULL ) ; pixRasterop ( pix1 , 0 , 0 , 5 , h , PIX_SET , NULL , 0 , 0 ) ; pixRasterop ( pix1 <S2SV_ModEnd> <S2SV_ModStart> 0 , 2 , h , PIX_SET , NULL , 0 , 0 ) ; pixRasterop ( pix1 , 40 , 0 , 3 , h , PIX_SET , NULL , 0 , 0 ) ; pixRasterop ( pix1 , 0 , 0 , w , 3 , PIX_SET , NULL , 0 , 0 ) ; pixRasterop ( pix1 , 0 , 15 , w , 3 , PIX_SET , NULL , 0 , 0 ) ; pixRasterop ( pix1 , 0 , 35 , w , 2 , PIX_SET , NULL , 0 , 0 ) ; pixaAddPix ( pixa2 , pix1 , L_COPY ) ; pixFillMapHoles ( pix1 , w , h , L_FILL_WHITE ) ; pixaAddPix ( pixa2 , pix1 , L_INSERT ) ; pix2 = pixaDisplayTiledInColumns ( pixa2 , 3 , 1.0 , 20 , 1 ) ; regTestWritePixAndCheck ( rp , pix2 , IFF_PNG <S2SV_ModEnd> <S2SV_ModStart> pix2 , 50 , 850 <S2SV_ModEnd> <S2SV_ModStart> pixaDestroy ( & pixa2 ) ; pixDestroy ( & pix2 ) ; pix1 = pixaDisplayTiledAndScaled ( pixa , 32 , 400 , 4 , 0 , 20 , 2 ) ; pixWrite ( ""/tmp/lept/adapt/results.jpg"" , pix1 , IFF_JFIF_JPEG ) ; pixDisplayWithTitle ( pix1 , 50 , 0 , NULL , rp -> display ) ; "
3475,"<S2SV_StartBug> strncpy ( str , ""?["" , len ) ; <S2SV_EndBug> ","<S2SV_ModStart> espruino_snprintf ( str , len , ""?[%d]"" , token <S2SV_ModEnd> "
3476,"<S2SV_StartBug> static void count_segs ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * const cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> xd -> mi = mi_8x8 ; <S2SV_EndBug> <S2SV_StartBug> const BLOCK_SIZE bsize = mi_8x8 [ 0 ] -> mbmi . sb_type ; <S2SV_EndBug> <S2SV_StartBug> const int pred_segment_id = vp9_get_segment_id ( cm , cm -> last_frame_seg_map , <S2SV_EndBug> ","<S2SV_ModStart> const VP9_COMMON * cm , MACROBLOCKD * xd , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> xd -> mi <S2SV_ModEnd> <S2SV_ModStart> get_segment_id <S2SV_ModEnd> "
3477,<S2SV_StartBug> if ( dst == NULL || src == NULL ) return ERROR ; <S2SV_EndBug> ,<S2SV_ModStart> ) return ERROR ; if ( src -> entry_count + dst -> entry_count < src -> entry_count ) return ERROR ; if ( src -> data_count + dst -> data_count < src -> data_count 
3478,"
","
"
3479,"<S2SV_StartBug> cmpt -> stream_ = ( inmem ) ? jas_stream_memopen ( 0 , size ) : <S2SV_EndBug> ",<S2SV_ModStart> jas_stream_memopen2 <S2SV_ModEnd> 
3480,<S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> ,<S2SV_ModStart> dev_kfree_skb ( skb ) ; 
3481,<S2SV_StartBug> malloc_called += 1 ; <S2SV_EndBug> ,<S2SV_ModStart> = <S2SV_ModEnd> 
3482,"<S2SV_StartBug> StringBuffer_append ( res -> outputbuffer , ""%s"" , buf ) ; <S2SV_EndBug> ",<S2SV_ModStart> escapeHTML ( res -> outputbuffer <S2SV_ModEnd> 
3483,<S2SV_StartBug> if ( * rsize >= 60 && rdesc [ 39 ] == 0x2a && rdesc [ 40 ] == 0xf5 && <S2SV_EndBug> ,<S2SV_ModStart> 62 <S2SV_ModEnd> 
3484,<S2SV_StartBug> if ( index > MAX_SUPPORTED_TV_TIMING ) <S2SV_EndBug> <S2SV_StartBug> if ( index > MAX_SUPPORTED_TV_TIMING_V1_2 ) <S2SV_EndBug> ,<S2SV_ModStart> >= <S2SV_ModEnd> <S2SV_ModStart> >= <S2SV_ModEnd> 
3485,<S2SV_StartBug> NEED_IP ( 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( t + 3 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 1 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 1 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( likely ( HAVE_OP ( t + 15 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( HAVE_IP ( 6 ) ) { <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug> <S2SV_StartBug> if ( likely ( HAVE_IP ( 6 ) && HAVE_OP ( 4 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( t + 3 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , 0 <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , 0 <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , 0 <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> , 0 "
3486,<S2SV_StartBug> boolean_t owner = B_FALSE ; <S2SV_EndBug> <S2SV_StartBug> mutex_enter ( & zdp -> z_acl_lock ) ; <S2SV_EndBug> ,<S2SV_ModStart> is_attr <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3487,"<S2SV_StartBug> if ( ( o2 + 10 < o2 ) || ( o2 + 10 < 10 ) || ( o2 + 10 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( o2 + 4 < o2 ) || ( o2 + 4 < 4 ) || ( o2 + 4 > buf_size ) ) return ; <S2SV_EndBug> <S2SV_StartBug> if ( ( o2 + 12 < o2 ) || ( o2 + 12 < 12 ) || ( o2 + 12 > buf_size ) ) return ; <S2SV_EndBug> <S2SV_StartBug> if ( ( o2 + 2 < o2 ) || ( o2 + 2 < 2 ) || ( o2 + 2 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( o + 12 < o ) || ( o + 12 < 12 ) || ( o + 12 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> ""ExifMnoteOlympus"" , ""Short<S2SV_blank>MakerNote"" ) ; <S2SV_EndBug> <S2SV_StartBug> n -> entries [ tcount ] . format = exif_get_short ( buf + o + 2 , n -> order ) ; <S2SV_EndBug> <S2SV_StartBug> n -> entries [ tcount ] . components = exif_get_long ( buf + o + 4 , n -> order ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dataofs + s > buf_size && n -> version == sanyoV1 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( dataofs + s < dataofs ) || ( dataofs + s < s ) || <S2SV_EndBug> ","<S2SV_ModStart> CHECKOVERFLOW ( o2 , buf_size , 10 <S2SV_ModEnd> <S2SV_ModStart> CHECKOVERFLOW ( o2 , buf_size , 4 <S2SV_ModEnd> <S2SV_ModStart> CHECKOVERFLOW ( o2 , buf_size , 12 <S2SV_ModEnd> <S2SV_ModStart> CHECKOVERFLOW ( o2 , buf_size , 2 <S2SV_ModEnd> <S2SV_ModStart> CHECKOVERFLOW ( o , buf_size , 12 ) ) { exif_log ( en -> log , EXIF_LOG_CODE_CORRUPT_DATA , ""ExifMnoteOlympus"" , ""Short<S2SV_blank>MakerNote"" ) ; break ; } n -> entries [ tcount ] . tag = exif_get_short ( buf + o , n -> order ) + base ; n -> entries [ tcount ] . format = exif_get_short ( buf + o + 2 , n -> order ) ; n -> entries [ tcount ] . components = exif_get_long ( buf + o + 4 , n -> order ) ; n -> entries [ tcount ] . order = n -> order ; exif_log ( en -> log , EXIF_LOG_CODE_DEBUG , ""ExifMnoteOlympus"" , ""Loading<S2SV_blank>entry<S2SV_blank>0x%x<S2SV_blank>(\'%s\')..."" , n -> entries [ tcount ] . tag , mnote_olympus_tag_get_name ( n -> entries [ tcount ] . tag ) ) ; if ( exif_format_get_size ( n -> entries [ tcount ] . format ) && buf_size / exif_format_get_size ( n -> entries [ tcount ] . format ) < n -> entries [ tcount ] . components <S2SV_ModEnd> <S2SV_ModStart> ""Tag<S2SV_blank>size<S2SV_blank>overflow<S2SV_blank>detected<S2SV_blank>(%u<S2SV_blank>*<S2SV_blank>%lu)"" , exif_format_get_size ( <S2SV_ModEnd> <S2SV_ModStart> ) , <S2SV_ModEnd> <S2SV_ModStart> ) ; continue ; } <S2SV_ModEnd> <S2SV_ModStart> > ( buf_size - s ) <S2SV_ModEnd> <S2SV_ModStart> CHECKOVERFLOW ( dataofs , buf_size , s ) ) { exif_log ( en -> log , EXIF_LOG_CODE_DEBUG , ""ExifMnoteOlympus"" , ""Tag<S2SV_blank>data<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer<S2SV_blank>(%u<S2SV_blank>><S2SV_blank>%u)"" , ( unsigned ) ( dataofs + s ) , buf_size ) ; continue ; } n -> entries [ tcount ] . data = exif_mem_alloc ( en -> mem , s ) ; if ( ! n -> entries [ tcount ] . data ) { EXIF_LOG_NO_MEMORY ( en -> log , ""ExifMnoteOlympus"" , s ) ; continue ; } memcpy ( n -> entries [ tcount ] . data , buf + dataofs , s <S2SV_ModEnd> "
3488,"<S2SV_StartBug> struct pt_regs * regs , int nmi ) <S2SV_EndBug> <S2SV_StartBug> if ( perf_event_overflow ( event , nmi , & data , regs ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3489,<S2SV_StartBug> if ( stringset == ETH_SS_STATS ) <S2SV_EndBug> ,<S2SV_ModStart> || stringset == ETH_SS_PRIV_FLAGS 
3490,<S2SV_StartBug> jumpstack [ stackidx ++ ] = e ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( stackidx >= private -> stacksize ) ) { verdict = NF_DROP ; break ; } 
3491,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> else if ( ( too_many_pipe_buffers_hard ( pipe -> user ) || too_many_pipe_buffers_soft ( pipe -> user ) ) && ! capable ( CAP_SYS_RESOURCE ) && ! capable ( CAP_SYS_ADMIN ) ) { ret = - EPERM ; goto out ; } 
3492,"<S2SV_StartBug> char sbuf [ 128 ] ; <S2SV_EndBug> <S2SV_StartBug> err = __video_do_ioctl ( file , cmd , parg ) ; <S2SV_EndBug> ","<S2SV_ModStart> return video_usercopy <S2SV_ModEnd> <S2SV_ModStart> arg , __video_do_ioctl ) <S2SV_ModEnd> "
3493,"<S2SV_StartBug> 0xD5 , 0x75 , 0xF1 , 0x23 , 0xC1 , 0x81 , 0x4B , 0x44 , 0x23 , 0xBE , <S2SV_EndBug> <S2SV_StartBug> 0xC5 , 0x5F , 0x86 , 0x42 , 0x7F , 0x38 , 0xA3 , 0x95 , 0xEE , 0xA0 , <S2SV_EndBug> ","<S2SV_ModStart> 0xCF , 0x9F , 0x3A , 0x9C , 0xC5 , 0xA5 , 0x89 , 0x27 , 0x6D , 0x2C , 0x2C , 0xF3 , 0xA6 , 0x00 , 0xD2 , 0x7C , 0xEA , 0xFA , 0xF2 , 0x43 , 0x4F , 0x49 , 0x0A , 0xFC , 0xA6 , 0xE7 , 0x75 , 0xCA , 0x07 , 0xDC , 0xA5 , 0xF2 , 0x83 , 0x4E , 0x5A , 0xA0 , 0xA0 , 0xF5 , 0x9C , 0xFD , 0x02 , 0xE6 , 0x9E , 0xFC , 0x01 , 0x59 , 0xD7 , 0xB6 , 0xC1 , 0x4E , 0xC0 , 0xB6 , 0x71 , 0x49 , 0xF0 , 0xC7 , 0xD5 , 0x2F , 0x8D , 0xDF , 0xD3 , 0xF1 , 0x82 , 0x82 , 0x23 , 0x33 , 0x13 , 0x93 , 0xEB , 0x50 , 0x29 , 0xFD , 0x1B , 0x5A , 0x2F , 0xD5 , 0x08 , 0x99 , 0x64 , 0xE9 , 0x7B , 0x1A , 0xDD , 0x68 , 0x16 , 0x08 , 0xD0 , 0x13 , 0x82 , 0xB6 , 0x86 , 0x62 , 0x76 , 0xAA , 0x16 , 0x14 , 0xCC , 0x86 , 0x72 , 0x26 , 0x45 , 0x8E , 0x2A , 0x82 , 0x5B , 0x6F , 0xC1 , 0xDF , 0xAA , 0x18 , 0x43 , 0xB8 , 0xAD , 0x84 , 0x52 , 0xF2 , 0xD9 , 0x9C , 0xC0 , 0x47 , 0x52 , 0x1B , 0x8E , 0x42 , 0xC4 , 0xD3 , 0x61 , 0x7B , 0x65 , 0xA7 , 0x69 , 0x03 , 0xB5 , 0xD4 , 0x6C , 0x83 , 0x6A , 0x46 , 0x73 , 0xAF , 0x76 , 0x77 , 0x70 , 0xC2 , 0xD0 , 0x74 , 0xFE , 0x78 , 0xF5 , 0x75 , 0x3B , 0xCE , 0xE2 , 0xB6 , 0xA0 , 0x25 , 0xE9 , 0xE8 , 0x4B , 0xA2 , 0xF1 , 0x20 , 0x88 , 0x13 , 0x07 , 0xED , 0x66 , 0xBC , 0x46 , 0xA1 , 0xB3 , 0x44 , 0xAF , 0x2C , 0xED , 0x73 , 0x75 , 0x3D , 0x14 , 0x6E , 0x43 , 0x92 , 0x40 , 0x99 , 0xB0 , 0xD1 , 0xBF , 0x2C , 0x4D , 0x0F , 0x2A , 0x63 , 0xF4 , 0x85 , 0x7B , 0x1B , 0x0E , 0x48 , 0x5A , 0x06 , 0x02 , 0xA6 , 0x3D , 0x9E , 0x78 , 0x05 , 0xA8 , 0x7C , 0xAD , 0x54 , 0x49 , 0xDE , 0x7A , 0xE6 , 0x36 , 0x5C , 0x50 , 0xFC , 0x09 <S2SV_ModEnd> <S2SV_ModStart> 0x9E , 0x83 , 0x53 , 0x8C <S2SV_ModEnd> <S2SV_ModStart> 0xEF , 0x12 , 0x36 , 0x4F , 0x22 , 0x16 , 0x2A , 0x15 , 0x88 , 0x83 , 0xA9 , 0x00 , 0x66 , 0x9E , 0xD1 , 0xDC , 0x0F , 0x54 , 0xC0 , 0x32 , 0x5C , 0x4C , 0x5E , 0xE2 , 0x3D , 0xBC , 0x56 , 0x89 , 0x75 , 0x28 , 0xA3 <S2SV_ModEnd> "
3494,"<S2SV_StartBug> static char * print_string_ptr ( const char * str ) <S2SV_EndBug> <S2SV_StartBug> char * ptr2 , * out ; <S2SV_EndBug> <S2SV_StartBug> int len = 0 ; <S2SV_EndBug> <S2SV_StartBug> return cJSON_strdup ( """" ) ; <S2SV_EndBug> <S2SV_StartBug> ++ len ; <S2SV_EndBug> <S2SV_StartBug> ++ ptr ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( out = ( char * ) cJSON_malloc ( len + 3 ) ) ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ","<S2SV_ModStart> , printbuffer * p <S2SV_ModStart> char * ptr2 , * out ; <S2SV_ModEnd> <S2SV_ModStart> , flag = 0 ; <S2SV_ModEnd> <S2SV_ModStart> { if ( p ) out = ensure ( p , 3 ) ; else out = ( char * ) cJSON_malloc ( 3 ) ; if ( ! out ) return 0 ; strcpy ( out , ""\\""\\"""" ) ; return out ; } for ( ptr = str ; * ptr ; ptr ++ ) flag |= ( ( * ptr > 0 && * ptr < 32 ) || ( * ptr == \'\\""\' ) || ( * ptr == '\\\\' ) ) ? 1 : 0 ; if ( ! flag ) { len = ptr - str ; if ( p ) out = ensure ( p , len + 3 ) ; else out = ( char * ) cJSON_malloc ( len + 3 ) ; if ( ! out ) return 0 ; ptr2 = out ; * ptr2 ++ = \'\\""\' ; strcpy ( ptr2 , str ) ; ptr2 [ len ] = \'\\""\' ; ptr2 [ len + 1 ] = 0 ; return out ; } ptr = str ; <S2SV_ModEnd> <S2SV_ModStart> len ++ ; <S2SV_ModEnd> <S2SV_ModStart> ptr ++ ; } if ( p ) out = ensure ( p , <S2SV_ModEnd> <S2SV_ModStart> ; else out = ( char * ) cJSON_malloc ( len + 3 ) ; if ( ! out ) <S2SV_ModEnd> <S2SV_ModStart> break ; } } } * ptr2 ++ = \'\\""\' ; <S2SV_ModEnd> "
3495,"<S2SV_StartBug> while ( impeg2d_bit_stream_nxt ( ps_stream , MB_STUFFING_CODE_LEN ) == MB_STUFFING_CODE ) <S2SV_EndBug> ",<S2SV_ModStart> && ps_stream -> u4_offset < ps_stream -> u4_max_offset 
3496,"<S2SV_StartBug> alloc_limit_assert ( ""checked_xcalloc"" , ( num * size ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t res ; if ( check_mul_overflow ( num , size , & res ) ) abort ( ) ; <S2SV_ModStart> res <S2SV_ModEnd> "
3497,"<S2SV_StartBug> char * out = mutt_mem_malloc ( 3 * len / 4 + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> int dlen = mutt_b64_decode ( out , it ) ; <S2SV_EndBug> ","<S2SV_ModStart> const int olen = <S2SV_ModEnd> <S2SV_ModStart> ; char * out = mutt_mem_malloc ( olen <S2SV_ModStart> , olen "
3498,<S2SV_StartBug> if ( ! sock || ( count && ! buf ) ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ,<S2SV_ModStart> || count > OE_SSIZE_MAX <S2SV_ModStart> if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } 
3499,"<S2SV_StartBug> imap_quote_string ( errstr , sizeof ( errstr ) , list . name ) ; <S2SV_EndBug> ","<S2SV_ModStart> , true "
3500,<S2SV_StartBug> mmu_notifier_mm_init ( mm ) ; <S2SV_EndBug> ,"<S2SV_ModStart> RCU_INIT_POINTER ( mm -> exe_file , NULL ) ; "
3501,"<S2SV_StartBug> const int qzbin_factor = q == 0 ? 64 : ( vp9_dc_quant ( q , 0 ) < 148 ? 84 : 80 ) ; <S2SV_EndBug> <S2SV_StartBug> quant = i == 0 ? vp9_dc_quant ( q , cm -> y_dc_delta_q ) <S2SV_EndBug> <S2SV_StartBug> : vp9_ac_quant ( q , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> quants -> y_zbin [ q ] [ i ] = ROUND_POWER_OF_TWO ( qzbin_factor * quant , 7 ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> y_dequant [ q ] [ i ] = quant ; <S2SV_EndBug> <S2SV_StartBug> quant = i == 0 ? vp9_dc_quant ( q , cm -> uv_dc_delta_q ) <S2SV_EndBug> <S2SV_StartBug> : vp9_ac_quant ( q , cm -> uv_ac_delta_q ) ; <S2SV_EndBug> <S2SV_StartBug> quants -> uv_zbin [ q ] [ i ] = ROUND_POWER_OF_TWO ( qzbin_factor * quant , 7 ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> uv_dequant [ q ] [ i ] = quant ; <S2SV_EndBug> <S2SV_StartBug> quants -> a_round [ q ] [ i ] = ( qrounding_factor * quant ) >> 7 ; <S2SV_EndBug> <S2SV_StartBug> cm -> a_dequant [ q ] [ i ] = quant ; <S2SV_EndBug> <S2SV_StartBug> quants -> y_quant_shift [ q ] [ i ] = quants -> y_quant_shift [ q ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> cm -> y_dequant [ q ] [ i ] = cm -> y_dequant [ q ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> quants -> uv_quant_shift [ q ] [ i ] = quants -> uv_quant_shift [ q ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> cm -> uv_dequant [ q ] [ i ] = cm -> uv_dequant [ q ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_ALPHA <S2SV_EndBug> ","<S2SV_ModStart> get_qzbin_factor ( q , cm -> bit_depth <S2SV_ModEnd> <S2SV_ModStart> int qrounding_factor_fp = i == 0 ? 48 : 42 ; if ( q == 0 ) qrounding_factor_fp = 64 ; <S2SV_ModStart> , cm -> bit_depth <S2SV_ModStart> , cm -> bit_depth <S2SV_ModStart> y_quant_fp [ q ] [ i ] = ( 1 << 16 ) / quant ; quants -> y_round_fp [ q ] [ i ] = ( qrounding_factor_fp <S2SV_ModEnd> <S2SV_ModStart> quants -> y_zbin [ q ] [ i ] = ROUND_POWER_OF_TWO ( qzbin_factor * quant , 7 ) ; quants -> y_round [ q ] [ i ] = ( qrounding_factor * quant ) >> 7 ; cpi <S2SV_ModEnd> <S2SV_ModStart> , cm -> bit_depth <S2SV_ModStart> , cm -> bit_depth <S2SV_ModStart> uv_quant_fp [ q ] [ i ] = ( 1 << 16 ) / quant ; quants -> uv_round_fp [ q ] [ i ] = ( qrounding_factor_fp <S2SV_ModEnd> <S2SV_ModStart> quants -> uv_zbin <S2SV_ModEnd> <S2SV_ModStart> uv_round <S2SV_ModEnd> <S2SV_ModStart> cpi -> uv_dequant [ q ] [ i ] = quant ; <S2SV_ModEnd> <S2SV_ModStart> y_quant_fp [ q ] [ i ] = quants -> y_quant_fp [ q ] [ 1 ] ; quants -> y_round_fp [ q ] [ i ] = quants -> y_round_fp [ q ] [ 1 ] ; quants -> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> uv_quant_fp [ q ] [ i ] = quants -> uv_quant_fp [ q ] [ 1 ] ; quants -> uv_round_fp [ q ] [ i ] = quants -> uv_round_fp [ q ] [ 1 ] ; quants -> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3502,<S2SV_StartBug> static inline int <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3503,<S2SV_StartBug> char buffer [ 4096 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( name_len > sizeof ( buffer ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( value ) <= sizeof ( buffer2 ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> ,"<S2SV_ModStart> * buf , * buf2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> efree ( buf ) ; <S2SV_ModEnd> <S2SV_ModStart> buf2 = estrndup ( value , value_len ) ; <S2SV_ModEnd> <S2SV_ModStart> efree ( buf ) ; efree ( buf2 ) ; <S2SV_ModEnd> "
3504,"<S2SV_StartBug> msg -> fp = mutt_bcache_get ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug> <S2SV_StartBug> msg -> fp = mutt_bcache_put ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug> <S2SV_StartBug> mutt_bcache_commit ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug> ",<S2SV_ModStart> cache_id ( <S2SV_ModStart> ) <S2SV_ModStart> cache_id ( <S2SV_ModStart> ) <S2SV_ModStart> cache_id ( <S2SV_ModStart> ) 
3505,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>len=%d<S2SV_blank>method=%s"" , len - 4 , <S2SV_EndBug> <S2SV_StartBug> if ( 1 < ndo -> ndo_vflag && 4 < len ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( ndo -> ndo_vflag && 4 < len ) { <S2SV_EndBug> <S2SV_StartBug> return ( const u_char * ) ext + len ; <S2SV_EndBug> ","<S2SV_ModStart> ""<S2SV_blank>len=%u<S2SV_blank>method=%s"" <S2SV_ModEnd> <S2SV_ModStart> len > 4 ) { if ( <S2SV_ModEnd> <S2SV_ModStart> > 1 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } "
3506,"<S2SV_StartBug> if ( ( doff + s < doff ) || ( doff + s < s ) || ( doff + s > size ) ) { <S2SV_EndBug> <S2SV_StartBug> ""Tag<S2SV_blank>data<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer<S2SV_blank>(%u<S2SV_blank>><S2SV_blank>%u)"" , doff + s , size ) ; <S2SV_EndBug> ","<S2SV_ModStart> doff >= size ) { exif_log ( data -> priv -> log , EXIF_LOG_CODE_DEBUG , ""ExifData"" , ""Tag<S2SV_blank>starts<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer<S2SV_blank>(%u<S2SV_blank>><S2SV_blank>%u)"" , doff , size ) ; return 0 ; } if ( <S2SV_ModEnd> <S2SV_ModStart> - doff <S2SV_ModEnd> <S2SV_ModStart> ""Tag<S2SV_blank>data<S2SV_blank>goes<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer<S2SV_blank>(%u<S2SV_blank>><S2SV_blank>%u)"" <S2SV_ModEnd> "
3507,"<S2SV_StartBug> p = strchr ( context -> buffer , '<S2SV_blank>' ) ; <S2SV_EndBug> <S2SV_StartBug> p = strchr ( p + 1 , '<S2SV_blank>' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> osStrchr <S2SV_ModEnd> 
3508,<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> LAYER_CONTEXT * const lc = get_layer_context ( svc ) ; <S2SV_EndBug> <S2SV_StartBug> const int layer = svc -> temporal_layer_id ; <S2SV_EndBug> <S2SV_StartBug> lc -> framerate = oxcf -> framerate / oxcf -> ts_rate_decimator [ layer ] ; <S2SV_EndBug> <S2SV_StartBug> lrc -> av_per_frame_bandwidth = ( int ) ( lc -> target_bandwidth / lc -> framerate ) ; <S2SV_EndBug> <S2SV_StartBug> if ( layer == 0 ) { <S2SV_EndBug> <S2SV_StartBug> lc -> avg_frame_size = lrc -> av_per_frame_bandwidth ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> framerate / oxcf -> ts_rate_decimator [ layer - 1 ] ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> ts_target_bitrate [ layer - 1 ] * 1000 ; <S2SV_EndBug> ,<S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> st_idx = svc -> spatial_layer_id * svc -> number_temporal_layers + <S2SV_ModEnd> <S2SV_ModStart> const int tl = svc -> temporal_layer_id ; lc -> framerate = cpi <S2SV_ModEnd> <S2SV_ModStart> tl <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_ModStart> tl <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> tl <S2SV_ModEnd> <S2SV_ModStart> layer_target_bitrate [ st_idx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3509,<S2SV_StartBug> if ( ses -> server -> sign && ses -> server -> ops -> generate_signingkey ) { <S2SV_EndBug> <S2SV_StartBug> rc = ses -> server -> ops -> generate_signingkey ( ses ) ; <S2SV_EndBug> <S2SV_StartBug> goto keygen_exit ; <S2SV_EndBug> <S2SV_StartBug> keygen_exit : <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return rc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3510,<S2SV_StartBug> if ( ! fs_searchpaths ) <S2SV_EndBug> <S2SV_StartBug> for ( search = fs_searchpaths ; search ; search = search -> next ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> qboolean isLocalConfig ; <S2SV_ModStart> isLocalConfig = ! strcmp ( filename , ""autoexec.cfg"" ) || ! strcmp ( filename , Q3CONFIG_CFG ) ; <S2SV_ModStart> if ( isLocalConfig && search -> pack ) continue ; "
3511,<S2SV_StartBug> f = po -> fanout ; <S2SV_EndBug> <S2SV_StartBug> if ( ! f ) <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & fanout_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> f ) { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & fanout_mutex ) ; } 
3512,"<S2SV_StartBug> memcpy ( own_dir , ""."" , 2 ) ; <S2SV_EndBug> ","<S2SV_ModStart> # ifdef SUPER_SECURE memcpy ( own_dir , ""/dev/null/"" , 2 ) ; # else <S2SV_ModStart> # endif "
3513,<S2SV_StartBug> uint32_t id ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( size_left < 4 ) { LogError ( ""Process_ipfix<S2SV_blank>[%u]<S2SV_blank>Template<S2SV_blank>withdraw<S2SV_blank>size<S2SV_blank>error<S2SV_blank>at<S2SV_blank>%s<S2SV_blank>line<S2SV_blank>%u"" , exporter -> info . id , __FILE__ , __LINE__ , strerror ( errno ) ) ; size_left = 0 ; continue ; } "
3514,"<S2SV_StartBug> dbuf_copy ( c -> infile , pos + 4 , data_len , d -> iccprofile_file ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! d -> iccprofile_file ) { de_warn ( c , ""Bad<S2SV_blank>ICC<S2SV_blank>profile<S2SV_blank>segment"" ) ; return ; } "
3515,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> ","<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : gss_release_buffer ( & minor_stat , & client_name ) ; gss_release_buffer ( & minor_stat , & service_name ) ; <S2SV_ModEnd> "
3516,"<S2SV_StartBug> int size_chk , err ; <S2SV_EndBug> <S2SV_StartBug> size_chk = chunk_size - headroom - XDP_PACKET_HEADROOM ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( headroom >= chunk_size - XDP_PACKET_HEADROOM <S2SV_ModEnd> 
3517,<S2SV_StartBug> int rec ; <S2SV_EndBug> <S2SV_StartBug> int rec_len = file -> record_length ; <S2SV_EndBug> <S2SV_StartBug> for ( rec = 1 ; ; rec ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> size_t rec ; size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> if ( rec > file -> record_count ) { rv = 0 ; break ; } 
3518,"<S2SV_StartBug> vpx_memset ( a_ctx , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( l_ctx , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) - 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
3519,"<S2SV_StartBug> static const char * parse_value ( cJSON * item , const char * value ) <S2SV_EndBug> <S2SV_StartBug> return parse_string ( item , value ) ; <S2SV_EndBug> <S2SV_StartBug> return parse_number ( item , value ) ; <S2SV_EndBug> <S2SV_StartBug> return parse_array ( item , value ) ; <S2SV_EndBug> <S2SV_StartBug> return parse_object ( item , value ) ; <S2SV_EndBug> ","<S2SV_ModStart> , const char * * ep ) { if ( ! value ) <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> , ep ) ; } <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> , ep ) ; } <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> , ep ) ; } * ep = value ; <S2SV_ModEnd> "
3520,"<S2SV_StartBug> if ( copy_to_user ( uaddr , ( ( u32 * ) regs ) + off , KVM_REG_SIZE ( reg -> id ) ) ) <S2SV_EndBug> ",<S2SV_ModStart> validate_core_offset ( reg ) ) return - EINVAL ; if ( 
3521,<S2SV_StartBug> get_page ( * page ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( ! try_get_page ( * page ) ) ) { ret = - ENOMEM ; goto unmap ; } <S2SV_ModEnd> 
3522,"<S2SV_StartBug> ses = cifs_find_smb_ses ( server , volume_info -> username ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3523,"<S2SV_StartBug> dbg_hid ( ""%s,<S2SV_blank>size:%d\\n"" , __func__ , size ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) || ( dj_report -> device_index > DJ_DEVICE_INDEX_MAX ) ) { dev_err ( & hdev -> dev , ""%s:<S2SV_blank>invalid<S2SV_blank>device<S2SV_blank>index:%d\\n"" , __func__ , dj_report -> device_index ) ; return false ; } "
3524,"<S2SV_StartBug> ""<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>[-t<S2SV_blank>life]<S2SV_blank>[command<S2SV_blank>[arg<S2SV_blank>...]]\\n"" <S2SV_EndBug> ","<S2SV_ModStart> ""<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>[-P<S2SV_blank>pkcs11_whitelist]<S2SV_blank>[-t<S2SV_blank>life]<S2SV_blank>[command<S2SV_blank>[arg<S2SV_blank>...]]\\n"" <S2SV_ModEnd> "
3525,"<S2SV_StartBug> int xml_init ( modsec_rec * msr , char * * error_msg ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> ",<S2SV_ModStart> xmlParserInputBufferCreateFilenameFunc entity ; <S2SV_ModStart> if ( msr -> txcfg -> xml_external_entity == 0 ) { entity = xmlParserInputBufferCreateFilenameDefault ( xml_unload_external_entity ) ; } 
3526,"<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.data.%d"" , gplot -> rootname , gplot -> nplots ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%f<S2SV_blank>%f\\n"" , valx , valy ) ; <S2SV_EndBug> ",<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> 
3527,"<S2SV_StartBug> isoclns_print ( ndo , p + 1 , length - 1 , caplen - 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3528,"<S2SV_StartBug> dev_data = pci_get_drvdata ( dev ) ; <S2SV_EndBug> <S2SV_StartBug> return pci_write_config_word ( dev , offset , value ) ; <S2SV_EndBug> ","<S2SV_ModStart> u16 val ; struct pci_cmd_info * cmd = data ; <S2SV_ModStart> cmd -> val = value ; if ( ! permissive && ( ! dev_data || ! dev_data -> permissive ) ) return 0 ; err = pci_read_config_word ( dev , offset , & val ) ; if ( err || val == value ) return err ; value &= PCI_COMMAND_GUEST ; value |= val & ~ PCI_COMMAND_GUEST ; "
3529,<S2SV_StartBug> if ( ( drv_data -> quirks & LG_RDESC ) && * rsize >= 90 && rdesc [ 83 ] == 0x26 && <S2SV_EndBug> <S2SV_StartBug> if ( ( drv_data -> quirks & LG_RDESC_REL_ABS ) && * rsize >= 50 && <S2SV_EndBug> ,<S2SV_ModStart> 91 <S2SV_ModEnd> <S2SV_ModStart> 51 <S2SV_ModEnd> 
3530,<S2SV_StartBug> # ifdef __linux <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3531,"<S2SV_StartBug> if ( strcmp ( im -> mode , ""1"" ) == 0 && state -> xsize > state -> bytes * 8 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( im -> mode , ""P"" ) == 0 && state -> xsize > state -> bytes ) { <S2SV_EndBug> <S2SV_StartBug> ptr = buf ; <S2SV_EndBug> ","<S2SV_ModStart> ( state -> xsize * state -> bits + 7 ) / 8 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ptr = buf ; for ( ; ; ) { if ( bytes < 1 ) return ptr - buf ; if ( ( * ptr & 0xC0 ) == 0xC0 ) { if ( bytes < 2 ) return ptr - buf ; n = ptr [ 0 ] & 0x3F ; while ( n > 0 ) { if ( state -> x >= state -> bytes ) { state -> errcode = IMAGING_CODEC_OVERRUN ; break ; } state -> buffer [ state -> x ++ ] = ptr [ 1 ] ; n -- ; } ptr += 2 ; bytes -= 2 ; } else { state -> buffer [ state -> x ++ ] = ptr [ 0 ] ; ptr ++ ; bytes -- ; } if ( state -> x >= state -> bytes ) { if ( state -> bytes % state -> xsize && state -> bytes > state -> xsize ) { int bands = state -> bytes / state -> xsize ; int stride = state -> bytes / bands ; int i ; for ( i = 1 ; i < bands ; i ++ ) { memmove ( & state -> buffer [ i * state -> xsize ] , & state -> buffer [ i * stride ] , state -> xsize ) ; } } state -> shuffle ( ( UINT8 * ) im -> image [ state -> y + state -> yoff ] + state -> xoff * im -> pixelsize , state -> buffer , state -> xsize ) ; state -> x = 0 ; if ( ++ state -> y >= state -> ysize ) { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3532,<S2SV_StartBug> dname = malloc ( strlen ( name ) + 16 ) ; <S2SV_EndBug> ,<S2SV_ModStart> safe_calloc <S2SV_ModEnd> 
3533,"<S2SV_StartBug> __mark_reg_known ( regs + insn -> dst_reg , insn -> imm ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( BPF_CLASS ( insn -> code ) == BPF_ALU64 ) { <S2SV_ModStart> insn -> imm ) ; } else { __mark_reg_known ( regs + insn -> dst_reg , ( u32 ) insn -> imm ) ; } <S2SV_ModEnd> "
3534,"<S2SV_StartBug> strncat ( params , gtk_entry_get_text ( GTK_ENTRY ( entry1 ) ) , PARAMS_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( params , ""/"" , PARAMS_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( params , gtk_entry_get_text ( GTK_ENTRY ( entry2 ) ) , PARAMS_LEN ) ; <S2SV_EndBug> ",<S2SV_ModStart> ETH_ASCII_ADDR_LEN <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> IP6_ASCII_ADDR_LEN <S2SV_ModEnd> 
3535,"<S2SV_StartBug> if ( poll ( & pfd , 1 , 500 ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( sent = send ( fd , p , len , MSG_NOSIGNAL ) ) == - 1 ) <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3536,"<S2SV_StartBug> bufobj = PyObject_CallObject ( tok -> decoding_readline , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart> _PyObject_CallNoArg <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3537,<S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> ,<S2SV_ModStart> q -> fq = NULL ; 
3538,<S2SV_StartBug> gdImagePtr im ; <S2SV_EndBug> ,"<S2SV_ModStart> check_file ( ""heap_overflow_1.tga"" ) ; check_file ( ""heap_overflow_2.tga"" <S2SV_ModEnd> "
3539,<S2SV_StartBug> # if PY_MINOR_VERSION >= 4 <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3540,"<S2SV_StartBug> u32 i = 0 , j , page_offset = 0 , sg_per_table , sg_tables , total_sg_needed ; <S2SV_EndBug> <S2SV_StartBug> struct rd_dev_sg_table * sg_table ; <S2SV_EndBug> <S2SV_StartBug> while ( total_sg_needed ) { <S2SV_EndBug> ","<S2SV_ModStart> struct rd_dev_sg_table * sg_table ; u32 <S2SV_ModEnd> <S2SV_ModStart> int rc <S2SV_ModEnd> <S2SV_ModStart> rc = rd_allocate_sgl_table ( rd_dev , sg_table , total_sg_needed , 0x00 ) ; if ( rc ) return rc ; <S2SV_ModEnd> "
3541,"<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>title<S2SV_blank>\'%s\'"" , gplot -> title ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>xlabel<S2SV_blank>\'%s\'"" , gplot -> xlabel ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>ylabel<S2SV_blank>\'%s\'"" , gplot -> ylabel ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>terminal<S2SV_blank>png;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>terminal<S2SV_blank>postscript;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>terminal<S2SV_blank>latex;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>logscale<S2SV_blank>x"" ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""set<S2SV_blank>logscale<S2SV_blank>y"" ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\"" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s"" , <S2SV_EndBug> ",<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> 
3542,<S2SV_StartBug> outpos += <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> sprintf ( outputbuffer <S2SV_ModEnd> <S2SV_ModStart> sendClean ( outputbuffer ) ; 
3543,"<S2SV_StartBug> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , <S2SV_EndBug> ","<S2SV_ModStart> p_total_data_size , "
3544,"<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> skb_free_datagram ( sk , skb ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } 
3545,<S2SV_StartBug> follow_dotdot ( nd ) ; <S2SV_EndBug> ,<S2SV_ModStart> return 
3546,<S2SV_StartBug> list = lptr = ( nodeitem * ) palloc ( sizeof ( nodeitem ) * ( num + 1 ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( num + 1 > MaxAllocSize / sizeof ( nodeitem ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>levels<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , num + 1 , ( int ) ( MaxAllocSize / sizeof ( nodeitem ) ) ) ) ) ; "
3547,<S2SV_StartBug> ld -> bytes_left = ld -> buffer_size - words * 4 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ld -> buffer_size < words * 4 ) ld -> bytes_left = 0 ; else 
3548,"<S2SV_StartBug> profile = BlobToStringInfo ( ( const void * ) NULL , length ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError , ""InsufficientImageDataInFile"" ) ; "
3549,<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( clk_src ) ; 
3550,"<S2SV_StartBug> sync . clock_rate = FST_RDL ( card , portConfig [ i ] . lineSpeed ) ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( & sync , 0 , sizeof ( sync ) ) ; "
3551,"<S2SV_StartBug> if ( pos >= GDT_ENTRY_TLS_ENTRIES * sizeof ( struct user_desc ) || <S2SV_EndBug> <S2SV_StartBug> set_tls_desc ( target , <S2SV_EndBug> ",<S2SV_ModStart> int i ; <S2SV_ModStart> for ( i = 0 ; i < count / sizeof ( struct user_desc ) ; i ++ ) if ( ! tls_desc_okay ( info + i ) ) return - EINVAL ; 
3552,"<S2SV_StartBug> char buf [ 32 ] , * e ; <S2SV_EndBug> ",<S2SV_ModStart> 50 <S2SV_ModEnd> 
3553,<S2SV_StartBug> ISOFS_SB ( inode -> i_sb ) -> s_rock = 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( rr -> u . ER . len_id + offsetof ( struct rock_ridge , u . ER . data ) > rr -> len ) goto out ; "
3554,<S2SV_StartBug> m -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3555,<S2SV_StartBug> disk -> queue = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> put_disk ( disk ) ; 
3556,"<S2SV_StartBug> static int getnum ( lua_State * L , const char * * fmt , int df ) { <S2SV_EndBug> <S2SV_StartBug> if ( a > ( INT_MAX / 10 ) || a * 10 > ( INT_MAX - ( * * fmt - '0' ) ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3557,"<S2SV_StartBug> void vp9_choose_segmap_coding_method ( VP9_COMP * cpi ) { <S2SV_EndBug> <S2SV_StartBug> vp9_prob no_pred_tree [ SEG_TREE_PROBS ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob t_pred_tree [ SEG_TREE_PROBS ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob t_nopred_prob [ PREDICTION_PROBS ] ; <S2SV_EndBug> <S2SV_StartBug> const int mis = cm -> mi_stride ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( seg -> pred_probs , 255 , sizeof ( seg -> pred_probs ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_tile_init ( & tile , cm , 0 , tile_col ) ; <S2SV_EndBug> <S2SV_StartBug> mi_row += 8 , mi_ptr += 8 * mis ) { <S2SV_EndBug> <S2SV_StartBug> count_segs_sb ( cpi , & tile , mi , no_pred_segcounts , <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( seg -> tree_probs , t_pred_tree , sizeof ( t_pred_tree ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( seg -> pred_probs , t_nopred_prob , sizeof ( t_nopred_prob ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( seg -> tree_probs , no_pred_tree , sizeof ( no_pred_tree ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> VP9_COMMON * cm , MACROBLOCKD * xd ) { <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> MODE_INFO * * mi_ptr ; <S2SV_ModStart> cm -> mi_stride ) { MODE_INFO * * <S2SV_ModEnd> <S2SV_ModStart> cm , xd <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> "
3558,"<S2SV_StartBug> g_return_if_fail ( RS_IS_FILTER ( filter ) ) ; <S2SV_EndBug> <S2SV_StartBug> g_file_set_contents ( ""/tmp/rs-filter-graph"" , str -> str , str -> len , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( 0 != system ( ""dot<S2SV_blank>-Tpng<S2SV_blank>>/tmp/rs-filter-graph.png<S2SV_blank></tmp/rs-filter-graph"" ) ) <S2SV_EndBug> <S2SV_StartBug> if ( 0 != system ( ""gnome-open<S2SV_blank>/tmp/rs-filter-graph.png"" ) ) <S2SV_EndBug> <S2SV_StartBug> g_warning ( ""Calling<S2SV_blank>gnome-open<S2SV_blank>failed."" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; gchar * dot_filename ; gchar * png_filename ; gchar * command_line <S2SV_ModStart> dot_filename = g_strdup_printf ( ""/tmp/rs-filter-graph.%u"" , g_random_int ( ) ) ; png_filename = g_strdup_printf ( ""%s.%u.png"" , dot_filename , g_random_int ( ) ) ; g_file_set_contents ( dot_filename <S2SV_ModEnd> <S2SV_ModStart> command_line = g_strdup_printf ( ""dot<S2SV_blank>-Tpng<S2SV_blank>>%s<S2SV_blank><%s"" , png_filename , dot_filename ) ; <S2SV_ModStart> command_line <S2SV_ModEnd> <S2SV_ModStart> g_free ( command_line ) ; command_line = g_strdup_printf ( ""gnome-open<S2SV_blank>%s"" , png_filename ) ; <S2SV_ModStart> command_line <S2SV_ModEnd> <S2SV_ModStart> ) ; g_free ( command_line ) ; g_free ( dot_filename ) ; g_free ( png_filename "
3559,"<S2SV_StartBug> if ( ( fd = open ( clonedev , O_RDWR ) ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( err = ioctl ( fd , TUNSETIFF , ( void * ) & ifr ) ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> int flags = fcntl ( fd , F_GETFL , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> fcntl ( fd , F_SETFL , flags | O_NONBLOCK ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ; TEMP_FAILURE_RETRY ( <S2SV_ModEnd> <S2SV_ModStart> ) 
3560,<S2SV_StartBug> # if CONFIG_MULTIPLE_ARF <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTIPLE_ARF <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> multi_arf_enabled ) { <S2SV_EndBug> <S2SV_StartBug> arf_idx = ( cpi -> frame_coding_order [ sn ] < 0 ) ? <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart> if ( vp9_preserve_existing_gf ( cpi ) ) { <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> oxcf . pass == 2 ) && cpi -> multi_arf_allowed ) { const GF_GROUP * const gf_group = & cpi -> twopass . gf_group <S2SV_ModEnd> <S2SV_ModStart> gf_group -> arf_update_idx [ gf_group -> index <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3561,"<S2SV_StartBug> struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , void * data ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> 
3562,<S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! tls_desc_okay ( & info ) ) return - EINVAL 
3563,"<S2SV_StartBug> id = ipc_addid ( & shm_ids ( ns ) , & shp -> shm_perm , ns -> shm_ctlmni ) ; <S2SV_EndBug> <S2SV_StartBug> shp -> shm_cprid = task_tgid_vnr ( current ) ; <S2SV_EndBug> ",<S2SV_ModStart> shp -> shm_cprid = task_tgid_vnr ( current ) ; shp -> shm_lprid = 0 ; shp -> shm_atim = shp -> shm_dtim = 0 ; shp -> shm_ctim = get_seconds ( ) ; shp -> shm_segsz = size ; shp -> shm_nattch = 0 ; shp -> shm_file = file ; shp -> shm_creator = current ; <S2SV_ModStart>  <S2SV_ModEnd> 
3564,"<S2SV_StartBug> . daddr = ( param -> replyopts . srr ? <S2SV_EndBug> <S2SV_StartBug> param -> replyopts . faddr : iph -> saddr ) , <S2SV_EndBug> ",<S2SV_ModStart> opt . opt . <S2SV_ModStart> . opt . opt 
3565,<S2SV_StartBug> bprm -> interp = interp ; <S2SV_EndBug> <S2SV_StartBug> return search_binary_handler ( bprm ) ; <S2SV_EndBug> ,"<S2SV_ModStart> retval = bprm_change_interp ( interp , <S2SV_ModEnd> <S2SV_ModStart> file = open_exec ( interp ) ; if ( IS_ERR ( file ) ) return PTR_ERR ( file ) ; bprm -> file = file ; retval = prepare_binprm ( bprm ) ; if ( retval < 0 ) return retval ; "
3566,"<S2SV_StartBug> sprintf ( addr , ""%d.%d.%d.%d"" , a , b , c , d ) ; <S2SV_EndBug> ","<S2SV_ModStart> snprintf ( addr , sizeof ( addr ) <S2SV_ModEnd> "
3567,"<S2SV_StartBug> int ntlm_read_message_header ( wStream * s , NTLM_MESSAGE_HEADER * header ) <S2SV_EndBug> ",<S2SV_ModStart> static 
3568,"<S2SV_StartBug> cmd = kmalloc ( sizeof ( * cmd ) , GFP_KERNEL ) ; <S2SV_EndBug> ",<S2SV_ModStart> kzalloc <S2SV_ModEnd> 
3569,<S2SV_StartBug> hash_param . data = 0 ; <S2SV_EndBug> <S2SV_StartBug> hash_param . len = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> instance -> private_key <S2SV_ModEnd> <S2SV_ModStart> instance -> private_key_len <S2SV_ModEnd> 
3570,"<S2SV_StartBug> unix_insert_socket ( unix_sockets_unbound ( sk ) , sk ) ; <S2SV_EndBug> ","<S2SV_ModStart> init_waitqueue_func_entry ( & u -> peer_wake , unix_dgram_peer_wake_relay ) ; "
3571,"<S2SV_StartBug> # ifdef __linux__ <S2SV_EndBug> <S2SV_StartBug> sun . sun_path [ 0 ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> sun_len = offsetof ( struct sockaddr_un , sun_path ) + strlen ( address ) + 1 ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sizeof <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> 
3572,<S2SV_StartBug> # ifndef NETSNMP_NO_WRITE_SUPPORT <S2SV_EndBug> <S2SV_StartBug> # ifndef NETSNMP_NO_WRITE_SUPPORT <S2SV_EndBug> ,<S2SV_ModStart> if ! defined ( NETSNMP_NO_WRITE_SUPPORT ) && ENABLE_EXTEND_WRITE_ACCESS <S2SV_ModEnd> <S2SV_ModStart> if ! defined ( NETSNMP_NO_WRITE_SUPPORT ) && ENABLE_EXTEND_WRITE_ACCESS <S2SV_ModEnd> 
3573,"<S2SV_StartBug> static struct ip_options * ip_options_get_alloc ( const int optlen ) <S2SV_EndBug> <S2SV_StartBug> return kzalloc ( sizeof ( struct ip_options ) + ( ( optlen + 3 ) & ~ 3 ) , <S2SV_EndBug> ",<S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> 
3574,<S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> BUG_ON ( ! ptr ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! cursor ) goto gc_complete ; <S2SV_ModStart> cursor <S2SV_ModEnd> 
3575,<S2SV_StartBug> local_vec = ( struct rds_iovec __user * ) ( unsigned long ) args -> local_vec_addr ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( args -> nr_local == 0 ) return - EINVAL 
3576,<S2SV_StartBug> assert ( plen <= * len ) ; <S2SV_EndBug> ,<S2SV_ModStart> && plen > 0 
3577,"<S2SV_StartBug> return send ( ts [ h ] . cmd_fdw , cmd_send , size_send , 0 ) == size_send ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3578,"<S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ldt , VCPU_SREG_LDTR , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> es , VCPU_SREG_ES , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> cs , VCPU_SREG_CS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ss , VCPU_SREG_SS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ds , VCPU_SREG_DS , cpl , true ) ; <S2SV_EndBug> ","<S2SV_ModStart> true , NULL <S2SV_ModEnd> <S2SV_ModStart> true , NULL <S2SV_ModEnd> <S2SV_ModStart> true , NULL <S2SV_ModEnd> <S2SV_ModStart> true , NULL <S2SV_ModEnd> <S2SV_ModStart> true , NULL <S2SV_ModEnd> "
3579,"<S2SV_StartBug> if ( ! capable ( CAP_NET_ADMIN ) ) <S2SV_EndBug> <S2SV_StartBug> return - EPERM ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( arg , user , get_arglen [ GET_CMDID ( cmd ) ] ) != 0 ) <S2SV_EndBug> ",<S2SV_ModStart> unsigned int copylen ; <S2SV_ModStart> ; if ( cmd < IP_VS_BASE_CTL || cmd > IP_VS_SO_GET_MAX ) return - EINVAL <S2SV_ModStart> copylen = get_arglen [ GET_CMDID ( cmd ) ] ; if ( copylen > 128 ) return - EINVAL ; <S2SV_ModStart> copylen <S2SV_ModEnd> 
3580,<S2SV_StartBug> if ( tgt_clobbers & ~ site_clobbers ) <S2SV_EndBug> <S2SV_StartBug> if ( len < 5 ) <S2SV_EndBug> ,"<S2SV_ModStart> len < 5 ) { # ifdef CONFIG_RETPOLINE WARN_ONCE ( ""Failing<S2SV_blank>to<S2SV_blank>patch<S2SV_blank>indirect<S2SV_blank>CALL<S2SV_blank>in<S2SV_blank>%ps\\n"" , ( void * ) addr ) ; # endif <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModEnd> "
3581,<S2SV_StartBug> if ( o == NULL ) return ; <S2SV_EndBug> ,"<S2SV_ModStart> || checkType ( c , o , OBJ_STREAM ) "
3582,"<S2SV_StartBug> CHECK_TLV_SIZE ( 1 + addr_str_length , ""Management<S2SV_blank>address"" ) ; <S2SV_EndBug> <S2SV_StartBug> CHECK_TLV_SIZE ( 4 , ""Organisational"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warnx ( ""lldp"" , ""too<S2SV_blank>large<S2SV_blank>management<S2SV_blank>address<S2SV_blank>on<S2SV_blank>%s"" , hardware -> h_ifname ) ; goto malformed ; } <S2SV_ModStart> 1 + ( int ) sizeof ( orgid ) <S2SV_ModEnd> "
3583,"<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> if ( ! js_regexec ( re -> prog , text , & m , opts ) ) { <S2SV_EndBug> ","<S2SV_ModStart> result ; int <S2SV_ModStart> result = <S2SV_ModEnd> <S2SV_ModStart> ; if ( result < 0 ) js_error ( J , ""regexec<S2SV_blank>failed"" ) ; if ( result == 0 "
3584,<S2SV_StartBug> goto read_error ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3585,"<S2SV_StartBug> cred = rpc_lookup_cred ( ) ; <S2SV_EndBug> <S2SV_StartBug> state = nfs4_do_open ( dir , & path , openflags , NULL , cred ) ; <S2SV_EndBug> <S2SV_StartBug> nfs4_intent_set_file ( nd , & path , state ) ; <S2SV_EndBug> <S2SV_StartBug> nfs4_close_sync ( & path , state , openflags ) ; <S2SV_EndBug> ","<S2SV_ModStart> fmode_t fmode = openflags & ( FMODE_READ | FMODE_WRITE ) ; <S2SV_ModStart> , fmode <S2SV_ModStart> , fmode <S2SV_ModStart> fmode <S2SV_ModEnd> "
3586,<S2SV_StartBug> int target = rc -> av_per_frame_bandwidth * kf_ratio ; <S2SV_EndBug> ,<S2SV_ModStart> const <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> 
3587,"<S2SV_StartBug> if ( test_bit ( DMF_FREEING , & md -> flags ) || <S2SV_EndBug> <S2SV_StartBug> dm_deleting_md ( md ) ) <S2SV_EndBug> <S2SV_StartBug> dm_get ( md ) ; <S2SV_EndBug> ",<S2SV_ModStart> spin_lock ( & _minor_lock ) ; <S2SV_ModStart> { md = NULL ; goto out ; } <S2SV_ModEnd> <S2SV_ModStart> ) ; out : spin_unlock ( & _minor_lock 
3588,"<S2SV_StartBug> return luaL_argerror ( L , 0 , ""MessagePack<S2SV_blank>pack<S2SV_blank>needs<S2SV_blank>input."" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; if ( ! lua_checkstack ( L , nargs ) ) return luaL_argerror ( L , 0 , ""Too<S2SV_blank>many<S2SV_blank>arguments<S2SV_blank>for<S2SV_blank>MessagePack<S2SV_blank>pack."" "
3589,<S2SV_StartBug> if ( group_leader -> ctx -> type != ctx -> type ) <S2SV_EndBug> ,<S2SV_ModStart> task <S2SV_ModEnd> <S2SV_ModStart> task ) goto err_context ; if ( group_leader -> cpu != event -> cpu <S2SV_ModEnd> 
3590,<S2SV_StartBug> down_read ( & BTRFS_I ( dir ) -> root -> fs_info -> subvol_sem ) ; <S2SV_EndBug> ,"<S2SV_ModStart> error = btrfs_check_dir_item_collision ( BTRFS_I ( dir ) -> root , dir -> i_ino , name , namelen ) ; if ( error ) goto out_dput ; "
3591,"<S2SV_StartBug> MACROBLOCK * x , <S2SV_EndBug> <S2SV_StartBug> const YV12_BUFFER_CONFIG * yv12 = get_ref_frame_buffer ( cpi , LAST_FRAME ) ; <S2SV_EndBug> <S2SV_StartBug> int offset = ( mi_row * MI_SIZE ) * yv12 -> y_stride + ( mi_col * MI_SIZE ) ; <S2SV_EndBug> <S2SV_StartBug> var = cpi -> fn_ptr [ bs ] . vf ( x -> plane [ 0 ] . src . buf , <S2SV_EndBug> ","<S2SV_ModStart> const struct buf_2d * ref <S2SV_ModEnd> <S2SV_ModStart> unsigned int sse , var ; uint8_t * last_y ; <S2SV_ModStart> last <S2SV_ModEnd> <S2SV_ModStart> assert ( last != NULL ) ; last_y = & last -> y_buffer [ <S2SV_ModEnd> <S2SV_ModStart> * last <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ] <S2SV_ModEnd> <S2SV_ModStart> ref -> buf , ref -> stride , last_y , last <S2SV_ModEnd> "
3592,"<S2SV_StartBug> checked_xmalloc ( size_t size ) <S2SV_EndBug> <S2SV_StartBug> alloc_limit_assert ( ""checked_xmalloc"" , size ) ; <S2SV_EndBug> <S2SV_StartBug> return xmalloc ( size ) ; <S2SV_EndBug> ","<S2SV_ModStart> num , size_t <S2SV_ModStart> size_t res ; if ( check_mul_overflow ( num , size , & res ) ) abort ( ) ; <S2SV_ModStart> res <S2SV_ModEnd> <S2SV_ModStart> num , "
3593,<S2SV_StartBug> int m ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( n < 0 ) { jas_deprecated ( ""negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_gobble"" ) ; } "
3594,<S2SV_StartBug> if ( p ++ != pages [ i + j ] ) <S2SV_EndBug> <S2SV_StartBug> if ( p ++ != pages [ i + j ] ) <S2SV_EndBug> ,<S2SV_ModStart> ++ p <S2SV_ModEnd> <S2SV_ModStart> ++ p <S2SV_ModEnd> 
3595,<S2SV_StartBug> hdl -> client_state = HSM_COM_C_STATE_IN ; <S2SV_EndBug> ,<S2SV_ModStart> if ( mkstemp ( hdl -> c_path ) == - 1 ) { res = HSM_COM_PATH_ERR ; goto cleanup ; } 
3596,"<S2SV_StartBug> ( * sp -> encodepfunc ) ( tif , bp , cc ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! <S2SV_ModStart> ) return 0 
3597,<S2SV_StartBug> new -> cid_mask = new -> lid_mask = 0xffff ; <S2SV_EndBug> ,<S2SV_ModStart> ( 1 << KVM_X2APIC_CID_BITS ) - 1 ; 
3598,<S2SV_StartBug> if ( ! ( ifa1 -> ifa_flags & IFA_F_SECONDARY ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> in_dev -> dead ) goto no_promotions ; if ( <S2SV_ModStart> no_promotions : 
3599,<S2SV_StartBug> SvcInternal * si ; <S2SV_EndBug> <S2SV_StartBug> si = ( SvcInternal * ) svc_ctx -> internal ; <S2SV_EndBug> <S2SV_StartBug> free ( si -> buffer ) ; <S2SV_EndBug> ,<S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> <S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3600,"<S2SV_StartBug> strncpy ( extra_response -> key , key , strlen ( key ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> strlen ( NOTUNDERSTOOD ) + 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> strlcpy <S2SV_ModEnd> <S2SV_ModStart> sizeof ( extra_response -> key ) ) ; strlcpy <S2SV_ModEnd> <S2SV_ModStart> sizeof ( extra_response -> value ) <S2SV_ModEnd> 
3601,"<S2SV_StartBug> u32 i = 0 , j , page_offset = 0 , sg_per_table , sg_tables , total_sg_needed ; <S2SV_EndBug> <S2SV_StartBug> struct rd_dev_sg_table * sg_table ; <S2SV_EndBug> <S2SV_StartBug> while ( total_sg_needed ) { <S2SV_EndBug> ","<S2SV_ModStart> struct rd_dev_sg_table * sg_table ; u32 <S2SV_ModEnd> <S2SV_ModStart> int rc <S2SV_ModEnd> <S2SV_ModStart> rc = rd_allocate_sgl_table ( rd_dev , sg_table , total_sg_needed , 0x00 ) ; if ( rc ) return rc ; <S2SV_ModEnd> "
3602,<S2SV_StartBug> return ( ( Image * ) NULL ) ; <S2SV_EndBug> ,<S2SV_ModStart> break <S2SV_ModEnd> 
3603,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> if ( TSQUERY_TOO_BIG ( list_length ( state . polstr ) , state . sumlen ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""tsquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large"" ) ) ) ; "
3604,<S2SV_StartBug> buf = malloc ( sz + 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart> safe_calloc <S2SV_ModEnd> 
3605,<S2SV_StartBug> return ret ; <S2SV_EndBug> <S2SV_StartBug> if ( s -> ref ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( ret == 1 ) { ret = AVERROR_INVALIDDATA ; goto fail ; } <S2SV_ModStart>  <S2SV_ModEnd> 
3606,"<S2SV_StartBug> pid_t child = fork ( ) ; <S2SV_EndBug> <S2SV_StartBug> int rv = copy_file ( src , dest ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chown ( dest , getuid ( ) , getgid ( ) ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( chmod ( dest , S_IRUSR | S_IWUSR ) < 0 ) <S2SV_EndBug> ","<S2SV_ModStart> copy_file_as_user <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; fs_logger2 ( ""clone"" , dest <S2SV_ModEnd> "
3607,"<S2SV_StartBug> static inline long decode_twos_comp ( ulong c , int prec ) <S2SV_EndBug> ",<S2SV_ModStart> jas_ulong <S2SV_ModEnd> 
3608,"<S2SV_StartBug> x -> quantize_b_pair = vp8_fast_quantize_b_pair ; <S2SV_EndBug> <S2SV_StartBug> & distortion , & intra_error ) ; <S2SV_EndBug> <S2SV_StartBug> x -> quantize_b = vp8_regular_quantize_b ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , mb_row , mb_col <S2SV_ModStart>  <S2SV_ModEnd> "
3609,<S2SV_StartBug> ascii = malloc ( strlen ( str ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ascii = malloc ( str_len ) ; <S2SV_EndBug> ,<S2SV_ModStart> safe_calloc <S2SV_ModEnd> <S2SV_ModStart> safe_calloc <S2SV_ModEnd> 
3610,<S2SV_StartBug> char lowstr [ MAXDATELEN + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( str ) >= sizeof ( lowstr ) ) <S2SV_EndBug> ,<S2SV_ModStart> MAXDATEFIELDS <S2SV_ModEnd> <S2SV_ModStart> > MAXDATELEN <S2SV_ModEnd> 
3611,<S2SV_StartBug> free_uid ( group -> inotify_data . user ) ; <S2SV_EndBug> ,<S2SV_ModStart> atomic_dec ( & group -> inotify_data . user -> inotify_devs ) ; 
3612,"<S2SV_StartBug> int i , j ; <S2SV_EndBug> <S2SV_StartBug> i = ctm -> length ; <S2SV_EndBug> <S2SV_StartBug> if ( ( i < 11 ) || ( i > 17 ) ) <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( i < 13 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> * ( p ++ ) = * ( str ++ ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( * str >= '0' ) && ( * str <= '9' ) ) <S2SV_EndBug> <S2SV_StartBug> if ( * str == 'Z' ) <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug> <S2SV_StartBug> if ( ( * str != '+' ) && ( * str != '-' ) ) <S2SV_EndBug> ","<S2SV_ModStart> , remaining <S2SV_ModStart> remaining <S2SV_ModEnd> <S2SV_ModStart> int min_length = sizeof ( ""YYMMDDHHMMZ"" ) - 1 ; int max_length = sizeof ( ""YYMMDDHHMMSS+hhmm"" ) - 1 ; if ( remaining < min_length || remaining > max_length <S2SV_ModEnd> <S2SV_ModStart> remaining -= 10 ; <S2SV_ModStart> int min_length = sizeof ( ""YYYYMMDDHHMMZ"" ) - 1 ; int max_length = sizeof ( ""YYYYMMDDHHMMSS.fff+hhmm"" ) - 1 ; if ( remaining < min_length || remaining > max_length <S2SV_ModEnd> <S2SV_ModStart> remaining -= 12 ; <S2SV_ModStart> if ( remaining < 2 ) return 0 ; * ( p ++ ) = * ( str ++ ) ; * ( p ++ ) = * ( str ++ ) ; remaining -= 2 ; if ( remaining && <S2SV_ModEnd> <S2SV_ModStart> remaining -- ; for ( i = 0 ; i < 3 && remaining ; i ++ , str ++ , remaining -- ) { if ( * str < '0' || * str > '9' ) break ; } <S2SV_ModEnd> <S2SV_ModStart> ! remaining ) return 0 ; if ( <S2SV_ModStart> { if ( remaining != 1 ) return 0 ; <S2SV_ModStart> } <S2SV_ModStart> ) return 0 ; if ( remaining != 5 ) return 0 ; if ( str [ 1 ] < '0' || str [ 1 ] > '9' || str [ 2 ] < '0' || str [ 2 ] > '9' || str [ 3 ] < '0' || str [ 3 ] > '9' || str [ 4 ] < '0' || str [ 4 ] > '9' "
3613,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( s == 0 ) return ( ( void * ) NULL ) ; 
3614,<S2SV_StartBug> if ( ! ( flags | RT6_LOOKUP_F_DST_NOREF ) ) <S2SV_EndBug> ,<S2SV_ModStart> & <S2SV_ModEnd> 
3615,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> ","<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : gss_release_buffer ( & minor_stat , & client_name ) ; gss_release_buffer ( & minor_stat , & service_name ) ; <S2SV_ModEnd> "
3616,<S2SV_StartBug> pu1_buf = ( UWORD8 * ) ps_codec -> pv_mv_bank_buf_base ; <S2SV_EndBug> ,<S2SV_ModStart> ps_codec -> i4_max_dpb_size = max_dpb_size ; 
3617,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>[|truncated]"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , rpl_tstr <S2SV_ModEnd> "
3618,"<S2SV_StartBug> static int nfs4_open_recover_helper ( struct nfs4_opendata * opendata , mode_t openflags , struct nfs4_state * * res ) <S2SV_EndBug> <S2SV_StartBug> opendata -> o_arg . open_flags = openflags ; <S2SV_EndBug> <S2SV_StartBug> nfs4_close_state ( & opendata -> path , newstate , openflags ) ; <S2SV_EndBug> ",<S2SV_ModStart> fmode_t fmode <S2SV_ModEnd> <S2SV_ModStart> 0 ; opendata -> o_arg . fmode = fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> 
3619,<S2SV_StartBug> # if ( ETH_SUPPORT == ENABLED ) <S2SV_EndBug> ,<S2SV_ModStart> message -> interface = queueItem -> interface ; 
3620,<S2SV_StartBug> while ( 1 ) { <S2SV_EndBug> <S2SV_StartBug> assert ( ! state -> last_str || <S2SV_EndBug> ,<S2SV_ModStart> state -> fmode = 1 ; <S2SV_ModStart>  <S2SV_ModEnd> 
3621,"<S2SV_StartBug> if ( pos > CDF_SEC_SIZE ( h ) * sst -> sst_len ) { <S2SV_EndBug> <S2SV_StartBug> pos , CDF_SEC_SIZE ( h ) * sst -> sst_len ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> + len <S2SV_ModStart> + len 
3622,<S2SV_StartBug> vstart += verdef -> vd_aux ; <S2SV_EndBug> ,<S2SV_ModStart> int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> 
3623,"<S2SV_StartBug> int sec ; <S2SV_EndBug> <S2SV_StartBug> guint pkt_len ; <S2SV_EndBug> <S2SV_StartBug> guint offset = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( sscanf ( line , ""%9d.%9d:<S2SV_blank>%15[a-z0-9/:.-](%1[io])<S2SV_blank>len=%9u:%12s->%12s/"" , <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> ","<S2SV_ModStart> pkt_len ; int <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> ""%9d.%9d:<S2SV_blank>%15[a-z0-9/:.-](%1[io])<S2SV_blank>len=%9d:%12s->%12s/"" <S2SV_ModEnd> <S2SV_ModStart> ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""netscreen:<S2SV_blank>packet<S2SV_blank>header<S2SV_blank>has<S2SV_blank>a<S2SV_blank>negative<S2SV_blank>packet<S2SV_blank>length"" ) ; return FALSE "
3624,<S2SV_StartBug> struct o2nm_cluster * cluster = to_o2nm_cluster_from_node ( node ) ; <S2SV_EndBug> <S2SV_StartBug> ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ret ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> o2nm_lock_subsystem ( ) ; cluster = to_o2nm_cluster_from_node ( node ) ; if ( ! cluster ) { o2nm_unlock_subsystem ( ) ; return - EINVAL ; } <S2SV_ModStart> o2nm_unlock_subsystem ( ) ; 
3625,"<S2SV_StartBug> memcpy ( new , ours , sizeof ( * new ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ) ; memset ( dte , 0 , sizeof ( * dte "
3626,<S2SV_StartBug> if ( ! PPEEK_IS ( ')' ) ) return ONIGERR_INVALID_GROUP_NAME ; <S2SV_EndBug> ,"<S2SV_ModStart> { r = ONIGERR_INVALID_GROUP_NAME ; onig_scan_env_set_error_string ( env , r , p - 1 , p + 1 ) ; return r ; } <S2SV_ModEnd> "
3627,"<S2SV_StartBug> FRAME_CONTEXT * fc = & cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> fc -> intra_inter_prob [ i ] = adapt_prob ( pre_fc -> intra_inter_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> fc -> comp_inter_prob [ i ] = adapt_prob ( pre_fc -> comp_inter_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> fc -> comp_ref_prob [ i ] = adapt_prob ( pre_fc -> comp_ref_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> fc -> single_ref_prob [ i ] [ j ] = adapt_prob ( pre_fc -> single_ref_prob [ i ] [ j ] , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_inter_mode_tree , pre_fc -> inter_mode_probs [ i ] , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_intra_mode_tree , pre_fc -> y_mode_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_intra_mode_tree , pre_fc -> uv_mode_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_partition_tree , pre_fc -> partition_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_switchable_interp_tree , pre_fc -> switchable_interp_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> fc -> tx_probs . p8x8 [ i ] [ j ] = adapt_prob ( pre_fc -> tx_probs . p8x8 [ i ] [ j ] , <S2SV_EndBug> <S2SV_StartBug> fc -> tx_probs . p16x16 [ i ] [ j ] = adapt_prob ( pre_fc -> tx_probs . p16x16 [ i ] [ j ] , <S2SV_EndBug> <S2SV_StartBug> fc -> tx_probs . p32x32 [ i ] [ j ] = adapt_prob ( pre_fc -> tx_probs . p32x32 [ i ] [ j ] , <S2SV_EndBug> <S2SV_StartBug> fc -> skip_probs [ i ] = adapt_prob ( pre_fc -> skip_probs [ i ] , counts -> skip [ i ] ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs ( <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_merge_probs <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_merge_probs <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_merge_probs <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_merge_probs <S2SV_ModEnd> <S2SV_ModStart> vpx_tree_merge_probs <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs ( <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs ( <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs ( <S2SV_ModEnd> <S2SV_ModStart> mode_mv_merge_probs ( <S2SV_ModEnd> 
3628,<S2SV_StartBug> struct snd_kcontrol * kctl ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( card -> last_numid >= UINT_MAX - count ) card -> last_numid = 0 
3629,"<S2SV_StartBug> void * shared_kaddr ; <S2SV_EndBug> <S2SV_StartBug> struct pvclock_vcpu_time_info * guest_hv_clock ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vcpu -> time_page ) <S2SV_EndBug> <S2SV_StartBug> shared_kaddr = kmap_atomic ( vcpu -> time_page ) ; <S2SV_EndBug> <S2SV_StartBug> pvclock_flags = ( guest_hv_clock -> flags & PVCLOCK_GUEST_STOPPED ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( shared_kaddr + vcpu -> time_offset , & vcpu -> hv_clock , <S2SV_EndBug> <S2SV_StartBug> kunmap_atomic ( shared_kaddr ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pv_time_enabled <S2SV_ModEnd> <S2SV_ModStart> if ( unlikely ( kvm_read_guest_cached ( v -> kvm , & vcpu -> pv_time , & guest_hv_clock , sizeof ( guest_hv_clock ) ) ) ) return 0 <S2SV_ModEnd> <S2SV_ModStart> . <S2SV_ModEnd> <S2SV_ModStart> kvm_write_guest_cached ( v -> kvm , & vcpu -> pv_time , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3630,"<S2SV_StartBug> int64_t vp9_block_error_c ( const int16_t * coeff , const int16_t * dqcoeff , <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> 
3631,"<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) <S2SV_EndBug> ",<S2SV_ModStart> key_is_negative ( key <S2SV_ModEnd> 
3632,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , addr ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3633,"<S2SV_StartBug> void Huff_offsetReceive ( node_t * node , int * ch , byte * fin , int * offset ) { <S2SV_EndBug> <S2SV_StartBug> while ( node && node -> symbol == INTERNAL_NODE ) { <S2SV_EndBug> ","<S2SV_ModStart> , int maxoffset <S2SV_ModStart> if ( bloc >= maxoffset ) { * ch = 0 ; * offset = maxoffset + 1 ; return ; } "
3634,<S2SV_StartBug> bufsize = file -> size ; <S2SV_EndBug> ,"<S2SV_ModStart> MIN ( <S2SV_ModStart> , sizeof buf ) "
3635,<S2SV_StartBug> next_byte : <S2SV_EndBug> ,<S2SV_ModStart> if ( s -> pc - pc_start > 14 ) { goto illegal_op ; } 
3636,<S2SV_StartBug> return true ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else 
3637,"<S2SV_StartBug> if ( ! ( segment -> temporal_offset_entries = av_calloc ( segment -> nb_index_entries , sizeof ( * segment -> temporal_offset_entries ) ) ) || <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < segment -> nb_index_entries ; i ++ ) { <S2SV_EndBug> ",<S2SV_ModStart> segment -> nb_index_entries && length < 11 ) return AVERROR_INVALIDDATA ; if ( <S2SV_ModStart> if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; 
3638,<S2SV_StartBug> const float factor = 0.5 ; <S2SV_EndBug> <S2SV_StartBug> if ( rc -> av_per_frame_bandwidth < factor * number_blocks || <S2SV_EndBug> ,<S2SV_ModStart> 0.25 <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> 
3639,"<S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> number_threads = ( size_t ) GetMagickResourceLimit ( ThreadResource ) ; <S2SV_EndBug> <S2SV_StartBug> pixels = ( MagickPixelPacket * * ) AcquireQuantumMemory ( number_threads , <S2SV_EndBug> <S2SV_StartBug> ( void ) memset ( pixels , 0 , number_threads * sizeof ( * pixels ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug> ","<S2SV_ModStart> rows ; rows = MagickMax ( GetImageListLength ( images ) , <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> rows , <S2SV_ModEnd> <S2SV_ModStart> columns = images -> columns ; for ( next = images ; next != ( Image * ) NULL ; next = next -> next ) columns = MagickMax ( next -> columns , columns ) ; for ( i = 0 <S2SV_ModEnd> <S2SV_ModStart> rows <S2SV_ModEnd> "
3640,"<S2SV_StartBug> char * pathname = RUNTIME_PATH ""/lock/lxc/var/lib/lxc/"" ; <S2SV_EndBug> ","<S2SV_ModStart> ""/lxc/lock/var/lib/lxc/"" <S2SV_ModEnd> "
3641,"<S2SV_StartBug> result = send ( signal_fds [ 1 ] , & sig_on , sizeof ( sig_on ) , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3642,"<S2SV_StartBug> uint32_t off = offset , tmp , finish ; <S2SV_EndBug> <S2SV_StartBug> finish = fru -> size ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> memcpy ( frubuf , rsp -> data + 1 , tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tmp == 0 && off < finish ) { <S2SV_EndBug> ","<S2SV_ModStart> ; uint32_t tmp ; uint32_t finish ; uint32_t size_left_in_buffer <S2SV_ModEnd> <S2SV_ModStart> memset ( frubuf + fru -> size , 0 , length - fru -> size ) ; <S2SV_ModStart> length = finish - offset ; <S2SV_ModStart> size_left_in_buffer = length ; <S2SV_ModStart> if ( rsp -> data_len < 1 || tmp > rsp -> data_len - 1 || tmp > size_left_in_buffer ) { printf ( ""<S2SV_blank>Not<S2SV_blank>enough<S2SV_blank>buffer<S2SV_blank>size"" ) ; return - 1 ; } <S2SV_ModStart> size_left_in_buffer -= tmp ; "
3643,<S2SV_StartBug> if ( buffer ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3644,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> peer = NULL ; 
3645,<S2SV_StartBug> static uid_t uid_server = 0 ; <S2SV_EndBug> <S2SV_StartBug> uid_server = getuid ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( gid_cluster != 0 && gid_client != 0 ) { <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> uid_client != 0 ) { crm_trace ( ""Giving<S2SV_blank>access<S2SV_blank>to<S2SV_blank>group<S2SV_blank>%u"" , gid_cluster ) ; qb_ipcs_connection_auth_set ( c , - 1 <S2SV_ModEnd> "
3646,<S2SV_StartBug> if ( client -> type == USER_CLIENT ) <S2SV_EndBug> ,<S2SV_ModStart> && client -> data . user . fifo 
3647,"<S2SV_StartBug> stmt_ty s ; <S2SV_EndBug> <S2SV_StartBug> mod_ty res = NULL ; <S2SV_EndBug> <S2SV_StartBug> res = Module ( stmts , arena ) ; <S2SV_EndBug> <S2SV_StartBug> default : <S2SV_EndBug> ","<S2SV_ModStart> asdl_seq * type_ignores = NULL ; <S2SV_ModStart> ; asdl_seq * argtypes = NULL ; expr_ty ret , arg <S2SV_ModStart> ch = CHILD ( n , NCH ( n ) - 1 ) ; REQ ( ch , ENDMARKER ) ; num = NCH ( ch ) ; type_ignores = _Py_asdl_seq_new ( num , arena ) ; if ( ! type_ignores ) goto out ; for ( i = 0 ; i < num ; i ++ ) { type_ignore_ty ti = TypeIgnore ( LINENO ( CHILD ( ch , i ) ) , arena ) ; if ( ! ti ) goto out ; asdl_seq_SET ( type_ignores , i , ti ) ; } <S2SV_ModStart> , type_ignores <S2SV_ModStart> case func_type_input : n = CHILD ( n , 0 ) ; REQ ( n , func_type ) ; if ( TYPE ( CHILD ( n , 1 ) ) == typelist ) { ch = CHILD ( n , 1 ) ; num = 0 ; for ( i = 0 ; i < NCH ( ch ) ; i ++ ) { if ( TYPE ( CHILD ( ch , i ) ) == test ) { num ++ ; } } argtypes = _Py_asdl_seq_new ( num , arena ) ; if ( ! argtypes ) goto out ; j = 0 ; for ( i = 0 ; i < NCH ( ch ) ; i ++ ) { if ( TYPE ( CHILD ( ch , i ) ) == test ) { arg = ast_for_expr ( & c , CHILD ( ch , i ) ) ; if ( ! arg ) goto out ; asdl_seq_SET ( argtypes , j ++ , arg ) ; } } } else { argtypes = _Py_asdl_seq_new ( 0 , arena ) ; if ( ! argtypes ) goto out ; } ret = ast_for_expr ( & c , CHILD ( n , NCH ( n ) - 1 ) ) ; if ( ! ret ) goto out ; res = FunctionType ( argtypes , ret , arena ) ; break ; "
3648,"<S2SV_StartBug> uint8_t chipRevision ; <S2SV_EndBug> <S2SV_StartBug> vendorId = ( dm9000ReadReg ( DM9000_REG_VIDH ) << 8 ) | dm9000ReadReg ( DM9000_REG_VIDL ) ; <S2SV_EndBug> <S2SV_StartBug> productId = ( dm9000ReadReg ( DM9000_REG_PIDH ) << 8 ) | dm9000ReadReg ( DM9000_REG_PIDL ) ; <S2SV_EndBug> <S2SV_StartBug> chipRevision = dm9000ReadReg ( DM9000_REG_CHIPR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chipRevision != DM9000A_CHIP_REV && chipRevision != DM9000B_CHIP_REV ) <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_GPR , 0x00 ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_NCR , NCR_RST ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( dm9000ReadReg ( DM9000_REG_NCR ) & NCR_RST ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> dm9000WritePhyReg ( DM9000_PHY_REG_BMCR , BMCR_RST ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( dm9000ReadPhyReg ( DM9000_PHY_REG_BMCR ) & BMCR_RST ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> TRACE_INFO ( ""<S2SV_blank><S2SV_blank>CHIPR<S2SV_blank>=<S2SV_blank>0x%02"" PRIX8 ""\\r\\n"" , chipRevision ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_INFO ( ""<S2SV_blank><S2SV_blank>PHYIDR1<S2SV_blank>=<S2SV_blank>0x%04"" PRIX16 ""\\r\\n"" , dm9000ReadPhyReg ( DM9000_PHY_REG_PHYIDR1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_INFO ( ""<S2SV_blank><S2SV_blank>PHYIDR2<S2SV_blank>=<S2SV_blank>0x%04"" PRIX16 ""\\r\\n"" , dm9000ReadPhyReg ( DM9000_PHY_REG_PHYIDR2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_NCR , DM9000_LBK_PHY ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WritePhyReg ( DM9000_PHY_REG_BMCR , BMCR_LOOPBACK | BMCR_SPEED_SEL | BMCR_AN_EN | BMCR_DUPLEX_MODE ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_PAR0 + i , interface -> macAddr . b [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_MAR0 + i , 0x00 ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_MAR7 , 0x80 ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_IMR , IMR_PAR ) ; <S2SV_EndBug> ","<S2SV_ModStart> chipRev <S2SV_ModEnd> <S2SV_ModStart> DM9000_VIDH <S2SV_ModEnd> <S2SV_ModStart> DM9000_VIDL <S2SV_ModEnd> <S2SV_ModStart> DM9000_PIDH <S2SV_ModEnd> <S2SV_ModStart> DM9000_PIDL ) ; chipRev <S2SV_ModEnd> <S2SV_ModStart> DM9000_CHIPR <S2SV_ModEnd> <S2SV_ModStart> chipRev != DM9000_CHIPR_REV_A && chipRev != DM9000_CHIPR_REV_B <S2SV_ModEnd> <S2SV_ModStart> DM9000_GPR <S2SV_ModEnd> <S2SV_ModStart> DM9000_NCR , DM9000_NCR_RST <S2SV_ModEnd> <S2SV_ModStart> DM9000_NCR ) & DM9000_NCR_RST <S2SV_ModEnd> <S2SV_ModStart> DM9000_BMCR , DM9000_BMCR_RST <S2SV_ModEnd> <S2SV_ModStart> DM9000_BMCR ) & DM9000_BMCR_RST <S2SV_ModEnd> <S2SV_ModStart> chipRev <S2SV_ModEnd> <S2SV_ModStart> DM9000_PHYIDR1 <S2SV_ModEnd> <S2SV_ModStart> DM9000_PHYIDR2 <S2SV_ModEnd> <S2SV_ModStart> DM9000_NCR , DM9000_NCR_LBK_PHY <S2SV_ModEnd> <S2SV_ModStart> DM9000_BMCR , DM9000_BMCR_LOOPBACK | DM9000_BMCR_SPEED_SEL | DM9000_BMCR_AN_EN | DM9000_BMCR_DUPLEX_MODE <S2SV_ModEnd> <S2SV_ModStart> DM9000_PAR0 <S2SV_ModEnd> <S2SV_ModStart> DM9000_MAR0 <S2SV_ModEnd> <S2SV_ModStart> DM9000_MAR7 <S2SV_ModEnd> <S2SV_ModStart> DM9000_IMR , DM9000_IMR_PAR ) ; dm9000WriteReg ( DM9000_NSR , DM9000_NSR_WAKEST | DM9000_NSR_TX2END | DM9000_NSR_TX1END ) ; dm9000WriteReg ( DM9000_ISR , DM9000_ISR_LNKCHG | DM9000_ISR_UDRUN | DM9000_ISR_ROO | DM9000_ISR_ROS | DM9000_ISR_PT | DM9000_ISR_PR ) ; dm9000WriteReg ( DM9000_IMR , DM9000_IMR_PAR | DM9000_IMR_LNKCHGI | DM9000_IMR_PTI | DM9000_IMR_PRI ) ; dm9000WriteReg ( DM9000_RCR , DM9000_RCR_DIS_LONG | DM9000_RCR_DIS_CRC | DM9000_RCR_RXEN <S2SV_ModEnd> "
3649,<S2SV_StartBug> int64_t old_off = s -> off ; <S2SV_EndBug> <S2SV_StartBug> else if ( ( s -> filesize == - 1 && whence == SEEK_END ) ) <S2SV_EndBug> ,<S2SV_ModStart> uint64_t <S2SV_ModEnd> <S2SV_ModStart> UINT64_MAX <S2SV_ModEnd> 
3650,<S2SV_StartBug> vp9_coeff_probs_model * const probs = cm -> fc . coef_probs [ tx_size ] ; <S2SV_EndBug> ,<S2SV_ModStart> -> <S2SV_ModEnd> 
3651,"<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horDiff32 ( tif , cp0 , cc ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if ( ! <S2SV_ModStart> ) return 0 <S2SV_ModStart> return 1 ; 
3652,"<S2SV_StartBug> static void nfs_set_open_stateid_locked ( struct nfs4_state * state , nfs4_stateid * stateid , int open_flags ) <S2SV_EndBug> <S2SV_StartBug> switch ( open_flags ) { <S2SV_EndBug> ",<S2SV_ModStart> fmode_t fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> 
3653,<S2SV_StartBug> cf . can_id = 0 ; <S2SV_EndBug> <S2SV_StartBug> * ( u64 * ) ( & cf . data ) = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & cf , 0 , sizeof ( cf ) ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3654,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> g_free_not_null ( ircconn -> sasl_username ) ; g_free_not_null ( ircconn -> sasl_password ) ; 
3655,<S2SV_StartBug> sock -> sk -> sk_uid = iattr -> ia_uid ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( sock -> sk ) <S2SV_ModStart> else err = - ENOENT ; 
3656,<S2SV_StartBug> char * buffer = ( char * ) dlmalloc ( bytes + CHK_OVERHEAD_SIZE ) ; <S2SV_EndBug> ,<S2SV_ModStart> size_t size = bytes + CHK_OVERHEAD_SIZE ; if ( size < bytes ) { return NULL ; } uint8_t <S2SV_ModEnd> <S2SV_ModStart> uint8_t <S2SV_ModEnd> <S2SV_ModStart> size <S2SV_ModEnd> 
3657,"<S2SV_StartBug> if ( ! __archive_ppmd7_functions . Ppmd7_Alloc ( & rar -> ppmd7_context , <S2SV_EndBug> ","<S2SV_ModStart> rar -> dictionary_size == 0 ) { archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , ""Invalid<S2SV_blank>zero<S2SV_blank>dictionary<S2SV_blank>size"" ) ; return ( ARCHIVE_FATAL ) ; } if ( "
3658,<S2SV_StartBug> return code ; <S2SV_EndBug> ,"<S2SV_ModStart> { * status = ""DECODE_PA_FOR_USER"" ; return code ; } <S2SV_ModEnd> "
3659,"<S2SV_StartBug> # line 585 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> case 'O' : goto yy13 ; <S2SV_EndBug> <S2SV_StartBug> case 'R' : goto yy2 ; <S2SV_EndBug> <S2SV_StartBug> case 'S' : goto yy10 ; <S2SV_EndBug> <S2SV_StartBug> case 'a' : goto yy11 ; <S2SV_EndBug> <S2SV_StartBug> case 'b' : goto yy6 ; <S2SV_EndBug> <S2SV_StartBug> case 'd' : goto yy8 ; <S2SV_EndBug> <S2SV_StartBug> case 'i' : goto yy7 ; <S2SV_EndBug> <S2SV_StartBug> case 'r' : goto yy4 ; <S2SV_EndBug> <S2SV_StartBug> case 's' : goto yy9 ; <S2SV_EndBug> <S2SV_StartBug> case '}' : goto yy14 ; <S2SV_EndBug> <S2SV_StartBug> default : goto yy16 ; <S2SV_EndBug> <S2SV_StartBug> # line 962 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 646 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy89 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ';' ) goto yy87 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy83 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy77 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy53 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy46 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy39 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy32 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy25 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy17 ; <S2SV_EndBug> <S2SV_StartBug> yy14 : <S2SV_EndBug> <S2SV_StartBug> # line 956 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 695 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> goto yy20 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == '+' ) goto yy19 ; <S2SV_EndBug> <S2SV_StartBug> goto yy20 ; <S2SV_EndBug> <S2SV_StartBug> goto yy20 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych >= ';' ) goto yy18 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych != \'""\' ) goto yy18 ; <S2SV_EndBug> <S2SV_StartBug> # line 804 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> if ( * start == 'C' ) { <S2SV_EndBug> <S2SV_StartBug> len2 = len = parse_uiv ( start + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> * p = start + 2 ; <S2SV_EndBug> <S2SV_StartBug> # line 878 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> if ( ( YYLIMIT - YYCURSOR ) < 2 ) YYFILL ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( yych <= '9' ) goto yy27 ; <S2SV_EndBug> <S2SV_StartBug> # line 793 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> zend_long elements = parse_iv ( start + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> # line 959 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> if ( yych == '+' ) goto yy40 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych <= '9' ) goto yy41 ; <S2SV_EndBug> <S2SV_StartBug> # line 735 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1292 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 646 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> ZVAL_BOOL ( rval , parse_iv ( start + 2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1306 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 640 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> id = parse_iv ( start + 2 ) - 1 ; <S2SV_EndBug> <S2SV_StartBug> * p = YYCURSOR ; <S2SV_EndBug> <S2SV_StartBug> id = parse_iv ( start + 2 ) - 1 ; <S2SV_EndBug> <S2SV_StartBug> zval_ptr_dtor ( rval ) ; <S2SV_EndBug> <S2SV_StartBug> if ( Z_ISREF_P ( rval_ref ) ) { <S2SV_EndBug> <S2SV_StartBug> ZVAL_COPY ( rval , rval_ref ) ; <S2SV_EndBug> <S2SV_StartBug> ZVAL_NEW_REF ( rval_ref , rval_ref ) ; <S2SV_EndBug> <S2SV_StartBug> ZVAL_COPY ( rval , rval_ref ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1412 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> ","<S2SV_ModStart> 576 <S2SV_ModEnd> <S2SV_ModStart> yy4 <S2SV_ModEnd> <S2SV_ModStart> yy6 <S2SV_ModEnd> <S2SV_ModStart> yy7 <S2SV_ModEnd> <S2SV_ModStart> yy8 <S2SV_ModEnd> <S2SV_ModStart> yy9 <S2SV_ModEnd> <S2SV_ModStart> yy10 <S2SV_ModEnd> <S2SV_ModStart> yy11 <S2SV_ModEnd> <S2SV_ModStart> yy13 <S2SV_ModEnd> <S2SV_ModStart> yy14 <S2SV_ModEnd> <S2SV_ModStart> yy15 <S2SV_ModEnd> <S2SV_ModStart> yy2 ; } yy2 : ++ YYCURSOR <S2SV_ModEnd> <S2SV_ModStart> 951 <S2SV_ModEnd> <S2SV_ModStart> 636 <S2SV_ModEnd> <S2SV_ModStart> yy17 <S2SV_ModEnd> <S2SV_ModStart> yy19 <S2SV_ModEnd> <S2SV_ModStart> yy21 <S2SV_ModEnd> <S2SV_ModStart> yy22 <S2SV_ModEnd> <S2SV_ModStart> yy23 <S2SV_ModEnd> <S2SV_ModStart> yy24 <S2SV_ModEnd> <S2SV_ModStart> yy25 <S2SV_ModEnd> <S2SV_ModStart> yy26 <S2SV_ModEnd> <S2SV_ModStart> yy27 <S2SV_ModEnd> <S2SV_ModStart> yy28 <S2SV_ModEnd> <S2SV_ModStart> : yych = * ( YYMARKER = ++ YYCURSOR ) ; if ( yych == ':' ) goto yy29 ; goto yy3 ; yy15 <S2SV_ModStart> 945 <S2SV_ModEnd> <S2SV_ModStart> 689 ""ext/standard/var_unserializer.c"" <S2SV_ModEnd> <S2SV_ModStart> yy31 <S2SV_ModEnd> <S2SV_ModStart> yy30 ; yy18 : YYCURSOR = YYMARKER ; goto yy3 ; yy19 : ++ YYCURSOR ; # line 629 ""ext/standard/var_unserializer.re"" { * p = YYCURSOR ; ZVAL_NULL ( rval ) ; return 1 ; } # line 707 ""ext/standard/var_unserializer.c"" yy21 : yych = * ++ YYCURSOR ; if ( yych <= ',' ) { if ( yych == '+' ) goto yy33 ; goto yy18 ; } else { if ( yych <= '-' ) goto yy33 ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy34 ; goto yy18 ; } yy22 : yych = * ++ YYCURSOR ; if ( yych == '+' ) goto yy36 ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy37 ; goto yy18 ; yy23 : yych = * ++ YYCURSOR ; if ( yych == '+' ) goto yy39 ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy40 ; goto yy18 ; yy24 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '1' ) goto yy42 ; goto yy18 ; yy25 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) { if ( yych <= ',' ) { if ( yych == '+' ) goto yy43 ; goto yy18 ; } else { if ( yych <= '-' ) goto yy44 ; if ( yych <= '.' ) goto yy45 ; goto yy18 ; } } else { if ( yych <= 'I' ) { if ( yych <= '9' ) goto yy46 ; if ( yych <= 'H' ) goto yy18 ; goto yy48 ; } else { if ( yych == 'N' ) goto yy49 ; goto yy18 ; } } yy26 : yych = * ++ YYCURSOR ; if ( yych <= ',' ) { if ( yych == '+' ) goto yy50 ; goto yy18 ; } else { if ( yych <= '-' ) goto yy50 ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy51 ; goto yy18 ; } yy27 : yych = * ++ YYCURSOR ; if ( yych <= ',' ) { if ( yych == '+' ) goto yy53 ; goto yy18 ; } else { if ( yych <= '-' ) goto yy53 ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy54 ; goto yy18 ; } yy28 : yych = * ++ YYCURSOR ; if ( yych <= ',' ) { if ( yych == '+' ) goto yy56 ; goto yy18 ; } else { if ( yych <= '-' ) goto yy56 ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy57 ; goto yy18 ; } yy29 : yych = * ++ YYCURSOR ; if ( yych == '+' ) goto yy59 ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy60 ; goto yy18 ; yy30 <S2SV_ModEnd> <S2SV_ModStart> yy31 ; } goto yy18 ; yy31 <S2SV_ModEnd> <S2SV_ModStart> yy31 <S2SV_ModEnd> <S2SV_ModStart> <= ':' ) goto yy62 ; goto yy18 ; yy33 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych >= ':' ) goto yy18 ; yy34 : ++ YYCURSOR ; if ( YYLIMIT <= YYCURSOR ) YYFILL ( 1 ) ; yych = * YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy34 ; if ( yych == <S2SV_ModEnd> <S2SV_ModStart> yy63 ; goto yy18 ; yy36 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych >= ':' ) goto yy18 ; yy37 : ++ YYCURSOR ; if ( ( YYLIMIT - YYCURSOR ) < 2 ) YYFILL ( 2 ) ; yych = * YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy37 ; if ( yych <= ':' ) goto yy65 ; goto yy18 ; yy39 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych >= ':' ) goto yy18 ; yy40 : ++ YYCURSOR ; if ( ( YYLIMIT - YYCURSOR ) < 2 ) YYFILL ( 2 ) ; yych = * YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy40 ; if ( yych <= ':' ) goto yy66 ; goto yy18 ; yy42 : yych = * ++ YYCURSOR ; if ( yych == ';' ) goto yy67 ; goto yy18 ; yy43 : yych = * ++ YYCURSOR ; if ( yych == '.' ) goto yy45 ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy46 ; goto yy18 ; yy44 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) { <S2SV_ModEnd> <S2SV_ModStart> '.' ) goto yy18 ; } else { if ( yych <= '9' ) goto yy46 ; if ( yych == 'I' ) goto yy48 ; goto yy18 ; } yy45 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy69 ; goto yy18 ; yy46 : ++ YYCURSOR ; if ( ( YYLIMIT - YYCURSOR ) < 4 ) YYFILL ( 4 ) ; yych = * YYCURSOR ; if ( yych <= ':' ) { if ( yych <= '.' ) { if ( yych <= '-' ) goto yy18 ; goto yy69 ; } else { if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy46 ; goto yy18 ; } } else { if ( yych <= 'E' ) { if ( yych <= ';' ) goto yy71 ; if ( yych <= 'D' ) goto yy18 ; goto yy73 ; } else { if ( yych == 'e' ) goto yy73 ; goto yy18 ; } } yy48 : yych = * ++ YYCURSOR ; if ( yych == 'N' ) goto yy74 ; goto yy18 ; yy49 : yych = * ++ YYCURSOR ; if ( yych == 'A' ) goto yy75 ; goto yy18 ; yy50 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych >= ':' ) goto yy18 ; yy51 : ++ YYCURSOR ; if ( YYLIMIT <= YYCURSOR ) YYFILL ( 1 ) ; yych = * YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy51 ; if ( yych == ';' ) goto yy76 ; goto yy18 ; yy53 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych >= ':' ) goto yy18 ; yy54 : ++ YYCURSOR ; if ( ( YYLIMIT - YYCURSOR ) < 2 ) YYFILL ( 2 ) ; yych = * YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy54 ; if ( yych <= ':' ) goto yy78 ; goto yy18 ; yy56 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych >= ':' ) goto yy18 ; yy57 : ++ YYCURSOR ; if ( YYLIMIT <= YYCURSOR ) YYFILL ( 1 ) ; yych = * YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy57 ; if ( yych == ';' ) goto yy79 ; goto yy18 ; yy59 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych >= ':' ) goto yy18 ; yy60 : ++ YYCURSOR ; if ( ( YYLIMIT - YYCURSOR ) < 2 ) YYFILL ( 2 ) ; yych = * YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy60 ; if ( yych <= ':' ) goto yy81 ; goto yy18 ; yy62 : yych = * ++ YYCURSOR ; if ( yych == <S2SV_ModStart> yy82 ; goto yy18 ; yy63 : <S2SV_ModEnd> <S2SV_ModStart> 580 ""ext/standard/var_unserializer.re"" { zend_long id ; * p = YYCURSOR <S2SV_ModEnd> <S2SV_ModStart> id = parse_iv <S2SV_ModEnd> <S2SV_ModStart> - 1 ; if ( id == - 1 || ( rval_ref = var_access ( var_hash , id ) ) == NULL ) { return 0 ; } if ( Z_ISUNDEF_P ( rval_ref ) || ( Z_ISREF_P ( rval_ref ) && Z_ISUNDEF_P ( Z_REFVAL_P ( rval_ref ) ) ) ) { return 0 ; } if ( Z_ISREF_P ( rval_ref ) ) { ZVAL_COPY ( rval , rval_ref ) ; } else { ZVAL_NEW_REF ( rval_ref , rval_ref ) ; ZVAL_COPY ( rval , rval_ref ) ; } return 1 ; } # line 982 ""ext/standard/var_unserializer.c"" yy65 : yych = * ++ YYCURSOR ; if ( yych == \'""\' ) goto yy84 ; goto yy18 ; yy66 : yych = * ++ YYCURSOR ; if ( yych == '{' ) goto yy86 ; goto yy18 ; yy67 : ++ YYCURSOR ; # line 635 ""ext/standard/var_unserializer.re"" <S2SV_ModEnd> <S2SV_ModStart> YYCURSOR ; ZVAL_BOOL ( rval , parse_iv ( <S2SV_ModStart> ) ) ; return 1 <S2SV_ModEnd> <S2SV_ModStart> 999 ""ext/standard/var_unserializer.c"" yy69 <S2SV_ModEnd> <S2SV_ModStart> 4 <S2SV_ModEnd> <S2SV_ModStart> 4 ) ; yych = * YYCURSOR ; if ( yych <= ';' ) { <S2SV_ModEnd> <S2SV_ModStart> yy69 ; if ( yych <= ':' ) goto yy18 ; } else { if ( yych <= 'E' ) { if ( yych <= 'D' ) goto yy18 ; goto yy73 ; } else { if ( yych == 'e' ) goto yy73 ; goto yy18 ; } } yy71 : <S2SV_ModEnd> <S2SV_ModStart> 683 ""ext/standard/var_unserializer.re"" { # if SIZEOF_ZEND_LONG == 4 use_double : # endif * p = YYCURSOR ; ZVAL_DOUBLE ( rval , zend_strtod ( ( const char * ) <S2SV_ModEnd> <S2SV_ModStart> , NULL ) ) ; return 1 <S2SV_ModEnd> <S2SV_ModStart> 1028 ""ext/standard/var_unserializer.c"" yy73 : yych = * ++ YYCURSOR ; if ( yych <= ',' ) { <S2SV_ModEnd> <S2SV_ModStart> yy88 ; goto yy18 ; } else { if ( yych <= '-' ) goto yy88 <S2SV_ModEnd> <S2SV_ModStart> yy89 ; goto yy18 ; } yy74 : yych = * ++ YYCURSOR ; if ( yych == 'F' ) goto yy91 ; goto yy18 ; yy75 : yych = * ++ YYCURSOR ; if ( yych == 'N' ) goto yy91 ; goto yy18 ; yy76 : <S2SV_ModEnd> <S2SV_ModStart> 641 <S2SV_ModEnd> <S2SV_ModStart> 1076 ""ext/standard/var_unserializer.c"" yy78 : yych = * ++ YYCURSOR ; if ( yych == \'""\' ) goto yy92 ; goto yy18 ; yy79 : <S2SV_ModEnd> <S2SV_ModStart> 605 ""ext/standard/var_unserializer.re"" { zend_long id ; <S2SV_ModEnd> <S2SV_ModStart> if ( ! var_hash ) return 0 ; id = <S2SV_ModEnd> <S2SV_ModStart> - 1 ; if ( id == - 1 || ( rval_ref = var_access ( var_hash , id ) ) == NULL ) { return 0 ; } if ( rval_ref == rval ) { return 0 ; } if ( Z_ISUNDEF_P ( rval_ref ) || ( Z_ISREF_P ( rval_ref ) && Z_ISUNDEF_P ( Z_REFVAL_P ( rval_ref ) ) ) ) { return 0 ; } ZVAL_COPY ( rval , rval_ref <S2SV_ModStart> 1107 ""ext/standard/var_unserializer.c"" yy81 : yych = * ++ YYCURSOR ; if ( yych == \'""\' ) goto yy94 ; goto yy18 ; yy82 <S2SV_ModEnd> <S2SV_ModStart> 793 ""ext/standard/var_unserializer.re"" { size_t len , len2 , len3 , maxlen ; zend_long elements ; char * str ; zend_string * class_name ; zend_class_entry * ce ; int incomplete_class = 0 ; int custom_object = 0 ; zval user_func ; zval retval ; zval args [ 1 ] <S2SV_ModEnd> <S2SV_ModStart> if ( * start == 'C' ) { custom_object = 1 ; } len2 = len = parse_uiv <S2SV_ModEnd> <S2SV_ModStart> ; maxlen = max - YYCURSOR ; if ( maxlen < len || len == 0 ) { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; return 0 ; } str = ( char * ) YYCURSOR ; YYCURSOR += len ; if ( * ( YYCURSOR ) != \'""\' ) { * p = YYCURSOR ; return 0 ; } if ( * ( YYCURSOR + 1 ) != ':' ) { * p = YYCURSOR + 1 ; return 0 ; } len3 = strspn ( str , ""0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\177\\200\\201\\202\\203\\204\\205\\206\\207\\210\\211\\212\\213\\214\\215\\216\\217\\220\\221\\222\\223\\224\\225\\226\\227\\230\\231\\232\\233\\234\\235\\236\\237\\240\\241\\242\\243\\244\\245\\246\\247\\250\\251\\252\\253\\254\\255\\256\\257\\260\\261\\262\\263\\264\\265\\266\\267\\270\\271\\272\\273\\274\\275\\276\\277\\300\\301\\302\\303\\304\\305\\306\\307\\310\\311\\312\\313\\314\\315\\316\\317\\320\\321\\322\\323\\324\\325\\326\\327\\330\\331\\332\\333\\334\\335\\336\\337\\340\\341\\342\\343\\344\\345\\346\\347\\350\\351\\352\\353\\354\\355\\356\\357\\360\\361\\362\\363\\364\\365\\366\\367\\370\\371\\372\\373\\374\\375\\376\\377\\\\"" ) ; if ( len3 != len ) { * p = YYCURSOR + len3 - len ; return 0 ; } class_name = zend_string_init ( str , len , 0 ) ; do { if ( ! unserialize_allowed_class ( class_name , classes ) ) { incomplete_class = 1 ; ce = PHP_IC_ENTRY ; break ; } BG ( serialize_lock ) ++ ; ce = zend_lookup_class ( class_name ) ; if ( ce ) { BG ( serialize_lock ) -- ; if ( EG ( exception ) ) { zend_string_release ( class_name ) ; return 0 ; } break ; } BG ( serialize_lock ) -- ; if ( EG ( exception ) ) { zend_string_release ( class_name ) ; return 0 ; } if ( ( PG ( unserialize_callback_func ) == NULL ) || ( PG ( unserialize_callback_func ) [ 0 ] == '\\0' ) ) { incomplete_class = 1 ; ce = PHP_IC_ENTRY ; break ; } ZVAL_STRING ( & user_func , PG ( unserialize_callback_func ) ) ; ZVAL_STR_COPY ( & args [ 0 ] , class_name ) ; BG ( serialize_lock ) ++ ; if ( call_user_function_ex ( CG ( function_table ) , NULL , & user_func , & retval , 1 , args , 0 , NULL ) != SUCCESS ) { BG ( serialize_lock ) -- ; if ( EG ( exception ) ) { zend_string_release ( class_name ) ; zval_ptr_dtor ( & user_func ) ; zval_ptr_dtor ( & args [ 0 ] ) ; return 0 ; } php_error_docref ( NULL , E_WARNING , ""defined<S2SV_blank>(%s)<S2SV_blank>but<S2SV_blank>not<S2SV_blank>found"" , Z_STRVAL ( user_func ) ) ; incomplete_class = 1 ; ce = PHP_IC_ENTRY ; zval_ptr_dtor ( & user_func ) ; zval_ptr_dtor ( & args [ 0 ] ) ; break ; } BG ( serialize_lock ) -- ; zval_ptr_dtor ( & retval ) ; if ( EG ( exception ) ) { zend_string_release ( class_name ) ; zval_ptr_dtor ( & user_func ) ; zval_ptr_dtor ( & args [ 0 ] ) ; return 0 ; } BG ( serialize_lock ) ++ ; if ( ( ce = zend_lookup_class ( class_name ) ) == NULL ) { php_error_docref ( NULL , E_WARNING , ""Function<S2SV_blank>%s()<S2SV_blank>hasn\'t<S2SV_blank>defined<S2SV_blank>the<S2SV_blank>class<S2SV_blank>it<S2SV_blank>was<S2SV_blank>called<S2SV_blank>for"" , Z_STRVAL ( user_func ) ) ; incomplete_class = 1 ; ce = PHP_IC_ENTRY ; } BG ( serialize_lock ) -- ; zval_ptr_dtor ( & user_func ) ; zval_ptr_dtor ( & args [ 0 ] ) ; break ; } while ( 1 ) ; * p = YYCURSOR ; if ( custom_object ) { int ret ; ret = object_custom ( UNSERIALIZE_PASSTHRU , ce ) ; if ( ret && incomplete_class ) { php_store_class_name ( rval , ZSTR_VAL ( class_name ) , len2 ) ; } zend_string_release ( class_name ) ; return ret ; } elements = object_common1 ( UNSERIALIZE_PASSTHRU , ce ) ; if ( elements < 0 ) { zend_string_release ( class_name ) ; return 0 ; } if ( incomplete_class ) { php_store_class_name ( rval , ZSTR_VAL ( class_name ) , len2 ) ; } zend_string_release ( class_name ) ; return object_common2 ( UNSERIALIZE_PASSTHRU , elements ) ; } # line 1266 ""ext/standard/var_unserializer.c"" yy84 : ++ YYCURSOR ; # line 724 ""ext/standard/var_unserializer.re"" { size_t len , maxlen ; zend_string * str ; len = parse_uiv ( start + 2 ) ; maxlen = max - YYCURSOR ; if ( maxlen < len ) { * p = start + 2 ; return 0 ; } if ( ( str = unserialize_str ( & YYCURSOR , len , maxlen ) ) == NULL ) { return 0 ; } if ( * ( YYCURSOR ) != \'""\' ) { zend_string_free ( str ) ; * p = YYCURSOR ; return 0 ; } if ( * ( YYCURSOR + 1 ) != ';' ) { efree ( str ) ; * p = YYCURSOR + 1 ; <S2SV_ModEnd> <S2SV_ModStart> YYCURSOR += 2 ; * p = YYCURSOR ; ZVAL_STR ( rval , str <S2SV_ModEnd> <S2SV_ModStart> # line 1303 ""ext/standard/var_unserializer.c"" yy86 : ++ YYCURSOR ; # line 758 ""ext/standard/var_unserializer.re"" { zend_long elements = parse_iv ( start + 2 ) ; * p = YYCURSOR ; if ( ! var_hash ) return 0 ; if ( elements < 0 || elements >= HT_MAX_SIZE ) { return 0 ; } array_init_size <S2SV_ModEnd> <S2SV_ModStart> elements ) ; if ( elements ) { zend_hash_real_init ( Z_ARRVAL_P ( rval ) , 0 ) ; } if ( ! process_nested_data ( UNSERIALIZE_PASSTHRU , Z_ARRVAL_P ( rval ) , elements , 0 ) ) { return 0 ; } return finish_nested_data ( UNSERIALIZE_PASSTHRU ) ; } # line 1330 ""ext/standard/var_unserializer.c"" yy88 : yych = * ++ YYCURSOR ; if ( yych <= ',' ) { if ( yych == '+' ) goto yy96 ; goto yy18 <S2SV_ModEnd> <S2SV_ModStart> if ( yych <= '-' ) goto yy96 ; if ( yych <= '/' ) goto yy18 ; if ( yych >= ':' ) goto yy18 ; } yy89 : ++ YYCURSOR ; if ( YYLIMIT <= YYCURSOR ) YYFILL ( 1 ) ; yych = * YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy89 ; if ( yych == ';' ) goto yy71 ; goto yy18 ; yy91 : yych = * ++ YYCURSOR ; if ( yych == ';' ) goto yy97 ; goto yy18 ; yy92 : ++ YYCURSOR ; # line 782 ""ext/standard/var_unserializer.re"" { zend_long elements ; if ( ! var_hash ) return 0 ; elements = object_common1 ( UNSERIALIZE_PASSTHRU , ZEND_STANDARD_CLASS_DEF_PTR ) ; if ( elements < 0 || elements >= HT_MAX_SIZE ) { return 0 ; } return object_common2 ( UNSERIALIZE_PASSTHRU , elements ) ; } # line 1366 ""ext/standard/var_unserializer.c"" yy94 : ++ YYCURSOR ; # line 692 ""ext/standard/var_unserializer.re"" { size_t len , maxlen ; char * str ; len = parse_uiv ( start + 2 ) ; maxlen = max - YYCURSOR ; if ( maxlen < len ) { * p = start + 2 ; return 0 ; } str = ( char * ) YYCURSOR ; YYCURSOR += len ; if ( * ( YYCURSOR ) != \'""\' ) { * p = YYCURSOR ; return 0 ; } if ( * ( YYCURSOR + 1 ) != ';' ) { * p = YYCURSOR + 1 ; return 0 ; } YYCURSOR += 2 ; * p = YYCURSOR ; ZVAL_STRINGL <S2SV_ModEnd> <S2SV_ModStart> str , len ) ; <S2SV_ModEnd> <S2SV_ModStart> 1401 ""ext/standard/var_unserializer.c"" yy96 : yych = * ++ YYCURSOR ; if ( yych <= '/' ) goto yy18 ; if ( yych <= '9' ) goto yy89 ; goto yy18 ; yy97 : ++ YYCURSOR ; # line 667 ""ext/standard/var_unserializer.re"" { * p = YYCURSOR ; if ( ! strncmp ( ( char * ) start + 2 , ""NAN"" , 3 ) ) { ZVAL_DOUBLE ( rval , php_get_nan ( ) ) ; } else if ( ! strncmp ( ( char * ) start + 2 , ""INF"" , 3 ) ) { ZVAL_DOUBLE ( rval , php_get_inf ( ) ) ; } else if ( ! strncmp ( ( char * ) start + 2 , ""-INF"" , 4 ) ) { ZVAL_DOUBLE ( rval , - php_get_inf ( ) ) ; } else { ZVAL_NULL ( rval ) ; } return 1 ; } # line 1425 ""ext/standard/var_unserializer.c"" } # line 953 ""ext/standard/var_unserializer.re"" return <S2SV_ModEnd> "
3660,<S2SV_StartBug> if ( ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) || <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3661,"<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> gossip_err ( ""%s:<S2SV_blank>posix_acl_equiv_mode<S2SV_blank>err:<S2SV_blank>%d\\n"" , <S2SV_EndBug> <S2SV_StartBug> if ( error == 0 ) <S2SV_EndBug> ","<S2SV_ModStart> ; error = posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( error <S2SV_ModEnd> <S2SV_ModStart> ""%s:<S2SV_blank>posix_acl_update_mode<S2SV_blank>err:<S2SV_blank>%d\\n"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3662,"<S2SV_StartBug> FILE * file = fopen ( dump_file , ""w"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> fopen_safe <S2SV_ModEnd> 
3663,"<S2SV_StartBug> uid_eq ( root_uid , current_uid ( ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( gid_eq ( root_gid , current_gid ( ) ) ) { <S2SV_EndBug> ",<S2SV_ModStart> current_euid <S2SV_ModEnd> <S2SV_ModStart> in_egroup_p ( root_gid <S2SV_ModEnd> 
3664,<S2SV_StartBug> # ifdef KEY_DEBUGGING <S2SV_EndBug> ,<S2SV_ModStart> if ( flags & KEY_ALLOC_UID_KEYRING ) key -> flags |= 1 << KEY_FLAG_UID_KEYRING ; 
3665,"<S2SV_StartBug> int64_t vp9_rd_pick_inter_mode_sub8x8 ( VP9_COMP * cpi , MACROBLOCK * x , <S2SV_EndBug> <S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int * returnrate , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * xd = & x -> e_mbd ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> const struct segmentation * seg = & cm -> seg ; <S2SV_EndBug> <S2SV_StartBug> int64_t best_tx_rd [ TX_MODES ] ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO best_mbmode = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob comp_mode_p ; <S2SV_EndBug> <S2SV_StartBug> int rate_uv_intra [ TX_SIZES ] , rate_uv_tokenonly [ TX_SIZES ] ; <S2SV_EndBug> <S2SV_StartBug> int64_t dist_uv [ TX_SIZES ] ; <S2SV_EndBug> <S2SV_StartBug> int skip_uv [ TX_SIZES ] ; <S2SV_EndBug> <S2SV_StartBug> int intra_cost_penalty = 20 * vp9_dc_quant ( cm -> base_qindex , cm -> y_dc_delta_q ) ; <S2SV_EndBug> <S2SV_StartBug> int ref_frame_mask = 0 ; <S2SV_EndBug> <S2SV_StartBug> x -> skip_encode = cpi -> sf . skip_encode_frame && x -> q_index < QIDX_SKIP_THRESH ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( x -> zcoeff_blk [ TX_4X4 ] , 0 , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> estimate_ref_frame_costs ( cpi , segment_id , ref_costs_single , ref_costs_comp , <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < TX_MODES ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> best_tx_rd [ i ] = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> * returnrate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> vp9_setup_buffer_inter ( cpi , x , tile , <S2SV_EndBug> <S2SV_StartBug> frame_mv [ NEWMV ] [ ref_frame ] . as_int = INVALID_MV ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> for ( mode_index = 0 ; mode_index < MAX_REFS ; ++ mode_index ) { <S2SV_EndBug> <S2SV_StartBug> int64_t tx_cache [ TX_MODES ] ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < TX_MODES ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> ref_frame = vp9_ref_order [ mode_index ] . ref_frame [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> second_ref_frame = vp9_ref_order [ mode_index ] . ref_frame [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( mode_index > 2 && cpi -> sf . mode_skip_start < MAX_MODES ) { <S2SV_EndBug> <S2SV_StartBug> if ( mode_index == 3 ) { <S2SV_EndBug> <S2SV_StartBug> switch ( vp9_ref_order [ best_mode_index ] . ref_frame [ 0 ] ) { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask = 0 ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask = 0x0010 ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask = 0x0008 ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask = 0x0000 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( mode_skip_mask & ( 1 << mode_index ) ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ( ( int64_t ) cpi -> rd_thresh_sub8x8 [ segment_id ] [ bsize ] [ mode_index ] * <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_thresh_freq_sub8x8 [ bsize ] [ mode_index ] >> 5 ) ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( second_ref_frame > INTRA_FRAME ) && <S2SV_EndBug> <S2SV_StartBug> mbmi -> ref_frame [ 0 ] = ref_frame ; <S2SV_EndBug> <S2SV_StartBug> comp_pred = second_ref_frame > INTRA_FRAME ; <S2SV_EndBug> <S2SV_StartBug> set_ref_ptrs ( cm , xd , ref_frame , second_ref_frame ) ; <S2SV_EndBug> <S2SV_StartBug> if ( comp_pred ) { <S2SV_EndBug> <S2SV_StartBug> if ( vp9_segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) && <S2SV_EndBug> <S2SV_StartBug> mbmi -> tx_size = TX_4X4 ; <S2SV_EndBug> <S2SV_StartBug> if ( rate_uv_intra [ TX_4X4 ] == INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> choose_intra_uv_mode ( cpi , ctx , bsize , TX_4X4 , <S2SV_EndBug> <S2SV_StartBug> & rate_uv_intra [ TX_4X4 ] , <S2SV_EndBug> <S2SV_StartBug> & rate_uv_tokenonly [ TX_4X4 ] , <S2SV_EndBug> <S2SV_StartBug> & dist_uv [ TX_4X4 ] , & skip_uv [ TX_4X4 ] , <S2SV_EndBug> <S2SV_StartBug> & mode_uv [ TX_4X4 ] ) ; <S2SV_EndBug> <S2SV_StartBug> rate2 += rate_uv_intra [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> rate_uv = rate_uv_tokenonly [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> distortion2 += dist_uv [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> distortion_uv = dist_uv [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> mbmi -> uv_mode = mode_uv [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> & mbmi -> ref_mvs [ second_ref_frame ] [ 0 ] : NULL ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_thresh_sub8x8 [ segment_id ] [ bsize ] [ THR_LAST ] : <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_thresh_sub8x8 [ segment_id ] [ bsize ] [ THR_ALTR ] ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_thresh_sub8x8 [ segment_id ] [ bsize ] [ THR_GOLD ] : this_rd_thresh ; <S2SV_EndBug> <S2SV_StartBug> xd -> mi [ 0 ] -> mbmi . tx_size = TX_4X4 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ i ] = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> cpi -> sf . disable_filter_search_var_thresh ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> sf . adaptive_pred_interp_filter == 1 && <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> sf . adaptive_pred_interp_filter == 2 ) { <S2SV_EndBug> <S2SV_StartBug> mbmi -> interp_filter = switchable_filter_index ; <S2SV_EndBug> <S2SV_StartBug> tmp_rd = rd_pick_best_mbsegmentation ( cpi , x , tile , <S2SV_EndBug> <S2SV_StartBug> rs = vp9_get_switchable_rate ( x ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ switchable_filter_index ] = tmp_rd ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] = <S2SV_EndBug> <S2SV_StartBug> MIN ( cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] , <S2SV_EndBug> <S2SV_StartBug> cpi -> mask_filter_rd = MAX ( cpi -> mask_filter_rd , tmp_rd ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> sf . use_rd_breakout && <S2SV_EndBug> <S2SV_StartBug> tmp_rd = rd_pick_best_mbsegmentation ( cpi , x , tile , <S2SV_EndBug> <S2SV_StartBug> rate2 += vp9_get_switchable_rate ( x ) ; <S2SV_EndBug> <S2SV_StartBug> super_block_uvrd ( cpi , x , & rate_uv , & distortion_uv , & uv_skippable , <S2SV_EndBug> <S2SV_StartBug> & uv_sse , BLOCK_8X8 , tmp_best_rdu ) ; <S2SV_EndBug> <S2SV_StartBug> tx_cache [ ONLY_4X4 ] = RDCOST ( x -> rdmult , x -> rddiv , rate2 , distortion2 ) ; <S2SV_EndBug> <S2SV_StartBug> const int mb_skip_allowed = ! vp9_segfeature_active ( seg , segment_id , <S2SV_EndBug> <S2SV_StartBug> } else if ( mb_skip_allowed ) { <S2SV_EndBug> <S2SV_StartBug> this_rd = RDCOST ( x -> rdmult , x -> rddiv , rate2 , distortion2 ) ; <S2SV_EndBug> <S2SV_StartBug> best_mode_index = mode_index ; <S2SV_EndBug> <S2SV_StartBug> * returnrate = rate2 ; <S2SV_EndBug> <S2SV_StartBug> * returndistortion = distortion2 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> select_txfm_size ) <S2SV_EndBug> <S2SV_StartBug> swap_block_ptr ( x , ctx , max_plane ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( ctx -> zcoeff_blk , x -> zcoeff_blk [ mbmi -> tx_size ] , <S2SV_EndBug> <S2SV_StartBug> sizeof ( uint8_t ) * ctx -> num_4x4_blk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( cpi -> sf . mode_search_skip_flags & FLAG_EARLY_TERMINATE ) && <S2SV_EndBug> <S2SV_StartBug> ( mode_index > MIN_EARLY_TERM_INDEX ) ) { <S2SV_EndBug> <S2SV_StartBug> const int qstep = xd -> plane [ 0 ] . dequant [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> int scale = 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( second_ref_frame <= INTRA_FRAME && <S2SV_EndBug> <S2SV_StartBug> single_rd < best_pred_rd [ SINGLE_REFERENCE ] ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( second_ref_frame > INTRA_FRAME && <S2SV_EndBug> <S2SV_StartBug> single_rd < best_pred_rd [ COMPOUND_REFERENCE ] ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> int64_t ref = cpi -> rd_filter_cache [ cm -> interp_filter == SWITCHABLE ? <S2SV_EndBug> <S2SV_StartBug> else if ( cpi -> rd_filter_cache [ i ] == INT64_MAX ) <S2SV_EndBug> <S2SV_StartBug> adj_rd = cpi -> mask_filter_rd - ref + 10 ; <S2SV_EndBug> <S2SV_StartBug> adj_rd = cpi -> rd_filter_cache [ i ] - ref ; <S2SV_EndBug> <S2SV_StartBug> best_filter_rd [ i ] = MIN ( best_filter_rd [ i ] , adj_rd ) ; <S2SV_EndBug> <S2SV_StartBug> if ( best_rd >= best_rd_so_far ) <S2SV_EndBug> <S2SV_StartBug> if ( vp9_ref_order [ best_mode_index ] . ref_frame [ 0 ] == INTRA_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> TX_SIZE uv_tx_size ; <S2SV_EndBug> <S2SV_StartBug> uv_tx_size = get_uv_tx_size ( mbmi ) ; <S2SV_EndBug> <S2SV_StartBug> rd_pick_intra_sbuv_mode ( cpi , x , ctx , & rate_uv_intra [ uv_tx_size ] , <S2SV_EndBug> <S2SV_StartBug> & rate_uv_tokenonly [ uv_tx_size ] , <S2SV_EndBug> <S2SV_StartBug> & dist_uv [ uv_tx_size ] , <S2SV_EndBug> <S2SV_StartBug> & skip_uv [ uv_tx_size ] , <S2SV_EndBug> <S2SV_StartBug> BLOCK_8X8 , uv_tx_size ) ; <S2SV_EndBug> <S2SV_StartBug> if ( best_rd == INT64_MAX && bsize < BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> * returndistortion = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> return best_rd ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . adaptive_rd_thresh ) { <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & xd -> mi [ 0 ] -> bmi [ i ] , & best_bmodes [ i ] , sizeof ( b_mode_info ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> skip ) { <S2SV_EndBug> <S2SV_StartBug> store_coding_context ( x , ctx , best_mode_index , <S2SV_EndBug> <S2SV_StartBug> best_pred_diff , best_tx_diff , best_filter_diff ) ; <S2SV_EndBug> ","<S2SV_ModStart> void <S2SV_ModEnd> <S2SV_ModStart> TileDataEnc * tile_data , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> RD_COST * rd_cost <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> ; RD_OPT * const rd_opt = & cpi -> rd ; SPEED_FEATURES * const sf = & cpi -> sf <S2SV_ModStart> const <S2SV_ModStart> const <S2SV_ModStart> const <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; int ref_index , best_ref_index <S2SV_ModEnd> <S2SV_ModStart> vpx_prob comp_mode_p <S2SV_ModEnd> <S2SV_ModStart> , rate_uv_tokenonly <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; PREDICTION_MODE mode_uv = DC_PRED ; const <S2SV_ModEnd> <S2SV_ModStart> vp9_get_intra_cost_penalty ( <S2SV_ModEnd> <S2SV_ModStart> , cm -> bit_depth <S2SV_ModStart> ref_frame_skip_mask [ 2 ] = { 0 } ; int64_t mask_filter = 0 ; int64_t filter_cache [ SWITCHABLE_FILTER_CONTEXTS ] ; int internal_active_edge = vp9_active_edge_sb ( cpi , mi_row , mi_col ) && vp9_internal_image_edge ( cpi ) <S2SV_ModEnd> <S2SV_ModStart> sf -> <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> ; vp9_zero ( best_mbmode ) ; for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; ++ i ) filter_cache [ i ] = INT64_MAX <S2SV_ModStart> cm , xd <S2SV_ModEnd> <S2SV_ModStart> SWITCHABLE_FILTER_CONTEXTS <S2SV_ModEnd> <S2SV_ModStart> best_filter_rd <S2SV_ModEnd> <S2SV_ModStart> rate_uv_intra <S2SV_ModEnd> <S2SV_ModStart> rd_cost -> rate <S2SV_ModEnd> <S2SV_ModStart> setup_buffer_inter <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> else { ref_frame_skip_mask [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK ; } frame_mv [ NEWMV ] [ ref_frame ] . as_int = INVALID_MV ; frame_mv [ ZEROMV ] [ ref_frame ] . as_int = 0 ; <S2SV_ModEnd> <S2SV_ModStart> ref_index = 0 ; ref_index <S2SV_ModEnd> <S2SV_ModStart> ref_index <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ref_index <S2SV_ModEnd> <S2SV_ModStart> ref_index <S2SV_ModEnd> <S2SV_ModStart> ref_index <S2SV_ModEnd> <S2SV_ModStart> sf -> <S2SV_ModEnd> <S2SV_ModStart> ref_index <S2SV_ModEnd> <S2SV_ModStart> best_mbmode <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ref_frame_skip_mask [ 0 ] |= ( 1 << GOLDEN_FRAME ) | ( 1 << ALTREF_FRAME ) ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK <S2SV_ModEnd> <S2SV_ModStart> ref_frame_skip_mask [ 0 ] |= ( 1 << LAST_FRAME ) | ( 1 << ALTREF_FRAME ) ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK <S2SV_ModEnd> <S2SV_ModStart> ref_frame_skip_mask [ 0 ] |= ( 1 << GOLDEN_FRAME ) | ( 1 << LAST_FRAME ) <S2SV_ModEnd> <S2SV_ModStart> break ; } } } if ( ( ref_frame_skip_mask [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> ref_frame ) ) && ( ref_frame_skip_mask [ 1 ] & ( 1 << MAX ( 0 , second_ref_frame ) ) <S2SV_ModEnd> <S2SV_ModStart> if ( ! internal_active_edge && rd_less_than_thresh ( best_rd , rd_opt -> threshes <S2SV_ModEnd> <S2SV_ModStart> ref_index ] , tile_data -> thresh_freq_fact <S2SV_ModEnd> <S2SV_ModStart> ref_index ] ) <S2SV_ModEnd> <S2SV_ModStart> comp_pred = <S2SV_ModEnd> <S2SV_ModStart> ; if ( comp_pred ) { if ( ! cpi -> allow_comp_inter_inter ) continue ; if ( ! ( cpi -> ref_frame_flags & flag_list [ second_ref_frame ] ) ) continue ; if ( segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) ) continue ; if ( ( sf -> mode_search_skip_flags & FLAG_SKIP_COMP_BESTINTRA ) && best_mbmode . <S2SV_ModEnd> <S2SV_ModStart> == INTRA_FRAME ) continue ; } if ( ref_frame > INTRA_FRAME && vp9_is_scaled ( & cm -> frame_refs [ ref_frame - 1 ] . sf ) ) continue ; if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( comp_pred ) mode_excluded = cm -> reference_mode == SINGLE_REFERENCE ; else if ( ref_frame != INTRA_FRAME ) mode_excluded = cm -> reference_mode == COMPOUND_REFERENCE ; if ( segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) && get_segdata ( seg , segment_id , SEG_LVL_REF_FRAME ) != ( int ) ref_frame ) { continue ; } else if ( ! segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) ) { if ( cpi -> rc . is_src_frame_alt_ref && ( cpi -> oxcf . arnr_max_frames == 0 ) ) continue ; } mbmi -> tx_size = TX_4X4 ; mbmi -> uv_mode = DC_PRED ; mbmi -> ref_frame [ 0 ] = ref_frame ; mbmi -> ref_frame [ 1 ] = second_ref_frame <S2SV_ModEnd> <S2SV_ModStart> x -> skip = 0 ; set_ref_ptrs ( cm , xd , ref_frame , second_ref_frame ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> x , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> x -> mbmi_ext <S2SV_ModEnd> <S2SV_ModStart> rd_opt -> threshes <S2SV_ModEnd> <S2SV_ModStart> rd_opt -> threshes <S2SV_ModEnd> <S2SV_ModStart> rd_opt -> threshes <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> sf -> <S2SV_ModEnd> <S2SV_ModStart> sf -> <S2SV_ModEnd> <S2SV_ModStart> sf -> <S2SV_ModEnd> <S2SV_ModStart> MB_MODE_INFO_EXT * mbmi_ext = x -> mbmi_ext ; <S2SV_ModStart> rd_pick_best_sub8x8_mode <S2SV_ModEnd> <S2SV_ModStart> & mbmi_ext <S2SV_ModEnd> <S2SV_ModStart> cpi , xd <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> mask_filter <S2SV_ModEnd> <S2SV_ModStart> mask_filter <S2SV_ModEnd> <S2SV_ModStart> sf -> <S2SV_ModEnd> <S2SV_ModStart> rd_pick_best_sub8x8_mode <S2SV_ModEnd> <S2SV_ModStart> & x -> mbmi_ext <S2SV_ModEnd> <S2SV_ModStart> cpi , xd <S2SV_ModEnd> <S2SV_ModStart> memset ( x -> skip_txfm , SKIP_TXFM_NONE , sizeof ( x -> skip_txfm ) ) ; if ( ! <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> best_ref_index = ref_index <S2SV_ModEnd> <S2SV_ModStart> rd_cost -> rate <S2SV_ModEnd> <S2SV_ModStart> rd_cost -> dist = distortion2 ; rd_cost -> rdcost = this_rd <S2SV_ModEnd> <S2SV_ModStart> select_tx_size <S2SV_ModEnd> <S2SV_ModStart> 1 , 0 , 0 , <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> TX_4X4 <S2SV_ModEnd> <S2SV_ModStart> ctx -> zcoeff_blk [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> sf -> <S2SV_ModEnd> <S2SV_ModStart> ref_index <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { qstep >>= ( xd -> bd - 8 ) ; } # endif <S2SV_ModStart> ! comp_pred <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> comp_pred <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> mask_filter <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { rd_cost -> rate = INT_MAX ; rd_cost -> rdcost = INT64_MAX ; return ; } if ( sf -> <S2SV_ModEnd> <S2SV_ModStart> best_mbmode <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> TX_4X4 <S2SV_ModEnd> <S2SV_ModStart> ) { rd_cost -> rate <S2SV_ModEnd> <S2SV_ModStart> rd_cost -> dist <S2SV_ModEnd> <S2SV_ModStart> rd_cost -> rdcost = INT64_MAX ; return <S2SV_ModEnd> <S2SV_ModStart> vp9_update_rd_thresh_fact ( tile_data -> thresh_freq_fact , sf -> adaptive_rd_thresh , bsize , best_ref_index ) ; <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> best_ref_index <S2SV_ModEnd> <S2SV_ModStart> best_filter_diff , 0 ) <S2SV_ModEnd> "
3666,<S2SV_StartBug> the_url [ sizeof ( the_cfg ) - 1 ] = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> the_url <S2SV_ModEnd> 
3667,<S2SV_StartBug> if ( vma ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3668,<S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> x = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> y = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_DOUBLE ) { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> <S2SV_ModStart> Z_DVAL ( dval ) ; } else { x = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_DOUBLE ) { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> <S2SV_ModStart> Z_DVAL ( dval ) ; } else { y = <S2SV_ModStart> } 
3669,<S2SV_StartBug> L -> oldpc = pc + 1 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3670,"<S2SV_StartBug> int64_t off = s -> off ; <S2SV_EndBug> <S2SV_StartBug> ""Range:<S2SV_blank>bytes=%"" PRId64 ""-"" , s -> off ) ; <S2SV_EndBug> <S2SV_StartBug> s -> filesize = - 1 ; <S2SV_EndBug> ",<S2SV_ModStart> uint64_t <S2SV_ModEnd> <S2SV_ModStart> PRIu64 <S2SV_ModEnd> <S2SV_ModStart> UINT64_MAX <S2SV_ModEnd> 
3671,"<S2SV_StartBug> uint_fast32_t rawsize ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( image = jas_image_create0 ( ) ) ) { <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> image -> inmem_ = true ; <S2SV_EndBug> <S2SV_StartBug> jas_image_destroy ( image ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> for ( cmptno = 0 , cmptparm = cmptparms ; cmptno < numcmpts ; ++ cmptno , <S2SV_EndBug> <S2SV_StartBug> ++ cmptparm ) { <S2SV_EndBug> <S2SV_StartBug> jas_image_destroy ( image ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> ++ image -> numcmpts_ ; <S2SV_EndBug> ","<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> image = 0 ; JAS_DBGLOG ( 100 , ( ""jas_image_create(%d,<S2SV_blank>%p,<S2SV_blank>%d)\\n"" , numcmpts , cmptparms , clrspc ) ) ; <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> goto error <S2SV_ModEnd> <S2SV_ModStart> # if 0 <S2SV_ModStart> # endif <S2SV_ModStart> if ( ! jas_safe_size_mul3 ( cmptparm -> width , cmptparm -> height , ( cmptparm -> prec + 7 ) , & rawsize ) ) { goto error ; } rawsize /= 8 ; inmem = ( rawsize < JAS_IMAGE_INMEMTHRESH ) ; <S2SV_ModStart> goto error ; } ++ image -> numcmpts_ ; } jas_image_setbbox ( image ) ; return image ; error : if ( image ) { <S2SV_ModStart> } <S2SV_ModStart>  <S2SV_ModEnd> "
3672,<S2SV_StartBug> unsigned int i ; <S2SV_EndBug> ,<S2SV_ModStart> ; cmap -> ents = 0 
3673,<S2SV_StartBug> if ( client -> priv -> protocol_timeout > 0 ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3674,<S2SV_StartBug> VP9_COMMON * const cm = & ctx -> pbi -> common ; <S2SV_EndBug> <S2SV_StartBug> cm -> new_fb_idx = - 1 ; <S2SV_EndBug> <S2SV_StartBug> cm -> get_fb_cb = ctx -> get_ext_fb_cb ; <S2SV_EndBug> <S2SV_StartBug> cm -> release_fb_cb = ctx -> release_ext_fb_cb ; <S2SV_EndBug> <S2SV_StartBug> cm -> cb_priv = ctx -> ext_priv ; <S2SV_EndBug> <S2SV_StartBug> cm -> get_fb_cb = vp9_get_frame_buffer ; <S2SV_EndBug> <S2SV_StartBug> cm -> release_fb_cb = vp9_release_frame_buffer ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_alloc_internal_frame_buffers ( & cm -> int_frame_buffers ) ) <S2SV_EndBug> <S2SV_StartBug> cm -> cb_priv = & cm -> int_frame_buffers ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> int i ; for ( i = 0 ; i < ctx -> num_frame_workers ; ++ i ) { VPxWorker * const worker = & ctx -> frame_workers [ i ] ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> frame_worker_data <S2SV_ModEnd> <S2SV_ModStart> BufferPool * const pool = cm -> buffer_pool ; <S2SV_ModStart> INVALID_IDX ; cm -> byte_alignment = ctx -> byte_alignment ; cm -> skip_loop_filter = ctx -> skip_loop_filter <S2SV_ModEnd> <S2SV_ModStart> pool <S2SV_ModEnd> <S2SV_ModStart> pool <S2SV_ModEnd> <S2SV_ModStart> pool <S2SV_ModEnd> <S2SV_ModStart> pool <S2SV_ModEnd> <S2SV_ModStart> pool <S2SV_ModEnd> <S2SV_ModStart> pool <S2SV_ModEnd> <S2SV_ModStart> pool <S2SV_ModEnd> <S2SV_ModStart> pool <S2SV_ModEnd> <S2SV_ModStart> } 
3675,"<S2SV_StartBug> static int udf_translate_to_linux ( uint8_t * newName , uint8_t * udfName , <S2SV_EndBug> <S2SV_StartBug> int udfLen , uint8_t * fidName , <S2SV_EndBug> <S2SV_StartBug> if ( newIndex < 256 ) <S2SV_EndBug> <S2SV_StartBug> maxFilenameLen = 250 - localExtIndex ; <S2SV_EndBug> <S2SV_StartBug> } else if ( newIndex > 250 ) <S2SV_EndBug> ","<S2SV_ModStart> int newLen , <S2SV_ModStart> int udfLen , <S2SV_ModEnd> <S2SV_ModStart> newLen <S2SV_ModEnd> <S2SV_ModStart> newLen - CRC_LEN <S2SV_ModEnd> <S2SV_ModStart> newLen - CRC_LEN ) newIndex = newLen - CRC_LEN <S2SV_ModEnd> "
3676,<S2SV_StartBug> hw_init ( LOW_FREQUENCY ) ; <S2SV_EndBug> <S2SV_StartBug> # if BOOT_TO_DFU <S2SV_EndBug> ,<S2SV_ModStart> # if BOOT_TO_DFU flash_option_bytes_init ( 1 ) ; # else flash_option_bytes_init ( 0 ) ; # endif <S2SV_ModStart>  <S2SV_ModEnd> 
3677,"<S2SV_StartBug> status = ocfs2_rw_lock ( inode , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> goto bail_unlock ; <S2SV_EndBug> ",<S2SV_ModStart> inode_dio_wait ( inode ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
3678,"<S2SV_StartBug> static void sas_destruct_devices ( struct work_struct * work ) <S2SV_EndBug> <S2SV_StartBug> struct domain_device * dev , * n ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> asd_sas_port * port <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3679,"<S2SV_StartBug> while ( ! EOFBlob ( image ) ) <S2SV_EndBug> <S2SV_StartBug> if ( filepos != ( unsigned int ) filepos ) <S2SV_EndBug> <S2SV_StartBug> if ( ( MagickSizeType ) ( MATLAB_HDR . ObjectSize + filepos ) > GetBlobSize ( image ) ) <S2SV_EndBug> <S2SV_StartBug> ""<S2SV_blank><S2SV_blank>MAT<S2SV_blank>cannot<S2SV_blank>read<S2SV_blank>scanrow<S2SV_blank>%u<S2SV_blank>from<S2SV_blank>a<S2SV_blank>file."" , ( unsigned ) ( MATLAB_HDR . SizeY - i - 1 ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> filepos < GetBlobSize ( image ) && <S2SV_ModStart> > GetBlobSize ( image ) || filepos < 0 <S2SV_ModEnd> <S2SV_ModStart> >= <S2SV_ModEnd> <S2SV_ModStart> ) ; ThrowReaderException ( CorruptImageError , ""UnexpectedEndOfFile"" "
3680,"<S2SV_StartBug> char * fmtname ; <S2SV_EndBug> <S2SV_StartBug> while ( ( id = jas_getopt ( argc , argv , opts ) ) >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> case OPT_INFILE : <S2SV_EndBug> <S2SV_StartBug> if ( infile ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( image = jas_image_decode ( instream , fmtid , 0 ) ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ; int debug <S2SV_ModStart> debug = 0 ; <S2SV_ModStart> OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case <S2SV_ModStart> jas_setdbglevel ( debug ) ; <S2SV_ModStart> jas_stream_close ( instream ) ; 
3681,<S2SV_StartBug> ps_codec -> pu1_inp_bitsbuf += ( nal_ofst + nal_len ) ; <S2SV_EndBug> ,"<S2SV_ModStart> s_parse . i4_cur_slice_idx = MAX ( 0 , ( ps_codec -> s_parse . i4_cur_slice_idx - 1 ) ) ; ps_codec -> "
3682,<S2SV_StartBug> nfca_poll -> rats_res_len = * data ++ ; <S2SV_EndBug> <S2SV_StartBug> nfcb_poll -> attrib_res_len = * data ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> min_t ( __u8 , <S2SV_ModStart> , 20 ) <S2SV_ModStart> min_t ( __u8 , <S2SV_ModStart> , 50 ) "
3683,<S2SV_StartBug> p = find_eoq ( cmd + 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart> cmd [ 0 ] ? <S2SV_ModStart> : NULL 
3684,<S2SV_StartBug> struct hns_roce_ib_alloc_ucontext_resp resp ; <S2SV_EndBug> ,<S2SV_ModStart> = { } 
3685,"<S2SV_StartBug> int retval = 0 ; <S2SV_EndBug> <S2SV_StartBug> retval = - ENODEV ; <S2SV_EndBug> <S2SV_StartBug> bytes_read = snprintf ( in_buffer , 20 , ""%lld\\n"" , dev -> bbu ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * ppos < bytes_read ) { <S2SV_EndBug> <S2SV_StartBug> return retval ; <S2SV_EndBug> ","<S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & dev -> io_mutex ) ; return - ENODEV <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> simple_read_from_buffer ( buffer , count , ppos , in_buffer , len ) <S2SV_ModEnd> "
3686,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>[|truncated]"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , rpl_tstr <S2SV_ModEnd> "
3687,"<S2SV_StartBug> int16_t vp9_dc_quant ( int qindex , int delta ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , vpx_bit_depth_t bit_depth ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : <S2SV_ModEnd> <S2SV_ModStart> case VPX_BITS_10 : return dc_qlookup_10 [ clamp ( qindex + delta , 0 , MAXQ ) ] ; case VPX_BITS_12 : return dc_qlookup_12 [ clamp ( qindex + delta , 0 , MAXQ ) ] ; default : assert ( 0 && ""bit_depth<S2SV_blank>should<S2SV_blank>be<S2SV_blank>VPX_BITS_8,<S2SV_blank>VPX_BITS_10<S2SV_blank>or<S2SV_blank>VPX_BITS_12"" ) ; return - 1 ; } # else ( void ) bit_depth ; return dc_qlookup [ clamp ( qindex + delta , 0 , MAXQ ) ] ; # endif "
3688,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> else { matvar -> name [ tmp - 1 ] = '\\0' ; } 
3689,"<S2SV_StartBug> err = aead_register_instance ( tmpl , inst ) ; <S2SV_EndBug> ",<S2SV_ModStart> inst -> free = pcrypt_free ; 
3690,<S2SV_StartBug> if ( shmflg & SHM_RND ) <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) && addr >= shmlba 
3691,"<S2SV_StartBug> ( void ) ReadBlob ( image , sizeof ( iris_info . name ) , ( unsigned char * ) <S2SV_EndBug> <S2SV_StartBug> iris_info . name ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) count ; <S2SV_EndBug> <S2SV_StartBug> if ( EOFBlob ( image ) != MagickFalse ) <S2SV_EndBug> ","<S2SV_ModStart> count = <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( count != sizeof ( iris_info . name ) ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" <S2SV_ModStart> if ( count != sizeof ( iris_info . filler ) ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3692,<S2SV_StartBug> STREAM out ; <S2SV_EndBug> ,"<S2SV_ModStart> struct stream packet = * in ; if ( ! s_check_rem ( in , 4 ) ) { rdp_protocol_error ( ""rdpsnd_process_training(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>training<S2SV_blank>data<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } "
3693,"<S2SV_StartBug> dprintk ( ""%s:<S2SV_blank>write<S2SV_blank>%Zd<S2SV_blank>bytes\\n"" , bd -> name , count ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; if ( unlikely ( segment_eq ( get_fs ( ) , KERNEL_DS ) ) ) return - EINVAL "
3694,<S2SV_StartBug> const VP9_CONFIG * oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> int64_t critical_level = oxcf -> optimal_buffer_level >> 2 ; <S2SV_EndBug> <S2SV_StartBug> int active_worst_quality ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> current_video_frame > 1 ) <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ INTER_FRAME ] * 5 / 4 ) ; <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ KEY_FRAME ] * 3 / 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ( int ) ( ( rc -> worst_quality - rc -> avg_frame_qindex [ INTER_FRAME ] ) * <S2SV_EndBug> <S2SV_StartBug> ( oxcf -> optimal_buffer_level - rc -> buffer_level ) / <S2SV_EndBug> ,"<S2SV_ModStart> RATE_CONTROL * rc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rc <S2SV_ModEnd> <S2SV_ModStart> 3 <S2SV_ModEnd> <S2SV_ModStart> ; int ambient_qp ; unsigned int num_frames_weight_key = 5 * cpi -> svc . number_temporal_layers <S2SV_ModStart> ambient_qp = <S2SV_ModEnd> <S2SV_ModStart> < num_frames_weight_key ) ? MIN ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) : <S2SV_ModEnd> <S2SV_ModStart> ; active_worst_quality = MIN ( rc -> worst_quality , ambient_qp * 5 / 4 ) ; if ( <S2SV_ModEnd> <S2SV_ModStart> > rc -> optimal_buffer_level ) { int max_adjustment_down = active_worst_quality / 3 ; if ( max_adjustment_down ) { buff_lvl_step = ( ( rc -> maximum_buffer_size - rc -> optimal_buffer_level ) / max_adjustment_down ) ; if ( buff_lvl_step ) adjustment = ( int ) ( ( rc -> buffer_level - rc -> optimal_buffer_level ) / buff_lvl_step ) ; active_worst_quality -= adjustment ; } } else if ( rc -> buffer_level > critical_level ) { if ( critical_level ) { buff_lvl_step = ( rc -> optimal_buffer_level - critical_level ) ; if ( buff_lvl_step ) { adjustment = ( int ) ( ( rc -> worst_quality - ambient_qp ) * ( rc -> optimal_buffer_level - rc -> buffer_level ) / buff_lvl_step ) ; } active_worst_quality = ambient_qp <S2SV_ModEnd> "
3695,<S2SV_StartBug> if ( ! ( buf = g_try_malloc ( size ) ) ) { <S2SV_EndBug> ,<S2SV_ModStart> g_try_malloc0 <S2SV_ModEnd> 
3696,<S2SV_StartBug> alt = pcu -> ctrl_intf -> cur_altsetting ; <S2SV_EndBug> <S2SV_StartBug> alt = pcu -> data_intf -> cur_altsetting ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! pcu -> ctrl_intf ) return - EINVAL ; <S2SV_ModStart> if ( ! pcu -> data_intf ) return - EINVAL ; 
3697,"<S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bp [ hlen ] & 0xf0 ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""K"" ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mh -> ip6m_data8 [ 1 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 16 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( mh -> ip6m_data8 [ 1 ] <S2SV_ModStart> ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> <S2SV_ModStart> bp [ hlen ] , <S2SV_ModEnd> "
3698,"<S2SV_StartBug> Convert_art ( & dls , & defaultArt , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> dls . artCount = 1 ; <S2SV_EndBug> ",<S2SV_ModStart> if ( dls . pDLS ) { <S2SV_ModStart> } 
3699,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>n<S2SV_blank>len=%d"" , ntohs ( e . len ) - 4 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( 2 < ndo -> ndo_vflag && 4 < ntohs ( e . len ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( 1 < ndo -> ndo_vflag && 4 < ntohs ( e . len ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ike_show_somedata ( ndo , ( const u_char * ) ( const uint8_t * ) ( ext + 1 ) , ep ) ) <S2SV_EndBug> <S2SV_StartBug> return ( const u_char * ) ext + ntohs ( e . len ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""<S2SV_blank>n<S2SV_blank>len=%u"" <S2SV_ModEnd> <S2SV_ModStart> ntohs ( e . len ) > 4 ) { if ( <S2SV_ModEnd> <S2SV_ModStart> > 2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> > 1 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } "
3700,"<S2SV_StartBug> strcpy ( plugin_name , argv [ i ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( strlen ( argv [ i ] ) + 4 + 1 > FN_REFLEN ) { fprintf ( stderr , ""ERROR:<S2SV_blank>argument<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n"" ) ; return 1 ; } "
3701,"<S2SV_StartBug> BN_ULONG t1 , t2 ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3702,"<S2SV_StartBug> void f2fs_wait_discard_bios ( struct f2fs_sb_info * sbi ) <S2SV_EndBug> <S2SV_StartBug> __wait_discard_cmd ( sbi , false ) ; <S2SV_EndBug> ","<S2SV_ModStart> , bool umount <S2SV_ModStart> ! umount <S2SV_ModEnd> "
3703,<S2SV_StartBug> attrs = malloc ( sizeof ( TEE_Attribute ) * attr_count ) ; <S2SV_EndBug> ,"<S2SV_ModStart> size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , attr_count , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> alloc_size <S2SV_ModEnd> "
3704,<S2SV_StartBug> if ( rdf_parser -> uri_filter ) <S2SV_EndBug> ,"<S2SV_ModStart> raptor_sax2_set_option ( rss_parser -> sax2 , RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES , NULL , RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser , RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ; "
3705,<S2SV_StartBug> if ( ! ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_MOD_NAME ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( mask & ~ ALL_PRINC_MASK ) ) <S2SV_EndBug> <S2SV_StartBug> return KADM5_BAD_MASK ; <S2SV_EndBug> ,<S2SV_ModStart> entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> entry -> policy == NULL <S2SV_ModEnd> <S2SV_ModStart> KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & <S2SV_ModStart>  <S2SV_ModEnd> 
3706,"<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> nfunc , line , qedi -> host_no , & vaf ) ; <S2SV_EndBug> <S2SV_StartBug> pr_err ( ""[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV"" , nfunc , line , & vaf ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> 
3707,"<S2SV_StartBug> static void read_tx_mode_probs ( struct tx_probs * tx_probs , vp9_reader * r ) { <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> 
3708,"<S2SV_StartBug> struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> width - 1 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> height - 1 , 16 ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> 
3709,<S2SV_StartBug> if ( length == SIZE_MAX ) { <S2SV_EndBug> ,<S2SV_ModStart> || length > INT_MAX 
3710,"<S2SV_StartBug> # define ThrowCUTReaderException ( severity , tag ) { if ( palette != NULL ) palette = DestroyImage ( palette ) ; if ( clone_info != NULL ) clone_info = DestroyImageInfo ( clone_info ) ; ThrowReaderException ( severity , tag ) ; } <S2SV_EndBug> <S2SV_StartBug> offset = SeekBlob ( image , 6 , SEEK_SET ) ; <S2SV_EndBug> ","<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> ( void ) memset ( BImgBuff , 0 , ( size_t ) ldblk * sizeof ( * BImgBuff ) ) ; "
3711,<S2SV_StartBug> jumpstack [ stackidx ++ ] = e ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( stackidx >= private -> stacksize ) ) { verdict = NF_DROP ; break ; } 
3712,<S2SV_StartBug> if ( ( exit_intr_info & INTR_INFO_INTR_TYPE_MASK ) == INTR_TYPE_NMI_INTR && <S2SV_EndBug> ,<S2SV_ModStart> is_nmi ( exit_intr_info <S2SV_ModEnd> 
3713,<S2SV_StartBug> tok -> err = json_tokener_success ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ( len < - 1 ) || ( len == - 1 && strlen ( str ) > INT32_MAX ) ) { tok -> err = json_tokener_error_size ; return NULL ; } 
3714,<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> <S2SV_ModStart> { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; } <S2SV_ModEnd> "
3715,<S2SV_StartBug> hwc -> event_base = MSR_ARCH_PERFMON_FIXED_CTR0 ; <S2SV_EndBug> ,<S2SV_ModStart> + ( hwc -> idx - X86_PMC_IDX_FIXED ) 
3716,<S2SV_StartBug> static off_t ivf_header_pos = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! stream -> ebml . debug ) <S2SV_EndBug> <S2SV_StartBug> off_t currpos = ftello ( stream -> file ) ; <S2SV_EndBug> <S2SV_StartBug> case VPX_CODEC_PSNR_PKT : <S2SV_EndBug> ,"<S2SV_ModStart> int64_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const int64_t <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_FP_MB_STATS case VPX_CODEC_FPMB_STATS_PKT : stats_write ( & stream -> fpmb_stats , pkt -> data . firstpass_mb_stats . buf , pkt -> data . firstpass_mb_stats . sz ) ; stream -> nbytes += pkt -> data . raw . sz ; break ; # endif "
3717,<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( clk_src ) ; 
3718,"<S2SV_StartBug> struct snd_ctl_elem_id id ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> for ( idx = 0 ; idx < kcontrol -> count ; idx ++ , id . index ++ , id . numid ++ ) <S2SV_EndBug> ",<S2SV_ModStart> ; unsigned int count <S2SV_ModStart> count = kcontrol -> count ; <S2SV_ModStart>  <S2SV_ModEnd> 
3719,<S2SV_StartBug> Proto * p = clLvalue ( s2v ( ci -> func ) ) -> p ; <S2SV_EndBug> <S2SV_StartBug> if ( isLua ( ci -> previous ) ) <S2SV_EndBug> <S2SV_StartBug> L -> oldpc = ci -> previous -> u . l . savedpc ; <S2SV_EndBug> ,"<S2SV_ModStart> ci_func ( ci <S2SV_ModEnd> <S2SV_ModStart> = ci <S2SV_ModStart> pcRel ( ci <S2SV_ModEnd> <S2SV_ModStart> , ci_func ( ci ) -> p ) "
3720,"<S2SV_StartBug> if ( total_length < sizeof ( * bhdrp ) + sizeof ( * shbp ) + sizeof ( struct block_trailer ) ) { <S2SV_EndBug> <S2SV_StartBug> ""Section<S2SV_blank>Header<S2SV_blank>Block<S2SV_blank>in<S2SV_blank>pcapng<S2SV_blank>dump<S2SV_blank>file<S2SV_blank>has<S2SV_blank>a<S2SV_blank>length<S2SV_blank>of<S2SV_blank>%u<S2SV_blank><<S2SV_blank>%"" PRIsize , <S2SV_EndBug> <S2SV_StartBug> sizeof ( * bhdrp ) + sizeof ( * shbp ) + sizeof ( struct block_trailer ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> || ( total_length > BT_SHB_INSANE_MAX ) <S2SV_ModStart> ""Section<S2SV_blank>Header<S2SV_blank>Block<S2SV_blank>in<S2SV_blank>pcapng<S2SV_blank>dump<S2SV_blank>file<S2SV_blank>has<S2SV_blank>invalid<S2SV_blank>length<S2SV_blank>%"" PRIsize ""<S2SV_blank><<S2SV_blank>_%lu_<S2SV_blank><<S2SV_blank>%lu<S2SV_blank>(BT_SHB_INSANE_MAX)"" <S2SV_ModEnd> <S2SV_ModStart> , total_length , BT_SHB_INSANE_MAX <S2SV_ModEnd> "
3721,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug> ",<S2SV_ModStart> int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> rc = <S2SV_ModStart> rc <S2SV_ModEnd> 
3722,"<S2SV_StartBug> CRM_LOG_ASSERT ( client_obj -> request_id ) ; <S2SV_EndBug> <S2SV_StartBug> rid , client_obj -> name , from_peer ? ""(originator<S2SV_blank>of<S2SV_blank>delegated<S2SV_blank>request)"" : """" ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( client_obj -> ipc ) { <S2SV_ModStart> } else { crm_trace ( ""Sending<S2SV_blank>response<S2SV_blank>to<S2SV_blank>%s<S2SV_blank>%s"" , client_obj -> name , from_peer ? ""(originator<S2SV_blank>of<S2SV_blank>delegated<S2SV_blank>request)"" : """" ) ; } "
3723,"<S2SV_StartBug> checked_xmalloc ( size_t size ) <S2SV_EndBug> <S2SV_StartBug> alloc_limit_assert ( ""checked_xmalloc"" , size ) ; <S2SV_EndBug> <S2SV_StartBug> return xmalloc ( size ) ; <S2SV_EndBug> ","<S2SV_ModStart> num , size_t <S2SV_ModStart> size_t res ; if ( check_mul_overflow ( num , size , & res ) ) abort ( ) ; <S2SV_ModStart> res <S2SV_ModEnd> <S2SV_ModStart> num , "
3724,"<S2SV_StartBug> static vpx_codec_err_t ctrl_set_svc ( vpx_codec_alg_priv_t * ctx , int ctr_id , <S2SV_EndBug> <S2SV_StartBug> ( cfg -> rc_end_usage == VPX_CBR || <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3725,<S2SV_StartBug> if ( size_bmp > BMP_HEADER_SIZE ) { <S2SV_EndBug> ,<S2SV_ModStart> && size_bmp < INT_MAX - AV_INPUT_BUFFER_PADDING_SIZE 
3726,"<S2SV_StartBug> dev = btrfs_find_device ( fs_info -> fs_devices , devid , NULL , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> , true "
3727,"<S2SV_StartBug> if ( ! ( box = jas_malloc ( sizeof ( jp2_box_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ""preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%d\\n"" , <S2SV_EndBug> <S2SV_StartBug> if ( box -> len == 1 ) { <S2SV_EndBug> ","<S2SV_ModStart> jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> <S2SV_ModStart> ""preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>"" ""type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%"" PRIuFAST32 ""\\n"" <S2SV_ModEnd> <S2SV_ModStart> JAS_DBGLOG ( 10 , ( ""big<S2SV_blank>length\\n"" ) ) ; "
3728,<S2SV_StartBug> state -> array_nl = strdup ( RSTRING_PTR ( array_nl ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> fstrndup <S2SV_ModEnd> <S2SV_ModStart> , len "
3729,"<S2SV_StartBug> if ( ! test_bit ( HCI_UP , & hdev -> flags ) ) <S2SV_EndBug> <S2SV_StartBug> return - ENETDOWN ; <S2SV_EndBug> <S2SV_StartBug> hci_req_sync_unlock ( hdev ) ; <S2SV_EndBug> ",<S2SV_ModStart> hci_req_sync_lock ( hdev ) ; if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> else ret = - ENETDOWN ; 
3730,<S2SV_StartBug> vpx_codec_err_t res = VPX_CODEC_OK ; <S2SV_EndBug> <S2SV_StartBug> yv12 -> y_crop_width = img -> d_w ; <S2SV_EndBug> <S2SV_StartBug> yv12 -> uv_height = yv12 -> y_height / 2 ; <S2SV_EndBug> ,<S2SV_ModStart> const int y_w = img -> d_w ; const int y_h = img -> d_h ; const int uv_w = ( img -> d_w + 1 ) / 2 ; const int uv_h = ( img -> d_h + 1 ) / 2 ; <S2SV_ModStart> y_w ; yv12 -> y_crop_height = y_h ; yv12 -> y_width = y_w ; yv12 -> y_height = y_h ; yv12 -> uv_crop_width = uv_w ; yv12 -> uv_crop_height = uv_h ; yv12 -> uv_width = uv_w ; yv12 -> uv_height = uv_h ; yv12 -> y_stride = img -> stride [ VPX_PLANE_Y ] ; yv12 -> uv_stride = img -> stride [ VPX_PLANE_U ] ; yv12 -> border = ( img -> stride [ VPX_PLANE_Y ] - <S2SV_ModStart> ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3731,<S2SV_StartBug> void * buffer ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( params -> buffer . fragment_size == 0 || params -> buffer . fragments > SIZE_MAX / params -> buffer . fragment_size ) return - EINVAL 
3732,<S2SV_StartBug> if ( num < 0 ) return ONIGERR_TOO_BIG_NUMBER ; <S2SV_EndBug> ,<S2SV_ModStart> || num >= 256 
3733,"
","
"
3734,<S2SV_StartBug> state = vterm_state_new ( vt ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( state == NULL ) return NULL 
3735,"<S2SV_StartBug> mpeg4_decode_profile_level ( s , gb ) ; <S2SV_EndBug> <S2SV_StartBug> ( s -> avctx -> level > 0 && s -> avctx -> level < 9 ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! s -> avctx -> bits_per_raw_sample ) { <S2SV_EndBug> ","<S2SV_ModStart> int profile , level ; <S2SV_ModStart> , & profile , & level ) ; if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> else if ( s -> studio_profile ) { avpriv_request_sample ( s -> avctx , ""Mixes<S2SV_blank>studio<S2SV_blank>and<S2SV_blank>non<S2SV_blank>studio<S2SV_blank>profile\\n"" ) ; return AVERROR_PATCHWELCOME ; } s -> avctx -> profile = profile ; s -> avctx -> level = level ; <S2SV_ModStart> av_assert0 ( s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ; "
3736,"<S2SV_StartBug> const uint8_t * end , * ptr = avpkt -> data ; <S2SV_EndBug> <S2SV_StartBug> end = avpkt -> data + avpkt -> size ; <S2SV_EndBug> <S2SV_StartBug> while ( memcmp ( ptr , ""/*<S2SV_blank>XPM<S2SV_blank>*/"" , 9 ) && ptr < end - 9 ) <S2SV_EndBug> <S2SV_StartBug> size *= 94 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ncolors ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> if ( ptr + cpp > end ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ptr += mod_strcspn ( ptr , ""\\"""" ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < avctx -> width ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> if ( ptr + cpp > end ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> av_fast_padded_malloc ( & x -> buf , & x -> buf_size , avpkt -> size ) ; if ( ! x -> buf ) return AVERROR ( ENOMEM ) ; memcpy ( x -> buf , avpkt -> data , avpkt -> size ) ; x -> buf [ avpkt -> size ] = 0 ; ptr = x -> buf ; end = x -> buf <S2SV_ModEnd> <S2SV_ModStart> end - ptr > 9 && <S2SV_ModStart> ) ptr ++ ; if ( end - ptr <= 9 <S2SV_ModEnd> <S2SV_ModStart> 95 <S2SV_ModEnd> <S2SV_ModStart> if ( end - ptr < 1 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> end - ptr < cpp <S2SV_ModEnd> <S2SV_ModStart> if ( end - ptr < 1 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> if ( end - ptr < 1 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> if ( end - ptr < 1 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> end - ptr < cpp <S2SV_ModEnd> "
3737,"<S2SV_StartBug> static struct nfs4_state * nfs4_do_open ( struct inode * dir , struct path * path , int flags , struct iattr * sattr , struct rpc_cred * cred ) <S2SV_EndBug> <S2SV_StartBug> status = _nfs4_do_open ( dir , path , flags , sattr , cred , & res ) ; <S2SV_EndBug> ","<S2SV_ModStart> , fmode_t fmode <S2SV_ModStart> , fmode "
3738,"<S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> ",<S2SV_ModStart> false <S2SV_ModStart> false <S2SV_ModStart> false <S2SV_ModStart> false <S2SV_ModStart> false <S2SV_ModStart> false <S2SV_ModStart> false <S2SV_ModStart> false 
3739,<S2SV_StartBug> iris_info . dimension = ReadBlobMSBShort ( image ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; if ( ( iris_info . dimension == 0 ) || ( iris_info . dimension > 3 ) ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" "
3740,<S2SV_StartBug> bprm -> interp = interp ; <S2SV_EndBug> <S2SV_StartBug> return search_binary_handler ( bprm ) ; <S2SV_EndBug> ,"<S2SV_ModStart> retval = bprm_change_interp ( interp , <S2SV_ModEnd> <S2SV_ModStart> file = open_exec ( interp ) ; if ( IS_ERR ( file ) ) return PTR_ERR ( file ) ; bprm -> file = file ; retval = prepare_binprm ( bprm ) ; if ( retval < 0 ) return retval ; "
3741,<S2SV_StartBug> INIT_LIST_HEAD ( & f -> f_u . fu_list ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3742,<S2SV_StartBug> ps_dec -> u4_first_slice_in_pic = 2 ; <S2SV_EndBug> ,<S2SV_ModStart> ; ps_dec -> u1_first_pb_nal_in_pic = 1 
3743,"<S2SV_StartBug> ( void ) strncpy ( clone_info -> magick , magic_info -> name , MaxTextExtent ) ; <S2SV_EndBug> ",<S2SV_ModStart> - 1 
3744,<S2SV_StartBug> if ( pkt == NULL ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3745,<S2SV_StartBug> kgctx . have_acceptor_subkey = 1 ; <S2SV_EndBug> ,<S2SV_ModStart> established = 1 ; kgctx . 
3746,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3747,<S2SV_StartBug> port -> exists = true ; <S2SV_EndBug> <S2SV_StartBug> mb ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> spin_lock_irq ( & i8042_lock ) ; <S2SV_ModStart> spin_unlock_irq ( & i8042_lock <S2SV_ModEnd> 
3748,<S2SV_StartBug> if ( ( new -> euid != old -> uid || <S2SV_EndBug> ,"<S2SV_ModStart> ! cap_issubset ( new -> cap_permitted , old -> cap_permitted ) ) bprm -> per_clear |= PER_CLEAR_ON_SETID ; if ( "
3749,<S2SV_StartBug> if ( ! rc -> source_alt_ref_pending ) <S2SV_EndBug> <S2SV_StartBug> rc -> source_alt_ref_active = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> } 
3750,"<S2SV_StartBug> static void kiocb_batch_free ( struct kiocb_batch * batch ) <S2SV_EndBug> <S2SV_StartBug> struct kiocb * req , * n ; <S2SV_EndBug> <S2SV_StartBug> kmem_cache_free ( kiocb_cachep , req ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> struct kioctx * ctx , <S2SV_ModStart> ; if ( list_empty ( & batch -> head ) ) return ; spin_lock_irq ( & ctx -> ctx_lock ) <S2SV_ModStart> list_del ( & req -> ki_list ) ; <S2SV_ModStart> ctx -> reqs_active -- ; } spin_unlock_irq ( & ctx -> ctx_lock ) ; <S2SV_ModEnd> "
3751,<S2SV_StartBug> sax -> sax25_family = AF_NETROM ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( sax , 0 , sizeof ( sax ) ) ; "
3752,"<S2SV_StartBug> size = DIV_ROUND_UP ( size , BUF_PAGE_SIZE ) ; <S2SV_EndBug> ","<S2SV_ModStart> nr_pages = DIV_ROUND_UP ( size , BUF_PAGE_SIZE ) ; if ( nr_pages < 2 ) nr_pages = 2 ; size = nr_pages * BUF_PAGE_SIZE <S2SV_ModEnd> "
3753,<S2SV_StartBug> uchar * dp ; <S2SV_EndBug> ,<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
3754,<S2SV_StartBug> dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug> ,<S2SV_ModStart> ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> 
3755,<S2SV_StartBug> int event_id = event -> attr . config ; <S2SV_EndBug> ,<S2SV_ModStart> u64 <S2SV_ModEnd> 
3756,<S2SV_StartBug> char * buf ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! s_check ( s ) ) { rdp_protocol_error ( ""rdpsnddbg_process(),<S2SV_blank>stream<S2SV_blank>is<S2SV_blank>in<S2SV_blank>unstable<S2SV_blank>state"" , s ) ; } "
3757,<S2SV_StartBug> case RAPTOR_OPTION_RELATIVE_URIS : <S2SV_EndBug> ,<S2SV_ModStart> RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES : case 
3758,"<S2SV_StartBug> static PixelChannels * * AcquirePixelThreadSet ( const Image * image ) <S2SV_EndBug> <S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> pixels [ i ] = ( PixelChannels * ) AcquireQuantumMemory ( image -> columns , <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < ( ssize_t ) image -> columns ; j ++ ) <S2SV_EndBug> ","<S2SV_ModStart> images ) { const Image * next ; <S2SV_ModEnd> <S2SV_ModStart> columns , <S2SV_ModStart> columns = images -> columns ; for ( next = images ; next != ( Image * ) NULL ; next = next -> next ) columns = MagickMax ( next -> columns , columns ) ; <S2SV_ModStart> columns , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3759,"<S2SV_StartBug> int vp9_decode_frame ( VP9Decoder * pbi , <S2SV_EndBug> <S2SV_StartBug> const size_t first_partition_size = read_uncompressed_header ( pbi , & rb ) ; <S2SV_EndBug> <S2SV_StartBug> * p_data_end = data + 1 ; <S2SV_EndBug> <S2SV_StartBug> pbi -> do_loopfilter_inline = <S2SV_EndBug> <S2SV_StartBug> ( cm -> log2_tile_rows | cm -> log2_tile_cols ) == 0 && cm -> lf . filter_level ; <S2SV_EndBug> <S2SV_StartBug> if ( pbi -> oxcf . max_threads > 1 && ! vp9_worker_reset ( & pbi -> lf_worker ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( pbi -> oxcf . max_threads > 1 && tile_rows == 1 && tile_cols > 1 && <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> new_fb -> corrupted |= xd -> corrupted ; <S2SV_EndBug> <S2SV_StartBug> ""A<S2SV_blank>stream<S2SV_blank>must<S2SV_blank>start<S2SV_blank>with<S2SV_blank>a<S2SV_blank>complete<S2SV_blank>key<S2SV_blank>frame"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> refresh_frame_context ) <S2SV_EndBug> <S2SV_StartBug> cm -> frame_contexts [ cm -> frame_context_idx ] = cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> void vp9_decode_frame ( VP9Decoder * pbi , const uint8_t * data , const uint8_t * data_end , const uint8_t * * p_data_end ) { VP9_COMMON * const cm = & pbi -> common ; MACROBLOCKD * const xd = & pbi -> mb ; struct vpx_read_bit_buffer rb ; int context_updated = 0 ; uint8_t clear_data [ MAX_VP9_HEADER_SIZE ] <S2SV_ModEnd> <S2SV_ModStart> init_read_bit_buffer ( pbi , & rb , data , data_end , clear_data ) ) <S2SV_ModEnd> <S2SV_ModStart> ( cm -> profile <= PROFILE_2 ? 1 : 2 ) ; return ; } data += vpx_rb_bytes_read <S2SV_ModEnd> <S2SV_ModStart> cm -> use_prev_frame_mvs = ! cm -> error_resilient_mode && cm -> width == cm -> last_width && cm -> height == cm -> last_height && ! cm -> last_intra_only && cm -> last_show_frame && ( cm -> last_frame_type != KEY_FRAME ) ; vp9_setup_block_planes ( xd , cm -> subsampling_x , cm -> subsampling_y ) ; * cm -> fc = cm -> frame_contexts [ cm -> frame_context_idx ] ; if ( ! cm -> fc -> initialized ) vpx_internal_error ( & cm -> error , VPX_CODEC_CORRUPT_FRAME , ""Uninitialized<S2SV_blank>entropy<S2SV_blank>context."" ) ; vp9_zero ( cm -> counts ) ; xd -> corrupted = 0 ; new_fb -> corrupted = read_compressed_header ( pbi , data , first_partition_size ) ; if ( new_fb -> corrupted ) vpx_internal_error ( & cm -> error , VPX_CODEC_CORRUPT_FRAME , ""Decode<S2SV_blank>failed.<S2SV_blank>Frame<S2SV_blank>data<S2SV_blank>header<S2SV_blank>is<S2SV_blank>corrupted."" ) ; if ( <S2SV_ModEnd> <S2SV_ModStart> && ! cm -> skip_loop_filter ) { vp9_loop_filter_frame_init ( cm , cm -> lf . filter_level ) ; } if ( pbi -> frame_parallel_decode && cm -> frame_parallel_decoding_mode ) { VPxWorker * const worker = pbi -> frame_worker_owner ; FrameWorkerData * const frame_worker_data = worker -> data1 ; if ( cm -> refresh_frame_context ) { context_updated = 1 ; cm -> frame_contexts [ cm -> frame_context_idx ] = * cm -> fc ; } vp9_frameworker_lock_stats ( worker ) ; pbi -> cur_buf -> row = - 1 ; pbi -> cur_buf -> col = - 1 ; frame_worker_data -> frame_context_ready = 1 ; vp9_frameworker_signal_stats ( worker ) ; vp9_frameworker_unlock_stats ( worker ) ; } if ( pbi -> <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! xd -> corrupted ) { if ( ! cm -> skip_loop_filter ) { vp9_loop_filter_frame_mt ( new_fb , cm , pbi -> mb . plane , cm -> lf . filter_level , 0 , 0 , pbi -> tile_workers , pbi -> num_tile_workers , & pbi -> lf_row_sync ) ; } } else { vpx_internal_error ( & cm -> error , VPX_CODEC_CORRUPT_FRAME , ""Decode<S2SV_blank>failed.<S2SV_blank>Frame<S2SV_blank>data<S2SV_blank>is<S2SV_blank>corrupted."" ) ; } <S2SV_ModStart> if ( ! xd -> corrupted ) { if ( ! cm -> error_resilient_mode && ! cm -> frame_parallel_decoding_mode ) { vp9_adapt_coef_probs ( cm ) ; if ( ! frame_is_intra_only ( cm ) ) { vp9_adapt_mode_probs ( cm ) ; vp9_adapt_mv_probs ( cm , cm -> allow_high_precision_mv ) ; } } else { debug_check_frame_counts ( cm ) ; } } else { <S2SV_ModEnd> <S2SV_ModStart> ""Decode<S2SV_blank>failed.<S2SV_blank>Frame<S2SV_blank>data<S2SV_blank>is<S2SV_blank>corrupted."" <S2SV_ModEnd> <S2SV_ModStart> && ! context_updated <S2SV_ModStart> * <S2SV_ModStart>  <S2SV_ModEnd> "
3760,<S2SV_StartBug> sock_put ( skpair ) ; <S2SV_EndBug> ,"<S2SV_ModStart> unix_dgram_peer_wake_disconnect ( sk , skpair ) ; "
3761,"<S2SV_StartBug> ioctl ( sk , SIOCSIFFLAGS , ( caddr_t ) & ifr ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3762,<S2SV_StartBug> if ( vma -> vm_flags & ( VM_DONTEXPAND | VM_PFNMAP ) ) { <S2SV_EndBug> ,<S2SV_ModStart> new_len > old_len ) { unsigned long pgoff ; if ( <S2SV_ModStart> goto Efault ; pgoff = ( addr - vma -> vm_start ) >> PAGE_SHIFT ; pgoff += vma -> vm_pgoff ; if ( pgoff + ( new_len >> PAGE_SHIFT ) < pgoff ) goto Einval <S2SV_ModEnd> 
3763,"<S2SV_StartBug> if ( dashsize ) outpos += sprintf ( outpos , ""<S2SV_blank>[%12.3f]<S2SV_blank>%12.3f<S2SV_blank>d"" , dashsize , phase ) ; <S2SV_EndBug> <S2SV_StartBug> else outpos += sprintf ( outpos , ""<S2SV_blank>[]<S2SV_blank>0<S2SV_blank>d"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> { sprintf ( outputbuffer <S2SV_ModEnd> <S2SV_ModStart> sendClean ( outputbuffer ) ; } else send ( <S2SV_ModEnd> 
3764,"<S2SV_StartBug> l2tp_msgtype_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_proto_ver_print ( ndo , ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_framing_cap_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_bearer_cap_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> print_octets ( ndo , ( const u_char * ) ptr , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> print_16bits_val ( ndo , ptr ) ; <S2SV_EndBug> <S2SV_StartBug> print_octets ( ndo , ( const u_char * ) ptr , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> print_32bits_val ( ndo , ( const uint32_t * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_bearer_type_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_framing_type_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_proxy_auth_type_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_proxy_auth_id_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_call_errors_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_accm_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> ","<S2SV_ModStart> , len - 6 <S2SV_ModStart> , len - 6 <S2SV_ModStart> , len - 6 <S2SV_ModStart> , len - 6 <S2SV_ModStart> if ( len - 6 < 8 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; break ; } <S2SV_ModStart> if ( len - 6 < 2 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; break ; } <S2SV_ModStart> if ( len - 6 < 16 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; break ; } <S2SV_ModStart> if ( len - 6 < 4 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; break ; } <S2SV_ModStart> , len - 6 <S2SV_ModStart> , len - 6 <S2SV_ModStart> , len - 6 <S2SV_ModStart> , len - 6 <S2SV_ModStart> , len - 6 <S2SV_ModStart> , len - 6 "
3765,<S2SV_StartBug> o4 = o * sizeof ( uint32_t ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( q + o >= e ) goto out ; 
3766,"<S2SV_StartBug> if ( ! spec || ! value || ! hdr || ! obuf || obuf_len < 0 ) { <S2SV_EndBug> <S2SV_StartBug> case DW_FORM_data2 : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < value -> encoding . block . length ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> value -> encoding . block . data [ j ] = READ ( buf , ut8 ) ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < value -> encoding . block . length ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> value -> encoding . block . data [ j ] = READ ( buf , ut8 ) ; <S2SV_EndBug> ",<S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> # if 0 <S2SV_ModStart> # endif <S2SV_ModStart> if ( value -> encoding . block . data ) { <S2SV_ModStart> } <S2SV_ModStart> if ( value -> encoding . block . data ) { <S2SV_ModStart> } 
3767,"<S2SV_StartBug> netdev -> dcbnl_ops -> getpermhwaddr ( netdev , perm_addr ) ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( perm_addr , 0 , sizeof ( perm_addr ) ) ; "
3768,"<S2SV_StartBug> if ( ! ( box = jas_malloc ( sizeof ( jp2_box_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> memset ( box , 0 , sizeof ( jp2_box_t ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> jp2_box_create0 ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3769,"<S2SV_StartBug> char * name ; <S2SV_EndBug> <S2SV_StartBug> if ( EVP_CipherInit_ex ( ctx , cipher , NULL , dummy_key , NULL , - 1 ) != 1 ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> NULL <S2SV_ModEnd> 
3770,"<S2SV_StartBug> av_bprint_get_buffer ( bp , 1 , & buf , & buf_size ) ; <S2SV_EndBug> <S2SV_StartBug> zstream . avail_out = buf_size ; <S2SV_EndBug> ","<S2SV_ModStart> 2 , & buf , & buf_size ) ; if ( buf_size < 2 <S2SV_ModEnd> <S2SV_ModStart> - 1 "
3771,"<S2SV_StartBug> unsigned v = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> f -> chroma_planes = get_rac ( c , state ) ; <S2SV_EndBug> <S2SV_StartBug> f -> chroma_h_shift = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> f -> chroma_v_shift = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> f -> transparency = get_rac ( c , state ) ; <S2SV_EndBug> ","<S2SV_ModStart> int chroma_planes , chroma_h_shift , chroma_v_shift , transparency ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( f -> plane_count ) { if ( chroma_planes != f -> chroma_planes || chroma_h_shift != f -> chroma_h_shift || chroma_v_shift != f -> chroma_v_shift || transparency != f -> transparency ) { av_log ( f -> avctx , AV_LOG_ERROR , ""Invalid<S2SV_blank>change<S2SV_blank>of<S2SV_blank>global<S2SV_blank>parameters\\n"" ) ; return AVERROR_INVALIDDATA ; } } f -> chroma_planes = chroma_planes ; f -> chroma_h_shift = chroma_h_shift ; f -> chroma_v_shift = chroma_v_shift ; f -> transparency = transparency "
3772,<S2SV_StartBug> r = verify_vc_kbmode ( fd ) ; <S2SV_EndBug> ,<S2SV_ModStart> vt_verify_kbmode <S2SV_ModEnd> 
3773,<S2SV_StartBug> nfcf_poll -> sensf_res_len = * data ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> min_t ( __u8 , <S2SV_ModStart> , NFC_SENSF_RES_MAXSIZE ) "
3774,<S2SV_StartBug> queueItem -> srcPort = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> interface = interface ; queueItem -> 
3775,<S2SV_StartBug> NAPI_GRO_CB ( skb ) -> udp_mark = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> encap_mark <S2SV_ModEnd> 
3776,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> kvm_pit_load_count ( kvm , 0 , ps -> channels [ 0 ] . count , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> int i ; <S2SV_ModStart> for ( i = 0 ; i < 3 ; i ++ ) <S2SV_ModStart> i <S2SV_ModEnd> <S2SV_ModStart> i <S2SV_ModEnd> 
3777,<S2SV_StartBug> if ( malloc_called != 20 || free_called != 20 ) <S2SV_EndBug> ,<S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> 
3778,"<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> int numrows ; <S2SV_EndBug> <S2SV_StartBug> if ( fscanf ( in , ""%d<S2SV_blank>%d"" , & xoff , & yoff ) != 2 ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( fscanf ( in , ""%d<S2SV_blank>%d"" , & numcols , & numrows ) != 2 ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> jas_matind_t i ; jas_matind_t <S2SV_ModEnd> <S2SV_ModStart> jas_matind_t numrows ; jas_matind_t numcols ; jas_matind_t xoff ; jas_matind_t yoff ; long tmp_xoff ; long tmp_yoff ; long tmp_numrows ; long tmp_numcols <S2SV_ModEnd> <S2SV_ModStart> ""%ld<S2SV_blank>%ld"" , & tmp_xoff , & tmp_yoff <S2SV_ModEnd> <S2SV_ModStart> { return 0 ; } xoff = tmp_xoff ; yoff = tmp_yoff <S2SV_ModEnd> <S2SV_ModStart> ""%ld<S2SV_blank>%ld"" , & tmp_numcols , & tmp_numrows <S2SV_ModEnd> <S2SV_ModStart> { return 0 ; } numrows = tmp_numrows ; numcols = tmp_numcols <S2SV_ModEnd> <S2SV_ModStart> { return 0 ; } <S2SV_ModEnd> "
3779,<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug> ,<S2SV_ModStart> Py_RETURN_NONE <S2SV_ModEnd> 
3780,"<S2SV_StartBug> else if ( Ustrcmp ( argrest , ""Mr"" ) == 0 ) received_protocol = argv [ ++ i ] ; <S2SV_EndBug> <S2SV_StartBug> uschar * hn = Ustrchr ( argrest , ':' ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( received_protocol ) { fprintf ( stderr , ""received_protocol<S2SV_blank>is<S2SV_blank>set<S2SV_blank>already\\n"" ) ; exit ( EXIT_FAILURE ) ; } else <S2SV_ModStart> hn ; if ( received_protocol ) { fprintf ( stderr , ""received_protocol<S2SV_blank>is<S2SV_blank>set<S2SV_blank>already\\n"" ) ; exit ( EXIT_FAILURE ) ; } "
3781,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> r -> iov . iov_len = MIN ( r -> sector_count * 512 , SCSI_DMA_BUF_SIZE ) ; <S2SV_EndBug> ","<S2SV_ModStart> SCSIDiskState * s = DO_UPCAST ( SCSIDiskState , qdev , r -> req . dev ) ; if ( ! r -> iov . iov_base ) { r -> buflen = SCSI_DMA_BUF_SIZE ; r -> iov . iov_base = qemu_blockalign ( s -> bs , r -> buflen ) ; } <S2SV_ModStart> r -> buflen <S2SV_ModEnd> "
3782,<S2SV_StartBug> return ret ; <S2SV_EndBug> ,<S2SV_ModStart> { kfree ( bo ) ; return ret ; } <S2SV_ModEnd> 
3783,"<S2SV_StartBug> static void encode_sb_rt ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int output_enabled , BLOCK_SIZE bsize ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> const int bsl = b_width_log2 ( bsize ) , hbs = ( 1 << bsl ) / 4 ; <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> switch ( partition ) { <S2SV_EndBug> <S2SV_StartBug> if ( output_enabled && bsize >= BLOCK_8X8 ) <S2SV_EndBug> <S2SV_StartBug> encode_b_rt ( cpi , tile , tp , mi_row , mi_col , output_enabled , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( output_enabled ) <S2SV_EndBug> <S2SV_StartBug> if ( mi_col + hbs < cm -> mi_cols ) { <S2SV_EndBug> <S2SV_StartBug> if ( output_enabled ) <S2SV_EndBug> <S2SV_StartBug> if ( mi_row + hbs < cm -> mi_rows ) { <S2SV_EndBug> <S2SV_StartBug> if ( output_enabled ) <S2SV_EndBug> <S2SV_StartBug> encode_sb_rt ( cpi , tile , tp , mi_row , mi_col , output_enabled , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> encode_sb_rt ( cpi , tile , tp , mi_row , mi_col + hbs , output_enabled , <S2SV_EndBug> <S2SV_StartBug> encode_sb_rt ( cpi , tile , tp , mi_row + hbs , mi_col , output_enabled , <S2SV_EndBug> <S2SV_StartBug> assert ( ""Invalid<S2SV_blank>partition<S2SV_blank>type."" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ThreadData * td , <S2SV_ModStart> , PC_TREE * pc_tree <S2SV_ModStart> td <S2SV_ModEnd> <S2SV_ModStart> b_width_log2_lookup [ bsize ] <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( output_enabled && bsize != BLOCK_4X4 ) td -> counts -> partition [ ctx ] [ partition ] ++ ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> td , tile , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> none <S2SV_ModEnd> <S2SV_ModStart> encode_b_rt ( cpi , td , tile , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> vertical [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> && bsize > BLOCK_8X8 ) { encode_b_rt ( cpi , td , tile , tp , mi_row , mi_col + hbs , output_enabled , subsize , & pc_tree -> vertical [ 1 ] <S2SV_ModEnd> <S2SV_ModStart> encode_b_rt ( cpi , td , tile , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> horizontal [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> && bsize > BLOCK_8X8 ) { encode_b_rt ( cpi , td , tile , tp , mi_row + hbs , mi_col , output_enabled , subsize , & pc_tree -> horizontal [ 1 ] <S2SV_ModEnd> <S2SV_ModStart> encode_sb_rt ( cpi , td , tile , tp , mi_row , mi_col , output_enabled , subsize , pc_tree -> split [ 0 ] ) <S2SV_ModEnd> <S2SV_ModStart> td , tile , tp , mi_row , mi_col + hbs , output_enabled , subsize , pc_tree -> split [ 1 ] ) <S2SV_ModEnd> <S2SV_ModStart> td , tile , tp , mi_row + hbs , mi_col , output_enabled , subsize , pc_tree -> split [ 2 ] ) <S2SV_ModEnd> <S2SV_ModStart> td , tile , tp , mi_row + hbs , mi_col + hbs , output_enabled , subsize , pc_tree -> split [ 3 ] <S2SV_ModEnd> <S2SV_ModStart> 0 && ""Invalid<S2SV_blank>partition<S2SV_blank>type."" ) ; break <S2SV_ModEnd> "
3784,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( s == 0 ) return ( ( void * ) NULL ) ; 
3785,<S2SV_StartBug> field [ nf ] = lp ; <S2SV_EndBug> <S2SV_StartBug> if ( nf > MAXDATEFIELDS ) <S2SV_EndBug> ,<S2SV_ModStart> ; if ( nf >= MAXDATEFIELDS ) return - 1 <S2SV_ModStart>  <S2SV_ModEnd> 
3786,"<S2SV_StartBug> u_int16_t port ; <S2SV_EndBug> <S2SV_StartBug> unsigned int ret ; <S2SV_EndBug> <S2SV_StartBug> nf_ct_helper_log ( skb , exp -> master , ""all<S2SV_blank>ports<S2SV_blank>in<S2SV_blank>use"" ) ; <S2SV_EndBug> <S2SV_StartBug> ret = nf_nat_mangle_tcp_packet ( skb , exp -> master , ctinfo , <S2SV_EndBug> <S2SV_StartBug> nf_ct_helper_log ( skb , exp -> master , ""cannot<S2SV_blank>mangle<S2SV_blank>packet"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct nf_conn * ct = exp -> master ; union nf_inet_addr newaddr ; <S2SV_ModStart> ; newaddr = ct -> tuplehash [ IP_CT_DIR_REPLY ] . tuple . dst . u3 <S2SV_ModStart> ct <S2SV_ModEnd> <S2SV_ModStart> snprintf ( buffer , sizeof ( buffer ) , ""%u<S2SV_blank>%u"" , ntohl ( newaddr . ip ) , port ) ; pr_debug ( ""nf_nat_irc:<S2SV_blank>inserting<S2SV_blank>\'%s\'<S2SV_blank>==<S2SV_blank>%pI4,<S2SV_blank>port<S2SV_blank>%u\\n"" , buffer , & newaddr . ip , port ) ; <S2SV_ModStart> ct <S2SV_ModEnd> <S2SV_ModStart> ct <S2SV_ModEnd> "
3787,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> if ( * i == '\\\\' ) { AM_LOG_RERROR ( APLOG_MARK , APLOG_ERR , HTTP_BAD_REQUEST , r , ""Backslash<S2SV_blank>character<S2SV_blank>detected<S2SV_blank>in<S2SV_blank>URL."" ) ; return HTTP_BAD_REQUEST ; } "
3788,<S2SV_StartBug> ipc_lock_object ( & shp -> shm_perm ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( shp -> shm_file == NULL ) { ipc_unlock_object ( & shp -> shm_perm ) ; err = - EIDRM ; goto out_unlock ; } 
3789,<S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> x = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> y = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_DOUBLE ) { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> <S2SV_ModStart> Z_DVAL ( dval ) ; } else { x = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_DOUBLE ) { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> <S2SV_ModStart> Z_DVAL ( dval ) ; } else { y = <S2SV_ModStart> } 
3790,<S2SV_StartBug> if ( test_tsk_need_resched ( rq -> curr ) ) <S2SV_EndBug> ,<S2SV_ModStart> rq -> curr -> se . on_rq && 
3791,"<S2SV_StartBug> rc = fsmVerify ( fpath , fi ) ; <S2SV_EndBug> ","<S2SV_ModStart> , & sb "
3792,<S2SV_StartBug> if ( dc_size > 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( dc_count > ( 6LL * td -> xsize * td -> ysize + 63 ) / 64 ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> != dc_w * dc_h * 3 <S2SV_ModEnd> 
3793,"<S2SV_StartBug> struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , void * data ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> 
3794,<S2SV_StartBug> if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > <S2SV_EndBug> <S2SV_StartBug> pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3795,<S2SV_StartBug> if ( name_len == 0 ) goto chunk_end ; <S2SV_EndBug> <S2SV_StartBug> READ_ENCINT ( length ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( name_len < 2 || ! name [ 0 ] || ! name [ 1 ] ) continue 
3796,<S2SV_StartBug> path -> mnt = mntget ( nd -> path . mnt ) ; <S2SV_EndBug> <S2SV_StartBug> follow_mount ( path ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mntget ( path -> mnt ) ; 
3797,"<S2SV_StartBug> while ( ( impeg2d_bit_stream_nxt ( ps_stream , START_CODE_LEN ) != u4_start_code_val ) <S2SV_EndBug> <S2SV_StartBug> && ( ps_dec -> s_bit_stream . u4_offset <= ps_dec -> s_bit_stream . u4_max_offset ) ) <S2SV_EndBug> ",<S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart> < <S2SV_ModEnd> 
3798,"<S2SV_StartBug> if ( msg -> maxsize - msg -> cursize < 4 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bits == 8 ) { <S2SV_EndBug> <S2SV_StartBug> nbits = bits & 7 ; <S2SV_EndBug> <S2SV_StartBug> Huff_offsetTransmit ( & msgHuff . compressor , ( value & 0xff ) , msg -> data , & msg -> bit ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> overflowed ) { <S2SV_ModEnd> <S2SV_ModStart> msg -> cursize + ( bits >> 3 ) > msg -> maxsize ) { msg -> overflowed = qtrue ; return ; } if ( <S2SV_ModStart> if ( msg -> bit + nbits > msg -> maxsize << 3 ) { msg -> overflowed = qtrue ; return ; } <S2SV_ModStart> , msg -> maxsize << 3 <S2SV_ModStart> if ( msg -> bit > msg -> maxsize << 3 ) { msg -> overflowed = qtrue ; return ; } "
3799,<S2SV_StartBug> if ( ! fs_searchpaths ) <S2SV_EndBug> <S2SV_StartBug> for ( search = fs_searchpaths ; search ; search = search -> next ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> qboolean isLocalConfig ; <S2SV_ModStart> isLocalConfig = ! strcmp ( filename , ""autoexec.cfg"" ) || ! strcmp ( filename , Q3CONFIG_CFG ) ; <S2SV_ModStart> if ( isLocalConfig && search -> pack ) continue ; "
3800,<S2SV_StartBug> kgctx . have_acceptor_subkey = 1 ; <S2SV_EndBug> ,<S2SV_ModStart> established = 1 ; kgctx . 
3801,"<S2SV_StartBug> bw . i = EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> bandwidth ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( rsvp_obj_ctype ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%s<S2SV_blank><S2SV_blank>Setup<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Holding<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Hop-limit:<S2SV_blank>%u,<S2SV_blank>Bandwidth:<S2SV_blank>%.10g<S2SV_blank>Mbps"" , <S2SV_EndBug> ",<S2SV_ModStart> switch ( rsvp_obj_ctype ) { case RSVP_CTYPE_1 : if ( obj_tlen < sizeof ( struct rsvp_obj_frr_t ) ) return - 1 ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> bw . i = EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> bandwidth ) ; 
3802,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3803,<S2SV_StartBug> image -> storage_class = PseudoClass ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> case RMT_NONE : <S2SV_EndBug> <S2SV_StartBug> * sun_colormap ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( AcquireImageColormap ( image , image -> colors , exception ) == MagickFalse ) ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3804,<S2SV_StartBug> ( cm -> frame_flags & FRAMEFLAGS_KEY ) || <S2SV_EndBug> <S2SV_StartBug> ( cpi -> oxcf . auto_key && test_for_kf_one_pass ( cpi ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> rc -> frames_to_key = cpi -> key_frame_frequency ; <S2SV_EndBug> <S2SV_StartBug> rc -> baseline_gf_interval = DEFAULT_GF_INTERVAL ; <S2SV_EndBug> <S2SV_StartBug> rc -> frames_till_gf_update_due = rc -> frames_to_key ; <S2SV_EndBug> ,<S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> oxcf . key_freq <S2SV_ModEnd> <S2SV_ModStart> ( rc -> min_gf_interval + rc -> max_gf_interval ) / 2 <S2SV_ModEnd> <S2SV_ModStart> { rc -> frames_till_gf_update_due = rc -> frames_to_key ; rc -> constrained_gf_group = 1 ; } else { rc -> constrained_gf_group = 0 ; } <S2SV_ModEnd> 
3805,"<S2SV_StartBug> opendata = nfs4_opendata_alloc ( & ctx -> path , state -> owner , 0 , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> , 0 "
3806,"<S2SV_StartBug> ERR ( ""callocing<S2SV_blank>this<S2SV_blank>failed"" ) ; <S2SV_EndBug> <S2SV_StartBug> this -> sd = socket ( AF_INET6 , SOCK_STREAM , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> ERR ( ""sockect<S2SV_blank>open<S2SV_blank>failed"" ) ; <S2SV_EndBug> <S2SV_StartBug> addr . sin6_family = AF_INET6 ; <S2SV_EndBug> <S2SV_StartBug> addr . sin6_addr = in6addr_any ; <S2SV_EndBug> <S2SV_StartBug> ERR ( ""Bind<S2SV_blank>on<S2SV_blank>port<S2SV_blank>failed.<S2SV_blank>"" <S2SV_EndBug> <S2SV_StartBug> ERR ( ""listen<S2SV_blank>failed<S2SV_blank>on<S2SV_blank>socket"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""IPv4:<S2SV_blank>callocing<S2SV_blank>this<S2SV_blank>failed"" <S2SV_ModEnd> <S2SV_ModStart> AF_INET <S2SV_ModEnd> <S2SV_ModStart> ""IPv4<S2SV_blank>socket<S2SV_blank>open<S2SV_blank>failed"" ) ; goto error ; } struct sockaddr_in <S2SV_ModEnd> <S2SV_ModStart> sin_family = AF_INET ; addr . sin_port <S2SV_ModEnd> <S2SV_ModStart> sin_addr . s_addr = htonl ( 0x7F000001 ) <S2SV_ModEnd> <S2SV_ModStart> ""IPv4<S2SV_blank>bind<S2SV_blank>on<S2SV_blank>port<S2SV_blank>failed.<S2SV_blank>"" <S2SV_ModEnd> <S2SV_ModStart> ""IPv4<S2SV_blank>listen<S2SV_blank>failed<S2SV_blank>on<S2SV_blank>socket"" <S2SV_ModEnd> "
3807,"<S2SV_StartBug> col_set_str ( pinfo -> cinfo , COL_PROTOCOL , ""PKTAP"" ) ; <S2SV_EndBug> <S2SV_StartBug> dissector_try_uint ( wtap_encap_dissector_table , <S2SV_EndBug> <S2SV_StartBug> wtap_pcap_encap_to_wtap_encap ( dlt ) , next_tvb , pinfo , tree ) ; <S2SV_EndBug> ","<S2SV_ModStart> int wtap_encap ; struct eth_phdr eth ; void * phdr ; <S2SV_ModStart> wtap_encap = wtap_pcap_encap_to_wtap_encap ( dlt ) ; switch ( wtap_encap ) { case WTAP_ENCAP_ETHERNET : eth . fcs_len = - 1 ; phdr = & eth ; break ; default : phdr = NULL ; break ; } dissector_try_uint_new <S2SV_ModEnd> <S2SV_ModStart> wtap_encap <S2SV_ModEnd> <S2SV_ModStart> , TRUE , phdr "
3808,"<S2SV_StartBug> VP9_COMMON * const cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> cm -> last_frame_type = cm -> frame_type ; <S2SV_EndBug> <S2SV_StartBug> cpi , ( cpi -> sf . recode_loop >= ALLOW_RECODE_KFARFGF || <S2SV_EndBug> <S2SV_StartBug> rc -> last_q [ KEY_FRAME ] = cm -> base_qindex ; <S2SV_EndBug> <S2SV_StartBug> 3 * rc -> avg_frame_qindex [ KEY_FRAME ] + cm -> base_qindex , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( ! rc -> is_src_frame_alt_ref && <S2SV_EndBug> <S2SV_StartBug> ( cpi -> refresh_golden_frame || cpi -> refresh_alt_ref_frame ) && <S2SV_EndBug> <S2SV_StartBug> ! ( cpi -> use_svc && oxcf -> end_usage == USAGE_STREAM_FROM_SERVER ) ) { <S2SV_EndBug> <S2SV_StartBug> rc -> last_q [ 2 ] = cm -> base_qindex ; <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 2 ] = ROUND_POWER_OF_TWO ( <S2SV_EndBug> <S2SV_StartBug> 3 * rc -> avg_frame_qindex [ 2 ] + cm -> base_qindex , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> rc -> tot_q += vp9_convert_qindex_to_q ( cm -> base_qindex ) ; <S2SV_EndBug> <S2SV_StartBug> rc -> avg_q = rc -> tot_q / ( double ) rc -> ni_frames ; <S2SV_EndBug> <S2SV_StartBug> rc -> ni_tot_qi += cm -> base_qindex ; <S2SV_EndBug> <S2SV_StartBug> if ( ( cm -> base_qindex < rc -> last_boosted_qindex ) || <S2SV_EndBug> <S2SV_StartBug> ( ( cpi -> static_mb_pct < 100 ) && <S2SV_EndBug> <S2SV_StartBug> ( ( cm -> frame_type == KEY_FRAME ) || cpi -> refresh_alt_ref_frame || <S2SV_EndBug> <S2SV_StartBug> rc -> last_boosted_qindex = cm -> base_qindex ; <S2SV_EndBug> <S2SV_StartBug> rc -> total_target_bits += ( cm -> show_frame ? rc -> av_per_frame_bandwidth : 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> play_alternate && cpi -> refresh_alt_ref_frame && <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_type == KEY_FRAME ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> const <S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> const int qindex = cm -> base_qindex ; if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cm -> seg . enabled ) { vp9_cyclic_refresh_postencode ( cpi ) ; } <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> qindex <S2SV_ModEnd> <S2SV_ModStart> qindex <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> use_svc ) { int i = 0 ; SVC * svc = & cpi -> svc ; for ( i = 0 ; i < svc -> number_temporal_layers ; ++ i ) { const int layer = LAYER_IDS_TO_IDX ( svc -> spatial_layer_id , i , svc -> number_temporal_layers ) ; LAYER_CONTEXT * lc = & svc -> layer_context [ layer ] ; RATE_CONTROL * lrc = & lc -> rc ; lrc -> last_q [ KEY_FRAME ] = rc -> last_q [ KEY_FRAME ] ; lrc -> avg_frame_qindex [ KEY_FRAME ] = rc -> avg_frame_qindex [ KEY_FRAME ] ; } } } else { if ( rc -> is_src_frame_alt_ref || ! <S2SV_ModEnd> <S2SV_ModStart> || <S2SV_ModEnd> <S2SV_ModStart> rc_mode == VPX_CBR <S2SV_ModEnd> <S2SV_ModStart> INTER_FRAME ] = qindex <S2SV_ModEnd> <S2SV_ModStart> INTER_FRAME ] = <S2SV_ModEnd> <S2SV_ModStart> INTER_FRAME ] + qindex <S2SV_ModEnd> <S2SV_ModStart> qindex , cm -> bit_depth <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> qindex <S2SV_ModEnd> <S2SV_ModStart> } if ( ( qindex <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( ! rc -> constrained_gf_group && ( <S2SV_ModStart> qindex ; } if ( cm -> frame_type == KEY_FRAME ) rc -> last_kf_qindex = qindex ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth : 0 <S2SV_ModEnd> <S2SV_ModStart> ! cpi -> use_svc ) { if ( is_altref_enabled ( cpi ) <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> if ( oxcf -> pass != 0 ) { cpi -> resize_pending = rc -> next_frame_size_selector != rc -> frame_size_selector ; rc -> frame_size_selector = rc -> next_frame_size_selector ; } "
3809,<S2SV_StartBug> int delegation_type = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> fmode_t <S2SV_ModEnd> 
3810,"<S2SV_StartBug> rrd_set_error ( ""bad<S2SV_blank>format<S2SV_blank>for<S2SV_blank>imginfo"" ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3811,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> check_stack_depth ( ) ; 
3812,"<S2SV_StartBug> pr_err ( ""Underflows<S2SV_blank>must<S2SV_blank>be<S2SV_blank>unconditional<S2SV_blank>and<S2SV_blank>"" <S2SV_EndBug> ",<S2SV_ModStart> pr_debug <S2SV_ModEnd> 
3813,"<S2SV_StartBug> struct pt_regs * regs , int nmi ) <S2SV_EndBug> <S2SV_StartBug> if ( perf_event_overflow ( event , nmi , & data , regs ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3814,"<S2SV_StartBug> ctxt -> dst . type = OP_REG ; <S2SV_EndBug> <S2SV_StartBug> rc = emulate_pop ( ctxt , & ctxt -> dst . val , ctxt -> op_bytes ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned long eip <S2SV_ModEnd> <S2SV_ModStart> eip <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( rc != X86EMUL_CONTINUE ) return rc ; rc = assign_eip_near ( ctxt , eip "
3815,"<S2SV_StartBug> r = parse_gid ( e + 1 , & gid ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ; 
3816,"<S2SV_StartBug> static void reconstruct_inter_block ( int plane , int block , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = args -> xd ; <S2SV_EndBug> <S2SV_StartBug> int x , y , eob ; <S2SV_EndBug> <S2SV_StartBug> eob = vp9_decode_block_tokens ( cm , xd , plane , block , plane_bsize , x , y , <S2SV_EndBug> <S2SV_StartBug> inverse_transform_block ( xd , plane , block , tx_size , <S2SV_EndBug> <S2SV_StartBug> & pd -> dst . buf [ 4 * y * pd -> dst . stride + 4 * x ] , <S2SV_EndBug> <S2SV_StartBug> * args -> eobtotal += eob ; <S2SV_EndBug> ","<S2SV_ModStart> int reconstruct_inter_block ( <S2SV_ModEnd> <S2SV_ModStart> , vpx_reader * r , MB_MODE_INFO * const mbmi , int plane , int row , int col , TX_SIZE tx_size ) { <S2SV_ModEnd> <S2SV_ModStart> const scan_order * sc = & vp9_default_scan_orders [ tx_size ] ; const int <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sc , col , row , tx_size , r , mbmi -> segment_id ) ; inverse_transform_block_inter ( xd , plane <S2SV_ModEnd> <S2SV_ModStart> row <S2SV_ModEnd> <S2SV_ModStart> col <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> "
3817,"<S2SV_StartBug> dh = skb_header_pointer ( skb , dataoff , sizeof ( _dh ) , & dh ) ; <S2SV_EndBug> ",<S2SV_ModStart> _dh <S2SV_ModEnd> 
3818,<S2SV_StartBug> length += len ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( length > ( size_t ) ( length + len ) ) ) goto _output_error ; 
3819,"<S2SV_StartBug> mask |= FS_EVENT_ON_CHILD ; <S2SV_EndBug> <S2SV_StartBug> if ( path ) <S2SV_EndBug> <S2SV_StartBug> dentry -> d_name . name , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> dentry -> d_name . name , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct name_snapshot name ; <S2SV_ModStart> take_dentry_name_snapshot ( & name , dentry ) ; <S2SV_ModStart> name <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> <S2SV_ModStart> ) ; release_dentry_name_snapshot ( & name "
3820,"<S2SV_StartBug> size_t ss = CDF_SEC_SIZE ( h ) , i , j ; <S2SV_EndBug> ",<S2SV_ModStart> CDF_SHORT_SEC_SIZE <S2SV_ModEnd> 
3821,<S2SV_StartBug> tcon -> bad_network_name = true ; <S2SV_EndBug> ,<S2SV_ModStart> if ( tcon ) 
3822,"<S2SV_StartBug> memcpy ( bss_cfg -> rates , rate_ie + 1 , rate_ie -> len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rate_ie ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( bss_cfg -> rates + rate_len , rate_ie + 1 , rate_ie -> len ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( rate_ie -> len > MWIFIEX_SUPPORTED_RATES ) return ; <S2SV_ModStart> { if ( rate_ie -> len > MWIFIEX_SUPPORTED_RATES - rate_len ) return ; <S2SV_ModStart> } 
3823,"<S2SV_StartBug> agoo_log_cat ( & agoo_con_cat , ""Server<S2SV_blank>with<S2SV_blank>pid<S2SV_blank>%d<S2SV_blank>accepted<S2SV_blank>connection<S2SV_blank>%llu<S2SV_blank>on<S2SV_blank>%s<S2SV_blank>[%d]"" , <S2SV_EndBug> <S2SV_StartBug> getpid ( ) , ( unsigned long long ) cnt , b -> id , con -> sock ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""Server<S2SV_blank>with<S2SV_blank>pid<S2SV_blank>%d<S2SV_blank>accepted<S2SV_blank>connection<S2SV_blank>%llu<S2SV_blank>on<S2SV_blank>%s<S2SV_blank>[%d]<S2SV_blank>from<S2SV_blank>%s"" <S2SV_ModEnd> <S2SV_ModStart> , con -> remote "
3824,"<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = strdup_if_nonnull ( & target -> cr_principal , source -> cr_principal ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = kstrdup ( <S2SV_ModEnd> <S2SV_ModStart> , GFP_KERNEL ) ; target -> cr_raw_principal = kstrdup ( source -> cr_raw_principal , GFP_KERNEL <S2SV_ModStart> ( source -> cr_principal && ! target -> cr_principal ) || ( source -> cr_raw_principal && ! target -> cr_raw_principal ) ) return - ENOMEM <S2SV_ModEnd> "
3825,<S2SV_StartBug> assert ( offset >= capoff ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3826,"<S2SV_StartBug> r = mount ( ""cgroup_root"" , path , ""tmpfs"" , MS_NOSUID | MS_NODEV | MS_NOEXEC | MS_RELATIME , ""size=10240k,mode=755"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> safe_mount <S2SV_ModEnd> <S2SV_ModStart> , root "
3827,"<S2SV_StartBug> int err = 0 ; <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_zeroout ( inode , & orig_ex ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; BUG_ON ( ( split_flag & ( EXT4_EXT_DATA_VALID1 | EXT4_EXT_DATA_VALID2 ) ) == ( EXT4_EXT_DATA_VALID1 | EXT4_EXT_DATA_VALID2 ) ) <S2SV_ModStart> if ( split_flag & ( EXT4_EXT_DATA_VALID1 | EXT4_EXT_DATA_VALID2 ) ) { if ( split_flag & EXT4_EXT_DATA_VALID1 ) err = ext4_ext_zeroout ( inode , ex2 ) ; else err = ext4_ext_zeroout ( inode , ex ) ; } else "
3828,"<S2SV_StartBug> unsigned int block_size , <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 , k = 0 ; i < block_size ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < block_size ; j ++ , k ++ ) { <S2SV_EndBug> <S2SV_StartBug> modifier += 1 << ( strength - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> byte += stride - block_size ; <S2SV_EndBug> ","<S2SV_ModStart> block_width , unsigned int block_height <S2SV_ModEnd> <S2SV_ModStart> const int rounding = strength > 0 ? 1 << ( strength - 1 ) : 0 ; <S2SV_ModStart> block_height <S2SV_ModEnd> <S2SV_ModStart> block_width <S2SV_ModEnd> <S2SV_ModStart> rounding <S2SV_ModEnd> <S2SV_ModStart> block_width <S2SV_ModEnd> "
3829,<S2SV_StartBug> assert ( idx >= 1 ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pr_err ( ""%s:<S2SV_blank>invalid<S2SV_blank>bar<S2SV_blank>type<S2SV_blank>%d\\n"" , __func__ , dev -> bar [ idx ] . type ) ; return <S2SV_ModEnd> "
3830,"<S2SV_StartBug> return check_mac_perms_from_lookup ( spid , uid , perm , str8 ( name , name_len ) ) ? 1 : 0 ; <S2SV_EndBug> ",<S2SV_ModStart> if ( uid >= AID_APP ) { return 0 ; } 
3831,<S2SV_StartBug> if ( Offset < ( SizeOfHeader + 8 ) ) goto Error ; <S2SV_EndBug> ,<S2SV_ModStart> ) goto Error ; if ( ( Offset + Len ) > SizeOfTag + 8 
3832,<S2SV_StartBug> void ext4_xattr_destroy_cache ( struct mb_cache * cache ) <S2SV_EndBug> <S2SV_StartBug> mb_cache_destroy ( cache ) ; <S2SV_EndBug> ,<S2SV_ModStart> mb2_cache <S2SV_ModEnd> <S2SV_ModStart> mb2_cache_destroy <S2SV_ModEnd> 
3833,<S2SV_StartBug> mu_run_test ( test_r_str_unescape ) ; <S2SV_EndBug> ,<S2SV_ModStart> test_r_str_escape_sh ) ; mu_run_test ( 
3834,<S2SV_StartBug> sbinfo -> max_blocks = config . nr_blocks ; <S2SV_EndBug> <S2SV_StartBug> sbinfo -> free_blocks = config . nr_blocks ; <S2SV_EndBug> <S2SV_StartBug> if ( ! inode ) <S2SV_EndBug> <S2SV_StartBug> root = d_alloc_root ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> kfree ( sbinfo ) ; <S2SV_EndBug> ,"<S2SV_ModStart> max_inodes = config . nr_inodes ; sbinfo -> free_inodes = config . nr_inodes ; sbinfo -> spool = NULL ; if ( <S2SV_ModEnd> <S2SV_ModStart> != - 1 ) { sbinfo -> spool = hugepage_new_subpool ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sbinfo -> spool <S2SV_ModEnd> <S2SV_ModStart> } sb -> s_maxbytes = MAX_LFS_FILESIZE ; sb -> s_blocksize = huge_page_size ( config . hstate ) ; sb -> s_blocksize_bits = huge_page_shift ( config . hstate ) ; sb -> s_magic = HUGETLBFS_MAGIC ; sb -> s_op = & hugetlbfs_ops ; sb -> s_time_gran = 1 ; inode = hugetlbfs_get_root ( sb , & config ) ; if ( ! inode ) goto out_free ; <S2SV_ModStart> if ( sbinfo -> spool ) kfree ( sbinfo -> spool ) ; "
3835,<S2SV_StartBug> U2FHID_INIT_RESP initresp ; <S2SV_EndBug> <S2SV_StartBug> if ( resplen > sizeof ( initresp ) ) <S2SV_EndBug> <S2SV_StartBug> dev -> cid = initresp . cid ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionInterface = initresp . versionInterface ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionMajor = initresp . versionMajor ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionMinor = initresp . versionMinor ; <S2SV_EndBug> <S2SV_StartBug> dev -> capFlags = initresp . capFlags ; <S2SV_EndBug> ,"<S2SV_ModStart> int offs = sizeof ( nonce ) <S2SV_ModEnd> <S2SV_ModStart> < 17 ) { return U2FH_SIZE_ERROR ; } if ( memcmp ( nonce , resp , sizeof ( nonce ) ) != 0 ) { return U2FH_TRANSPORT_ERROR ; } <S2SV_ModEnd> <S2SV_ModStart> resp [ offs ] << 24 | resp [ offs + 1 ] << 16 | resp [ offs + 2 ] << 8 | resp [ offs + 3 ] ; offs += 4 <S2SV_ModEnd> <S2SV_ModStart> resp [ offs ++ ] <S2SV_ModEnd> <S2SV_ModStart> resp [ offs ++ ] <S2SV_ModEnd> <S2SV_ModStart> resp [ offs ++ ] ; dev -> versionBuild = resp [ offs ++ ] <S2SV_ModEnd> <S2SV_ModStart> resp [ offs ++ ] <S2SV_ModEnd> "
3836,<S2SV_StartBug> return MS_FALSE ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( strchr ( timestring , '\\'' ) || strchr ( timestring , '\\\\' ) ) { msSetError ( MS_MISCERR , ""Invalid<S2SV_blank>time<S2SV_blank>filter."" , ""msPostGISLayerSetTimeFilter()"" ) ; return MS_FALSE ; } "
3837,"<S2SV_StartBug> return recv ( socket -> fd , buf , count , MSG_DONTWAIT ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3838,"<S2SV_StartBug> ns_capable ( current -> nsproxy -> pid_ns -> user_ns , CAP_SYS_ADMIN ) ) && <S2SV_EndBug> ",<S2SV_ModStart> task_active_pid_ns ( current ) <S2SV_ModEnd> 
3839,"<S2SV_StartBug> static vpx_codec_err_t vp8e_get_reference ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3840,<S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) return - ENOKEY "
3841,"<S2SV_StartBug> ND_TCHECK ( pptr [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> plen -= 32 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( pptr [ 1 ] , ( plen + 7 ) / 8 ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & route_target , & pptr [ 1 ] , ( plen + 7 ) / 8 ) ; <S2SV_EndBug> <S2SV_StartBug> as_printf ( ndo , astostr , sizeof ( astostr ) , EXTRACT_32BITS ( pptr + 1 ) ) , <S2SV_EndBug> ","<S2SV_ModStart> char asbuf [ sizeof ( astostr ) ] ; <S2SV_ModStart> ND_TCHECK_32BITS ( pptr + 1 ) ; as_printf ( ndo , asbuf , sizeof ( asbuf ) , EXTRACT_32BITS ( pptr + 1 ) ) ; <S2SV_ModStart> 5 <S2SV_ModEnd> <S2SV_ModStart> 5 <S2SV_ModEnd> <S2SV_ModStart> asbuf <S2SV_ModEnd> "
3842,<S2SV_StartBug> cork -> length += length ; <S2SV_EndBug> <S2SV_StartBug> if ( length > mtu ) { <S2SV_EndBug> <S2SV_StartBug> if ( dontfrag && ( proto == IPPROTO_UDP || proto == IPPROTO_RAW ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( proto == IPPROTO_UDP && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart> sk -> sk_protocol <S2SV_ModEnd> <S2SV_ModStart> sk -> sk_protocol <S2SV_ModEnd> <S2SV_ModStart> skb = skb_peek_tail ( & sk -> sk_write_queue ) ; cork -> length += length ; if ( ( ( length > mtu ) || ( skb && skb_is_gso ( skb ) ) ) && ( sk -> sk_protocol == IPPROTO_UDP ) <S2SV_ModEnd> <S2SV_ModStart> if ( ! skb <S2SV_ModEnd> 
3843,<S2SV_StartBug> vstart += verdef -> vd_aux ; <S2SV_EndBug> ,<S2SV_ModStart> int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> 
3844,<S2SV_StartBug> mapping = ( struct address_space * ) page_private ( page ) ; <S2SV_EndBug> ,<S2SV_ModStart> vma -> vm_file -> f_dentry -> d_inode -> i_mapping <S2SV_ModEnd> 
3845,"<S2SV_StartBug> zap = key -> payload . data [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> rcu_assign_keypointer ( key , upayload ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) <S2SV_ModStart> else zap = NULL ; "
3846,"<S2SV_StartBug> void vp9_fht8x8_c ( const int16_t * input , int16_t * output , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct8x8_c ( input , output , stride ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t out [ 64 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t * outptr = & out [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t temp_in [ 8 ] , temp_out [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> outptr [ j * 8 + i ] = temp_out [ j ] ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> vpx_fdct8x8_c <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> 
3847,"<S2SV_StartBug> 1 , 0 , xcp , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3848,"<S2SV_StartBug> if ( s -> chunksize >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> s -> chunksize = strtoll ( line , NULL , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> av_log ( NULL , AV_LOG_TRACE , ""Chunked<S2SV_blank>encoding<S2SV_blank>data<S2SV_blank>size:<S2SV_blank>%"" PRId64 ""\'\\n"" , <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> int64_t target = h -> is_streamed ? 0 : s -> off ; <S2SV_EndBug> <S2SV_StartBug> av_log ( h , AV_LOG_INFO , ""Will<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%"" PRId64 ""<S2SV_blank>error=%s.\\n"" , s -> off , av_err2str ( read_ret ) ) ; <S2SV_EndBug> <S2SV_StartBug> av_log ( h , AV_LOG_ERROR , ""Failed<S2SV_blank>to<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%"" PRId64 "".\\n"" , target ) ; <S2SV_EndBug> ","<S2SV_ModStart> != UINT64_MAX <S2SV_ModEnd> <S2SV_ModStart> strtoull <S2SV_ModEnd> <S2SV_ModStart> h <S2SV_ModEnd> <S2SV_ModStart> PRIu64 <S2SV_ModEnd> <S2SV_ModStart> else if ( s -> chunksize == UINT64_MAX ) { av_log ( h , AV_LOG_ERROR , ""Invalid<S2SV_blank>chunk<S2SV_blank>size<S2SV_blank>%"" PRIu64 ""\\n"" , s -> chunksize ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> uint64_t <S2SV_ModEnd> <S2SV_ModStart> PRIu64 <S2SV_ModEnd> <S2SV_ModStart> PRIu64 <S2SV_ModEnd> "
3849,<S2SV_StartBug> int iSrc ; <S2SV_EndBug> <S2SV_StartBug> for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { <S2SV_EndBug> <S2SV_StartBug> dTotalWeight += ( res -> ContribRow [ u ] . Weights [ iSrc - iLeft ] = scale_f_d * ( * pFilter ) ( scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> Left = iLeft ; res -> ContribRow [ u ] . Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ] . 
3850,<S2SV_StartBug> else if ( ( cmd == HIDIOCGUSAGES || cmd == HIDIOCSUSAGES ) && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3851,"<S2SV_StartBug> ALOGE ( ""b/26366256"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; android_errorWriteLog ( 0x534e4554 , ""26366256"" "
3852,<S2SV_StartBug> void unix_inflight ( struct file * fp ) <S2SV_EndBug> <S2SV_StartBug> fp -> f_cred -> user -> unix_inflight ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> struct user_struct * user , <S2SV_ModStart>  <S2SV_ModEnd> "
3853,"<S2SV_StartBug> const u_char * bp , enum pimv2_addrtype at , int silent ) <S2SV_EndBug> <S2SV_StartBug> int len , hdrlen ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( bp [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> len = sizeof ( struct in_addr ) ; <S2SV_EndBug> <S2SV_StartBug> len = sizeof ( struct in6_addr ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( pimv2_addr_len ) { <S2SV_EndBug> <S2SV_StartBug> len = pimv2_addr_len ; <S2SV_EndBug> <S2SV_StartBug> switch ( at ) { <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , len ) ; <S2SV_EndBug> <S2SV_StartBug> return hdrlen + len ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , len + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> return hdrlen + 2 + len ; <S2SV_EndBug> ","<S2SV_ModStart> u_int len , <S2SV_ModStart> u_int addr_len , <S2SV_ModStart> hdrlen ; if ( addr_len == 0 ) { if ( len < 2 ) goto trunc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> addr_len = ( u_int ) <S2SV_ModEnd> <S2SV_ModStart> addr_len = ( u_int ) <S2SV_ModEnd> <S2SV_ModStart> addr_len <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> len -= hdrlen ; <S2SV_ModStart> if ( len < addr_len ) goto trunc ; <S2SV_ModStart> addr_len <S2SV_ModEnd> <S2SV_ModStart> addr_len <S2SV_ModEnd> <S2SV_ModStart> if ( len < addr_len + 2 ) goto trunc ; <S2SV_ModStart> addr_len <S2SV_ModEnd> <S2SV_ModStart> addr_len <S2SV_ModEnd> "
3854,"<S2SV_StartBug> n = r -> sector_count ; <S2SV_EndBug> <S2SV_StartBug> r -> iov . iov_len = n * 512 ; <S2SV_EndBug> <S2SV_StartBug> qemu_iovec_init_external ( & r -> qiov , & r -> iov , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> r -> req . aiocb = bdrv_aio_readv ( s -> bs , r -> sector , & r -> qiov , n , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> n = scsi_init_iovec ( r ) ; bdrv_acct_start ( s -> bs , & r -> acct , n * BDRV_SECTOR_SIZE , BDRV_ACCT_READ ) ; r -> req . aiocb = bdrv_aio_readv ( s -> bs , r -> sector , <S2SV_ModEnd> <S2SV_ModStart> n , scsi_read_complete , r ) ; if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3855,<S2SV_StartBug> match_length += callback_args -> forward_matches ; <S2SV_EndBug> ,<S2SV_ModStart> ; assert ( match_offset + match_length <= callback_args -> data_size ) 
3856,<S2SV_StartBug> string -> space = 1 ; <S2SV_EndBug> <S2SV_StartBug> string -> space *= 2 ; <S2SV_EndBug> <S2SV_StartBug> if ( string -> space < 0 ) <S2SV_EndBug> <S2SV_StartBug> new_len = string -> space = G_MAXINT - 8 ; <S2SV_EndBug> ,"<S2SV_ModStart> { <S2SV_ModStart> 4 ; } else { const guint max_space = MIN ( G_MAXINT , G_MAXSIZE / MAX ( sizeof ( PangoGlyphInfo ) , sizeof ( gint ) ) ) ; guint more_space = ( guint ) <S2SV_ModEnd> <S2SV_ModStart> * <S2SV_ModEnd> <S2SV_ModStart> more_space > max_space ) { more_space = max_space ; if ( ( guint ) new_len > max_space ) { g_error ( ""%s:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>glyph<S2SV_blank>string<S2SV_blank>of<S2SV_blank>length<S2SV_blank>%i\\n"" , G_STRLOC , new_len ) ; } } <S2SV_ModEnd> <S2SV_ModStart> more_space <S2SV_ModEnd> "
3857,<S2SV_StartBug> newnp -> mcast_oif = inet6_iif ( skb ) ; <S2SV_EndBug> <S2SV_StartBug> newnp -> pktoptions = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> ipv6_mc_list = NULL ; newnp -> ipv6_ac_list = NULL ; newnp -> ipv6_fl_list = NULL ; newnp -> <S2SV_ModStart> ipv6_mc_list = NULL ; newnp -> ipv6_ac_list = NULL ; newnp -> ipv6_fl_list = NULL ; newnp -> 
3858,<S2SV_StartBug> szLineConv [ i ] = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( i >= ( u32 ) ARRAY_LENGTH ( szLineConv ) ) return NULL ; 
3859,"<S2SV_StartBug> ret = ih264d_start_of_pic ( ps_dec , poc , ps_cur_poc , <S2SV_EndBug> <S2SV_StartBug> if ( ps_dec -> ps_cur_slice -> u1_field_pic_flag ) <S2SV_EndBug> ",<S2SV_ModStart> ps_dec -> ps_cur_slice -> u1_bottom_field_flag = 0 ; ps_dec -> ps_cur_slice -> u1_field_pic_flag = 0 ; ps_dec -> ps_cur_slice -> u1_slice_type = P_SLICE ; ps_dec -> ps_cur_slice -> u1_nal_ref_idc = 1 ; ps_dec -> ps_cur_slice -> u1_nal_unit_type = 1 ; <S2SV_ModStart> ps_dec -> ps_cur_slice -> i1_slice_alpha_c0_offset = 0 ; ps_dec -> ps_cur_slice -> i1_slice_beta_offset = 0 ; 
3860,"<S2SV_StartBug> cmdline_status = options_cmdline ( arg1 , arg2 ) ; <S2SV_EndBug> <S2SV_StartBug> return cmdline_status ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> ",<S2SV_ModStart> log_flush ( LOG_MODE_BUFFER ) ; <S2SV_ModStart> { log_flush ( LOG_MODE_ERROR ) ; return cmdline_status ; } options_free ( 1 ) <S2SV_ModEnd> <S2SV_ModStart> { unbind_ports ( ) ; options_free ( 1 ) ; options_defaults ( ) ; options_apply ( ) ; log_flush ( LOG_MODE_ERROR ) ; return 1 ; } <S2SV_ModEnd> <S2SV_ModStart> { log_flush ( LOG_MODE_ERROR ) ; return 1 ; } <S2SV_ModEnd> <S2SV_ModStart> { log_flush ( LOG_MODE_ERROR ) ; return 1 ; } <S2SV_ModEnd> <S2SV_ModStart> { log_flush ( LOG_MODE_ERROR ) ; return 1 ; } <S2SV_ModEnd> 
3861,"<S2SV_StartBug> len = get_line_size ( * b , * avail , nl ) ; <S2SV_EndBug> ","<S2SV_ModStart> + len , * avail - len <S2SV_ModEnd> "
3862,"<S2SV_StartBug> vpx_memset ( q , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( q , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
3863,"<S2SV_StartBug> static INLINE int cost_coeffs ( MACROBLOCK * x , <S2SV_EndBug> <S2SV_StartBug> const int16_t * const qcoeff = BLOCK_OFFSET ( p -> qcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int c , cost ; <S2SV_EndBug> <S2SV_StartBug> : get_uv_tx_size ( mbmi ) == tx_size ) ; <S2SV_EndBug> <S2SV_StartBug> int prev_t = vp9_dct_value_tokens_ptr [ v ] . token ; <S2SV_EndBug> <S2SV_StartBug> cost = ( * token_costs ) [ 0 ] [ pt ] [ prev_t ] + vp9_dct_value_cost_ptr [ v ] ; <S2SV_EndBug> <S2SV_StartBug> int t ; <S2SV_EndBug> <S2SV_StartBug> t = vp9_dct_value_tokens_ptr [ v ] . token ; <S2SV_EndBug> <S2SV_StartBug> cost += ( * token_costs ) [ ! prev_t ] [ ! prev_t ] [ t ] + vp9_dct_value_cost_ptr [ v ] ; <S2SV_EndBug> <S2SV_StartBug> cost += ( * token_costs ) [ ! prev_t ] [ pt ] [ t ] + vp9_dct_value_cost_ptr [ v ] ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH const int16_t * cat6_high_cost = vp9_get_high_cost_table ( xd -> bd ) ; # else const int16_t * cat6_high_cost = vp9_get_high_cost_table ( 8 ) ; # endif <S2SV_ModStart> , pd <S2SV_ModStart> int16_t prev_t ; EXTRABIT e ; vp9_get_token_extra ( v , & prev_t , & e ) <S2SV_ModEnd> <S2SV_ModStart> vp9_get_cost ( prev_t , e , cat6_high_cost ) <S2SV_ModEnd> <S2SV_ModStart> int16_t <S2SV_ModEnd> <S2SV_ModStart> vp9_get_token_extra ( v , & t , & e ) <S2SV_ModEnd> <S2SV_ModStart> vp9_get_cost ( t , e , cat6_high_cost ) <S2SV_ModEnd> <S2SV_ModStart> vp9_get_cost ( t , e , cat6_high_cost ) <S2SV_ModEnd> "
3864,<S2SV_StartBug> if ( net != c_net || ! tc -> t_sock ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3865,"<S2SV_StartBug> CU_add_test ( parserTestSuite , ""Parse<S2SV_blank>Exchange"" , test_parserComplete ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""Parse<S2SV_blank>hvi<S2SV_blank>check<S2SV_blank>fail"" , test_parser_hvi ) ; CU_add_test ( parserTestSuite , "
3866,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> m -> msg_namelen = 0 ; 
3867,<S2SV_StartBug> return NF_ACCEPT ; <S2SV_EndBug> ,<S2SV_ModStart> err == 0 ? NF_ACCEPT : NF_DROP <S2SV_ModEnd> 
3868,"<S2SV_StartBug> separator = strchr ( line , ':' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> 
3869,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( plenbytes < 0 ) return plenbytes ; 
3870,"<S2SV_StartBug> msg -> fp = mutt_bcache_get ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug> <S2SV_StartBug> msg -> fp = mutt_bcache_put ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug> <S2SV_StartBug> mutt_bcache_commit ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug> ",<S2SV_ModStart> cache_id ( <S2SV_ModStart> ) <S2SV_ModStart> cache_id ( <S2SV_ModStart> ) <S2SV_ModStart> cache_id ( <S2SV_ModStart> ) 
3871,<S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0xc0 ) <S2SV_EndBug> <S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0x40 ) <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 0xc0 ) ND_PRINT ( ( ndo , ""<S2SV_blank>"" <S2SV_ModEnd> <S2SV_ModStart> 0x80 ) ND_PRINT ( ( ndo , ""M"" ) ) ; if ( dp -> icmp6_data16 [ 1 ] & "
3872,<S2SV_StartBug> struct serial_icounter_struct icount ; <S2SV_EndBug> ,<S2SV_ModStart> = { } 
3873,"<S2SV_StartBug> r = mount ( ""cgroup_root"" , path , ""tmpfs"" , MS_NOSUID | MS_NODEV | MS_NOEXEC | MS_RELATIME , ""size=10240k,mode=755"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> safe_mount <S2SV_ModEnd> <S2SV_ModStart> , root "
3874,<S2SV_StartBug> Z_STRVAL_P ( return_value ) = emalloc ( len + 1 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( len > INT_MAX ) { php_error_docref ( NULL TSRMLS_CC , E_WARNING , ""Length<S2SV_blank>parameter<S2SV_blank>must<S2SV_blank>be<S2SV_blank>no<S2SV_blank>more<S2SV_blank>than<S2SV_blank>%d"" , INT_MAX ) ; RETURN_FALSE ; } "
3875,"<S2SV_StartBug> # define ThrowDCMException ( exception , message ) { if ( data != ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( stream_info != ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> ThrowReaderException ( CorruptImageError , <S2SV_EndBug> ",<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> ThrowDCMException <S2SV_ModEnd> 
3876,"<S2SV_StartBug> strlcpy ( rcomp . type , ""compression"" , sizeof ( rcomp . type ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> strncpy <S2SV_ModEnd> 
3877,<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; 
3878,<S2SV_StartBug> int err ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL 
3879,<S2SV_StartBug> return ( ( f != NULL && <S2SV_EndBug> <S2SV_StartBug> f -> addressFamily != NULL && f -> addressFamily -> data != NULL ) <S2SV_EndBug> <S2SV_StartBug> ? ( ( f -> addressFamily -> data [ 0 ] << 8 ) | ( f -> addressFamily -> data [ 1 ] ) ) <S2SV_EndBug> ,<S2SV_ModStart> if ( f == NULL || <S2SV_ModEnd> <S2SV_ModStart> == NULL || <S2SV_ModEnd> <S2SV_ModStart> == NULL || f -> addressFamily -> length < 2 ) return 0 ; return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3880,"<S2SV_StartBug> ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> <S2SV_StartBug> ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> ",<S2SV_ModStart> { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> } <S2SV_ModStart> scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> } <S2SV_ModStart> scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; 
3881,"<S2SV_StartBug> if ( stat ( ""/etc/skel/.zshrc"" , & s ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( is_link ( ""/etc/skel/.zshrc"" ) ) { <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , ""Error:<S2SV_blank>invalid<S2SV_blank>/etc/skel/.zshrc<S2SV_blank>file\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_file ( ""/etc/skel/.zshrc"" , fname ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> errExit ( ""chown"" ) ; <S2SV_EndBug> <S2SV_StartBug> fs_logger ( ""clone<S2SV_blank>/etc/skel/.zshrc"" ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( arg_csh ) { <S2SV_EndBug> ","<S2SV_ModStart> is_link ( fname ) ) { fprintf ( stderr , ""Error:<S2SV_blank>invalid<S2SV_blank>%s<S2SV_blank>file\\n"" , fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> copy_file_as_user ( ""/etc/skel/.zshrc"" , fname , u , g , 0644 ) ; fs_logger ( ""clone<S2SV_blank>/etc/skel/.zshrc"" ) ; } else { touch_file_as_user ( fname , u , g , 0644 ) ; fs_logger2 ( ""touch"" , fname ) ; } free ( fname ) ; } else if ( arg_csh ) { if ( asprintf ( & fname , ""%s/.cshrc"" , homedir ) == - 1 ) errExit ( ""asprintf"" ) ; struct stat s ; if ( stat ( fname , & s ) == 0 ) return ; <S2SV_ModStart> fname <S2SV_ModEnd> <S2SV_ModStart> ""Error:<S2SV_blank>invalid<S2SV_blank>%s<S2SV_blank>file\\n"" , fname <S2SV_ModEnd> <S2SV_ModStart> stat ( ""/etc/skel/.cshrc"" , & s ) == 0 ) { copy_file_as_user ( ""/etc/skel/.cshrc"" , fname , u , g , 0644 ) ; fs_logger ( ""clone<S2SV_blank>/etc/skel/.cshrc"" ) ; } else { touch_file_as_user ( fname , u , g , 0644 ) ; fs_logger2 ( ""touch"" , fname ) ; } free ( fname ) ; } else { if ( asprintf ( & fname , ""%s/.bashrc"" , homedir <S2SV_ModEnd> <S2SV_ModStart> ""asprintf"" ) ; struct stat s ; if ( stat ( fname , & s ) == 0 ) return ; if ( is_link ( fname ) ) { fprintf ( stderr , ""Error:<S2SV_blank>invalid<S2SV_blank>%s<S2SV_blank>file\\n"" , fname ) ; exit ( 1 ) ; } if ( stat ( ""/etc/skel/.bashrc"" , & s ) == 0 ) { copy_file_as_user ( ""/etc/skel/.bashrc"" , fname , u , g , 0644 <S2SV_ModEnd> <S2SV_ModStart> ""clone<S2SV_blank>/etc/skel/.bashrc"" ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3882,"<S2SV_StartBug> s_alDriver = Cvar_Get ( ""s_alDriver"" , ALDRIVER_DEFAULT , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> <S2SV_StartBug> s_alDevice = Cvar_Get ( ""s_alDevice"" , """" , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> ","<S2SV_ModStart> | CVAR_PROTECTED <S2SV_ModStart> if ( COM_CompareExtension ( s_alDriver -> string , "".pk3"" ) ) { Com_Printf ( ""Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\""%s\\"""" , s_alDriver -> string ) ; return qfalse ; } "
3883,"<S2SV_StartBug> ret = scsi_disk_emulate_command ( r , r -> iov . iov_base ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3884,"<S2SV_StartBug> ND_TCHECK2 ( tptr [ 0 ] , 3 ) ; <S2SV_EndBug> <S2SV_StartBug> tlen = len ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>TLV<S2SV_blank>(%u),<S2SV_blank>length<S2SV_blank>%u"" , <S2SV_EndBug> <S2SV_StartBug> type , length ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( tptr [ 3 ] , length - 3 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( tptr [ 3 ] , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> EXTRACT_64BITS ( tptr + 3 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , tptr + 3 , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>"" , length - 3 ) ; <S2SV_EndBug> ",<S2SV_ModStart> tlen = len ; while ( tlen >= 3 ) { <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tptr += 3 ; tlen -= 3 ; <S2SV_ModStart> ; if ( length < 3 ) goto trunc ; length -= 3 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( length < 8 ) goto trunc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3885,<S2SV_StartBug> state -> object_nl = strdup ( RSTRING_PTR ( object_nl ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> fstrndup <S2SV_ModEnd> <S2SV_ModStart> , len "
3886,<S2SV_StartBug> for ( y = 0 ; y < s -> ymin ; y ++ ) { <S2SV_EndBug> ,"<S2SV_ModStart> FFMIN ( <S2SV_ModStart> , s -> h ) "
3887,"<S2SV_StartBug> for ( ac = 0 ; ac < IEEE80211_NUM_ACS ; ac ++ ) { <S2SV_EndBug> <S2SV_StartBug> ieee80211_add_pending_skbs_fn ( local , & pending , clear_sta_ps_flags , sta ) ; <S2SV_EndBug> ",<S2SV_ModStart> spin_lock ( & sta -> ps_lock ) ; <S2SV_ModStart> ) ; spin_unlock ( & sta -> ps_lock 
3888,"<S2SV_StartBug> prefetch_table ( ( const void * ) encT , sizeof ( encT ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> enc_tables . counter_head ++ ; enc_tables . counter_tail ++ ; <S2SV_ModStart> & enc_tables <S2SV_ModEnd> <S2SV_ModStart> enc_tables <S2SV_ModEnd> 
3889,<S2SV_StartBug> struct ssh * ssh = active_state ; <S2SV_EndBug> <S2SV_StartBug> if ( options . compression ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3890,<S2SV_StartBug> if ( l >= ( len - o ) ) { <S2SV_EndBug> ,<S2SV_ModStart> - 4 
3891,"<S2SV_StartBug> ap_log_cerror ( APLOG_MARK , APLOG_ERR , 0 , session -> c , <S2SV_EndBug> <S2SV_StartBug> if ( status != APR_SUCCESS && ! h2_stream_is_ready ( stream ) ) { <S2SV_EndBug> ","<S2SV_ModStart> APLOG_DEBUG <S2SV_ModEnd> <S2SV_ModStart> if ( status == APR_ECONNRESET ) { ap_log_cerror ( APLOG_MARK , APLOG_TRACE1 , status , session -> c , ""h2-stream(%ld-%d):<S2SV_blank>on_header,<S2SV_blank>reset<S2SV_blank>stream"" , session -> id , stream -> id ) ; nghttp2_submit_rst_stream ( ngh2 , NGHTTP2_FLAG_NONE , stream -> id , NGHTTP2_INTERNAL_ERROR ) ; } else "
3892,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 2 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""horDiff8"" , ""%s"" , ""(cc%(2*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> return 1 ; "
3893,"<S2SV_StartBug> CAFChannelLayout * caf_channel_layout = malloc ( ( size_t ) caf_chunk_header . mChunkSize ) ; <S2SV_EndBug> <S2SV_StartBug> ! DoReadFile ( infile , caf_channel_layout , ( uint32_t ) caf_chunk_header . mChunkSize , & bcount ) || <S2SV_EndBug> <S2SV_StartBug> int bytes_to_copy = ( uint32_t ) caf_chunk_header . mChunkSize ; <S2SV_EndBug> <S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> caf_chunk_header . mChunkSize > 1024 ) { error_line ( ""this<S2SV_blank>.CAF<S2SV_blank>file<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>\'chan\'<S2SV_blank>chunk!"" ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""\'chan\'<S2SV_blank>chunk<S2SV_blank>is<S2SV_blank>%d<S2SV_blank>bytes"" , ( int ) caf_chunk_header . mChunkSize ) ; caf_channel_layout = malloc ( ( size_t ) caf_chunk_header . mChunkSize ) ; if ( <S2SV_ModStart> uint32_t <S2SV_ModEnd> <S2SV_ModStart> buff ; if ( caf_chunk_header . mChunkSize < 0 || caf_chunk_header . mChunkSize > 1048576 ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.CAF<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } "
3894,"<S2SV_StartBug> char linebuf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> if ( fgets ( linebuf , L_BUF_SIZE , fp ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> sscanf ( linebuf , ""<S2SV_blank><S2SV_blank>------<S2SV_blank><S2SV_blank>%s<S2SV_blank><S2SV_blank>------"" , selname ) ; <S2SV_EndBug> ","<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> ""<S2SV_blank><S2SV_blank>------<S2SV_blank><S2SV_blank>%200s<S2SV_blank><S2SV_blank>------"" <S2SV_ModEnd> "
3895,<S2SV_StartBug> char build [ ATUSB_BUILD_SIZE + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ,"<S2SV_ModStart> * build <S2SV_ModEnd> <S2SV_ModStart> ; build = kmalloc ( ATUSB_BUILD_SIZE + 1 , GFP_KERNEL ) ; if ( ! build ) return - ENOMEM <S2SV_ModStart> kfree ( build ) ; "
3896,<S2SV_StartBug> if ( isspace ( * s ) ) <S2SV_EndBug> ,<S2SV_ModStart> ( unsigned char ) 
3897,"<S2SV_StartBug> uzbl . net . useragent = ""Test<S2SV_blank>useragent"" ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3898,"<S2SV_StartBug> zval * options = NULL , * classes = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! php_var_unserialize_ex ( return_value , & p , p + buf_len , & var_hash , class_hash ) ) { <S2SV_EndBug> <S2SV_StartBug> zval_ptr_dtor ( return_value ) ; <S2SV_EndBug> <S2SV_StartBug> var_push_dtor ( & var_hash , return_value ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; zval * retval <S2SV_ModStart> retval = var_tmp_var ( & var_hash ) ; <S2SV_ModStart> retval <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ZVAL_COPY ( return_value , retval <S2SV_ModEnd> "
3899,"<S2SV_StartBug> int cond_len , then_len , jump_len ; <S2SV_EndBug> <S2SV_StartBug> jump_len = cond_len + then_len + SIZE_OP_ATOMIC_END ; <S2SV_EndBug> <S2SV_StartBug> int else_len = compile_length_tree ( Else , reg ) ; <S2SV_EndBug> <S2SV_StartBug> COP ( reg ) -> jump . addr = else_len + SIZE_INC_OP ; <S2SV_EndBug> <S2SV_StartBug> r = compile_tree ( Else , reg , env ) ; <S2SV_EndBug> ","<S2SV_ModStart> else_len , <S2SV_ModStart> + <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( else_len < 0 ) return else_len ; } else else_len = 0 <S2SV_ModStart> SIZE_OP_ATOMIC_END + <S2SV_ModStart> add_op ( reg , OP_ATOMIC_END ) ; if ( r != 0 ) return r ; if ( IS_NOT_NULL ( Else ) ) { r = "
3900,"<S2SV_StartBug> if ( pt [ 6 ] & AX25_HBIT ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> source_digis [ facilities -> source_ndigis ++ ] , pt , AX25_ADDR_LEN ) ; <S2SV_EndBug> ",<S2SV_ModStart> { if ( facilities -> dest_ndigis >= ROSE_MAX_DIGIS ) return - 1 ; <S2SV_ModStart> } else { if ( facilities -> source_ndigis >= ROSE_MAX_DIGIS ) return - 1 ; <S2SV_ModEnd> <S2SV_ModStart> } 
3901,"<S2SV_StartBug> uint8_t * outbuf ; <S2SV_EndBug> <S2SV_StartBug> command = buf [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> rc = scsi_disk_emulate_command ( r , outbuf ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3902,"<S2SV_StartBug> assertEqualInt ( ARCHIVE_OK , archive_write_free ( a ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> assert ( ( ae = archive_entry_new ( ) ) != NULL ) ; archive_entry_copy_pathname ( ae , ""/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp"" ) ; archive_entry_set_mode ( ae , S_IFREG | 0777 ) ; assert ( 0 == archive_write_header ( a , ae ) ) ; assert ( 0 == archive_write_finish_entry ( a ) ) ; assertFileExists ( ""/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp"" ) ; assert ( 0 == unlink ( ""/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp"" ) ) ; assert ( archive_entry_clear ( ae ) != NULL ) ; archive_entry_copy_pathname ( ae , ""/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp"" ) ; archive_entry_set_mode ( ae , S_IFREG | 0777 ) ; archive_write_disk_set_options ( a , ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) ; failure ( ""Extracting<S2SV_blank>an<S2SV_blank>absolute<S2SV_blank>path<S2SV_blank>should<S2SV_blank>fail<S2SV_blank>here."" ) ; assertEqualInt ( ARCHIVE_FAILED , archive_write_header ( a , ae ) ) ; archive_entry_free ( ae ) ; assert ( 0 == archive_write_finish_entry ( a ) ) ; assertFileNotExists ( ""/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp"" ) ; "
3903,"<S2SV_StartBug> const uint8_t * p , u_int length , u_int caplen ) <S2SV_EndBug> <S2SV_StartBug> if ( caplen <= 1 ) { <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , ""\\n\\t"" , caplen ) ; <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , ""\\n\\t"" , caplen ) ; <S2SV_EndBug> <S2SV_StartBug> if ( caplen > 1 ) <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , ""\\n\\t"" , caplen ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ! ND_TTEST ( * p ) <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> 
3904,<S2SV_StartBug> register struct enamemem * tp ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name ) <S2SV_EndBug> <S2SV_StartBug> return ( tp -> e_name ) ; <S2SV_EndBug> <S2SV_StartBug> tp -> e_name = strdup ( buf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name == NULL ) <S2SV_EndBug> <S2SV_StartBug> return ( tp -> e_name ) ; <S2SV_EndBug> ,<S2SV_ModStart> bsnamemem <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> 
3905,<S2SV_StartBug> if ( ctx -> mb_height > 68 || <S2SV_EndBug> <S2SV_StartBug> ctx -> data_offset = 0x280 ; <S2SV_EndBug> ,"<S2SV_ModStart> ) { av_log ( ctx -> avctx , AV_LOG_ERROR , ""mb<S2SV_blank>height<S2SV_blank>too<S2SV_blank>big:<S2SV_blank>%d\\n"" , ctx -> mb_height ) ; return AVERROR_INVALIDDATA ; } ctx -> data_offset = 0x280 ; } if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3906,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> opt = np -> opt ; <S2SV_EndBug> <S2SV_StartBug> return err < 0 ? err : len ; <S2SV_EndBug> ,<S2SV_ModStart> struct ipv6_txoptions * opt_to_free = NULL ; <S2SV_ModStart> { opt = txopt_get ( np ) ; opt_to_free = opt ; } <S2SV_ModEnd> <S2SV_ModStart> txopt_put ( opt_to_free ) ; 
3907,<S2SV_StartBug> mutex_lock ( & vdev -> vdev_mutex ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( memcmp ( & dd , dd_config , sizeof ( dd ) ) ) { ret = - EINVAL ; goto free_ret ; } "
3908,<S2SV_StartBug> if ( count < sizeof ( cmd ) ) { <S2SV_EndBug> ,<S2SV_ModStart> WARN_ON_ONCE ( ! ib_safe_file_access ( fp ) ) ) return - EACCES ; if ( 
3909,<S2SV_StartBug> filename [ filename_size ++ ] = '\\0' ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3910,"<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> rc = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rc == 0 ) <S2SV_EndBug> ","<S2SV_ModStart> ; rc = posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( rc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3911,<S2SV_StartBug> spin_lock_init ( & port -> phy_list_lock ) ; <S2SV_EndBug> ,<S2SV_ModStart> INIT_LIST_HEAD ( & port -> sas_port_del_list ) ; 
3912,"<S2SV_StartBug> hmp_data = hmp_chunk [ i ] + chunk_length [ i ] ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( ( setup_ret = _WM_SetupMidiEvent ( hmp_mdi , hmp_chunk [ i ] , 0 ) ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chunk_end [ i ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( * hmp_chunk [ i ] < 0x80 ) { <S2SV_EndBug> <S2SV_StartBug> chunk_delta [ i ] = chunk_delta [ i ] + ( ( * hmp_chunk [ i ] & 0x7F ) << var_len_shift ) ; <S2SV_EndBug> <S2SV_StartBug> } while ( * hmp_chunk [ i ] < 0x80 ) ; <S2SV_EndBug> <S2SV_StartBug> chunk_delta [ i ] = chunk_delta [ i ] + ( ( * hmp_chunk [ i ] & 0x7F ) << var_len_shift ) ; <S2SV_EndBug> <S2SV_StartBug> hmp_chunk [ i ] ++ ; <S2SV_EndBug> ","<S2SV_ModStart> [ i ] ; chunk_length [ i ] -= chunk_ofs <S2SV_ModStart> chunk_length [ i ] -= 3 ; <S2SV_ModStart> [ i ] , chunk_length <S2SV_ModStart> ; chunk_length [ i ] -= 3 <S2SV_ModStart> chunk_length [ i ] -= setup_ret ; <S2SV_ModStart> chunk_length [ i ] && <S2SV_ModStart> if ( ! chunk_length [ i ] ) break ; <S2SV_ModStart> chunk_length [ i ] -- ; <S2SV_ModStart> if ( ! chunk_length [ i ] ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMP , ""file<S2SV_blank>too<S2SV_blank>short"" , 0 ) ; goto _hmp_end ; } <S2SV_ModStart> ; chunk_length [ i ] -- "
3913,"<S2SV_StartBug> mem_free ( gr . gr_ctx . value , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & min_stat , & gd -> checksum ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3914,"<S2SV_StartBug> ns_capable ( current -> nsproxy -> pid_ns -> user_ns , CAP_SYS_ADMIN ) ) && <S2SV_EndBug> ",<S2SV_ModStart> task_active_pid_ns ( current ) <S2SV_ModEnd> 
3915,<S2SV_StartBug> mntput ( ns -> proc_mnt ) ; <S2SV_EndBug> ,<S2SV_ModStart> kern_unmount <S2SV_ModEnd> 
3916,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""%04x:%s<S2SV_blank>"" , panid , le64addr_string ( ndo , p + 2 ) ) ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3917,"<S2SV_StartBug> return ! inode_capable ( inode , CAP_FOWNER ) ; <S2SV_EndBug> ",<S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> 
3918,"<S2SV_StartBug> struct LayerData * cx_layer_list = NULL ; <S2SV_EndBug> <S2SV_StartBug> memset ( & superframe , 0 , sizeof ( superframe ) ) ; <S2SV_EndBug> <S2SV_StartBug> case VPX_CODEC_CX_FRAME_PKT : { <S2SV_EndBug> <S2SV_StartBug> si -> bytes_sum [ si -> layer ] += frame_pkt_size ; <S2SV_EndBug> <S2SV_StartBug> ld_list_add ( & cx_layer_list , layer_data ) ; <S2SV_EndBug> ","<S2SV_ModStart> SvcInternal_t <S2SV_ModEnd> <S2SV_ModStart> svc_log_reset ( svc_ctx ) ; res = vpx_codec_encode ( codec_ctx , rawimg , pts , ( uint32_t ) duration <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> # if VPX_ENCODER_ABI_VERSION > ( 5 + VPX_CODEC_ABI_VERSION ) # if CONFIG_SPATIAL_SVC case VPX_CODEC_SPATIAL_SVC_LAYER_PSNR : { int i ; for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) { int j ; svc_log ( svc_ctx , SVC_LOG_DEBUG , ""SVC<S2SV_blank>frame:<S2SV_blank>%d,<S2SV_blank>layer:<S2SV_blank>%d,<S2SV_blank>PSNR(Total/Y/U/V):<S2SV_blank>"" ""%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank>\\n"" , si -> psnr_pkt_received , i , cx_pkt -> data . layer_psnr [ i ] . psnr [ 0 ] , cx_pkt -> data . layer_psnr [ i ] . psnr [ 1 ] , cx_pkt -> data . layer_psnr [ i ] . psnr [ 2 ] , cx_pkt -> data . layer_psnr [ i ] . psnr [ 3 ] ) ; svc_log ( svc_ctx , SVC_LOG_DEBUG , ""SVC<S2SV_blank>frame:<S2SV_blank>%d,<S2SV_blank>layer:<S2SV_blank>%d,<S2SV_blank>SSE(Total/Y/U/V):<S2SV_blank>"" ""%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank>\\n"" , si -> psnr_pkt_received , i , cx_pkt -> data . layer_psnr [ i ] . sse [ 0 ] , cx_pkt -> data . layer_psnr [ i ] . sse [ 1 ] , cx_pkt -> data . layer_psnr [ i ] . sse [ 2 ] , cx_pkt -> data . layer_psnr [ i ] . sse [ 3 ] ) ; for ( j = 0 ; j < COMPONENTS ; ++ j ) { si -> psnr_sum [ i ] [ j ] += cx_pkt -> data . layer_psnr [ i ] . psnr [ j ] ; si -> sse_sum [ i ] [ j ] += cx_pkt -> data . layer_psnr [ i ] . sse [ j ] ; } } ++ si -> psnr_pkt_received ; break ; } case VPX_CODEC_SPATIAL_SVC_LAYER_SIZES : { int i ; for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) <S2SV_ModEnd> <S2SV_ModStart> i ] += cx_pkt -> data . layer_sizes [ i ] ; break ; } # endif # endif default : { break ; } } } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3919,<S2SV_StartBug> void * parg = NULL ; <S2SV_EndBug> <S2SV_StartBug> int is_ext_ctrl ; <S2SV_EndBug> <S2SV_StartBug> case _IOC_NONE : <S2SV_EndBug> <S2SV_StartBug> case _IOC_WRITE : <S2SV_EndBug> <S2SV_StartBug> if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> ( void * ) arg ; long err = - EINVAL ; bool has_array_args ; size_t array_size = 0 ; void __user * user_ptr = NULL ; void * * kernel_ptr = NULL ; if ( _IOC_DIR ( cmd ) != _IOC_NONE ) { if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { parg = sbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ) , GFP_KERNEL ) ; if ( NULL == mbuf ) return - ENOMEM ; parg = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { unsigned long n = cmd_input_size ( cmd ) ; if ( copy_from_user ( parg , ( void __user * ) arg , n ) ) goto out ; if ( n < _IOC_SIZE ( cmd ) ) memset ( ( u8 * ) parg + n , 0 , _IOC_SIZE ( cmd ) - n ) ; } else { memset ( parg , 0 , _IOC_SIZE ( cmd ) ) ; } } err = check_array_args ( cmd , parg , & array_size , & user_ptr , & kernel_ptr ) ; if ( err < 0 ) goto out ; has_array_args = err ; if ( has_array_args ) { mbuf = kmalloc ( array_size , GFP_KERNEL ) ; err = - ENOMEM ; if ( NULL == mbuf ) goto out_array_args ; err = - EFAULT ; if ( copy_from_user ( mbuf , user_ptr , array_size ) ) goto out_array_args ; * kernel_ptr = mbuf ; } err = func ( file , cmd , parg ) ; if ( err == - ENOIOCTLCMD ) <S2SV_ModEnd> <S2SV_ModStart> if ( has_array_args ) { * kernel_ptr = user_ptr ; if ( copy_to_user ( user_ptr , mbuf , array_size ) ) err = - EFAULT ; goto out_array_args ; } if ( err < 0 ) goto out ; out_array_args : <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3920,<S2SV_StartBug> char fstr [ MAXDATELEN + 1 ] ; <S2SV_EndBug> ,<S2SV_ModStart> 7 ] ; int i ; cp ++ ; for ( i = 0 ; i < 6 ; i ++ ) fstr [ i ] = * cp != '\\0' ? * cp ++ : '0' ; fstr [ i ] <S2SV_ModEnd> 
3921,"<S2SV_StartBug> pi -> xstep = pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + <S2SV_EndBug> <S2SV_StartBug> pi -> ystep = pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + <S2SV_EndBug> <S2SV_StartBug> pi -> xstep = JAS_MIN ( pi -> xstep , pi -> picomp -> hsamp * ( 1 << <S2SV_EndBug> <S2SV_StartBug> pi -> ystep = JAS_MIN ( pi -> ystep , pi -> picomp -> vsamp * ( 1 << <S2SV_EndBug> ","<S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> <S2SV_ModStart> ( JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> <S2SV_ModStart> ( JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> "
3922,"<S2SV_StartBug> sraSpanInsertAfter ( sraSpan * newspan , sraSpan * after ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> after ) { if ( newspan && <S2SV_ModStart> } 
3923,<S2SV_StartBug> while ( c && which > 0 ) { <S2SV_EndBug> <S2SV_StartBug> c = c -> next ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , which -- ; <S2SV_ModEnd> "
3924,<S2SV_StartBug> if ( noblock ) <S2SV_EndBug> ,<S2SV_ModStart> cond_resched ( ) <S2SV_ModEnd> 
3925,"<S2SV_StartBug> memcpy ( & payload [ j ] , msg -> buf , msg -> len ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( len < j + msg -> len + 1 ) { LM_ERR ( ""not<S2SV_blank>enough<S2SV_blank>space<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>sip<S2SV_blank>message\\n"" ) ; return - 1 ; } "
3926,"<S2SV_StartBug> isoclns_print ( ndo , bp , len , ndo -> ndo_snapend - bp ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo , bp , len <S2SV_ModStart>  <S2SV_ModEnd> "
3927,<S2SV_StartBug> skcipher -> setkey = alg -> setkey ; <S2SV_EndBug> ,<S2SV_ModStart> skcipher_setkey <S2SV_ModEnd> 
3928,"<S2SV_StartBug> c . c_normalize_args = NULL ; <S2SV_EndBug> <S2SV_StartBug> PyTuple_SET_ITEM ( c . c_normalize_args , 1 , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3929,"<S2SV_StartBug> void vp9_encode_block_intra ( MACROBLOCK * x , int plane , int block , <S2SV_EndBug> <S2SV_StartBug> unsigned char * skip ) { <S2SV_EndBug> <S2SV_StartBug> struct encode_b_args arg = { x , NULL , skip } ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> void * arg <S2SV_ModEnd> <S2SV_ModStart> * const args = arg ; MACROBLOCK * const x = args -> x ; MACROBLOCKD * const xd = & x -> e_mbd ; MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; struct macroblock_plane * const p = & x -> plane [ plane ] ; struct macroblockd_plane * const pd = & xd -> plane [ plane ] ; tran_low_t * coeff = BLOCK_OFFSET ( p -> coeff , block ) ; tran_low_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff , block ) ; tran_low_t * dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; const scan_order * scan_order ; TX_TYPE tx_type = DCT_DCT ; PREDICTION_MODE mode ; const int bwl = b_width_log2_lookup [ plane_bsize ] ; const int diff_stride = 4 * ( 1 << bwl ) ; uint8_t * src , * dst ; int16_t * src_diff ; uint16_t * eob = & p -> eobs [ block ] ; const int src_stride = p -> src . stride ; const int dst_stride = pd -> dst . stride ; int i , j ; txfrm_block_to_raster_xy ( plane_bsize , tx_size , block , & i , & j ) ; dst = & pd -> dst . buf [ 4 * ( j * dst_stride + i ) ] ; src = & p -> src . buf [ 4 * ( j * src_stride + i ) ] ; src_diff = & p -> src_diff [ 4 * ( j * diff_stride + i ) ] ; if ( tx_size == TX_4X4 ) { tx_type = get_tx_type_4x4 ( pd -> plane_type , xd , block ) ; scan_order = & vp9_scan_orders [ TX_4X4 ] [ tx_type ] ; mode = plane == 0 ? get_y_mode ( xd -> mi [ 0 ] , block ) : mbmi -> uv_mode ; } else { mode = plane == 0 ? mbmi -> mode : mbmi -> uv_mode ; if ( tx_size == TX_32X32 ) { scan_order = & vp9_default_scan_orders [ TX_32X32 ] ; } else { tx_type = get_tx_type ( pd -> plane_type , xd ) ; scan_order = & vp9_scan_orders [ tx_size ] [ tx_type ] ; } } vp9_predict_intra_block ( xd , bwl , tx_size , mode , x -> skip_encode ? src : dst , x -> skip_encode ? src_stride : dst_stride , dst , dst_stride , i , j , plane ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { switch ( tx_size ) { case TX_32X32 : if ( ! x -> skip_recode ) { vpx_highbd_subtract_block ( 32 , 32 , src_diff , diff_stride , src , src_stride , dst , dst_stride , xd -> bd ) ; highbd_fdct32x32 ( x -> use_lp32x32fdct , src_diff , coeff , diff_stride ) ; vpx_highbd_quantize_b_32x32 ( coeff , 1024 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) { vp9_highbd_idct32x32_add ( dqcoeff , dst , dst_stride , * eob , xd -> bd ) ; } break ; case TX_16X16 : if ( ! x -> skip_recode ) { vpx_highbd_subtract_block ( 16 , 16 , src_diff , diff_stride , src , src_stride , dst , dst_stride , xd -> bd ) ; if ( tx_type == DCT_DCT ) vpx_highbd_fdct16x16 ( src_diff , coeff , diff_stride ) ; else vp9_highbd_fht16x16 ( src_diff , coeff , diff_stride , tx_type ) ; vpx_highbd_quantize_b ( coeff , 256 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) { vp9_highbd_iht16x16_add ( tx_type , dqcoeff , dst , dst_stride , * eob , xd -> bd ) ; } break ; case TX_8X8 : if ( ! x -> skip_recode ) { vpx_highbd_subtract_block ( 8 , 8 , src_diff , diff_stride , src , src_stride , dst , dst_stride , xd -> bd ) ; if ( tx_type == DCT_DCT ) vpx_highbd_fdct8x8 ( src_diff , coeff , diff_stride ) ; else vp9_highbd_fht8x8 ( src_diff , coeff , diff_stride , tx_type ) ; vpx_highbd_quantize_b ( coeff , 64 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) { vp9_highbd_iht8x8_add ( tx_type , dqcoeff , dst , dst_stride , * eob , xd -> bd ) ; } break ; case TX_4X4 : if ( ! x -> skip_recode ) { vpx_highbd_subtract_block ( 4 , 4 , src_diff , diff_stride , src , src_stride , dst , dst_stride , xd -> bd ) ; if ( tx_type != DCT_DCT ) vp9_highbd_fht4x4 ( src_diff , coeff , diff_stride , tx_type ) ; else x -> fwd_txm4x4 ( src_diff , coeff , diff_stride ) ; vpx_highbd_quantize_b ( coeff , 16 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) { if ( tx_type == DCT_DCT ) { x -> highbd_itxm_add ( dqcoeff , dst , dst_stride , * eob , xd -> bd ) ; } else { vp9_highbd_iht4x4_16_add ( dqcoeff , dst , dst_stride , tx_type , xd -> bd ) ; } } break ; default : assert ( 0 ) ; return ; } if ( * eob ) * ( args -> skip ) = 0 ; return ; } # endif switch ( tx_size ) { case TX_32X32 : if ( ! x -> skip_recode ) { vpx_subtract_block ( 32 , 32 , src_diff , diff_stride , src , src_stride , dst , dst_stride ) ; fdct32x32 ( x -> use_lp32x32fdct , src_diff , coeff , diff_stride ) ; vpx_quantize_b_32x32 ( coeff , 1024 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) vp9_idct32x32_add ( dqcoeff , dst , dst_stride , * eob ) ; break ; case TX_16X16 : if ( ! x -> skip_recode ) { vpx_subtract_block ( 16 , 16 , src_diff , diff_stride , src , src_stride , dst , dst_stride ) ; vp9_fht16x16 ( src_diff , coeff , diff_stride , tx_type ) ; vpx_quantize_b ( coeff , 256 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) vp9_iht16x16_add ( tx_type , dqcoeff , dst , dst_stride , * eob ) ; break ; case TX_8X8 : if ( ! x -> skip_recode ) { vpx_subtract_block ( 8 , 8 , src_diff , diff_stride , src , src_stride , dst , dst_stride ) ; vp9_fht8x8 ( src_diff , coeff , diff_stride , tx_type ) ; vpx_quantize_b ( coeff , 64 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) vp9_iht8x8_add ( tx_type , dqcoeff , dst , dst_stride , * eob ) ; break ; case TX_4X4 : if ( ! x -> skip_recode ) { vpx_subtract_block ( 4 , 4 , src_diff , diff_stride , src , src_stride , dst , dst_stride ) ; if ( tx_type != DCT_DCT ) vp9_fht4x4 ( src_diff , coeff , diff_stride , tx_type ) ; else x -> fwd_txm4x4 ( src_diff , coeff , diff_stride ) ; vpx_quantize_b ( coeff , 16 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) { if ( tx_type == DCT_DCT ) x -> itxm_add ( dqcoeff , dst , dst_stride , * eob ) ; else vp9_iht4x4_16_add ( dqcoeff , dst , dst_stride , tx_type ) ; } break ; default : assert ( 0 ) ; break ; } if ( * eob ) * ( args -> skip ) = 0 <S2SV_ModEnd> "
3930,"<S2SV_StartBug> UnpackRaster : <S2SV_EndBug> <S2SV_StartBug> image -> rows = Bitmap2Header1 . Height ; <S2SV_EndBug> <S2SV_StartBug> status = SetImageExtent ( image , image -> columns , image -> rows , exception ) ; <S2SV_EndBug> ","<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows , exception ) ; if ( status == MagickFalse ) break ; <S2SV_ModStart> ; status = SetImageExtent ( image , image -> columns , image -> rows , exception ) ; if ( status == MagickFalse ) break <S2SV_ModStart>  <S2SV_ModEnd> "
3931,<S2SV_StartBug> if ( ! EmptyString ( cli_sslclifp ( cptr ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! EmptyString ( cli_sslclifp ( cptr ) ) ) <S2SV_EndBug> ,"<S2SV_ModStart> * parv [ 1 ] == ':' || strchr ( parv [ 1 ] , '<S2SV_blank>' ) ) return exit_client ( cptr , sptr , sptr , ""Malformed<S2SV_blank>AUTHENTICATE"" ) ; if ( <S2SV_ModStart> * parv [ 1 ] == ':' || strchr ( parv [ 1 ] , '<S2SV_blank>' ) ) return exit_client ( cptr , sptr , sptr , ""Malformed<S2SV_blank>AUTHENTICATE"" ) ; if ( "
3932,"<S2SV_StartBug> int ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( d2i_ECDSA_SIG ( & s , & sigbuf , sig_len ) == NULL ) goto err ; <S2SV_EndBug> <S2SV_StartBug> ECDSA_SIG_free ( s ) ; <S2SV_EndBug> ","<S2SV_ModStart> const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> p <S2SV_ModEnd> <S2SV_ModStart> goto err ; derlen = i2d_ECDSA_SIG ( s , & der ) ; if ( derlen != sig_len || memcmp ( sigbuf , der , derlen ) ) <S2SV_ModStart> if ( derlen > 0 ) { OPENSSL_cleanse ( der , derlen ) ; OPENSSL_free ( der ) ; } "
3933,"<S2SV_StartBug> switch ( af ) { <S2SV_EndBug> <S2SV_StartBug> strncpy ( addr_text , <S2SV_EndBug> <S2SV_StartBug> ( ( struct sockaddr_un * ) sock_addr ) -> sun_path , <S2SV_EndBug> ","<S2SV_ModStart> size_t pathlen = 0 ; <S2SV_ModStart> pathlen = sizeof ( <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( MAXPATHLEN <= pathlen ) { pathlen = MAXPATHLEN - 1 ; } strncpy ( addr_text , ( ( struct sockaddr_un * ) sock_addr ) -> sun_path , pathlen ) ; addr_text [ pathlen <S2SV_ModEnd> "
3934,<S2SV_StartBug> struct tpacket_req * req = & req_u -> req ; <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> release_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( pg_vec ) <S2SV_EndBug> ,"<S2SV_ModStart> ; lock_sock ( sk ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( pg_vec ) free_pg_vec ( pg_vec , order , req -> tp_block_nr ) ; out : <S2SV_ModStart>  <S2SV_ModEnd> "
3935,<S2SV_StartBug> ! no_port_forwarding_flag && ! options . disable_forwarding ) { <S2SV_EndBug> ,<S2SV_ModStart> && use_privsep 
3936,"<S2SV_StartBug> RANGE_CHECK_HI ( cfg , rc_undershoot_pct , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK_HI ( cfg , rc_overshoot_pct , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK ( cfg , ss_number_layers , 1 , VPX_SS_MAX_LAYERS ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> ts_number_layers > 1 ) { <S2SV_EndBug> <S2SV_StartBug> unsigned int i ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 1 ; i < cfg -> ts_number_layers ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> ERROR ( ""ts_target_bitrate<S2SV_blank>entries<S2SV_blank>are<S2SV_blank>not<S2SV_blank>increasing"" ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = cfg -> ts_number_layers - 2 ; i > 0 ; -- i ) <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> ts_rate_decimator [ i - 1 ] != 2 * cfg -> ts_rate_decimator [ i ] ) <S2SV_EndBug> <S2SV_StartBug> ERROR ( ""ts_rate_decimator<S2SV_blank>factors<S2SV_blank>are<S2SV_blank>not<S2SV_blank>powers<S2SV_blank>of<S2SV_blank>2"" ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK_BOOL ( extra_cfg , enable_auto_alt_ref ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK ( extra_cfg , cpu_used , - 16 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK ( extra_cfg , arnr_type , 1 , 3 ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK ( extra_cfg , cq_level , 0 , 63 ) ; <S2SV_EndBug> <S2SV_StartBug> size_t packet_sz = sizeof ( FIRSTPASS_STATS ) ; <S2SV_EndBug> <S2SV_StartBug> int n_packets = ( int ) ( cfg -> rc_twopass_stats_in . sz / packet_sz ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> ss_number_layers > 1 ) { <S2SV_EndBug> <S2SV_StartBug> || ( int ) ( stats -> count + 0.5 ) != n_packets_per_layer [ layer_id ] - 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> g_profile <= ( unsigned int ) PROFILE_1 && <S2SV_EndBug> <S2SV_StartBug> extra_cfg -> bit_depth > BITS_8 ) <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> g_profile > ( unsigned int ) PROFILE_1 && <S2SV_EndBug> <S2SV_StartBug> extra_cfg -> bit_depth == BITS_8 ) <S2SV_EndBug> ","<S2SV_ModStart> 100 <S2SV_ModEnd> <S2SV_ModStart> 100 <S2SV_ModEnd> <S2SV_ModStart> extra_cfg , min_gf_interval , 0 , ( MAX_LAG_BUFFERS - 1 ) ) ; RANGE_CHECK ( extra_cfg , max_gf_interval , 0 , ( MAX_LAG_BUFFERS - 1 ) ) ; if ( extra_cfg -> max_gf_interval > 0 ) { RANGE_CHECK ( extra_cfg , max_gf_interval , 2 , ( MAX_LAG_BUFFERS - 1 ) ) ; } if ( extra_cfg -> min_gf_interval > 0 && extra_cfg -> max_gf_interval > 0 ) { RANGE_CHECK ( extra_cfg , max_gf_interval , extra_cfg -> min_gf_interval , ( MAX_LAG_BUFFERS - 1 ) ) ; } if ( cfg -> rc_resize_allowed == 1 ) { RANGE_CHECK ( cfg , rc_scaled_width , 0 , cfg -> g_w ) ; RANGE_CHECK ( cfg , rc_scaled_height , 0 , cfg -> g_h ) ; } RANGE_CHECK ( <S2SV_ModStart> ss_number_layers * cfg -> ts_number_layers > VPX_MAX_LAYERS ) ERROR ( ""ss_number_layers<S2SV_blank>*<S2SV_blank>ts_number_layers<S2SV_blank>is<S2SV_blank>out<S2SV_blank>of<S2SV_blank>range"" ) ; if ( cfg -> ts_number_layers > <S2SV_ModEnd> <S2SV_ModStart> sl , tl <S2SV_ModEnd> <S2SV_ModStart> sl = 1 ; sl <S2SV_ModEnd> <S2SV_ModStart> ss_number_layers ; ++ sl ) { for ( tl = 1 ; tl < cfg -> <S2SV_ModStart> tl ) { const int layer = LAYER_IDS_TO_IDX ( sl , tl , cfg -> ts_number_layers ) ; if ( cfg -> layer_target_bitrate [ layer ] < cfg -> layer_target_bitrate [ layer <S2SV_ModEnd> <S2SV_ModStart> } } <S2SV_ModStart> tl <S2SV_ModEnd> <S2SV_ModStart> tl <S2SV_ModEnd> <S2SV_ModStart> tl <S2SV_ModEnd> <S2SV_ModStart> tl <S2SV_ModEnd> <S2SV_ModStart> tl ] ) ERROR ( ""ts_rate_decimator<S2SV_blank>factors<S2SV_blank>are<S2SV_blank>not<S2SV_blank>powers<S2SV_blank>of<S2SV_blank>2"" ) ; } # if CONFIG_SPATIAL_SVC if ( ( cfg -> ss_number_layers > 1 || cfg -> ts_number_layers > 1 ) && cfg -> g_pass == VPX_RC_LAST_PASS ) { unsigned int i , alt_ref_sum = 0 ; for ( i = 0 ; i < cfg -> ss_number_layers ; ++ i ) { if ( cfg -> ss_enable_auto_alt_ref [ <S2SV_ModStart> ++ alt_ref_sum ; } if ( alt_ref_sum > REF_FRAMES - cfg -> ss_number_layers ) ERROR ( ""Not<S2SV_blank>enough<S2SV_blank>ref<S2SV_blank>buffers<S2SV_blank>for<S2SV_blank>svc<S2SV_blank>alt<S2SV_blank>ref<S2SV_blank>frames"" ) ; if ( cfg -> ss_number_layers * cfg -> ts_number_layers > 3 && cfg -> g_error_resilient == 0 ) ERROR ( ""Multiple<S2SV_blank>frame<S2SV_blank>context<S2SV_blank>are<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>for<S2SV_blank>more<S2SV_blank>than<S2SV_blank>3<S2SV_blank>layers"" ) ; } # endif <S2SV_ModEnd> <S2SV_ModStart> RANGE_CHECK <S2SV_ModEnd> <S2SV_ModStart> , 0 , 2 <S2SV_ModStart> 8 , 8 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) ; RANGE_CHECK ( cfg , g_bit_depth , VPX_BITS_8 , VPX_BITS_12 ) ; RANGE_CHECK ( cfg , g_input_bit_depth , 8 , 12 ) ; RANGE_CHECK ( extra_cfg , content , VP9E_CONTENT_DEFAULT , VP9E_CONTENT_INVALID - 1 <S2SV_ModStart> const <S2SV_ModStart> const <S2SV_ModStart> > 1 || cfg -> ts_number_layers <S2SV_ModStart> unsigned <S2SV_ModStart> # if ! CONFIG_VP9_HIGHBITDEPTH if ( cfg -> g_profile > ( unsigned int ) PROFILE_1 ) { ERROR ( ""Profile<S2SV_blank>><S2SV_blank>1<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>this<S2SV_blank>build<S2SV_blank>configuration"" ) ; } # endif <S2SV_ModStart> cfg -> g_bit_depth > VPX_BITS_8 ) { ERROR ( ""Codec<S2SV_blank>high<S2SV_blank>bit-depth<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile<S2SV_blank><<S2SV_blank>2"" ) ; } <S2SV_ModEnd> <S2SV_ModStart> <= <S2SV_ModEnd> <S2SV_ModStart> cfg -> g_input_bit_depth > 8 ) { ERROR ( ""Source<S2SV_blank>high<S2SV_blank>bit-depth<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile<S2SV_blank><<S2SV_blank>2"" ) ; } if ( cfg -> g_profile > ( unsigned int ) PROFILE_1 && cfg -> g_bit_depth == VPX_BITS_8 ) { ERROR ( ""Codec<S2SV_blank>bit-depth<S2SV_blank>8<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile<S2SV_blank>><S2SV_blank>1"" ) ; } RANGE_CHECK ( extra_cfg , color_space , VPX_CS_UNKNOWN , VPX_CS_SRGB <S2SV_ModEnd> "
3937,"<S2SV_StartBug> static vpx_codec_err_t vp8_get_last_ref_frame ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3938,<S2SV_StartBug> char added ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3939,<S2SV_StartBug> blk_cleanup_queue ( cd -> disk -> queue ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! cd -> disk ) continue ; 
3940,<S2SV_StartBug> if ( sum_calculated != headersum ) { <S2SV_EndBug> ,<S2SV_ModStart> lha -> compsize < 0 ) goto invalid ; if ( 
3941,"<S2SV_StartBug> int fd = accept ( s , ( struct sockaddr * ) & client_address , & clen ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3942,<S2SV_StartBug> if ( net != & init_net ) <S2SV_EndBug> ,<S2SV_ModStart> protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if ( 
3943,"<S2SV_StartBug> rb_define_method ( req_class , ""rack_version"" , rack_version , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> rack_version_val = rb_str_new_cstr ( ""rack.version"" ) ; rb_gc_register_address ( & rack_version_val ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""remote_addr"" , remote_addr , 0 ) ; rb_define_method ( req_class , <S2SV_ModStart> ) ; remote_addr_val = rb_str_new_cstr ( ""REMOTE_ADDR"" ) ; rb_gc_register_address ( & remote_addr_val "
3944,"<S2SV_StartBug> static void calc_segtree_probs ( int * segcounts , vp9_prob * segment_tree_probs ) { <S2SV_EndBug> ",<S2SV_ModStart> vpx_prob <S2SV_ModEnd> 
3945,"<S2SV_StartBug> opt = xchg ( & np -> opt , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> <S2SV_StartBug> opt = ipv6_renew_options ( sk , np -> opt , optname , <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> <S2SV_StartBug> opt -> tot_len = sizeof ( * opt ) + optlen ; <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> ","<S2SV_ModStart> ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> { atomic_sub ( opt -> tot_len , & sk -> sk_omem_alloc ) ; txopt_put ( opt ) ; } <S2SV_ModEnd> <S2SV_ModStart> rcu_dereference_protected ( np -> opt , sock_owned_by_user ( sk ) ) ; opt = <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { atomic_sub ( opt -> tot_len , & sk -> sk_omem_alloc ) ; txopt_put ( opt ) ; } <S2SV_ModEnd> <S2SV_ModStart> atomic_set ( & opt -> refcnt , 1 ) ; <S2SV_ModStart> { atomic_sub ( opt -> tot_len , & sk -> sk_omem_alloc ) ; txopt_put ( opt ) ; } <S2SV_ModEnd> "
3946,"<S2SV_StartBug> JSObjectRef globalobject ; <S2SV_EndBug> <S2SV_StartBug> globalobject = JSContextGetGlobalObject ( context ) ; <S2SV_EndBug> <S2SV_StartBug> JSObjectDeleteProperty ( context , globalobject , var_name , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3947,"<S2SV_StartBug> const int zbin = cpi -> zbin_mode_boost + x -> act_zbin_adj ; <S2SV_EndBug> <S2SV_StartBug> x -> plane [ 0 ] . quant_shift = quants -> y_quant_shift [ qindex ] ; <S2SV_EndBug> <S2SV_StartBug> x -> plane [ 0 ] . zbin_extra = ( int16_t ) ( ( cm -> y_dequant [ qindex ] [ 1 ] * zbin ) >> 7 ) ; <S2SV_EndBug> <S2SV_StartBug> x -> plane [ i ] . quant_shift = quants -> uv_quant_shift [ qindex ] ; <S2SV_EndBug> <S2SV_StartBug> x -> plane [ i ] . zbin_extra = ( int16_t ) ( ( cm -> uv_dequant [ qindex ] [ 1 ] * zbin ) >> 7 ) ; <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_ALPHA <S2SV_EndBug> <S2SV_StartBug> x -> skip_block = vp9_segfeature_active ( & cm -> seg , segment_id , SEG_LVL_SKIP ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_initialize_me_consts ( cpi , x -> q_index ) ; <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> quant_fp = quants -> y_quant_fp [ qindex ] ; x -> plane [ 0 ] . round_fp = quants -> y_round_fp [ qindex ] ; x -> plane [ 0 ] . <S2SV_ModStart> xd -> plane [ 0 ] . dequant = cpi <S2SV_ModEnd> <S2SV_ModStart> ; x -> plane [ 0 ] . quant_thred [ 0 ] = x -> plane [ 0 ] . zbin [ 0 ] * x -> plane [ 0 ] . zbin [ 0 ] ; x -> plane [ 0 ] . quant_thred [ 1 ] = x -> plane [ 0 ] . zbin [ 1 ] * x -> plane [ 0 ] . zbin [ 1 <S2SV_ModEnd> <S2SV_ModStart> quant_fp = quants -> uv_quant_fp [ qindex ] ; x -> plane [ i ] . round_fp = quants -> uv_round_fp [ qindex ] ; x -> plane [ i ] . <S2SV_ModStart> xd -> plane [ i ] . dequant = cpi <S2SV_ModEnd> <S2SV_ModStart> ; x -> plane [ i ] . quant_thred [ 0 ] = x -> plane [ i ] . zbin [ 0 ] * x -> plane [ i ] . zbin [ 0 ] ; x -> plane [ i ] . quant_thred [ 1 ] = x -> plane [ i ] . zbin [ 1 ] * x -> plane [ i ] . zbin [ 1 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> segfeature_active <S2SV_ModEnd> <S2SV_ModStart> , x "
3948,<S2SV_StartBug> if ( label_exec ( opt_exec_label ) == - 1 ) <S2SV_EndBug> ,"<S2SV_ModStart> setsid ( ) == ( pid_t ) - 1 ) die_with_error ( ""setsid"" ) ; if ( "
3949,<S2SV_StartBug> same_page : <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( page_count ( page ) <= 0 ) ) { if ( pages ) { spin_unlock ( ptl ) ; remainder = 0 ; err = - ENOMEM ; break ; } } 
3950,<S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> oxcf -> tuning = vp8_cfg . tuning ; <S2SV_EndBug> ,<S2SV_ModStart> else ( void ) mr_cfg ; # <S2SV_ModStart> ; oxcf -> screen_content_mode = vp8_cfg . screen_content_mode 
3951,<S2SV_StartBug> usleep ( us_delay ) ; <S2SV_EndBug> ,<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
3952,<S2SV_StartBug> if ( ctx -> pbi ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> pbi = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> frame_workers != NULL ) { int i ; for ( i = 0 ; i < ctx -> num_frame_workers ; ++ i ) { VPxWorker * const worker = & ctx -> frame_workers [ i ] ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; vpx_get_worker_interface ( ) -> end ( worker ) ; vp9_remove_common ( & frame_worker_data -> pbi -> common ) ; # if CONFIG_VP9_POSTPROC vp9_free_postproc_buffers ( & frame_worker_data -> pbi -> common ) ; # endif vp9_decoder_remove ( frame_worker_data <S2SV_ModEnd> <S2SV_ModStart> vpx_free ( frame_worker_data -> scratch_buffer ) ; # if CONFIG_MULTITHREAD pthread_mutex_destroy ( & frame_worker_data -> stats_mutex ) ; pthread_cond_destroy ( & frame_worker_data -> stats_cond ) ; # endif vpx_free ( frame_worker_data ) ; } # if CONFIG_MULTITHREAD pthread_mutex_destroy ( & ctx -> buffer_pool -> pool_mutex ) ; # endif } if ( ctx -> buffer_pool ) { vp9_free_ref_frame_buffers ( ctx -> buffer_pool ) ; vp9_free_internal_frame_buffers ( & ctx -> buffer_pool -> int_frame_buffers ) ; } vpx_free ( ctx -> frame_workers ) ; vpx_free ( ctx -> buffer_pool ) ; <S2SV_ModEnd> 
3953,"<S2SV_StartBug> c_t = tvb_get_bits8 ( tvb , tb_bit_off , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> macinf -> lchid [ j + chan ] = c_t + 1 ; <S2SV_EndBug> <S2SV_StartBug> macinf -> content [ j + chan ] = lchId_type_table [ c_t + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> rlcinf -> mode [ j + chan ] = lchId_rlc_map [ c_t + 1 ] ; <S2SV_EndBug> ",<S2SV_ModStart> ( <S2SV_ModStart> + 1 ) % 0xf <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
3954,<S2SV_StartBug> if ( setuid ( current_user . uid ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( setgid ( current_user . gid ) < 0 ) <S2SV_EndBug> ,"<S2SV_ModStart> # if HAVE_DECL_SETRESUID if ( setresuid ( current_user . uid , current_user . uid , current_user . uid ) < 0 ) # else <S2SV_ModStart> # endif <S2SV_ModStart> # if HAVE_DECL_SETRESGID if ( setresgid ( current_user . gid , current_user . gid , current_user . gid ) < 0 ) # else <S2SV_ModStart> # endif "
3955,"<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> 
3956,<S2SV_StartBug> int copy = output_size - count ; <S2SV_EndBug> <S2SV_StartBug> if ( avail < copy ) copy = avail ; <S2SV_EndBug> ,<S2SV_ModStart> png_size_t <S2SV_ModEnd> <S2SV_ModStart> ( png_size_t ) <S2SV_ModStart> ( png_size_t ) 
3957,"<S2SV_StartBug> pi -> xstep = pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + <S2SV_EndBug> <S2SV_StartBug> pi -> ystep = pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + <S2SV_EndBug> <S2SV_StartBug> pi -> xstep = JAS_MIN ( pi -> xstep , pi -> picomp -> hsamp * ( 1 << <S2SV_EndBug> <S2SV_StartBug> pi -> ystep = JAS_MIN ( pi -> ystep , pi -> picomp -> vsamp * ( 1 << <S2SV_EndBug> ","<S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> <S2SV_ModStart> JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> <S2SV_ModStart> ( JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> <S2SV_ModStart> ( JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> "
3958,"<S2SV_StartBug> struct keydata * keyptr ; <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = half_md4_transform ( hash , keyptr -> secret ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> unsigned int ret <S2SV_ModEnd> <S2SV_ModStart> md5_transform <S2SV_ModEnd> <S2SV_ModStart> random_int_secret ) ; ret = hash [ 0 ] <S2SV_ModEnd> 
3959,"<S2SV_StartBug> if ( using_compacted_format ( ) ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> err = __copy_from_user ( & fpu -> state . xsave , buf_fx , state_size ) ; <S2SV_EndBug> ","<S2SV_ModStart> { <S2SV_ModStart> } else { <S2SV_ModEnd> <S2SV_ModStart> if ( ! err && state_size > offsetof ( struct xregs_state , header ) && fpu -> state . xsave . header . xcomp_bv ) err = - EINVAL ; } "
3960,"<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horAcc32 ( tif , cp0 , cc ) ; <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return 
3961,<S2SV_StartBug> if ( c -> chunk_size == 0 ) <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug> ,<S2SV_ModStart> <= 0 ) { c -> chunk_size = 0 ; goto fail ; } <S2SV_ModEnd> <S2SV_ModStart> av_assert0 ( len <= c -> chunk_size ) ; 
3962,<S2SV_StartBug> u16 source_node_id ; <S2SV_EndBug> <S2SV_StartBug> specifier_id = ( be32_to_cpu ( buf_ptr [ 0 ] ) & 0xffff ) << 8 <S2SV_EndBug> <S2SV_StartBug> ( ver == RFC2734_SW_VERSION <S2SV_EndBug> <S2SV_StartBug> || ver == RFC3146_SW_VERSION <S2SV_EndBug> <S2SV_StartBug> ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( length > IEEE1394_GASP_HDR_SIZE && gasp_specifier_id ( buf_ptr ) <S2SV_ModEnd> <S2SV_ModStart> gasp_version ( buf_ptr ) <S2SV_ModEnd> <S2SV_ModStart> gasp_version ( buf_ptr ) <S2SV_ModEnd> <S2SV_ModStart> fwnet_incoming_packet ( dev , buf_ptr + 2 , length - IEEE1394_GASP_HDR_SIZE , gasp_source_id ( buf_ptr ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3963,<S2SV_StartBug> sc = create_spnego_ctx ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> 0 
3964,<S2SV_StartBug> len -= EVP_GCM_TLS_EXPLICIT_IV_LEN ; <S2SV_EndBug> <S2SV_StartBug> if ( ! EVP_CIPHER_CTX_encrypting ( c ) ) <S2SV_EndBug> <S2SV_StartBug> len -= EVP_GCM_TLS_TAG_LEN ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len < EVP_GCM_TLS_EXPLICIT_IV_LEN ) return 0 ; <S2SV_ModStart> { if ( len < EVP_GCM_TLS_TAG_LEN ) return 0 ; <S2SV_ModStart> } 
3965,"<S2SV_StartBug> int r , len , group = 0 ; <S2SV_EndBug> <S2SV_StartBug> Node * * tp ; <S2SV_EndBug> <S2SV_StartBug> goto end_of_token ; <S2SV_EndBug> <S2SV_StartBug> qn = node_new_quantifier ( tok -> u . repeat . lower , tok -> u . repeat . upper , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; unsigned int parse_depth ; group = 0 <S2SV_ModStart> ; parse_depth = env -> parse_depth <S2SV_ModStart> parse_depth ++ ; if ( parse_depth > ParseDepthLimit ) return ONIGERR_PARSE_DEPTH_LIMIT_OVER ; 
3966,"<S2SV_StartBug> const int length , const char check_utf8 , const char check_dot , <S2SV_EndBug> <S2SV_StartBug> int position = 0 ; <S2SV_EndBug> ",<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> 
3967,"<S2SV_StartBug> q = QueueAuthenticPixels ( image , x , y , Min ( 4 , dds_info -> width - x ) , <S2SV_EndBug> <S2SV_StartBug> Min ( 4 , dds_info -> height - y ) , exception ) ; <S2SV_EndBug> <S2SV_StartBug> SkipDXTMipmaps ( image , dds_info , 16 ) ; <S2SV_EndBug> ","<S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> return ( <S2SV_ModStart> , exception ) ) <S2SV_ModEnd> "
3968,<S2SV_StartBug> if ( getCcalls ( L ) <= CSTACKERR ) <S2SV_EndBug> <S2SV_StartBug> luaE_freeCI ( L ) ; <S2SV_EndBug> ,<S2SV_ModStart> { luaE_exitCcall <S2SV_ModEnd> <S2SV_ModStart> luaE_enterCcall ( L ) ; } 
3969,"<S2SV_StartBug> sas_discover_event ( dev -> port , DISCE_DESTRUCT ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3970,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""who-has<S2SV_blank>%s"" , ipaddr_string ( ndo , ATMTPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""tell<S2SV_blank>%s"" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%s<S2SV_blank>is-at<S2SV_blank>"" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""at<S2SV_blank>%s"" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""for<S2SV_blank>%s"" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""who-has<S2SV_blank>"" ) ) ; atmarp_tpaddr_print ( ndo , ap , pro <S2SV_ModEnd> <S2SV_ModStart> ""<S2SV_blank>tell<S2SV_blank>"" ) ) ; atmarp_spaddr_print ( ndo , ap , pro <S2SV_ModEnd> <S2SV_ModStart> atmarp_spaddr_print ( ndo , ap , pro ) ; ND_PRINT ( ( ndo , ""<S2SV_blank>is-at<S2SV_blank>"" <S2SV_ModEnd> <S2SV_ModStart> ""at<S2SV_blank>"" ) ) ; atmarp_spaddr_print ( ndo , ap , pro <S2SV_ModEnd> <S2SV_ModStart> ""for<S2SV_blank>"" ) ) ; atmarp_spaddr_print ( ndo , ap , pro <S2SV_ModEnd> "
3971,"<S2SV_StartBug> h -> emptyStreamBools = calloc ( ( size_t ) zip -> numFiles , <S2SV_EndBug> <S2SV_StartBug> h -> emptyFileBools = calloc ( empty_streams , <S2SV_EndBug> <S2SV_StartBug> h -> antiBools = calloc ( empty_streams , <S2SV_EndBug> <S2SV_StartBug> if ( ( ll & 1 ) || ll < zip -> numFiles * 4 ) <S2SV_EndBug> <S2SV_StartBug> h -> attrBools = calloc ( ( size_t ) zip -> numFiles , <S2SV_EndBug> ",<S2SV_ModStart> if ( h -> emptyStreamBools != NULL ) return ( - 1 ) ; <S2SV_ModStart> if ( h -> emptyFileBools != NULL ) return ( - 1 ) ; <S2SV_ModStart> if ( h -> antiBools != NULL ) return ( - 1 ) ; <S2SV_ModStart> ) return ( - 1 ) ; if ( zip -> entry_names != NULL <S2SV_ModStart> if ( h -> attrBools != NULL ) return ( - 1 ) ; 
3972,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> av_assert1 ( avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ; <S2SV_EndBug> ,<S2SV_ModStart> MpegEncContext * s = avctx -> priv_data ; <S2SV_ModStart> s -> studio_profile <S2SV_ModEnd> 
3973,<S2SV_StartBug> len = file ? file -> size : 4096 ; <S2SV_EndBug> ,<S2SV_ModStart> && file -> size > 0 
3974,"<S2SV_StartBug> if ( data_sz <= 8 ) <S2SV_EndBug> <S2SV_StartBug> struct vp9_read_bit_buffer rb = { data , data + data_sz , 0 , NULL , NULL } ; <S2SV_EndBug> ","<S2SV_ModStart> return decoder_peek_si_internal ( data , data_sz , si <S2SV_ModEnd> <S2SV_ModStart> , NULL ) <S2SV_ModEnd> "
3975,<S2SV_StartBug> vstart += entry -> vn_aux ; <S2SV_EndBug> ,<S2SV_ModStart> st32 vnaux = entry -> vn_aux ; if ( vnaux < 1 ) { goto beach ; } vstart += vnaux <S2SV_ModEnd> 
3976,<S2SV_StartBug> return code ; <S2SV_EndBug> ,"<S2SV_ModStart> { * status = ""DECODE_PA_FOR_USER"" ; return code ; } <S2SV_ModEnd> "
3977,"<S2SV_StartBug> record_and_restart ( event , val , regs , nmi ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3978,<S2SV_StartBug> if ( pSubSrc -> nSrc > 1 || isAgg || IsVirtual ( pSubSrc -> a [ 0 ] . pTab ) ) { <S2SV_EndBug> ,<S2SV_ModStart> || ( p -> selFlags & SF_Distinct ) != 0 
3979,"<S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , unsigned char , best_predictor , 16 * 4 ) ; <S2SV_EndBug> <S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , short , best_dqcoeff , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( best_dqcoeff , b -> dqcoeff , 32 ) ; <S2SV_EndBug> ",<S2SV_ModStart> DECLARE_ALIGNED <S2SV_ModEnd> <S2SV_ModStart> [ <S2SV_ModEnd> <S2SV_ModStart> ] ) ; DECLARE_ALIGNED <S2SV_ModEnd> <S2SV_ModStart> [ 16 ] <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
3980,<S2SV_StartBug> struct pipe_buffer * buf ; <S2SV_EndBug> <S2SV_StartBug> orig_sz = size ; <S2SV_EndBug> <S2SV_StartBug> if ( off ) <S2SV_EndBug> <S2SV_StartBug> size += off - pipe -> bufs [ idx ] . offset ; <S2SV_EndBug> <S2SV_StartBug> if ( size <= buf -> len ) <S2SV_EndBug> <S2SV_StartBug> size -= buf -> len ; <S2SV_EndBug> <S2SV_StartBug> buf -> len = size ; <S2SV_EndBug> <S2SV_StartBug> off = i -> iov_offset = buf -> offset + size ; <S2SV_EndBug> <S2SV_StartBug> i -> count -= orig_sz ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> struct pipe_buffer * buf ; size_t off = i -> iov_offset , left = size ; int idx = i -> idx ; <S2SV_ModStart> left <S2SV_ModEnd> <S2SV_ModStart> left <S2SV_ModEnd> <S2SV_ModStart> left <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> left ; <S2SV_ModEnd> <S2SV_ModStart> size ; pipe_truncate ( i ) <S2SV_ModEnd> "
3981,"<S2SV_StartBug> PyObject * logical = NULL ; <S2SV_EndBug> <S2SV_StartBug> FriBidiParType base = FRIBIDI_TYPE_RTL ; <S2SV_EndBug> <S2SV_StartBug> { ""logical"" , ""base_direction"" , ""encoding"" , ""clean"" , ""reordernsm"" , NULL } ; <S2SV_EndBug> <S2SV_StartBug> if ( ! PyArg_ParseTupleAndKeywords ( args , kw , ""O|isii"" , kwargs , <S2SV_EndBug> <S2SV_StartBug> & logical , & base , & encoding , & clean , & reordernsm ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> base == FRIBIDI_TYPE_LTR || base == FRIBIDI_TYPE_ON ) ) <S2SV_EndBug> <S2SV_StartBug> if ( PyUnicode_Check ( logical ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( PyString_Check ( logical ) ) <S2SV_EndBug> ","<S2SV_ModStart> PyUnicodeObject <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""U|iii"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } return unicode_log2vis <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
3982,<S2SV_StartBug> wp -> socket_mode = 0666 ; <S2SV_EndBug> ,<S2SV_ModStart> 0660 <S2SV_ModEnd> 
3983,<S2SV_StartBug> i1_is_end_of_poc = 0 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> 1 ; <S2SV_ModEnd> <S2SV_ModStart> if ( ps_dec -> u4_first_slice_in_pic != 2 ) { i1_is_end_of_poc = ih264d_is_end_of_pic ( u2_frame_num , u1_nal_ref_idc , & s_tmp_poc , & ps_dec -> s_cur_pic_poc , ps_cur_slice , u1_pic_order_cnt_type , u1_nal_unit_type , u4_idr_pic_id , u1_field_pic_flag , u1_bottom_field_flag ) ; <S2SV_ModEnd> "
3984,<S2SV_StartBug> H264_MUTEX_UNLOCK ( & ps_dec -> process_disp_mutex ) ; <S2SV_EndBug> ,<S2SV_ModStart> ps_dec -> u4_first_slice_in_pic = 0 ; 
3985,<S2SV_StartBug> if ( g -> sect <= 0 || <S2SV_EndBug> <S2SV_StartBug> g -> head <= 0 || <S2SV_EndBug> ,<S2SV_ModStart> ( int ) <S2SV_ModStart> ( int ) <S2SV_ModStart> <= 0 || ( int ) ( g -> sect * g -> head ) 
3986,"<S2SV_StartBug> u64 base_addr , size ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( get_securelevel ( ) > 0 ) return - EPERM 
3987,"<S2SV_StartBug> if ( ! IS_POSIXACL ( inode ) || ! inode -> i_op -> set_acl ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> error = inode -> i_op -> set_acl ( inode , argp -> acl_access , ACL_TYPE_ACCESS ) ; <S2SV_EndBug> <S2SV_StartBug> error = inode -> i_op -> set_acl ( inode , argp -> acl_default , <S2SV_EndBug> <S2SV_StartBug> out_drop_write : <S2SV_EndBug> ","<S2SV_ModStart> error = fh_want_write ( fh ) ; if ( error ) <S2SV_ModEnd> <S2SV_ModStart> fh_lock ( fh ) ; error = set_posix_acl ( inode , ACL_TYPE_ACCESS <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode , ACL_TYPE_DEFAULT <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( error ) goto out_drop_lock ; fh_unlock ( fh ) <S2SV_ModEnd> <S2SV_ModStart> out_drop_lock : fh_unlock ( fh ) ; <S2SV_ModEnd> "
3988,<S2SV_StartBug> dev -> netdev_ops = & bnep_netdev_ops ; <S2SV_EndBug> ,<S2SV_ModStart> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> 
3989,"<S2SV_StartBug> uint32_t authResult = 0 , reasonLen = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ReadFromRFBServer ( client , ( char * ) & reasonLen , 4 ) ) return FALSE ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ReadReason ( client <S2SV_ModEnd> 
3990,<S2SV_StartBug> m -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
3991,"<S2SV_StartBug> cJSON * cJSON_CreateIntArray ( int64_t * numbers , int count ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; a && i < count ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> n = cJSON_CreateInt ( numbers [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! i ) <S2SV_EndBug> ",<S2SV_ModStart> const int <S2SV_ModEnd> <S2SV_ModStart> i ++ <S2SV_ModEnd> <S2SV_ModStart> cJSON_CreateNumber <S2SV_ModEnd> <S2SV_ModStart> if ( ! n ) { cJSON_Delete ( a ) ; return 0 ; } 
3992,<S2SV_StartBug> f2fs_wait_discard_bios ( sbi ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , true "
3993,<S2SV_StartBug> bitmap -> compressed = FALSE ; <S2SV_EndBug> <S2SV_StartBug> bitmap -> length = DstWidth * DstHeight * GetBytesPerPixel ( bitmap -> format ) ; <S2SV_EndBug> ,<S2SV_ModStart> UINT32 size = DstWidth * DstHeight ; <S2SV_ModStart> if ( ( GetBytesPerPixel ( bitmap -> format ) == 0 ) || ( DstWidth == 0 ) || ( DstHeight == 0 ) || ( DstWidth > UINT32_MAX / DstHeight ) || ( size > ( UINT32_MAX / GetBytesPerPixel ( bitmap -> format ) ) ) ) return FALSE ; size *= GetBytesPerPixel ( bitmap -> format ) ; <S2SV_ModStart> size <S2SV_ModEnd> 
3994,<S2SV_StartBug> devc -> voc [ voice ] . panning = value ; <S2SV_EndBug> ,<S2SV_ModStart> if ( voice < 0 || voice >= devc -> nr_voice ) return ; 
3995,<S2SV_StartBug> if ( server . vm_enabled && listLength ( server . io_ready_clients ) ) { <S2SV_EndBug> <S2SV_StartBug> server . vm_blocked_clients -- ; <S2SV_EndBug> ,<S2SV_ModStart> ds_enabled <S2SV_ModEnd> <S2SV_ModStart> cache_blocked_clients <S2SV_ModEnd> 
3996,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , sfar ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
3997,<S2SV_StartBug> while ( entries -- ) <S2SV_EndBug> ,<S2SV_ModStart> # ifdef LIBRAW_LIBRARY_BUILD imgdata . process_warnings |= LIBRAW_WARN_PARSEFUJI_PROCESSED ; # endif 
3998,<S2SV_StartBug> int Q = cpi -> active_worst_quality ; <S2SV_EndBug> ,<S2SV_ModStart> if ( cpi -> force_maxqp == 1 ) { cpi -> active_worst_quality = cpi -> worst_quality ; return cpi -> worst_quality ; } 
3999,<S2SV_StartBug> f = po -> fanout ; <S2SV_EndBug> <S2SV_StartBug> if ( ! f ) <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & fanout_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> f ) { <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & fanout_mutex ) ; } 
4000,"<S2SV_StartBug> void vp9_predict_intra_block ( const MACROBLOCKD * xd , int block_idx , int bwl_in , <S2SV_EndBug> <S2SV_StartBug> TX_SIZE tx_size , MB_PREDICTION_MODE mode , <S2SV_EndBug> <S2SV_StartBug> const int bwl = bwl_in - tx_size ; <S2SV_EndBug> <S2SV_StartBug> const int wmask = ( 1 << bwl ) - 1 ; <S2SV_EndBug> <S2SV_StartBug> const int have_top = ( block_idx >> bwl ) || xd -> up_available ; <S2SV_EndBug> <S2SV_StartBug> const int have_left = ( block_idx & wmask ) || xd -> left_available ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> bw <S2SV_ModEnd> <S2SV_ModStart> bwl_in ) ; const int txw = ( 1 << tx_size ) <S2SV_ModEnd> <S2SV_ModStart> loff <S2SV_ModEnd> <S2SV_ModStart> aoff || xd -> left_available ; const int have_right = ( aoff + txw ) < bw ; const int x = aoff * 4 ; const int y = loff * 4 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { build_intra_predictors_high ( xd , ref , ref_stride , dst , dst_stride , mode , tx_size , have_top , have_left , have_right , x , y , plane , xd -> bd ) ; return ; } # endif <S2SV_ModEnd> "
4001,"<S2SV_StartBug> z . kind = 0 ; <S2SV_EndBug> <S2SV_StartBug> # define PARSE_STRING s = parse_field ( ndo , & parse , & parselen ) ; if ( ! s ) lose = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( lose ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int truncated = 0 ; <S2SV_ModStart> , & truncated ) ; if ( truncated ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> return ; trunc : ND_PRINT ( ( ndo , ""<S2SV_blank>[|zephyr]<S2SV_blank>(%d)"" , length ) ) ; return ; "
4002,"<S2SV_StartBug> if ( CheckMemoryOverflow ( count , quantum ) != MagickFalse ) <S2SV_EndBug> ",<S2SV_ModStart> HeapOverflowSanityCheck <S2SV_ModEnd> 
4003,"<S2SV_StartBug> ( void ) CopyMagickMemory ( clone_info -> magick , magic_info -> name , MagickPathExtent ) ; <S2SV_EndBug> ",<S2SV_ModStart> strncpy <S2SV_ModEnd> 
4004,<S2SV_StartBug> for ( i = 0 ; i < len ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = 0xc0 | ( ( szLine [ i ] >> 6 ) & 0x3 ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( ( szLine [ i ] & 0xe0 ) == 0xc0 ) { <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug> ,"<S2SV_ModStart> && j < sizeof ( szLineConv ) - 1 ; i ++ , j <S2SV_ModEnd> <S2SV_ModStart> if ( j + 1 < sizeof ( szLineConv ) - 1 ) { <S2SV_ModStart> break ; } else <S2SV_ModStart> if ( j + 1 < sizeof ( szLineConv ) - 1 && i + 1 < len ) { szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; } else { break ; } <S2SV_ModEnd> <S2SV_ModStart> if ( j + 2 < sizeof ( szLineConv ) - 1 && i + 2 < len ) { szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; } else { break ; } <S2SV_ModEnd> <S2SV_ModStart> if ( j + 3 < sizeof ( szLineConv ) - 1 && i + 3 < len ) { szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; } else { break ; } <S2SV_ModEnd> <S2SV_ModStart> if ( j < sizeof ( szLineConv ) - 1 && i < len ) szLineConv [ j ] = szLine [ i ] ; } if ( j >= sizeof ( szLineConv ) ) szLineConv [ sizeof ( szLineConv ) - 1 ] = 0 ; else <S2SV_ModEnd> "
4005,"<S2SV_StartBug> void rdp_read_flow_control_pdu ( wStream * s , UINT16 * type ) <S2SV_EndBug> <S2SV_StartBug> UINT8 pduType ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! type ) return FALSE ; if ( Stream_GetRemainingLength ( s ) < 6 ) return FALSE <S2SV_ModStart> return TRUE ; 
4006,"<S2SV_StartBug> ikev1_attr_print ( netdissect_options * ndo , const u_char * p , const u_char * ep ) <S2SV_EndBug> <S2SV_StartBug> if ( p [ 0 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> if ( ep < p + totlen ) { <S2SV_EndBug> <S2SV_StartBug> return ep + 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> rawprint ( ndo , ( const uint8_t * ) & p [ 2 ] , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""len=%d<S2SV_blank>value="" , EXTRACT_16BITS ( & p [ 2 ] ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> rawprint ( ndo , ( const uint8_t * ) & p [ 4 ] , EXTRACT_16BITS ( & p [ 2 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> return p + totlen ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ep2 <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> { ND_TCHECK_16BITS ( & p [ 2 ] ) ; <S2SV_ModStart> } if ( ep2 <S2SV_ModEnd> <S2SV_ModStart> ep2 <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( & p [ 0 ] ) ; <S2SV_ModStart> if ( ! <S2SV_ModStart> ) { ND_PRINT ( ( ndo , "")"" ) ) ; goto trunc ; } <S2SV_ModEnd> <S2SV_ModStart> totlen - 4 ) ) ; if ( ! <S2SV_ModEnd> <S2SV_ModStart> totlen - 4 ) ) { <S2SV_ModEnd> <S2SV_ModStart> goto trunc ; } } ND_PRINT ( ( ndo , "")"" ) ) ; <S2SV_ModStart> trunc : return NULL ; "
4007,<S2SV_StartBug> uchar buf [ 2 ] ; <S2SV_EndBug> ,<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
4008,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> args -> rmtvaluelen = args -> valuelen ; 
4009,<S2SV_StartBug> passert ( GLOBALS_ARE_RESET ( ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4010,<S2SV_StartBug> while ( bin ) <S2SV_EndBug> <S2SV_StartBug> numones -= 1 ; <S2SV_EndBug> ,<S2SV_ModStart> && ( numones <= 16 ) <S2SV_ModStart>  <S2SV_ModEnd> 
4011,"<S2SV_StartBug> COM_DefaultExtension ( filename , sizeof ( filename ) , "".txt"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! COM_CompareExtension ( filename , "".txt"" ) ) { Com_Printf ( ""Con_Dump_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\"".txt\\""<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"" ) ; return ; } "
4012,"<S2SV_StartBug> unsigned_relts_print ( ndo , EXTRACT_16BITS ( bp ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""0x%08x"" , EXTRACT_32BITS ( bp ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""v%d"" , * bp ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>?0x%04x?"" , EXTRACT_16BITS ( bp + 2 ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( olen != 2 ) { ND_PRINT ( ( ndo , ""ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>2<S2SV_blank>Bytes<S2SV_blank>(%u)"" , olen ) ) ; } else { <S2SV_ModStart> } <S2SV_ModStart> if ( olen != 4 ) { ND_PRINT ( ( ndo , ""ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>Bytes<S2SV_blank>(%u)"" , olen ) ) ; } else { <S2SV_ModStart> } <S2SV_ModStart> if ( olen != 4 ) { ND_PRINT ( ( ndo , ""ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>Bytes<S2SV_blank>(%u)"" , olen ) ) ; } else { <S2SV_ModStart> } "
4013,<S2SV_StartBug> return to_o2nm_cluster ( node -> nd_item . ci_parent -> ci_parent ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( node -> nd_item . ci_parent ) <S2SV_ModStart> else return NULL ; 
4014,<S2SV_StartBug> int64_t cur_offset = avio_tell ( pb ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( par -> codec_type == AVMEDIA_TYPE_AUDIO && ! pkt -> size ) { av_log ( s , AV_LOG_WARNING , ""Empty<S2SV_blank>audio<S2SV_blank>Packet\\n"" ) ; return AVERROR ( EINVAL ) ; } "
4015,<S2SV_StartBug> if ( count >= 4 ) { <S2SV_EndBug> ,<S2SV_ModStart> > <S2SV_ModEnd> 
4016,<S2SV_StartBug> } else { <S2SV_EndBug> ,"<S2SV_ModStart> { uint8_t computedHvi [ 32 ] ; uint16_t HelloMessageLength = zrtpChannelContext -> selfPackets [ HELLO_MESSAGE_STORE_ID ] -> messageLength ; uint16_t DHPartHelloMessageStringLength = zrtpPacket -> messageLength + HelloMessageLength ; uint8_t * DHPartHelloMessageString = ( uint8_t * ) malloc ( DHPartHelloMessageStringLength * sizeof ( uint8_t ) ) ; memcpy ( DHPartHelloMessageString , input + ZRTP_PACKET_HEADER_LENGTH , zrtpPacket -> messageLength ) ; memcpy ( DHPartHelloMessageString + zrtpPacket -> messageLength , zrtpChannelContext -> selfPackets [ HELLO_MESSAGE_STORE_ID ] -> packetString + ZRTP_PACKET_HEADER_LENGTH , HelloMessageLength ) ; zrtpChannelContext -> hashFunction ( DHPartHelloMessageString , DHPartHelloMessageStringLength , 32 , computedHvi ) ; free ( DHPartHelloMessageString ) ; if ( memcmp ( computedHvi , peerCommitMessageData -> hvi , 32 ) != 0 ) { free ( messageData ) ; return BZRTP_PARSER_ERROR_UNMATCHINGHVI ; } } "
4017,"<S2SV_StartBug> ep = ( const u_char * ) ndo -> ndo_snapend ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( pim -> pim_rsv ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "",<S2SV_blank>RFC2117-encoding"" ) ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( PIM_TYPE ( pim -> pim_typever ) ) { <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , 4 + olen ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ptr < ( bp + olen ) ) { <S2SV_EndBug> <S2SV_StartBug> advance = pimv2_addr_print ( ndo , ptr , pimv2_unicast , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> bp += olen ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( bp + 4 ) , PIMV2_REGISTER_FLAG_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> EXTRACT_32BITS ( bp + 4 ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> bp += 8 ; len -= 8 ; <S2SV_EndBug> <S2SV_StartBug> switch ( IP_V ( ip ) ) { <S2SV_EndBug> <S2SV_StartBug> case 0 : <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; len -= 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> int i , j ; <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp + 4 > ep ) <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp + 4 > ep ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_source , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_source , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> jp_done : <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( bp + 1 >= ep ) break ; <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) break ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp + 1 >= ep ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>FRPcnt=%d"" , frpcnt = bp [ 1 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , <S2SV_EndBug> <S2SV_StartBug> if ( bp + 1 >= ep ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp + 2 >= ep ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "",prio=%d"" , bp [ 2 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> bs_done : <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; len -= 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( bp + 1 >= ep ) break ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>prio=%d"" , bp [ 1 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned_relts_print ( ndo , EXTRACT_16BITS ( & bp [ 2 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) break ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>grp="" ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>forwarder="" ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , 2 ) ; <S2SV_EndBug> ","<S2SV_ModStart> int pimv2_addr_len ; <S2SV_ModStart> if ( len < 2 ) goto trunc ; <S2SV_ModStart> ) ; if ( len < 4 ) goto trunc ; ND_TCHECK ( pim -> pim_cksum <S2SV_ModStart> bp += 4 ; len -= 4 ; <S2SV_ModStart> while ( len > 0 ) { if ( len < 4 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Option<S2SV_blank>(%u),<S2SV_blank>length<S2SV_blank>%u,<S2SV_blank>Value:<S2SV_blank>"" , tok2str ( pimv2_hello_option_values , ""Unknown"" , otype ) , otype , olen ) ) ; bp += 4 ; len -= 4 ; if ( len < olen ) goto trunc ; <S2SV_ModStart> olen ) <S2SV_ModEnd> <S2SV_ModStart> u_int plen = len ; <S2SV_ModStart> plen , pimv2_unicast , pimv2_addr_len , 0 ) ; if ( advance < 0 ) goto trunc ; ptr += advance ; plen -= <S2SV_ModEnd> <S2SV_ModStart> olen ; len -= <S2SV_ModStart> if ( len < 4 ) goto trunc ; <S2SV_ModStart> bp <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 4 <S2SV_ModEnd> <S2SV_ModStart> 4 ; if ( len == 0 ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( ip -> ip_vhl ) ; <S2SV_ModStart> ND_TCHECK ( ip -> ip_dst ) ; <S2SV_ModStart> ND_PRINT ( ( ndo , ""<S2SV_blank>group="" ) ) ; if ( ( advance = pimv2_addr_print ( ndo , bp , len , pimv2_group , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; bp += advance <S2SV_ModEnd> <S2SV_ModStart> advance ; ND_PRINT ( ( ndo , ""<S2SV_blank>source="" <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> len , pimv2_unicast , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> len < 4 ) goto trunc ; ND_TCHECK2 ( * bp , 4 ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> len , pimv2_group , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> len < 4 ) goto trunc ; ND_TCHECK2 ( * bp , 4 ) ; <S2SV_ModEnd> <S2SV_ModStart> len , pimv2_source , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> len , pimv2_source , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( len < 2 ) goto trunc ; ND_TCHECK_16BITS ( bp ) ; ND_PRINT ( ( ndo , ""<S2SV_blank>tag=%x"" , EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( len < 1 ) goto trunc ; ND_TCHECK ( bp [ 0 ] ) <S2SV_ModEnd> <S2SV_ModStart> len < 2 ) goto trunc ; ND_TCHECK ( bp [ 2 ] ) <S2SV_ModEnd> <S2SV_ModStart> len -= 2 <S2SV_ModEnd> <S2SV_ModStart> len , pimv2_unicast , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; bp += advance ; len -= <S2SV_ModEnd> <S2SV_ModStart> len , pimv2_group , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> len -= advance ; if ( len < 1 ) goto trunc ; ND_TCHECK ( bp [ 0 ] ) ; <S2SV_ModEnd> <S2SV_ModStart> len < 2 ) goto trunc ; ND_TCHECK ( <S2SV_ModEnd> <S2SV_ModStart> ; ND_PRINT ( ( ndo , ""<S2SV_blank>FRPcnt=%d"" , frpcnt = bp [ 1 ] ) ) ; if ( len < 4 ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> 4 ; len -= <S2SV_ModStart> len , pimv2_unicast , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> len -= advance ; if ( len < 2 ) goto trunc ; ND_TCHECK_16BITS ( bp ) ; <S2SV_ModEnd> <S2SV_ModStart> len < 3 ) goto trunc ; ND_TCHECK ( <S2SV_ModEnd> <S2SV_ModStart> ; ND_PRINT ( ( ndo , "",prio=%d"" , bp [ 2 ] ) ) ; if ( len < 4 ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> len -= 4 ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ND_PRINT ( ( ndo , ""<S2SV_blank>group="" ) ) ; if ( ( advance = pimv2_addr_print ( ndo , bp , len , pimv2_group , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; bp += advance <S2SV_ModEnd> <S2SV_ModStart> advance ; ND_PRINT ( ( ndo , ""<S2SV_blank>src="" <S2SV_ModEnd> <S2SV_ModStart> len , pimv2_unicast , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> len < 8 ) goto trunc ; ND_TCHECK2 ( * bp , 8 ) <S2SV_ModEnd> <S2SV_ModStart> if ( len < 1 ) goto trunc ; ND_TCHECK ( bp [ 0 ] ) <S2SV_ModEnd> <S2SV_ModStart> len < 2 ) goto trunc ; ND_TCHECK ( <S2SV_ModEnd> <S2SV_ModStart> ; ND_PRINT ( ( ndo , ""<S2SV_blank>prio=%d"" , bp [ 1 ] ) ) ; if ( len < 4 ) goto trunc ; ND_TCHECK_16BITS <S2SV_ModEnd> <S2SV_ModStart> ; ND_PRINT ( ( ndo , ""<S2SV_blank>holdtime="" ) ) ; unsigned_relts_print ( ndo , EXTRACT_16BITS ( & bp [ 2 ] ) <S2SV_ModStart> len -= 4 <S2SV_ModEnd> <S2SV_ModStart> len , pimv2_unicast , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; bp += advance ; len -= <S2SV_ModEnd> <S2SV_ModStart> len , pimv2_group , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; bp += advance ; len -= <S2SV_ModEnd> <S2SV_ModStart> len , pimv2_unicast , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> len -= advance ; <S2SV_ModStart> len , pimv2_group , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> len -= advance ; <S2SV_ModStart> len , pimv2_unicast , pimv2_addr_len , 0 ) ) < 0 ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> len -= advance ; if ( len < 2 ) goto trunc ; ND_TCHECK_16BITS ( bp <S2SV_ModEnd> "
4018,<S2SV_StartBug> if ( p -> selFlags & SF_UsesEphemeral ) { <S2SV_EndBug> ,<S2SV_ModStart> pParse -> nErr ) goto multi_select_end ; if ( 
4019,<S2SV_StartBug> struct fscrypt_info * ci = inode -> i_crypt_info ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ci || <S2SV_EndBug> ,"<S2SV_ModStart> crypt_info ; struct fscrypt_context ctx ; struct crypto_skcipher * ctfm ; const char * cipher_str ; int keysize ; u8 * raw_key = NULL ; int res ; if ( <S2SV_ModEnd> <S2SV_ModStart> ) return 0 ; res = fscrypt_initialize ( inode -> i_sb -> s_cop -> flags ) ; if ( res ) return res <S2SV_ModStart> inode -> i_sb -> s_cop -> get_context ) return - EOPNOTSUPP ; res = inode -> i_sb -> s_cop -> get_context ( inode , & ctx , sizeof ( ctx ) ) ; if ( res < 0 ) { if ( ! fscrypt_dummy_context_enabled ( inode ) || inode -> i_sb -> s_cop -> is_encrypted ( inode ) ) return res ; memset ( & ctx , 0 , sizeof ( ctx ) ) ; ctx . format = FS_ENCRYPTION_CONTEXT_FORMAT_V1 ; ctx . contents_encryption_mode = FS_ENCRYPTION_MODE_AES_256_XTS ; ctx . filenames_encryption_mode = FS_ENCRYPTION_MODE_AES_256_CTS ; memset ( ctx . master_key_descriptor , 0x42 , FS_KEY_DESCRIPTOR_SIZE ) ; } else if ( res != sizeof ( ctx ) ) { return - EINVAL ; } if ( ctx . format != FS_ENCRYPTION_CONTEXT_FORMAT_V1 ) return - EINVAL ; if ( ctx . flags & ~ FS_POLICY_FLAGS_VALID ) return - EINVAL ; crypt_info = kmem_cache_alloc ( fscrypt_info_cachep , GFP_NOFS ) ; if ( ! crypt_info ) return - ENOMEM ; crypt_info -> ci_flags = ctx . flags ; crypt_info -> ci_data_mode = ctx . contents_encryption_mode ; crypt_info -> ci_filename_mode = ctx . filenames_encryption_mode ; crypt_info -> ci_ctfm = NULL ; memcpy ( crypt_info -> ci_master_key , ctx . master_key_descriptor , sizeof ( crypt_info -> ci_master_key ) ) ; res = determine_cipher_type ( crypt_info , inode , & cipher_str , & keysize ) ; if ( res ) goto out ; res = - ENOMEM ; raw_key = kmalloc ( FS_MAX_KEY_SIZE , GFP_NOFS ) ; if ( ! raw_key ) goto out ; res = validate_user_key ( crypt_info , & ctx , raw_key , FS_KEY_DESC_PREFIX ) ; if ( res && inode -> i_sb -> s_cop -> key_prefix ) { int res2 = validate_user_key ( crypt_info , & ctx , raw_key , inode -> i_sb -> s_cop -> key_prefix ) ; if ( res2 ) { if ( res2 == - ENOKEY ) res = - ENOKEY ; goto out ; } } else if ( res ) { goto out ; } ctfm = crypto_alloc_skcipher ( cipher_str , 0 , 0 ) ; if ( ! ctfm || IS_ERR ( ctfm ) ) { res = ctfm ? PTR_ERR ( ctfm ) : - ENOMEM ; printk ( KERN_DEBUG ""%s:<S2SV_blank>error<S2SV_blank>%d<S2SV_blank>(inode<S2SV_blank>%u)<S2SV_blank>allocating<S2SV_blank>crypto<S2SV_blank>tfm\\n"" , __func__ , res , ( unsigned ) inode -> i_ino ) ; goto out ; } crypt_info -> ci_ctfm = ctfm ; crypto_skcipher_clear_flags ( ctfm , ~ 0 ) ; crypto_skcipher_set_flags ( ctfm , CRYPTO_TFM_REQ_WEAK_KEY ) ; res = crypto_skcipher_setkey ( ctfm , raw_key , keysize ) ; if ( res ) goto out ; if ( cmpxchg ( & inode -> i_crypt_info , NULL , crypt_info ) == NULL ) crypt_info = NULL ; out : if ( res == - ENOKEY ) res = 0 ; put_crypt_info ( crypt_info ) ; kzfree ( raw_key ) ; return res <S2SV_ModEnd> "
4020,"<S2SV_StartBug> vp9_quantize_b ( BLOCK_OFFSET ( p -> coeff , block ) , <S2SV_EndBug> <S2SV_StartBug> pd -> dequant , p -> zbin_extra , & p -> eobs [ block ] , scan , iscan ) ; <S2SV_EndBug> ","<S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_highbd_quantize_b <S2SV_ModEnd> <S2SV_ModStart> & p -> eobs [ block ] , scan , iscan ) ; return ; } # endif vpx_quantize_b ( BLOCK_OFFSET ( p -> coeff , block ) , 16 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , BLOCK_OFFSET ( p -> qcoeff , block ) , BLOCK_OFFSET ( pd -> dqcoeff , block ) , pd -> dequant <S2SV_ModEnd> "
4021,<S2SV_StartBug> jumpstack [ stackidx ++ ] = e ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( stackidx >= private -> stacksize ) ) { verdict = NF_DROP ; break ; } 
4022,"<S2SV_StartBug> CRM_LOG_ASSERT ( client_obj -> request_id ) ; <S2SV_EndBug> <S2SV_StartBug> rid , client_obj -> name , from_peer ? ""(originator<S2SV_blank>of<S2SV_blank>delegated<S2SV_blank>request)"" : """" ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( client_obj -> ipc ) { <S2SV_ModStart> } else { crm_trace ( ""Sending<S2SV_blank>response<S2SV_blank>to<S2SV_blank>%s<S2SV_blank>%s"" , client_obj -> name , from_peer ? ""(originator<S2SV_blank>of<S2SV_blank>delegated<S2SV_blank>request)"" : """" ) ; } "
4023,"<S2SV_StartBug> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , <S2SV_EndBug> ","<S2SV_ModStart> p_total_data_size , "
4024,<S2SV_StartBug> if ( NFCT_FRAG6_CB ( fp ) -> orig == NULL ) <S2SV_EndBug> ,<S2SV_ModStart> fp && 
4025,<S2SV_StartBug> int i ; <S2SV_EndBug> ,"<S2SV_ModStart> ; account_pipe_buffers ( pipe , pipe -> buffers , 0 ) ; free_uid ( pipe -> user ) "
4026,"<S2SV_StartBug> ""vm_enabled:%d\\r\\n"" <S2SV_EndBug> <S2SV_StartBug> server . vm_enabled != 0 , <S2SV_EndBug> <S2SV_StartBug> if ( server . vm_enabled ) { <S2SV_EndBug> <S2SV_StartBug> ""vm_conf_max_memory:%llu\\r\\n"" <S2SV_EndBug> <S2SV_StartBug> , ( unsigned long long ) server . vm_max_memory , <S2SV_EndBug> <S2SV_StartBug> ( unsigned long long ) server . vm_page_size , <S2SV_EndBug> ","<S2SV_ModStart> ""ds_enabled:%d\\r\\n"" <S2SV_ModEnd> <S2SV_ModStart> ds_enabled <S2SV_ModEnd> <S2SV_ModStart> ds_enabled <S2SV_ModEnd> <S2SV_ModStart> ""cache_max_memory:%llu\\r\\n"" ""cache_blocked_clients:%lu\\r\\n"" <S2SV_ModEnd> <S2SV_ModStart> cache_max_memory <S2SV_ModEnd> <S2SV_ModStart> ) server . cache_blocked_clients <S2SV_ModEnd> "
4027,"<S2SV_StartBug> p = strchr ( context -> buffer , \'\\""\' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> 
4028,"<S2SV_StartBug> void imap_quote_string ( char * dest , size_t dlen , const char * src ) <S2SV_EndBug> ","<S2SV_ModStart> , bool quote_backtick ) { const char * quote = ""`\\""\\\\"" ; if ( ! quote_backtick ) quote ++ <S2SV_ModEnd> "
4029,<S2SV_StartBug> { if ( psf -> headindex < SIGNED_SIZEOF ( psf -> header ) - 2 ) <S2SV_EndBug> <S2SV_StartBug> { psf -> header [ psf -> headindex ++ ] = x ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> } ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> . ptr [ <S2SV_ModEnd> <S2SV_ModStart> . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4030,<S2SV_StartBug> img -> bps = 12 ; <S2SV_EndBug> ,<S2SV_ModStart> bit_depth = 8 ; img -> 
4031,<S2SV_StartBug> s = & pit_state -> channels [ addr ] ; <S2SV_EndBug> ,<S2SV_ModStart> if ( addr == 3 ) return 0 ; 
4032,"<S2SV_StartBug> if ( kern_path ( dev_name , LOOKUP_FOLLOW , & path ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ! dev_name || 
4033,"<S2SV_StartBug> int i , n_items , end_lineno , end_col_offset ; <S2SV_EndBug> <S2SV_StartBug> REQ ( n , with_stmt ) ; <S2SV_EndBug> <S2SV_StartBug> n_items = ( NCH ( n ) - 2 ) / 2 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 1 ; i < NCH ( n ) - 2 ; i += 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( is_async ) <S2SV_EndBug> <S2SV_StartBug> return AsyncWith ( items , body , LINENO ( n0 ) , n0 -> n_col_offset , <S2SV_EndBug> <S2SV_StartBug> return With ( items , body , LINENO ( n ) , n -> n_col_offset , <S2SV_EndBug> ","<S2SV_ModStart> nch_minus_type , has_type_comment , <S2SV_ModStart> string type_comment ; <S2SV_ModStart> has_type_comment = TYPE ( CHILD ( n , NCH ( n ) - 2 ) ) == TYPE_COMMENT ; nch_minus_type = NCH ( n ) - has_type_comment ; <S2SV_ModStart> nch_minus_type <S2SV_ModEnd> <S2SV_ModStart> nch_minus_type <S2SV_ModEnd> <S2SV_ModStart> has_type_comment ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n , NCH ( n ) - 2 ) ) ; if ( ! type_comment ) return NULL ; } else type_comment = NULL ; if ( <S2SV_ModStart> type_comment , <S2SV_ModStart> , type_comment "
4034,"<S2SV_StartBug> while ( * s && * s != \'\\""\' ) <S2SV_EndBug> <S2SV_StartBug> while ( isdigit ( ( unsigned char ) * s ) ) <S2SV_EndBug> ",<S2SV_ModStart> ( <S2SV_ModStart> ) && ( ptmp != ( tmp + sizeof ( tmp ) - 1 ) ) <S2SV_ModStart> ) && ( ptmp != ( tmp + sizeof ( tmp ) - 1 ) 
4035,"<S2SV_StartBug> tlv = cp + i ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>(%u)"" , optlen + 4 ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( i + 4 > length ) return - 1 ; <S2SV_ModStart> ; if ( i + 4 + optlen > length ) return - 1 
4036,"<S2SV_StartBug> if ( ( gr -> gr_ctx . value = mem_alloc ( sizeof ( gss_union_ctx_id_desc ) ) ) == NULL ) { <S2SV_EndBug> <S2SV_StartBug> memcpy ( gr -> gr_ctx . value , gd -> ctx , sizeof ( gss_union_ctx_id_desc ) ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""xxxx"" ; <S2SV_ModEnd> <S2SV_ModStart> length = 4 <S2SV_ModEnd> "
4037,"<S2SV_StartBug> s -> off = strtoll ( p , NULL , 10 ) ; <S2SV_EndBug> <S2SV_StartBug> s -> filesize = strtoll ( slash + 1 , NULL , 10 ) ; <S2SV_EndBug> ",<S2SV_ModStart> strtoull <S2SV_ModEnd> <S2SV_ModStart> strtoull <S2SV_ModEnd> 
4038,"<S2SV_StartBug> ThrowReaderException ( CorruptImageError , ""UnableToReadImageData"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart> } 
4039,<S2SV_StartBug> const VP9_CONFIG * oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> optimal_buffer_level / 100 ) ; <S2SV_EndBug> ,<S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> rc <S2SV_ModEnd> 
4040,<S2SV_StartBug> register struct enamemem * tp ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name ) <S2SV_EndBug> <S2SV_StartBug> return ( tp -> e_name ) ; <S2SV_EndBug> <S2SV_StartBug> tp -> e_name = strdup ( buf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name == NULL ) <S2SV_EndBug> <S2SV_StartBug> return ( tp -> e_name ) ; <S2SV_EndBug> ,<S2SV_ModStart> bsnamemem <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> 
4041,"<S2SV_StartBug> static int can_open_cached ( struct nfs4_state * state , int mode ) <S2SV_EndBug> <S2SV_StartBug> switch ( mode & ( FMODE_READ | FMODE_WRITE | O_EXCL ) ) { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart> fmode_t mode , int open_mode <S2SV_ModEnd> <S2SV_ModStart> if ( open_mode & O_EXCL ) goto out ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> out : "
4042,<S2SV_StartBug> if ( src < ( uint8_t * ) buf || src > ( uint8_t * ) buf + buf_size ) <S2SV_EndBug> ,<S2SV_ModStart> + src_size < src || src + src_size 
4043,<S2SV_StartBug> if ( * p == FAC_CCITT_DEST_NSAP ) { <S2SV_EndBug> ,<S2SV_ModStart> l < 10 || l > 20 ) return - 1 ; if ( 
4044,<S2SV_StartBug> int nByte = sizeof ( * pWith ) + ( sizeof ( pWith -> a [ 1 ] ) * pWith -> nCte ) ; <S2SV_EndBug> ,<S2SV_ModStart> sqlite3_int64 <S2SV_ModEnd> 
4045,<S2SV_StartBug> if ( len > count ) <S2SV_EndBug> ,<S2SV_ModStart> ( unsigned long ) len > ( unsigned long ) <S2SV_ModEnd> 
4046,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t\\t<S2SV_blank>packet<S2SV_blank>exceeded<S2SV_blank>snapshot"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , tstr <S2SV_ModEnd> "
4047,"<S2SV_StartBug> cookie = dentry -> d_inode -> i_op -> follow_link ( dentry , nd ) ; <S2SV_EndBug> ",<S2SV_ModStart> nd -> last_type = LAST_BIND ; 
4048,<S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> goto bail <S2SV_ModEnd> <S2SV_ModStart> goto bail <S2SV_ModEnd> <S2SV_ModStart> goto bail <S2SV_ModEnd> <S2SV_ModStart> goto bail <S2SV_ModEnd> <S2SV_ModStart> goto bail <S2SV_ModEnd> <S2SV_ModStart> goto bail <S2SV_ModEnd> <S2SV_ModStart> bail : free ( tmpbuf ) ; tmpbuf = NULL ; return - 1 ; 
4049,"<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> ptr = cp [ 2 ] - 1 ; <S2SV_EndBug> <S2SV_StartBug> switch ( cp [ 3 ] & 0xF ) { <S2SV_EndBug> <S2SV_StartBug> type = ""<S2SV_blank>^<S2SV_blank>"" ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> ( 0 ) <S2SV_ModStart> ND_TCHECK ( cp [ 2 ] ) ; <S2SV_ModStart> ND_TCHECK ( cp [ 3 ] ) ; <S2SV_ModStart> ; ND_TCHECK2 ( cp [ len ] , hoplen ) <S2SV_ModStart> return ( 0 ) ; trunc : return ( - 1 ) ; "
4050,<S2SV_StartBug> void impeg2d_dec_pnb_mb_params ( dec_state_t * ps_dec ) <S2SV_EndBug> <S2SV_StartBug> ps_dec_mb_params -> pf_func_mb_params ( ps_dec ) ; <S2SV_EndBug> <S2SV_StartBug> ps_dec_mb_params -> pf_func_mb_params ( ps_dec ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> WORD32 <S2SV_ModEnd> <S2SV_ModStart> if ( NULL == ps_dec_mb_params -> pf_func_mb_params ) return - 1 ; <S2SV_ModStart> if ( NULL == ps_dec_mb_params -> pf_func_mb_params ) return - 1 ; <S2SV_ModStart> return 0 ; 
4051,<S2SV_StartBug> comics_document -> selected_command = <S2SV_EndBug> <S2SV_StartBug> comics_document -> selected_command = <S2SV_EndBug> <S2SV_StartBug> comics_document -> selected_command = <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } else <S2SV_ModEnd> 
4052,"<S2SV_StartBug> static u32 ip6_idents_hashrnd __read_mostly ; <S2SV_EndBug> <S2SV_StartBug> id = __ipv6_select_ident ( net , ip6_idents_hashrnd , daddr , saddr ) ; <S2SV_EndBug> ",<S2SV_ModStart> u32 id <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4053,"<S2SV_StartBug> int mi_index = 0 ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 = cm -> mi_grid_visible ; <S2SV_EndBug> <S2SV_StartBug> print_mi_data ( cm , mvs , ""Skips:"" , offsetof ( MB_MODE_INFO , skip ) ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( mvs , ""V<S2SV_blank>"" ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( mvs , ""%4d:%4d<S2SV_blank>"" , mi_8x8 [ mi_index ] -> mbmi . mv [ 0 ] . as_mv . row , <S2SV_EndBug> <S2SV_StartBug> mi_index += 8 ; <S2SV_EndBug> <S2SV_StartBug> fclose ( mvs ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> ""Ref<S2SV_blank>frame:"" , offsetof ( MB_MODE_INFO , ref_frame [ 0 ] ) ) ; print_mi_data ( cm , mvs , ""Transform:"" , offsetof ( MB_MODE_INFO , tx_size ) ) ; print_mi_data ( cm , mvs , ""UV<S2SV_blank>Modes:"" , offsetof ( MB_MODE_INFO , uv_mode ) ) ; log_frame_info ( cm , ""Skips:"" <S2SV_ModEnd> <S2SV_ModStart> ""S<S2SV_blank>"" <S2SV_ModEnd> <S2SV_ModStart> ""%2d<S2SV_blank>"" , mi [ 0 <S2SV_ModEnd> <S2SV_ModStart> skip ) ; mi <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> log_frame_info ( cm , ""Vectors<S2SV_blank>"" , mvs ) ; mi = cm -> mi_grid_visible ; for ( mi_row = 0 ; mi_row < rows ; mi_row ++ ) { fprintf ( mvs , ""V<S2SV_blank>"" ) ; for ( mi_col = 0 ; mi_col < cols ; mi_col ++ ) { fprintf ( mvs , ""%4d:%4d<S2SV_blank>"" , mi [ 0 ] -> mbmi . mv [ 0 ] . as_mv . row , mi [ 0 ] -> mbmi . mv [ 0 ] . as_mv . col ) ; mi ++ ; } fprintf ( mvs , ""\\n"" ) ; mi += 8 ; } fprintf ( mvs , ""\\n"" ) ; "
4054,"<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( caught_signal ) <S2SV_EndBug> <S2SV_StartBug> sleep ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , _ ( ""<S2SV_blank>...killed.\\n"" ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> child = ( pid_t ) - 1 ; <S2SV_ModStart> && child != ( pid_t ) - 1 <S2SV_ModStart> if ( child != ( pid_t ) - 1 ) { <S2SV_ModStart> } 
4055,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( ! ret && xsave -> header . xcomp_bv ) ret = - EINVAL ; 
4056,<S2SV_StartBug> return le16_to_cpu ( alt -> endpoint [ 0 ] . desc . wMaxPacketSize ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( alt -> desc . bNumEndpoints < 1 ) return - ENODEV ; 
4057,"<S2SV_StartBug> return udp_prot . setsockopt ( sk , level , optname , optval , optlen ) ; <S2SV_EndBug> ",<S2SV_ModStart> - EINVAL <S2SV_ModEnd> 
4058,"<S2SV_StartBug> struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> found = cm -> width == cfg -> y_crop_width && <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> use_svc ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> width - 1 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> height - 1 , 16 ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> use_svc && ( ( cpi -> svc . number_temporal_layers > 1 && cpi -> oxcf . rc_mode == VPX_CBR ) || ( cpi -> svc . number_spatial_layers > 1 && cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id ] . is_key_frame ) || ( is_two_pass_svc ( cpi ) && cpi -> svc . encode_empty_frame_state == ENCODING && cpi -> svc . layer_context [ 0 ] . frames_from_key_frame < cpi -> svc . number_temporal_layers + 1 ) ) ) { found = 0 ; } else if ( cfg != NULL ) { <S2SV_ModStart> } vpx_wb_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> 
4059,<S2SV_StartBug> BUG_IF ( tree_root == NULL ) ; <S2SV_EndBug> ,<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> return 0 
4060,<S2SV_StartBug> int err ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL 
4061,"<S2SV_StartBug> VTermState * state = vterm_allocator_malloc ( vt , sizeof ( VTermState ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( state == NULL ) return NULL 
4062,"<S2SV_StartBug> static int _nfs4_do_open ( struct inode * dir , struct path * path , int flags , struct iattr * sattr , struct rpc_cred * cred , struct nfs4_state * * res ) <S2SV_EndBug> <S2SV_StartBug> nfs4_return_incompatible_delegation ( path -> dentry -> d_inode , flags & ( FMODE_READ | FMODE_WRITE ) ) ; <S2SV_EndBug> <S2SV_StartBug> opendata = nfs4_opendata_alloc ( path , sp , flags , sattr ) ; <S2SV_EndBug> ","<S2SV_ModStart> fmode_t fmode , <S2SV_ModStart> fmode <S2SV_ModEnd> <S2SV_ModStart> , fmode "
4063,<S2SV_StartBug> commonlen = COMPUTESIZE ( state . num ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( state . num > QUERYTYPEMAXITEMS ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>query<S2SV_blank>items<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , state . num , ( int ) QUERYTYPEMAXITEMS ) ) ) ; "
4064,<S2SV_StartBug> while ( tmp && alen < tmp ) { <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK2 ( * tptr , alen ) ; "
4065,<S2SV_StartBug> libettercap_init ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( write_output ( ) != E_SUCCESS ) <S2SV_EndBug> ,"<S2SV_ModStart> int ret_value = 0 ; <S2SV_ModStart> ret_value = <S2SV_ModEnd> <S2SV_ModStart> ; if ( ret_value == - E_NOTHANDLED ) FATAL_ERROR ( ""Cannot<S2SV_blank>write<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(%s):<S2SV_blank>the<S2SV_blank>filter<S2SV_blank>is<S2SV_blank>not<S2SV_blank>correctly<S2SV_blank>handled."" , EF_GBL_OPTIONS -> output_file ) ; else if ( ret_value == - E_INVALID ) FATAL_ERROR ( ""Cannot<S2SV_blank>write<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(%s):<S2SV_blank>the<S2SV_blank>filter<S2SV_blank>format<S2SV_blank>is<S2SV_blank>not<S2SV_blank>correct.<S2SV_blank>"" <S2SV_ModEnd> "
4066,"<S2SV_StartBug> printf ( ""%10d<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>FAT<S2SV_blank>(=<S2SV_blank>%u<S2SV_blank>sectors)\\n"" , fs -> fat_size , <S2SV_EndBug> <S2SV_StartBug> fs -> fat_size / lss ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%10lld<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>FAT<S2SV_blank>(=<S2SV_blank>%llu<S2SV_blank>sectors)\\n"" , ( long long ) <S2SV_ModEnd> <S2SV_ModStart> ( long long ) "
4067,"<S2SV_StartBug> static void update_stats ( VP9_COMP * cpi ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! frame_is_intra_only ( cm ) ) { <S2SV_EndBug> <S2SV_StartBug> const int seg_ref_active = vp9_segfeature_active ( & cm -> seg , mbmi -> segment_id , <S2SV_EndBug> <S2SV_StartBug> FRAME_COUNTS * const counts = & cm -> counts ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> VP9_COMMON * cm , ThreadData * td ) { const MACROBLOCK * x = & td <S2SV_ModEnd> <S2SV_ModStart> const MB_MODE_INFO_EXT * const mbmi_ext = x -> mbmi_ext ; const BLOCK_SIZE bsize = mbmi -> sb_type ; <S2SV_ModStart> FRAME_COUNTS * const counts = td -> counts ; const int inter_block = is_inter_block ( mbmi ) ; <S2SV_ModStart> segfeature_active <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( inter_block && ! segfeature_active ( & cm -> seg , mbmi -> segment_id , SEG_LVL_SKIP ) ) { const int mode_ctx = mbmi_ext -> mode_context [ mbmi -> ref_frame [ 0 ] ] ; if ( bsize >= BLOCK_8X8 ) { const PREDICTION_MODE mode = mbmi -> mode ; ++ counts -> inter_mode [ mode_ctx ] [ INTER_OFFSET ( mode ) ] ; } else { const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; int idx , idy ; for ( idy = 0 ; idy < 2 ; idy += num_4x4_h ) { for ( idx = 0 ; idx < 2 ; idx += num_4x4_w ) { const int j = idy * 2 + idx ; const PREDICTION_MODE b_mode = mi -> bmi [ j ] . as_mode ; ++ counts -> inter_mode [ mode_ctx ] [ INTER_OFFSET ( b_mode ) ] ; } } } } "
4068,"<S2SV_StartBug> attach_shadowed ( mnt , parent , shadows ) ; <S2SV_EndBug> ",<S2SV_ModStart> n -> mounts += n -> pending_mounts ; n -> pending_mounts = 0 ; 
4069,<S2SV_StartBug> const char * errstr ; <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> # if ! defined ( __linux__ ) && ! defined ( __NetBSD__ ) <S2SV_ModStart> = NULL ; # else int status ; # endif <S2SV_ModEnd> <S2SV_ModStart> if ( errstr ) return - 1 ; # else status = <S2SV_ModEnd> <S2SV_ModStart> if ( status != 1 <S2SV_ModEnd> <S2SV_ModStart> # endif 
4070,"<S2SV_StartBug> SkipRGBMipmaps ( image , dds_info , 3 ) ; <S2SV_EndBug> ","<S2SV_ModStart> return ( <S2SV_ModStart> , exception ) ) <S2SV_ModEnd> "
4071,"<S2SV_StartBug> void vp9_fht8x8_sse2 ( const int16_t * input , int16_t * output , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct8x8_sse2 ( input , output , stride ) ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> vpx_fdct8x8_sse2 <S2SV_ModEnd> 
4072,"<S2SV_StartBug> c16 -> Curves [ i ] = _cmsCalloc ( ContextID , nElements , sizeof ( cmsUInt16Number ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID , c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID , c16 -> Curves ) ; _cmsFree ( ContextID , c16 ) ; return NULL ; } "
4073,"<S2SV_StartBug> if ( osStrlen ( topicName ) == 2 && strchr ( topicName , '#' ) == NULL && <S2SV_EndBug> <S2SV_StartBug> strchr ( topicName , '+' ) == NULL ) <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> <S2SV_ModStart> osStrchr <S2SV_ModEnd> 
4074,"<S2SV_StartBug> len = min_t ( unsigned int , len , sizeof ( sec ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> sec . key_size = 0 ; 
4075,<S2SV_StartBug> if ( ! data ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> || len < 2 ) { <S2SV_ModEnd> <S2SV_ModStart> } 
4076,"<S2SV_StartBug> struct strbuf * path , const char * component ) <S2SV_EndBug> <S2SV_StartBug> free ( name ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name ) { const <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4077,"<S2SV_StartBug> size_t input_size , <S2SV_EndBug> <S2SV_StartBug> int max_bytes_matched = input_size ; <S2SV_EndBug> ","<S2SV_ModStart> input_forwards_size , size_t input_backwards_size <S2SV_ModEnd> <S2SV_ModStart> ; max_bytes_matched = flags & RE_FLAGS_BACKWARDS ? input_backwards_size : input_forwards_size <S2SV_ModEnd> "
4078,"<S2SV_StartBug> void vp9_rc_init ( const VP9_CONFIG * oxcf , int pass , RATE_CONTROL * rc ) { <S2SV_EndBug> <S2SV_StartBug> if ( pass == 0 && oxcf -> end_usage == USAGE_STREAM_FROM_SERVER ) { <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 0 ] = oxcf -> worst_allowed_q ; <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 1 ] = oxcf -> worst_allowed_q ; <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 0 ] = ( oxcf -> worst_allowed_q + <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 1 ] = ( oxcf -> worst_allowed_q + <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 2 ] = ( oxcf -> worst_allowed_q + <S2SV_EndBug> <S2SV_StartBug> rc -> last_q [ 0 ] = oxcf -> best_allowed_q ; <S2SV_EndBug> ","<S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> int i ; <S2SV_ModStart> rc_mode == VPX_CBR <S2SV_ModEnd> <S2SV_ModStart> KEY_FRAME <S2SV_ModEnd> <S2SV_ModStart> INTER_FRAME <S2SV_ModEnd> <S2SV_ModStart> KEY_FRAME <S2SV_ModEnd> <S2SV_ModStart> INTER_FRAME <S2SV_ModEnd> <S2SV_ModStart> } rc -> last_q [ KEY_FRAME ] = oxcf -> best_allowed_q ; rc -> last_q [ INTER_FRAME ] = oxcf -> worst_allowed_q ; rc -> buffer_level = rc -> starting_buffer_level ; rc -> bits_off_target = rc -> starting_buffer_level ; rc -> rolling_target_bits = rc -> avg_frame_bandwidth ; rc -> rolling_actual_bits = rc -> avg_frame_bandwidth ; rc -> long_rolling_target_bits = rc -> avg_frame_bandwidth ; rc -> long_rolling_actual_bits = rc -> avg_frame_bandwidth ; rc -> total_actual_bits = 0 ; rc -> total_target_bits = 0 ; rc -> total_target_vs_actual = 0 ; rc -> frames_since_key = 8 ; rc -> this_key_frame_forced = 0 ; rc -> next_key_frame_forced = 0 ; rc -> source_alt_ref_pending = 0 ; rc -> source_alt_ref_active = 0 ; rc -> frames_till_gf_update_due = 0 ; rc -> ni_av_qi = oxcf -> worst_allowed_q ; rc -> ni_tot_qi = 0 ; rc -> ni_frames = 0 ; rc -> tot_q = 0.0 ; rc -> avg_q = vp9_convert_qindex_to_q ( oxcf -> worst_allowed_q , oxcf -> bit_depth ) ; for ( i = 0 ; i < RATE_FACTOR_LEVELS ; ++ i ) { rc -> rate_correction_factors [ i ] = 1.0 ; } rc -> min_gf_interval = oxcf -> min_gf_interval ; rc -> max_gf_interval = oxcf -> max_gf_interval ; if ( rc -> min_gf_interval == 0 ) rc -> min_gf_interval = vp9_rc_get_default_min_gf_interval ( oxcf -> width , oxcf -> height , oxcf -> init_framerate ) ; if ( rc -> max_gf_interval == 0 ) rc -> max_gf_interval = vp9_rc_get_default_max_gf_interval ( oxcf -> init_framerate , rc -> min_gf_interval ) ; rc -> baseline_gf_interval = ( rc -> min_gf_interval + rc -> max_gf_interval <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4079,<S2SV_StartBug> unsigned int array_index_stack [ ARRAY_INDEX_STACK_SIZE ] ; <S2SV_EndBug> ,<S2SV_ModStart> size_t <S2SV_ModEnd> 
4080,"<S2SV_StartBug> ""session<S2SV_blank>authenticated"" , NULL , NULL , NULL ) ; <S2SV_EndBug> ",<S2SV_ModStart> cb_new_auth <S2SV_ModEnd> 
4081,"<S2SV_StartBug> LINE_OP ( output [ x ] , inverse_db_table [ y ] ) ; <S2SV_EndBug> <S2SV_StartBug> LINE_OP ( output [ x ] , inverse_db_table [ y ] ) ; <S2SV_EndBug> ",<S2SV_ModStart> & 255 <S2SV_ModStart> & 255 
4082,"<S2SV_StartBug> static MB_PREDICTION_MODE read_inter_mode ( VP9_COMMON * cm , vp9_reader * r , <S2SV_EndBug> <S2SV_StartBug> const int mode = vp9_read_tree ( r , vp9_inter_mode_tree , <S2SV_EndBug> <S2SV_StartBug> cm -> fc . inter_mode_probs [ ctx ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> ","<S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> MACROBLOCKD * xd , vpx_reader <S2SV_ModEnd> <S2SV_ModStart> vpx_read_tree <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> "
4083,<S2SV_StartBug> if ( ! replace && card -> user_ctl_count >= MAX_USER_CONTROLS ) <S2SV_EndBug> <S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> ,"<S2SV_ModStart> info -> count < 1 ) return - EINVAL ; access = info -> access == 0 ? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id . numid = 0 ; memset ( & kctl , 0 , sizeof ( kctl ) ) ; if ( replace ) { err = snd_ctl_remove_user_ctl ( file , & info -> id ) ; if ( err ) return err ; } if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4084,"<S2SV_StartBug> static void optimize_b ( int plane , int block , BLOCK_SIZE plane_bsize , <S2SV_EndBug> <S2SV_StartBug> TX_SIZE tx_size , MACROBLOCK * mb , <S2SV_EndBug> <S2SV_StartBug> struct macroblock_plane * p = & mb -> plane [ plane ] ; <S2SV_EndBug> <S2SV_StartBug> struct macroblockd_plane * pd = & xd -> plane [ plane ] ; <S2SV_EndBug> <S2SV_StartBug> const int16_t * coeff = BLOCK_OFFSET ( mb -> plane [ plane ] . coeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t * dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int eob = p -> eobs [ block ] , final_eob , sz = 0 ; <S2SV_EndBug> <S2SV_StartBug> PLANE_TYPE type = pd -> plane_type ; <S2SV_EndBug> <S2SV_StartBug> uint8_t token_cache [ 1024 ] ; <S2SV_EndBug> <S2SV_StartBug> const int16_t * dequant_ptr = pd -> dequant ; <S2SV_EndBug> <S2SV_StartBug> const int16_t * scan = so -> scan ; <S2SV_EndBug> <S2SV_StartBug> rdmult = mb -> rdmult * err_mult ; <S2SV_EndBug> <S2SV_StartBug> if ( ! is_inter_block ( & mb -> e_mbd . mi [ 0 ] -> mbmi ) ) <S2SV_EndBug> <S2SV_StartBug> rddiv = mb -> rddiv ; <S2SV_EndBug> <S2SV_StartBug> * ( tokens [ eob ] + 1 ) = * ( tokens [ eob ] + 0 ) ; <S2SV_EndBug> <S2SV_StartBug> token_cache [ scan [ i ] ] = vp9_pt_energy_class [ vp9_dct_value_tokens_ptr [ <S2SV_EndBug> <S2SV_StartBug> qcoeff [ scan [ i ] ] ] . token ] ; <S2SV_EndBug> <S2SV_StartBug> for ( i = eob ; i -- > i0 ; ) { <S2SV_EndBug> <S2SV_StartBug> rc = scan [ i ] ; <S2SV_EndBug> <S2SV_StartBug> x = qcoeff [ rc ] ; <S2SV_EndBug> <S2SV_StartBug> t0 = ( vp9_dct_value_tokens_ptr + x ) -> token ; <S2SV_EndBug> <S2SV_StartBug> base_bits = * ( vp9_dct_value_cost_ptr + x ) ; <S2SV_EndBug> <S2SV_StartBug> dx = mul * ( dqcoeff [ rc ] - coeff [ rc ] ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> t0 = t1 = ( vp9_dct_value_tokens_ptr + x ) -> token ; <S2SV_EndBug> <S2SV_StartBug> base_bits = * ( vp9_dct_value_cost_ptr + x ) ; <S2SV_EndBug> <S2SV_StartBug> if ( shortcut ) { <S2SV_EndBug> <S2SV_StartBug> dx -= ( dequant_ptr [ rc != 0 ] + sz ) ^ sz ; <S2SV_EndBug> <S2SV_StartBug> pt = combine_entropy_contexts ( * a , * l ) ; <S2SV_EndBug> <S2SV_StartBug> rate0 += mb -> token_costs [ tx_size ] [ type ] [ ref ] [ band ] [ 0 ] [ pt ] [ t0 ] ; <S2SV_EndBug> <S2SV_StartBug> rate1 += mb -> token_costs [ tx_size ] [ type ] [ ref ] [ band ] [ 0 ] [ pt ] [ t1 ] ; <S2SV_EndBug> <S2SV_StartBug> final_eob = i0 - 1 ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( qcoeff , 0 , sizeof ( * qcoeff ) * ( 16 << ( tx_size * 2 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( dqcoeff , 0 , sizeof ( * dqcoeff ) * ( 16 << ( tx_size * 2 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> x = tokens [ i ] [ best ] . qc ; <S2SV_EndBug> <S2SV_StartBug> if ( x ) { <S2SV_EndBug> <S2SV_StartBug> rc = scan [ i ] ; <S2SV_EndBug> <S2SV_StartBug> * a = * l = ( final_eob > 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> int optimize_b ( MACROBLOCK * mb , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int ctx <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> const <S2SV_ModStart> uint8_t token_cache [ 1024 ] ; const tran_low_t * const <S2SV_ModEnd> <S2SV_ModStart> tran_low_t * const <S2SV_ModEnd> <S2SV_ModStart> tran_low_t * const <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> ; const <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const int16_t * dequant_ptr = pd -> dequant ; const uint8_t * const band_translate = get_band_translate ( tx_size ) ; const scan_order * const so = get_scan ( xd , tx_size , type , block ) <S2SV_ModEnd> <S2SV_ModStart> const scan = so -> scan ; const int16_t * const nb = so -> neighbors ; int next = eob , sz = 0 ; int64_t rdmult = mb -> rdmult * plane_rd_mult [ type ] , rddiv = mb -> rddiv ; int64_t rd_cost0 , rd_cost1 ; int rate0 , rate1 , error0 , error1 ; int16_t t0 , t1 ; EXTRABIT e0 ; int best , band , pt , i , final_eob ; # if CONFIG_VP9_HIGHBITDEPTH const int16_t * cat6_high_cost = vp9_get_high_cost_table ( xd -> bd ) ; # else <S2SV_ModEnd> <S2SV_ModStart> cat6_high_cost = vp9_get_high_cost_table ( 8 ) ; # endif <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> [ 1 ] = <S2SV_ModEnd> <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> vp9_get_token ( <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> const int <S2SV_ModStart> int <S2SV_ModStart> vp9_get_token_extra ( x , & t0 , & e0 ) <S2SV_ModEnd> <S2SV_ModStart> vp9_get_cost ( t0 , e0 , cat6_high_cost <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { dx >>= xd -> bd - 8 ; } # endif <S2SV_ModStart> e0 = 0 ; <S2SV_ModStart> vp9_get_token_extra ( x , & t0 , & e0 ) ; t1 = t0 <S2SV_ModEnd> <S2SV_ModStart> vp9_get_cost ( t0 , e0 , cat6_high_cost <S2SV_ModEnd> <S2SV_ModStart> ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH <S2SV_ModStart> ( <S2SV_ModStart> >> ( xd -> bd - 8 ) ) <S2SV_ModStart> } else { dx -= ( dequant_ptr [ rc != 0 ] + sz ) ^ sz ; } # else dx -= ( dequant_ptr [ rc != 0 ] + sz ) ^ sz ; # endif <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ctx <S2SV_ModEnd> <S2SV_ModStart> ctx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> const int <S2SV_ModStart> const int rc = scan [ i ] ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return final_eob <S2SV_ModEnd> "
4085,"<S2SV_StartBug> int vp9_decode_block_tokens ( VP9_COMMON * cm , MACROBLOCKD * xd , <S2SV_EndBug> <S2SV_StartBug> int plane , int block , BLOCK_SIZE plane_bsize , <S2SV_EndBug> <S2SV_StartBug> int x , int y , TX_SIZE tx_size , vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> struct macroblockd_plane * const pd = & xd -> plane [ plane ] ; <S2SV_EndBug> <S2SV_StartBug> const scan_order * so = get_scan ( xd , tx_size , pd -> plane_type , block ) ; <S2SV_EndBug> <S2SV_StartBug> const int eob = decode_coefs ( cm , xd , pd -> plane_type , <S2SV_EndBug> <S2SV_StartBug> BLOCK_OFFSET ( pd -> dqcoeff , block ) , tx_size , <S2SV_EndBug> <S2SV_StartBug> pd -> dequant , ctx , so -> scan , so -> neighbors , r ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_set_contexts ( xd , pd , plane_bsize , tx_size , eob > 0 , x , y ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const scan_order * sc <S2SV_ModEnd> <S2SV_ModStart> vpx_reader * r , int seg_id <S2SV_ModEnd> <S2SV_ModStart> ] ; const int16_t * const dequant = pd -> seg_dequant [ seg_id <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tx_size , <S2SV_ModEnd> <S2SV_ModStart> sc <S2SV_ModEnd> <S2SV_ModStart> sc <S2SV_ModEnd> <S2SV_ModStart> dec_set_contexts <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4086,"
","
"
4087,<S2SV_StartBug> free_called += 1 ; <S2SV_EndBug> ,<S2SV_ModStart> = <S2SV_ModEnd> 
4088,<S2SV_StartBug> goto chpwfail ; <S2SV_EndBug> <S2SV_StartBug> goto chpwfail ; <S2SV_EndBug> <S2SV_StartBug> goto chpwfail ; <S2SV_EndBug> <S2SV_StartBug> goto chpwfail ; <S2SV_EndBug> ,<S2SV_ModStart> bailout <S2SV_ModEnd> <S2SV_ModStart> bailout <S2SV_ModEnd> <S2SV_ModStart> bailout <S2SV_ModEnd> <S2SV_ModStart> bailout <S2SV_ModEnd> 
4089,<S2SV_StartBug> goto err_unregister_v4l2_dev ; <S2SV_EndBug> <S2SV_StartBug> err_unregister_v4l2_dev : <S2SV_EndBug> ,<S2SV_ModStart> err_free_controls <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4090,<S2SV_StartBug> max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; <S2SV_EndBug> <S2SV_StartBug> max_packets = ( size_t ) ( number_pixels * viff_info . number_data_bands ) ; <S2SV_EndBug> ,"<S2SV_ModStart> { if ( CheckMemoryOverflow <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> ) != MagickFalse ) ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; } else { if ( CheckMemoryOverflow ( number_pixels , viff_info . number_data_bands ) != MagickFalse ) ThrowReaderException ( ResourceLimitError , ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> <S2SV_ModStart> } "
4091,<S2SV_StartBug> # if HAVA_LZMA_H && HAVE_LIBLZMA <S2SV_EndBug> ,<S2SV_ModStart> HAVE_LZMA_H <S2SV_ModEnd> 
4092,"<S2SV_StartBug> mcryptd_check_internal ( tb , & type , & mask ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! <S2SV_ModStart> ) return - EINVAL 
4093,"<S2SV_StartBug> static void utee_param_to_param ( struct tee_ta_param * p , struct utee_params * up ) <S2SV_EndBug> <S2SV_StartBug> switch ( TEE_PARAM_TYPE_GET ( types , n ) ) { <S2SV_EndBug> <S2SV_StartBug> case TEE_PARAM_TYPE_MEMREF_INPUT : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> TEE_Result utee_param_to_param ( struct user_ta_ctx * utc , <S2SV_ModEnd> <S2SV_ModStart> uint32_t flags = TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER ; <S2SV_ModStart> TEE_PARAM_TYPE_MEMREF_OUTPUT : case TEE_PARAM_TYPE_MEMREF_INOUT : flags |= TEE_MEMORY_ACCESS_WRITE ; case TEE_PARAM_TYPE_MEMREF_INPUT <S2SV_ModEnd> <S2SV_ModStart> if ( tee_mmu_check_access_rights ( utc , flags , a , b ) ) return TEE_ERROR_ACCESS_DENIED ; <S2SV_ModStart> return TEE_SUCCESS ; "
4094,"<S2SV_StartBug> mcryptd_check_internal ( tb , & type , & mask ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! <S2SV_ModStart> ) return - EINVAL 
4095,<S2SV_StartBug> void fdct8_sse2 ( __m128i * in ) { <S2SV_EndBug> <S2SV_StartBug> const __m128i k__cospi_p16_p16 = _mm_set1_epi16 ( cospi_16_64 ) ; <S2SV_EndBug> ,<S2SV_ModStart> static <S2SV_ModStart> ( int16_t ) 
4096,"<S2SV_StartBug> if ( output ) <S2SV_EndBug> <S2SV_StartBug> strcpy ( output , ( const char * ) output_u8 ) ; <S2SV_EndBug> ",<S2SV_ModStart> size_t len = strlen ( ( char * ) output_u8 ) ; if ( len > 63 ) { free ( output_u8 ) ; return IDN2_TOO_BIG_DOMAIN ; } <S2SV_ModStart>  <S2SV_ModEnd> 
4097,<S2SV_StartBug> if ( ! unconditional ( & e -> ip ) ) <S2SV_EndBug> ,<S2SV_ModStart> e <S2SV_ModEnd> 
4098,"<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error == 0 ) <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( error ) return error ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4099,<S2SV_StartBug> if ( key_is_instantiated ( keyring ) ) { <S2SV_EndBug> ,<S2SV_ModStart> key_is_positive <S2SV_ModEnd> 
4100,"<S2SV_StartBug> int isopen ; <S2SV_EndBug> <S2SV_StartBug> size = offsetof ( POLYGON , p [ 0 ] ) + sizeof ( poly -> p [ 0 ] ) * npts ; <S2SV_EndBug> ","<S2SV_ModStart> base_size ; int <S2SV_ModStart> base_size = sizeof ( poly -> p [ 0 ] ) * npts ; <S2SV_ModStart> base_size ; if ( base_size / npts != <S2SV_ModStart> || size <= base_size ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""too<S2SV_blank>many<S2SV_blank>points<S2SV_blank>requested"" ) ) ) <S2SV_ModEnd> "
4101,"<S2SV_StartBug> void nsc_encode ( NSC_CONTEXT * context , const BYTE * bmpdata , UINT32 rowstride ) <S2SV_EndBug> <S2SV_StartBug> nsc_encode_argb_to_aycocg ( context , bmpdata , rowstride ) ; <S2SV_EndBug> <S2SV_StartBug> nsc_encode_subsampling ( context ) ; <S2SV_EndBug> ",<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> if ( ! context || ! bmpdata || ( rowstride == 0 ) ) return FALSE ; if ( ! <S2SV_ModStart> ) return FALSE <S2SV_ModStart> if ( ! <S2SV_ModStart> ) return FALSE ; } return TRUE ; <S2SV_ModEnd> 
4102,<S2SV_StartBug> * ( * fill ) ++ = suffix [ code ] ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( code >= clear ) { fprintf ( stderr , ""bad<S2SV_blank>input:<S2SV_blank>code=%d<S2SV_blank>is<S2SV_blank>larger<S2SV_blank>than<S2SV_blank>clear=%d\\n"" , code , clear ) ; return 0 ; } "
4103,<S2SV_StartBug> if ( ! from_buffer ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4104,<S2SV_StartBug> char added ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4105,"<S2SV_StartBug> separator = strchr ( context -> buffer , ':' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> 
4106,"<S2SV_StartBug> if ( memcmp ( & name [ 2 ] , & content_name [ 2 ] , 31L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( memcmp ( & name [ 33 ] , & content_name [ 33 ] , 8L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . content = fi ; <S2SV_EndBug> <S2SV_StartBug> else if ( memcmp ( & name [ 33 ] , & control_name [ 33 ] , 11L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . control = fi ; <S2SV_EndBug> <S2SV_StartBug> else if ( memcmp ( & name [ 33 ] , & spaninfo_name [ 33 ] , 8L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . spaninfo = fi ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> name_len == 40 && memcmp ( name , content_name , 40 <S2SV_ModEnd> <S2SV_ModStart> chm -> sec1 . content = fi ; } else if ( name_len == 44 && memcmp ( name , control_name , 44 <S2SV_ModEnd> <S2SV_ModStart> control <S2SV_ModEnd> <S2SV_ModStart> name_len == 41 && memcmp ( name , spaninfo_name , 41 <S2SV_ModEnd> <S2SV_ModStart> spaninfo <S2SV_ModEnd> <S2SV_ModStart> name_len == 105 && memcmp ( name , rtable_name , 105 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4107,"<S2SV_StartBug> void generate_filename ( const char * pattern , char * out , size_t q_len , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> static <S2SV_ModStart> break ; 
4108,"<S2SV_StartBug> if ( args -> skip ) <S2SV_EndBug> <S2SV_StartBug> if ( ! is_inter_block ( mbmi ) ) <S2SV_EndBug> <S2SV_StartBug> vp9_encode_block_intra ( x , plane , block , plane_bsize , tx_size , & mbmi -> skip ) ; <S2SV_EndBug> <S2SV_StartBug> dist_block ( plane , block , tx_size , args ) ; <S2SV_EndBug> <S2SV_StartBug> rd1 = RDCOST ( x -> rdmult , x -> rddiv , args -> rate , args -> dist ) ; <S2SV_EndBug> <S2SV_StartBug> rd2 = RDCOST ( x -> rdmult , x -> rddiv , 0 , args -> sse ) ; <S2SV_EndBug> <S2SV_StartBug> args -> this_rate += args -> rate ; <S2SV_EndBug> <S2SV_StartBug> args -> this_dist += args -> dist ; <S2SV_EndBug> <S2SV_StartBug> args -> this_sse += args -> sse ; <S2SV_EndBug> <S2SV_StartBug> args -> skip = 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int rate ; int64_t dist ; int64_t sse ; if ( args -> exit_early <S2SV_ModEnd> <S2SV_ModStart> { struct encode_b_args arg = { x , NULL , & mbmi -> skip } ; vp9_encode_block_intra ( <S2SV_ModEnd> <S2SV_ModStart> arg ) ; dist_block ( x , plane , block , tx_size , & dist , & sse ) ; } else if ( max_txsize_lookup [ plane_bsize ] == tx_size ) { if ( x -> skip_txfm [ ( plane << 2 ) + ( block >> ( tx_size << 1 ) ) ] == SKIP_TXFM_NONE ) { <S2SV_ModEnd> <S2SV_ModStart> x , plane , block , tx_size , & dist , & sse ) ; } else if ( x -> skip_txfm [ ( plane << 2 ) + ( block >> ( tx_size << 1 ) ) ] == SKIP_TXFM_AC_ONLY ) { tran_low_t * const coeff = BLOCK_OFFSET ( x -> plane [ plane ] . coeff , block ) ; tran_low_t * const dqcoeff = BLOCK_OFFSET ( xd -> plane [ plane ] . dqcoeff , block ) ; vp9_xform_quant_dc ( x , plane , block , plane_bsize , tx_size ) ; sse = x -> bsse [ ( plane << 2 ) + ( block >> ( tx_size << 1 ) ) ] << 4 ; dist = sse ; if ( x -> plane [ plane ] . eobs [ block ] ) { const int64_t orig_sse = ( int64_t ) coeff [ 0 ] * coeff [ 0 ] ; const int64_t resd_sse = coeff [ 0 ] - dqcoeff [ 0 ] ; int64_t dc_correct = orig_sse - resd_sse * resd_sse ; # if CONFIG_VP9_HIGHBITDEPTH dc_correct >>= ( ( xd -> bd - 8 ) * 2 ) ; # endif if ( tx_size != TX_32X32 ) dc_correct >>= 2 ; dist = MAX ( 0 , sse - dc_correct ) ; } } else { x -> plane [ plane ] . eobs [ block ] = 0 ; sse = x -> bsse [ ( plane << 2 ) + ( block >> ( tx_size << 1 ) ) ] << 4 ; dist = sse ; } } else { vp9_xform_quant ( x , plane , block , plane_bsize , tx_size ) ; dist_block ( x , plane , block , tx_size , & dist , & sse ) ; } rd = RDCOST ( x -> rdmult , x -> rddiv , 0 , dist ) ; if ( args -> this_rd + rd > args -> best_rd ) { args -> exit_early = 1 ; return ; } rate = <S2SV_ModEnd> <S2SV_ModStart> rate , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> exit_early <S2SV_ModEnd> <S2SV_ModStart> args -> skippable &= ! x -> plane [ plane ] . eobs [ block ] ; "
4109,"<S2SV_StartBug> for ( j = 0 ; j < ( ssize_t ) length ; j += 8 ) <S2SV_EndBug> <S2SV_StartBug> ""InsufficientImageDataInFile"" , image -> filename ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( DiscardBlobBytes ( image , length ) == <S2SV_ModEnd> <S2SV_ModStart> ""UnexpectedEndOfFile"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4110,"<S2SV_StartBug> u8 * gb_cur , * version_tlv , version , version_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += version_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += lto_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += wks_length ; <S2SV_EndBug> <S2SV_StartBug> & miux_length ) ; <S2SV_EndBug> ","<S2SV_ModStart> version , version_length ; u8 lto_length , wks_length , miux_length ; u8 * version_tlv = NULL , * lto_tlv = NULL , * wks_tlv = NULL , * miux_tlv = NULL <S2SV_ModEnd> <S2SV_ModStart> if ( ! version_tlv ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> if ( ! lto_tlv ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> if ( ! wks_tlv ) { ret = - ENOMEM ; goto out ; } <S2SV_ModStart> if ( ! miux_tlv ) { ret = - ENOMEM ; goto out ; } "
4111,<S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( up -> replay_window > up -> bmp_len * sizeof ( __u32 ) * 8 ) return - EINVAL ; 
4112,"<S2SV_StartBug> mrb_value value ; <S2SV_EndBug> <S2SV_StartBug> fiber_check_cfunc ( mrb , c ) ; <S2SV_EndBug> <S2SV_StartBug> if ( resume && c -> status == MRB_FIBER_TRANSFERRED ) { <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_RUNNING || c -> status == MRB_FIBER_RESUMED ) { <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_TERMINATED ) { <S2SV_EndBug> <S2SV_StartBug> mrb -> c -> status = resume ? MRB_FIBER_RESUMED : MRB_FIBER_TRANSFERRED ; <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_CREATED ) { <S2SV_EndBug> <S2SV_StartBug> if ( len >= c -> stend - c -> stack ) { <S2SV_EndBug> <S2SV_StartBug> fiber_switch_context ( mrb , c ) ; <S2SV_EndBug> ","<S2SV_ModStart> enum mrb_fiber_state status ; <S2SV_ModStart> ; status = c -> status <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> old_c <S2SV_ModEnd> <S2SV_ModStart> fiber_switch_context ( mrb , c ) ; if ( <S2SV_ModEnd> <S2SV_ModStart> mrb_stack_extend ( mrb , len + 2 ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4113,<S2SV_StartBug> uint_t i ; <S2SV_EndBug> <S2SV_StartBug> if ( length < sizeof ( DhcpMessage ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> if ( option -> code == DHCP_OPT_END ) <S2SV_EndBug> <S2SV_StartBug> if ( ( i + 1 ) >= length || ( i + 1 + option -> length ) >= length ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> ,<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> >= <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModEnd> <S2SV_ModStart> { } else <S2SV_ModEnd> <S2SV_ModStart> ) { break ; } else { if ( ( i + 1 ) >= length <S2SV_ModStart> sizeof ( DhcpOption ) <S2SV_ModEnd> <S2SV_ModStart> > <S2SV_ModEnd> <S2SV_ModStart> } } 
4114,<S2SV_StartBug> ipv6_select_ident ( fptr ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , ( struct rt6_info * ) skb_dst ( skb ) "
4115,"<S2SV_StartBug> rb_define_singleton_method ( klass , ""read_memory"" , read_memory , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> rb_define_singleton_method ( klass , ""from_document"" , from_document , 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> - <S2SV_ModStart> - 
4116,<S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> ,<S2SV_ModStart> status = MagickFalse ; break <S2SV_ModEnd> 
4117,<S2SV_StartBug> int i ; <S2SV_EndBug> ,<S2SV_ModStart> jas_matind_t i ; jas_matind_t <S2SV_ModEnd> 
4118,<S2SV_StartBug> struct iovec * iovec ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> , struct iov_iter * iter ) { if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModEnd> <S2SV_ModStart> iov_iter_init ( iter , rw , iovec , * nr_segs , len ) ; "
4119,<S2SV_StartBug> if ( ( clone_flags & CLONE_THREAD ) && ! ( clone_flags & CLONE_SIGHAND ) ) <S2SV_EndBug> ,<S2SV_ModStart> ( CLONE_NEWUSER | CLONE_FS ) ) == ( CLONE_NEWUSER | CLONE_FS ) ) return ERR_PTR ( - EINVAL ) ; if ( ( clone_flags & 
4120,<S2SV_StartBug> void ntlm_print_negotiate_flags ( UINT32 flags ) <S2SV_EndBug> ,<S2SV_ModStart> static 
4121,<S2SV_StartBug> new_fname = malloc ( strlen ( fname ) + strlen ( dirname ) + 16 ) ; <S2SV_EndBug> ,<S2SV_ModStart> safe_calloc <S2SV_ModEnd> 
4122,"<S2SV_StartBug> # line 496 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 861 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 558 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 855 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 607 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 708 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> if ( incomplete_class ) { <S2SV_EndBug> <S2SV_StartBug> # line 785 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 699 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> return object_common2 ( UNSERIALIZE_PASSTHRU , <S2SV_EndBug> <S2SV_StartBug> object_common1 ( UNSERIALIZE_PASSTHRU , ZEND_STANDARD_CLASS_DEF_PTR ) ) ; <S2SV_EndBug> <S2SV_StartBug> # line 819 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 678 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 861 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 643 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 917 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 610 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 971 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 600 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1069 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 585 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1143 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 558 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1197 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 551 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1212 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 544 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1222 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 521 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1268 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 500 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1312 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 863 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> ","<S2SV_ModStart> 501 <S2SV_ModEnd> <S2SV_ModStart> 875 <S2SV_ModEnd> <S2SV_ModStart> 563 <S2SV_ModEnd> <S2SV_ModStart> 869 <S2SV_ModEnd> <S2SV_ModStart> 612 <S2SV_ModEnd> <S2SV_ModStart> 717 <S2SV_ModEnd> <S2SV_ModStart> elements < 0 ) { efree ( class_name ) ; return 0 ; } if ( <S2SV_ModStart> 795 <S2SV_ModEnd> <S2SV_ModStart> 704 ""ext/standard/var_unserializer.re"" { long elements ; <S2SV_ModEnd> <S2SV_ModStart> elements = object_common1 ( UNSERIALIZE_PASSTHRU , ZEND_STANDARD_CLASS_DEF_PTR ) ; if ( elements < 0 ) { return 0 ; } <S2SV_ModStart> elements <S2SV_ModEnd> <S2SV_ModStart> 833 <S2SV_ModEnd> <S2SV_ModStart> 683 <S2SV_ModEnd> <S2SV_ModStart> 875 <S2SV_ModEnd> <S2SV_ModStart> 648 <S2SV_ModEnd> <S2SV_ModStart> 931 <S2SV_ModEnd> <S2SV_ModStart> 615 <S2SV_ModEnd> <S2SV_ModStart> 985 <S2SV_ModEnd> <S2SV_ModStart> 605 <S2SV_ModEnd> <S2SV_ModStart> 1083 <S2SV_ModEnd> <S2SV_ModStart> 590 <S2SV_ModEnd> <S2SV_ModStart> 1157 <S2SV_ModEnd> <S2SV_ModStart> 563 <S2SV_ModEnd> <S2SV_ModStart> 1211 <S2SV_ModEnd> <S2SV_ModStart> 556 <S2SV_ModEnd> <S2SV_ModStart> 1226 <S2SV_ModEnd> <S2SV_ModStart> 549 <S2SV_ModEnd> <S2SV_ModStart> 1236 <S2SV_ModEnd> <S2SV_ModStart> 526 <S2SV_ModEnd> <S2SV_ModStart> 1282 <S2SV_ModEnd> <S2SV_ModStart> 505 <S2SV_ModEnd> <S2SV_ModStart> 1326 <S2SV_ModEnd> <S2SV_ModStart> 877 <S2SV_ModEnd> "
4123,"<S2SV_StartBug> if ( send ( ts [ h ] . cmd_fdw , & cmd , sizeof ( cmd ) , 0 ) == sizeof ( cmd ) ) <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
4124,<S2SV_StartBug> * ( * fill ) ++ = suffix [ code ] ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( code >= clear ) { fprintf ( stderr , ""bad<S2SV_blank>input:<S2SV_blank>code=%d<S2SV_blank>is<S2SV_blank>larger<S2SV_blank>than<S2SV_blank>clear=%d\\n"" , code , clear ) ; return 0 ; } "
4125,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4126,<S2SV_StartBug> p -> exit_signal = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( clone_flags & CLONE_PARENT ) <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( clone_flags & CLONE_THREAD ) p -> exit_signal = - 1 ; else p -> exit_signal = current -> group_leader -> exit_signal ; <S2SV_ModStart> p -> exit_signal = args -> exit_signal ; 
4127,"<S2SV_StartBug> const u_char * ep , uint32_t phase , uint32_t doi0 _U_ , <S2SV_EndBug> <S2SV_StartBug> uint32_t proto0 _U_ , int depth ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>orig=("" ) ) ; <S2SV_EndBug> <S2SV_StartBug> size_t nmap = sizeof ( oakley_t_map ) / sizeof ( oakley_t_map [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case IPSECDOI_NTYPE_REPLAY_STATUS : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> isakmp_print ( ndo , cp , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "")"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> _U_ <S2SV_ModStart> _U_ <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) ; ND_PRINT ( ( ndo , ""<S2SV_blank>attrs=("" ) <S2SV_ModStart> ND_PRINT ( ( ndo , "")"" ) ) ; <S2SV_ModStart> ND_PRINT ( ( ndo , ""<S2SV_blank>status=("" ) ) ; <S2SV_ModStart> ND_PRINT ( ( ndo , "")"" ) ) <S2SV_ModEnd> <S2SV_ModStart> if ( ndo -> ndo_vflag > 3 ) { ND_PRINT ( ( ndo , ""<S2SV_blank>data=("" ) ) ; if ( ! rawprint ( ndo , ( const uint8_t * ) ( cp ) , ep - cp ) ) goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> } else { if ( ! ike_show_somedata ( ndo , cp , ep ) ) goto trunc ; } break ; } "
4128,"<S2SV_StartBug> iframe -> iv = nghttp2_mem_malloc ( mem , sizeof ( nghttp2_settings_entry ) * <S2SV_EndBug> ","<S2SV_ModStart> if ( iframe -> max_niv - 1 > session -> max_settings ) { rv = nghttp2_session_terminate_session_with_reason ( session , NGHTTP2_ENHANCE_YOUR_CALM , ""SETTINGS:<S2SV_blank>too<S2SV_blank>many<S2SV_blank>setting<S2SV_blank>entries"" ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } return ( ssize_t ) inlen ; } "
4129,"<S2SV_StartBug> ! inode_capable ( VFS_I ( ip ) , CAP_FSETID ) ) <S2SV_EndBug> ",<S2SV_ModStart> capable_wrt_inode_uidgid <S2SV_ModEnd> 
4130,<S2SV_StartBug> data -> o_arg . open_flags ) ; <S2SV_EndBug> ,<S2SV_ModStart> fmode <S2SV_ModEnd> 
4131,"<S2SV_StartBug> # define EXIFMultipleValues ( size , format , arg ) { ssize_t component ; size_t length ; unsigned char * p1 ; length = 0 ; p1 = p ; for ( component = 0 ; component < components ; component ++ ) { length += FormatLocaleString ( buffer + length , MagickPathExtent - length , format "",<S2SV_blank>"" , arg ) ; if ( length >= ( MagickPathExtent - 1 ) ) length = MagickPathExtent - 1 ; p1 += size ; } if ( length > 1 ) buffer [ length - 2 ] = '\\0' ; value = AcquireString ( buffer ) ; } <S2SV_EndBug> <S2SV_StartBug> # define EXIFMultipleFractions ( size , format , arg1 , arg2 ) { ssize_t component ; size_t length ; unsigned char * p1 ; length = 0 ; p1 = p ; for ( component = 0 ; component < components ; component ++ ) { length += FormatLocaleString ( buffer + length , MagickPathExtent - length , format "",<S2SV_blank>"" , ( arg1 ) , ( arg2 ) ) ; if ( length >= ( MagickPathExtent - 1 ) ) length = MagickPathExtent - 1 ; p1 += size ; } if ( length > 1 ) buffer [ length - 2 ] = '\\0' ; value = AcquireString ( buffer ) ; } <S2SV_EndBug> <S2SV_StartBug> if ( GetValueFromSplayTree ( exif_resources , q ) == q ) <S2SV_EndBug> <S2SV_StartBug> components = ( ssize_t ) ReadPropertySignedLong ( endian , q + 4 ) ; <S2SV_EndBug> ",<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> q > ( exif + length - 12 ) ) break ; if ( <S2SV_ModStart> ; if ( components < 0 ) break 
4132,<S2SV_StartBug> if ( ! static_key_enabled ( work -> key ) ) <S2SV_EndBug> ,<S2SV_ModStart> BUG_ON <S2SV_ModEnd> <S2SV_ModStart> ; static_key_slow_dec <S2SV_ModEnd> 
4133,<S2SV_StartBug> goto errout_locked ; <S2SV_EndBug> <S2SV_StartBug> kfree ( family -> attrbuf ) ; <S2SV_EndBug> ,<S2SV_ModStart> errout_free <S2SV_ModEnd> <S2SV_ModStart> errout_free : 
4134,"<S2SV_StartBug> memcpy ( & bss_cfg -> wmm_info , wmm_ie + <S2SV_EndBug> <S2SV_StartBug> sizeof ( struct ieee_types_header ) , * ( wmm_ie + 1 ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> > sizeof ( struct mwifiex_types_wmm_info ) ) return ; memcpy ( & bss_cfg -> wmm_info , wmm_ie + sizeof ( struct ieee_types_header ) , * ( wmm_ie + 1 ) "
4135,"<S2SV_StartBug> separator = strchr ( connection -> buffer , '=' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> 
4136,<S2SV_StartBug> * ( buf + insertpos ) = x2c ( & buf [ editpos + 3 ] ) ; <S2SV_EndBug> ,<S2SV_ModStart> _x2c <S2SV_ModEnd> 
4137,"<S2SV_StartBug> if ( flags == EXT4_GET_BLOCKS_PRE_IO ) { <S2SV_EndBug> <S2SV_StartBug> ext4_set_inode_state ( inode , EXT4_STATE_DIO_UNWRITTEN ) ; <S2SV_EndBug> <S2SV_StartBug> if ( flags == EXT4_GET_BLOCKS_CONVERT ) { <S2SV_EndBug> ",<S2SV_ModStart> ( flags & EXT4_GET_BLOCKS_PRE_IO ) ) <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( ext4_should_dioread_nolock ( inode ) ) set_buffer_uninit ( bh_result <S2SV_ModStart> ( flags & EXT4_GET_BLOCKS_CONVERT ) <S2SV_ModEnd> 
4138,"<S2SV_StartBug> ret = usbip_recv ( ud -> tcp_socket , urb -> transfer_buffer , size ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart> if ( size > urb -> transfer_buffer_length ) { <S2SV_ModEnd> <S2SV_ModStart> return 0 ; <S2SV_ModStart> ret = usbip_recv ( ud -> tcp_socket , urb -> transfer_buffer , size ) ; if ( ret != size ) { dev_err ( & urb -> dev -> dev , ""recv<S2SV_blank>xbuf,<S2SV_blank>%d\\n"" , ret ) ; if ( ud -> side == USBIP_STUB ) { usbip_event_add ( ud , SDEV_EVENT_ERROR_TCP ) ; } else { usbip_event_add ( ud , VDEV_EVENT_ERROR_TCP ) ; return - EPIPE ; } } "
4139,<S2SV_StartBug> net -> dev_base_seq = 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> get_random_bytes ( & net -> hash_mix , sizeof ( u32 ) ) ; "
4140,"<S2SV_StartBug> strlcpy ( ualg -> cru_name , alg -> cra_name , sizeof ( ualg -> cru_name ) ) ; <S2SV_EndBug> <S2SV_StartBug> strlcpy ( ualg -> cru_driver_name , alg -> cra_driver_name , <S2SV_EndBug> <S2SV_StartBug> strlcpy ( ualg -> cru_module_name , module_name ( alg -> cra_module ) , <S2SV_EndBug> <S2SV_StartBug> strlcpy ( rl . type , ""larval"" , sizeof ( rl . type ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> strncpy <S2SV_ModEnd> 
4141,<S2SV_StartBug> cJSON * c ; <S2SV_EndBug> ,"<S2SV_ModStart> return cJSON_ParseWithOpts ( value , 0 , 0 ) ; <S2SV_ModEnd> "
4142,<S2SV_StartBug> unpack_streams += ( size_t ) f [ i ] . numUnpackStreams ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unpack_streams > SIZE_MAX - UMAX_ENTRY ) { return ( - 1 ) ; } 
4143,<S2SV_StartBug> BUG_ON ( direction != ITER_PIPE ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; WARN_ON ( pipe -> nrbufs == pipe -> buffers 
4144,<S2SV_StartBug> mnt_flags |= mnt -> mnt . mnt_flags & MNT_PROPAGATION_MASK ; <S2SV_EndBug> ,<S2SV_ModStart> ~ MNT_USER_SETTABLE_MASK <S2SV_ModEnd> 
4145,"<S2SV_StartBug> static int fsmVerify ( const char * path , rpmfi fi ) <S2SV_EndBug> <S2SV_StartBug> rc = fsmStat ( path , 0 , & dsb ) ; <S2SV_EndBug> <S2SV_StartBug> if ( S_ISDIR ( dsb . st_mode ) ) return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> , const struct stat * fsb <S2SV_ModStart> uid_t luid = dsb . st_uid ; <S2SV_ModStart> && ( luid == 0 || luid == fsb -> st_uid ) ) <S2SV_ModEnd> "
4146,"<S2SV_StartBug> snd_pcm_stream_unlock_irqrestore ( substream , flags ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> snd_pcm_stream_unlock_irqrestore ( substream , flags ) ; "
4147,<S2SV_StartBug> for ( plane = 0 ; in -> data [ plane ] && plane < 4 ; plane ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( plane = 0 ; in -> data [ plane ] && plane < 4 ; plane ++ ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && in -> data [ plane ] && in -> linesize [ plane ] <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && in -> data [ plane ] && in -> linesize [ plane ] 
4148,"<S2SV_StartBug> bool valid_handle ; <S2SV_EndBug> <S2SV_StartBug> valid_handle = ion_handle_validate ( client , handle ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ion_free_nolock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4149,<S2SV_StartBug> WORD16 i2_level_arr [ 16 ] ; <S2SV_EndBug> ,<S2SV_ModStart> ai2_level_arr [ 19 ] ; WORD16 * i2_level_arr = & ai2_level_arr [ 3 <S2SV_ModEnd> 
4150,<S2SV_StartBug> if ( frame -> color_primaries != AVCOL_PRI_UNSPECIFIED ) <S2SV_EndBug> ,"<S2SV_ModStart> print_primaries ( w , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4151,<S2SV_StartBug> if ( ! s -> cdx [ i ] || ! s -> cdy [ i ] ) { <S2SV_EndBug> ,<S2SV_ModStart> s -> cdx [ i ] == 3 || s -> cdx [ i ] > 4 || <S2SV_ModStart> || s -> cdy [ i ] == 3 || s -> cdy [ i ] > 4 
4152,<S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.WAV<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } buff "
4153,<S2SV_StartBug> follow_dotdot ( nd ) ; <S2SV_EndBug> ,<S2SV_ModStart> return 
4154,<S2SV_StartBug> dname = malloc ( strlen ( name ) + 16 ) ; <S2SV_EndBug> ,<S2SV_ModStart> safe_calloc <S2SV_ModEnd> 
4155,"<S2SV_StartBug> while ( ( type = gettoken_query ( state , & val , & lenval , & strval , & flag ) ) != END ) <S2SV_EndBug> ",<S2SV_ModStart> check_stack_depth ( ) ; 
4156,<S2SV_StartBug> struct sock * sk ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL 
4157,<S2SV_StartBug> static void usage ( char * progname ) { <S2SV_EndBug> <S2SV_StartBug> progname ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> exec_name <S2SV_ModEnd> 
4158,"<S2SV_StartBug> int watchdog = 0 ; <S2SV_EndBug> <S2SV_StartBug> num = SSL_shutdown ( c -> ssl ) ; <S2SV_EndBug> <S2SV_StartBug> err = SSL_get_error ( c -> ssl , ( int ) num ) ; <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_SYSCALL : <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_ZERO_RETURN : <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_WANT_WRITE : <S2SV_EndBug> <S2SV_StartBug> num = writesocket ( c -> sock_wfd -> fd , c -> ssl_buff , c -> ssl_ptr ) ; <S2SV_EndBug> <S2SV_StartBug> num = readsocket ( c -> sock_rfd -> fd , <S2SV_EndBug> <S2SV_StartBug> write_wants_read = 0 ; <S2SV_EndBug> <S2SV_StartBug> num = SSL_write ( c -> ssl , c -> sock_buff , ( int ) ( c -> sock_ptr ) ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( err = SSL_get_error ( c -> ssl , ( int ) num ) ) { <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_SYSCALL : <S2SV_EndBug> <S2SV_StartBug> if ( num && parse_socket_error ( c , ""SSL_write"" ) ) <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_ZERO_RETURN : <S2SV_EndBug> <S2SV_StartBug> s_log ( LOG_INFO , ""TLS<S2SV_blank>closed<S2SV_blank>(SSL_write)"" ) ; <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_SSL : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> SSL_ERROR_WANT_WRITE : s_log ( LOG_DEBUG , ""SSL_shutdown<S2SV_blank>returned<S2SV_blank>WANT_WRITE:<S2SV_blank>retrying"" ) ; shutdown_wants_read = 0 ; shutdown_wants_write = 1 ; break ; case SSL_ERROR_WANT_READ : s_log ( LOG_DEBUG , ""SSL_shutdown<S2SV_blank>returned<S2SV_blank>WANT_READ:<S2SV_blank>retrying"" ) ; shutdown_wants_read = 1 ; shutdown_wants_write = 0 ; break ; case SSL_ERROR_SSL : sslerror ( ""SSL_shutdown"" ) ; throw_exception ( c , 1 ) ; case SSL_ERROR_ZERO_RETURN : <S2SV_ModEnd> <S2SV_ModStart> SSL_ERROR_SYSCALL : if ( parse_socket_error ( c , ""SSL_shutdown"" ) ) break ; <S2SV_ModEnd> <S2SV_ModStart> default : s_log ( LOG_ERR , ""SSL_shutdown/SSL_get_error<S2SV_blank>returned<S2SV_blank>%d"" , err ) ; throw_exception ( c , 1 <S2SV_ModEnd> <S2SV_ModStart> ssize_t <S2SV_ModStart> ssize_t <S2SV_ModStart> int num = SSL_write ( c -> ssl , c -> sock_buff , ( int ) ( c -> sock_ptr ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> SSL_ERROR_SSL : sslerror ( ""SSL_write"" ) ; throw_exception ( c , 1 ) ; case SSL_ERROR_ZERO_RETURN : case <S2SV_ModStart> parse_socket_error ( c , ""SSL_write"" ) && num <S2SV_ModEnd> <S2SV_ModStart> default : s_log ( LOG_ERR , ""SSL_write/SSL_get_error<S2SV_blank>returned<S2SV_blank>%d"" , err ) ; throw_exception ( c , 1 ) ; } } if ( ( read_wants_read && ( ssl_can_rd || pending ) ) || ( read_wants_write && ssl_can_wr ) ) { int num = SSL_read ( c -> ssl , c -> ssl_buff + c -> ssl_ptr , ( int ) ( BUFFSIZE - c -> ssl_ptr ) ) ; read_wants_read = 0 ; read_wants_write = 0 ; switch ( err = SSL_get_error ( c -> ssl , num ) ) { case SSL_ERROR_NONE : if ( num == 0 ) { s_log ( LOG_DEBUG , ""SSL_read<S2SV_blank>returned<S2SV_blank>0"" ) ; break ; } c -> ssl_ptr += ( size_t ) num ; watchdog = 0 ; break ; case SSL_ERROR_WANT_WRITE : s_log ( LOG_DEBUG , ""SSL_read<S2SV_blank>returned<S2SV_blank>WANT_WRITE:<S2SV_blank>retrying"" ) ; read_wants_write = 1 ; break ; case SSL_ERROR_WANT_READ : # if 0 s_log ( LOG_DEBUG , ""SSL_read<S2SV_blank>returned<S2SV_blank>WANT_READ:<S2SV_blank>retrying"" ) ; # endif read_wants_read = 1 ; break ; case SSL_ERROR_WANT_X509_LOOKUP : s_log ( LOG_DEBUG , ""SSL_read<S2SV_blank>returned<S2SV_blank>WANT_X509_LOOKUP:<S2SV_blank>retrying"" ) ; break ; case SSL_ERROR_SSL : sslerror ( ""SSL_read"" ) ; throw_exception ( c , 1 ) ; <S2SV_ModStart> ""TLS<S2SV_blank>closed<S2SV_blank>(SSL_read)"" <S2SV_ModEnd> <S2SV_ModStart> SSL_ERROR_SYSCALL : if ( parse_socket_error ( c , ""SSL_read"" ) && num <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4159,<S2SV_StartBug> return err ; <S2SV_EndBug> ,<S2SV_ModStart> goto free_data <S2SV_ModEnd> 
4160,"<S2SV_StartBug> evas_object_resize ( app_data -> window , DEFAULT_WIDTH , DEFAULT_HEIGHT ) ; <S2SV_EndBug> ","<S2SV_ModStart> window_width , window_height <S2SV_ModEnd> "
4161,<S2SV_StartBug> if ( refill_pi_state_cache ( ) ) <S2SV_EndBug> <S2SV_StartBug> goto out_put_key1 ; <S2SV_EndBug> ,"<S2SV_ModStart> uaddr1 == uaddr2 ) return - EINVAL ; if ( <S2SV_ModStart> if ( requeue_pi && match_futex ( & key1 , & key2 ) ) { ret = - EINVAL ; goto out_put_keys ; } "
4162,"<S2SV_StartBug> sctp_addiphdr_t * hdr ; <S2SV_EndBug> <S2SV_StartBug> int all_param_pass = 1 ; <S2SV_EndBug> <S2SV_StartBug> while ( chunk_len > 0 ) { <S2SV_EndBug> <S2SV_StartBug> asconf_param ) ; <S2SV_EndBug> <S2SV_StartBug> all_param_pass = 0 ; <S2SV_EndBug> <S2SV_StartBug> asconf_param -> crr_id , err_code , <S2SV_EndBug> <S2SV_StartBug> length = ntohs ( asconf_param -> param_hdr . length ) ; <S2SV_EndBug> ","<S2SV_ModStart> sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; bool all_param_pass = true ; union sctp_params param ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sctp_walk_params ( param , addip , addip_hdr . params ) { if ( param . p -> type == SCTP_PARAM_IPV4_ADDRESS || param . p -> type == SCTP_PARAM_IPV6_ADDRESS ) continue ; <S2SV_ModEnd> <S2SV_ModStart> param . addip ) ; if ( err_code != SCTP_ERROR_NO_ERROR <S2SV_ModEnd> <S2SV_ModStart> false <S2SV_ModEnd> <S2SV_ModStart> param . addip <S2SV_ModEnd> <S2SV_ModStart> err_code , param . addip ) ; if ( err_code == SCTP_ERROR_RSRC_LOW <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4163,<S2SV_StartBug> cpio -> extract_flags |= ARCHIVE_EXTRACT_PERM ; <S2SV_EndBug> <S2SV_StartBug> cpio -> extract_flags &= ~ ARCHIVE_EXTRACT_SECURE_NODOTDOT ; <S2SV_EndBug> ,<S2SV_ModStart> ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ; cpio -> extract_flags |= <S2SV_ModStart> ; cpio -> extract_flags &= ~ ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS 
4164,<S2SV_StartBug> while ( c != EOF && c != '\\n' ) { <S2SV_EndBug> <S2SV_StartBug> c = tok_nextc ( tok ) ; <S2SV_EndBug> ,"<S2SV_ModStart> const char * prefix , * p , * type_start ; <S2SV_ModStart> } if ( tok -> type_comments ) { p = tok -> start ; prefix = type_comment_prefix ; while ( * prefix && p < tok -> cur ) { if ( * prefix == '<S2SV_blank>' ) { while ( * p == '<S2SV_blank>' || * p == '\\t' ) { p ++ ; } } else if ( * prefix == * p ) { p ++ ; } else { break ; } prefix ++ ; } if ( ! * prefix ) { int is_type_ignore = 1 ; tok_backup ( tok , c ) ; type_start = p ; is_type_ignore = tok -> cur >= p + 6 && memcmp ( p , ""ignore"" , 6 ) == 0 ; p += 6 ; while ( is_type_ignore && p < tok -> cur ) { if ( * p == '#' ) break ; is_type_ignore = is_type_ignore && ( * p == '<S2SV_blank>' || * p == '\\t' ) ; p ++ ; } if ( is_type_ignore ) { if ( blankline ) { tok_nextc ( tok ) ; tok -> atbol = 1 ; } return TYPE_IGNORE ; } else { * p_start = ( char * ) type_start ; * p_end = tok -> cur ; return TYPE_COMMENT ; } } "
4165,<S2SV_StartBug> LAYER_CONTEXT * const lc = get_layer_context ( & cpi -> svc ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> oxcf . starting_buffer_level = lc -> starting_buffer_level ; <S2SV_EndBug> ,<S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> alt_ref_source <S2SV_ModEnd> <S2SV_ModStart> alt_ref_source <S2SV_ModEnd> 
4166,"<S2SV_StartBug> status = ksz8851ReadReg ( interface , KSZ8851_REG_ISR ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_ISR , ISR_LCIS ) ; <S2SV_EndBug> <S2SV_StartBug> status = ksz8851ReadReg ( interface , KSZ8851_REG_P1SR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & P1SR_OPERATION_DUPLEX ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( status & ISR_RXIS ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_ISR , ISR_RXIS ) ; <S2SV_EndBug> <S2SV_StartBug> frameCount = MSB ( ksz8851ReadReg ( interface , KSZ8851_REG_RXFCTR ) ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851SetBit ( interface , KSZ8851_REG_IER , IER_LCIE | IER_RXIE ) ; <S2SV_EndBug> ","<S2SV_ModStart> KSZ8851_ISR ) ; if ( ( status & KSZ8851_ISR_LCIS <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_ISR , KSZ8851_ISR_LCIS <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_P1SR ) ; if ( ( status & KSZ8851_P1SR_LINK_GOOD ) != 0 ) { if ( ( status & KSZ8851_P1SR_OPERATION_SPEED <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_P1SR_OPERATION_DUPLEX <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_ISR_RXIS <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_ISR , KSZ8851_ISR_RXIS <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_RXFCTR <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_IER , KSZ8851_IER_LCIE | KSZ8851_IER_RXIE <S2SV_ModEnd> "
4167,<S2SV_StartBug> convert_to_double_ex ( zval_affine_elem ) ; <S2SV_EndBug> <S2SV_StartBug> affine [ i ] = Z_DVAL_PP ( zval_affine_elem ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . x = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . y = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . width = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . height = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> ,<S2SV_ModStart> { zval dval ; dval = * * zval_affine_elem ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> <S2SV_ModStart> Z_DVAL ( dval ) ; } <S2SV_ModEnd> <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . x = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . y = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . width = <S2SV_ModStart> } <S2SV_ModStart> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> <S2SV_ModStart> Z_LVAL ( lval ) ; } else { rect . height = <S2SV_ModStart> } 
4168,<S2SV_StartBug> vp9_free_context_buffers ( cm ) ; <S2SV_EndBug> ,"<S2SV_ModStart> vp9_set_mb_mi ( cm , 0 , 0 ) ; "
4169,"<S2SV_StartBug> __mincore_unmapped_range ( addr , end , vma , vec ) ; <S2SV_EndBug> <S2SV_StartBug> __mincore_unmapped_range ( addr , addr + PAGE_SIZE , <S2SV_EndBug> <S2SV_StartBug> if ( non_swap_entry ( entry ) ) { <S2SV_EndBug> ","<S2SV_ModStart> memset ( vec , 1 , nr <S2SV_ModEnd> <S2SV_ModStart> * vec = 0 <S2SV_ModEnd> <S2SV_ModStart> * vec = ! ! <S2SV_ModEnd> <S2SV_ModStart> ; <S2SV_ModEnd> "
4170,"<S2SV_StartBug> buffer = zend_string_alloc ( len , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> zend_string_safe_alloc ( 1 , len , 0 <S2SV_ModEnd> "
4171,<S2SV_StartBug> if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) <S2SV_EndBug> ,<S2SV_ModStart> + <S2SV_ModEnd> <S2SV_ModStart> > vdev -> config_len ) { return ; } <S2SV_ModEnd> 
4172,"<S2SV_StartBug> u64 nsec = ( u64 ) jiffies * TICK_NSEC ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & value -> tv_nsec ) ; <S2SV_EndBug> ","<S2SV_ModStart> u32 rem ; value -> tv_sec = div_u64_rem ( <S2SV_ModEnd> <S2SV_ModStart> , NSEC_PER_SEC , & rem ) <S2SV_ModStart> tv_nsec = rem <S2SV_ModEnd> "
4173,<S2SV_StartBug> ret = convert_ctx_accesses ( env ) ; <S2SV_EndBug> ,<S2SV_ModStart> sanitize_dead_code ( env ) ; if ( ret == 0 ) 
4174,<S2SV_StartBug> # if CONFIG_MEM_MANAGER <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug> ,<S2SV_ModStart> new_addr = realloc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4175,<S2SV_StartBug> if ( errcode != 0 ) <S2SV_EndBug> ,"<S2SV_ModStart> && state -> status == NULL ) state -> status = ""UNKNOWN_REASON"" <S2SV_ModEnd> "
4176,"<S2SV_StartBug> if ( CheckMemoryOverflow ( ( image -> columns + 7UL ) >> 3UL , image -> rows ) != MagickFalse ) <S2SV_EndBug> <S2SV_StartBug> if ( CheckMemoryOverflow ( number_pixels , viff_info . number_data_bands ) != MagickFalse ) <S2SV_EndBug> ",<S2SV_ModStart> HeapOverflowSanityCheck <S2SV_ModEnd> <S2SV_ModStart> HeapOverflowSanityCheck <S2SV_ModEnd> 
4177,"<S2SV_StartBug> if ( ( r = sshbuf_get_u32 ( b , & comp -> type ) ) != 0 || <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4178,<S2SV_StartBug> if ( clone_info ) <S2SV_EndBug> <S2SV_StartBug> DeleteImageFromList ( & tmp ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( tmp == image2 ) image2 = ( Image * ) NULL ; 
4179,"<S2SV_StartBug> int open_mode = opendata -> o_arg . open_flags & ( FMODE_READ | FMODE_WRITE | O_EXCL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( can_open_cached ( state , open_mode ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( can_open_cached ( state , open_mode ) ) { <S2SV_EndBug> <S2SV_StartBug> update_open_stateflags ( state , open_mode ) ; <S2SV_EndBug> <S2SV_StartBug> ! can_open_delegated ( delegation , open_mode ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( update_open_stateid ( state , NULL , & stateid , open_mode ) ) <S2SV_EndBug> ","<S2SV_ModStart> O_EXCL ; fmode_t fmode = opendata -> o_arg . fmode <S2SV_ModEnd> <S2SV_ModStart> fmode , <S2SV_ModStart> fmode , <S2SV_ModStart> fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> "
4180,<S2SV_StartBug> if ( vma ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4181,<S2SV_StartBug> bitmap -> compressed = FALSE ; <S2SV_EndBug> <S2SV_StartBug> bitmap -> length = DstWidth * DstHeight * GetBytesPerPixel ( bitmap -> format ) ; <S2SV_EndBug> ,<S2SV_ModStart> UINT32 size = DstWidth * DstHeight ; <S2SV_ModStart> if ( ( GetBytesPerPixel ( bitmap -> format ) == 0 ) || ( DstWidth == 0 ) || ( DstHeight == 0 ) || ( DstWidth > UINT32_MAX / DstHeight ) || ( size > ( UINT32_MAX / GetBytesPerPixel ( bitmap -> format ) ) ) ) return FALSE ; size *= GetBytesPerPixel ( bitmap -> format ) ; <S2SV_ModStart> size <S2SV_ModEnd> 
4182,"<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> int active_best_quality ; <S2SV_EndBug> <S2SV_StartBug> if ( frame_is_intra_only ( cm ) ) { <S2SV_EndBug> <S2SV_StartBug> active_best_quality = rc -> best_quality ; <S2SV_EndBug> <S2SV_StartBug> double last_boosted_q = vp9_convert_qindex_to_q ( qindex ) ; <S2SV_EndBug> <S2SV_StartBug> last_boosted_q * 0.75 ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( cm -> current_video_frame > 0 ) { <S2SV_EndBug> <S2SV_StartBug> active_best_quality = get_active_quality ( rc -> avg_frame_qindex [ KEY_FRAME ] , <S2SV_EndBug> <S2SV_StartBug> rc -> kf_boost , <S2SV_EndBug> <S2SV_StartBug> q_val = vp9_convert_qindex_to_q ( active_best_quality ) ; <S2SV_EndBug> <S2SV_StartBug> q_val * q_adj_factor ) ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> end_usage == USAGE_CONSTRAINED_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> if ( q < cpi -> cq_target_quality ) <S2SV_EndBug> <S2SV_StartBug> } else if ( oxcf -> end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> active_best_quality = cpi -> cq_target_quality ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( oxcf -> end_usage == USAGE_CONSTRAINED_QUALITY ) && <S2SV_EndBug> <S2SV_StartBug> ( active_best_quality < cpi -> cq_target_quality ) ) { <S2SV_EndBug> <S2SV_StartBug> # if LIMIT_QRANGE_FOR_ALTREF_AND_KEY <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_type == KEY_FRAME && ! rc -> this_key_frame_forced ) { <S2SV_EndBug> <S2SV_StartBug> * top_index = ( active_worst_quality + active_best_quality * 3 ) / 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTIPLE_ARF <S2SV_EndBug> ","<S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> const int cq_level = get_active_cq_level ( rc , oxcf ) ; <S2SV_ModStart> int * inter_minq ; ASSIGN_MINQ_TABLE ( cm -> bit_depth , inter_minq ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , cm -> bit_depth <S2SV_ModStart> , cm -> bit_depth <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> get_kf_active_quality ( rc , <S2SV_ModEnd> <S2SV_ModStart> cm -> bit_depth <S2SV_ModEnd> <S2SV_ModStart> , cm -> bit_depth <S2SV_ModStart> , cm -> bit_depth ) ; } <S2SV_ModEnd> <S2SV_ModStart> rc_mode == VPX_CQ <S2SV_ModEnd> <S2SV_ModStart> cq_level ) q = cq_level ; active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth ) ; <S2SV_ModEnd> <S2SV_ModStart> rc_mode == VPX_Q <S2SV_ModEnd> <S2SV_ModStart> cq_level ; } else { active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth ) ; } } else { active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth <S2SV_ModEnd> <S2SV_ModStart> rc_mode == VPX_Q ) { active_best_quality = cq_level <S2SV_ModEnd> <S2SV_ModStart> rc_mode == VPX_CQ <S2SV_ModEnd> <S2SV_ModStart> cq_level ) ) { active_best_quality = cq_level <S2SV_ModEnd> <S2SV_ModStart> { int qdelta = 0 ; vpx_clear_system_state ( ) ; <S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart> { qdelta = vp9_compute_qdelta_by_rate ( & cpi -> rc , cm -> frame_type , active_worst_quality , 2.0 , cm -> bit_depth ) ; } else if ( ! rc -> is_src_frame_alt_ref && ( cpi -> refresh_golden_frame || cpi -> refresh_alt_ref_frame ) ) { qdelta = vp9_compute_qdelta_by_rate ( & cpi -> rc , cm -> frame_type , active_worst_quality , 1.75 , cm -> bit_depth ) ; } * top_index = active_worst_quality + qdelta ; * top_index = ( * top_index > * bottom_index ) ? * top_index : * bottom_index <S2SV_ModEnd> <S2SV_ModStart> rc_mode == VPX_Q <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4183,<S2SV_StartBug> for ( j = 1 ; j <= len ; j ++ ) { <S2SV_EndBug> ,"<S2SV_ModStart> luaL_checkstack ( L , 1 , ""in<S2SV_blank>function<S2SV_blank>mp_encode_lua_table_as_array"" ) ; "
4184,"<S2SV_StartBug> guint32 off = offset ; <S2SV_EndBug> <S2SV_StartBug> DebugLog ( ( ""parse_wbxml_tag<S2SV_blank>(level<S2SV_blank>=<S2SV_blank>%u,<S2SV_blank>offset<S2SV_blank>=<S2SV_blank>%u)\\n"" , * level , offset ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , last_off <S2SV_ModStart> ; last_off = off <S2SV_ModStart> if ( off < last_off ) { THROW ( ReportedBoundsError ) ; } last_off = off ; "
4185,"<S2SV_StartBug> Py_INCREF ( id ) ; <S2SV_EndBug> <S2SV_StartBug> PyDict_DelItemString ( value , ""$id"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( id == NULL ) { id = Py_None ; <S2SV_ModStart> } else { Py_INCREF ( id ) ; <S2SV_ModStart> } 
4186,<S2SV_StartBug> case BGP_CAPCODE_RESTART : <S2SV_EndBug> ,<S2SV_ModStart> ND_TCHECK_16BITS ( opt + i + 2 ) ; 
4187,<S2SV_StartBug> j = scantable [ idx ++ ] ; <S2SV_EndBug> <S2SV_StartBug> j = scantable [ idx ++ ] ; <S2SV_EndBug> <S2SV_StartBug> } else if ( group == 21 ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( idx > 63 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> if ( idx > 63 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> if ( idx > 63 ) return AVERROR_INVALIDDATA ; 
4188,"<S2SV_StartBug> static void extend_to_full_distribution ( vp9_prob * probs , vp9_prob p ) { <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( probs , vp9_pareto8_full [ p = 0 ? 0 : p - 1 ] , <S2SV_EndBug> <S2SV_StartBug> MODEL_NODES * sizeof ( vp9_prob ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> 
4189,"<S2SV_StartBug> return ( ( png_charp ) PNG_STRING_NEWLINE ""libpng<S2SV_blank>version<S2SV_blank>1.2.52<S2SV_blank>-<S2SV_blank>November<S2SV_blank>20,<S2SV_blank>2014"" PNG_STRING_NEWLINE ""Copyright<S2SV_blank>(c)<S2SV_blank>1998-2014<S2SV_blank>Glenn<S2SV_blank>Randers-Pehrson"" PNG_STRING_NEWLINE ""Copyright<S2SV_blank>(c)<S2SV_blank>1996-1997<S2SV_blank>Andreas<S2SV_blank>Dilger"" PNG_STRING_NEWLINE ""Copyright<S2SV_blank>(c)<S2SV_blank>1995-1996<S2SV_blank>Guy<S2SV_blank>Eric<S2SV_blank>Schalnat,<S2SV_blank>Group<S2SV_blank>42,<S2SV_blank>Inc."" PNG_STRING_NEWLINE ) ; <S2SV_EndBug> <S2SV_StartBug> return ( ( png_charp ) ""libpng<S2SV_blank>version<S2SV_blank>1.2.52<S2SV_blank>-<S2SV_blank>November<S2SV_blank>20,<S2SV_blank>2014\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1998-2014<S2SV_blank>Glenn<S2SV_blank>Randers-Pehrson\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1996-1997<S2SV_blank>Andreas<S2SV_blank>Dilger\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1995-1996<S2SV_blank>Guy<S2SV_blank>Eric<S2SV_blank>Schalnat,<S2SV_blank>Group<S2SV_blank>42,<S2SV_blank>Inc."" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""libpng<S2SV_blank>version<S2SV_blank>1.2.54<S2SV_blank>-<S2SV_blank>November<S2SV_blank>12,<S2SV_blank>2015"" PNG_STRING_NEWLINE ""Copyright<S2SV_blank>(c)<S2SV_blank>1998-2015<S2SV_blank>Glenn<S2SV_blank>Randers-Pehrson"" <S2SV_ModEnd> <S2SV_ModStart> ""libpng<S2SV_blank>version<S2SV_blank>1.2.54<S2SV_blank>-<S2SV_blank>November<S2SV_blank>12,<S2SV_blank>2015\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1998-2015<S2SV_blank>Glenn<S2SV_blank>Randers-Pehrson\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1996-1997<S2SV_blank>Andreas<S2SV_blank>Dilger\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1995-1996<S2SV_blank>Guy<S2SV_blank>Eric<S2SV_blank>Schalnat,<S2SV_blank>Group<S2SV_blank>42,<S2SV_blank>Inc."" <S2SV_ModEnd> "
4190,<S2SV_StartBug> if ( cf_auth_type <= AUTH_TRUST ) { <S2SV_EndBug> ,"<S2SV_ModStart> ! client -> auth_user ) { disconnect_client ( client , true , ""client<S2SV_blank>password<S2SV_blank>pkt<S2SV_blank>before<S2SV_blank>startup<S2SV_blank>packet"" ) ; return false ; } if ( "
4191,"<S2SV_StartBug> rc = cmd_start ( adata , cmdstr , flags ) ; <S2SV_EndBug> <S2SV_StartBug> } while ( rc == IMAP_RES_CONTINUE ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( flags & IMAP_CMD_SINGLE ) { if ( adata -> nextcmd != adata -> lastcmd ) imap_exec ( adata , NULL , IMAP_CMD_POLL ) ; } <S2SV_ModStart> if ( ( flags & IMAP_CMD_SINGLE ) && ( adata -> nextcmd == adata -> lastcmd ) ) break ; "
4192,<S2SV_StartBug> if ( mainprog_ptr -> width > INT_MAX / mainprog_ptr -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( mainprog_ptr -> rgba_data = malloc ( rowbytes * mainprog_ptr -> height ) ) == NULL ) { <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rowbytes > INT_MAX / mainprog_ptr -> height ) { png_destroy_read_struct ( & png_ptr , & info_ptr , NULL ) ; return PNG_OUT_OF_MEMORY_ERROR ; } if ( "
4193,"<S2SV_StartBug> ar2 -> intf [ 0 ] = interface ; <S2SV_EndBug> <S2SV_StartBug> r = usb_driver_claim_interface ( & ati_remote2_driver , ar2 -> intf [ 1 ] , ar2 ) ; <S2SV_EndBug> <S2SV_StartBug> ar2 -> ep [ 1 ] = & alt -> endpoint [ 0 ] . desc ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail3 ; <S2SV_EndBug> <S2SV_StartBug> fail3 : <S2SV_EndBug> <S2SV_StartBug> ati_remote2_urb_cleanup ( ar2 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( alt -> desc . bNumEndpoints < 1 || ! alt -> endpoint ) { dev_err ( & interface -> dev , ""%s():<S2SV_blank>interface<S2SV_blank>0<S2SV_blank>must<S2SV_blank>have<S2SV_blank>an<S2SV_blank>endpoint\\n"" , __func__ ) ; r = - ENODEV ; goto fail1 ; } <S2SV_ModStart> if ( ( udev -> actconfig -> desc . bNumInterfaces < 2 ) || ! ar2 -> intf [ 1 ] ) { dev_err ( & interface -> dev , ""%s():<S2SV_blank>need<S2SV_blank>2<S2SV_blank>interfaces,<S2SV_blank>found<S2SV_blank>%d\\n"" , __func__ , udev -> actconfig -> desc . bNumInterfaces ) ; r = - ENODEV ; goto fail1 ; } <S2SV_ModStart> if ( alt -> desc . bNumEndpoints < 1 || ! alt -> endpoint ) { dev_err ( & interface -> dev , ""%s():<S2SV_blank>interface<S2SV_blank>1<S2SV_blank>must<S2SV_blank>have<S2SV_blank>an<S2SV_blank>endpoint\\n"" , __func__ ) ; r = - ENODEV ; goto fail2 ; } <S2SV_ModStart> fail3 <S2SV_ModEnd> <S2SV_ModStart> fail3 <S2SV_ModEnd> <S2SV_ModStart> fail3 <S2SV_ModEnd> <S2SV_ModStart> fail4 <S2SV_ModEnd> <S2SV_ModStart> fail4 : sysfs_remove_group ( & udev -> dev . kobj , & ati_remote2_attr_group ) ; fail3 : ati_remote2_urb_cleanup ( ar2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4194,"<S2SV_StartBug> pv_buf = ps_dec -> pf_aligned_alloc ( pv_mem_ctxt , 128 , size ) ; <S2SV_EndBug> ",<S2SV_ModStart> + EXTRA_BS_OFFSET 
4195,<S2SV_StartBug> same_page : <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( page_count ( page ) <= 0 ) ) { if ( pages ) { spin_unlock ( ptl ) ; remainder = 0 ; err = - ENOMEM ; break ; } } 
4196,<S2SV_StartBug> u8 odata [ 16 ] ; <S2SV_EndBug> ,<S2SV_ModStart> * odata = pctx -> odata ; u8 * idata = pctx -> idata <S2SV_ModEnd> 
4197,<S2SV_StartBug> if ( status ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( data [ 0 ] == WHITEHEAT_GET_DTR_RTS ) { <S2SV_EndBug> <S2SV_StartBug> urb -> actual_length - 1 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ! urb -> actual_length ) { dev_dbg ( & urb -> dev -> dev , ""%s<S2SV_blank>-<S2SV_blank>empty<S2SV_blank>response,<S2SV_blank>exiting.\\n"" , __func__ ) ; return ; } if ( <S2SV_ModStart> ( <S2SV_ModStart> && ( <S2SV_ModEnd> <S2SV_ModStart> <= sizeof ( command_info -> result_buffer ) ) ) { memcpy ( command_info -> result_buffer , & data [ 1 ] , urb -> actual_length - 1 "
4198,"<S2SV_StartBug> struct mb_cache_entry * * pce ) <S2SV_EndBug> <S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> again : <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_find_first ( ext4_mb_cache , inode -> i_sb -> s_bdev , <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( ce ) ) { <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_find_next ( ce , inode -> i_sb -> s_bdev , hash ) ; <S2SV_EndBug> ","<S2SV_ModStart> mb2_cache_entry <S2SV_ModEnd> <S2SV_ModStart> mb2_cache_entry * ce ; struct mb2_cache <S2SV_ModEnd> <S2SV_ModStart> ce = mb2_cache_entry_find_first <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mb2_cache_entry_find_next ( ext4_mb_cache , ce <S2SV_ModEnd> "
4199,"<S2SV_StartBug> if ( vm_flags & VM_NORESERVE ) <S2SV_EndBug> <S2SV_StartBug> if ( hugetlb_get_quota ( inode -> i_mapping , chg ) ) <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( inode -> i_mapping , chg ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> hugepage_subpool_get_pages ( spool <S2SV_ModEnd> <S2SV_ModStart> hugepage_subpool_put_pages ( spool <S2SV_ModEnd> 
4200,"<S2SV_StartBug> lua_pushvalue ( L , i ) ; <S2SV_EndBug> ","<S2SV_ModStart> luaL_checkstack ( L , 1 , ""in<S2SV_blank>function<S2SV_blank>mp_check"" ) ; "
4201,<S2SV_StartBug> drop_futex_key_refs ( & q -> key ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4202,"<S2SV_StartBug> COM_DefaultExtension ( filename , sizeof ( filename ) , "".txt"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! COM_CompareExtension ( filename , "".txt"" ) ) { Com_Printf ( ""Con_Dump_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\"".txt\\""<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"" ) ; return ; } "
4203,<S2SV_StartBug> if ( sk_hashed ( sk ) ) { <S2SV_EndBug> <S2SV_StartBug> write_lock_bh ( & ping_table . lock ) ; <S2SV_EndBug> <S2SV_StartBug> write_unlock_bh ( & ping_table . lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> write_lock_bh ( & ping_table . lock ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart>  <S2SV_ModEnd> 
4204,<S2SV_StartBug> msc -> ntouches = 0 ; <S2SV_EndBug> <S2SV_StartBug> npoints = ( size - 6 ) / 8 ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( npoints > 15 ) { hid_warn ( hdev , ""invalid<S2SV_blank>size<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>for<S2SV_blank>TRACKPAD_REPORT_ID\\n"" , size ) ; return 0 ; } <S2SV_ModStart> if ( npoints > 15 ) { hid_warn ( hdev , ""invalid<S2SV_blank>size<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>for<S2SV_blank>MOUSE_REPORT_ID\\n"" , size ) ; return 0 ; } "
4205,"<S2SV_StartBug> int hdrlen ; <S2SV_EndBug> <S2SV_StartBug> if ( caplen < 3 ) { <S2SV_EndBug> <S2SV_StartBug> switch ( ( fc >> 10 ) & 0x3 ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%04x:%04x<S2SV_blank>"" , panid , EXTRACT_LE_16BITS ( p ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> case 0x03 : <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%04x:%s<S2SV_blank>"" , panid , le64addr_string ( ndo , p ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<<S2SV_blank>"" ) ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( ( fc >> 14 ) & 0x3 ) { <S2SV_EndBug> <S2SV_StartBug> case 0x00 : <S2SV_EndBug> <S2SV_StartBug> case 0x01 : <S2SV_EndBug> <S2SV_StartBug> case 0x02 : <S2SV_EndBug> <S2SV_StartBug> if ( ! ( fc & ( 1 << 6 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case 0x03 : <S2SV_EndBug> <S2SV_StartBug> if ( ! ( fc & ( 1 << 6 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> caplen -= hdrlen ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> u_int <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( caplen < 3 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return caplen ; } hdrlen = 3 ; fc = EXTRACT_LE_16BITS ( p ) ; seq = EXTRACT_LE_8BITS ( p + 2 ) ; p += 3 ; caplen -= 3 ; ND_PRINT ( ( ndo , ""IEEE<S2SV_blank>802.15.4<S2SV_blank>%s<S2SV_blank>packet<S2SV_blank>"" , ftypes [ FC_FRAME_TYPE ( fc ) ] ) ) ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo , ""seq<S2SV_blank>%02x<S2SV_blank>"" , seq ) ) ; switch ( FC_DEST_ADDRESSING_MODE ( fc ) ) { case FC_ADDRESSING_MODE_NONE : if ( fc & FC_PAN_ID_COMPRESSION ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo , ""none<S2SV_blank>"" ) ) ; break ; case FC_ADDRESSING_MODE_RESERVED : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo , ""reserved<S2SV_blank>destination<S2SV_blank>addressing<S2SV_blank>mode"" ) ) ; return hdrlen ; case FC_ADDRESSING_MODE_SHORT : if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } <S2SV_ModEnd> <S2SV_ModStart> caplen -= 2 ; hdrlen += 2 ; if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModStart> + 2 ) ) ) ; p += 2 ; caplen -= 2 ; hdrlen <S2SV_ModEnd> <S2SV_ModStart> FC_ADDRESSING_MODE_LONG : if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } <S2SV_ModEnd> <S2SV_ModStart> caplen -= 2 ; hdrlen += 2 ; if ( caplen < 8 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModStart> + 2 <S2SV_ModStart> caplen -= 8 ; hdrlen += 8 ; <S2SV_ModStart> if ( ndo -> ndo_vflag ) <S2SV_ModStart> FC_SRC_ADDRESSING_MODE ( fc ) <S2SV_ModEnd> <S2SV_ModStart> FC_ADDRESSING_MODE_NONE : if ( ndo -> ndo_vflag ) <S2SV_ModEnd> <S2SV_ModStart> FC_ADDRESSING_MODE_RESERVED : if ( ndo -> ndo_vflag ) <S2SV_ModEnd> <S2SV_ModStart> FC_ADDRESSING_MODE_SHORT <S2SV_ModEnd> <S2SV_ModStart> FC_PAN_ID_COMPRESSION ) ) { if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } <S2SV_ModEnd> <S2SV_ModStart> caplen -= 2 ; hdrlen += 2 ; } if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModEnd> <S2SV_ModStart> caplen -= 2 ; hdrlen += 2 ; <S2SV_ModStart> FC_ADDRESSING_MODE_LONG <S2SV_ModEnd> <S2SV_ModStart> FC_PAN_ID_COMPRESSION ) ) { if ( caplen < 2 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } <S2SV_ModEnd> <S2SV_ModStart> caplen -= 2 ; hdrlen += 2 ; } if ( caplen < 8 ) { ND_PRINT ( ( ndo , ""[|802.15.4]"" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModEnd> <S2SV_ModStart> caplen -= 8 ; hdrlen += 8 ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> hdrlen <S2SV_ModEnd> "
4206,<S2SV_StartBug> struct pmu * leader_pmu = event -> group_leader -> pmu ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( is_software_event ( event ) ) return 1 
4207,"<S2SV_StartBug> id = ipc_addid ( & msg_ids ( ns ) , & msq -> q_perm , ns -> msg_ctlmni ) ; <S2SV_EndBug> <S2SV_StartBug> msq -> q_stime = msq -> q_rtime = 0 ; <S2SV_EndBug> ",<S2SV_ModStart> msq -> q_stime = msq -> q_rtime = 0 ; msq -> q_ctime = get_seconds ( ) ; msq -> q_cbytes = msq -> q_qnum = 0 ; msq -> q_qbytes = ns -> msg_ctlmnb ; msq -> q_lspid = msq -> q_lrpid = 0 ; INIT_LIST_HEAD ( & msq -> q_messages ) ; INIT_LIST_HEAD ( & msq -> q_receivers ) ; INIT_LIST_HEAD ( & msq -> q_senders ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
4208,<S2SV_StartBug> VipsForeignLoadClass * class = VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; <S2SV_EndBug> <S2SV_StartBug> vips_image_pio_input ( load -> real ) ) <S2SV_EndBug> <S2SV_StartBug> return ( NULL ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> || <S2SV_ModEnd> <S2SV_ModStart> { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> 
4209,"<S2SV_StartBug> vpx_memset ( x -> above_context , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( x -> left_context , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( x -> above_context , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( x -> left_context , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) - 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
4210,"<S2SV_StartBug> if ( strcmp ( arg , TKTPOLICY_ARG ) == 0 ) { <S2SV_EndBug> ","<S2SV_ModStart> arg = ( arg != NULL ) ? arg : """" ; "
4211,<S2SV_StartBug> line += PKT_LEN_SIZE ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len != 0 && len < PKT_LEN_SIZE ) return GIT_ERROR ; 
4212,"<S2SV_StartBug> flen = udf_get_filename ( dir -> i_sb , nameptr , fname , lfi ) ; <S2SV_EndBug> ","<S2SV_ModStart> lfi , fname , UDF_NAME_LEN <S2SV_ModEnd> "
4213,<S2SV_StartBug> outpos += <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> sprintf ( outputbuffer <S2SV_ModEnd> <S2SV_ModStart> sendClean ( outputbuffer ) ; 
4214,"<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( image -> columns , 4 * <S2SV_EndBug> ","<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
4215,"<S2SV_StartBug> if ( copy_from_user ( & sas , optval , len ) ) <S2SV_EndBug> <S2SV_StartBug> len = min_t ( size_t , len , sizeof ( sas ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> len = min_t ( size_t , len , sizeof ( sas ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
4216,<S2SV_StartBug> for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( int ) 
4217,<S2SV_StartBug> char buffer [ 4096 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( name_len > sizeof ( buffer ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( value ) <= sizeof ( buffer2 ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> ,"<S2SV_ModStart> * buf , * buf2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> efree ( buf ) ; <S2SV_ModEnd> <S2SV_ModStart> buf2 = estrndup ( value , value_len ) ; <S2SV_ModEnd> <S2SV_ModStart> efree ( buf ) ; efree ( buf2 ) ; <S2SV_ModEnd> "
4218,<S2SV_StartBug> if ( ( exit_intr_info & INTR_INFO_INTR_TYPE_MASK ) == INTR_TYPE_NMI_INTR && <S2SV_EndBug> ,<S2SV_ModStart> is_nmi ( exit_intr_info <S2SV_ModEnd> 
4219,<S2SV_StartBug> vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> return vp9_read_bit ( r ) ? ( vp9_read_bit ( r ) ? REFERENCE_MODE_SELECT <S2SV_EndBug> ,<S2SV_ModStart> vpx_reader <S2SV_ModEnd> <S2SV_ModStart> vpx_read_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_read_bit <S2SV_ModEnd> 
4220,<S2SV_StartBug> return vp9_filteredinterp_filters1000 ; <S2SV_EndBug> <S2SV_StartBug> return vp9_filteredinterp_filters875 ; <S2SV_EndBug> <S2SV_StartBug> return vp9_filteredinterp_filters750 ; <S2SV_EndBug> <S2SV_StartBug> return vp9_filteredinterp_filters625 ; <S2SV_EndBug> <S2SV_StartBug> return vp9_filteredinterp_filters500 ; <S2SV_EndBug> ,<S2SV_ModStart> filteredinterp_filters1000 <S2SV_ModEnd> <S2SV_ModStart> filteredinterp_filters875 <S2SV_ModEnd> <S2SV_ModStart> filteredinterp_filters750 <S2SV_ModEnd> <S2SV_ModStart> filteredinterp_filters625 <S2SV_ModEnd> <S2SV_ModStart> filteredinterp_filters500 <S2SV_ModEnd> 
4221,"<S2SV_StartBug> p += 2 ; <S2SV_EndBug> <S2SV_StartBug> if ( * p == FAC_NATIONAL_RAND ) <S2SV_EndBug> <S2SV_StartBug> p += 4 ; <S2SV_EndBug> <S2SV_StartBug> l = p [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> source_digis [ 0 ] , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> dest_digis [ 0 ] , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> fail_call , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> fail_addr , p + 3 , ROSE_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( * p == FAC_NATIONAL_DIGIS ) { <S2SV_EndBug> ",<S2SV_ModStart> if ( len < 2 ) return - 1 ; <S2SV_ModStart> len < 3 ) return - 1 ; if ( <S2SV_ModStart> if ( len < 4 ) return - 1 ; <S2SV_ModStart> if ( len < 2 ) return - 1 ; l = p [ 1 ] ; if ( len < 2 + l ) return - 1 <S2SV_ModEnd> <S2SV_ModStart> if ( l < AX25_ADDR_LEN ) return - 1 ; <S2SV_ModStart> if ( l < AX25_ADDR_LEN ) return - 1 ; <S2SV_ModStart> if ( l < AX25_ADDR_LEN ) return - 1 ; <S2SV_ModStart> if ( l < 1 + ROSE_ADDR_LEN ) return - 1 ; <S2SV_ModStart> if ( l % AX25_ADDR_LEN ) return - 1 ; 
4222,"<S2SV_StartBug> static void update_coef_probs_common ( vp9_writer * const bc , VP9_COMP * cpi , <S2SV_EndBug> <S2SV_StartBug> vp9_coeff_stats * frame_branch_ct ) { <S2SV_EndBug> <S2SV_StartBug> cpi -> common . fc . coef_probs [ tx_size ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob newp = new_frame_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; <S2SV_EndBug> <S2SV_StartBug> const vp9_prob oldp = old_frame_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; <S2SV_EndBug> <S2SV_StartBug> old_frame_coef_probs [ i ] [ j ] [ k ] [ l ] , & newp , upd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( bc , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( bc , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob newp = new_frame_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; <S2SV_EndBug> <S2SV_StartBug> const vp9_prob upd = DIFF_UPDATE_PROB ; <S2SV_EndBug> <S2SV_StartBug> old_frame_coef_probs [ i ] [ j ] [ k ] [ l ] , & newp , upd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( bc , u , upd ) ; <S2SV_EndBug> <S2SV_StartBug> case ONE_LOOP : <S2SV_EndBug> <S2SV_StartBug> const int prev_coef_contexts_to_update = <S2SV_EndBug> <S2SV_StartBug> vp9_prob newp = new_frame_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; <S2SV_EndBug> <S2SV_StartBug> if ( l >= prev_coef_contexts_to_update || <S2SV_EndBug> <S2SV_StartBug> if ( t == PIVOT_NODE ) <S2SV_EndBug> <S2SV_StartBug> old_frame_coef_probs [ i ] [ j ] [ k ] [ l ] , & newp , upd ) ; <S2SV_EndBug> <S2SV_StartBug> if ( s > 0 && newp != * oldp ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( bc , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( bc , 0 , upd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( bc , u , upd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( bc , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> , vp9_coeff_probs_model * new_coef_probs ) { vp9_coeff_probs_model * old_coef_probs = <S2SV_ModEnd> <S2SV_ModStart> -> coef_probs [ tx_size ] ; const vpx_prob upd = DIFF_UPDATE_PROB ; const int entropy_nodes_update = UNCONSTRAINED_NODES ; int i , j , k , l , t ; int stepsize = cpi -> sf . coeff_prob_appx_step <S2SV_ModEnd> <S2SV_ModStart> vpx_prob newp = new_coef_probs <S2SV_ModEnd> <S2SV_ModStart> vpx_prob oldp = old_coef_probs <S2SV_ModEnd> <S2SV_ModStart> old_coef_probs <S2SV_ModEnd> <S2SV_ModStart> , stepsize <S2SV_ModStart> vpx_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_prob newp = new_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; vpx_prob * oldp = old_coef_probs <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> old_coef_probs <S2SV_ModEnd> <S2SV_ModStart> , stepsize <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int updates = 0 ; int noupdates_before_first = 0 ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { for ( k = 0 ; k < COEF_BANDS <S2SV_ModEnd> <S2SV_ModStart> vpx_prob newp = new_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; vpx_prob * oldp = old_coef_probs <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> old_coef_probs <S2SV_ModEnd> <S2SV_ModStart> , stepsize ) ; } else { <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vpx_write_bit <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> vpx_write <S2SV_ModEnd> <S2SV_ModStart> vpx_write_bit <S2SV_ModEnd> "
4223,<S2SV_StartBug> if ( ! retval ) { <S2SV_EndBug> ,"<S2SV_ModStart> r = k5memdup0 ( realm , rlen , & retval ) ; <S2SV_ModEnd> "
4224,"<S2SV_StartBug> void vp9_fht16x16_sse2 ( const int16_t * input , int16_t * output , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct16x16_sse2 ( input , output , stride ) ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> vpx_fdct16x16_sse2 <S2SV_ModEnd> 
4225,<S2SV_StartBug> if ( avctx -> codec_id == AV_CODEC_ID_MPEG4 && avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) <S2SV_EndBug> ,<S2SV_ModStart> c -> mpeg4_studio_profile <S2SV_ModEnd> 
4226,<S2SV_StartBug> int c_sz ; <S2SV_EndBug> ,<S2SV_ModStart> ; ( void ) _aux 
4227,"<S2SV_StartBug> rc = expandRegular ( fi , fn , psm , nodigest , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> 0 , "
4228,"<S2SV_StartBug> size_t ss = CDF_SEC_SIZE ( h ) ; <S2SV_EndBug> <S2SV_StartBug> if ( pos > ss * sst -> sst_len ) { <S2SV_EndBug> <S2SV_StartBug> pos , ss * sst -> sst_len ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> CDF_SHORT_SEC_SIZE <S2SV_ModEnd> <S2SV_ModStart> CDF_SEC_SIZE ( h ) <S2SV_ModEnd> <S2SV_ModStart> CDF_SEC_SIZE ( h ) <S2SV_ModEnd> 
4229,<S2SV_StartBug> struct fb_vblank vblank ; <S2SV_EndBug> ,"<S2SV_ModStart> ; memset ( & vblank , 0 , sizeof ( vblank ) ) "
4230,<S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ret >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> ext4_free_io_end ( io ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> struct ext4_inode_info * ei = EXT4_I ( inode ) ; unsigned long flags ; int ret <S2SV_ModEnd> <S2SV_ModStart> < <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & inode -> i_mutex ) ; return ; } spin_lock_irqsave ( & ei -> i_completed_io_lock , flags ) ; <S2SV_ModStart> spin_unlock_irqrestore ( & ei -> i_completed_io_lock , flags ) ; <S2SV_ModEnd> <S2SV_ModStart> ext4_free_io_end ( io ) ; "
4231,<S2SV_StartBug> if ( ! n2size ) { <S2SV_EndBug> ,<S2SV_ModStart> n2size < 1 ) <S2SV_ModEnd> 
4232,<S2SV_StartBug> if ( s ) { <S2SV_EndBug> <S2SV_StartBug> struct unix_sock * u = unix_sk ( s ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & unix_gc_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } fp -> f_cred -> user -> unix_inflight ++ ; <S2SV_ModStart>  <S2SV_ModEnd> 
4233,<S2SV_StartBug> BOOL ret = FALSE ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> data = NULL ; <S2SV_EndBug> <S2SV_StartBug> ret = TRUE ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> return TRUE ; err : sud -> directory <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> FALSE <S2SV_ModEnd> 
4234,"<S2SV_StartBug> in_uint16_le ( s , length ) ; <S2SV_EndBug> <S2SV_StartBug> in_uint8 ( s , type ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct stream packet = * s ; <S2SV_ModStart> if ( ! s_check_rem ( s , length + 7 ) ) { rdp_protocol_error ( ""process_secondary_order(),<S2SV_blank>next<S2SV_blank>order<S2SV_blank>pointer<S2SV_blank>would<S2SV_blank>overrun<S2SV_blank>stream"" , & packet ) ; } "
4235,<S2SV_StartBug> if ( cpi -> common . frame_type == KEY_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> cpi -> rc . key_frame_rate_correction_factor = factor ; <S2SV_EndBug> <S2SV_StartBug> ! cpi -> rc . is_src_frame_alt_ref && <S2SV_EndBug> <S2SV_StartBug> ! ( cpi -> use_svc && cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) ) <S2SV_EndBug> <S2SV_StartBug> cpi -> rc . rate_correction_factor = factor ; <S2SV_EndBug> ,"<S2SV_ModStart> RATE_CONTROL * const rc = & cpi -> rc ; factor /= rcf_mult [ cpi -> rc . frame_size_selector ] ; factor = fclamp ( factor , MIN_BPB_FACTOR , MAX_BPB_FACTOR ) ; <S2SV_ModStart> rc -> rate_correction_factors [ KF_STD ] = factor ; } else if ( cpi -> oxcf . pass == 2 ) { RATE_FACTOR_LEVEL rf_lvl = cpi -> twopass . gf_group . rf_level [ cpi -> twopass . gf_group . index ] ; rc -> rate_correction_factors [ rf_lvl ] <S2SV_ModEnd> <S2SV_ModStart> rc -> <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( <S2SV_ModStart> rc_mode != VPX_CBR || cpi -> oxcf . gf_cbr_boost_pct > 20 ) ) rc -> rate_correction_factors [ GF_ARF_STD ] <S2SV_ModEnd> <S2SV_ModStart> rc -> rate_correction_factors [ INTER_NORMAL ] <S2SV_ModEnd> "
4236,<S2SV_StartBug> mutex_init ( & tu -> tread_sem ) ; <S2SV_EndBug> ,<S2SV_ModStart> ioctl_lock <S2SV_ModEnd> 
4237,<S2SV_StartBug> ps_dec -> i2_prev_slice_mbx = ps_dec -> u2_mbx ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( u1_nal_ref_idc != 0 ) { if ( ! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { memcpy ( ( void * ) ps_dec -> ps_dpb_cmds , ( void * ) ( & ( ps_dec -> s_dpb_cmds_scratch ) ) , sizeof ( dpb_commands_t ) ) ; } } "
4238,<S2SV_StartBug> char buf [ 32 ] ; <S2SV_EndBug> <S2SV_StartBug> char buf [ 100 ] ; <S2SV_EndBug> ,<S2SV_ModStart> 100 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4239,<S2SV_StartBug> temp = ( struct sackhole * ) <S2SV_EndBug> <S2SV_StartBug> temp = ( struct sackhole * ) <S2SV_EndBug> ,<S2SV_ModStart> if ( tp -> snd_numholes >= TCP_SACKHOLE_LIMIT ) goto done ; <S2SV_ModStart> if ( tp -> snd_numholes >= TCP_SACKHOLE_LIMIT ) goto done ; 
4240,"<S2SV_StartBug> ""The<S2SV_blank>OpenID<S2SV_blank>Connect<S2SV_blank>callback<S2SV_blank>URL<S2SV_blank>received<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>request:<S2SV_blank>%s"" , <S2SV_EndBug> ","<S2SV_ModStart> ""The<S2SV_blank>OpenID<S2SV_blank>Connect<S2SV_blank>callback<S2SV_blank>URL<S2SV_blank>received<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>request"" ) , <S2SV_ModEnd> "
4241,"<S2SV_StartBug> n = s -> method -> ssl_get_message ( s , <S2SV_EndBug> <S2SV_StartBug> if ( ! ok ) return ( ( int ) n ) ; <S2SV_EndBug> <S2SV_StartBug> # ifndef OPENSSL_NO_PSK <S2SV_EndBug> <S2SV_StartBug> if ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kPSK ) <S2SV_EndBug> ","<S2SV_ModStart> EVP_MD_CTX_init ( & md_ctx ) ; <S2SV_ModStart> ; alg_k = s -> s3 -> tmp . new_cipher -> algorithm_mkey <S2SV_ModStart> if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } <S2SV_ModStart> alg_k & SSL_kPSK ) { s -> session -> sess_cert = ssl_sess_cert_new ( ) ; if ( s -> ctx -> psk_identity_hint ) OPENSSL_free ( s -> ctx -> psk_identity_hint ) ; s -> ctx -> psk_identity_hint = NULL ; } # endif s -> s3 -> tmp . reuse_message = 1 ; return ( 1 ) ; } param = p = ( unsigned char * ) s -> init_msg ; if ( s -> session -> sess_cert != NULL ) { # ifndef OPENSSL_NO_RSA if ( s -> session -> sess_cert -> peer_rsa_tmp != NULL ) { RSA_free ( s -> session -> sess_cert -> peer_rsa_tmp ) ; s -> session -> sess_cert -> peer_rsa_tmp = NULL ; } # endif # ifndef OPENSSL_NO_DH if ( s -> session -> sess_cert -> peer_dh_tmp ) { DH_free ( s -> session -> sess_cert -> peer_dh_tmp ) ; s -> session -> sess_cert -> peer_dh_tmp = NULL ; } # endif # ifndef OPENSSL_NO_ECDH if ( s -> session -> sess_cert -> peer_ecdh_tmp ) { EC_KEY_free ( s -> session -> sess_cert -> peer_ecdh_tmp ) ; s -> session -> sess_cert -> peer_ecdh_tmp = NULL ; } # endif } else { s -> session -> sess_cert = ssl_sess_cert_new ( ) ; } param_len = 0 ; alg_a = <S2SV_ModStart> algorithm_auth <S2SV_ModEnd> "
4242,"<S2SV_StartBug> OPJ_UINT32 x , y ; <S2SV_EndBug> <S2SV_StartBug> x = y = 0U ; <S2SV_EndBug> <S2SV_StartBug> * pix = c1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return OPJ_TRUE ; <S2SV_EndBug> ","<S2SV_ModStart> , written <S2SV_ModStart> written = <S2SV_ModStart> ; written ++ <S2SV_ModStart> written ++ ; <S2SV_ModStart> if ( written != width * height ) { fprintf ( stderr , ""warning,<S2SV_blank>image\'s<S2SV_blank>actual<S2SV_blank>size<S2SV_blank>does<S2SV_blank>not<S2SV_blank>match<S2SV_blank>advertized<S2SV_blank>one\\n"" ) ; return OPJ_FALSE ; } "
4243,"<S2SV_StartBug> int fd = open ( optarg , O_WRONLY | O_APPEND | O_CREAT , S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH ) ; <S2SV_EndBug> ",<S2SV_ModStart> | O_NOFOLLOW 
4244,"<S2SV_StartBug> l2tp_proto_ver_print ( netdissect_options * ndo , const uint16_t * dat ) <S2SV_EndBug> ","<S2SV_ModStart> , u_int length ) { if ( length < 2 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } <S2SV_ModEnd> "
4245,"<S2SV_StartBug> kvmclock_reset ( vcpu ) ; <S2SV_EndBug> <S2SV_StartBug> vcpu -> arch . time_offset = data & ~ ( PAGE_MASK | 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vcpu -> arch . time_offset & <S2SV_EndBug> <S2SV_StartBug> vcpu -> arch . time_page = <S2SV_EndBug> <S2SV_StartBug> gfn_to_page ( vcpu -> kvm , data >> PAGE_SHIFT ) ; <S2SV_EndBug> ","<S2SV_ModStart> u64 gpa_offset ; <S2SV_ModStart> gpa_offset <S2SV_ModEnd> <S2SV_ModStart> gpa_offset <S2SV_ModEnd> <S2SV_ModStart> if ( kvm_gfn_to_hva_cache_init <S2SV_ModEnd> <S2SV_ModStart> & vcpu -> arch . pv_time , data & ~ 1ULL ) ) vcpu -> arch . pv_time_enabled = false ; else vcpu -> arch . pv_time_enabled = true <S2SV_ModEnd> "
4246,<S2SV_StartBug> if ( ( drv_data -> quirks & LG_RDESC ) && * rsize >= 90 && rdesc [ 83 ] == 0x26 && <S2SV_EndBug> <S2SV_StartBug> if ( ( drv_data -> quirks & LG_RDESC_REL_ABS ) && * rsize >= 50 && <S2SV_EndBug> ,<S2SV_ModStart> 91 <S2SV_ModEnd> <S2SV_ModStart> 51 <S2SV_ModEnd> 
4247,"<S2SV_StartBug> static int enable ( void ) { <S2SV_EndBug> <S2SV_StartBug> LOG_INFO ( ""%s"" , __func__ ) ; <S2SV_EndBug> ","<S2SV_ModStart> bool start_restricted <S2SV_ModEnd> <S2SV_ModStart> LOG_TAG , ""%s:<S2SV_blank>start<S2SV_blank>restricted<S2SV_blank>=<S2SV_blank>%d"" , __func__ , start_restricted ) ; restricted_mode = start_restricted <S2SV_ModEnd> "
4248,"<S2SV_StartBug> if ( ! file || ( ! iov && iovcnt ) || iovcnt < 0 || iovcnt > OE_IOV_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( iov , iovcnt , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> OE_RAISE_ERRNO ( OE_ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ","<S2SV_ModStart> size_t data_size = 0 ; <S2SV_ModStart> , & data_size <S2SV_ModStart> ) ; if ( data_size > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> if ( ret > ( ssize_t ) data_size ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } "
4249,<S2SV_StartBug> return 1000000 - count ; <S2SV_EndBug> ,<S2SV_ModStart> const uint32_t max_stack = 1000000 ; if ( count > max_stack ) return 0 ; return max_stack <S2SV_ModEnd> 
4250,<S2SV_StartBug> while ( * s && * s != '}' ) { <S2SV_EndBug> <S2SV_StartBug> if ( * s == '\\n' ) * s = '<S2SV_blank>' ; <S2SV_EndBug> <S2SV_StartBug> if ( ( * s == '<S2SV_blank>' || * s == '\\n' ) && ( s [ 1 ] == '<S2SV_blank>' || s [ 1 ] == '\\n' ) ) s ++ ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } if ( ( * s == '<S2SV_blank>' ) && ( s [ 1 ] <S2SV_ModEnd> <S2SV_ModStart> s [ 1 ] == '\\n' || s [ 1 ] == 0 ) ) { s ++ ; } else { * t ++ = * s ++ ; } } * t = 0 ; s = t = str ; while ( * s ) { if ( * s == '.' ) { period = 1 ; * t ++ = * s ++ ; } else if ( isdigit ( * s ) ) { * t ++ = * s ++ ; } else if ( period ) { while ( t > str && t [ - 1 ] == '0' ) { t -- ; } if ( t > str && t [ - 1 ] == '.' ) { t -- ; if ( t > str && ! isdigit ( t [ - 1 ] ) ) { * t ++ = '0' ; } } period = 0 ; * t ++ = * s ++ ; } else { period = 0 ; * t ++ = * s ++ ; } } * t = 0 ; s = t = str ; while ( * s ) { if ( * s == '-' && s [ 1 ] == '0' && s [ 2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4251,"<S2SV_StartBug> int res , ret ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( uaddr == uaddr2 ) return - EINVAL 
4252,"<S2SV_StartBug> static void iwl_sta_ucode_activate ( struct iwl_priv * priv , u8 sta_id ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if ( sta_id >= IWLAGN_STATION_COUNT ) { IWL_ERR ( priv , ""invalid<S2SV_blank>sta_id<S2SV_blank>%u"" , sta_id ) ; return - EINVAL ; } <S2SV_ModStart> return 0 ; "
4253,<S2SV_StartBug> int remaining = s -> icy_metaint - s -> icy_data_read ; <S2SV_EndBug> ,<S2SV_ModStart> uint64_t remaining ; if ( s -> icy_metaint < s -> icy_data_read ) return AVERROR_INVALIDDATA ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4254,<S2SV_StartBug> end = dup ; <S2SV_EndBug> ,<S2SV_ModStart> if ( dup == NULL ) { return PyErr_NoMemory ( ) ; } 
4255,<S2SV_StartBug> netdev -> hw_features = NETIF_F_SG | NETIF_F_HW_VLAN_CTAG_RX ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4256,<S2SV_StartBug> if ( split_flag ) { <S2SV_EndBug> ,<S2SV_ModStart> && size >= MIN_BLOCK_SIZE 
4257,<S2SV_StartBug> if ( count < sizeof ( cmd ) ) { <S2SV_EndBug> ,<S2SV_ModStart> WARN_ON_ONCE ( ! ib_safe_file_access ( fp ) ) ) return - EACCES ; if ( 
4258,"<S2SV_StartBug> sprintf ( descriptor -> msg , ""\\n\\t\\tEntry:\\\n<S2SV_blank>\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n<S2SV_blank>\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n<S2SV_blank>\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d"" , <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_COUNT && ( SQLINTEGER ) value < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_PARAMETER_TYPE && value != SQL_PARAM_INPUT <S2SV_EndBug> <S2SV_StartBug> && value != SQL_PARAM_OUTPUT && value != SQL_PARAM_INPUT_OUTPUT && <S2SV_EndBug> <S2SV_StartBug> value != SQL_PARAM_INPUT_OUTPUT_STREAM && value != SQL_PARAM_OUTPUT_STREAM ) <S2SV_EndBug> ","<S2SV_ModStart> ""\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d"" <S2SV_ModEnd> <S2SV_ModStart> intptr_t <S2SV_ModEnd> <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) "
4259,"<S2SV_StartBug> mark_desktop_file_trusted ( job , <S2SV_EndBug> ",<S2SV_ModStart> mark_desktop_file_executable <S2SV_ModEnd> 
4260,<S2SV_StartBug> return 1000000 - count ; <S2SV_EndBug> ,<S2SV_ModStart> const uint32_t max_stack = 1000000 ; if ( count > max_stack ) return 0 ; return max_stack <S2SV_ModEnd> 
4261,<S2SV_StartBug> msg -> msg_namelen = sizeof ( * sipx ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( sipx ) { sipx -> sipx_family = AF_IPX ; sipx -> sipx_port = ipx -> ipx_source . sock ; memcpy ( sipx -> sipx_node , ipx -> ipx_source . node , IPX_NODE_LEN ) ; sipx -> sipx_network = IPX_SKB_CB ( skb ) -> ipx_source_net ; sipx -> sipx_type = ipx -> ipx_type ; sipx -> sipx_zero = 0 ; <S2SV_ModStart>  <S2SV_ModEnd> "
4262,<S2SV_StartBug> if ( gfs ) <S2SV_EndBug> ,<S2SV_ModStart> last_name = 0 ; 
4263,<S2SV_StartBug> if ( ! addr || addr -> sa_family != AF_BLUETOOTH ) <S2SV_EndBug> ,<S2SV_ModStart> ) return - EINVAL ; if ( addr_len < sizeof ( struct sockaddr_sco ) 
4264,<S2SV_StartBug> down_write ( & card -> controls_rwsem ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( id . index > UINT_MAX - kcontrol -> count ) goto error ; 
4265,"<S2SV_StartBug> Browser_Window * window ; <S2SV_EndBug> <S2SV_StartBug> ECORE_GETOPT_VALUE_BOOL ( quitOption ) , <S2SV_EndBug> <S2SV_StartBug> if ( args < argc ) { <S2SV_EndBug> ","<S2SV_ModStart> ; char * window_size_string = NULL <S2SV_ModStart> ECORE_GETOPT_VALUE_STR ( window_size_string ) , <S2SV_ModStart> window_size_string ) parse_window_size ( window_size_string , & window_width , & window_height ) ; if ( "
4266,"<S2SV_StartBug> int nmi , int sample ) <S2SV_EndBug> <S2SV_StartBug> handle -> nmi = nmi ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4267,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4268,<S2SV_StartBug> line = data + npy * wpl ; <S2SV_EndBug> ,<S2SV_ModStart> if ( npx < 0 || npx >= w || npy < 0 || npy >= h ) continue ; 
4269,<S2SV_StartBug> image -> columns = ( size_t ) ( metrics . width + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> columns = ( size_t ) ( metrics . width + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> columns = ( size_t ) ( draw_info -> pointsize + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> rows = ( size_t ) ( metrics . ascent - metrics . descent + <S2SV_EndBug> <S2SV_StartBug> image -> rows = ( size_t ) ( draw_info -> pointsize + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> ,<S2SV_ModStart> floor <S2SV_ModStart> floor <S2SV_ModStart> floor <S2SV_ModStart> floor <S2SV_ModStart> floor 
4270,<S2SV_StartBug> passert ( GLOBALS_ARE_RESET ( ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4271,<S2SV_StartBug> event_data -> snk_config = <S2SV_EndBug> ,<S2SV_ModStart> cpu = cpumask_first ( mask ) ; 
4272,"<S2SV_StartBug> p += 2 ; <S2SV_EndBug> <S2SV_StartBug> if ( * p == FAC_NATIONAL_RAND ) <S2SV_EndBug> <S2SV_StartBug> p += 4 ; <S2SV_EndBug> <S2SV_StartBug> l = p [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> source_digis [ 0 ] , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> dest_digis [ 0 ] , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> fail_call , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> fail_addr , p + 3 , ROSE_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( * p == FAC_NATIONAL_DIGIS ) { <S2SV_EndBug> ",<S2SV_ModStart> if ( len < 2 ) return - 1 ; <S2SV_ModStart> len < 3 ) return - 1 ; if ( <S2SV_ModStart> if ( len < 4 ) return - 1 ; <S2SV_ModStart> if ( len < 2 ) return - 1 ; l = p [ 1 ] ; if ( len < 2 + l ) return - 1 <S2SV_ModEnd> <S2SV_ModStart> if ( l < AX25_ADDR_LEN ) return - 1 ; <S2SV_ModStart> if ( l < AX25_ADDR_LEN ) return - 1 ; <S2SV_ModStart> if ( l < AX25_ADDR_LEN ) return - 1 ; <S2SV_ModStart> if ( l < 1 + ROSE_ADDR_LEN ) return - 1 ; <S2SV_ModStart> if ( l % AX25_ADDR_LEN ) return - 1 ; 
4273,<S2SV_StartBug> DevInfo . MaxRDMBufferSize = BUFFER_4K ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & DevInfo , 0 , sizeof ( DevInfo ) ) ; "
4274,<S2SV_StartBug> if ( s -> s3 -> flags & TLS1_FLAGS_ENCRYPT_THEN_MAC ) { <S2SV_EndBug> <S2SV_StartBug> s -> s3 -> flags &= ~ TLS1_FLAGS_ENCRYPT_THEN_MAC ; <S2SV_EndBug> ,<S2SV_ModStart> tlsext_use_etm <S2SV_ModEnd> <S2SV_ModStart> tlsext_use_etm = 0 <S2SV_ModEnd> 
4275,"<S2SV_StartBug> variance ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_EndBug> <S2SV_StartBug> vp9_64_zeros , 0 , bw , bh , & sse , & avg ) ; <S2SV_EndBug> <S2SV_StartBug> var = sse - ( ( ( int64_t ) avg * avg ) / ( bw * bh ) ) ; <S2SV_EndBug> <S2SV_StartBug> var = cpi -> fn_ptr [ bs ] . vf ( x -> plane [ 0 ] . src . buf , <S2SV_EndBug> <S2SV_StartBug> vp9_64_zeros , 0 , & sse ) ; <S2SV_EndBug> ","<S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { aq_highbd_8_variance <S2SV_ModEnd> <S2SV_ModStart> CONVERT_TO_BYTEPTR ( vp9_highbd_64_zeros ) , 0 , bw , bh , & sse , & avg ) ; sse >>= 2 * ( xd -> bd - 8 ) ; avg >>= ( xd -> bd - 8 ) ; } else { aq_variance ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_ModStart> } # else aq_variance ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , vp9_64_zeros , 0 , bw , bh , & sse , & avg ) ; # endif <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> CONVERT_TO_BYTEPTR ( vp9_highbd_64_zeros ) , 0 , & sse ) ; } else { var = cpi -> fn_ptr [ bs ] . vf ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_ModStart> } # else var = cpi -> fn_ptr [ bs ] . vf ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , vp9_64_zeros , 0 , & sse ) ; # endif "
4276,<S2SV_StartBug> if ( image -> numcomps < 4 ) return ; <S2SV_EndBug> ,"<S2SV_ModStart> ( <S2SV_ModStart> || ( image -> comps [ 0 ] . dx != image -> comps [ 1 ] . dx ) || ( image -> comps [ 0 ] . dx != image -> comps [ 2 ] . dx ) || ( image -> comps [ 0 ] . dx != image -> comps [ 3 ] . dx ) || ( image -> comps [ 0 ] . dy != image -> comps [ 1 ] . dy ) || ( image -> comps [ 0 ] . dy != image -> comps [ 2 ] . dy ) || ( image -> comps [ 0 ] . dy != image -> comps [ 3 ] . dy ) ) { fprintf ( stderr , ""%s:%d:color_cmyk_to_rgb\\n\\tCAN<S2SV_blank>NOT<S2SV_blank>CONVERT\\n"" , __FILE__ , __LINE__ ) ; return ; } <S2SV_ModEnd> "
4277,<S2SV_StartBug> goto discard ; <S2SV_EndBug> ,<S2SV_ModStart> consume_skb ( skb ) ; return 0 <S2SV_ModEnd> 
4278,"<S2SV_StartBug> for ( j = 0 ; j < ( ssize_t ) length ; j += 8 ) <S2SV_EndBug> <S2SV_StartBug> ""InsufficientImageDataInFile"" , image -> filename ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( DiscardBlobBytes ( image , length ) == <S2SV_ModEnd> <S2SV_ModStart> ""UnexpectedEndOfFile"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4279,"<S2SV_StartBug> static PixelChannels * * AcquirePixelThreadSet ( const Image * image ) <S2SV_EndBug> <S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> pixels [ i ] = ( PixelChannels * ) AcquireQuantumMemory ( image -> columns , <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < ( ssize_t ) image -> columns ; j ++ ) <S2SV_EndBug> ","<S2SV_ModStart> images ) { const Image * next ; <S2SV_ModEnd> <S2SV_ModStart> columns , <S2SV_ModStart> columns = images -> columns ; for ( next = images ; next != ( Image * ) NULL ; next = next -> next ) columns = MagickMax ( next -> columns , columns ) ; <S2SV_ModStart> columns , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4280,"<S2SV_StartBug> if ( i < NCH ( n ) && TYPE ( CHILD ( n , i ) ) == COMMA ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4281,"
","
"
4282,"<S2SV_StartBug> int * out_rate_sum , int64_t * out_dist_sum ) { <S2SV_EndBug> <S2SV_StartBug> int var = cpi -> fn_ptr [ bsize ] . vf ( p -> src . buf , p -> src . stride , <S2SV_EndBug> <S2SV_StartBug> vp9_model_rd_from_var_lapndz ( sse + var , 1 << num_pels_log2_lookup [ bsize ] , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , unsigned int * var_y , unsigned int * sse_y <S2SV_ModStart> const int64_t dc_thr = p -> quant_thred [ 0 ] >> 6 ; const int64_t ac_thr = p -> quant_thred [ 1 ] >> 6 ; const uint32_t dc_quant = pd -> dequant [ 0 ] ; const uint32_t ac_quant = pd -> dequant [ 1 ] ; unsigned <S2SV_ModStart> int skip_dc = 0 ; * var_y = var ; * sse_y = sse ; if ( cpi -> common . tx_mode == TX_MODE_SELECT ) { if ( sse > ( var << 2 ) ) xd -> mi [ 0 ] -> mbmi . tx_size = MIN ( max_txsize_lookup [ bsize ] , tx_mode_to_biggest_tx_size [ cpi -> common . tx_mode ] ) ; else xd -> mi [ 0 ] -> mbmi . tx_size = TX_8X8 ; if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cyclic_refresh_segment_id_boosted ( xd -> mi [ 0 ] -> mbmi . segment_id ) ) xd -> mi [ 0 ] -> mbmi . tx_size = TX_8X8 ; else if ( xd -> mi [ 0 ] -> mbmi . tx_size > TX_16X16 ) xd -> mi [ 0 ] -> mbmi . tx_size = TX_16X16 ; } else { xd -> mi [ 0 ] -> mbmi . tx_size = MIN ( max_txsize_lookup [ bsize ] , tx_mode_to_biggest_tx_size [ cpi -> common . tx_mode ] ) ; } { const BLOCK_SIZE unit_size = txsize_to_bsize [ xd -> mi [ 0 ] -> mbmi . tx_size ] ; const unsigned int num_blk_log2 = ( b_width_log2_lookup [ bsize ] - b_width_log2_lookup [ unit_size ] ) + ( b_height_log2_lookup [ bsize ] - b_height_log2_lookup [ unit_size ] ) ; const unsigned int sse_tx = sse >> num_blk_log2 ; const unsigned int var_tx = var >> num_blk_log2 ; x -> skip_txfm [ 0 ] = SKIP_TXFM_NONE ; if ( var_tx < ac_thr || var == 0 ) { x -> skip_txfm [ 0 ] = SKIP_TXFM_AC_ONLY ; if ( sse_tx - var_tx < dc_thr || sse == var ) x -> skip_txfm [ 0 ] = SKIP_TXFM_AC_DC ; } else { if ( sse_tx - var_tx < dc_thr || sse == var ) skip_dc = 1 ; } } if ( x -> skip_txfm [ 0 ] == SKIP_TXFM_AC_DC ) { * out_rate_sum = 0 ; * out_dist_sum = sse << 4 ; return ; } if ( ! skip_dc ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> - var , num_pels_log2_lookup [ bsize ] , dc_quant >> ( xd -> bd - 5 ) , & rate , & dist ) ; } else { vp9_model_rd_from_var_lapndz ( sse - var , num_pels_log2_lookup [ bsize ] , dc_quant >> 3 , & rate , & dist ) ; } # else vp9_model_rd_from_var_lapndz ( sse - var , num_pels_log2_lookup [ bsize ] , dc_quant >> 3 , & rate , & dist ) ; # endif } if ( ! skip_dc ) { * out_rate_sum = rate >> 1 <S2SV_ModEnd> <S2SV_ModStart> else { * out_rate_sum = 0 ; * out_dist_sum = ( sse - var ) << 4 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_model_rd_from_var_lapndz ( var , num_pels_log2_lookup [ bsize ] , ac_quant >> ( xd -> bd - 5 ) , & rate , & dist ) ; } else { vp9_model_rd_from_var_lapndz ( var , num_pels_log2_lookup [ bsize ] , ac_quant >> 3 , & rate , & dist ) ; } # else vp9_model_rd_from_var_lapndz ( var , num_pels_log2_lookup [ bsize ] , ac_quant >> 3 , & rate , & dist ) ; # endif * out_rate_sum += rate ; * out_dist_sum += dist << 4 ; } "
4283,"<S2SV_StartBug> in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4284,<S2SV_StartBug> while ( buf [ len - 1 ] == 0x20 ) len -- ; <S2SV_EndBug> ,<S2SV_ModStart> ( len > 0 ) && ( <S2SV_ModStart> ) 
4285,"<S2SV_StartBug> * prev = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vma -> vm_file || ! vma -> vm_file -> f_mapping <S2SV_EndBug> <S2SV_StartBug> || ! vma -> vm_file -> f_mapping -> host ) { <S2SV_EndBug> <S2SV_StartBug> up_read ( & current -> mm -> mmap_sem ) ; <S2SV_EndBug> <S2SV_StartBug> error = do_fallocate ( vma -> vm_file , <S2SV_EndBug> <S2SV_StartBug> offset , end - start ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct file * f ; <S2SV_ModStart> f = vma -> vm_file ; <S2SV_ModStart> f || ! f <S2SV_ModEnd> <S2SV_ModStart> f <S2SV_ModEnd> <S2SV_ModStart> get_file ( f ) ; <S2SV_ModStart> f <S2SV_ModEnd> <S2SV_ModStart> ) ; fput ( f 
4286,"<S2SV_StartBug> while ( ( ch = getopt ( ac , av , ""cDdksE:a:t:"" ) ) != - 1 ) { <S2SV_EndBug> <S2SV_StartBug> k_flag ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ac == 0 && ! c_flag && ! s_flag ) { <S2SV_EndBug> <S2SV_StartBug> if ( pledge ( ""stdio<S2SV_blank>cpath<S2SV_blank>unix<S2SV_blank>id<S2SV_blank>proc<S2SV_blank>exec"" , NULL ) == - 1 ) <S2SV_EndBug> ","<S2SV_ModStart> ""cDdksE:a:P:t:"" <S2SV_ModEnd> <S2SV_ModStart> ; break ; case 'P' : if ( pkcs11_whitelist != NULL ) fatal ( ""-P<S2SV_blank>option<S2SV_blank>already<S2SV_blank>specified"" ) ; pkcs11_whitelist = xstrdup ( optarg ) <S2SV_ModStart> pkcs11_whitelist == NULL ) pkcs11_whitelist = xstrdup ( DEFAULT_PKCS11_WHITELIST ) ; if ( <S2SV_ModStart> ""stdio<S2SV_blank>rpath<S2SV_blank>cpath<S2SV_blank>unix<S2SV_blank>id<S2SV_blank>proc<S2SV_blank>exec"" <S2SV_ModEnd> "
4287,<S2SV_StartBug> register struct enamemem * tp ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name ) <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name == NULL ) <S2SV_EndBug> <S2SV_StartBug> return ( tp -> e_name ) ; <S2SV_EndBug> ,<S2SV_ModStart> bsnamemem <S2SV_ModEnd> <S2SV_ModStart> bs_name ) return ( tp -> bs_name ) ; tp -> bs_name <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> <S2SV_ModStart> bs_name <S2SV_ModEnd> 
4288,"<S2SV_StartBug> truncate_pagecache ( inode , ioffset ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_dio ; <S2SV_EndBug> <S2SV_StartBug> out_dio : <S2SV_EndBug> ",<S2SV_ModStart> ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> out_mmap <S2SV_ModEnd> <S2SV_ModStart> out_mmap : up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModEnd> 
4289,<S2SV_StartBug> uint8_t buf [ 64 ] ; <S2SV_EndBug> ,"<S2SV_ModStart> msg_read_tiny ( msg , len <S2SV_ModEnd> "
4290,<S2SV_StartBug> kfree ( sbi ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( sbi -> spool ) hugepage_put_subpool ( sbi -> spool ) ; 
4291,<S2SV_StartBug> return key ; <S2SV_EndBug> ,"<S2SV_ModStart> rb_ivar_set ( self , id_key_set , Qtrue ) ; "
4292,<S2SV_StartBug> if ( NAPI_GRO_CB ( skb ) -> udp_mark || <S2SV_EndBug> <S2SV_StartBug> NAPI_GRO_CB ( skb ) -> udp_mark = 1 ; <S2SV_EndBug> ,<S2SV_ModStart> encap_mark <S2SV_ModEnd> <S2SV_ModStart> encap_mark <S2SV_ModEnd> 
4293,<S2SV_StartBug> if ( ! bitstream_read_bit ( bc ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL , AV_LOG_ERROR , ""Maximum<S2SV_blank>tree<S2SV_blank>recursion<S2SV_blank>level<S2SV_blank>exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( "
4294,<S2SV_StartBug> ether_setup ( dev ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING 
4295,<S2SV_StartBug> unsigned int h = 0 ; <S2SV_EndBug> <S2SV_StartBug> const char * data = ( const char * ) k ; <S2SV_EndBug> ,"<S2SV_ModStart> static volatile int random_seed = - 1 ; if ( random_seed == - 1 ) { int seed ; while ( ( seed = json_c_get_random_seed ( ) ) == - 1 ) ; # if defined __GNUC__ __sync_val_compare_and_swap ( & random_seed , - 1 , seed ) ; # elif defined _MSC_VER InterlockedCompareExchange ( & random_seed , seed , - 1 ) ; # else # warning ""racy<S2SV_blank>random<S2SV_blank>seed<S2SV_blank>initializtion<S2SV_blank>if<S2SV_blank>used<S2SV_blank>by<S2SV_blank>multiple<S2SV_blank>threads"" random_seed = seed ; # endif } return hashlittle ( <S2SV_ModEnd> <S2SV_ModStart> , strlen ( ( const char * ) k ) , random_seed ) <S2SV_ModEnd> "
4296,"<S2SV_StartBug> uid_t uid = getuid ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chown ( ""/tmp/"" , uid , gid ) < 0 ) { <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 0 , 0 <S2SV_ModEnd> "
4297,<S2SV_StartBug> exit_io_context ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> tsk 
4298,"<S2SV_StartBug> if ( connect ( sock , ( const struct sockaddr * ) & addr , sizeof ( addr ) ) == - 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( send ( sock , & type , 1 , 0 ) != 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( send ( sock , & length , 2 , 0 ) != 2 ) <S2SV_EndBug> <S2SV_StartBug> if ( send ( sock , packet , length , 0 ) != ( ssize_t ) length ) <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
4299,"<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> ignore = fscanf ( fp , ""Rootname:<S2SV_blank>%s\\n"" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> ignores = fgets ( buf , L_BUF_SIZE , fp ) ; <S2SV_EndBug> <S2SV_StartBug> ignores = fgets ( buf , L_BUF_SIZE , fp ) ; <S2SV_EndBug> <S2SV_StartBug> ignores = fgets ( buf , L_BUF_SIZE , fp ) ; <S2SV_EndBug> <S2SV_StartBug> ignore = fscanf ( fp , ""Commandfile<S2SV_blank>name:<S2SV_blank>%s\\n"" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> ignore = fscanf ( fp , ""Output<S2SV_blank>file<S2SV_blank>name:<S2SV_blank>%s\\n"" , buf ) ; <S2SV_EndBug> ","<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> ""Rootname:<S2SV_blank>%511s\\n"" <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> ""Commandfile<S2SV_blank>name:<S2SV_blank>%511s\\n"" <S2SV_ModEnd> <S2SV_ModStart> ""Output<S2SV_blank>file<S2SV_blank>name:<S2SV_blank>%511s\\n"" <S2SV_ModEnd> "
4300,<S2SV_StartBug> if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) <S2SV_EndBug> ,<S2SV_ModStart> + <S2SV_ModEnd> <S2SV_ModStart> > vdev -> config_len ) { return ; } <S2SV_ModEnd> 
4301,"<S2SV_StartBug> gdImagePtr pim = 0 , tim = im ; <S2SV_EndBug> <S2SV_StartBug> pim = gdImageCreatePaletteFromTrueColor ( im , 1 , 256 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> _gdImageGifCtx <S2SV_ModEnd> <S2SV_ModStart> out <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4302,"<S2SV_StartBug> rc = fsmVerify ( fpath , fi ) ; <S2SV_EndBug> ","<S2SV_ModStart> , & sb "
4303,"<S2SV_StartBug> n2l ( p , s -> session -> tlsext_tick_lifetime_hint ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( s -> session -> session_id_length > 0 ) { int i = s -> session_ctx -> session_cache_mode ; SSL_SESSION * new_sess ; if ( i & SSL_SESS_CACHE_CLIENT ) { if ( i & SSL_SESS_CACHE_NO_INTERNAL_STORE ) { if ( s -> session_ctx -> remove_session_cb != NULL ) s -> session_ctx -> remove_session_cb ( s -> session_ctx , s -> session ) ; } else { SSL_CTX_remove_session ( s -> session_ctx , s -> session ) ; } } if ( ( new_sess = ssl_session_dup ( s -> session , 0 ) ) == 0 ) { al = SSL_AD_INTERNAL_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET , ERR_R_MALLOC_FAILURE ) ; goto f_err ; } SSL_SESSION_free ( s -> session ) ; s -> session = new_sess ; } "
4304,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , addr ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4305,<S2SV_StartBug> char data [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> * data ; data = kmalloc ( 8 , GFP_KERNEL ) ; if ( ! data ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> ret = - EIO ; goto out <S2SV_ModEnd> <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> goto out ; } ret = brightness ; out : kfree ( data ) ; return ret <S2SV_ModEnd> "
4306,<S2SV_StartBug> error = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4307,"<S2SV_StartBug> imap_quote_string ( q_user , sizeof ( q_user ) , idata -> conn -> account . user ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( q_pass , sizeof ( q_pass ) , idata -> conn -> account . pass ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false <S2SV_ModStart> , false "
4308,"<S2SV_StartBug> netdev_dbg ( vif -> dev , ""Missing<S2SV_blank>extra<S2SV_blank>info\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , <S2SV_EndBug> <S2SV_StartBug> ""Invalid<S2SV_blank>extra<S2SV_blank>type:<S2SV_blank>%d\\n"" , extra . type ) ; <S2SV_EndBug> ",<S2SV_ModStart> netdev_err <S2SV_ModEnd> <S2SV_ModStart> ) ; netbk_fatal_tx_err ( vif <S2SV_ModStart> netdev_err <S2SV_ModEnd> <S2SV_ModStart> ) ; netbk_fatal_tx_err ( vif 
4309,<S2SV_StartBug> } else if ( bad_format ( im -> gdes [ i ] . format ) ) { <S2SV_EndBug> <S2SV_StartBug> rrd_set_error <S2SV_EndBug> <S2SV_StartBug> if ( bad_format ( im -> gdes [ i ] . format ) ) { <S2SV_EndBug> <S2SV_StartBug> rrd_set_error <S2SV_EndBug> ,<S2SV_ModStart> bad_format_print <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> bad_format_print <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4310,"<S2SV_StartBug> umount_tree ( mnt , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( mnt -> mnt . mnt_flags & MNT_UMOUNT ) { struct mount * p , * tmp ; list_for_each_entry_safe ( p , tmp , & mnt -> mnt_mounts , mnt_child ) { hlist_add_head ( & p -> mnt_umount . s_list , & unmounted ) ; umount_mnt ( p ) ; } } else "
4311,<S2SV_StartBug> c -> sock = sock ; <S2SV_EndBug> ,"<S2SV_ModStart> struct sockaddr_storage addr ; socklen_t len = sizeof ( addr ) ; getpeername ( sock , ( struct sockaddr * ) & addr , & len ) ; if ( addr . ss_family == AF_INET ) { struct sockaddr_in * s = ( struct sockaddr_in * ) & addr ; inet_ntop ( AF_INET , & s -> sin_addr , c -> remote , sizeof ( c -> remote ) ) ; } else { struct sockaddr_in6 * s = ( struct sockaddr_in6 * ) & addr ; inet_ntop ( AF_INET6 , & s -> sin6_addr , c -> remote , sizeof ( c -> remote ) ) ; } "
4312,"<S2SV_StartBug> MB_PREDICTION_MODE * pbest_mode ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE best_mode = - 1 , mode ; <S2SV_EndBug> <S2SV_StartBug> vp9_predict_intra_block ( xd , 0 , 2 , TX_16X16 , mode , <S2SV_EndBug> <S2SV_StartBug> err = vp9_sad16x16 ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_EndBug> ","<S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> td . <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vpx_sad16x16 ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , xd -> plane [ 0 ] . dst . buf , xd -> plane [ 0 ] . dst . stride <S2SV_ModEnd> "
4313,"<S2SV_StartBug> printf ( ""Copyright<S2SV_blank>(C)<S2SV_blank>2000-2010<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\n<S2SV_blank>This<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\n<S2SV_blank>There<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\n<S2SV_blank>particular<S2SV_blank>purpose.\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( isupper ( * s ) || isdigit ( * s ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( islower ( * s ) ) { <S2SV_EndBug> ","<S2SV_ModStart> ""Copyright<S2SV_blank>(C)<S2SV_blank>2000-2010<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\nThis<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\nThere<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\nparticular<S2SV_blank>purpose.\\n"" <S2SV_ModEnd> <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) "
4314,"<S2SV_StartBug> transhdrlen , mtu , flags ) ; <S2SV_EndBug> ","<S2SV_ModStart> , rt "
4315,"<S2SV_StartBug> static vpx_codec_err_t vp8e_set_scalemode ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4316,"<S2SV_StartBug> memcpy ( ie -> ie_buffer + le16_to_cpu ( ie -> ie_length ) , <S2SV_EndBug> ",<S2SV_ModStart> if ( le16_to_cpu ( ie -> ie_length ) + vs_ie -> len + 2 > IEEE_MAX_IE_SIZE ) return - EINVAL ; 
4317,<S2SV_StartBug> if ( serial -> port [ 0 ] == usbcons_info . port ) { <S2SV_EndBug> ,<S2SV_ModStart> serial -> port [ 0 ] && 
4318,"<S2SV_StartBug> PHP_VAR_UNSERIALIZE_INIT ( var_hash ) ; <S2SV_EndBug> <S2SV_StartBug> zval * * tmp ; <S2SV_EndBug> <S2SV_StartBug> efree ( name ) ; <S2SV_EndBug> <S2SV_StartBug> php_set_session_var ( name , namelen , current , & var_hash TSRMLS_CC ) ; <S2SV_EndBug> <S2SV_StartBug> PS_ADD_VARL ( name , namelen ) ; <S2SV_EndBug> ",<S2SV_ModStart> int skip = 0 ; <S2SV_ModStart> ; skip = 0 <S2SV_ModStart> skip = 1 <S2SV_ModEnd> <S2SV_ModStart> if ( ! skip ) { <S2SV_ModStart> } <S2SV_ModStart> if ( ! skip ) { <S2SV_ModStart> } 
4319,"<S2SV_StartBug> char * decoded = url_decode ( url ) ; <S2SV_EndBug> <S2SV_StartBug> int has_nl = ! ! strchr ( decoded , '\\n' ) ; <S2SV_EndBug> <S2SV_StartBug> if ( has_nl ) <S2SV_EndBug> ","<S2SV_ModStart> ; const char * next ; int has_nl ; decoded <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) return - 1 ; if ( count_leading_dotdots ( url , & next ) > 0 && * next == ':' "
4320,"<S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int64_t txfm_cache [ ] , <S2SV_EndBug> <S2SV_StartBug> int * rate2 , int64_t * distortion , <S2SV_EndBug> <S2SV_StartBug> int * skippable , <S2SV_EndBug> <S2SV_StartBug> int * rate_uv , int64_t * distortion_uv , <S2SV_EndBug> <S2SV_StartBug> int_mv single_newmv [ MAX_REF_FRAMES ] , <S2SV_EndBug> <S2SV_StartBug> const int64_t ref_best_rd ) { <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> const int num_refs = is_comp_pred ? 2 : 1 ; <S2SV_EndBug> <S2SV_StartBug> int64_t this_rd = 0 ; <S2SV_EndBug> <S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , uint8_t , tmp_buf , MAX_MB_PLANE * 64 * 64 ) ; <S2SV_EndBug> <S2SV_StartBug> int64_t rd , best_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> int rs = 0 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> & mbmi -> ref_mvs [ refs [ 0 ] ] [ 0 ] . as_mv , <S2SV_EndBug> <S2SV_StartBug> & mbmi -> ref_mvs [ refs [ 1 ] ] [ 0 ] . as_mv , <S2SV_EndBug> <S2SV_StartBug> single_motion_search ( cpi , x , tile , bsize , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> * rate2 += rate_mv ; <S2SV_EndBug> <S2SV_StartBug> frame_mv [ refs [ 0 ] ] . as_int = <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < num_refs ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> * rate2 += cost_mv_ref ( cpi , this_mode , mbmi -> mode_context [ refs [ 0 ] ] ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> mask_filter_rd = 0 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ i ] = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> * best_filter = EIGHTTAP ; <S2SV_EndBug> <S2SV_StartBug> * best_filter = EIGHTTAP ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> mbmi -> interp_filter = i ; <S2SV_EndBug> <S2SV_StartBug> rs = vp9_get_switchable_rate ( x ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ i ] = rd ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] = <S2SV_EndBug> <S2SV_StartBug> MIN ( cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] , rd + rs_rd ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> mask_filter_rd = MAX ( cpi -> mask_filter_rd , rd ) ; <S2SV_EndBug> <S2SV_StartBug> int64_t dist_sum = 0 ; <S2SV_EndBug> <S2SV_StartBug> model_rd_for_sb ( cpi , bsize , x , xd , & rate_sum , & dist_sum ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ i ] = rd ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] = <S2SV_EndBug> <S2SV_StartBug> MIN ( cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] , rd + rs_rd ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> mask_filter_rd = MAX ( cpi -> mask_filter_rd , rd ) ; <S2SV_EndBug> <S2SV_StartBug> * best_filter = mbmi -> interp_filter ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> cm -> interp_filter : * best_filter ; <S2SV_EndBug> <S2SV_StartBug> rs = cm -> interp_filter == SWITCHABLE ? vp9_get_switchable_rate ( x ) : 0 ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> vp9_build_inter_predictors_sb ( xd , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> int tmp_rate ; <S2SV_EndBug> <S2SV_StartBug> * rate2 += vp9_get_switchable_rate ( x ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! is_comp_pred ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> in_active_map ) { <S2SV_EndBug> <S2SV_StartBug> * distortion = 0 ; <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> allow_encode_breakout && x -> encode_breakout ) { <S2SV_EndBug> <S2SV_StartBug> * distortion_uv = ( sse_u + sse_v ) << 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> skip ) { <S2SV_EndBug> <S2SV_StartBug> return INT64_MAX ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int * rate2 , int64_t * distortion <S2SV_ModEnd> <S2SV_ModStart> skippable <S2SV_ModEnd> <S2SV_ModStart> rate_y , int * rate_uv <S2SV_ModEnd> <S2SV_ModStart> disable_skip <S2SV_ModEnd> <S2SV_ModStart> [ MAX_REF_FRAMES ] , INTERP_FILTER ( * single_filter ) [ MAX_REF_FRAMES ] , int ( * single_skippable ) <S2SV_ModStart> , int64_t * mask_filter , int64_t filter_cache [ ] <S2SV_ModStart> ; MB_MODE_INFO_EXT * const mbmi_ext = x -> mbmi_ext <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH DECLARE_ALIGNED <S2SV_ModEnd> <S2SV_ModStart> uint16_t , tmp_buf16 [ MAX_MB_PLANE * 64 * 64 ] ) ; uint8_t * tmp_buf ; # else DECLARE_ALIGNED ( 16 , uint8_t , tmp_buf [ <S2SV_ModEnd> <S2SV_ModStart> ] ) ; # endif <S2SV_ModEnd> <S2SV_ModStart> tmp_rd , <S2SV_ModStart> INTERP_FILTER best_filter = SWITCHABLE ; uint8_t skip_txfm [ MAX_MB_PLANE << 2 ] = { 0 } ; int64_t bsse [ MAX_MB_PLANE << 2 ] = { 0 } ; int bsl = mi_width_log2_lookup [ bsize ] ; int pred_filter_search = cpi -> sf . cb_pred_filter_search ? ( ( ( mi_row + mi_col ) >> bsl ) + get_chessboard_index ( cm -> current_video_frame ) ) & 0x1 : 0 ; int skip_txfm_sb = 0 ; int64_t skip_sse_sb = INT64_MAX ; int64_t distortion_y = 0 , distortion_uv = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { tmp_buf = CONVERT_TO_BYTEPTR ( tmp_buf16 ) ; } else { tmp_buf = ( uint8_t * ) tmp_buf16 ; } # endif if ( pred_filter_search ) { INTERP_FILTER af = SWITCHABLE , lf = SWITCHABLE ; if ( xd -> up_available ) af = xd -> mi [ - xd -> mi_stride ] -> mbmi . interp_filter ; if ( xd -> left_available ) lf = xd -> mi [ - 1 ] -> mbmi . interp_filter ; if ( ( this_mode != NEWMV ) || ( af == lf ) ) best_filter = af ; } <S2SV_ModStart> if ( cpi -> sf . adaptive_mode_search ) { if ( single_filter [ this_mode ] [ refs [ 0 ] ] == single_filter [ this_mode ] [ refs [ 1 ] ] ) best_filter = single_filter [ this_mode ] [ refs [ 0 ] ] ; } <S2SV_ModStart> x -> mbmi_ext <S2SV_ModEnd> <S2SV_ModStart> x -> mbmi_ext <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> frame_mv [ refs [ 0 ] ] . as_int = xd -> mi [ 0 ] -> bmi [ 0 ] . as_mv [ 0 ] . as_int = tmp_mv . as_int ; single_newmv [ refs [ 0 ] ] . as_int = tmp_mv . as_int ; if ( discount_newmv_test ( cpi , this_mode , tmp_mv , mode_mv , refs [ 0 ] ) ) { * rate2 += MAX ( ( rate_mv / NEW_MV_DISCOUNT_FACTOR ) , 1 ) ; } else { <S2SV_ModStart> } <S2SV_ModEnd> <S2SV_ModStart> is_comp_pred + 1 <S2SV_ModEnd> <S2SV_ModStart> if ( discount_newmv_test ( cpi , this_mode , frame_mv [ refs [ 0 ] ] , mode_mv , refs [ 0 ] ) ) { * rate2 += MIN ( cost_mv_ref ( cpi , this_mode , mbmi_ext -> mode_context [ refs [ 0 ] ] ) , cost_mv_ref ( cpi , NEARESTMV , mbmi_ext -> mode_context [ refs [ 0 ] ] ) ) ; } else { <S2SV_ModStart> mbmi_ext -> mode_context [ refs [ 0 ] ] ) ; } if ( RDCOST ( x -> rdmult , x -> rddiv , * rate2 , 0 ) > ref_best_rd && mbmi -> mode != NEARESTMV ) return INT64_MAX <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( best_filter == SWITCHABLE ) <S2SV_ModStart> int tmp_skip_sb = 0 ; int64_t tmp_skip_sse = INT64_MAX ; <S2SV_ModStart> cpi , xd <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> * mask_filter <S2SV_ModEnd> <S2SV_ModStart> * mask_filter <S2SV_ModEnd> <S2SV_ModStart> if ( i > 0 && cpi -> sf . adaptive_interp_filter_search && ( cpi -> sf . interp_filter_search_mask & ( 1 << i ) ) ) { rate_sum = INT_MAX ; dist_sum = INT64_MAX ; continue ; } <S2SV_ModStart> , & tmp_skip_sb , & tmp_skip_sse <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> * mask_filter <S2SV_ModEnd> <S2SV_ModStart> * mask_filter <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tmp_rd = best_rd ; skip_txfm_sb = tmp_skip_sb ; skip_sse_sb = tmp_skip_sse ; memcpy ( skip_txfm , x -> skip_txfm , sizeof ( skip_txfm ) ) ; memcpy ( bsse , x -> bsse , sizeof ( bsse ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cpi , xd <S2SV_ModEnd> <S2SV_ModStart> rd = tmp_rd + RDCOST ( x -> rdmult , x -> rddiv , rs , 0 ) ; <S2SV_ModStart> int tmp_rate ; int64_t tmp_dist ; <S2SV_ModStart> model_rd_for_sb ( cpi , bsize , x , xd , & tmp_rate , & tmp_dist , & skip_txfm_sb , & skip_sse_sb ) ; rd = RDCOST ( x -> rdmult , x -> rddiv , rs + tmp_rate , tmp_dist ) ; memcpy ( skip_txfm , x -> skip_txfm , sizeof ( skip_txfm ) ) ; memcpy ( bsse , x -> bsse , sizeof ( bsse ) ) ; } if ( ! is_comp_pred ) single_filter [ this_mode ] [ refs [ 0 ] ] = mbmi -> interp_filter ; if ( cpi -> sf . adaptive_mode_search ) if ( is_comp_pred ) if ( single_skippable [ this_mode ] [ refs [ 0 ] ] && single_skippable [ this_mode ] [ refs [ 1 ] ] ) memset ( skip_txfm , SKIP_TXFM_AC_DC , sizeof ( skip_txfm ) ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rs ; memcpy ( x -> skip_txfm , skip_txfm , sizeof ( skip_txfm ) ) ; memcpy ( x -> bsse , bsse , sizeof ( bsse ) <S2SV_ModEnd> <S2SV_ModStart> skip_txfm_sb ) { int skippable_y , skippable_uv ; int64_t sseuv = INT64_MAX ; int64_t rdcosty = INT64_MAX ; vp9_subtract_plane ( x , bsize , 0 ) ; super_block_yrd ( cpi , x , rate_y , & distortion_y , & skippable_y , psse , bsize , ref_best_rd ) ; if ( * rate_y == INT_MAX ) { * rate2 = INT_MAX ; * distortion = INT64_MAX ; restore_dst_buf ( xd , orig_dst , orig_dst_stride ) ; return INT64_MAX ; } * rate2 += * rate_y ; * distortion += distortion_y ; rdcosty = RDCOST ( x -> rdmult , x -> rddiv , * rate2 , * distortion ) ; rdcosty = MIN ( rdcosty , RDCOST ( x -> rdmult , x -> rddiv , 0 , * psse ) ) ; <S2SV_ModEnd> <S2SV_ModStart> super_block_uvrd ( cpi , x , rate_uv , & distortion_uv , & skippable_uv , & sseuv , bsize , ref_best_rd - rdcosty ) ) { * rate2 = INT_MAX ; * distortion = INT64_MAX ; restore_dst_buf ( xd , orig_dst , orig_dst_stride ) ; return INT64_MAX ; } * psse += sseuv ; * rate2 += * rate_uv <S2SV_ModEnd> <S2SV_ModStart> += distortion_uv ; * skippable = skippable_y && skippable_uv ; } else { <S2SV_ModEnd> <S2SV_ModStart> * disable_skip <S2SV_ModEnd> <S2SV_ModStart> distortion = skip_sse_sb ; <S2SV_ModEnd> <S2SV_ModStart> is_comp_pred ) single_skippable [ this_mode ] [ refs [ 0 ] ] = * skippable <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> "
4321,<S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug> ,"<S2SV_ModStart> buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.W64<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } "
4322,"<S2SV_StartBug> return ( tsfb -> numlvls > 0 ) ? jpc_tsfb_synthesize2 ( tsfb , <S2SV_EndBug> ",<S2SV_ModStart> && jas_seq2d_size ( a ) 
4323,<S2SV_StartBug> for ( y = 0 ; y < ( ssize_t ) image -> rows ; y += ( ssize_t ) level ) <S2SV_EndBug> ,"<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
4324,<S2SV_StartBug> void vp9_entropy_mv_init ( ) { <S2SV_EndBug> ,<S2SV_ModStart> void 
4325,<S2SV_StartBug> if ( ipv6_addr_type ( & lsa -> l2tp_addr ) & IPV6_ADDR_LINKLOCAL ) <S2SV_EndBug> ,<S2SV_ModStart> lsa -> l2tp_conn_id = 0 ; 
4326,"<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.cmd"" , rootname ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.png"" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.ps"" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.eps"" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.tex"" , newroot ) ; <S2SV_EndBug> ",<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> 
4327,<S2SV_StartBug> if ( sbinfo -> max_blocks >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> buf -> f_blocks = sbinfo -> max_blocks ; <S2SV_EndBug> <S2SV_StartBug> buf -> f_bavail = buf -> f_bfree = sbinfo -> free_blocks ; <S2SV_EndBug> ,<S2SV_ModStart> spool ) { long free_pages ; spin_lock ( & sbinfo -> spool -> lock ) ; <S2SV_ModEnd> <S2SV_ModStart> spool -> max_hpages ; free_pages = sbinfo -> spool -> max_hpages - sbinfo -> spool -> used_hpages <S2SV_ModEnd> <S2SV_ModStart> free_pages ; spin_unlock ( & sbinfo -> spool -> lock ) <S2SV_ModEnd> 
4328,<S2SV_StartBug> { if ( psf -> headindex < SIGNED_SIZEOF ( psf -> header ) - 4 ) <S2SV_EndBug> <S2SV_StartBug> { psf -> header [ psf -> headindex ++ ] = x ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 16 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 24 ) ; <S2SV_EndBug> <S2SV_StartBug> } ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> . ptr [ <S2SV_ModEnd> <S2SV_ModStart> . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart> . ptr <S2SV_ModStart> header . indx <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4329,"<S2SV_StartBug> & r -> client_princ -> name , <S2SV_EndBug> <S2SV_StartBug> & r -> client_princ -> realm , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ? & r -> client_princ -> name : NULL , <S2SV_ModEnd> <S2SV_ModStart> ? & r -> client_princ -> realm : NULL <S2SV_ModEnd> "
4330,<S2SV_StartBug> while ( bytes ) { <S2SV_EndBug> ,<S2SV_ModStart> || ! iov -> iov_len 
4331,<S2SV_StartBug> reordered [ len + 1 ] = Mymr_C_VIRAMA ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len > 0 ) 
4332,"<S2SV_StartBug> struct gs_host_config hconf = { <S2SV_EndBug> <S2SV_StartBug> struct gs_device_config dconf ; <S2SV_EndBug> <S2SV_StartBug> & hconf , <S2SV_EndBug> <S2SV_StartBug> sizeof ( hconf ) , <S2SV_EndBug> <S2SV_StartBug> if ( rc < 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> & dconf , <S2SV_EndBug> <S2SV_StartBug> sizeof ( dconf ) , <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! dev ) <S2SV_EndBug> <S2SV_StartBug> init_usb_anchor ( & dev -> rx_submitted ) ; <S2SV_EndBug> <S2SV_StartBug> dev -> canch [ i ] = gs_make_candev ( i , intf , & dconf ) ; <S2SV_EndBug> <S2SV_StartBug> kfree ( dev ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> * hconf <S2SV_ModEnd> <S2SV_ModStart> * dconf ; hconf = kmalloc ( sizeof ( * hconf ) , GFP_KERNEL ) ; if ( ! hconf ) return - ENOMEM ; hconf -> byte_order = 0x0000beef <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * <S2SV_ModStart> kfree ( hconf ) ; <S2SV_ModStart> dconf = kmalloc ( sizeof ( * dconf ) , GFP_KERNEL ) ; if ( ! dconf ) return - ENOMEM ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * <S2SV_ModStart> kfree ( dconf ) ; return rc ; } icount = dconf -> <S2SV_ModEnd> <S2SV_ModStart> kfree ( dconf ) ; <S2SV_ModStart> { kfree ( dconf ) ; <S2SV_ModStart> } <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> dconf ) ; kfree ( <S2SV_ModStart> kfree ( dconf ) ; "
4333,<S2SV_StartBug> mlock_vma_page ( page ) ; <S2SV_EndBug> <S2SV_StartBug> if ( page == check_page ) <S2SV_EndBug> <S2SV_StartBug> ret = SWAP_MLOCK ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { mlock_vma_page ( page ) ; <S2SV_ModStart> } else if ( trylock_page ( page ) ) { mlock_vma_page ( page ) ; unlock_page ( page ) ; } 
4334,"<S2SV_StartBug> run_burl_normalize ( psrc , ptmp , flags , __LINE__ , CONST_STR_LEN ( ""/a%2fb"" ) , CONST_STR_LEN ( ""/a/b"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%2f?"" ) , CONST_STR_LEN ( ""/?"" ) ) ; run_burl_normalize ( psrc , ptmp , flags , __LINE__ , CONST_STR_LEN ( ""/%2f?"" ) , CONST_STR_LEN ( ""//?"" ) ) ; run_burl_normalize ( psrc , ptmp , flags , __LINE__ , CONST_STR_LEN ( "
4335,"<S2SV_StartBug> char * ext , szName [ 1000 ] , szExt [ 20 ] ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( szName , url ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ext && strlen ( ext ) > 1 ) { <S2SV_EndBug> ",<S2SV_ModStart> 1024 <S2SV_ModEnd> <S2SV_ModStart> if ( strlen ( url ) >= sizeof ( szName ) ) return GF_FALSE ; <S2SV_ModStart> && strlen ( ext ) <= sizeof ( szExt ) 
4336,<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug> ,<S2SV_ModStart> void 
4337,"<S2SV_StartBug> l2tp_msgtype_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> const uint16_t * ptr = ( const uint16_t * ) dat ; <S2SV_EndBug> ","<S2SV_ModStart> , u_int length <S2SV_ModStart> if ( length < 2 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } "
4338,<S2SV_StartBug> while ( isspace ( * p ) ) <S2SV_EndBug> ,<S2SV_ModStart> ( unsigned char ) 
4339,"<S2SV_StartBug> if ( ext4_test_inode_state ( inode , EXT4_STATE_ORDERED_MODE ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4340,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> GTextFieldSaved ( gt ) ; 
4341,"<S2SV_StartBug> static struct ip_options * tcp_v4_save_options ( struct sock * sk , <S2SV_EndBug> <S2SV_StartBug> struct ip_options * opt = & ( IPCB ( skb ) -> opt ) ; <S2SV_EndBug> <S2SV_StartBug> struct ip_options * dopt = NULL ; <S2SV_EndBug> <S2SV_StartBug> int opt_size = optlength ( opt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ip_options_echo ( dopt , skb ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> sizeof ( * dopt ) + opt -> optlen <S2SV_ModEnd> <S2SV_ModStart> & dopt -> opt <S2SV_ModEnd> 
4342,"<S2SV_StartBug> env -> used_maps [ env -> used_map_cnt ++ ] = map ; <S2SV_EndBug> <S2SV_StartBug> bpf_map_inc ( map , false ) ; <S2SV_EndBug> ","<S2SV_ModStart> map = bpf_map_inc ( map , false ) ; if ( IS_ERR ( map ) ) { fdput ( f ) ; return PTR_ERR ( map ) ; } <S2SV_ModStart>  <S2SV_ModEnd> "
4343,<S2SV_StartBug> unsigned fat_length ; <S2SV_EndBug> <S2SV_StartBug> fs -> fat_start = ( off_t ) le16toh ( b . reserved ) * logical_sector_size ; <S2SV_EndBug> <S2SV_StartBug> data_size = ( off_t ) total_sectors * logical_sector_size - fs -> data_start ; <S2SV_EndBug> ,"<S2SV_ModStart> off_t <S2SV_ModEnd> <S2SV_ModStart> if ( ! fat_length ) die ( ""FAT<S2SV_blank>size<S2SV_blank>is<S2SV_blank>zero."" ) ; <S2SV_ModStart> ; if ( data_size < fs -> cluster_size ) die ( ""Filesystem<S2SV_blank>has<S2SV_blank>no<S2SV_blank>space<S2SV_blank>for<S2SV_blank>any<S2SV_blank>data<S2SV_blank>clusters"" ) "
4344,"<S2SV_StartBug> if ( ! rta ) <S2SV_EndBug> <S2SV_StartBug> p = kmemdup ( up , xfrm_replay_state_esn_len ( up ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> pp = kmemdup ( up , xfrm_replay_state_esn_len ( up ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> * replay_esn = p ; <S2SV_EndBug> ","<S2SV_ModStart> int klen , ulen ; <S2SV_ModStart> klen = <S2SV_ModEnd> <S2SV_ModStart> ; ulen = nla_len ( rta ) >= klen ? klen : sizeof ( * up ) ; p = kzalloc ( klen <S2SV_ModStart> kzalloc ( klen <S2SV_ModEnd> <S2SV_ModStart> memcpy ( p , up , ulen ) ; memcpy ( pp , up , ulen ) ; "
4345,"<S2SV_StartBug> u64 nsec = ( u64 ) jiffies * TICK_NSEC ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & tv_usec ) ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_usec = tv_usec ; <S2SV_EndBug> ","<S2SV_ModStart> u32 rem ; value -> tv_sec = div_u64_rem ( <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> rem ) <S2SV_ModEnd> <S2SV_ModStart> rem / NSEC_PER_USEC <S2SV_ModEnd> "
4346,<S2SV_StartBug> for ( i = 1 ; i <= SYSTEM_ID_LEN ; i ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> int sysid_len ; sysid_len = SYSTEM_ID_LEN ; if ( sysid_len > id_len ) sysid_len = id_len ; <S2SV_ModStart> sysid_len <S2SV_ModEnd> 
4347,<S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4348,<S2SV_StartBug> size_t len = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> ; luaL_checkstack ( L , 3 , ""in<S2SV_blank>function<S2SV_blank>mp_encode_lua_table_as_map"" ) "
4349,<S2SV_StartBug> struct ip_options * opt ; <S2SV_EndBug> <S2SV_StartBug> opt = sk_inet -> opt ; <S2SV_EndBug> <S2SV_StartBug> if ( opt == NULL || opt -> cipso == 0 ) <S2SV_EndBug> <S2SV_StartBug> hdr_delta = cipso_v4_delopt ( & sk_inet -> opt ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> rcu_dereference_protected ( sk_inet -> inet_opt , 1 ) <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> inet_opt <S2SV_ModEnd> "
4350,<S2SV_StartBug> if ( p -> question -> n_keys != 1 ) <S2SV_EndBug> ,<S2SV_ModStart> ! p -> question ) return 0 ; if ( 
4351,<S2SV_StartBug> if ( tu -> timeri ) <S2SV_EndBug> <S2SV_StartBug> snd_timer_close ( tu -> timeri ) ; <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & tu -> ioctl_lock ) ; <S2SV_ModStart> ) ; mutex_unlock ( & tu -> ioctl_lock 
4352,<S2SV_StartBug> if ( ! ( si -> h | si -> w ) ) <S2SV_EndBug> <S2SV_StartBug> res = VPX_CODEC_UNSUP_BITSTREAM ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> ,<S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart> VPX_CODEC_CORRUPT_FRAME ; } else { res = <S2SV_ModStart>  <S2SV_ModEnd> 
4353,"<S2SV_StartBug> int xmkstemp ( char * * tmpname , char * dir ) <S2SV_EndBug> <S2SV_StartBug> char * tmpenv ; <S2SV_EndBug> <S2SV_StartBug> if ( dir != NULL ) <S2SV_EndBug> <S2SV_StartBug> tmpenv = dir ; <S2SV_EndBug> <S2SV_StartBug> if ( tmpenv ) <S2SV_EndBug> <S2SV_StartBug> program_invocation_short_name ) ; <S2SV_EndBug> ","<S2SV_ModStart> const <S2SV_ModStart> , const char * prefix <S2SV_ModStart> const <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ? dir : <S2SV_ModEnd> <S2SV_ModStart> ! tmpenv ) tmpenv = _PATH_TMP ; <S2SV_ModEnd> <S2SV_ModStart> prefix <S2SV_ModEnd> "
4354,<S2SV_StartBug> if ( left > 0 && n > left ) <S2SV_EndBug> ,<S2SV_ModStart> == 0 && extend ) return 0 ; if ( left 
4355,<S2SV_StartBug> struct usmStateReference * retval = ( struct usmStateReference * ) <S2SV_EndBug> <S2SV_StartBug> return retval ; <S2SV_EndBug> ,<S2SV_ModStart> ; retval = <S2SV_ModEnd> <S2SV_ModStart> if ( retval ) retval -> refcnt = 1 ; 
4356,<S2SV_StartBug> return v % 2 ? m - ( v + 1 ) / 2 : m + v / 2 ; <S2SV_EndBug> ,<S2SV_ModStart> ( v & 1 ) <S2SV_ModEnd> <S2SV_ModStart> ( <S2SV_ModStart> >> 1 ) <S2SV_ModEnd> <S2SV_ModStart> ( v >> 1 ) <S2SV_ModEnd> 
4357,"<S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> 
4358,"<S2SV_StartBug> decorator_list , expr_ty returns , int lineno , int col_offset , int <S2SV_EndBug> <S2SV_StartBug> p -> v . FunctionDef . returns = returns ; <S2SV_EndBug> ","<S2SV_ModStart> string type_comment , <S2SV_ModStart> ; p -> v . FunctionDef . type_comment = type_comment "
4359,"<S2SV_StartBug> struct request * rq = tags -> rqs [ tag ] ; <S2SV_EndBug> <S2SV_StartBug> struct blk_flush_queue * fq = blk_get_flush_queue ( rq -> q , rq -> mq_ctx ) ; <S2SV_EndBug> ",<S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4360,<S2SV_StartBug> free ( name ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! strcmp ( key , ""url"" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options , data -> obj , FSCK_MSG_GITMODULES_URL , ""disallowed<S2SV_blank>submodule<S2SV_blank>url:<S2SV_blank>%s"" , value ) ; "
4361,"<S2SV_StartBug> vp9_reader * r , <S2SV_EndBug> <S2SV_StartBug> FRAME_CONTEXT * const fc = & cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> ref_frame [ 0 ] = ( MV_REFERENCE_FRAME ) vp9_get_segdata ( & cm -> seg , segment_id , <S2SV_EndBug> <S2SV_StartBug> const int bit = vp9_read ( r , fc -> comp_ref_prob [ ctx ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> <S2SV_StartBug> const int bit0 = vp9_read ( r , fc -> single_ref_prob [ ctx0 ] [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> <S2SV_StartBug> const int bit1 = vp9_read ( r , fc -> single_ref_prob [ ctx1 ] [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> <S2SV_ModStart> cm -> fc ; FRAME_COUNTS * counts = xd -> counts ; if ( segfeature_active ( <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> get_segdata <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> counts <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> counts <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> counts <S2SV_ModEnd> 
4362,"<S2SV_StartBug> if ( ( error_code >> 16 ) != 0x8009 ) <S2SV_EndBug> <S2SV_StartBug> return ""None<S2SV_blank>of<S2SV_blank>the<S2SV_blank>signers<S2SV_blank>of<S2SV_blank>the<S2SV_blank>cryptographic<S2SV_blank>message<S2SV_blank>or<S2SV_blank>certificate<S2SV_blank>trust<S2SV_blank>list<S2SV_blank>is<S2SV_blank>trusted."" ; <S2SV_EndBug> ","<S2SV_ModStart> ( <S2SV_ModStart> && ( ( error_code >> 16 ) != 0x800B ) ) <S2SV_ModStart> ; case CERT_E_UNTRUSTEDROOT : return ""The<S2SV_blank>root<S2SV_blank>certificate<S2SV_blank>is<S2SV_blank>not<S2SV_blank>trusted."" ; case TRUST_E_NOSIGNATURE : return ""Not<S2SV_blank>digitally<S2SV_blank>signed."" ; case TRUST_E_EXPLICIT_DISTRUST : return ""One<S2SV_blank>of<S2SV_blank>the<S2SV_blank>certificates<S2SV_blank>used<S2SV_blank>was<S2SV_blank>marked<S2SV_blank>as<S2SV_blank>untrusted<S2SV_blank>by<S2SV_blank>the<S2SV_blank>user."" "
4363,"<S2SV_StartBug> KEY_ALLOC_IN_QUOTA , <S2SV_EndBug> <S2SV_StartBug> KEY_ALLOC_IN_QUOTA , <S2SV_EndBug> ",<S2SV_ModStart> KEY_ALLOC_UID_KEYRING | <S2SV_ModStart> KEY_ALLOC_UID_KEYRING | 
4364,<S2SV_StartBug> if ( namelen > 32 ) <S2SV_EndBug> ,<S2SV_ModStart> len <S2SV_ModEnd> 
4365,<S2SV_StartBug> if ( bytecnt ) { <S2SV_EndBug> <S2SV_StartBug> bytecnt -- ; <S2SV_EndBug> ,<S2SV_ModStart> >= 2 <S2SV_ModStart> if ( wpc -> channel_reordering [ i ] >= nchans ) wpc -> channel_reordering [ i ] = 0 ; 
4366,"<S2SV_StartBug> printf ( ""Copyright<S2SV_blank>(C)<S2SV_blank>2000-2010<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\n<S2SV_blank>This<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\n<S2SV_blank>There<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\n<S2SV_blank>particular<S2SV_blank>purpose.\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( isupper ( * s ) || isdigit ( * s ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( islower ( * s ) ) { <S2SV_EndBug> ","<S2SV_ModStart> ""Copyright<S2SV_blank>(C)<S2SV_blank>2000-2010<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\nThis<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\nThere<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\nparticular<S2SV_blank>purpose.\\n"" <S2SV_ModEnd> <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) <S2SV_ModStart> ( unsigned char ) "
4367,"<S2SV_StartBug> uint16 nstrips = 0 , ntiles = 0 , planar = 0 ; <S2SV_EndBug> <S2SV_StartBug> read_buff = ( unsigned char * ) _TIFFmalloc ( buffsize + 3 ) ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ","<S2SV_ModStart> uint32 nstrips = 0 , ntiles = 0 ; uint16 <S2SV_ModEnd> <S2SV_ModStart> { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"" , ""Unable<S2SV_blank>to<S2SV_blank>allocate/reallocate<S2SV_blank>read<S2SV_blank>buffer"" ) ; return ( - 1 ) ; } <S2SV_ModStart> } <S2SV_ModStart> if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( ""loadImage"" , ""Unable<S2SV_blank>to<S2SV_blank>allocate/reallocate<S2SV_blank>read<S2SV_blank>buffer"" ) ; return ( - 1 ) ; } "
4368,"<S2SV_StartBug> if ( using_compacted_format ( ) ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> err = __copy_from_user ( & fpu -> state . xsave , buf_fx , state_size ) ; <S2SV_EndBug> ","<S2SV_ModStart> { <S2SV_ModStart> } else { <S2SV_ModEnd> <S2SV_ModStart> if ( ! err && state_size > offsetof ( struct xregs_state , header ) && fpu -> state . xsave . header . xcomp_bv ) err = - EINVAL ; } "
4369,<S2SV_StartBug> qemu_vfree ( r -> iov . iov_base ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( r -> iov . iov_base ) { <S2SV_ModStart> } 
4370,"<S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_MAHTR0 , hashTable [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_MAHTR2 , hashTable [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_MAHTR3 , hashTable [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>MAHTR0<S2SV_blank>=<S2SV_blank>%04"" PRIX16 ""\\r\\n"" , ksz8851ReadReg ( interface , KSZ8851_REG_MAHTR0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>MAHTR1<S2SV_blank>=<S2SV_blank>%04"" PRIX16 ""\\r\\n"" , ksz8851ReadReg ( interface , KSZ8851_REG_MAHTR1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>MAHTR2<S2SV_blank>=<S2SV_blank>%04"" PRIX16 ""\\r\\n"" , ksz8851ReadReg ( interface , KSZ8851_REG_MAHTR2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( ""<S2SV_blank><S2SV_blank>MAHTR3<S2SV_blank>=<S2SV_blank>%04"" PRIX16 ""\\r\\n"" , ksz8851ReadReg ( interface , KSZ8851_REG_MAHTR3 ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> KSZ8851_MAHTR0 , hashTable [ 0 ] ) ; ksz8851WriteReg ( interface , KSZ8851_MAHTR1 <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_MAHTR2 <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_MAHTR3 <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_MAHTR0 <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_MAHTR1 <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_MAHTR2 <S2SV_ModEnd> <S2SV_ModStart> KSZ8851_MAHTR3 <S2SV_ModEnd> "
4371,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> ","<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : gss_release_buffer ( & minor_stat , & client_name ) ; gss_release_buffer ( & minor_stat , & service_name ) ; <S2SV_ModEnd> "
4372,"<S2SV_StartBug> if ( current_entry + n > ( int ) c -> entries ) { return error ( f , VORBIS_invalid_setup ) ; } <S2SV_EndBug> <S2SV_StartBug> c -> lookup_values = lookup1_values ( c -> entries , c -> dimensions ) ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < g -> values ; ++ j ) <S2SV_EndBug> <S2SV_StartBug> m -> coupling_steps = get_bits ( f , 8 ) + 1 ; <S2SV_EndBug> ","<S2SV_ModStart> current_length >= 32 ) return error ( f , VORBIS_invalid_setup ) ; if ( <S2SV_ModStart> int values = lookup1_values ( c -> entries , c -> dimensions ) ; if ( values < 0 ) return error ( f , VORBIS_invalid_setup ) ; <S2SV_ModStart> ( uint32 ) values <S2SV_ModEnd> <S2SV_ModStart> - 1 ; ++ j ) if ( p [ j ] . x == p [ j + 1 ] . x ) return error ( f , VORBIS_invalid_setup ) ; for ( j = 0 ; j < g -> values <S2SV_ModStart> ; if ( m -> coupling_steps > f -> channels ) return error ( f , VORBIS_invalid_setup ) "
4373,<S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> <S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> <S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> ,<S2SV_ModStart> sas_eh_finish_cmd <S2SV_ModEnd> <S2SV_ModStart> sas_eh_finish_cmd <S2SV_ModEnd> <S2SV_ModStart> sas_eh_finish_cmd <S2SV_ModEnd> 
4374,"<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ret = key_read_state ( key ) ; if ( ret < 0 ) return ret ; <S2SV_ModEnd> 
4375,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> vpx_ref_frame_t * const data = va_arg ( args , vpx_ref_frame_t * ) ; <S2SV_EndBug> <S2SV_StartBug> image2yuvconfig ( & frame -> img , & sd ) ; <S2SV_EndBug> <S2SV_StartBug> return vp9_set_reference_dec ( & ctx -> pbi -> common , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ctx -> frame_parallel_decode ) { set_error_detail ( ctx , ""Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode"" ) ; return VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> frame_worker_data <S2SV_ModEnd> "
4376,"<S2SV_StartBug> Stream_Read_UINT32 ( irp -> input , Length ) ; <S2SV_EndBug> <S2SV_StartBug> if ( printer_dev -> printer ) <S2SV_EndBug> <S2SV_StartBug> error = printjob -> Write ( printjob , Stream_Pointer ( irp -> input ) , Length ) ; <S2SV_EndBug> ","<S2SV_ModStart> void * ptr ; if ( Stream_GetRemainingLength ( irp -> input ) < 32 ) return ERROR_INVALID_DATA ; <S2SV_ModStart> ptr = Stream_Pointer ( irp -> input ) ; if ( ! Stream_SafeSeek ( irp -> input , Length ) ) return ERROR_INVALID_DATA ; <S2SV_ModStart> ptr <S2SV_ModEnd> "
4377,"<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> if ( ( int ) * sig_len < wc_SignatureGetSize ( sig_type , key , key_len ) ) { <S2SV_EndBug> <S2SV_StartBug> } while ( ret == WC_PENDING_E ) ; <S2SV_EndBug> ","<S2SV_ModStart> return wc_SignatureGenerateHash_ex ( hash_type , sig_type , hash_data , hash_len , sig , sig_len <S2SV_ModEnd> <S2SV_ModStart> , rng , 1 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4378,"<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> struct frag_hdr fhdr ; <S2SV_EndBug> <S2SV_StartBug> skb -> ip_summed = CHECKSUM_PARTIAL ; <S2SV_EndBug> <S2SV_StartBug> __skb_queue_tail ( & sk -> sk_write_queue , skb ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct frag_hdr fhdr ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> csum = 0 ; __skb_queue_tail ( & sk -> sk_write_queue , skb ) ; } else if ( skb_is_gso ( skb ) ) { goto append ; } skb -> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> append : <S2SV_ModEnd> "
4379,<S2SV_StartBug> key_user_put ( key -> user ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( key -> type -> destroy ) key -> type -> destroy ( key ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
4380,"<S2SV_StartBug> handle = ion_handle_get_by_id ( client , data . handle . handle ) ; <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( handle ) ) <S2SV_EndBug> <S2SV_StartBug> ion_free ( client , handle ) ; <S2SV_EndBug> ","<S2SV_ModStart> mutex_lock ( & client -> lock ) ; handle = ion_handle_get_by_id_nolock <S2SV_ModEnd> <S2SV_ModStart> { mutex_unlock ( & client -> lock ) ; <S2SV_ModStart> } ion_free_nolock ( client , handle ) ; ion_handle_put_nolock ( handle ) ; mutex_unlock ( & client -> lock <S2SV_ModEnd> "
4381,<S2SV_StartBug> int rv ; <S2SV_EndBug> ,"<S2SV_ModStart> ; clear_bit ( WDM_OVERFLOW , & desc -> flags ) "
4382,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4383,"<S2SV_StartBug> if ( jas_stream_copy ( out , tmpstream , box -> len - JP2_BOX_HDRLEN ( false ) ) ) { <S2SV_EndBug> ","<S2SV_ModStart> jas_eprintf ( ""cannot<S2SV_blank>copy<S2SV_blank>box<S2SV_blank>data\\n"" ) ; "
4384,<S2SV_StartBug> mnt_flags |= MNT_NODEV ; <S2SV_EndBug> ,<S2SV_ModStart> | MNT_LOCK_NODEV 
4385,<S2SV_StartBug> bond_dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug> ,<S2SV_ModStart> ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> 
4386,"<S2SV_StartBug> } else if ( strstr ( url , ""/"" ) != url ) { <S2SV_EndBug> ",<S2SV_ModStart> ( uri . hostname == NULL ) && ( <S2SV_ModStart> ) 
4387,"<S2SV_StartBug> r = copy_from_user ( data , ( void __user * ) addr + offset , len ) ; <S2SV_EndBug> ",<S2SV_ModStart> __copy_from_user <S2SV_ModEnd> 
4388,<S2SV_StartBug> mutex_lock ( & owner -> perf_event_mutex ) ; <S2SV_EndBug> ,"<S2SV_ModStart> mutex_lock_nested <S2SV_ModEnd> <S2SV_ModStart> , SINGLE_DEPTH_NESTING "
4389,"<S2SV_StartBug> pr_err ( ""Underflows<S2SV_blank>must<S2SV_blank>be<S2SV_blank>unconditional<S2SV_blank>and<S2SV_blank>"" <S2SV_EndBug> ",<S2SV_ModStart> pr_debug <S2SV_ModEnd> 
4390,<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug> ,<S2SV_ModStart> void 
4391,<S2SV_StartBug> bpm -> family = AF_BRIDGE ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( bpm , 0 , sizeof ( * bpm ) ) ; "
4392,<S2SV_StartBug> if ( new_inode && S_ISREG ( old_inode -> i_mode ) && new_inode -> i_size && <S2SV_EndBug> ,"<S2SV_ModStart> ret = btrfs_check_dir_item_collision ( root , new_dir -> i_ino , new_dentry -> d_name . name , new_dentry -> d_name . len ) ; if ( ret ) { if ( ret == - EEXIST ) { if ( ! new_inode ) { WARN_ON ( 1 ) ; return ret ; } } else { return ret ; } } ret = 0 ; "
4393,<S2SV_StartBug> return result ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! entry -> lsm [ lsm_rule ] . rule ) return - EINVAL ; 
4394,"<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . mr_encoder_id ) <S2SV_EndBug> <S2SV_StartBug> = ( LOWER_RES_FRAME_INFO * ) cpi -> oxcf . mr_low_res_mode_info ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> ref_frame_flags & VP8_ALTR_FRAME ) <S2SV_EndBug> <S2SV_StartBug> cpi -> mr_low_res_mv_avail &= ( cpi -> current_ref_frames [ ALTREF_FRAME ] <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> current_layer == 0 ) <S2SV_EndBug> <S2SV_StartBug> scale_and_extend_source ( cpi -> un_scaled_source , cpi ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_de_noise ( cm , cpi -> Source , cpi -> Source , l , 1 , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_de_noise ( cm , cpi -> Source , cpi -> Source , l , 1 , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_write_yuv_frame ( cpi -> Source ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_set_quantizer ( cpi , Q ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cm -> lfc , & cm -> fc , sizeof ( cm -> fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_encode_frame ( cpi ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tmp -> mbmi . mode == ZEROMV ) <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTITHREAD <S2SV_EndBug> <S2SV_StartBug> sem_post ( & cpi -> h_event_start_lpf ) ; <S2SV_EndBug> <S2SV_StartBug> update_reference_frames ( cpi ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> bits_off_target = cpi -> oxcf . maximum_buffer_size ; <S2SV_EndBug> ","<S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity == 4 ) { vp8_denoiser_set_parameters ( & cpi -> denoiser , kDenoiserOnYUV ) ; } # endif } # if <S2SV_ModEnd> <S2SV_ModStart> mr_total_resolutions > 1 ) <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> oxcf . mr_encoder_id ) { <S2SV_ModStart> } } if ( cm -> frame_type == KEY_FRAME ) { if ( cpi -> oxcf . mr_encoder_id ) { if ( cpi -> common . current_video_frame == 0 && cpi -> buffer_level == 0 ) { unsigned int i ; cpi -> bits_off_target = cpi -> oxcf . starting_buffer_level ; cpi -> buffer_level = cpi -> oxcf . starting_buffer_level ; for ( i = 0 ; i < cpi -> oxcf . number_of_layers ; i ++ ) { LAYER_CONTEXT * lc = & cpi -> layer_context [ i ] ; lc -> bits_off_target = lc -> starting_buffer_level ; lc -> buffer_level = lc -> starting_buffer_level ; } } cpi -> common . current_video_frame = low_res_frame_info -> key_frame_counter_value ; } else { low_res_frame_info -> key_frame_counter_value = cpi -> common . current_video_frame ; } } } # endif cpi -> closest_reference_frame = LAST_FRAME ; if ( cm -> frame_type != KEY_FRAME ) { int i ; MV_REFERENCE_FRAME closest_ref = INTRA_FRAME ; if ( cpi -> ref_frame_flags & VP8_LAST_FRAME ) { closest_ref = LAST_FRAME ; } else if ( cpi -> ref_frame_flags & VP8_GOLD_FRAME ) { closest_ref = GOLDEN_FRAME ; } else <S2SV_ModStart> { closest_ref = ALTREF_FRAME ; } for ( i = 1 ; i <= 3 ; i ++ ) { vpx_ref_frame_type_t ref_frame_type = ( vpx_ref_frame_type_t ) ( ( i == 3 ) ? 4 : i ) ; if ( cpi -> ref_frame_flags & ref_frame_type ) { if ( ( cm -> current_video_frame - <S2SV_ModEnd> <S2SV_ModStart> i ] ) < ( cm -> current_video_frame - cpi -> current_ref_frames [ closest_ref ] ) ) { closest_ref = i ; } } } cpi -> closest_reference_frame = closest_ref ; } <S2SV_ModEnd> <S2SV_ModStart> memset ( cpi -> consec_zero_last , 0 , cm -> mb_rows * cm -> mb_cols ) ; memset ( cpi -> consec_zero_last_mvbias , 0 , ( cpi -> common . mb_rows * cpi -> common . mb_cols ) ) ; <S2SV_ModStart> int disable_cr_gf = ( cpi -> oxcf . screen_content_mode == 2 && cm -> refresh_golden_frame ) ; <S2SV_ModStart> && cpi -> force_maxqp == 0 && ! disable_cr_gf <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING && CONFIG_POSTPROC if ( cpi -> oxcf . noise_sensitivity >= 3 ) { if ( cpi -> denoiser . denoise_pars . spatial_blur != 0 ) { vp8_de_noise ( cm , cpi -> Source , cpi -> Source , cpi -> denoiser . denoise_pars . spatial_blur , 1 , 0 , 0 ) ; } } # endif <S2SV_ModStart> , 1 <S2SV_ModStart> , 1 <S2SV_ModStart> yuv_file , <S2SV_ModStart> memset ( cpi -> consec_zero_last , 0 , cm -> mb_rows * cm -> mb_cols ) ; memset ( cpi -> consec_zero_last_mvbias , 0 , ( cpi -> common . mb_rows * cpi -> common . mb_cols ) ) ; <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> oxcf . screen_content_mode == 2 ) { if ( vp8_drop_encodedframe_overshoot ( cpi , Q ) ) return ; } <S2SV_ModStart> && tmp -> mbmi . ref_frame == LAST_FRAME <S2SV_ModStart> CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity > 0 && cpi -> oxcf . noise_sensitivity < 4 && ! cpi -> oxcf . screen_content_mode && cpi -> frames_since_key % 8 == 0 && cm -> frame_type != KEY_FRAME ) { cpi -> mse_source_denoised = measure_square_diff_partial ( <S2SV_ModEnd> <S2SV_ModStart> denoiser . yv12_running_avg [ INTRA_FRAME ] , cpi -> Source , cpi ) ; } if ( cpi -> oxcf . noise_sensitivity == 4 && ! cpi -> oxcf . screen_content_mode && cpi -> frames_since_key % 8 == 0 && cm -> frame_type != KEY_FRAME ) { process_denoiser_mode_change ( cpi ) ; } # endif # if CONFIG_MULTITHREAD if ( cpi -> b_multi_threaded ) { sem_post ( & cpi -> h_event_start_lpf ) ; cpi -> b_lpf_running = 1 ; } else # endif <S2SV_ModEnd> <S2SV_ModStart> # ifdef OUTPUT_YUV_DENOISED vp8_write_yuv_frame ( yuv_denoised_file , & cpi -> denoiser . yv12_running_avg [ INTRA_FRAME ] ) ; # endif <S2SV_ModStart> cpi -> oxcf . maximum_buffer_size ; if ( cpi -> drop_frames_allowed == 0 && cpi -> oxcf . screen_content_mode && cpi -> bits_off_target < - cpi -> oxcf . maximum_buffer_size ) cpi -> bits_off_target = - "
4395,"<S2SV_StartBug> if ( test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) { <S2SV_EndBug> ",<S2SV_ModStart> key -> state != KEY_IS_UNINSTANTIATED <S2SV_ModEnd> 
4396,"<S2SV_StartBug> ! strcmp ( & s -> name [ strlen ( s -> name ) - 5 ] , ""plain"" ) ) && s -> enabled ) <S2SV_EndBug> ",<S2SV_ModStart> strstr <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4397,<S2SV_StartBug> if ( ret < 0 ) <S2SV_EndBug> ,<S2SV_ModStart> && ! p -> skip_release_on_error 
4398,"<S2SV_StartBug> unsigned int i , j ; <S2SV_EndBug> ",<S2SV_ModStart> ; ( void ) bothclamp 
4399,"<S2SV_StartBug> sctp_sock_rfree ( skb ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_skb_set_owner_r ( skb , newsk ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_sock_rfree ( skb ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_skb_set_owner_r ( skb , newsk ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_clear_pd ( oldsk ) ; <S2SV_EndBug> ","<S2SV_ModStart> sctp_sock_rfree_frag <S2SV_ModEnd> <S2SV_ModStart> sctp_skb_set_owner_r_frag <S2SV_ModEnd> <S2SV_ModStart> sctp_sock_rfree_frag <S2SV_ModEnd> <S2SV_ModStart> sctp_skb_set_owner_r_frag <S2SV_ModEnd> <S2SV_ModStart> ) ; } sctp_skb_for_each ( skb , & assoc -> ulpq . reasm , tmp ) { sctp_sock_rfree_frag ( skb ) ; sctp_skb_set_owner_r_frag ( skb , newsk ) ; } sctp_skb_for_each ( skb , & assoc -> ulpq . lobby , tmp ) { sctp_sock_rfree_frag ( skb ) ; sctp_skb_set_owner_r_frag ( skb , newsk "
4400,<S2SV_StartBug> if ( new_inode && S_ISREG ( old_inode -> i_mode ) && new_inode -> i_size && <S2SV_EndBug> ,"<S2SV_ModStart> ret = btrfs_check_dir_item_collision ( root , new_dir -> i_ino , new_dentry -> d_name . name , new_dentry -> d_name . len ) ; if ( ret ) { if ( ret == - EEXIST ) { if ( ! new_inode ) { WARN_ON ( 1 ) ; return ret ; } } else { return ret ; } } ret = 0 ; "
4401,<S2SV_StartBug> p = find_eoq ( cmd + 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart> cmd [ 0 ] ? <S2SV_ModStart> : NULL 
4402,"<S2SV_StartBug> int insn_idx , int prev_insn_idx ) <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> ","<S2SV_ModStart> , bool speculative <S2SV_ModStart> ; elem -> st . speculative |= speculative "
4403,"<S2SV_StartBug> copy_file ( source_filename , dest_filename , DEFAULT_DUMP_DIR_MODE ) ; <S2SV_EndBug> <S2SV_StartBug> IGNORE_RESULT ( chown ( dest_filename , dd -> dd_uid , dd -> dd_gid ) ) ; <S2SV_EndBug> <S2SV_StartBug> copy_file ( source_filename , dest_filename , DEFAULT_DUMP_DIR_MODE ) ; <S2SV_EndBug> <S2SV_StartBug> IGNORE_RESULT ( chown ( dest_filename , dd -> dd_uid , dd -> dd_gid ) ) ; <S2SV_EndBug> <S2SV_StartBug> copy_file ( source_filename , dest_filename , DEFAULT_DUMP_DIR_MODE ) ; <S2SV_EndBug> <S2SV_StartBug> IGNORE_RESULT ( chown ( dest_filename , dd -> dd_uid , dd -> dd_gid ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dump_fd_info ( dest_filename , source_filename , source_base_ofs ) ) <S2SV_EndBug> <S2SV_StartBug> IGNORE_RESULT ( chown ( dest_filename , dd -> dd_uid , dd -> dd_gid ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> copy_file_ext <S2SV_ModEnd> <S2SV_ModStart> 0640 <S2SV_ModEnd> <S2SV_ModStart> , O_RDONLY , O_WRONLY | O_CREAT | O_TRUNC | O_EXCL <S2SV_ModEnd> <S2SV_ModStart> copy_file_ext <S2SV_ModEnd> <S2SV_ModStart> 0640 <S2SV_ModEnd> <S2SV_ModStart> , O_RDONLY , O_WRONLY | O_CREAT | O_TRUNC | O_EXCL <S2SV_ModEnd> <S2SV_ModStart> copy_file_ext <S2SV_ModEnd> <S2SV_ModStart> 0640 <S2SV_ModEnd> <S2SV_ModStart> , O_RDONLY , O_WRONLY | O_CREAT | O_TRUNC | O_EXCL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4404,<S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * addr_len = sizeof ( * sin ) ; 
4405,"<S2SV_StartBug> sidx = sizeof ( t_chunk_info ) * nc ; <S2SV_EndBug> <S2SV_StartBug> cidx = gdCalloc ( sidx , 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( overflow2 ( sidx , nc ) ) { goto fail1 ; } <S2SV_ModStart> if ( cidx == NULL ) { goto fail1 ; } "
4406,<S2SV_StartBug> if ( result == L2CAP_CONF_SUCCESS ) { <S2SV_EndBug> <S2SV_StartBug> if ( rfc . mode == L2CAP_MODE_BASIC ) { <S2SV_EndBug> <S2SV_StartBug> if ( mtu < pi -> omtu ) <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> pi -> num_conf_rsp || pi -> num_conf_req ) goto done ; switch ( pi -> mode ) { case L2CAP_MODE_STREAMING : case L2CAP_MODE_ERTM : pi -> conf_state |= L2CAP_CONF_STATE2_DEVICE ; if ( ! l2cap_mode_supported ( pi -> mode , pi -> conn -> feat_mask ) ) return - ECONNREFUSED ; break ; default : pi -> mode = l2cap_select_mode ( rfc . mode , pi -> conn -> feat_mask ) ; break ; } done : if ( pi -> mode != rfc . mode ) { result = L2CAP_CONF_UNACCEPT ; rfc . mode = pi -> mode ; if ( pi -> num_conf_rsp == 1 ) return - ECONNREFUSED ; l2cap_add_conf_opt ( & ptr , L2CAP_CONF_RFC , sizeof ( rfc ) , ( unsigned long ) & rfc ) ; } if ( <S2SV_ModStart> mtu < L2CAP_DEFAULT_MIN_MTU ) result = L2CAP_CONF_UNACCEPT ; else { <S2SV_ModEnd> <S2SV_ModStart> = mtu ; pi -> conf_state |= L2CAP_CONF_MTU_DONE ; } l2cap_add_conf_opt ( & ptr , L2CAP_CONF_MTU , 2 , pi -> omtu ) ; switch ( rfc . mode ) { case L2CAP_MODE_BASIC : pi -> fcs = L2CAP_FCS_NONE ; pi -> conf_state |= L2CAP_CONF_MODE_DONE ; break ; case L2CAP_MODE_ERTM : pi -> remote_tx_win = rfc . txwin_size ; pi -> remote_max_tx = rfc . max_transmit ; pi -> max_pdu_size = rfc . max_pdu_size ; rfc . retrans_timeout = L2CAP_DEFAULT_RETRANS_TO ; rfc . monitor_timeout = L2CAP_DEFAULT_MONITOR_TO ; pi -> conf_state |= L2CAP_CONF_MODE_DONE ; break ; case L2CAP_MODE_STREAMING : pi -> remote_tx_win = rfc . txwin_size ; pi -> max_pdu_size = rfc . max_pdu_size ; pi -> conf_state |= L2CAP_CONF_MODE_DONE ; break ; default : <S2SV_ModEnd> <S2SV_ModStart> memset ( & rfc , 0 , sizeof ( rfc ) ) ; rfc . mode = pi -> mode ; } l2cap_add_conf_opt ( & ptr , L2CAP_CONF_RFC , sizeof ( rfc ) , ( unsigned long ) & rfc ) ; if ( result == L2CAP_CONF_SUCCESS ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4407,"<S2SV_StartBug> static int inv_map_table [ MAX_PROB - 1 ] = { <S2SV_EndBug> <S2SV_StartBug> 6 , 19 , 32 , 45 , 58 , 71 , 84 , 97 , 110 , 123 , 136 , 149 , 162 , 175 , 188 , <S2SV_EndBug> <S2SV_StartBug> return 1 + inv_recenter_nonneg ( v + 1 , m ) ; <S2SV_EndBug> <S2SV_StartBug> return MAX_PROB - inv_recenter_nonneg ( v + 1 , MAX_PROB - 1 - m ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 7 , 20 , 33 , 46 , 59 , 72 , 85 , 98 , 111 , 124 , 137 , 150 , 163 , 176 , 189 , 202 , 215 , 228 , 241 , 254 , 1 , 2 , 3 , 4 , 5 , 6 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 47 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 , 69 , 70 , 71 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 80 , 81 , 82 , 83 , 84 , 86 , 87 , 88 , 89 , 90 , 91 , 92 , 93 , 94 , 95 , 96 , 97 , 99 , 100 , 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 112 , 113 , 114 , 115 , 116 , 117 , 118 , 119 , 120 , 121 , 122 , 123 , 125 , 126 , 127 , 128 , 129 , 130 , 131 , 132 , 133 , 134 , 135 , 136 , 138 , 139 , 140 , 141 , 142 , 143 , 144 , 145 , 146 , 147 , 148 , 149 , 151 , 152 , 153 , 154 , 155 , 156 , 157 , 158 , 159 , 160 , 161 , 162 , 164 , 165 , 166 , 167 , 168 , 169 , 170 , 171 , 172 , 173 , 174 , 175 , 177 , 178 , 179 , 180 , 181 , 182 , 183 , 184 , 185 , 186 , 187 , 188 , 190 , 191 , 192 , 193 , 194 , 195 , 196 , 197 , 198 , 199 , 200 , 201 , 203 , 204 , 205 , 206 , 207 , 208 , 209 , 210 , 211 , 212 , 213 , 214 , 216 , 217 , 218 , 219 , 220 , 221 , 222 , 223 , 224 , 225 , 226 , 227 , 229 , 230 , 231 , 232 , 233 , 234 , 235 , 236 , 237 , 238 , 239 , 240 , 242 , 243 , 244 , 245 , 246 , 247 , 248 , 249 , 250 , 251 , 252 , 253 , 253 } ; assert ( v < ( int ) ( sizeof ( inv_map_table ) / sizeof ( inv_map_table [ 0 ] ) ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4408,"<S2SV_StartBug> if ( icsk -> icsk_af_ops -> conn_request ( sk , skb ) < 0 ) <S2SV_EndBug> ",<S2SV_ModStart> th -> fin ) goto discard ; if ( 
4409,"<S2SV_StartBug> ret = key_validate ( key ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( key -> type -> read ) { <S2SV_EndBug> <S2SV_StartBug> ret = key -> type -> read ( key , buffer , buflen ) ; <S2SV_EndBug> ","<S2SV_ModStart> - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> ( key , buffer , buflen ) ; up_read <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4410,<S2SV_StartBug> long timeo ; <S2SV_EndBug> ,<S2SV_ModStart> ; msg -> msg_namelen = 0 
4411,"<S2SV_StartBug> int count , i ; <S2SV_EndBug> ",<S2SV_ModStart> unsigned 
4412,"<S2SV_StartBug> int ctrl_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_POSTPROC_VISUALIZER && CONFIG_POSTPROC <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( void ) ctx ; ( void ) args ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4413,<S2SV_StartBug> assert ( bi != NULL ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( bi == NULL ) return NULL <S2SV_ModEnd> 
4414,"<S2SV_StartBug> ar2 -> intf [ 0 ] = interface ; <S2SV_EndBug> <S2SV_StartBug> r = usb_driver_claim_interface ( & ati_remote2_driver , ar2 -> intf [ 1 ] , ar2 ) ; <S2SV_EndBug> <S2SV_StartBug> ar2 -> ep [ 1 ] = & alt -> endpoint [ 0 ] . desc ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail3 ; <S2SV_EndBug> <S2SV_StartBug> fail3 : <S2SV_EndBug> <S2SV_StartBug> ati_remote2_urb_cleanup ( ar2 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( alt -> desc . bNumEndpoints < 1 || ! alt -> endpoint ) { dev_err ( & interface -> dev , ""%s():<S2SV_blank>interface<S2SV_blank>0<S2SV_blank>must<S2SV_blank>have<S2SV_blank>an<S2SV_blank>endpoint\\n"" , __func__ ) ; r = - ENODEV ; goto fail1 ; } <S2SV_ModStart> if ( ( udev -> actconfig -> desc . bNumInterfaces < 2 ) || ! ar2 -> intf [ 1 ] ) { dev_err ( & interface -> dev , ""%s():<S2SV_blank>need<S2SV_blank>2<S2SV_blank>interfaces,<S2SV_blank>found<S2SV_blank>%d\\n"" , __func__ , udev -> actconfig -> desc . bNumInterfaces ) ; r = - ENODEV ; goto fail1 ; } <S2SV_ModStart> if ( alt -> desc . bNumEndpoints < 1 || ! alt -> endpoint ) { dev_err ( & interface -> dev , ""%s():<S2SV_blank>interface<S2SV_blank>1<S2SV_blank>must<S2SV_blank>have<S2SV_blank>an<S2SV_blank>endpoint\\n"" , __func__ ) ; r = - ENODEV ; goto fail2 ; } <S2SV_ModStart> fail3 <S2SV_ModEnd> <S2SV_ModStart> fail3 <S2SV_ModEnd> <S2SV_ModStart> fail3 <S2SV_ModEnd> <S2SV_ModStart> fail4 <S2SV_ModEnd> <S2SV_ModStart> fail4 : sysfs_remove_group ( & udev -> dev . kobj , & ati_remote2_attr_group ) ; fail3 : ati_remote2_urb_cleanup ( ar2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4415,"<S2SV_StartBug> gss_buffer_desc client_name , service_name ; <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> ","<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : gss_release_buffer ( & minor_stat , & client_name ) ; gss_release_buffer ( & minor_stat , & service_name ) ; <S2SV_ModEnd> "
4416,"<S2SV_StartBug> struct usbdevfs_connectinfo ci = { <S2SV_EndBug> <S2SV_StartBug> . devnum = ps -> dev -> devnum , <S2SV_EndBug> <S2SV_StartBug> } ; <S2SV_EndBug> ","<S2SV_ModStart> ; memset ( & ci , 0 , sizeof ( ci ) ) ; ci <S2SV_ModEnd> <S2SV_ModStart> ; ci <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4417,"<S2SV_StartBug> save_text_from_text_view ( g_tv_comment , FILENAME_COMMENT ) ; <S2SV_EndBug> ",<S2SV_ModStart> ) ; problem_data_reload_from_dump_dir ( ) ; update_gui_state_from_problem_data ( 0 
4418,<S2SV_StartBug> if ( ( url [ x ] = url [ y ] ) == '+' ) <S2SV_EndBug> <S2SV_StartBug> else if ( url [ x ] == '%' ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( url [ x + 1 ] && url [ x + 2 ] ) ) <S2SV_EndBug> <S2SV_StartBug> url [ x ] = x2c ( url + y + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> y += 2 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> y <S2SV_ModEnd> <S2SV_ModStart> url [ y <S2SV_ModEnd> <S2SV_ModStart> || ! url [ y <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> _x2c <S2SV_ModEnd> <S2SV_ModStart> ; } else { url [ x ] = url [ y ] 
4419,"<S2SV_StartBug> & r -> client_princ -> name , <S2SV_EndBug> <S2SV_StartBug> & r -> client_princ -> realm , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ? & r -> client_princ -> name : NULL , <S2SV_ModEnd> <S2SV_ModStart> ? & r -> client_princ -> realm : NULL <S2SV_ModEnd> "
4420,<S2SV_StartBug> usb_kill_urb ( mixer -> urb ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( mixer -> disconnected ) return ; if ( mixer -> urb ) <S2SV_ModStart> if ( mixer -> rc_urb ) <S2SV_ModStart> mixer -> disconnected = true ; 
4421,"<S2SV_StartBug> call = ast_for_call ( c , CHILD ( n , 3 ) , dummy ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false "
4422,<S2SV_StartBug> struct iovec iov ; <S2SV_EndBug> <S2SV_StartBug> if ( ret < local_nr_pages ) { <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < nr_pages ; j ++ ) { <S2SV_EndBug> ,"<S2SV_ModStart> ; struct bio_vec * bvec <S2SV_ModStart> unlikely ( <S2SV_ModStart> ) { for ( j = cur_page ; j < page_limit ; j ++ ) { if ( ! pages [ j ] ) break ; put_page ( pages [ j ] ) ; } <S2SV_ModEnd> <S2SV_ModStart> bio_for_each_segment_all ( bvec , bio , j ) { put_page ( bvec -> bv_page <S2SV_ModEnd> "
4423,<S2SV_StartBug> while ( ret < nr ) { <S2SV_EndBug> ,<S2SV_ModStart> head %= ctx -> nr_events ; tail %= ctx -> nr_events ; 
4424,"<S2SV_StartBug> strcpy ( algo -> alg_name , auth -> alg_name ) ; <S2SV_EndBug> ","<S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> , sizeof ( algo -> alg_name ) "
4425,<S2SV_StartBug> BT_HDR * p_buf = GKI_getbuf ( ( UINT16 ) ( len + BTA_HH_MIN_OFFSET + sizeof ( BT_HDR ) ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> UINT16 buflen = <S2SV_ModEnd> <S2SV_ModStart> ; if ( buflen < len ) { android_errorWriteWithInfoLog ( 0x534e4554 , ""28672558"" , - 1 , NULL , 0 ) ; return NULL ; } BT_HDR * p_buf = GKI_getbuf ( buflen "
4426,<S2SV_StartBug> img -> color_space = OPJ_CLRSPC_SRGB ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4427,"<S2SV_StartBug> sas_discover_event ( dev -> port , DISCE_PROBE ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4428,<S2SV_StartBug> ether_setup ( dev ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING 
4429,"<S2SV_StartBug> if ( poll ( & pfd , 1 , 0 ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( fd = accept ( sfd , ( struct sockaddr * ) & remote , & len ) ) == - 1 ) <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
4430,<S2SV_StartBug> if ( code == 0 || code == KRB5_PREAUTH_FAILED ) { <S2SV_EndBug> ,<S2SV_ModStart> ! code <S2SV_ModEnd> <S2SV_ModStart> || code == KRB5KDC_ERR_KEY_EXP 
4431,"<S2SV_StartBug> char * driver_override , * old = pdev -> driver_override , * cp ; <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( driver_override ) ) { <S2SV_EndBug> <S2SV_StartBug> kfree ( old ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> device_lock ( dev ) ; old = pdev -> driver_override ; <S2SV_ModStart> device_unlock ( dev ) ; 
4432,<S2SV_StartBug> if ( ! is_guest_mode ( vcpu ) ) { <S2SV_EndBug> ,<S2SV_ModStart> && kvm_x86_ops -> get_cpl ( vcpu ) == 0 
4433,"<S2SV_StartBug> int res , bytes , i , indexes , index_bytes , ids ; <S2SV_EndBug> <S2SV_StartBug> if ( flag ) { <S2SV_EndBug> <S2SV_StartBug> return id_table . xattr_ids ; <S2SV_EndBug> <S2SV_StartBug> res = read_fs_bytes ( fd , sBlk -> xattr_id_table_start + sizeof ( id_table ) , <S2SV_EndBug> <S2SV_StartBug> bytes = SQUASHFS_XATTR_BYTES ( ids ) ; <S2SV_EndBug> <S2SV_StartBug> ( i * SQUASHFS_METADATA_SIZE ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> i , indexes , index_bytes ; unsigned int ids ; long long bytes <S2SV_ModEnd> <S2SV_ModStart> ids = id_table . xattr_ids ; xattr_table_start <S2SV_ModEnd> <S2SV_ModStart> index_bytes = SQUASHFS_XATTR_BLOCK_BYTES ( ( long long ) ids ) ; indexes = SQUASHFS_XATTR_BLOCKS ( ( long long ) ids ) ; if ( index_bytes != ( sBlk -> bytes_used - ( <S2SV_ModEnd> <S2SV_ModStart> ) ) ) { ERROR ( ""read_xattrs_from_disk:<S2SV_blank>Bad<S2SV_blank>xattr_ids<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n"" ) ; return 0 ; } if ( table_start != NULL ) * table_start = id_table . xattr_table_start ; if ( flag ) return id_table . xattr_ids ; index = malloc ( index_bytes ) ; if ( index == NULL ) MEM_ERROR ( ) ; res = read_fs_bytes ( fd , sBlk -> xattr_id_table_start + sizeof ( id_table ) <S2SV_ModStart> ( long long ) <S2SV_ModStart> ( long long ) "
4434,<S2SV_StartBug> while ( ( skb = skb_dequeue ( & loopback_queue ) ) != NULL ) { <S2SV_EndBug> <S2SV_StartBug> dest = ( rose_address * ) ( skb -> data + 4 ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( skb -> len < ROSE_MIN_LEN ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> if ( frametype == ROSE_CALL_REQUEST && ( skb -> len <= ROSE_CALL_REQ_FACILITIES_OFF || skb -> data [ ROSE_CALL_REQ_ADDR_LEN_OFF ] != ROSE_CALL_REQ_ADDR_LEN_VAL ) ) { kfree_skb ( skb ) ; continue ; } <S2SV_ModStart> ROSE_CALL_REQ_DEST_ADDR_OFF <S2SV_ModEnd> 
4435,<S2SV_StartBug> if ( * p != IAC ) <S2SV_EndBug> ,<S2SV_ModStart> ND_TCHECK ( * p ) ; 
4436,"<S2SV_StartBug> memcpy ( tp -> fw_ver , & vpd_data [ j ] , len ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( tp -> fw_ver , ""<S2SV_blank>bc<S2SV_blank>"" , vpdlen - len - 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( len >= sizeof <S2SV_ModEnd> <S2SV_ModStart> ) ) len = sizeof <S2SV_ModEnd> <S2SV_ModStart> ) - 1 ; memset ( tp -> fw_ver , 0 , sizeof ( tp -> fw_ver ) ) ; snprintf ( tp -> fw_ver , sizeof ( tp -> fw_ver ) , ""%.*s<S2SV_blank>bc<S2SV_blank>"" , len , & vpd_data [ j ] <S2SV_ModEnd> "
4437,<S2SV_StartBug> int err ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL 
4438,"<S2SV_StartBug> static struct btrfs_dir_item * btrfs_match_dir_item_name ( struct btrfs_root * root , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4439,"<S2SV_StartBug> static void ip6_append_data_mtu ( int * mtu , <S2SV_EndBug> <S2SV_StartBug> struct rt6_info * rt ) <S2SV_EndBug> <S2SV_StartBug> * mtu = dst_mtu ( rt -> dst . path ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned <S2SV_ModStart> , bool pmtuprobe <S2SV_ModStart> min ( * mtu , pmtuprobe ? rt -> dst . dev -> mtu : <S2SV_ModStart> ) "
4440,"<S2SV_StartBug> if ( perf_event_overflow ( event , 1 , & data , regs ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4441,<S2SV_StartBug> bitlen = slen * 4 ; <S2SV_EndBug> ,"<S2SV_ModStart> { if ( slen > VARBITMAXLEN / 4 ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""bit<S2SV_blank>string<S2SV_blank>length<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , VARBITMAXLEN ) ) ) ; <S2SV_ModStart> } "
4442,"<S2SV_StartBug> err = scm_send ( sock , msg , siocb -> scm ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false "
4443,"
","
"
4444,<S2SV_StartBug> static int udp_push_pending_frames ( struct sock * sk ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4445,"<S2SV_StartBug> if ( mount ( ""none"" , path , ""tmpfs"" , 0 , ""size=100000,mode=755"" ) ) { <S2SV_EndBug> ","<S2SV_ModStart> safe_mount <S2SV_ModEnd> <S2SV_ModStart> , rootfs -> path ? rootfs -> mount : NULL "
4446,"<S2SV_StartBug> # line 495 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 860 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 557 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 854 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 606 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 707 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 784 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 698 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 818 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 677 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 860 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 642 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 916 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 609 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 970 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 599 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1068 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 584 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1142 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 557 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1196 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 550 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1211 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 543 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1221 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 520 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1267 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 499 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1311 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 862 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> ",<S2SV_ModStart> 496 <S2SV_ModEnd> <S2SV_ModStart> 861 <S2SV_ModEnd> <S2SV_ModStart> 558 <S2SV_ModEnd> <S2SV_ModStart> 855 <S2SV_ModEnd> <S2SV_ModStart> 607 <S2SV_ModEnd> <S2SV_ModStart> 708 <S2SV_ModEnd> <S2SV_ModStart> 785 <S2SV_ModEnd> <S2SV_ModStart> 699 <S2SV_ModEnd> <S2SV_ModStart> 819 <S2SV_ModEnd> <S2SV_ModStart> 678 <S2SV_ModEnd> <S2SV_ModStart> 861 <S2SV_ModEnd> <S2SV_ModStart> 643 <S2SV_ModEnd> <S2SV_ModStart> 917 <S2SV_ModEnd> <S2SV_ModStart> 610 <S2SV_ModEnd> <S2SV_ModStart> 971 <S2SV_ModEnd> <S2SV_ModStart> 600 <S2SV_ModEnd> <S2SV_ModStart> 1069 <S2SV_ModEnd> <S2SV_ModStart> 585 <S2SV_ModEnd> <S2SV_ModStart> 1143 <S2SV_ModEnd> <S2SV_ModStart> 558 <S2SV_ModEnd> <S2SV_ModStart> 1197 <S2SV_ModEnd> <S2SV_ModStart> 551 <S2SV_ModEnd> <S2SV_ModStart> 1212 <S2SV_ModEnd> <S2SV_ModStart> 544 <S2SV_ModEnd> <S2SV_ModStart> 1222 <S2SV_ModEnd> <S2SV_ModStart> 521 <S2SV_ModEnd> <S2SV_ModStart> 1268 <S2SV_ModEnd> <S2SV_ModStart> 500 <S2SV_ModEnd> <S2SV_ModStart> 1312 <S2SV_ModEnd> <S2SV_ModStart> 863 <S2SV_ModEnd> 
4447,<S2SV_StartBug> put_io_context ( p -> io_context ) ; <S2SV_EndBug> ,<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> ) exit_io_context ( p 
4448,"<S2SV_StartBug> void kvm_lapic_set_vapic_addr ( struct kvm_vcpu * vcpu , gpa_t vapic_addr ) <S2SV_EndBug> <S2SV_StartBug> vcpu -> arch . apic -> vapic_addr = vapic_addr ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if ( vapic_addr ) { if ( kvm_gfn_to_hva_cache_init ( vcpu -> kvm , & <S2SV_ModStart> vapic_cache , vapic_addr , sizeof ( u32 ) ) ) return - EINVAL ; <S2SV_ModEnd> <S2SV_ModStart> } else { <S2SV_ModEnd> <S2SV_ModStart> vcpu -> arch . apic -> vapic_addr = vapic_addr ; return 0 ; } "
4449,"<S2SV_StartBug> touch_file ( t -> stamp_path , true , USEC_INFINITY , UID_INVALID , GID_INVALID , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> MODE_INVALID <S2SV_ModEnd> 
4450,<S2SV_StartBug> skb -> sk = sk ; <S2SV_EndBug> ,<S2SV_ModStart> skb_orphan ( skb ) ; sock_hold ( sk ) ; <S2SV_ModStart> ; skb -> destructor = sock_efree 
4451,<S2SV_StartBug> return res ; <S2SV_EndBug> <S2SV_StartBug> return res ; <S2SV_EndBug> ,<S2SV_ModStart> goto err_add_port <S2SV_ModEnd> <S2SV_ModStart> err_add_port : hsr_del_node ( & hsr -> self_node_db ) ; 
4452,"<S2SV_StartBug> vpx_memset ( cm -> above_context , 0 , <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> 
4453,<S2SV_StartBug> if ( tpgt > TL_TPGS_PER_HBA ) { <S2SV_EndBug> ,<S2SV_ModStart> >= <S2SV_ModEnd> 
4454,"<S2SV_StartBug> int insn_idx , int prev_insn_idx ) <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> ","<S2SV_ModStart> , bool speculative <S2SV_ModStart> ; elem -> st . speculative |= speculative "
4455,"<S2SV_StartBug> vpx_memset ( ybf -> y_buffer - 1 - ybf -> y_stride , 127 , ybf -> y_width + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ybf -> u_buffer - 1 - ybf -> uv_stride , 127 , ybf -> uv_width + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ybf -> v_buffer - 1 - ybf -> uv_stride , 127 , ybf -> uv_width + 5 ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
4456,"<S2SV_StartBug> SAS_DPRINTK ( ""DONE<S2SV_blank>DISCOVERY<S2SV_blank>on<S2SV_blank>port<S2SV_blank>%d,<S2SV_blank>pid:%d,<S2SV_blank>result:%d\\n"" , port -> id , <S2SV_EndBug> ",<S2SV_ModStart> sas_probe_devices ( port ) ; 
4457,<S2SV_StartBug> if ( key_bytes_len < GROUP_KEY_MIN_LEN || key_bytes_len > eapol_len - sizeof ( EAPOL_RSN_KEY ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) || ( eapol_len < sizeof ( EAPOL_RSN_KEY ) ) || ( <S2SV_ModEnd> <S2SV_ModStart> ) 
4458,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> else if ( auth_end == FIND_AUTH_END_ABORT ) { buffer_unref ( buffer ) ; if ( client -> proxy -> log_messages ) g_print ( ""Invalid<S2SV_blank>AUTH<S2SV_blank>line,<S2SV_blank>aborting\\n"" ) ; side_closed ( side ) ; break ; } "
4459,<S2SV_StartBug> int error ; <S2SV_EndBug> <S2SV_StartBug> if ( ext2_xattr_cache_insert ( bh ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ext2_xattr_cache_insert ( bh ) ) <S2SV_EndBug> ,"<S2SV_ModStart> ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( inode -> i_sb ) -> s_mb_cache <S2SV_ModStart> ext2_mb_cache , <S2SV_ModStart> ext2_mb_cache , "
4460,"<S2SV_StartBug> av_bprint_get_buffer ( bp , 1 , & buf , & buf_size ) ; <S2SV_EndBug> <S2SV_StartBug> zstream . avail_out = buf_size ; <S2SV_EndBug> ","<S2SV_ModStart> 2 , & buf , & buf_size ) ; if ( buf_size < 2 <S2SV_ModEnd> <S2SV_ModStart> - 1 "
4461,<S2SV_StartBug> pid_t my_pid = getpid ( ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( g_settings_privatereports ) { if ( world_readable_dump ) log ( ""Not<S2SV_blank>going<S2SV_blank>to<S2SV_blank>make<S2SV_blank>dump<S2SV_blank>directories<S2SV_blank>world<S2SV_blank>readable<S2SV_blank>because<S2SV_blank>PrivateReports<S2SV_blank>is<S2SV_blank>on"" ) ; mode = DEFAULT_DUMP_DIR_MODE ; my_euid = 0 ; } "
4462,"<S2SV_StartBug> FILE * file ; <S2SV_EndBug> <S2SV_StartBug> file = fopen ( stats_file , ""w"" ) ; <S2SV_EndBug> <S2SV_StartBug> for ( e = LIST_HEAD ( l ) ; e ; ELEMENT_NEXT ( e ) ) { <S2SV_EndBug> ","<S2SV_ModStart> = fopen_safe <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! file ) { log_message ( LOG_INFO , ""Can\'t<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>(%d:<S2SV_blank>%s)"" , stats_file , errno , strerror ( errno ) ) ; return ; } LIST_FOREACH ( vrrp_data -> vrrp , vrrp , e ) { <S2SV_ModEnd> "
4463,<S2SV_StartBug> if ( vdaux < 1 || ( char * ) UINTPTR_MAX - vstart < vdaux ) { <S2SV_EndBug> ,<S2SV_ModStart> vstart + vdaux < vstart <S2SV_ModEnd> 
4464,"<S2SV_StartBug> ND_TCHECK2 ( pptr [ 0 ] , BGP_VPN_RD_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> pptr += BGP_VPN_RD_LEN ; <S2SV_EndBug> ",<S2SV_ModStart> + 4 <S2SV_ModStart> + 4 
4465,<S2SV_StartBug> prefix = report [ i ] ; <S2SV_EndBug> <S2SV_StartBug> case 3 : <S2SV_EndBug> ,"<S2SV_ModStart> ++ ] ; size = ( 1U << PREF_SIZE ( prefix ) ) >> 1 ; if ( i + size > length ) { dev_err ( ddev , ""Not<S2SV_blank>enough<S2SV_blank>data<S2SV_blank>(need<S2SV_blank>%d,<S2SV_blank>have<S2SV_blank>%d)\\n"" , i + size , length ) ; break ; } <S2SV_ModEnd> <S2SV_ModStart> 4 : <S2SV_ModEnd> "
4466,<S2SV_StartBug> const char * bufptr ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( cnt < 0 ) { jas_deprecated ( ""negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_write"" ) ; } "
4467,<S2SV_StartBug> if ( ALWAYS ( p -> pEList ) ) { <S2SV_EndBug> ,<S2SV_ModStart> p -> selFlags & SF_View ) return WRC_Prune ; if ( 
4468,"<S2SV_StartBug> ssize_t ret = write ( fd , ev , sizeof ( * ev ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
4469,"<S2SV_StartBug> if ( ! LookupString ( symInterpretMatchMaskNames , pred_txt , pred_rtrn ) ) { <S2SV_EndBug> ",<S2SV_ModStart> || ! expr -> action . args 
4470,"<S2SV_StartBug> keylen = utf8s_to_utf16s ( key_name , strlen ( key_name ) , <S2SV_EndBug> <S2SV_StartBug> ( wchar_t * ) kvp_data -> data . key ) ; <S2SV_EndBug> <S2SV_StartBug> valuelen = utf8s_to_utf16s ( value , strlen ( value ) , <S2SV_EndBug> <S2SV_StartBug> ( wchar_t * ) kvp_data -> data . value ) ; <S2SV_EndBug> ","<S2SV_ModStart> UTF16_HOST_ENDIAN , <S2SV_ModStart> , HV_KVP_EXCHANGE_MAX_KEY_SIZE / 2 <S2SV_ModStart> UTF16_HOST_ENDIAN , <S2SV_ModStart> , HV_KVP_EXCHANGE_MAX_VALUE_SIZE / 2 "
4471,"<S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug> ","<S2SV_ModStart> , XEN_NETIF_RSP_OKAY "
4472,<S2SV_StartBug> snd_usbmidi_free ( umidi ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4473,"<S2SV_StartBug> struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; <S2SV_EndBug> <S2SV_StartBug> env -> insn_aux_data = new_data ; <S2SV_EndBug> ",<S2SV_ModStart> ; int i <S2SV_ModStart> for ( i = off ; i < off + cnt - 1 ; i ++ ) new_data [ i ] . seen = true ; 
4474,"<S2SV_StartBug> # ifdef __linux__ <S2SV_EndBug> <S2SV_StartBug> sun . sun_path [ 0 ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> sun_len = offsetof ( struct sockaddr_un , sun_path ) + strlen ( path ) + 1 ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sizeof <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> 
4475,"<S2SV_StartBug> return try_then_request_module ( __crypto_lookup_template ( name ) , ""%s"" , <S2SV_EndBug> ","<S2SV_ModStart> ""crypto-%s"" <S2SV_ModEnd> "
4476,"<S2SV_StartBug> SET_NETDEV_DEV ( dev , dmdev ) ; <S2SV_EndBug> ",<S2SV_ModStart> dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; 
4477,"<S2SV_StartBug> int var_index ; <S2SV_EndBug> <S2SV_StartBug> # line 2619 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 63 : <S2SV_EndBug> <S2SV_StartBug> # line 2658 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 64 : <S2SV_EndBug> <S2SV_StartBug> # line 2741 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 65 : <S2SV_EndBug> <S2SV_StartBug> # line 2775 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 66 : <S2SV_EndBug> <S2SV_StartBug> # line 2828 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1248 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> yr_parser_emit ( yyscanner , OP_NOT , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> # line 2848 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1254 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 2878 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 70 : <S2SV_EndBug> <S2SV_StartBug> # line 2918 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 71 : <S2SV_EndBug> <S2SV_StartBug> # line 2947 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 72 : <S2SV_EndBug> <S2SV_StartBug> # line 2987 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 73 : <S2SV_EndBug> <S2SV_StartBug> # line 3000 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 74 : <S2SV_EndBug> <S2SV_StartBug> # line 3013 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 75 : <S2SV_EndBug> <S2SV_StartBug> # line 3026 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 76 : <S2SV_EndBug> <S2SV_StartBug> # line 3039 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 77 : <S2SV_EndBug> <S2SV_StartBug> # line 3052 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 78 : <S2SV_EndBug> <S2SV_StartBug> # line 3065 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1435 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3081 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1443 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> { ( yyval . integer ) = INTEGER_SET_RANGE ; } <S2SV_EndBug> <S2SV_StartBug> # line 1449 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3115 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 84 : <S2SV_EndBug> <S2SV_StartBug> # line 3131 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 85 : <S2SV_EndBug> <S2SV_StartBug> # line 3146 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 88 : <S2SV_EndBug> <S2SV_StartBug> # line 3166 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 91 : <S2SV_EndBug> <S2SV_StartBug> # line 3177 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 92 : <S2SV_EndBug> <S2SV_StartBug> # line 3188 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1544 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> yr_parser_emit_with_arg ( yyscanner , OP_PUSH , 1 , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1552 ""grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 3212 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 97 : <S2SV_EndBug> <S2SV_StartBug> # line 3226 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 98 : <S2SV_EndBug> <S2SV_StartBug> # line 3244 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 99 : <S2SV_EndBug> <S2SV_StartBug> # line 3264 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 100 : <S2SV_EndBug> <S2SV_StartBug> # line 3278 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 101 : <S2SV_EndBug> <S2SV_StartBug> # line 3291 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 102 : <S2SV_EndBug> <S2SV_StartBug> # line 3320 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 103 : <S2SV_EndBug> <S2SV_StartBug> # line 3336 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 104 : <S2SV_EndBug> <S2SV_StartBug> # line 3352 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 105 : <S2SV_EndBug> <S2SV_StartBug> # line 3372 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 106 : <S2SV_EndBug> <S2SV_StartBug> # line 3388 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 107 : <S2SV_EndBug> <S2SV_StartBug> # line 3408 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 108 : <S2SV_EndBug> <S2SV_StartBug> # line 3457 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 109 : <S2SV_EndBug> <S2SV_StartBug> # line 3480 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 110 : <S2SV_EndBug> <S2SV_StartBug> # line 3502 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 111 : <S2SV_EndBug> <S2SV_StartBug> # line 3524 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 112 : <S2SV_EndBug> <S2SV_StartBug> # line 3546 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 113 : <S2SV_EndBug> <S2SV_StartBug> # line 3576 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 114 : <S2SV_EndBug> <S2SV_StartBug> # line 3598 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 115 : <S2SV_EndBug> <S2SV_StartBug> # line 3612 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 116 : <S2SV_EndBug> <S2SV_StartBug> # line 3626 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 117 : <S2SV_EndBug> <S2SV_StartBug> # line 3640 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 118 : <S2SV_EndBug> <S2SV_StartBug> # line 3654 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 119 : <S2SV_EndBug> <S2SV_StartBug> # line 3668 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 120 : <S2SV_EndBug> <S2SV_StartBug> # line 3682 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> case 121 : <S2SV_EndBug> <S2SV_StartBug> # line 3690 ""grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 3694 ""grammar.c"" <S2SV_EndBug> ","<S2SV_ModStart> compiler -> loop_depth -- ; compiler -> loop_identifier [ compiler -> loop_depth ] = NULL ; } # line 2594 ""grammar.c"" break ; case 63 : # line 1024 ""grammar.y"" { <S2SV_ModStart> 2628 <S2SV_ModEnd> <S2SV_ModStart> 64 : # line 1054 <S2SV_ModEnd> <S2SV_ModStart> 2667 <S2SV_ModEnd> <S2SV_ModStart> 65 : # line 1089 <S2SV_ModEnd> <S2SV_ModStart> 2750 <S2SV_ModEnd> <S2SV_ModStart> 66 : # line 1168 <S2SV_ModEnd> <S2SV_ModStart> 2784 <S2SV_ModEnd> <S2SV_ModStart> 67 : # line 1198 <S2SV_ModEnd> <S2SV_ModStart> 2837 <S2SV_ModEnd> <S2SV_ModStart> 1247 <S2SV_ModEnd> <S2SV_ModStart> OP_OF <S2SV_ModEnd> <S2SV_ModStart> 2847 <S2SV_ModEnd> <S2SV_ModStart> 1253 ""grammar.y"" { yr_parser_emit ( yyscanner , OP_NOT , NULL ) ; ( yyval . expression ) . type = EXPRESSION_TYPE_BOOLEAN ; } # line 2857 ""grammar.c"" break ; case 70 : # line 1259 <S2SV_ModEnd> <S2SV_ModStart> 2887 <S2SV_ModEnd> <S2SV_ModStart> 71 : # line 1285 <S2SV_ModEnd> <S2SV_ModStart> 2927 <S2SV_ModEnd> <S2SV_ModStart> 72 : # line 1321 <S2SV_ModEnd> <S2SV_ModStart> 2956 <S2SV_ModEnd> <S2SV_ModStart> 73 : # line 1346 <S2SV_ModEnd> <S2SV_ModStart> 2996 <S2SV_ModEnd> <S2SV_ModStart> 74 : # line 1382 <S2SV_ModEnd> <S2SV_ModStart> 3009 <S2SV_ModEnd> <S2SV_ModStart> 75 : # line 1391 <S2SV_ModEnd> <S2SV_ModStart> 3022 <S2SV_ModEnd> <S2SV_ModStart> 76 : # line 1400 <S2SV_ModEnd> <S2SV_ModStart> 3035 <S2SV_ModEnd> <S2SV_ModStart> 77 : # line 1409 <S2SV_ModEnd> <S2SV_ModStart> 3048 <S2SV_ModEnd> <S2SV_ModStart> 78 : # line 1418 <S2SV_ModEnd> <S2SV_ModStart> 3061 <S2SV_ModEnd> <S2SV_ModStart> 79 : # line 1427 <S2SV_ModEnd> <S2SV_ModStart> 3074 <S2SV_ModEnd> <S2SV_ModStart> 1436 ""grammar.y"" { ( yyval . expression ) = ( yyvsp [ 0 ] . expression ) ; } # line 3082 ""grammar.c"" break ; case 81 : # line 1440 <S2SV_ModEnd> <S2SV_ModStart> 3090 <S2SV_ModEnd> <S2SV_ModStart> 1447 <S2SV_ModEnd> <S2SV_ModStart> INTEGER_SET_ENUMERATION ; } # line 3096 <S2SV_ModEnd> <S2SV_ModStart> 1448 ""grammar.y"" { ( yyval . integer ) = INTEGER_SET_RANGE ; } # line 3102 ""grammar.c"" break ; case 84 : # line 1454 <S2SV_ModEnd> <S2SV_ModStart> 3124 <S2SV_ModEnd> <S2SV_ModStart> 85 : # line 1476 <S2SV_ModEnd> <S2SV_ModStart> 3140 <S2SV_ModEnd> <S2SV_ModStart> 86 : # line 1488 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 87 : # line 1503 ""grammar.y"" { yr_parser_emit_with_arg ( yyscanner , OP_PUSH , UNDEFINED , NULL , NULL ) ; } # line 3164 ""grammar.c"" break ; case 89 : # line 1509 <S2SV_ModEnd> <S2SV_ModStart> 3175 <S2SV_ModEnd> <S2SV_ModStart> 92 : # line 1526 <S2SV_ModEnd> <S2SV_ModStart> 3186 <S2SV_ModEnd> <S2SV_ModStart> 93 : # line 1533 <S2SV_ModEnd> <S2SV_ModStart> 3197 <S2SV_ModEnd> <S2SV_ModStart> 1545 <S2SV_ModEnd> <S2SV_ModStart> UNDEFINED , NULL , NULL ) ; } # line 3205 <S2SV_ModEnd> <S2SV_ModStart> 1549 ""grammar.y"" { yr_parser_emit_with_arg ( yyscanner , OP_PUSH , 1 , NULL , NULL ) ; } # line 3213 ""grammar.c"" break ; case 97 : # line 1557 <S2SV_ModEnd> <S2SV_ModStart> 3221 <S2SV_ModEnd> <S2SV_ModStart> 98 : # line 1561 <S2SV_ModEnd> <S2SV_ModStart> 3235 <S2SV_ModEnd> <S2SV_ModStart> 99 : # line 1571 <S2SV_ModEnd> <S2SV_ModStart> 3253 <S2SV_ModEnd> <S2SV_ModStart> 100 : # line 1585 <S2SV_ModEnd> <S2SV_ModStart> 3273 <S2SV_ModEnd> <S2SV_ModStart> 101 : # line 1601 <S2SV_ModEnd> <S2SV_ModStart> 3287 <S2SV_ModEnd> <S2SV_ModStart> 102 : # line 1611 <S2SV_ModEnd> <S2SV_ModStart> 3300 <S2SV_ModEnd> <S2SV_ModStart> 103 : # line 1620 <S2SV_ModEnd> <S2SV_ModStart> 3329 <S2SV_ModEnd> <S2SV_ModStart> 104 : # line 1645 <S2SV_ModEnd> <S2SV_ModStart> 3345 <S2SV_ModEnd> <S2SV_ModStart> 105 : # line 1657 <S2SV_ModEnd> <S2SV_ModStart> 3361 <S2SV_ModEnd> <S2SV_ModStart> 106 : # line 1669 <S2SV_ModEnd> <S2SV_ModStart> 3381 <S2SV_ModEnd> <S2SV_ModStart> 107 : # line 1685 <S2SV_ModEnd> <S2SV_ModStart> 3397 <S2SV_ModEnd> <S2SV_ModStart> 108 : # line 1697 <S2SV_ModEnd> <S2SV_ModStart> 3417 <S2SV_ModEnd> <S2SV_ModStart> 109 : # line 1713 <S2SV_ModEnd> <S2SV_ModStart> 3466 <S2SV_ModEnd> <S2SV_ModStart> 110 : # line 1758 <S2SV_ModEnd> <S2SV_ModStart> 3489 <S2SV_ModEnd> <S2SV_ModStart> 111 : # line 1777 <S2SV_ModEnd> <S2SV_ModStart> 3511 <S2SV_ModEnd> <S2SV_ModStart> 112 : # line 1795 <S2SV_ModEnd> <S2SV_ModStart> 3533 <S2SV_ModEnd> <S2SV_ModStart> 113 : # line 1813 <S2SV_ModEnd> <S2SV_ModStart> 3555 <S2SV_ModEnd> <S2SV_ModStart> 114 : # line 1831 <S2SV_ModEnd> <S2SV_ModStart> 3585 <S2SV_ModEnd> <S2SV_ModStart> 115 : # line 1857 <S2SV_ModEnd> <S2SV_ModStart> 3607 <S2SV_ModEnd> <S2SV_ModStart> 116 : # line 1875 <S2SV_ModEnd> <S2SV_ModStart> 3621 <S2SV_ModEnd> <S2SV_ModStart> 117 : # line 1885 <S2SV_ModEnd> <S2SV_ModStart> 3635 <S2SV_ModEnd> <S2SV_ModStart> 118 : # line 1895 <S2SV_ModEnd> <S2SV_ModStart> 3649 <S2SV_ModEnd> <S2SV_ModStart> 119 : # line 1905 <S2SV_ModEnd> <S2SV_ModStart> 3663 <S2SV_ModEnd> <S2SV_ModStart> 120 : # line 1915 <S2SV_ModEnd> <S2SV_ModStart> 3677 <S2SV_ModEnd> <S2SV_ModStart> 121 : # line 1925 <S2SV_ModEnd> <S2SV_ModStart> 3691 <S2SV_ModEnd> <S2SV_ModStart> 122 : # line 1935 <S2SV_ModEnd> <S2SV_ModStart> 3699 <S2SV_ModEnd> <S2SV_ModStart> 3703 <S2SV_ModEnd> "
4478,"<S2SV_StartBug> rpc_delay ( task , 3 * HZ ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( task -> tk_rebind_retry == 0 ) break ; task -> tk_rebind_retry -- ; 
4479,"<S2SV_StartBug> gboolean devel ; <S2SV_EndBug> <S2SV_StartBug> child_setup_data . instance_id_fd = - 1 ; <S2SV_EndBug> <S2SV_StartBug> g_ptr_array_add ( flatpak_argv , g_strdup ( extra_args [ i ] ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; g_autoptr ( GString ) env_string = g_string_new ( """" ) <S2SV_ModStart> = - 1 ; child_setup_data . env_fd <S2SV_ModStart> { if ( g_str_has_prefix ( extra_args [ i ] , ""--env="" ) ) { const char * var_val = extra_args [ i ] + strlen ( ""--env="" ) ; if ( var_val [ 0 ] == '\\0' || var_val [ 0 ] == '=' ) { g_warning ( ""Environment<S2SV_blank>variable<S2SV_blank>in<S2SV_blank>extra-args<S2SV_blank>has<S2SV_blank>empty<S2SV_blank>name"" ) ; continue ; } if ( strchr ( var_val , '=' ) == NULL ) { g_warning ( ""Environment<S2SV_blank>variable<S2SV_blank>in<S2SV_blank>extra-args<S2SV_blank>has<S2SV_blank>no<S2SV_blank>value"" ) ; continue ; } g_string_append ( env_string , var_val ) ; g_string_append_c ( env_string , '\\0' ) ; } else { <S2SV_ModStart> ) ) ; } } } if ( env_string -> len > 0 ) { g_auto ( GLnxTmpfile ) env_tmpf = { 0 , } ; if ( ! flatpak_buffer_to_sealed_memfd_or_tmpfile ( & env_tmpf , ""environ"" , env_string -> str , env_string -> len , & error ) ) { g_dbus_method_invocation_return_gerror ( invocation , error ) ; return G_DBUS_METHOD_INVOCATION_HANDLED ; } child_setup_data . env_fd = glnx_steal_fd ( & env_tmpf . fd ) ; g_ptr_array_add ( flatpak_argv , g_strdup_printf ( ""--env-fd=%d"" , child_setup_data . env_fd "
4480,"<S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> tty_encode_baud_rate ( tty , baud , baud ) ; <S2SV_EndBug> ","<S2SV_ModStart> { baud = min ( baud , 461550 ) ; <S2SV_ModStart> } "
4481,"<S2SV_StartBug> rcu_read_lock ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! dev && capable ( CAP_NET_ADMIN ) ) <S2SV_EndBug> <S2SV_StartBug> request_module ( ""%s"" , name ) ; <S2SV_EndBug> ","<S2SV_ModStart> int no_module ; <S2SV_ModStart> no_module = ! dev ; if ( no_module <S2SV_ModEnd> <S2SV_ModStart> no_module = request_module ( ""netdev-%s"" , name ) ; if ( no_module && capable ( CAP_SYS_MODULE ) ) { if ( ! <S2SV_ModStart> ) pr_err ( ""Loading<S2SV_blank>kernel<S2SV_blank>module<S2SV_blank>for<S2SV_blank>a<S2SV_blank>network<S2SV_blank>device<S2SV_blank>"" ""with<S2SV_blank>CAP_SYS_MODULE<S2SV_blank>(deprecated).<S2SV_blank><S2SV_blank>Use<S2SV_blank>CAP_NET_ADMIN<S2SV_blank>and<S2SV_blank>alias<S2SV_blank>netdev-%s<S2SV_blank>"" ""instead\\n"" , name ) ; } } <S2SV_ModEnd> "
4482,<S2SV_StartBug> InitializeCriticalSection ( & finalizer_mutex ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; InitializeCriticalSection ( & reference_queue_mutex 
4483,<S2SV_StartBug> StringValue ( data ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! RTEST ( rb_attr_get ( self , id_key_set ) ) ) ossl_raise ( eCipherError , ""key<S2SV_blank>not<S2SV_blank>set"" ) ; "
4484,"<S2SV_StartBug> vpx_memcpy ( & local_next_frame , next_frame , sizeof ( * next_frame ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> 
4485,"<S2SV_StartBug> if ( ! file || ( iovcnt && ! iov ) || iovcnt < 0 || iovcnt > OE_IOV_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( iov , iovcnt , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> OE_RAISE_ERRNO ( OE_ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ","<S2SV_ModStart> size_t data_size = 0 ; <S2SV_ModStart> , & data_size <S2SV_ModStart> ) ; if ( data_size > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> if ( ret > ( ssize_t ) data_size ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } "
4486,"<S2SV_StartBug> VPX_MEMSET_L ( x , 0 , num * size ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> 
4487,"<S2SV_StartBug> if ( TYPE ( CHILD ( n , i ) ) == COMMA ) <S2SV_EndBug> ",<S2SV_ModStart> i < NCH ( n ) && 
4488,<S2SV_StartBug> char * authn_header = oidc_cfg_dir_authn_header ( r ) ; <S2SV_EndBug> ,<S2SV_ModStart> oidc_scrub_headers ( r ) ; 
4489,<S2SV_StartBug> int points ; <S2SV_EndBug> ,<S2SV_ModStart> long <S2SV_ModEnd> 
4490,"<S2SV_StartBug> struct dlist * kl = sync_parseline ( imapd_in ) ; <S2SV_EndBug> <S2SV_StartBug> struct dlist * kl = sync_parseline ( imapd_in ) ; <S2SV_EndBug> <S2SV_StartBug> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( ! strcmp ( cmd . s , ""Syncrestore"" ) ) { <S2SV_EndBug> ",<S2SV_ModStart> if ( ! imapd_userisadmin ) goto badcmd ; <S2SV_ModStart> if ( ! imapd_userisadmin ) goto badcmd ; <S2SV_ModStart> ! imapd_userisadmin ) goto badcmd ; if ( <S2SV_ModStart> if ( ! imapd_userisadmin ) goto badcmd ; 
4491,"<S2SV_StartBug> if ( copy_from_user ( & u_ent . id , & uent -> id , sizeof ( u_ent . id ) ) ) <S2SV_EndBug> ","<S2SV_ModStart> memset ( & u_ent , 0 , sizeof ( u_ent ) ) ; "
4492,<S2SV_StartBug> if ( keyring_key -> type != & key_type_logon ) { <S2SV_EndBug> <S2SV_StartBug> down_read ( & keyring_key -> sem ) ; <S2SV_EndBug> <S2SV_StartBug> ukp = user_key_payload ( keyring_key ) ; <S2SV_EndBug> ,"<S2SV_ModStart> down_read ( & keyring_key -> sem ) ; <S2SV_ModStart> ukp = user_key_payload ( keyring_key ) ; if ( ukp -> datalen != sizeof ( struct fscrypt_key ) ) { res = - EINVAL ; goto out ; } master_key = ( struct fscrypt_key * ) ukp -> data ; BUILD_BUG_ON ( FS_AES_128_ECB_KEY_SIZE != FS_KEY_DERIVATION_NONCE_SIZE ) ; if ( master_key -> size != FS_AES_256_XTS_KEY_SIZE ) { printk_once ( KERN_WARNING ""%s:<S2SV_blank>key<S2SV_blank>size<S2SV_blank>incorrect:<S2SV_blank>%d\\n"" , __func__ , master_key -> size ) ; res = - ENOKEY ; goto out ; } res = derive_key_aes ( ctx -> nonce , master_key -> raw , raw_key ) ; out : up_read <S2SV_ModEnd> <S2SV_ModStart> key_put ( keyring_key ) ; return <S2SV_ModEnd> "
4493,"<S2SV_StartBug> # line 495 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 860 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 557 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 854 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 606 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 707 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 784 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 698 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 818 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 677 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 860 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 642 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 916 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 609 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 970 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 599 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1068 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 584 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1142 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 557 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1196 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 550 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1211 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 543 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1221 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 520 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1267 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 499 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> <S2SV_StartBug> # line 1311 ""ext/standard/var_unserializer.c"" <S2SV_EndBug> <S2SV_StartBug> # line 862 ""ext/standard/var_unserializer.re"" <S2SV_EndBug> ",<S2SV_ModStart> 496 <S2SV_ModEnd> <S2SV_ModStart> 861 <S2SV_ModEnd> <S2SV_ModStart> 558 <S2SV_ModEnd> <S2SV_ModStart> 855 <S2SV_ModEnd> <S2SV_ModStart> 607 <S2SV_ModEnd> <S2SV_ModStart> 708 <S2SV_ModEnd> <S2SV_ModStart> 785 <S2SV_ModEnd> <S2SV_ModStart> 699 <S2SV_ModEnd> <S2SV_ModStart> 819 <S2SV_ModEnd> <S2SV_ModStart> 678 <S2SV_ModEnd> <S2SV_ModStart> 861 <S2SV_ModEnd> <S2SV_ModStart> 643 <S2SV_ModEnd> <S2SV_ModStart> 917 <S2SV_ModEnd> <S2SV_ModStart> 610 <S2SV_ModEnd> <S2SV_ModStart> 971 <S2SV_ModEnd> <S2SV_ModStart> 600 <S2SV_ModEnd> <S2SV_ModStart> 1069 <S2SV_ModEnd> <S2SV_ModStart> 585 <S2SV_ModEnd> <S2SV_ModStart> 1143 <S2SV_ModEnd> <S2SV_ModStart> 558 <S2SV_ModEnd> <S2SV_ModStart> 1197 <S2SV_ModEnd> <S2SV_ModStart> 551 <S2SV_ModEnd> <S2SV_ModStart> 1212 <S2SV_ModEnd> <S2SV_ModStart> 544 <S2SV_ModEnd> <S2SV_ModStart> 1222 <S2SV_ModEnd> <S2SV_ModStart> 521 <S2SV_ModEnd> <S2SV_ModStart> 1268 <S2SV_ModEnd> <S2SV_ModStart> 500 <S2SV_ModEnd> <S2SV_ModStart> 1312 <S2SV_ModEnd> <S2SV_ModStart> 863 <S2SV_ModEnd> 
4494,<S2SV_StartBug> unsigned fat_length ; <S2SV_EndBug> <S2SV_StartBug> fs -> fat_start = ( off_t ) le16toh ( b . reserved ) * logical_sector_size ; <S2SV_EndBug> <S2SV_StartBug> data_size = ( off_t ) total_sectors * logical_sector_size - fs -> data_start ; <S2SV_EndBug> ,"<S2SV_ModStart> off_t <S2SV_ModEnd> <S2SV_ModStart> if ( ! fat_length ) die ( ""FAT<S2SV_blank>size<S2SV_blank>is<S2SV_blank>zero."" ) ; <S2SV_ModStart> ; if ( data_size < fs -> cluster_size ) die ( ""Filesystem<S2SV_blank>has<S2SV_blank>no<S2SV_blank>space<S2SV_blank>for<S2SV_blank>any<S2SV_blank>data<S2SV_blank>clusters"" ) "
4495,"<S2SV_StartBug> if ( sk_filter ( sk , skb ) ) <S2SV_EndBug> <S2SV_StartBug> goto discard_and_relse ; <S2SV_EndBug> ",<S2SV_ModStart> tcp_filter <S2SV_ModEnd> <S2SV_ModStart> ; th = ( const struct tcphdr * ) skb -> data ; iph = ip_hdr ( skb ) 
4496,<S2SV_StartBug> while ( lp -> s != NULL ) { <S2SV_EndBug> <S2SV_StartBug> l2info -> bundle = l2info -> cookie [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> l2info -> bundle = l2info -> cookie [ 1 ] ; <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> ND_TCHECK2 ( p [ 0 ] , 2 ) ; <S2SV_ModStart> ND_TCHECK2 ( p [ 0 ] , 2 ) ; "
4497,<S2SV_StartBug> return ep ; <S2SV_EndBug> ,<S2SV_ModStart> global_ep <S2SV_ModEnd> 
4498,<S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> ,<S2SV_ModStart> ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> <S2SV_ModStart> ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> <S2SV_ModStart> ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> <S2SV_ModStart> ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> <S2SV_ModStart> ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> <S2SV_ModStart> ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> <S2SV_ModStart> ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> 
4499,"<S2SV_StartBug> if ( ixheaacd_real_synth_fft != NULL ) <S2SV_EndBug> <S2SV_StartBug> ( * ixheaacd_real_synth_fft ) ( synth_buf_r , synth_out , synth_size * 2 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ptr_hbe_txposer -> <S2SV_ModStart> ( ptr_hbe_txposer -> ixheaacd_real_synth_fft ) ) <S2SV_ModEnd> 
4500,"<S2SV_StartBug> if ( kvm_apic_get_reg ( apic , APIC_TMICT ) == 0 ) <S2SV_EndBug> ",<S2SV_ModStart> == 0 || apic -> lapic_timer . period 
4501,"<S2SV_StartBug> if ( peekonly ) { <S2SV_EndBug> <S2SV_StartBug> memcpy ( msg , & msg_tmp , sizeof ( * msg ) ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy_fromio ( msg , bus -> m_pdwGetRing + curr_grp , space_rem ) ; <S2SV_EndBug> <S2SV_StartBug> sizeof ( * msg ) - space_rem ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy_fromio ( buf , bus -> m_pdwGetRing + sizeof ( * msg ) - <S2SV_EndBug> <S2SV_StartBug> } else if ( space_rem == sizeof ( * msg ) ) { <S2SV_EndBug> ","<S2SV_ModStart> memcpy ( msg , & msg_tmp , sizeof ( * msg ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd> <S2SV_ModStart> sizeof ( * msg ) - space_rem , buf_size ) ; } else if ( space_rem == sizeof ( * msg ) ) { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd> <S2SV_ModStart> buf_size ) ; } else { if ( buf ) { <S2SV_ModEnd> <S2SV_ModStart> curr_grp + sizeof ( * msg ) , space_rem - sizeof ( * msg ) ) ; memcpy_fromio ( buf + space_rem - sizeof ( * msg ) , bus -> m_pdwGetRing , bytes_to_read - space_rem ) ; } } } else { if ( buf ) memcpy_fromio ( buf , bus -> m_pdwGetRing + curr_grp + sizeof ( * msg ) , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4502,"<S2SV_StartBug> stream -> bufbase_ = JAS_CAST ( uchar * , buf ) ; <S2SV_EndBug> ",<S2SV_ModStart> jas_uchar <S2SV_ModEnd> 
4503,"<S2SV_StartBug> pipe -> bufs = kzalloc ( sizeof ( struct pipe_buffer ) * PIPE_DEF_BUFFERS , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> pipe -> buffers = PIPE_DEF_BUFFERS ; <S2SV_EndBug> <S2SV_StartBug> kfree ( pipe ) ; <S2SV_EndBug> ","<S2SV_ModStart> unsigned long pipe_bufs = PIPE_DEF_BUFFERS ; struct user_struct * user = get_current_user ( ) ; if ( ! too_many_pipe_buffers_hard ( user ) ) { if ( too_many_pipe_buffers_soft ( user ) ) pipe_bufs = 1 ; <S2SV_ModStart> pipe_bufs <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> pipe_bufs ; pipe -> user = user ; account_pipe_buffers ( pipe , 0 , pipe_bufs ) <S2SV_ModEnd> <S2SV_ModStart> free_uid ( user ) ; "
4504,"<S2SV_StartBug> memcpy ( devinfo . driver_name , dev -> driver -> driver_name , COMEDI_NAMELEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( devinfo . board_name , dev -> board_name , COMEDI_NAMELEN ) ; <S2SV_EndBug> ",<S2SV_ModStart> strlcpy <S2SV_ModEnd> <S2SV_ModStart> strlcpy <S2SV_ModEnd> 
4505,<S2SV_StartBug> blk_cleanup_queue ( cd -> disk -> queue ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! cd -> disk ) continue ; 
4506,"<S2SV_StartBug> if ( ! memcmp ( buf + 5 , ""include"" , 7 ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( ! memcmp ( buf + 5 , ""exec"" , 4 ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ( len > 12 ) && <S2SV_ModStart> ( len > 9 ) && 
4507,<S2SV_StartBug> if ( <S2SV_EndBug> ,<S2SV_ModStart> p -> replacement_session_keyring = NULL ; 
4508,"<S2SV_StartBug> if ( klass && ! is_entity ) <S2SV_EndBug> <S2SV_StartBug> error = dwg_encode_UNKNOWN_OBJ ( dat , obj ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( klass ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> dwg_encode_UNKNOWN_ENT ( dat , obj ) ; else error = <S2SV_ModStart>  <S2SV_ModEnd> "
4509,"<S2SV_StartBug> r_buf_set_bytes ( tbuf , buf , sz ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! tbuf ) { return NULL ; } 
4510,"<S2SV_StartBug> guint32 off = offset ; <S2SV_EndBug> <S2SV_StartBug> DebugLog ( ( ""parse_wbxml_attr<S2SV_blank>(level<S2SV_blank>=<S2SV_blank>%u,<S2SV_blank>offset<S2SV_blank>=<S2SV_blank>%u)\\n"" , level , offset ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , last_off <S2SV_ModStart> ; last_off = off <S2SV_ModStart> if ( off < last_off ) { THROW ( ReportedBoundsError ) ; } last_off = off ; "
4511,"<S2SV_StartBug> u_char showspi , showdata , showsomedata ; <S2SV_EndBug> <S2SV_StartBug> showdata = 0 ; <S2SV_EndBug> <S2SV_StartBug> showsomedata = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( 3 < ndo -> ndo_vflag ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( showdata || ( showsomedata && ep - cp < 30 ) ) && cp < ep ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( showsomedata && cp < ep ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ike_show_somedata ( ndo , cp , ep ) ) goto trunc ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cp < ep ) { if ( <S2SV_ModEnd> <S2SV_ModStart> > 3 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } 
4512,<S2SV_StartBug> if ( gf -> file && gf -> file -> device ) <S2SV_EndBug> <S2SV_StartBug> free ( gf -> file -> device -> disk ) ; <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> } 
4513,<S2SV_StartBug> # ifndef OPENSSL_NO_COMP <S2SV_EndBug> ,<S2SV_ModStart> if OPENSSL_VERSION_NUMBER >= 0x10101000L print_tmp_key ( c -> ssl ) ; # endif # 
4514,"<S2SV_StartBug> unregister_savevm ( DEVICE ( s ) , ""stellaris_enet"" , s ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4515,<S2SV_StartBug> if ( nla_len ( rp ) < ulen || xfrm_replay_state_esn_len ( replay_esn ) != ulen ) <S2SV_EndBug> ,<S2SV_ModStart> || replay_esn -> bmp_len != up -> bmp_len 
4516,<S2SV_StartBug> if ( packet -> size + length > MT_PACKET_LEN ) { <S2SV_EndBug> ,<S2SV_ModStart> length > MT_PACKET_LEN - <S2SV_ModStart>  <S2SV_ModEnd> 
4517,<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> LAYER_CONTEXT * const lc = get_layer_context ( & cpi -> svc ) ; <S2SV_EndBug> <S2SV_StartBug> lc -> starting_buffer_level = oxcf -> starting_buffer_level ; <S2SV_EndBug> <S2SV_StartBug> lc -> framerate = cpi -> output_framerate ; <S2SV_EndBug> ,<S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> alt_ref_source <S2SV_ModEnd> <S2SV_ModStart> alt_ref_source <S2SV_ModEnd> 
4518,<S2SV_StartBug> struct br_mdb_entry entry ; <S2SV_EndBug> ,"<S2SV_ModStart> ; memset ( & entry , 0 , sizeof ( entry ) ) "
4519,<S2SV_StartBug> case RAPTOR_OPTION_RELATIVE_URIS : <S2SV_EndBug> ,<S2SV_ModStart> RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES : case 
4520,<S2SV_StartBug> if ( enable_ertm ) <S2SV_EndBug> ,<S2SV_ModStart> case L2CAP_MODE_STREAMING : 
4521,"<S2SV_StartBug> if ( vp9_segfeature_active ( & cpi -> common . seg , 1 , SEG_LVL_REF_FRAME ) ) { <S2SV_EndBug> ",<S2SV_ModStart> segfeature_active <S2SV_ModEnd> 
4522,"<S2SV_StartBug> slapi_send_ldap_result ( pb , LDAP_INAPPROPRIATE_AUTH , NULL , <S2SV_EndBug> ","<S2SV_ModStart> slapi_pblock_set ( pb , SLAPI_PB_RESULT_TEXT , ""Entry<S2SV_blank>does<S2SV_blank>not<S2SV_blank>have<S2SV_blank>userpassword<S2SV_blank>set"" ) ; <S2SV_ModStart> LDAP_INVALID_CREDENTIALS , NULL , <S2SV_ModEnd> "
4523,<S2SV_StartBug> ps_dec -> u4_first_slice_in_pic = 2 ; <S2SV_EndBug> ,<S2SV_ModStart> 1 <S2SV_ModEnd> 
4524,"<S2SV_StartBug> # if defined ( MAGICKCORE_BUILD_MODULES ) || defined ( _DLL ) <S2SV_EndBug> <S2SV_StartBug> ""<S2SV_blank>HDRI"" <S2SV_EndBug> <S2SV_StartBug> ; <S2SV_EndBug> ","<S2SV_ModStart> MAGICKCORE_WINDOWS_SUPPORT ) && defined ( _DEBUG ) ""<S2SV_blank>Debug"" # endif # if defined ( MAGICKCORE_CIPHER_SUPPORT ) ""<S2SV_blank>Cipher"" <S2SV_ModEnd> <S2SV_ModStart> # endif # if defined ( MAGICKCORE_BUILD_MODULES ) || defined ( _DLL ) ""<S2SV_blank>Modules"" <S2SV_ModStart> # if defined ( ZERO_CONFIGURATION_SUPPORT ) ""<S2SV_blank>Zero-configuration"" # endif "
4525,"<S2SV_StartBug> if ( len == 1 ) <S2SV_EndBug> <S2SV_StartBug> return 8 ; <S2SV_EndBug> <S2SV_StartBug> uint32_t dlen = read_u32 ( data , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dlen > 0 ) <S2SV_EndBug> <S2SV_StartBug> return 8 + dlen ; <S2SV_EndBug> ","<S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> if ( dlen > ( 1 << 20 ) ) { error_report ( ""vnc:<S2SV_blank>client_cut_text<S2SV_blank>msg<S2SV_blank>payload<S2SV_blank>has<S2SV_blank>%u<S2SV_blank>bytes"" ""<S2SV_blank>which<S2SV_blank>exceeds<S2SV_blank>our<S2SV_blank>limit<S2SV_blank>of<S2SV_blank>1MB."" , dlen ) ; vnc_client_error ( vs ) ; break ; } <S2SV_ModStart> { <S2SV_ModStart> } "
4526,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> case EGRESS_VLAN_NAME : <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; * data && i < length ; i ++ , data ++ ) <S2SV_EndBug> ","<S2SV_ModStart> goto trunc ; <S2SV_ModEnd> <S2SV_ModStart> goto trunc ; if ( * data ) ND_PRINT ( ( ndo , ""Tag[%u]<S2SV_blank>"" , * data ) ) ; else ND_PRINT ( ( ndo , ""Tag[Unused]<S2SV_blank>"" ) ) ; data ++ ; length -- ; } <S2SV_ModEnd> <S2SV_ModStart> if ( length < 1 ) goto trunc ; <S2SV_ModStart> i < length && * data <S2SV_ModEnd> "
4527,<S2SV_StartBug> if ( ( s -> options & SSL_OP_EPHEMERAL_RSA ) <S2SV_EndBug> <S2SV_StartBug> s -> s3 -> tmp . use_rsa_tmp = 1 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> 0 ; if ( <S2SV_ModEnd> 
4528,"<S2SV_StartBug> int tlen ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( * vqp_common_header ) ; <S2SV_EndBug> <S2SV_StartBug> vqp_obj_type = EXTRACT_32BITS ( vqp_obj_tlv -> obj_type ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( vqp_obj_type ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%s<S2SV_blank>(0x%08x)"" , ipaddr_string ( ndo , tptr ) , EXTRACT_32BITS ( tptr ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> case VQP_OBJ_MAC_NULL : <S2SV_EndBug> ",<S2SV_ModStart> u_int <S2SV_ModEnd> <S2SV_ModStart> ; if ( sizeof ( struct vqp_common_header_t ) > tlen ) goto trunc <S2SV_ModStart> ND_TCHECK ( * vqp_obj_tlv ) ; if ( sizeof ( struct vqp_obj_tlv_t ) > tlen ) goto trunc ; <S2SV_ModStart> if ( vqp_obj_len > tlen ) goto trunc ; <S2SV_ModStart> if ( vqp_obj_len != 4 ) goto trunc ; <S2SV_ModStart> if ( vqp_obj_len != ETHER_ADDR_LEN ) goto trunc ; 
4529,"<S2SV_StartBug> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context , TPMI_ALG_HASH hashAlg , <S2SV_EndBug> <S2SV_StartBug> TPM2B_DIGEST tmpResult ; <S2SV_EndBug> <S2SV_StartBug> TPM_RC rval ; <S2SV_EndBug> <S2SV_StartBug> while ( resultKey -> t . size < bytes ) <S2SV_EndBug> <S2SV_StartBug> i_Swizzled = string_bytes_endian_convert_32 ( i ) ; <S2SV_EndBug> <S2SV_StartBug> bufferList [ j ++ ] = ( TPM2B_DIGEST * ) 0 ; <S2SV_EndBug> <S2SV_StartBug> rval = tpm_hmac ( sapi_context , hashAlg , key , ( TPM2B * * ) & ( bufferList [ 0 ] ) , & tmpResult ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rval != TPM_RC_SUCCESS ) <S2SV_EndBug> <S2SV_StartBug> return TSS2_SYS_RC_BAD_VALUE ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = TPM_RC_SUCCESS <S2SV_ModStart> const EVP_MD * md = tpm_algorithm_to_openssl_digest ( hashAlg ) ; if ( ! md ) { LOG_ERR ( ""Algorithm<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>for<S2SV_blank>hmac:<S2SV_blank>%x"" , hashAlg ) ; return TPM_RC_HASH ; } HMAC_CTX ctx ; HMAC_CTX_init ( & ctx ) ; int rc = HMAC_Init_ex ( & ctx , key -> buffer , key -> size , md , NULL ) ; if ( ! rc ) { LOG_ERR ( ""HMAC<S2SV_blank>Init<S2SV_blank>failed:<S2SV_blank>%s"" , ERR_error_string ( rc , NULL ) ) ; return TPM_RC_MEMORY ; } <S2SV_ModStart> TPM2B_DIGEST tmpResult ; <S2SV_ModStart> ] = ( TPM2B_DIGEST * ) 0 ; int c ; for ( c = 0 ; c < j ; c ++ ) { TPM2B_DIGEST * digest = bufferList [ c ] ; int rc = HMAC_Update ( & ctx , digest -> b . buffer , digest -> b . size ) ; if ( ! rc ) { LOG_ERR ( ""HMAC<S2SV_blank>Update<S2SV_blank>failed:<S2SV_blank>%s"" , ERR_error_string ( rc , NULL ) ) <S2SV_ModEnd> <S2SV_ModStart> TPM_RC_MEMORY ; goto err ; } } unsigned size = sizeof ( tmpResult . t . buffer ) ; int rc = HMAC_Final ( & ctx , tmpResult . t . buffer , & size <S2SV_ModEnd> <S2SV_ModStart> ! rc ) { LOG_ERR ( ""HMAC<S2SV_blank>Final<S2SV_blank>failed:<S2SV_blank>%s"" , ERR_error_string ( rc , NULL ) ) ; rval = TPM_RC_MEMORY ; goto err ; } tmpResult . t . size = size ; <S2SV_ModEnd> <S2SV_ModStart> rval = TSS2_SYS_RC_BAD_VALUE ; goto err ; } } resultKey -> t . size = bytes ; err : HMAC_CTX_cleanup ( & ctx ) ; return rval <S2SV_ModEnd> "
4530,<S2SV_StartBug> ND_TCHECK ( * ext ) ; <S2SV_EndBug> ,<S2SV_ModStart> k <S2SV_ModEnd> 
4531,<S2SV_StartBug> fid -> udf . generation = inode -> i_generation ; <S2SV_EndBug> ,<S2SV_ModStart> parent_partref = 0 ; fid -> udf . 
4532,"<S2SV_StartBug> BT_DBG ( ""sock<S2SV_blank>%p,<S2SV_blank>sk<S2SV_blank>%p"" , sock , sk ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; memset ( la , 0 , sizeof ( struct sockaddr_l2 ) "
4533,<S2SV_StartBug> client -> auth_user = client -> db -> auth_user ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4534,<S2SV_StartBug> if ( ( 1 != ps_dec_state -> u2_decode_header ) && ( ( bytes_remaining > 0 ) || ps_dec_state -> u1_flushfrm ) ) <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) && ( 1 == ps_dec_state -> u2_header_done ) 
4535,"<S2SV_StartBug> nfs4_close_state ( & data -> path , state , data -> o_arg . open_flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> fmode <S2SV_ModEnd> 
4536,"<S2SV_StartBug> static void duplicate_mode_info_in_sb ( VP9_COMMON * const cm , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4537,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4538,<S2SV_StartBug> if ( ctx -> might_cancel ) { <S2SV_EndBug> <S2SV_StartBug> spin_lock ( & cancel_lock ) ; <S2SV_EndBug> <S2SV_StartBug> list_del_rcu ( & ctx -> clist ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & cancel_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ctx -> <S2SV_ModStart> __timerfd_remove_cancel ( ctx <S2SV_ModEnd> <S2SV_ModStart> ctx -> <S2SV_ModStart>  <S2SV_ModEnd> 
4539,"<S2SV_StartBug> int xt_check_entry_offsets ( const void * base , <S2SV_EndBug> <S2SV_StartBug> const struct xt_entry_target * t ; <S2SV_EndBug> <S2SV_StartBug> const char * e = base ; <S2SV_EndBug> ","<S2SV_ModStart> , const char * elems <S2SV_ModStart> long size_of_base_struct = elems - ( const char * ) base ; <S2SV_ModStart> ; if ( target_offset < size_of_base_struct ) return - EINVAL "
4540,<S2SV_StartBug> int rc = 0 ; <S2SV_EndBug> <S2SV_StartBug> * uaddrlen = sizeof ( sllc ) ; <S2SV_EndBug> ,"<S2SV_ModStart> - EBADF ; memset ( & sllc , 0 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4541,<S2SV_StartBug> if ( arg_seccomp_block_secondary ) <S2SV_EndBug> ,"<S2SV_ModStart> create_empty_dir_as_root ( RUN_SECCOMP_DIR , 0755 ) ; "
4542,<S2SV_StartBug> int error ; <S2SV_EndBug> <S2SV_StartBug> error = security_mmap_addr ( address ) ; <S2SV_EndBug> ,<S2SV_ModStart> = 0 <S2SV_ModStart> if ( address < mmap_min_addr ) return - EPERM <S2SV_ModEnd> 
4543,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""(alt-CoA:<S2SV_blank>%s)"" , ip6addr_string ( ndo , & bp [ i + 2 ] ) ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_128BITS ( & bp [ i + 2 ] ) ; 
4544,"<S2SV_StartBug> printf ( ""Using<S2SV_blank>%s\\n"" , vpx_codec_iface_name ( decoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_dec_init ( & codec , decoder -> interface ( ) , NULL , 0 ) ) <S2SV_EndBug> ",<S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> codec_interface <S2SV_ModEnd> 
4545,"<S2SV_StartBug> static u32 ip6_idents_hashrnd __read_mostly ; <S2SV_EndBug> <S2SV_StartBug> id = __ipv6_select_ident ( net , ip6_idents_hashrnd , daddr , saddr ) ; <S2SV_EndBug> ",<S2SV_ModStart> u32 id <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4546,<S2SV_StartBug> rxent -> serviceId = EXTRACT_32BITS ( & rxh -> serviceId ) ; <S2SV_EndBug> ,<S2SV_ModStart> EXTRACT_16BITS <S2SV_ModEnd> 
4547,"<S2SV_StartBug> void vp9_model_to_full_probs ( const vp9_prob * model , vp9_prob * full ) { <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( full , model , sizeof ( vp9_prob ) * UNCONSTRAINED_NODES ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> 
4548,"
","
"
4549,<S2SV_StartBug> struct xfrm_policy_walk * walk = ( struct xfrm_policy_walk * ) & cb -> args [ 1 ] ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4550,<S2SV_StartBug> if ( ! old || ( old -> c_lflag ^ tty -> termios . c_lflag ) & ICANON ) { <S2SV_EndBug> ,<S2SV_ModStart> ( ICANON | EXTPROC ) <S2SV_ModEnd> 
4551,"<S2SV_StartBug> pipe_write ( struct kiocb * iocb , const struct iovec * _iov , <S2SV_EndBug> <S2SV_StartBug> ssize_t ret ; <S2SV_EndBug> <S2SV_StartBug> int do_wakeup ; <S2SV_EndBug> <S2SV_StartBug> size_t total_len ; <S2SV_EndBug> <S2SV_StartBug> total_len = iov_length ( iov , nr_segs ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> int error , atomic = 1 ; <S2SV_EndBug> <S2SV_StartBug> iov_fault_in_pages_read ( iov , chars ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> total_len -= chars ; <S2SV_EndBug> <S2SV_StartBug> char * src ; <S2SV_EndBug> <S2SV_StartBug> chars = PAGE_SIZE ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( error ) ) { <S2SV_EndBug> <S2SV_StartBug> ret += chars ; <S2SV_EndBug> <S2SV_StartBug> buf -> len = chars ; <S2SV_EndBug> <S2SV_StartBug> total_len -= chars ; <S2SV_EndBug> ","<S2SV_ModStart> struct iov_iter * from <S2SV_ModEnd> <S2SV_ModStart> = 0 <S2SV_ModStart> = 0 <S2SV_ModEnd> <S2SV_ModStart> = iov_iter_count ( from ) <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ret = copy_page_from_iter ( buf -> page , offset , chars , from ) ; if ( unlikely ( ret < chars ) ) { error = - EFAULT ; <S2SV_ModEnd> <S2SV_ModStart> do_wakeup = 1 ; <S2SV_ModStart> ret = chars ; if ( ! iov_iter_count ( from ) <S2SV_ModEnd> <S2SV_ModStart> int copied <S2SV_ModEnd> <S2SV_ModStart> copied = copy_page_from_iter ( page , 0 , PAGE_SIZE , from <S2SV_ModEnd> <S2SV_ModStart> copied < PAGE_SIZE && iov_iter_count ( from ) ) ) { if ( ! ret ) ret = - EFAULT <S2SV_ModEnd> <S2SV_ModStart> copied <S2SV_ModEnd> <S2SV_ModStart> copied <S2SV_ModEnd> <S2SV_ModStart> if ( ! iov_iter_count ( from ) <S2SV_ModEnd> "
4552,"<S2SV_StartBug> u32 i , j , page_count = 0 , sg_per_table ; <S2SV_EndBug> <S2SV_StartBug> sg_table = rd_dev -> sg_table_array ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < rd_dev -> sg_table_count ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> kfree ( sg_table ) ; <S2SV_EndBug> ","<S2SV_ModStart> page_count <S2SV_ModEnd> <S2SV_ModStart> page_count = rd_release_sgl_table ( rd_dev , <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4553,"<S2SV_StartBug> uint16 bitspersample , samplesperpixel = 1 ; <S2SV_EndBug> ",<S2SV_ModStart> = 1 
4554,<S2SV_StartBug> if ( pbi -> b_multithreaded_rd ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> <S2SV_ModStart> { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> <S2SV_ModStart> { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> <S2SV_ModStart> { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> <S2SV_ModStart> { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> <S2SV_ModStart> { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4555,"<S2SV_StartBug> # ifdef __linux__ <S2SV_EndBug> <S2SV_StartBug> sun . sun_path [ 0 ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> sun_len = offsetof ( struct sockaddr_un , sun_path ) + strlen ( address ) + 1 ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sizeof <S2SV_ModEnd> <S2SV_ModStart> ) ; <S2SV_ModEnd> 
4556,"<S2SV_StartBug> snprintf ( rcipher . type , CRYPTO_MAX_ALG_NAME , ""%s"" , ""cipher"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> ""cipher"" , sizeof ( rcipher . type ) <S2SV_ModEnd> "
4557,<S2SV_StartBug> case DH6OPT_RECONF_MSG : <S2SV_EndBug> ,"<S2SV_ModStart> if ( optlen != 1 ) { ND_PRINT ( ( ndo , ""<S2SV_blank>?)"" ) ) ; break ; } "
4558,<S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> read_config_file ( ) ; <S2SV_EndBug> <S2SV_StartBug> umask ( 0 ) ; <S2SV_EndBug> ,<S2SV_ModStart> umask ( 022 ) ; <S2SV_ModStart> global_data -> umask = umask_val ; <S2SV_ModStart>  <S2SV_ModEnd> 
4559,<S2SV_StartBug> if ( ! ( opt_len == 12 && flags & TH_SYN ) && <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) 
4560,"<S2SV_StartBug> static void encode_unsigned_max ( struct vp9_write_bit_buffer * wb , <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , data , get_unsigned_bits ( max ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> 
4561,"<S2SV_StartBug> hfs_bnode_read ( src_fd . bnode , & entry , src_fd . entryoffset , <S2SV_EndBug> ",<S2SV_ModStart> if ( src_fd . entrylength > sizeof ( entry ) || src_fd . entrylength < 0 ) { err = - EIO ; goto out ; } 
4562,"<S2SV_StartBug> if ( xmlPushInput ( ctxt , input ) < 0 ) <S2SV_EndBug> ",<S2SV_ModStart> { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> 
4563,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> it = it -> next ; 
4564,"<S2SV_StartBug> stlv_type = * ( tptr ++ ) ; <S2SV_EndBug> <S2SV_StartBug> len = len - 2 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , ISIS_SUBTLV_SPB_MCID_MIN_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> tptr = tptr + sizeof ( struct isis_subtlv_spb_mcid ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , ISIS_SUBTLV_SPB_DIGEST_MIN_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , stlv_len ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , ISIS_SUBTLV_SPB_BVID_MIN_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ND_TCHECK2 ( * tptr , 2 ) ; <S2SV_ModStart> ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ) , stlv_len ) <S2SV_ModStart> if ( stlv_len < ISIS_SUBTLV_SPB_MCID_MIN_LEN ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> ISIS_SUBTLV_SPB_MCID_MIN_LEN ; len = len - ISIS_SUBTLV_SPB_MCID_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_MCID_MIN_LEN <S2SV_ModEnd> <S2SV_ModStart> if ( stlv_len < ISIS_SUBTLV_SPB_DIGEST_MIN_LEN ) goto trunc <S2SV_ModEnd> <S2SV_ModStart> stlv_len = stlv_len - ISIS_SUBTLV_SPB_DIGEST_MIN_LEN ; <S2SV_ModStart> while ( stlv_len <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> stlv_len = stlv_len - ISIS_SUBTLV_SPB_BVID_MIN_LEN ; <S2SV_ModStart> tptr += stlv_len ; len -= stlv_len ; "
4565,"<S2SV_StartBug> int i , protocol ; <S2SV_EndBug> <S2SV_StartBug> switch ( protocol ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! h1 -> bInCollection ) { <S2SV_EndBug> <S2SV_StartBug> dev_info ( & dev -> dev , ""skipping<S2SV_blank>empty<S2SV_blank>audio<S2SV_blank>interface<S2SV_blank>(v1)\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; int rest_bytes <S2SV_ModStart> rest_bytes = ( void * ) ( host_iface -> extra + host_iface -> extralen ) - control_header ; if ( rest_bytes <= 0 ) { dev_err ( & dev -> dev , ""invalid<S2SV_blank>control<S2SV_blank>header\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> rest_bytes < sizeof ( * h1 ) ) { dev_err ( & dev -> dev , ""too<S2SV_blank>short<S2SV_blank>v1<S2SV_blank>buffer<S2SV_blank>descriptor\\n"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> ) ; return - EINVAL ; } if ( rest_bytes < h1 -> bLength ) { dev_err ( & dev -> dev , ""invalid<S2SV_blank>buffer<S2SV_blank>length<S2SV_blank>(v1)\\n"" "
4566,<S2SV_StartBug> user = key_user_lookup ( current_fsuid ( ) ) ; <S2SV_EndBug> <S2SV_StartBug> return ERR_PTR ( - ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> goto couldnt_alloc_key ; <S2SV_EndBug> <S2SV_StartBug> couldnt_alloc_key : <S2SV_EndBug> <S2SV_StartBug> key_put ( dest_keyring ) ; <S2SV_EndBug> ,<S2SV_ModStart> ret = construct_get_dest_keyring ( & dest_keyring ) ; if ( ret ) goto error ; <S2SV_ModStart> { ret = - ENOMEM ; goto error_put_dest_keyring ; } <S2SV_ModEnd> <S2SV_ModStart> error_put_dest_keyring <S2SV_ModEnd> <S2SV_ModStart> error_put_dest_keyring <S2SV_ModEnd> <S2SV_ModStart> error : 
4567,"<S2SV_StartBug> int mi_row , int mi_col , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 = xd -> mi ; <S2SV_EndBug> <S2SV_StartBug> const int left_in_image = xd -> left_available && mi_8x8 [ - 1 ] ; <S2SV_EndBug> <S2SV_StartBug> mi_8x8 [ - xd -> mi_stride ] ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * above_sb64_mi_8x8 ; <S2SV_EndBug> <S2SV_StartBug> int col8x8_remaining = tile -> mi_col_end - mi_col ; <S2SV_EndBug> <S2SV_StartBug> BLOCK_SIZE max_size = BLOCK_64X64 ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * const prev_mi = <S2SV_EndBug> <S2SV_StartBug> get_sb_partition_size_range ( cpi , prev_mi , & min_size , & max_size ) ; <S2SV_EndBug> <S2SV_StartBug> left_sb64_mi_8x8 = & mi_8x8 [ - MI_BLOCK_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> get_sb_partition_size_range ( cpi , left_sb64_mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> above_sb64_mi_8x8 = & mi_8x8 [ - xd -> mi_stride * MI_BLOCK_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> get_sb_partition_size_range ( cpi , above_sb64_mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> min_size = MIN ( min_size , max_size ) ; <S2SV_EndBug> ","<S2SV_ModStart> MACROBLOCKD * const xd , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> mi <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModStart> ; int bs_hist [ BLOCK_SIZES ] = { 0 } <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> xd <S2SV_ModEnd> <S2SV_ModStart> , bs_hist <S2SV_ModStart> MODE_INFO * * left_sb64_mi = & mi <S2SV_ModEnd> <S2SV_ModStart> xd , left_sb64_mi , & min_size , & max_size , bs_hist <S2SV_ModEnd> <S2SV_ModStart> MODE_INFO * * above_sb64_mi = & mi <S2SV_ModEnd> <S2SV_ModStart> xd , above_sb64_mi , & min_size , & max_size , bs_hist <S2SV_ModEnd> <S2SV_ModStart> if ( vp9_active_edge_sb ( cpi , mi_row , mi_col ) ) { min_size = BLOCK_4X4 ; } else { <S2SV_ModStart> cpi -> sf . rd_auto_partition_min_limit , MIN ( min_size , max_size ) ) ; } <S2SV_ModEnd> "
4568,<S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> install_keyword ( ""umask"" , & umask_handler ) ; "
4569,<S2SV_StartBug> while ( ret < nr ) { <S2SV_EndBug> ,<S2SV_ModStart> head %= ctx -> nr_events ; tail %= ctx -> nr_events ; 
4570,"<S2SV_StartBug> nfs4_close_state ( & data -> path , state , data -> o_arg . open_flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> fmode <S2SV_ModEnd> 
4571,"<S2SV_StartBug> if ( ( datao + 2 < datao ) || ( datao + 2 < 2 ) || ( datao + 2 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( o + 12 < o ) || ( o + 12 < 12 ) || ( o + 12 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> ""ExifMnoteCanon"" , ""Short<S2SV_blank>MakerNote"" ) ; <S2SV_EndBug> <S2SV_StartBug> n -> entries [ tcount ] . format = exif_get_short ( buf + o + 2 , n -> order ) ; <S2SV_EndBug> <S2SV_StartBug> n -> entries [ tcount ] . components = exif_get_long ( buf + o + 4 , n -> order ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( dataofs + s < s ) || ( dataofs + s < dataofs ) || ( dataofs + s > buf_size ) ) { <S2SV_EndBug> ","<S2SV_ModStart> CHECKOVERFLOW ( datao , buf_size , 2 <S2SV_ModEnd> <S2SV_ModStart> CHECKOVERFLOW ( o , buf_size , 12 ) ) { exif_log ( ne -> log , EXIF_LOG_CODE_CORRUPT_DATA , ""ExifMnoteCanon"" , ""Short<S2SV_blank>MakerNote"" ) ; break ; } n -> entries [ tcount ] . tag = exif_get_short ( buf + o , n -> order ) ; n -> entries [ tcount ] . format = exif_get_short ( buf + o + 2 , n -> order ) ; n -> entries [ tcount ] . components = exif_get_long ( buf + o + 4 , n -> order ) ; n -> entries [ tcount ] . order = n -> order ; exif_log ( ne -> log , EXIF_LOG_CODE_DEBUG , ""ExifMnoteCanon"" , ""Loading<S2SV_blank>entry<S2SV_blank>0x%x<S2SV_blank>(\'%s\')..."" , n -> entries [ tcount ] . tag , mnote_canon_tag_get_name ( n -> entries [ tcount ] . tag ) ) ; if ( exif_format_get_size ( n -> entries [ tcount ] . format ) && buf_size / exif_format_get_size ( n -> entries [ tcount ] . format ) < n -> entries [ tcount ] . components <S2SV_ModEnd> <S2SV_ModStart> ""Tag<S2SV_blank>size<S2SV_blank>overflow<S2SV_blank>detected<S2SV_blank>(%u<S2SV_blank>*<S2SV_blank>%lu)"" , exif_format_get_size ( <S2SV_ModEnd> <S2SV_ModStart> ) , <S2SV_ModEnd> <S2SV_ModStart> ) ; continue ; } <S2SV_ModEnd> <S2SV_ModStart> CHECKOVERFLOW ( dataofs , buf_size , s ) ) { exif_log ( ne -> log , EXIF_LOG_CODE_DEBUG , ""ExifMnoteCanon"" , ""Tag<S2SV_blank>data<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer<S2SV_blank>(%u<S2SV_blank>><S2SV_blank>%u)"" , ( unsigned ) <S2SV_ModEnd> <S2SV_ModStart> ) , buf_size ) ; continue ; } n -> entries [ tcount ] . data = exif_mem_alloc ( ne -> mem , s ) ; if ( ! n -> entries [ tcount ] . data ) { EXIF_LOG_NO_MEMORY ( ne -> log , ""ExifMnoteCanon"" , s ) ; continue ; } memcpy ( n -> entries [ tcount ] . data , buf + dataofs <S2SV_ModEnd> "
4572,"<S2SV_StartBug> if ( CPUCLOCK_WHICH ( which_clock ) == CPUCLOCK_SCHED ) { <S2SV_EndBug> <S2SV_StartBug> tp -> tv_sec = div_long_long_rem ( cpu . sched , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> * tp = ns_to_timespec <S2SV_ModEnd> <S2SV_ModStart> ) ; else <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4573,<S2SV_StartBug> mnt_flags |= MNT_NODEV ; <S2SV_EndBug> ,<S2SV_ModStart> | MNT_LOCK_NODEV 
4574,<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * param_count ) ; <S2SV_EndBug> ,"<S2SV_ModStart> size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , param_count , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> alloc_size <S2SV_ModEnd> "
4575,"<S2SV_StartBug> void vp9_diff_update_prob ( vp9_reader * r , vp9_prob * p ) { <S2SV_EndBug> <S2SV_StartBug> if ( vp9_read ( r , DIFF_UPDATE_PROB ) ) { <S2SV_EndBug> <S2SV_StartBug> * p = ( vp9_prob ) inv_remap_prob ( delp , * p ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_reader <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> 
4576,"<S2SV_StartBug> struct nfs_open_context * nfs_find_open_context ( struct inode * inode , struct rpc_cred * cred , int mode ) <S2SV_EndBug> ",<S2SV_ModStart> fmode_t <S2SV_ModEnd> 
4577,<S2SV_StartBug> if ( ! port -> interrupt_in_urb ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4578,"<S2SV_StartBug> return send ( ts [ h ] . cmd_fdw , & cmd , sizeof ( cmd ) , 0 ) == sizeof ( cmd ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
4579,"<S2SV_StartBug> size_t len , next_len ; <S2SV_EndBug> <S2SV_StartBug> next_len = MIN ( left , 100 ) ; <S2SV_EndBug> <S2SV_StartBug> for ( ; left > 0 ; left -= len , out_ptr += len ) { <S2SV_EndBug> <S2SV_StartBug> next_len = MIN ( left , apdu . sw2 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> ) { <S2SV_ModEnd> <S2SV_ModStart> left -= len ; out_ptr += len ; len <S2SV_ModEnd> 
4580,"<S2SV_StartBug> case FRAME_TYPE_JOIN_ACCEPT : <S2SV_EndBug> <S2SV_StartBug> if ( MAX ( 0 , ( int16_t ) ( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t ) phyParam . Value ) <S2SV_EndBug> ",<S2SV_ModStart> if ( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE ) { MacCtx . McpsIndication . Status = LORAMAC_EVENT_INFO_STATUS_ERROR ; PrepareRxDoneAbort ( ) ; return ; } <S2SV_ModStart> ( <S2SV_ModStart> LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE <S2SV_ModEnd> <S2SV_ModStart> ) || ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) 
4581,"<S2SV_StartBug> lxc_attach_options_t * options = payload -> options ; <S2SV_EndBug> <S2SV_StartBug> if ( ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_LSM ) ) { <S2SV_EndBug> <S2SV_StartBug> int proc_mounted ; <S2SV_EndBug> <S2SV_StartBug> proc_mounted = mount_proc_if_needed ( ""/"" ) ; <S2SV_EndBug> <S2SV_StartBug> ret = lsm_process_label_set ( init_ctx -> lsm_label , <S2SV_EndBug> <S2SV_StartBug> rexit ( payload -> exec_function ( payload -> exec_payload ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> int procfd = payload -> procfd ; <S2SV_ModStart> && init_ctx -> lsm_label <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( lsm_set_label_at ( procfd , on_exec , <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModEnd> <S2SV_ModStart> close ( procfd ) ; "
4582,"<S2SV_StartBug> struct fsnotify_group * group ; <S2SV_EndBug> <S2SV_StartBug> user = get_current_user ( ) ; <S2SV_EndBug> <S2SV_StartBug> group = inotify_new_group ( user , inotify_max_queued_events ) ; <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( group ) ) { <S2SV_EndBug> <S2SV_StartBug> ret = PTR_ERR ( group ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret >= 0 ) <S2SV_EndBug> <S2SV_StartBug> fsnotify_put_group ( group ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> < 0 ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4583,<S2SV_StartBug> i += 1 ; <S2SV_EndBug> ,<S2SV_ModStart> ++ <S2SV_ModEnd> 
4584,"<S2SV_StartBug> static vpx_codec_err_t vp8e_use_reference ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4585,"<S2SV_StartBug> # ifdef CONFIG_SMP <S2SV_EndBug> <S2SV_StartBug> for_each_possible_cpu ( i ) <S2SV_EndBug> <S2SV_StartBug> lockdep_init_map ( & s -> s_writers . lock_map [ i ] , sb_writers_name [ i ] , <S2SV_EndBug> <S2SV_StartBug> if ( list_lru_init ( & s -> s_dentry_lru ) ) <S2SV_EndBug> <S2SV_StartBug> if ( list_lru_init ( & s -> s_inode_lru ) ) <S2SV_EndBug> ","<S2SV_ModStart> for ( i = 0 ; i < SB_FREEZE_LEVELS ; i ++ ) { if ( percpu_counter_init ( & s -> s_writers . counter [ i ] , 0 ) < 0 <S2SV_ModEnd> <S2SV_ModStart> lockdep_init_map ( & s -> s_writers . lock_map [ i ] , sb_writers_name [ i ] , & type -> s_writers_key [ i ] , 0 ) ; } init_waitqueue_head ( & s -> s_writers . wait ) ; init_waitqueue_head ( & s -> s_writers . wait_unfrozen ) ; s -> s_flags = flags ; s -> s_bdi = & default_backing_dev_info ; INIT_HLIST_NODE ( & s -> s_instances ) ; INIT_HLIST_BL_HEAD ( & s -> s_anon ) ; INIT_LIST_HEAD ( & s -> s_inodes ) ; if ( list_lru_init ( & s -> s_dentry_lru ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> s_inode_lru <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4586,"<S2SV_StartBug> struct page * pages [ NFS4ACL_MAXPAGES ] ; <S2SV_EndBug> <S2SV_StartBug> struct page * localpage = NULL ; <S2SV_EndBug> <S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> <S2SV_StartBug> if ( res . acl_len > args . acl_len ) <S2SV_EndBug> <S2SV_StartBug> nfs4_write_cached_acl ( inode , NULL , res . acl_len ) ; <S2SV_EndBug> <S2SV_StartBug> nfs4_write_cached_acl ( inode , resp_buf , res . acl_len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( res . acl_len > buflen ) <S2SV_EndBug> <S2SV_StartBug> if ( localpage ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( buf , resp_buf , res . acl_len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( localpage ) <S2SV_EndBug> <S2SV_StartBug> __free_page ( localpage ) ; <S2SV_EndBug> ","<S2SV_ModStart> = { NULL , } <S2SV_ModStart> int ret = - ENOMEM , npages , i , acl_len = 0 ; npages = ( buflen + PAGE_SIZE - 1 ) >> PAGE_SHIFT ; if ( npages == 0 ) npages = 1 ; for ( i = 0 ; i < npages ; i ++ ) { pages [ i ] = alloc_page ( GFP_KERNEL ) ; if ( ! pages [ i ] ) goto out_free ; } if ( npages > 1 ) { args . acl_scratch = alloc_page ( GFP_KERNEL ) ; if ( ! args . acl_scratch ) goto out_free ; } args . acl_len = npages * PAGE_SIZE ; args . acl_pgbase = 0 ; if ( buf <S2SV_ModEnd> <S2SV_ModStart> res . acl_flags |= NFS4_ACL_LEN_REQUEST ; resp_buf = page_address ( pages [ 0 ] ) ; dprintk ( ""%s<S2SV_blank><S2SV_blank>buf<S2SV_blank>%p<S2SV_blank>buflen<S2SV_blank>%ld<S2SV_blank>npages<S2SV_blank>%d<S2SV_blank>args.acl_len<S2SV_blank>%ld\\n"" , __func__ , buf , buflen , npages , args . acl_len ) ; <S2SV_ModEnd> <S2SV_ModStart> acl_len = res . acl_len - res . acl_data_offset ; if ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> + res . acl_data_offset , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> _copy_from_pages <S2SV_ModEnd> <S2SV_ModStart> pages , res . acl_data_offset , res . acl_len ) ; } ret = <S2SV_ModEnd> <S2SV_ModStart> for ( i = 0 ; i < npages ; i ++ ) if ( pages [ i ] <S2SV_ModEnd> <S2SV_ModStart> pages [ i ] ) ; if ( args . acl_scratch ) __free_page ( args . acl_scratch <S2SV_ModEnd> "
4587,<S2SV_StartBug> size += miux_tlv_length ; <S2SV_EndBug> <S2SV_StartBug> size += rw_tlv_length ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> if ( ! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; } 
4588,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug> ",<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : <S2SV_ModStart>  <S2SV_ModEnd> 
4589,<S2SV_StartBug> separator = * src ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive , ARCHIVE_ERRNO_MISC , ""Path<S2SV_blank>is<S2SV_blank>absolute"" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> "
4590,<S2SV_StartBug> if ( ( intr_info & INTR_INFO_INTR_TYPE_MASK ) == INTR_TYPE_NMI_INTR ) <S2SV_EndBug> ,<S2SV_ModStart> is_nmi ( intr_info ) <S2SV_ModEnd> 
4591,<S2SV_StartBug> if ( skb -> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) ) <S2SV_EndBug> ,<S2SV_ModStart> skb_is_err_queue ( skb ) && 
4592,<S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < self -> mt_allocated ; i ++ ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> size_t 
4593,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> trace_kvm_emulate_insn_failed ( vcpu ) ; <S2SV_EndBug> <S2SV_StartBug> kvm_queue_exception ( vcpu , UD_VECTOR ) ; <S2SV_EndBug> <S2SV_StartBug> return EMULATE_FAIL ; <S2SV_EndBug> ",<S2SV_ModStart> int r = EMULATE_DONE ; <S2SV_ModStart> if ( ! is_guest_mode ( vcpu ) ) { <S2SV_ModStart> r = EMULATE_FAIL ; } <S2SV_ModStart> r <S2SV_ModEnd> 
4594,<S2SV_StartBug> unsigned int doffset = head_skb -> data - skb_mac_header ( head_skb ) ; <S2SV_EndBug> <S2SV_StartBug> pos += skb_headlen ( list_skb ) ; <S2SV_EndBug> <S2SV_StartBug> BUG_ON ( ! nfrags ) ; <S2SV_EndBug> <S2SV_StartBug> * nskb_frag = * frag ; <S2SV_EndBug> ,"<S2SV_ModStart> ; struct sk_buff * frag_skb = head_skb <S2SV_ModStart> frag_skb = list_skb ; <S2SV_ModStart> frag_skb = list_skb ; <S2SV_ModStart> if ( unlikely ( skb_orphan_frags ( frag_skb , GFP_ATOMIC ) ) ) goto err ; "
4595,<S2SV_StartBug> next_byte : <S2SV_EndBug> ,<S2SV_ModStart> if ( s -> pc - pc_start > 14 ) { goto illegal_op ; } 
4596,<S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( image -> number_meta_channels > MaxPixelChannels ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; "
4597,<S2SV_StartBug> if ( i4_continue_decode ) <S2SV_EndBug> ,"<S2SV_ModStart> 1 == ps_dec -> i4_num_cores && 0 == ps_dec -> u2_num_mbs_left ) { i4_continue_decode = 0 ; android_errorWriteLog ( 0x534e4554 , ""26070014"" ) ; } if ( "
4598,"<S2SV_StartBug> flen = udf_get_filename ( dir -> i_sb , nameptr , fname , lfi ) ; <S2SV_EndBug> ","<S2SV_ModStart> lfi , fname , UDF_NAME_LEN <S2SV_ModEnd> "
4599,"<S2SV_StartBug> static void xen_netbk_idx_release ( struct xen_netbk * netbk , u16 pending_idx ) <S2SV_EndBug> <S2SV_StartBug> make_tx_response ( vif , & pending_tx_info -> req , XEN_NETIF_RSP_OKAY ) ; <S2SV_EndBug> ","<S2SV_ModStart> , u8 status <S2SV_ModStart> status <S2SV_ModEnd> "
4600,<S2SV_StartBug> if ( ! cfg . shell ) <S2SV_EndBug> <S2SV_StartBug> arg [ 0 ] = cfg . shell ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""/bin/sh"" <S2SV_ModEnd> "
4601,"<S2SV_StartBug> int64_t vp9_rd_pick_inter_mode_sb ( VP9_COMP * cpi , MACROBLOCK * x , <S2SV_EndBug> <S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int * returnrate , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & x -> e_mbd ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE this_mode ; <S2SV_EndBug> <S2SV_StartBug> int comp_pred , i ; <S2SV_EndBug> <S2SV_StartBug> int_mv single_newmv [ MAX_REF_FRAMES ] = { { 0 } } ; <S2SV_EndBug> <S2SV_StartBug> int64_t best_tx_rd [ TX_MODES ] ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO best_mbmode = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> int mode_index , best_mode_index = 0 ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob comp_mode_p ; <S2SV_EndBug> <S2SV_StartBug> int64_t best_inter_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE best_intra_mode = DC_PRED ; <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE mode_uv [ TX_SIZES ] ; <S2SV_EndBug> <S2SV_StartBug> int64_t mode_distortions [ MB_MODE_COUNT ] = { - 1 } ; <S2SV_EndBug> <S2SV_StartBug> int intra_cost_penalty = 20 * vp9_dc_quant ( cm -> base_qindex , cm -> y_dc_delta_q ) ; <S2SV_EndBug> <S2SV_StartBug> int mode_skip_mask = 0 ; <S2SV_EndBug> <S2SV_StartBug> int mode_skip_start = cpi -> sf . mode_skip_start + 1 ; <S2SV_EndBug> <S2SV_StartBug> const int * const rd_threshes = cpi -> rd_threshes [ segment_id ] [ bsize ] ; <S2SV_EndBug> <S2SV_StartBug> const int * const rd_thresh_freq_fact = cpi -> rd_thresh_freq_fact [ bsize ] ; <S2SV_EndBug> <S2SV_StartBug> const int mode_search_skip_flags = cpi -> sf . mode_search_skip_flags ; <S2SV_EndBug> <S2SV_StartBug> estimate_ref_frame_costs ( cpi , segment_id , ref_costs_single , ref_costs_comp , <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < TX_MODES ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> * returnrate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> vp9_setup_buffer_inter ( cpi , x , tile , <S2SV_EndBug> <S2SV_StartBug> static const int ref_frame_mask_all [ ] = { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ref_frame_mask_all [ ref_frame ] ; <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> sf . reference_masking ) { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ref_frame_mask_fixedmv [ ref_frame ] ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) && <S2SV_EndBug> <S2SV_StartBug> vp9_get_segdata ( seg , segment_id , SEG_LVL_REF_FRAME ) != ( int ) ref_frame ) { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ref_frame_mask_all [ ref_frame ] ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) ) { <S2SV_EndBug> <S2SV_StartBug> const int altref_zero_mask = <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ( 1 << THR_NEARA ) ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ( 1 << THR_NEARESTA ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize > cpi -> sf . max_intra_bsize ) { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= 0xFF30808 ; <S2SV_EndBug> <S2SV_StartBug> int mode_index ; <S2SV_EndBug> <S2SV_StartBug> int64_t tx_cache [ TX_MODES ] ; <S2SV_EndBug> <S2SV_StartBug> if ( mode_index == mode_skip_start ) { <S2SV_EndBug> <S2SV_StartBug> switch ( vp9_mode_order [ best_mode_index ] . ref_frame [ 0 ] ) { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= LAST_FRAME_MODE_MASK ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= GOLDEN_FRAME_MODE_MASK ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ALT_REF_MODE_MASK ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( mode_skip_mask & ( 1 << mode_index ) ) <S2SV_EndBug> <S2SV_StartBug> if ( best_rd < ( ( int64_t ) rd_threshes [ mode_index ] * <S2SV_EndBug> <S2SV_StartBug> this_mode = vp9_mode_order [ mode_index ] . mode ; <S2SV_EndBug> <S2SV_StartBug> if ( ( mode_search_skip_flags & FLAG_SKIP_COMP_BESTINTRA ) && <S2SV_EndBug> <S2SV_StartBug> vp9_mode_order [ best_mode_index ] . ref_frame [ 0 ] == INTRA_FRAME ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ( intra_y_mode_mask & ( 1 << this_mode ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( vp9_mode_order [ best_mode_index ] . ref_frame [ 0 ] > INTRA_FRAME ) <S2SV_EndBug> <S2SV_StartBug> if ( x -> in_active_map && <S2SV_EndBug> <S2SV_StartBug> if ( ! check_best_zero_mv ( cpi , mbmi -> mode_context , frame_mv , <S2SV_EndBug> <S2SV_StartBug> x -> skip = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < TX_MODES ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> intra_super_block_yrd ( cpi , x , & rate_y , & distortion_y , & skippable , NULL , <S2SV_EndBug> <S2SV_StartBug> bsize , tx_cache , best_rd ) ; <S2SV_EndBug> <S2SV_StartBug> uv_tx = get_uv_tx_size_impl ( mbmi -> tx_size , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> choose_intra_uv_mode ( cpi , ctx , bsize , uv_tx , <S2SV_EndBug> <S2SV_StartBug> rate2 = rate_y + x -> mbmode_cost [ mbmi -> mode ] + rate_uv_intra [ uv_tx ] ; <S2SV_EndBug> <S2SV_StartBug> this_rd = handle_inter_mode ( cpi , x , tile , bsize , <S2SV_EndBug> <S2SV_StartBug> & rate_y , & distortion_y , <S2SV_EndBug> <S2SV_StartBug> & tmp_best_filter , frame_mv , <S2SV_EndBug> <S2SV_StartBug> single_newmv , & total_sse , best_rd ) ; <S2SV_EndBug> <S2SV_StartBug> const int mb_skip_allowed = ! vp9_segfeature_active ( seg , segment_id , <S2SV_EndBug> <S2SV_StartBug> rate_uv = 0 ; <S2SV_EndBug> <S2SV_StartBug> } else if ( mb_skip_allowed && ref_frame != INTRA_FRAME && ! xd -> lossless ) { <S2SV_EndBug> <S2SV_StartBug> rate_y = 0 ; <S2SV_EndBug> <S2SV_StartBug> } else if ( mb_skip_allowed ) { <S2SV_EndBug> <S2SV_StartBug> if ( ref_frame == INTRA_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> best_filter_rd [ i ] = MIN ( best_filter_rd [ i ] , this_rd ) ; <S2SV_EndBug> <S2SV_StartBug> * returnrate = rate2 ; <S2SV_EndBug> <S2SV_StartBug> * returndistortion = distortion2 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> select_txfm_size ) <S2SV_EndBug> <S2SV_StartBug> swap_block_ptr ( x , ctx , max_plane ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( ctx -> zcoeff_blk , x -> zcoeff_blk [ mbmi -> tx_size ] , <S2SV_EndBug> <S2SV_StartBug> sizeof ( uint8_t ) * ctx -> num_4x4_blk ) ; <S2SV_EndBug> <S2SV_StartBug> const int qstep = xd -> plane [ 0 ] . dequant [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> int scale = 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( single_rd < best_pred_rd [ SINGLE_REFERENCE ] ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( single_rd < best_pred_rd [ COMPOUND_REFERENCE ] ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> int64_t ref = cpi -> rd_filter_cache [ cm -> interp_filter == SWITCHABLE ? <S2SV_EndBug> <S2SV_StartBug> else if ( cpi -> rd_filter_cache [ i ] == INT64_MAX ) <S2SV_EndBug> <S2SV_StartBug> adj_rd = cpi -> mask_filter_rd - ref + 10 ; <S2SV_EndBug> <S2SV_StartBug> adj_rd = cpi -> rd_filter_cache [ i ] - ref ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( best_rd >= best_rd_so_far ) <S2SV_EndBug> <S2SV_StartBug> if ( vp9_mode_order [ best_mode_index ] . ref_frame [ 0 ] == INTRA_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> uv_tx_size = get_uv_tx_size ( mbmi ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . adaptive_rd_thresh ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < TX_MODES ; i ++ ) { <S2SV_EndBug> ","<S2SV_ModStart> void <S2SV_ModEnd> <S2SV_ModStart> TileDataEnc * tile_data , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> RD_COST * rd_cost , <S2SV_ModEnd> <S2SV_ModStart> TileInfo * const tile_info = & tile_data -> tile_info ; RD_OPT * const rd_opt = & cpi -> rd ; SPEED_FEATURES * const sf = & cpi -> sf ; <S2SV_ModStart> ; MB_MODE_INFO_EXT * const mbmi_ext = x -> mbmi_ext <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> , k <S2SV_ModStart> ; INTERP_FILTER single_inter_filter [ MB_MODE_COUNT ] [ MAX_REF_FRAMES ] ; int single_skippable [ MB_MODE_COUNT ] [ MAX_REF_FRAMES ] <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; int best_mode_skippable = 0 ; int midx <S2SV_ModEnd> <S2SV_ModStart> - 1 <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> unsigned int best_pred_sse = UINT_MAX ; PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart> const <S2SV_ModEnd> <S2SV_ModStart> vp9_get_intra_cost_penalty ( <S2SV_ModEnd> <S2SV_ModStart> , cm -> bit_depth ) <S2SV_ModEnd> <S2SV_ModStart> uint8_t ref_frame_skip_mask [ 2 ] = { 0 } ; uint16_t mode_skip_mask [ MAX_REF_FRAMES ] = { 0 } <S2SV_ModEnd> <S2SV_ModStart> sf -> <S2SV_ModEnd> <S2SV_ModStart> rd_opt -> threshes <S2SV_ModEnd> <S2SV_ModStart> tile_data -> thresh_freq_fact [ bsize ] ; int64_t mode_threshold [ MAX_MODES ] ; int * mode_map = tile_data -> mode_map <S2SV_ModEnd> <S2SV_ModStart> sf -> mode_search_skip_flags ; int64_t mask_filter = 0 ; int64_t filter_cache [ SWITCHABLE_FILTER_CONTEXTS ] ; vp9_zero ( best_mbmode ) ; x -> skip_encode = sf -> <S2SV_ModEnd> <S2SV_ModStart> for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; ++ i ) filter_cache [ i ] = INT64_MAX ; estimate_ref_frame_costs ( cm , xd <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> for ( i = 0 ; i < MB_MODE_COUNT ; ++ i ) { for ( k = 0 ; k < MAX_REF_FRAMES ; ++ k ) { single_inter_filter [ i ] [ k ] = SWITCHABLE ; single_skippable [ i ] [ k ] = 0 ; } } rd_cost -> rate <S2SV_ModEnd> <S2SV_ModStart> assert ( get_ref_frame_buffer <S2SV_ModEnd> <S2SV_ModStart> ref_frame ) != NULL ) ; setup_buffer_inter ( cpi , x , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ref_frame_skip_mask [ 0 ] |= ( 1 << ref_frame ) ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK <S2SV_ModEnd> <S2SV_ModStart> sf -> <S2SV_ModEnd> <S2SV_ModStart> [ ref_frame ] |= INTER_NEAREST_NEAR_ZERO <S2SV_ModEnd> <S2SV_ModStart> segfeature_active <S2SV_ModEnd> <S2SV_ModStart> get_segdata <S2SV_ModEnd> <S2SV_ModStart> ref_frame_skip_mask [ 0 ] |= ( 1 << ref_frame ) ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK ; } <S2SV_ModEnd> <S2SV_ModStart> segfeature_active <S2SV_ModEnd> <S2SV_ModStart> ref_frame_skip_mask [ 0 ] = ( 1 << LAST_FRAME ) | ( 1 << GOLDEN_FRAME ) ; ref_frame_skip_mask [ 1 ] = SECOND_REF_FRAME_MASK ; mode_skip_mask [ ALTREF_FRAME ] = ~ INTER_NEAREST_NEAR_ZERO <S2SV_ModEnd> <S2SV_ModStart> [ ALTREF_FRAME ] <S2SV_ModStart> NEARMV <S2SV_ModEnd> <S2SV_ModStart> [ ALTREF_FRAME ] <S2SV_ModStart> NEARESTMV ) ; } } if ( cpi -> rc . is_src_frame_alt_ref ) { if ( sf -> alt_ref_search_fp ) { mode_skip_mask [ ALTREF_FRAME ] = 0 ; ref_frame_skip_mask [ 0 ] = ~ ( 1 << ALTREF_FRAME ) ; ref_frame_skip_mask [ 1 ] = SECOND_REF_FRAME_MASK ; } } if ( sf -> alt_ref_search_fp ) if ( ! cm -> show_frame && x -> pred_mv_sad [ GOLDEN_FRAME ] < INT_MAX ) if ( x -> pred_mv_sad [ ALTREF_FRAME ] > ( x -> pred_mv_sad [ GOLDEN_FRAME ] << 1 ) ) mode_skip_mask [ ALTREF_FRAME ] |= INTER_ALL ; if ( sf -> adaptive_mode_search ) { if ( cm -> show_frame && ! cpi -> rc . is_src_frame_alt_ref && cpi -> rc . frames_since_golden >= 3 ) if ( x -> pred_mv_sad [ GOLDEN_FRAME ] > ( x -> pred_mv_sad [ LAST_FRAME ] << 1 ) ) mode_skip_mask [ GOLDEN_FRAME ] |= INTER_ALL <S2SV_ModEnd> <S2SV_ModStart> sf -> <S2SV_ModEnd> <S2SV_ModStart> ref_frame_skip_mask [ 0 ] |= ( 1 << INTRA_FRAME ) ; ref_frame_skip_mask [ 1 ] |= ( 1 << INTRA_FRAME ) ; } mode_skip_mask [ INTRA_FRAME ] |= ~ ( sf -> intra_y_mode_mask [ max_txsize_lookup [ bsize ] ] ) ; for ( i = 0 ; i <= LAST_NEW_MV_INDEX ; ++ i ) mode_threshold [ i ] = 0 ; for ( i = LAST_NEW_MV_INDEX + 1 ; i < MAX_MODES ; ++ i ) mode_threshold [ i ] = ( ( int64_t ) rd_threshes [ i ] * rd_thresh_freq_fact [ i ] ) >> 5 ; midx = sf -> schedule_mode_search ? mode_skip_start : 0 ; while ( midx > 4 ) { uint8_t end_pos = 0 ; for ( i = 5 ; i < midx ; ++ i ) { if ( mode_threshold [ mode_map [ i - 1 ] ] > mode_threshold [ mode_map [ i ] ] ) { uint8_t tmp = mode_map [ i ] ; mode_map [ i ] = mode_map [ i - 1 ] ; mode_map [ i - 1 ] = tmp ; end_pos = i ; } } midx = end_pos ; } for ( midx = 0 ; midx < MAX_MODES ; ++ midx <S2SV_ModEnd> <S2SV_ModStart> = mode_map [ midx ] ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> this_mode = vp9_mode_order [ mode_index ] . mode ; ref_frame = vp9_mode_order [ mode_index ] . ref_frame [ 0 ] ; second_ref_frame = vp9_mode_order [ mode_index ] . ref_frame [ 1 ] ; if ( midx == mode_skip_start && best_mode_index >= 0 <S2SV_ModEnd> <S2SV_ModStart> best_mbmode <S2SV_ModEnd> <S2SV_ModStart> ref_frame_skip_mask [ 0 ] |= LAST_FRAME_MODE_MASK ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK <S2SV_ModEnd> <S2SV_ModStart> ref_frame_skip_mask [ 0 ] |= GOLDEN_FRAME_MODE_MASK ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK <S2SV_ModEnd> <S2SV_ModStart> ref_frame_skip_mask [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> break ; } } if ( ( ref_frame_skip_mask [ 0 ] & ( 1 << ref_frame ) ) && ( ref_frame_skip_mask [ 1 ] & ( 1 << MAX ( 0 , second_ref_frame ) ) ) ) continue ; <S2SV_ModEnd> <S2SV_ModStart> [ ref_frame ] <S2SV_ModStart> this_mode ) ) continue ; if ( best_mode_skippable && sf -> schedule_mode_search ) mode_threshold [ mode_index ] <<= 1 <S2SV_ModEnd> <S2SV_ModStart> mode_threshold <S2SV_ModEnd> <S2SV_ModStart> ) continue ; if ( sf -> motion_field_mode_search ) { const int mi_width = MIN ( num_8x8_blocks_wide_lookup [ bsize ] , tile_info -> mi_col_end - mi_col ) ; const int mi_height = MIN ( num_8x8_blocks_high_lookup [ bsize ] , tile_info -> mi_row_end - mi_row ) ; const int bsl = mi_width_log2_lookup [ bsize ] ; int cb_partition_search_ctrl = ( ( ( mi_row + mi_col ) >> bsl ) + get_chessboard_index ( cm -> current_video_frame ) ) & 0x1 ; MB_MODE_INFO * ref_mbmi ; int const_motion = 1 ; int skip_ref_frame = ! cb_partition_search_ctrl ; MV_REFERENCE_FRAME rf = NONE ; int_mv ref_mv ; ref_mv . as_int = INVALID_MV ; if ( ( mi_row - 1 ) >= tile_info -> mi_row_start ) { ref_mv = xd -> mi [ - xd -> mi_stride ] -> mbmi . mv [ 0 ] ; rf = xd -> mi [ - xd -> mi_stride ] -> mbmi . ref_frame [ 0 ] ; for ( i = 0 ; i < mi_width ; ++ i ) { ref_mbmi = & xd -> mi [ - xd -> mi_stride + i ] -> mbmi ; const_motion &= ( ref_mv . as_int == ref_mbmi -> mv [ 0 ] . as_int ) && ( ref_frame == ref_mbmi -> ref_frame [ 0 ] ) ; skip_ref_frame &= ( rf == ref_mbmi -> ref_frame [ 0 ] ) ; } } if ( ( mi_col - 1 ) >= tile_info -> mi_col_start ) { if ( ref_mv . as_int == INVALID_MV ) ref_mv = xd -> mi [ - 1 ] -> mbmi . mv [ 0 ] ; if ( rf == NONE ) rf = xd -> mi [ - 1 ] -> mbmi . ref_frame [ 0 ] ; for ( i = 0 ; i < mi_height ; ++ i ) { ref_mbmi = & xd -> mi [ i * xd -> mi_stride - 1 ] -> mbmi ; const_motion &= ( ref_mv . as_int == ref_mbmi -> mv [ 0 ] . as_int ) && ( ref_frame == ref_mbmi -> ref_frame [ 0 ] ) ; skip_ref_frame &= ( rf == ref_mbmi -> ref_frame [ 0 ] ) ; } } if ( skip_ref_frame && this_mode != NEARESTMV && this_mode != NEWMV ) if ( rf > INTRA_FRAME ) if ( ref_frame != rf ) continue ; if ( const_motion ) if ( this_mode == NEARMV || this_mode == ZEROMV <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModEnd> <S2SV_ModStart> ! cpi -> allow_comp_inter_inter ) continue ; if ( ! ( cpi -> ref_frame_flags & flag_list [ second_ref_frame ] ) ) continue ; if ( segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) ) continue ; if ( <S2SV_ModStart> best_mode_index >= 0 && best_mbmode <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sf -> adaptive_mode_search ) if ( ( x -> source_variance << num_pels_log2_lookup [ bsize ] ) > best_pred_sse <S2SV_ModEnd> <S2SV_ModStart> best_mode_index >= 0 && best_mbmode <S2SV_ModEnd> <S2SV_ModStart> const MV_REFERENCE_FRAME ref_frames [ 2 ] = { ref_frame , second_ref_frame } ; <S2SV_ModEnd> <S2SV_ModStart> mbmi_ext -> mode_context , frame_mv , this_mode , ref_frames ) ) continue ; } mbmi -> mode = this_mode ; mbmi -> uv_mode = DC_PRED <S2SV_ModEnd> <S2SV_ModStart> mbmi -> mv [ 0 ] . as_int = mbmi -> mv [ 1 ] . as_int = 0 ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> struct macroblockd_plane * const pd = & xd -> plane [ 1 ] ; memset ( x -> skip_txfm , 0 , sizeof ( x -> skip_txfm ) ) ; super_block_yrd <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , pd -> subsampling_x , pd -> subsampling_y <S2SV_ModStart> , x <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> bsize <S2SV_ModEnd> <S2SV_ModStart> rate_uv , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , single_inter_filter , single_skippable <S2SV_ModStart> , & mask_filter , filter_cache <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rate2 += vp9_cost_bit ( vp9_get_skip_prob ( cm , xd ) , 1 ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rd_variance_adjustment ( cpi , x , bsize , & this_rd , ref_frame , x -> source_variance ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> else { best_pred_sse = x -> pred_sse [ ref_frame ] ; } rd_cost -> rate <S2SV_ModEnd> <S2SV_ModStart> rd_cost -> dist = distortion2 ; rd_cost -> rdcost = this_rd <S2SV_ModEnd> <S2SV_ModStart> best_mode_skippable = skippable ; <S2SV_ModStart> select_tx_size <S2SV_ModEnd> <S2SV_ModStart> 1 , 0 , 0 , <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> ctx -> zcoeff_blk [ 0 ] <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { qstep >>= ( xd -> bd - 8 ) ; } # endif <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart> mask_filter <S2SV_ModEnd> <S2SV_ModStart> filter_cache <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> best_mbmode . mode == NEWMV ) { const MV_REFERENCE_FRAME refs [ 2 ] = { best_mbmode . ref_frame [ 0 ] , best_mbmode . ref_frame [ 1 ] } ; int comp_pred_mode = refs [ 1 ] > INTRA_FRAME ; if ( frame_mv [ NEARESTMV ] [ refs [ 0 ] ] . as_int == best_mbmode . mv [ 0 ] . as_int && ( ( comp_pred_mode && frame_mv [ NEARESTMV ] [ refs [ 1 ] ] . as_int == best_mbmode . mv [ 1 ] . as_int ) || ! comp_pred_mode ) ) best_mbmode . mode = NEARESTMV ; else if ( frame_mv [ NEARMV ] [ refs [ 0 ] ] . as_int == best_mbmode . mv [ 0 ] . as_int && ( ( comp_pred_mode && frame_mv [ NEARMV ] [ refs [ 1 ] ] . as_int == best_mbmode . mv [ 1 ] . as_int ) || ! comp_pred_mode ) ) best_mbmode . mode = NEARMV ; else if ( best_mbmode . mv [ 0 ] . as_int == 0 && ( ( comp_pred_mode && best_mbmode . mv [ 1 ] . as_int == 0 ) || ! comp_pred_mode ) ) best_mbmode . mode = ZEROMV ; } if ( best_mode_index < 0 || <S2SV_ModStart> { rd_cost -> rate = INT_MAX ; rd_cost -> rdcost = INT64_MAX ; return ; } if ( sf -> <S2SV_ModEnd> <S2SV_ModStart> best_mbmode <S2SV_ModEnd> <S2SV_ModStart> , & xd -> plane [ 1 ] <S2SV_ModStart> ! cpi -> rc . is_src_frame_alt_ref ) vp9_update_rd_thresh_fact ( tile_data -> thresh_freq_fact , sf -> adaptive_rd_thresh , bsize , best_mode_index ) ; <S2SV_ModEnd> <S2SV_ModStart> } else { vp9_zero ( best_filter_diff ) ; } x -> skip |= best_mode_skippable ; if ( ! x -> skip && ! x -> select_tx_size ) { int has_high_freq_coeff = 0 ; int plane ; int max_plane = is_inter_block ( & xd -> mi [ 0 ] -> mbmi ) ? MAX_MB_PLANE : 1 ; for ( plane = 0 ; plane < max_plane ; ++ plane ) { x -> plane [ plane ] . eobs = ctx -> eobs_pbuf [ plane ] [ 1 ] ; has_high_freq_coeff |= vp9_has_high_freq_in_plane ( x , bsize , plane ) ; } for ( plane = max_plane ; plane < MAX_MB_PLANE ; ++ plane ) { x -> plane [ plane ] . eobs = ctx -> eobs_pbuf [ plane ] [ 2 ] ; has_high_freq_coeff |= vp9_has_high_freq_in_plane ( x , bsize , plane ) ; } best_mode_skippable |= ! has_high_freq_coeff ; } assert ( best_mode_index >= 0 ) ; store_coding_context ( x , ctx , best_mode_index , best_pred_diff , best_filter_diff , best_mode_skippable ) <S2SV_ModEnd> "
4602,<S2SV_StartBug> g_object_unref ( subdir ) ; <S2SV_EndBug> <S2SV_StartBug> dir = GSF_INFILE_TAR ( subdir ) ; <S2SV_EndBug> ,<S2SV_ModStart> dir = GSF_IS_INFILE_TAR ( subdir ) ? GSF_INFILE_TAR ( subdir ) : dir ; <S2SV_ModStart>  <S2SV_ModEnd> 
4603,"<S2SV_StartBug> int i , attr_id = 0 , nattr ; <S2SV_EndBug> ",<S2SV_ModStart> ; tagname [ 0 ] = '\\0' 
4604,<S2SV_StartBug> BUG_ON ( task_stack_end_corrupted ( prev ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> ) panic ( ""corrupted<S2SV_blank>stack<S2SV_blank>end<S2SV_blank>detected<S2SV_blank>inside<S2SV_blank>scheduler\\n"" "
4605,"<S2SV_StartBug> if ( containsForbiddenChars ( p , l ) ) { <S2SV_EndBug> ","<S2SV_ModStart> memset ( newserv , 0 , sizeof ( struct service ) ) ; "
4606,"<S2SV_StartBug> n = r -> iov . iov_len / 512 ; <S2SV_EndBug> <S2SV_StartBug> qemu_iovec_init_external ( & r -> qiov , & r -> iov , 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> qiov . size <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4607,<S2SV_StartBug> if ( rh . command == RELAY_COMMAND_BEGIN_DIR ) { <S2SV_EndBug> ,<S2SV_ModStart> && circ -> purpose != CIRCUIT_PURPOSE_S_REND_JOINED 
4608,"<S2SV_StartBug> return PyBytes_DecodeEscape ( s , len , NULL , 0 , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> const char * first_invalid_escape ; PyObject * result = _PyBytes_DecodeEscape <S2SV_ModEnd> <S2SV_ModStart> , & first_invalid_escape ) ; if ( result == NULL ) return NULL ; if ( first_invalid_escape != NULL ) { if ( warn_invalid_escape_sequence ( c , n , * first_invalid_escape ) < 0 ) { Py_DECREF ( result ) ; return NULL ; } } return result <S2SV_ModEnd> "
4609,"<S2SV_StartBug> vpx_memcpy ( & t_above , mb -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left , mb -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
4610,<S2SV_StartBug> free ( szSepLine ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4611,<S2SV_StartBug> state -> space_before = strdup ( RSTRING_PTR ( space_before ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> fstrndup <S2SV_ModEnd> <S2SV_ModStart> , len "
4612,<S2SV_StartBug> struct user_element * ue = kcontrol -> private_data ; <S2SV_EndBug> <S2SV_StartBug> return change ; <S2SV_EndBug> ,<S2SV_ModStart> ; mutex_lock ( & ue -> card -> user_ctl_lock ) <S2SV_ModStart> mutex_unlock ( & ue -> card -> user_ctl_lock ) ; 
4613,"<S2SV_StartBug> stat ( options -> in_file , & filestats ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( filestats . st_size < 8 ) { printf ( ""ERROR:<S2SV_blank>Input<S2SV_blank>file<S2SV_blank>is<S2SV_blank>too<S2SV_blank>small<S2SV_blank>to<S2SV_blank>contain<S2SV_blank>valid<S2SV_blank>plist<S2SV_blank>data.\\n"" ) ; return - 1 ; } "
4614,"<S2SV_StartBug> unsigned long off ; <S2SV_EndBug> <S2SV_StartBug> if ( vma -> vm_pgoff > ( ~ 0UL >> PAGE_SHIFT ) ) <S2SV_EndBug> <S2SV_StartBug> off = vma -> vm_pgoff << PAGE_SHIFT ; <S2SV_EndBug> <S2SV_StartBug> if ( fb -> fb_mmap ) { <S2SV_EndBug> <S2SV_StartBug> fb_pgprotect ( file , vma , off ) ; <S2SV_EndBug> ","<S2SV_ModStart> mmio_pgoff <S2SV_ModEnd> <S2SV_ModStart> fb = info -> fbops ; if ( ! fb ) return - ENODEV ; mutex_lock ( & info -> mm_lock ) ; if ( fb -> fb_mmap ) { int res ; res = fb -> fb_mmap ( info , vma ) ; mutex_unlock ( & info -> mm_lock ) ; return res ; } start = info -> fix . smem_start ; len = info -> fix . smem_len ; mmio_pgoff = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + len ) >> PAGE_SHIFT ; if ( <S2SV_ModEnd> <S2SV_ModStart> >= mmio_pgoff ) { vma -> vm_pgoff -= mmio_pgoff ; start = info -> fix . mmio_start ; len = info -> fix . mmio_len ; } mutex_unlock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> start ) ; return vm_iomap_memory ( vma , start , len ) <S2SV_ModEnd> "
4615,<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case Suite_kind : <S2SV_EndBug> ,"<S2SV_ModStart> value = ast2obj_list ( o -> v . Module . type_ignores , ast2obj_type_ignore ) ; if ( ! value ) goto failed ; if ( _PyObject_SetAttrId ( result , & PyId_type_ignores , value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> FunctionType_kind : result = PyType_GenericNew ( FunctionType_type , NULL , NULL ) ; if ( ! result ) goto failed ; value = ast2obj_list ( o -> v . FunctionType . argtypes , ast2obj_expr ) ; if ( ! value ) goto failed ; if ( _PyObject_SetAttrId ( result , & PyId_argtypes , value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_expr ( o -> v . FunctionType . returns ) ; if ( ! value ) goto failed ; if ( _PyObject_SetAttrId ( result , & PyId_returns , value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; break ; case "
4616,<S2SV_StartBug> quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_EndBug> ,<S2SV_ModStart> ) ; canvas_image = DestroyImage ( canvas_image 
4617,"<S2SV_StartBug> if ( ! sock_flag ( sk , SOCK_ZAPPED ) ) <S2SV_EndBug> <S2SV_StartBug> if ( addr_len < sizeof ( struct sockaddr_l2tpip ) ) <S2SV_EndBug> <S2SV_StartBug> if ( addr -> l2tp_family != AF_INET ) <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ","<S2SV_ModStart> addr_len < sizeof ( struct sockaddr_l2tpip <S2SV_ModEnd> <S2SV_ModStart> addr -> l2tp_family != AF_INET <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! sock_flag ( sk , SOCK_ZAPPED ) ) goto out "
4618,"<S2SV_StartBug> ND_PRINT ( ( ndo , "",<S2SV_blank>Config<S2SV_blank>Rev<S2SV_blank>%x"" , EXTRACT_32BITS ( tptr ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> while ( tptr < ( pptr + length ) ) { <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> ND_TCHECK_8BITS ( tptr ) ; 
4619,"<S2SV_StartBug> if ( op -> op > 0xbf ) return 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( n > 0 && n < buf_len ) ) goto err ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( table = calloc ( count , sizeof ( ut32 ) ) ) ) goto err ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( op -> len + n <= buf_len ) ) goto beach ; <S2SV_EndBug> <S2SV_StartBug> op -> len += n ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( n > 0 && n + op -> len < buf_len ) ) goto beach ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < count && strlen ( op -> txt ) < R_ASM_BUFSIZE ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> snprintf ( op -> txt + strlen ( op -> txt ) , R_ASM_BUFSIZE , ""%d<S2SV_blank>"" , table [ i ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> { <S2SV_ModStart> } <S2SV_ModStart> + 10 <S2SV_ModStart> int optxtlen = strlen ( op -> txt ) ; <S2SV_ModStart> optxtlen , R_ASM_BUFSIZE - optxtlen <S2SV_ModEnd> "
4620,<S2SV_StartBug> dst [ dst_byte_offset ] = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4621,<S2SV_StartBug> nPath ++ ; <S2SV_EndBug> ,<S2SV_ModStart> = ( int ) strlen ( zPath ) <S2SV_ModEnd> 
4622,"<S2SV_StartBug> BN_ULONG t1 , t2 ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4623,"<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> indx , data , size , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart> u8 * buf ; int ret ; buf = kmalloc ( size , GFP_NOIO ) ; if ( ! buf ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> buf <S2SV_ModEnd> <S2SV_ModStart> else if ( ret <= size ) memcpy ( data , buf , ret ) ; kfree ( buf ) ; "
4624,<S2SV_StartBug> guint uint_val = GST_READ_UINT32_LE ( value ) ; <S2SV_EndBug> <S2SV_StartBug> gboolean bool_val = GST_READ_UINT32_LE ( value ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( value_len < 4 ) break ; uint_val <S2SV_ModStart> ; if ( value_len < 4 ) break ; bool_val 
4625,"<S2SV_StartBug> uint16_t auxsize ; <S2SV_EndBug> <S2SV_StartBug> av_get_packet ( pb , pkt , vsize ) ; <S2SV_EndBug> <S2SV_StartBug> av_get_packet ( pb , pkt , asize ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; int ret <S2SV_ModStart> if ( ( ret = <S2SV_ModStart> ) < 0 ) return ret <S2SV_ModStart> if ( ( ret = <S2SV_ModStart> ) < 0 ) return ret 
4626,"<S2SV_StartBug> op = queue_remove_if ( att -> req_queue , match_op_id , UINT_TO_PTR ( id ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( att -> in_disc ) return bt_att_disc_cancel ( att , id ) ; "
4627,"<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug> ",<S2SV_ModStart> = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> <S2SV_ModStart> exit_func : <S2SV_ModStart>  <S2SV_ModEnd> 
4628,"<S2SV_StartBug> unsigned int maxw , maxh , max , i ; <S2SV_EndBug> <S2SV_StartBug> maxw = ( unsigned int ) img -> comps [ 0 ] . w ; maxh = ( unsigned int ) img -> comps [ 0 ] . h ; <S2SV_EndBug> <S2SV_StartBug> d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( r ) free ( r ) ; <S2SV_EndBug> ",<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> img -> color_space = OPJ_CLRSPC_SRGB ; <S2SV_ModStart> free ( r ) ; free ( g ) ; <S2SV_ModEnd> 
4629,<S2SV_StartBug> && obj [ 0 ] == 0x00 && objlen > 1 ) { <S2SV_EndBug> ,<S2SV_ModStart> objlen > 1 && <S2SV_ModStart>  <S2SV_ModEnd> 
4630,<S2SV_StartBug> get_page ( page ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( ! try_get_page ( page ) ) ) { spin_unlock ( ptl ) ; return ERR_PTR ( - ENOMEM ) ; } <S2SV_ModEnd> 
4631,<S2SV_StartBug> mntput ( ns -> proc_mnt ) ; <S2SV_EndBug> ,<S2SV_ModStart> kern_unmount <S2SV_ModEnd> 
4632,<S2SV_StartBug> switch ( bps / 8 ) <S2SV_EndBug> ,"<S2SV_ModStart> if ( bytes_per_pixel > sizeof ( swapbuff ) ) { TIFFError ( ""reverseSamplesBytes"" , ""bytes_per_pixel<S2SV_blank>too<S2SV_blank>large"" ) ; return ( 1 ) ; } "
4633,"<S2SV_StartBug> if ( img && ( img -> d_w != cfg -> g_w || img -> d_h != cfg -> g_h ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! stream -> img ) <S2SV_EndBug> <S2SV_StartBug> stream -> img = vpx_img_alloc ( NULL , VPX_IMG_FMT_I420 , <S2SV_EndBug> <S2SV_StartBug> img = stream -> img ; <S2SV_EndBug> ","<S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( img ) { if ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) <S2SV_ModEnd> <S2SV_ModStart> img -> fmt != VPX_IMG_FMT_I42016 ) { fprintf ( stderr , ""%s<S2SV_blank>can<S2SV_blank>only<S2SV_blank>scale<S2SV_blank>4:2:0<S2SV_blank>inputs\\n"" , exec_name ) ; exit ( EXIT_FAILURE ) ; } # if CONFIG_LIBYUV if ( <S2SV_ModStart> { <S2SV_ModStart> VPX_IMG_FMT_I42016 , cfg -> g_w , cfg -> g_h , 16 ) ; } I420Scale_16 ( ( uint16 * ) img -> planes [ VPX_PLANE_Y ] , img -> stride [ VPX_PLANE_Y ] / 2 , ( uint16 * ) img -> planes [ VPX_PLANE_U ] , img -> stride [ VPX_PLANE_U ] / 2 , ( uint16 * ) img -> planes [ VPX_PLANE_V ] , img -> stride [ VPX_PLANE_V ] / 2 , img -> d_w , img -> d_h , ( uint16 * ) stream -> img -> planes [ VPX_PLANE_Y ] , stream -> img -> stride [ VPX_PLANE_Y ] / 2 , ( uint16 * ) stream -> img -> planes [ VPX_PLANE_U ] , stream -> img -> stride [ VPX_PLANE_U ] / 2 , ( uint16 * ) stream -> img -> planes [ VPX_PLANE_V ] , stream -> img -> stride [ VPX_PLANE_V ] / 2 , stream -> img -> d_w , stream -> img -> d_h , kFilterBox ) ; img = stream -> img ; # else stream -> encoder . err = 1 ; ctx_exit_on_error ( & stream -> encoder , ""Stream<S2SV_blank>%d:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>frame.\\n"" ""Scaling<S2SV_blank>disabled<S2SV_blank>in<S2SV_blank>this<S2SV_blank>configuration.<S2SV_blank>\\n"" ""To<S2SV_blank>enable,<S2SV_blank>configure<S2SV_blank>with<S2SV_blank>--enable-libyuv\\n"" , stream -> index ) ; # endif } } # endif if ( img && ( img -> d_w != cfg -> g_w || img -> d_h != cfg -> g_h ) ) { if ( img -> fmt != VPX_IMG_FMT_I420 && img -> fmt != VPX_IMG_FMT_YV12 ) { fprintf ( stderr , ""%s<S2SV_blank>can<S2SV_blank>only<S2SV_blank>scale<S2SV_blank>4:2:0<S2SV_blank>8bpp<S2SV_blank>inputs\\n"" , exec_name ) ; exit ( EXIT_FAILURE ) ; } # if CONFIG_LIBYUV if ( ! stream -> img ) stream -> img = vpx_img_alloc ( NULL , VPX_IMG_FMT_I420 <S2SV_ModEnd> <S2SV_ModStart> # else stream -> encoder . err = 1 ; ctx_exit_on_error ( & stream -> encoder , ""Stream<S2SV_blank>%d:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>frame.\\n"" ""Scaling<S2SV_blank>disabled<S2SV_blank>in<S2SV_blank>this<S2SV_blank>configuration.<S2SV_blank>\\n"" ""To<S2SV_blank>enable,<S2SV_blank>configure<S2SV_blank>with<S2SV_blank>--enable-libyuv\\n"" , stream -> index ) ; # endif "
4634,<S2SV_StartBug> params -> buffer . fragments > SIZE_MAX / params -> buffer . fragment_size ) <S2SV_EndBug> ,<S2SV_ModStart> INT_MAX <S2SV_ModEnd> 
4635,<S2SV_StartBug> dev -> netdev_ops = & l2tp_eth_netdev_ops ; <S2SV_EndBug> ,<S2SV_ModStart> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> 
4636,"<S2SV_StartBug> int ret , wo ; <S2SV_EndBug> <S2SV_StartBug> wo = ( rbuf == NULL || rlen == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( wo ) <S2SV_EndBug> <S2SV_StartBug> rbuf , rlen , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( rlen > MAX_XFER_SIZE ) { warn ( ""i2c<S2SV_blank>rd:<S2SV_blank>len=%d<S2SV_blank>is<S2SV_blank>too<S2SV_blank>big!\\n"" , rlen ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> st -> data <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( ! ret && rbuf && rlen ) memcpy ( rbuf , st -> data , rlen "
4637,"<S2SV_StartBug> return r ? : __blkdev_driver_ioctl ( bdev , mode , cmd , arg ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( ! r && ti -> len != i_size_read ( bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL , cmd ) ; "
4638,"<S2SV_StartBug> cli_dbgmsg ( ""Possible<S2SV_blank>data<S2SV_blank>corruption<S2SV_blank>fixed\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * p ) <S2SV_EndBug> ","<S2SV_ModStart> if ( strlen ( p ) > 8 ) { <S2SV_ModStart> cli_dbgmsg ( ""Possible<S2SV_blank>data<S2SV_blank>corruption<S2SV_blank>not<S2SV_blank>fixed\\n"" ) ; } } else { "
4639,"<S2SV_StartBug> if ( dst_group && ! netlink_capable ( sock , NL_NONROOT_SEND ) ) <S2SV_EndBug> ",<S2SV_ModStart> ( dst_group || dst_pid ) <S2SV_ModEnd> 
4640,"<S2SV_StartBug> err = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( err <S2SV_ModEnd> "
4641,"<S2SV_StartBug> * ( int * ) pReplyData = Downmix_setParameter ( pDownmixer , * ( int32_t * ) cmd -> data , <S2SV_EndBug> ","<S2SV_ModStart> if ( cmd -> psize != sizeof ( int32_t ) ) { android_errorWriteLog ( 0x534e4554 , ""63662938"" ) ; return - EINVAL ; } "
4642,"<S2SV_StartBug> static void choose_intra_uv_mode ( VP9_COMP * cpi , PICK_MODE_CONTEXT * ctx , <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE * mode_uv ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> ","<S2SV_ModStart> MACROBLOCK * const x , <S2SV_ModStart> PREDICTION_MODE <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4643,"<S2SV_StartBug> void nfs4_close_state ( struct path * path , struct nfs4_state * state , mode_t mode ) <S2SV_EndBug> <S2SV_StartBug> __nfs4_close ( path , state , mode , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> fmode_t fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> 
4644,"<S2SV_StartBug> return mount_pseudo ( fs_type , ""aio:"" , NULL , & ops , AIO_RING_MAGIC ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> struct dentry * root = <S2SV_ModEnd> <S2SV_ModStart> if ( ! IS_ERR ( root ) ) root -> d_sb -> s_iflags |= SB_I_NOEXEC ; return root ; 
4645,"<S2SV_StartBug> uint32 rows , uint32 cols , int outskew , int inskew ) <S2SV_EndBug> ",<S2SV_ModStart> int64 <S2SV_ModEnd> 
4646,"<S2SV_StartBug> memcpy ( outbuffer , s -> str , XMLRPC_BUFSIZE ) ; <S2SV_EndBug> ","<S2SV_ModStart> s -> append_char ( s , 0 ) ; strncpy <S2SV_ModEnd> "
4647,<S2SV_StartBug> if ( request -> ssids [ i ] . ssid_len > <S2SV_EndBug> <S2SV_StartBug> request -> ssids [ i ] . ssid_len = nla_len ( attr ) ; <S2SV_EndBug> ,<S2SV_ModStart> request -> ssids [ i ] . ssid_len = nla_len ( attr ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
4648,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""%04x:%04x<S2SV_blank>"" , panid , EXTRACT_LE_16BITS ( p + 2 ) ) ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4649,<S2SV_StartBug> o4 = o * sizeof ( uint32_t ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( q + o >= e ) goto out ; 
4650,<S2SV_StartBug> for ( plane = 0 ; plane < 3 ; ++ plane ) { <S2SV_EndBug> <S2SV_StartBug> const int w = ( plane ? ( 1 + yuv_frame -> d_w ) / 2 : yuv_frame -> d_w ) ; <S2SV_EndBug> <S2SV_StartBug> const int h = ( plane ? ( 1 + yuv_frame -> d_h ) / 2 : yuv_frame -> d_h ) ; <S2SV_EndBug> <S2SV_StartBug> size_t needed = w ; <S2SV_EndBug> ,"<S2SV_ModStart> const int bytespp = ( yuv_frame -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 ; <S2SV_ModStart> vpx_img_plane_width ( yuv_frame , plane <S2SV_ModEnd> <S2SV_ModStart> vpx_img_plane_height ( yuv_frame , plane <S2SV_ModEnd> <S2SV_ModStart> * bytespp "
4651,"<S2SV_StartBug> struct keydata * keyptr ; <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = half_md4_transform ( hash , keyptr -> secret ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> unsigned int ret <S2SV_ModEnd> <S2SV_ModStart> md5_transform <S2SV_ModEnd> <S2SV_ModStart> random_int_secret ) ; ret = hash [ 0 ] <S2SV_ModEnd> 
4652,"<S2SV_StartBug> CallInfo * ci = next_ci ( L ) ; <S2SV_EndBug> <S2SV_StartBug> ci -> func = func ; <S2SV_EndBug> <S2SV_StartBug> CallInfo * ci = next_ci ( L ) ; <S2SV_EndBug> <S2SV_StartBug> checkstackp ( L , fsize , func ) ; <S2SV_EndBug> <S2SV_StartBug> checkstackp ( L , 1 , func ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; checkstackGCp ( L , LUA_MINSTACK , func ) ; L -> ci = ci <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> checkstackGCp <S2SV_ModEnd> <S2SV_ModStart> ) ; L -> ci = ci = next_ci ( L <S2SV_ModStart> checkstackGCp <S2SV_ModEnd> "
4653,"<S2SV_StartBug> ns_to_timespec ( cur_setting -> it_interval , timr -> it . mmtimer . incr * sgi_clock_period ) ; <S2SV_EndBug> <S2SV_StartBug> ns_to_timespec ( cur_setting -> it_value , ( timr -> it . mmtimer . expires - rtc_time ( ) ) * sgi_clock_period ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = ns_to_timespec ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> = ns_to_timespec ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4654,<S2SV_StartBug> snd_usbmidi_free ( umidi ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4655,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""[|icmp6]"" ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""%s"" , icmp6_tstr <S2SV_ModEnd> "
4656,"<S2SV_StartBug> clear_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ; <S2SV_EndBug> ","<S2SV_ModStart> mark_key_instantiated ( key , 0 <S2SV_ModEnd> "
4657,<S2SV_StartBug> sigev_none = ( timr -> it_sigev_notify & ~ SIGEV_THREAD_ID ) == SIGEV_NONE ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4658,<S2SV_StartBug> if ( server . vm_enabled ) <S2SV_EndBug> <S2SV_StartBug> if ( server . vm_enabled ) vmInit ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> ds_enabled <S2SV_ModEnd> <S2SV_ModStart> ds_enabled ) dsInit <S2SV_ModEnd> 
4659,"<S2SV_StartBug> assert_regexp_syntax_error ( "")"" ) ; <S2SV_EndBug> <S2SV_StartBug> ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>317<S2SV_blank>}"" , <S2SV_EndBug> <S2SV_StartBug> ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}?t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>314<S2SV_blank>}"" , <S2SV_EndBug> ","<S2SV_ModStart> assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""\\ta\\0b\\0c\\0"" ) ; assert_false_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""x\\0a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""x\\ta\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0\\t"" ) ; assert_false_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0x\\0"" ) ; assert_true_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""a\\0b\\0c\\0b\\t"" ) ; assert_false_rule_blob ( ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}"" , ""abc"" ) ; <S2SV_ModStart> ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>317<S2SV_blank>}"" <S2SV_ModEnd> <S2SV_ModStart> ""rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}?t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>314<S2SV_blank>}"" <S2SV_ModEnd> "
4660,<S2SV_StartBug> struct tcp_sock_t * tcp_socket ; <S2SV_EndBug> <S2SV_StartBug> while ( ( tcp_socket = tcp_open ( desired_port ) ) == NULL && <S2SV_EndBug> <S2SV_StartBug> g_options . only_desired_port == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> uint16_t real_port = tcp_port_number_get ( tcp_socket ) ; <S2SV_EndBug> <S2SV_StartBug> uint16_t pid ; <S2SV_EndBug> <S2SV_StartBug> args -> tcp = tcp_conn_accept ( tcp_socket ) ; <S2SV_EndBug> <S2SV_StartBug> cleanup_usb : <S2SV_EndBug> ,"<S2SV_ModStart> = NULL , * tcp6_socket = NULL ; for ( ; ; ) { <S2SV_ModEnd> <S2SV_ModStart> ; tcp6_socket = tcp6_open ( desired_port ) ; if ( tcp_socket || tcp6_socket || <S2SV_ModEnd> <S2SV_ModStart> ) break ; <S2SV_ModEnd> <S2SV_ModStart> NOTE ( ""Access<S2SV_blank>to<S2SV_blank>desired<S2SV_blank>port<S2SV_blank>failed,<S2SV_blank>trying<S2SV_blank>alternative<S2SV_blank>port<S2SV_blank>%d"" , desired_port ) ; } if ( tcp_socket == NULL && tcp6_socket <S2SV_ModEnd> <S2SV_ModStart> ; if ( tcp_socket ) real_port <S2SV_ModStart> ) ; else real_port = tcp_port_number_get ( tcp6_socket <S2SV_ModStart> NOTE ( ""Port:<S2SV_blank>%d,<S2SV_blank>IPv4<S2SV_blank>%savailable,<S2SV_blank>IPv6<S2SV_blank>%savailable"" , real_port , tcp_socket ? """" : ""not<S2SV_blank>"" , tcp6_socket ? """" : ""not<S2SV_blank>"" ) ; <S2SV_ModStart> tcp_conn_select ( tcp_socket , tcp6_socket <S2SV_ModEnd> <S2SV_ModStart> if ( tcp6_socket != NULL ) tcp_close ( tcp6_socket ) ; "
4661,"<S2SV_StartBug> file_sb_list_add ( f , inode -> i_sb ) ; <S2SV_EndBug> <S2SV_StartBug> file_sb_list_del ( f ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4662,<S2SV_StartBug> if ( * off >= skb -> len ) { <S2SV_EndBug> ,<S2SV_ModStart> && skb -> len 
4663,<S2SV_StartBug> if ( len < 1 ) <S2SV_EndBug> ,<S2SV_ModStart> 10 <S2SV_ModEnd> 
4664,"<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) <S2SV_EndBug> ",<S2SV_ModStart> key_is_negative ( key <S2SV_ModEnd> 
4665,"<S2SV_StartBug> page -> index , <S2SV_EndBug> ",<S2SV_ModStart> page_index ( page ) <S2SV_ModEnd> 
4666,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> unlink ( RUN_LIB_FILE ) ; 
4667,<S2SV_StartBug> if ( atomic_read ( & current -> mm -> mm_users ) > 1 ) <S2SV_EndBug> ,<S2SV_ModStart> 1 ) return - EINVAL ; if ( current -> fs -> users != 
4668,<S2SV_StartBug> if ( fibsize > ( dev -> max_fib_size - sizeof ( struct aac_fibhdr ) ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( fibsize < ( sizeof ( struct user_aac_srb ) - sizeof ( struct user_sgentry ) ) ) || ( <S2SV_ModStart> ) 
4669,"<S2SV_StartBug> mpz_t numer , denom , lambda ; <S2SV_EndBug> ",<S2SV_ModStart> if ( pointZZ_pIsIdentityElement ( op ) ) { return pointZZ_pSetToIdentityElement ( rop ) ; } 
4670,"<S2SV_StartBug> vpx_memset ( cpi -> gf_active_flags , 1 , ( cm -> mb_rows * cm -> mb_cols ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> 
4671,<S2SV_StartBug> void * H264SwDecMalloc ( u32 size ) <S2SV_EndBug> <S2SV_StartBug> numBytes += size ; <S2SV_EndBug> <S2SV_StartBug> return malloc ( size ) ; <S2SV_EndBug> ,"<S2SV_ModStart> , u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> <S2SV_ModStart> * num <S2SV_ModStart> * num "
4672,<S2SV_StartBug> bufp += bytes_read ; <S2SV_EndBug> ,<S2SV_ModStart> stripsize <S2SV_ModEnd> 
4673,<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( pool ) ; 
4674,<S2SV_StartBug> if ( ( creds -> pid == task_tgid_vnr ( current ) || nsown_capable ( CAP_SYS_ADMIN ) ) && <S2SV_EndBug> ,"<S2SV_ModStart> ns_capable ( current -> nsproxy -> pid_ns -> user_ns , <S2SV_ModEnd> "
4675,<S2SV_StartBug> coerce_reg_to_32 ( dst_reg ) ; <S2SV_EndBug> <S2SV_StartBug> coerce_reg_to_32 ( & src_reg ) ; <S2SV_EndBug> ,"<S2SV_ModStart> coerce_reg_to_size ( dst_reg , 4 ) ; coerce_reg_to_size <S2SV_ModEnd> <S2SV_ModStart> , 4 "
4676,<S2SV_StartBug> if ( key_is_instantiated ( key ) ) <S2SV_EndBug> ,<S2SV_ModStart> key_is_positive <S2SV_ModEnd> 
4677,<S2SV_StartBug> kfree ( tu -> queue ) ; <S2SV_EndBug> ,<S2SV_ModStart> tu -> qhead = tu -> qtail = tu -> qused = 0 ; 
4678,"<S2SV_StartBug> if ( unlikely ( path [ depth ] . p_ext > EXT_MAX_EXTENT ( path [ depth ] . p_hdr ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ext4_extent_block_csum_set ( inode , neh ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_extent_block_csum_set ( inode , neh ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t ext_size = 0 ; <S2SV_ModStart> ext_size = sizeof ( struct ext4_extent_header ) + sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ; memset ( bh -> b_data + ext_size , 0 , inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> ext_size = sizeof ( struct ext4_extent_header ) + ( sizeof ( struct ext4_extent ) * le16_to_cpu ( neh -> eh_entries ) ) ; memset ( bh -> b_data + ext_size , 0 , inode -> i_sb -> s_blocksize - ext_size ) ; "
4679,"<S2SV_StartBug> if ( ret ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! prph_info ) <S2SV_EndBug> <S2SV_StartBug> ctxt_info_gen3 = dma_alloc_coherent ( trans -> dev , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> goto err_free_prph_scratch ; <S2SV_ModEnd> <S2SV_ModStart> ) { ret = - ENOMEM ; goto err_free_prph_scratch ; } ctxt_info_gen3 = dma_alloc_coherent ( trans -> dev , sizeof ( * ctxt_info_gen3 ) , & trans_pcie -> ctxt_info_dma_addr , GFP_KERNEL ) ; if ( ! ctxt_info_gen3 ) { ret = - ENOMEM ; goto err_free_prph_info ; } ctxt_info_gen3 -> prph_info_base_addr = cpu_to_le64 ( trans_pcie -> prph_info_dma_addr ) ; ctxt_info_gen3 -> prph_scratch_base_addr = cpu_to_le64 ( trans_pcie -> prph_scratch_dma_addr ) ; ctxt_info_gen3 -> prph_scratch_size = cpu_to_le32 ( sizeof ( * prph_scratch ) ) ; ctxt_info_gen3 -> cr_head_idx_arr_base_addr = cpu_to_le64 ( trans_pcie -> rxq -> rb_stts_dma ) ; ctxt_info_gen3 -> tr_tail_idx_arr_base_addr = cpu_to_le64 ( trans_pcie -> rxq -> tr_tail_dma ) ; ctxt_info_gen3 -> cr_tail_idx_arr_base_addr = cpu_to_le64 ( trans_pcie -> rxq -> cr_tail_dma ) ; ctxt_info_gen3 -> cr_idx_arr_size = cpu_to_le16 ( IWL_NUM_OF_COMPLETION_RINGS ) ; ctxt_info_gen3 -> tr_idx_arr_size = cpu_to_le16 ( IWL_NUM_OF_TRANSFER_RINGS ) ; ctxt_info_gen3 -> mtr_base_addr = cpu_to_le64 ( trans_pcie -> txq [ trans_pcie -> cmd_queue ] -> dma_addr ) ; ctxt_info_gen3 -> mcr_base_addr = cpu_to_le64 ( trans_pcie -> rxq -> used_bd_dma ) ; ctxt_info_gen3 -> mtr_size = cpu_to_le16 ( TFD_QUEUE_CB_SIZE ( cmdq_size ) ) ; ctxt_info_gen3 -> mcr_size = cpu_to_le16 ( RX_QUEUE_CB_SIZE ( MQ_RX_TABLE_SIZE ) ) ; trans_pcie -> ctxt_info_gen3 = ctxt_info_gen3 ; trans_pcie -> prph_info = prph_info ; trans_pcie -> prph_scratch = prph_scratch ; iml_img = dma_alloc_coherent ( trans -> dev , trans -> iml_len , & trans_pcie -> iml_dma_addr , GFP_KERNEL ) ; if ( ! iml_img <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> err_free_prph_info : dma_free_coherent ( trans -> dev , sizeof ( * prph_info ) , prph_info , trans_pcie -> prph_info_dma_addr ) ; err_free_prph_scratch : dma_free_coherent ( trans -> dev , sizeof ( * prph_scratch ) , prph_scratch , trans_pcie -> prph_scratch_dma_addr ) ; return ret ; "
4680,<S2SV_StartBug> if ( ! s -> cdx [ i ] || ! s -> cdy [ i ] ) { <S2SV_EndBug> ,<S2SV_ModStart> s -> cdx [ i ] == 3 || s -> cdx [ i ] > 4 || <S2SV_ModStart> || s -> cdy [ i ] == 3 || s -> cdy [ i ] > 4 
4681,"<S2SV_StartBug> & msg -> addrto , & msg -> ifindex ) ; <S2SV_EndBug> <S2SV_StartBug> dbg ( ndp , ""rcvd<S2SV_blank>from:<S2SV_blank>%s,<S2SV_blank>ifindex:<S2SV_blank>%u"" , <S2SV_EndBug> <S2SV_StartBug> str_in6_addr ( & msg -> addrto ) , msg -> ifindex ) ; <S2SV_EndBug> ","<S2SV_ModStart> , & msg -> hoplimit <S2SV_ModStart> ""rcvd<S2SV_blank>from:<S2SV_blank>%s,<S2SV_blank>ifindex:<S2SV_blank>%u,<S2SV_blank>hoplimit:<S2SV_blank>%d"" <S2SV_ModEnd> <S2SV_ModStart> , msg -> hoplimit ) ; if ( msg -> hoplimit != 255 ) { warn ( ndp , ""ignoring<S2SV_blank>packet<S2SV_blank>with<S2SV_blank>bad<S2SV_blank>hop<S2SV_blank>limit<S2SV_blank>(%d)"" , msg -> hoplimit ) ; err = 0 ; goto free_msg ; } <S2SV_ModEnd> "
4682,<S2SV_StartBug> if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { <S2SV_EndBug> ,<S2SV_ModStart> i_lenEAttr > bs || iinfo -> i_lenAlloc > bs ) goto out ; if ( udf_file_entry_alloc_offset ( inode ) + iinfo -> i_lenAlloc > bs ) goto out ; if ( iinfo -> 
4683,"<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> iw_set_error ( rctx -> ctx , ""Compression<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>with<S2SV_blank>top-down<S2SV_blank>images"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> goto done ; <S2SV_ModStart> ; goto done 
4684,"<S2SV_StartBug> vp9_copy ( cm -> fc . coef_probs [ TX_4X4 ] , default_coef_probs_4x4 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_copy ( cm -> fc . coef_probs [ TX_8X8 ] , default_coef_probs_8x8 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_copy ( cm -> fc . coef_probs [ TX_16X16 ] , default_coef_probs_16x16 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_copy ( cm -> fc . coef_probs [ TX_32X32 ] , default_coef_probs_32x32 ) ; <S2SV_EndBug> ",<S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> 
4685,"<S2SV_StartBug> xmlNode * op_msg = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( sync_timer == NULL ) { <S2SV_EndBug> <S2SV_StartBug> crm_send_remote_msg ( private -> command . session , op_msg , private -> command . encrypted ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cib -> call_timeout > 0 ) { <S2SV_EndBug> <S2SV_StartBug> op_reply = crm_recv_remote_msg ( private -> command . session , private -> command . encrypted ) ; <S2SV_EndBug> <S2SV_StartBug> crm_element_value_int ( op_reply , F_CIB_CALLID , & reply_id ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int disconnected = 0 ; int remaining_time = 0 ; time_t start_time ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! ( call_options & cib_sync_call ) ) { <S2SV_ModStart> callback . session , op_msg , private -> command . encrypted ) ; } else { crm_send_remote_msg ( private -> command . <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> start_time = time ( NULL ) ; remaining_time = <S2SV_ModEnd> <S2SV_ModStart> ? cib -> call_timeout : 60 ; while ( remaining_time > 0 && ! disconnected <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> & <S2SV_ModStart> recv_buf , private -> command . encrypted , remaining_time * 1000 , & disconnected ) ; op_reply = crm_parse_remote_buffer ( & private -> command . recv_buf ) ; if ( ! op_reply <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> remaining_time = time ( NULL ) - start_time ; } if ( disconnected ) { crm_err ( ""Disconnected<S2SV_blank>while<S2SV_blank>waiting<S2SV_blank>for<S2SV_blank>reply."" ) ; return - ENOTCONN ; } else <S2SV_ModEnd> "
4686,"<S2SV_StartBug> pr_debug ( ""%p<S2SV_blank>%zu\\n"" , sk , len ) ; <S2SV_EndBug> <S2SV_StartBug> sockaddr -> sa_family = AF_NFC ; <S2SV_EndBug> ","<S2SV_ModStart> ; msg -> msg_namelen = 0 <S2SV_ModStart> memset ( sockaddr , 0 , sizeof ( * sockaddr ) ) ; "
4687,"<S2SV_StartBug> ghash_flush ( ctx , dctx ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! ctx -> gf128 ) return - ENOKEY ; 
4688,"<S2SV_StartBug> LPSTR tmp = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( NULL == tmp ) <S2SV_EndBug> ",<S2SV_ModStart> = NULL ; LPSTR tmp2 <S2SV_ModStart> { tmp2 <S2SV_ModEnd> <S2SV_ModStart> if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 ; } <S2SV_ModStart> tmp2 <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> tmp2 <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> tmp2 <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> tmp2 <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> tmp2 <S2SV_ModEnd> <S2SV_ModStart> ! tmp2 ) free ( tmp ) ; tmp = tmp2 ; if ( 
4689,"<S2SV_StartBug> int number_bidders , i , bid , best_bid ; <S2SV_EndBug> <S2SV_StartBug> for ( ; ; ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , n <S2SV_ModStart> n = 0 ; n < 25 ; ++ n <S2SV_ModEnd> <S2SV_ModStart> archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , ""Input<S2SV_blank>requires<S2SV_blank>too<S2SV_blank>many<S2SV_blank>filters<S2SV_blank>for<S2SV_blank>decoding"" ) ; return ( ARCHIVE_FATAL ) ; "
4690,<S2SV_StartBug> if ( newlen < SDS_MAX_PREALLOC ) <S2SV_EndBug> <S2SV_StartBug> hdrlen = sdsHdrSize ( type ) ; <S2SV_EndBug> ,<S2SV_ModStart> assert ( newlen > len ) ; <S2SV_ModStart> ) ; assert ( hdrlen + newlen + 1 > len 
4691,"<S2SV_StartBug> if ( ip_options_echo ( & icmp_param -> replyopts , skb ) ) <S2SV_EndBug> <S2SV_StartBug> if ( icmp_param -> replyopts . optlen ) { <S2SV_EndBug> <S2SV_StartBug> ipc . opt = & icmp_param -> replyopts ; <S2SV_EndBug> <S2SV_StartBug> daddr = icmp_param -> replyopts . faddr ; <S2SV_EndBug> ",<S2SV_ModStart> . opt . opt <S2SV_ModStart> opt . opt . <S2SV_ModStart> . opt ; if ( ipc . opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> . opt . opt 
4692,<S2SV_StartBug> if ( bmp_info . number_colors > GetBlobSize ( image ) ) <S2SV_EndBug> <S2SV_StartBug> * magick = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> if ( bmp_info . ba_offset != 0 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( offset < 0 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> ( MagickSizeType ) <S2SV_ModStart> offset = ( MagickOffsetType ) <S2SV_ModEnd> <S2SV_ModStart> ; if ( offset <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> TellBlob ( image ) ) || ( SeekBlob ( image , offset , SEEK_SET ) != offset ) <S2SV_ModEnd> <S2SV_ModStart> * magick = '\\0' ; <S2SV_ModEnd> "
4693,"<S2SV_StartBug> u_int tlen , pdu_type , pdu_len ; <S2SV_EndBug> <S2SV_StartBug> while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( rpki_rtr_pdu_print ( ndo , tptr , 8 ) ) <S2SV_EndBug> <S2SV_StartBug> tptr += pdu_len ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> len ) { u_int pdu_len = <S2SV_ModEnd> <S2SV_ModStart> pptr , len , 1 <S2SV_ModEnd> <S2SV_ModStart> ; len <S2SV_ModEnd> <S2SV_ModStart> pptr <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4694,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""%sBandwidth<S2SV_blank>Constraints<S2SV_blank>Model<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(%u)"" , <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , 4 ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( subl == 0 ) break ; <S2SV_ModStart>  <S2SV_ModEnd> 
4695,<S2SV_StartBug> settings . udpport = 11211 ; <S2SV_EndBug> ,<S2SV_ModStart> 0 <S2SV_ModEnd> 
4696,"<S2SV_StartBug> CU_add_test ( parserTestSuite , ""Parse<S2SV_blank>Exchange"" , test_parserComplete ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""Parse<S2SV_blank>hvi<S2SV_blank>check<S2SV_blank>fail"" , test_parser_hvi ) ; CU_add_test ( parserTestSuite , "
4697,<S2SV_StartBug> bprm -> interp = iname ; <S2SV_EndBug> ,"<S2SV_ModStart> retval = bprm_change_interp ( iname , bprm ) ; if ( retval < 0 ) goto _error <S2SV_ModEnd> "
4698,"<S2SV_StartBug> yyerror ( yyscanner , lex_env , ""unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer"" ) ; <S2SV_EndBug> <S2SV_StartBug> yyerror ( yyscanner , lex_env , ""unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer"" ) ; <S2SV_EndBug> <S2SV_StartBug> yyerror ( yyscanner , lex_env , ""unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""illegal<S2SV_blank>escape<S2SV_blank>sequence"" <S2SV_ModEnd> <S2SV_ModStart> ""illegal<S2SV_blank>escape<S2SV_blank>sequence"" <S2SV_ModEnd> <S2SV_ModStart> ""illegal<S2SV_blank>escape<S2SV_blank>sequence"" <S2SV_ModEnd> "
4699,"<S2SV_StartBug> unsigned int sse = INT_MAX , best_rd_sse = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> unsigned int zero_mv_sse = INT_MAX , best_sse = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> int sf_improved_mv_pred = cpi -> sf . improved_mv_pred ; <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> int parent_ref_valid = cpi -> oxcf . mr_encoder_id && cpi -> mr_low_res_mv_avail ; <S2SV_EndBug> <S2SV_StartBug> parent_ref_flag = ( cpi -> ref_frame_flags & VP8_GOLD_FRAME ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> mode_mv = mode_mv_sb [ sign_bias ] ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( mode_mv_sb , 0 , sizeof ( mode_mv_sb ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( & best_mbmode , 0 , sizeof ( best_mbmode ) ) ; <S2SV_EndBug> <S2SV_StartBug> get_predictor_pointers ( cpi , plane , recon_yoffset , recon_uvoffset ) ; <S2SV_EndBug> <S2SV_StartBug> calculate_zeromv_rd_adjustment ( cpi , x , & rd_adjustment ) ; <S2SV_EndBug> <S2SV_StartBug> distortion2 = vp8_variance16x16 ( <S2SV_EndBug> <S2SV_StartBug> distortion2 = vp8_variance16x16 <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . mr_encoder_id && ! parent_ref_valid ) <S2SV_EndBug> <S2SV_StartBug> if ( parent_ref_valid && parent_ref_frame ) <S2SV_EndBug> <S2SV_StartBug> if ( parent_ref_valid && parent_ref_frame && dissim <= 2 && <S2SV_EndBug> <S2SV_StartBug> if ( ! parent_ref_valid ) <S2SV_EndBug> <S2SV_StartBug> rate2 += vp8_mv_bit_cost ( & mode_mv [ NEWMV ] , & best_ref_mv , <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( this_mode == ZEROMV && sse < zero_mv_sse ) <S2SV_EndBug> <S2SV_StartBug> sse < best_sse ) <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & best_mbmode , & x -> e_mbd . mode_info_context -> mbmi , <S2SV_EndBug> <S2SV_StartBug> if ( x -> best_sse_inter_mode == DC_PRED ) <S2SV_EndBug> <S2SV_StartBug> vp8_denoiser_denoise_mb ( & cpi -> denoiser , x , best_sse , zero_mv_sse , <S2SV_EndBug> <S2SV_StartBug> recon_yoffset , recon_uvoffset ) ; <S2SV_EndBug> <S2SV_StartBug> if ( best_mbmode . ref_frame == INTRA_FRAME && <S2SV_EndBug> <S2SV_StartBug> rate2 = x -> ref_frame_cost [ this_ref_frame ] + <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & best_mbmode , & x -> e_mbd . mode_info_context -> mbmi , <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & x -> e_mbd . mode_info_context -> mbmi , & best_mbmode , <S2SV_EndBug> ","<S2SV_ModStart> UINT_MAX <S2SV_ModEnd> <S2SV_ModStart> UINT_MAX <S2SV_ModEnd> <S2SV_ModStart> UINT_MAX <S2SV_ModEnd> <S2SV_ModStart> UINT_MAX <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_MULTI_RES_ENCODING int dissim = INT_MAX ; int parent_ref_frame = 0 ; int_mv parent_ref_mv ; MB_PREDICTION_MODE parent_mode = 0 ; int parent_ref_valid = 0 ; # endif <S2SV_ModStart> int dot_artifact_candidate = 0 ; get_predictor_pointers ( cpi , plane , recon_yoffset , recon_uvoffset ) ; if ( cpi -> ref_frame_flags & VP8_LAST_FRAME ) { unsigned char * target_y = x -> src . y_buffer ; unsigned char * target_u = x -> block [ 16 ] . src + * x -> block [ 16 ] . base_src ; unsigned char * target_v = x -> block [ 20 ] . src + * x -> block [ 20 ] . base_src ; int stride = x -> src . y_stride ; int stride_uv = x -> block [ 16 ] . src_stride ; # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity ) { const int uv_denoise = ( cpi -> oxcf . noise_sensitivity >= 2 ) ? 1 : 0 ; target_y = cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] . y_buffer + recon_yoffset ; stride = cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] . y_stride ; if ( uv_denoise ) { target_u = cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] . u_buffer + recon_uvoffset ; target_v = cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] . v_buffer + recon_uvoffset ; stride_uv = cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] . uv_stride ; } } # endif dot_artifact_candidate = check_dot_artifact_candidate ( cpi , x , target_y , stride , plane [ LAST_FRAME ] [ 0 ] , mb_row , mb_col , 0 ) ; if ( ! dot_artifact_candidate ) { dot_artifact_candidate = check_dot_artifact_candidate ( cpi , x , target_u , stride_uv , plane [ LAST_FRAME ] [ 1 ] , mb_row , mb_col , 1 ) ; if ( ! dot_artifact_candidate ) { dot_artifact_candidate = check_dot_artifact_candidate ( cpi , x , target_v , stride_uv , plane [ LAST_FRAME ] [ 2 ] , mb_row , mb_col , 2 ) ; } } } # if CONFIG_MULTI_RES_ENCODING <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( dot_artifact_candidate ) parent_ref_valid = 0 ; <S2SV_ModStart> { const int y = x -> src . y_buffer [ 7 * x -> src . y_stride + 7 ] ; const int cb = x -> src . u_buffer [ 3 * x -> src . uv_stride + 3 ] ; const int cr = x -> src . v_buffer [ 3 * x -> src . uv_stride + 3 ] ; x -> is_skin = 0 ; if ( ! cpi -> oxcf . screen_content_mode ) x -> is_skin = is_skin_color ( y , cb , cr ) ; } # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity ) { } # endif <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> Speed < 12 ) { <S2SV_ModStart> } # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity ) { rd_adjustment = ( int ) ( rd_adjustment * cpi -> denoiser . denoise_pars . pickmode_mv_bias / 100 ) ; } # endif if ( dot_artifact_candidate ) { rd_adjustment = 150 ; } <S2SV_ModStart> vpx_variance16x16 <S2SV_ModEnd> <S2SV_ModStart> vpx_variance16x16 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ( parent_ref_frame == this_ref_frame ) <S2SV_ModEnd> <S2SV_ModStart> ( parent_ref_frame == this_ref_frame ) <S2SV_ModEnd> <S2SV_ModStart> || ( parent_ref_frame != this_ref_frame ) <S2SV_ModStart> vp8_clamp_mv2 ( & mode_mv [ this_mode ] , xd ) ; <S2SV_ModStart> int skip_old_reference = ( ( this_ref_frame != LAST_FRAME ) && ( cpi -> common . current_video_frame - cpi -> current_ref_frames [ this_ref_frame ] > MAX_GF_ARF_DENOISE_RANGE ) ) ? 1 : 0 ; <S2SV_ModStart> && ! skip_old_reference <S2SV_ModStart> && ! skip_old_reference <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> int block_index = mb_row * cpi -> common . mb_cols + mb_col ; int reevaluate = 0 ; int is_noisy = 0 ; <S2SV_ModStart> if ( cpi -> oxcf . noise_sensitivity == 4 ) { if ( cpi -> denoiser . nmse_source_diff > 70 * cpi -> denoiser . threshold_aggressive_mode / 100 ) is_noisy = 1 ; } else { if ( cpi -> mse_source_denoised > 1000 ) is_noisy = 1 ; } x -> increase_denoising = 0 ; if ( ! x -> is_skin && x -> best_sse_inter_mode == ZEROMV && ( x -> best_reference_frame == LAST_FRAME || x -> best_reference_frame == cpi -> closest_reference_frame ) && cpi -> consec_zero_last [ block_index ] >= 20 && is_noisy ) { x -> increase_denoising = 1 ; } x -> denoise_zeromv = 0 ; <S2SV_ModStart> , & cpi -> common . lf_info , mb_row , mb_col , block_index ) ; reevaluate = <S2SV_ModEnd> <S2SV_ModStart> ) || ( best_mbmode . mode != ZEROMV && x -> denoise_zeromv && cpi -> mse_source_denoised > 2000 ) ; if ( ! dot_artifact_candidate && reevaluate <S2SV_ModStart> rd_adjustment = 100 ; <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> "
4700,<S2SV_StartBug> if ( err ) <S2SV_EndBug> ,<S2SV_ModStart> < 0 
4701,<S2SV_StartBug> get_page ( page ) ; <S2SV_EndBug> ,<S2SV_ModStart> { if ( unlikely ( ! try_get_page ( page ) ) ) { page = ERR_PTR ( - ENOMEM ) ; goto out ; } } <S2SV_ModEnd> 
4702,"<S2SV_StartBug> int this_frame_target , <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> int recode_tolerance = <S2SV_EndBug> <S2SV_StartBug> ( cpi -> sf . recode_tolerance * this_frame_target ) / 100 ; <S2SV_EndBug> <S2SV_StartBug> * frame_over_shoot_limit = this_frame_target + recode_tolerance ; <S2SV_EndBug> <S2SV_StartBug> * frame_over_shoot_limit += 200 ; <S2SV_EndBug> <S2SV_StartBug> if ( * frame_over_shoot_limit > cpi -> rc . max_frame_bandwidth ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> frame_target <S2SV_ModEnd> <S2SV_ModStart> rc_mode == VPX_Q <S2SV_ModEnd> <S2SV_ModStart> const int tolerance <S2SV_ModEnd> <S2SV_ModStart> frame_target <S2SV_ModEnd> <S2SV_ModStart> frame_under_shoot_limit = MAX ( frame_target - tolerance - 200 , 0 ) <S2SV_ModEnd> <S2SV_ModStart> = MIN ( frame_target + tolerance + 200 , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4703,<S2SV_StartBug> if ( asn1_com_prkey_attr -> flags & SC_ASN1_PRESENT && <S2SV_EndBug> ,<S2SV_ModStart> free ( info . subject . value ) ; <S2SV_ModEnd> 
4704,<S2SV_StartBug> down_write ( & card -> controls_rwsem ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( id . index > UINT_MAX - kcontrol -> count ) goto error ; 
4705,<S2SV_StartBug> if ( ! fs_searchpaths ) <S2SV_EndBug> <S2SV_StartBug> for ( search = fs_searchpaths ; search ; search = search -> next ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> qboolean isLocalConfig ; <S2SV_ModStart> isLocalConfig = ! strcmp ( filename , ""autoexec.cfg"" ) || ! strcmp ( filename , Q3CONFIG_CFG ) ; <S2SV_ModStart> if ( isLocalConfig && search -> pack ) continue ; "
4706,<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug> ,<S2SV_ModStart> void 
4707,"<S2SV_StartBug> ret = arg ( name , annotation , LINENO ( n ) , n -> n_col_offset , <S2SV_EndBug> ","<S2SV_ModStart> NULL , "
4708,"<S2SV_StartBug> else if ( strcmp ( arg , ""@@"" ) == 0 || strcmp ( arg , ""@@u"" ) == 0 ) <S2SV_EndBug> ",<S2SV_ModStart> g_str_has_prefix <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4709,<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> LAYER_CONTEXT * const lc = get_layer_context ( & cpi -> svc ) ; <S2SV_EndBug> <S2SV_StartBug> lrc -> av_per_frame_bandwidth = ( int ) ( lc -> target_bandwidth / lc -> framerate ) ; <S2SV_EndBug> <S2SV_StartBug> lrc -> min_frame_bandwidth = ( int ) ( lrc -> av_per_frame_bandwidth * <S2SV_EndBug> <S2SV_StartBug> lrc -> max_frame_bandwidth = ( int ) ( ( ( int64_t ) lrc -> av_per_frame_bandwidth * <S2SV_EndBug> <S2SV_StartBug> lrc -> max_gf_interval = 16 ; <S2SV_EndBug> ,"<S2SV_ModStart> VP9EncoderConfig <S2SV_ModEnd> <S2SV_ModStart> cpi <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_ModStart> avg_frame_bandwidth <S2SV_ModEnd> <S2SV_ModStart> vp9_rc_set_gf_interval_range ( cpi , lrc ) <S2SV_ModEnd> "
4710,"<S2SV_StartBug> register int i ; <S2SV_EndBug> <S2SV_StartBug> raw_printf ( ""No<S2SV_blank>window<S2SV_blank>types?"" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( windowprocs . win_raw_print == def_raw_print <S2SV_EndBug> ","<S2SV_ModStart> int i ; char * tmps = 0 <S2SV_ModEnd> <S2SV_ModStart> ""No<S2SV_blank>window<S2SV_blank>types<S2SV_blank>supported?"" <S2SV_ModEnd> <S2SV_ModStart> # define WINDOW_TYPE_MAXLEN 50 if ( strlen ( s ) >= WINDOW_TYPE_MAXLEN ) { tmps = ( char * ) alloc ( WINDOW_TYPE_MAXLEN ) ; ( void ) strncpy ( tmps , s , WINDOW_TYPE_MAXLEN - 1 ) ; tmps [ WINDOW_TYPE_MAXLEN - 1 ] = '\\0' ; s = tmps ; } # undef WINDOW_TYPE_MAXLEN <S2SV_ModStart> tmps ) free ( ( genericptr_t ) tmps ) ; if ( "
4711,"<S2SV_StartBug> ihevcd_cabac_init ( & ps_codec -> s_parse . s_cabac , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ihevcd_cabac_init ( & ps_codec -> s_parse . s_cabac , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ihevcd_cabac_init ( & ps_codec -> s_parse . s_cabac , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ihevcd_cabac_init ( & ps_codec -> s_parse . s_cabac , <S2SV_EndBug> <S2SV_StartBug> ( const UWORD8 * ) & ps_codec -> s_parse . s_cabac . au1_ctxt_models_sync ) ; <S2SV_EndBug> <S2SV_StartBug> if ( 0 == end_of_pic ) <S2SV_EndBug> ",<S2SV_ModStart> ret = <S2SV_ModStart> if ( ret != ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ps_codec -> i4_slice_error = 1 ; end_of_slice_flag = 1 ; ret = ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ; } <S2SV_ModStart> ret = <S2SV_ModStart> if ( ret != ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ps_codec -> i4_slice_error = 1 ; end_of_slice_flag = 1 ; ret = ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ; } <S2SV_ModStart> ret = <S2SV_ModStart> if ( ret != ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ps_codec -> i4_slice_error = 1 ; end_of_slice_flag = 1 ; ret = ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ; } <S2SV_ModStart> ret = <S2SV_ModStart> if ( ret != ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ps_codec -> i4_slice_error = 1 ; end_of_slice_flag = 1 ; ret = ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ; } <S2SV_ModStart> ps_codec -> i4_slice_error = 0 ; 
4712,"<S2SV_StartBug> if ( NGX_DECLINED == ngx_http_auth_spnego_basic ( r , ctx , alcf ) ) { <S2SV_EndBug> ",<S2SV_ModStart> NGX_OK != <S2SV_ModEnd> 
4713,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""(ni:<S2SV_blank>ho=0x%04x<S2SV_blank>co=0x%04x)"" , <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ; ND_TCHECK_16BITS ( & bp [ i + 4 ] ) ; 
4714,<S2SV_StartBug> return sizeof ( vpx_codec_alg_priv_t ) ; <S2SV_EndBug> ,<S2SV_ModStart> ( void ) flags ; 
4715,"<S2SV_StartBug> dtls1_record_bitmap_update ( s , & ( s -> d1 -> bitmap ) ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4716,"<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( packets + 256UL , image -> rows * <S2SV_EndBug> ",<S2SV_ModStart> 257UL <S2SV_ModEnd> 
4717,<S2SV_StartBug> struct pipe_buffer * buf ; <S2SV_EndBug> <S2SV_StartBug> orig_sz = size ; <S2SV_EndBug> <S2SV_StartBug> if ( off ) <S2SV_EndBug> <S2SV_StartBug> size += off - pipe -> bufs [ idx ] . offset ; <S2SV_EndBug> <S2SV_StartBug> if ( size <= buf -> len ) <S2SV_EndBug> <S2SV_StartBug> size -= buf -> len ; <S2SV_EndBug> <S2SV_StartBug> buf -> len = size ; <S2SV_EndBug> <S2SV_StartBug> off = i -> iov_offset = buf -> offset + size ; <S2SV_EndBug> <S2SV_StartBug> i -> count -= orig_sz ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> struct pipe_buffer * buf ; size_t off = i -> iov_offset , left = size ; int idx = i -> idx ; <S2SV_ModStart> left <S2SV_ModEnd> <S2SV_ModStart> left <S2SV_ModEnd> <S2SV_ModStart> left <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> left ; <S2SV_ModEnd> <S2SV_ModStart> size ; pipe_truncate ( i ) <S2SV_ModEnd> "
4718,<S2SV_StartBug> if ( cs > CQSPI_MAX_CHIPSELECT ) { <S2SV_EndBug> ,<S2SV_ModStart> >= <S2SV_ModEnd> 
4719,"<S2SV_StartBug> goto unmap_pages ; <S2SV_EndBug> <S2SV_StartBug> kvm_iommu_put_pages ( kvm , slot -> base_gfn , gfn ) ; <S2SV_EndBug> ","<S2SV_ModStart> kvm_unpin_pages ( kvm , pfn , page_size ) ; <S2SV_ModStart> - slot -> base_gfn "
4720,"<S2SV_StartBug> struct key * find_keyring_by_name ( const char * name , bool skip_perm_check ) <S2SV_EndBug> <S2SV_StartBug> if ( ! skip_perm_check && <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> ","<S2SV_ModStart> uid_keyring <S2SV_ModEnd> <S2SV_ModStart> uid_keyring ) { if ( ! test_bit ( KEY_FLAG_UID_KEYRING , & keyring -> flags ) ) continue ; } else { if ( <S2SV_ModEnd> <S2SV_ModStart> } "
4721,<S2SV_StartBug> char * identifier ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INSUFFICIENT_MEMORY ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> r1 . o = function -> return_obj ; <S2SV_EndBug> <S2SV_StartBug> yr_modules_unload_all ( context ) ; <S2SV_EndBug> ,"<S2SV_ModStart> YR_OBJECT * * obj_ptr ; YR_ARENA * obj_arena ; <S2SV_ModStart> ; FAIL_ON_ERROR_WITH_CLEANUP ( yr_arena_create ( 1024 , 0 , & obj_arena ) , yr_free ( stack ) ) <S2SV_ModStart> assert ( sp == 0 ) ; <S2SV_ModStart> result = yr_object_copy ( function -> return_obj , & <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( result == ERROR_SUCCESS ) result = yr_arena_write_data ( obj_arena , & r1 . o , sizeof ( r1 . o ) , NULL ) ; stop = ( result != ERROR_SUCCESS ) ; push ( r1 ) ; <S2SV_ModEnd> <S2SV_ModStart> obj_ptr = ( YR_OBJECT * * ) yr_arena_base_address ( obj_arena ) ; while ( obj_ptr != NULL ) { yr_object_destroy ( * obj_ptr ) ; obj_ptr = ( YR_OBJECT * * ) yr_arena_next_address ( obj_arena , obj_ptr , sizeof ( YR_OBJECT * ) ) ; } yr_arena_destroy ( obj_arena ) ; "
4722,"<S2SV_StartBug> res = ctx -> iface -> dec . get_si ( ctx -> priv -> alg_priv , si ) ; <S2SV_EndBug> ",<S2SV_ModStart> get_alg_priv ( ctx ) <S2SV_ModEnd> 
4723,<S2SV_StartBug> static void nsc_encode_subsampling ( NSC_CONTEXT * context ) <S2SV_EndBug> <S2SV_StartBug> BYTE * co_dst ; <S2SV_EndBug> <S2SV_StartBug> UINT32 tempHeight ; <S2SV_EndBug> <S2SV_StartBug> for ( y = 0 ; y < tempHeight >> 1 ; y ++ ) <S2SV_EndBug> <S2SV_StartBug> co_dst = context -> priv -> PlaneBuffers [ 1 ] + y * ( tempWidth >> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> cg_dst = context -> priv -> PlaneBuffers [ 2 ] + y * ( tempWidth >> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> co_src0 = ( INT8 * ) context -> priv -> PlaneBuffers [ 1 ] + ( y << 1 ) * tempWidth ; <S2SV_EndBug> <S2SV_StartBug> co_src1 = co_src0 + tempWidth ; <S2SV_EndBug> <S2SV_StartBug> cg_src0 = ( INT8 * ) context -> priv -> PlaneBuffers [ 2 ] + ( y << 1 ) * tempWidth ; <S2SV_EndBug> <S2SV_StartBug> cg_src1 = cg_src0 + tempWidth ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! context ) return FALSE <S2SV_ModStart> if ( tempHeight == 0 ) return FALSE ; if ( tempWidth > context -> priv -> PlaneBuffersLength / tempHeight ) return FALSE ; <S2SV_ModStart> BYTE * <S2SV_ModStart> BYTE * <S2SV_ModStart> const INT8 * <S2SV_ModStart> const INT8 * <S2SV_ModStart> const INT8 * <S2SV_ModStart> const INT8 * <S2SV_ModStart> return TRUE ; 
4724,"<S2SV_StartBug> ngx_http_lua_copy_request_headers ( ngx_http_request_t * sr , ngx_http_request_t * r ) <S2SV_EndBug> <S2SV_StartBug> ngx_table_elt_t * header ; <S2SV_EndBug> <S2SV_StartBug> ngx_uint_t i ; <S2SV_EndBug> <S2SV_StartBug> dd ( ""before:<S2SV_blank>parent<S2SV_blank>req<S2SV_blank>headers<S2SV_blank>count:<S2SV_blank>%d"" , <S2SV_EndBug> <S2SV_StartBug> ( int ) r -> headers_in . headers . part . nelts ) ; <S2SV_EndBug> <S2SV_StartBug> if ( part -> next == NULL ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ( int ) r -> headers_in . headers . part . nelts ) ; <S2SV_EndBug> ","<S2SV_ModStart> pr , int pr_not_chunked <S2SV_ModEnd> <S2SV_ModStart> clh , * <S2SV_ModStart> ; u_char * p ; off_t len ; dd ( ""before:<S2SV_blank>parent<S2SV_blank>req<S2SV_blank>headers<S2SV_blank>count:<S2SV_blank>%d"" , ( int ) pr -> headers_in . headers . part . nelts ) <S2SV_ModStart> if ( sr -> request_body && ! pr_not_chunked ) { len = sr -> request_body -> buf ? ngx_buf_size ( sr -> request_body -> buf ) : 0 ; clh = ngx_list_push ( & sr <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( clh <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> clh -> hash = ngx_http_lua_content_length_hash ; clh -> key = ngx_http_lua_content_length_header_key ; clh -> lowcase_key = ngx_pnalloc ( sr -> pool , clh -> key . len ) ; if ( clh -> lowcase_key == NULL ) { return NGX_ERROR ; } ngx_strlow ( clh -> lowcase_key , clh -> key . data , clh -> key . len ) ; p = ngx_palloc ( sr -> pool , NGX_OFF_T_LEN ) ; if ( p == NULL ) { return NGX_ERROR ; } clh -> value . data = p ; clh -> value . len = ngx_sprintf ( clh -> value . data , ""%O"" , len ) - clh -> value . data ; sr -> headers_in . content_length = clh ; sr -> headers_in . content_length_n = len ; dd ( ""sr<S2SV_blank>crafted<S2SV_blank>content-length:<S2SV_blank>%.*s"" , ( int ) sr -> headers_in . content_length -> value . len , sr -> headers_in . content_length -> value . data ) ; } part = & pr -> headers_in . headers . part ; header = part -> elts ; for ( i = 0 ; ; i ++ ) { if ( i >= part -> nelts ) { if ( part -> next == NULL ) { break ; } part = part -> next ; header = part -> elts ; i = 0 ; } if ( ! pr_not_chunked && header [ i ] . key . len == sizeof ( ""Content-Length"" ) - 1 && ngx_strncasecmp ( header [ i ] . key . data , ( u_char * ) ""Content-Length"" , sizeof ( ""Content-Length"" ) - 1 ) == 0 ) { continue ; } dd ( ""sr<S2SV_blank>copied<S2SV_blank>req<S2SV_blank>header<S2SV_blank>%.*s:<S2SV_blank>%.*s"" , ( int ) header [ i ] . key . len , header [ i ] . key . data , ( int ) header [ i ] . value . len , header [ i ] . value . data ) ; if ( ngx_http_lua_set_input_header ( sr , header [ i ] . key , header [ i ] . value , 0 ) == NGX_ERROR ) { return NGX_ERROR ; } } dd ( <S2SV_ModEnd> <S2SV_ModStart> pr <S2SV_ModEnd> "
4725,"<S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ BLOCK_16X16 ] ; <S2SV_EndBug> <S2SV_StartBug> int step_param = cpi -> sf . reduce_first_step_size + <S2SV_EndBug> <S2SV_StartBug> step_param = MIN ( step_param , ( cpi -> sf . max_step_search_steps - 2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_hex_search ( x , & ref_full , step_param , x -> errorperbit , 0 , & v_fn_ptr , 0 , <S2SV_EndBug> <S2SV_StartBug> & v_fn_ptr , 0 , cpi -> sf . subpel_iters_per_step , NULL , NULL , & distortion , <S2SV_EndBug> <S2SV_StartBug> & sse ) ; <S2SV_EndBug> <S2SV_StartBug> return vp9_sad16x16 ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_EndBug> <S2SV_StartBug> xd -> plane [ 0 ] . dst . buf , xd -> plane [ 0 ] . dst . stride , <S2SV_EndBug> ","<S2SV_ModStart> td . <S2SV_ModStart> const MV_SPEED_FEATURES * const mv_sf = & cpi -> sf . mv ; const <S2SV_ModStart> cost_list [ 5 ] ; int step_param = mv_sf -> reduce_first_step_size <S2SV_ModEnd> <S2SV_ModStart> MAX_MVSEARCH_STEPS - 2 <S2SV_ModEnd> <S2SV_ModStart> cond_cost_list ( cpi , cost_list ) , <S2SV_ModStart> mv_sf -> subpel_iters_per_step , cond_cost_list ( cpi , cost_list ) , <S2SV_ModEnd> <S2SV_ModStart> , NULL , 0 , 0 <S2SV_ModStart> vpx_sad16x16 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4726,"<S2SV_StartBug> int secure_decrypt ( void * data , unsigned int data_length , int is_signed ) <S2SV_EndBug> <S2SV_StartBug> at91_aes_key_size_t key_size ; <S2SV_EndBug> <S2SV_StartBug> init_keys ( & key_size , cipher_key , cmac_key , iv ) ; <S2SV_EndBug> <S2SV_StartBug> memset ( cmac_key , 0 , sizeof ( cmac_key ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> static <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> # if defined ( CONFIG_AES_KEY_SIZE_128 ) key_size = AT91_AES_KEY_SIZE_128 ; # elif defined ( CONFIG_AES_KEY_SIZE_192 ) key_size = AT91_AES_KEY_SIZE_192 ; # elif defined ( CONFIG_AES_KEY_SIZE_256 ) key_size = AT91_AES_KEY_SIZE_256 ; # else # error ""bad<S2SV_blank>AES<S2SV_blank>key<S2SV_blank>size"" # endif <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4727,"<S2SV_StartBug> o = 2 ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < nelements ; j ++ , i ++ ) { <S2SV_EndBug> ","<S2SV_ModStart> if ( nelements == 0 ) { DPRINTF ( ( ""CDF_VECTOR<S2SV_blank>with<S2SV_blank>nelements<S2SV_blank>==<S2SV_blank>0\\n"" ) ) ; goto out ; } <S2SV_ModStart> && i < sh . sh_properties ; <S2SV_ModEnd> "
4728,<S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> pr_err ( ""%s:<S2SV_blank>invalid<S2SV_blank>bar<S2SV_blank>type<S2SV_blank>%d\\n"" , __func__ , type ) ; return <S2SV_ModEnd> "
4729,<S2SV_StartBug> if ( image_info -> ping != MagickFalse ) <S2SV_EndBug> ,"<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
4730,<S2SV_StartBug> if ( ! adis -> buffer ) <S2SV_EndBug> <S2SV_StartBug> tx = adis -> buffer + burst_length ; <S2SV_EndBug> ,<S2SV_ModStart> { kfree ( adis -> xfer ) ; adis -> xfer = NULL ; <S2SV_ModStart> } 
4731,<S2SV_StartBug> dst_reg -> id = ptr_reg -> id ; <S2SV_EndBug> <S2SV_StartBug> __update_reg_bounds ( dst_reg ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( ! check_reg_sane_offset ( env , off_reg , ptr_reg -> type ) || ! check_reg_sane_offset ( env , ptr_reg , ptr_reg -> type ) ) return - EINVAL <S2SV_ModStart> if ( ! check_reg_sane_offset ( env , dst_reg , ptr_reg -> type ) ) return - EINVAL ; "
4732,"<S2SV_StartBug> Com_Printf ( ""Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; return ; } if ( ! COM_CompareExtension ( filename , "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\"".cfg\\""<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"" "
4733,<S2SV_StartBug> usleep ( 250000 ) ; <S2SV_EndBug> ,<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
4734,"<S2SV_StartBug> static void update_mv_probs ( vp9_prob * p , int n , vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> if ( vp9_read ( r , MV_UPDATE_PROB ) ) <S2SV_EndBug> <S2SV_StartBug> p [ i ] = ( vp9_read_literal ( r , 7 ) << 1 ) | 1 ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_reader <S2SV_ModEnd> <S2SV_ModStart> vpx_read <S2SV_ModEnd> <S2SV_ModStart> vpx_read_literal <S2SV_ModEnd> 
4735,"<S2SV_StartBug> if ( copy_to_user ( uaddr , ( ( u32 * ) regs ) + off , KVM_REG_SIZE ( reg -> id ) ) ) <S2SV_EndBug> ",<S2SV_ModStart> validate_core_offset ( reg ) ) return - EINVAL ; if ( 
4736,<S2SV_StartBug> mk_vhost_close ( sr ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( sr -> fd_is_fdt == MK_TRUE ) { <S2SV_ModStart> } else { close ( sr -> fd_file ) ; } 
4737,<S2SV_StartBug> while ( ( tmpName [ i ] != 0 ) && ( i < to_read ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( i < to_read ) && <S2SV_ModStart>  <S2SV_ModEnd> 
4738,"<S2SV_StartBug> int err = 0 ; <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_zeroout ( inode , & orig_ex ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; BUG_ON ( ( split_flag & ( EXT4_EXT_DATA_VALID1 | EXT4_EXT_DATA_VALID2 ) ) == ( EXT4_EXT_DATA_VALID1 | EXT4_EXT_DATA_VALID2 ) ) <S2SV_ModStart> if ( split_flag & ( EXT4_EXT_DATA_VALID1 | EXT4_EXT_DATA_VALID2 ) ) { if ( split_flag & EXT4_EXT_DATA_VALID1 ) err = ext4_ext_zeroout ( inode , ex2 ) ; else err = ext4_ext_zeroout ( inode , ex ) ; } else "
4739,"<S2SV_StartBug> long rem ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & rem ) ; <S2SV_EndBug> ",<S2SV_ModStart> u32 <S2SV_ModEnd> <S2SV_ModStart> div_u64_rem <S2SV_ModEnd> 
4740,<S2SV_StartBug> hndl = sock_diag_lock_handler ( req -> sdiag_family ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( req -> sdiag_family >= AF_MAX ) return - EINVAL ; 
4741,<S2SV_StartBug> goto end ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4742,"<S2SV_StartBug> l2tp_bearer_type_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> const uint32_t * ptr = ( const uint32_t * ) dat ; <S2SV_EndBug> ","<S2SV_ModStart> , u_int length <S2SV_ModStart> if ( length < 4 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } "
4743,"<S2SV_StartBug> # line 94 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 95 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 96 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 97 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 100 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 99 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 98 ""hex_grammar.y"" <S2SV_EndBug> ","<S2SV_ModStart> 101 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1030 <S2SV_ModEnd> <S2SV_ModStart> 102 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1036 <S2SV_ModEnd> <S2SV_ModStart> 103 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1042 <S2SV_ModEnd> <S2SV_ModStart> 104 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1048 <S2SV_ModEnd> <S2SV_ModStart> 107 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1054 <S2SV_ModEnd> <S2SV_ModStart> 106 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1060 <S2SV_ModEnd> <S2SV_ModStart> 105 ""hex_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1066 <S2SV_ModEnd> "
4744,"<S2SV_StartBug> if ( ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ) , index_key ) ) { <S2SV_EndBug> ",<S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && 
4745,"<S2SV_StartBug> if ( memcmp ( & name [ 2 ] , & content_name [ 2 ] , 31L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( memcmp ( & name [ 33 ] , & content_name [ 33 ] , 8L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . content = fi ; <S2SV_EndBug> <S2SV_StartBug> else if ( memcmp ( & name [ 33 ] , & control_name [ 33 ] , 11L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . control = fi ; <S2SV_EndBug> <S2SV_StartBug> else if ( memcmp ( & name [ 33 ] , & spaninfo_name [ 33 ] , 8L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . spaninfo = fi ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> name_len == 40 && memcmp ( name , content_name , 40 <S2SV_ModEnd> <S2SV_ModStart> chm -> sec1 . content = fi ; } else if ( name_len == 44 && memcmp ( name , control_name , 44 <S2SV_ModEnd> <S2SV_ModStart> control <S2SV_ModEnd> <S2SV_ModStart> name_len == 41 && memcmp ( name , spaninfo_name , 41 <S2SV_ModEnd> <S2SV_ModStart> spaninfo <S2SV_ModEnd> <S2SV_ModStart> name_len == 105 && memcmp ( name , rtable_name , 105 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4746,"<S2SV_StartBug> const char * args [ 11 ] ; <S2SV_EndBug> <S2SV_StartBug> args [ i ++ ] = ""--"" ; <S2SV_EndBug> <S2SV_StartBug> execvp ( EXECUTABLE , ( char * * ) args ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> char tmp_directory [ ] = LARGE_DATA_TMP_DIR ""/abrt-tmp-debuginfo.XXXXXX"" ; if ( mkdtemp ( tmp_directory ) == NULL ) perror_msg_and_die ( ""Failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>working<S2SV_blank>directory"" ) ; log_info ( ""Created<S2SV_blank>working<S2SV_blank>directory:<S2SV_blank>%s"" , tmp_directory ) ; const char * args [ 13 <S2SV_ModEnd> <S2SV_ModStart> ""--tmpdir"" ; args [ i ++ ] = tmp_directory ; args [ i ++ ] = <S2SV_ModStart> pid_t pid = fork ( ) ; if ( pid < 0 ) perror_msg_and_die ( ""fork"" ) ; if ( pid == 0 ) { <S2SV_ModStart> int status ; if ( safe_waitpid ( pid , & status , 0 ) < 0 ) perror_msg_and_die ( ""waitpid"" ) ; if ( rmdir ( tmp_directory ) >= 0 ) log_info ( ""Removed<S2SV_blank>working<S2SV_blank>directory:<S2SV_blank>%s"" , tmp_directory ) ; else if ( errno != ENOENT ) perror_msg ( ""Failed<S2SV_blank>to<S2SV_blank>remove<S2SV_blank>working<S2SV_blank>directory"" ) ; if ( WIFEXITED ( status ) ) return WEXITSTATUS ( status ) ; if ( WIFSIGNALED ( status ) ) error_msg_and_die ( ""Child<S2SV_blank>terminated<S2SV_blank>with<S2SV_blank>signal<S2SV_blank>%d"" , WTERMSIG ( status ) ) ; error_msg_and_die ( ""Child<S2SV_blank>exit<S2SV_blank>failed"" ) ; } "
4747,<S2SV_StartBug> newinet -> opt = ireq -> opt ; <S2SV_EndBug> ,<S2SV_ModStart> inet_opt <S2SV_ModEnd> 
4748,"<S2SV_StartBug> isoclns_print ( ndo , p - 1 , length + 1 , ndo -> ndo_snapend - p + 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; break ; case NLPID_SNAP : if ( snap_print ( ndo , p , length <S2SV_ModStart>  <S2SV_ModEnd> "
4749,<S2SV_StartBug> return 1 ; <S2SV_EndBug> ,"<S2SV_ModStart> # if OPENSSL_VERSION_NUMBER > 0x10002000L lua_pushliteral ( L , ""check_flag"" ) ; lua_newtable ( L ) ; auxiliar_enumerate ( L , - 1 , check_flags_const ) ; lua_settable ( L , - 3 ) ; # endif "
4750,<S2SV_StartBug> struct perf_event_context * ctx = event -> ctx ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> ,"<S2SV_ModStart> ; ctx = perf_event_ctx_lock <S2SV_ModEnd> <S2SV_ModStart> _perf_event_enable ( event ) ; perf_event_ctx_unlock ( event , ctx <S2SV_ModEnd> "
4751,"<S2SV_StartBug> validate_event ( struct pmu_hw_events * hw_events , <S2SV_EndBug> <S2SV_StartBug> struct arm_pmu * armpmu = to_arm_pmu ( event -> pmu ) ; <S2SV_EndBug> <S2SV_StartBug> if ( event -> pmu != leader_pmu || event -> state < PERF_EVENT_STATE_OFF ) <S2SV_EndBug> <S2SV_StartBug> return armpmu -> get_event_idx ( hw_events , & fake_event ) >= 0 ; <S2SV_EndBug> ","<S2SV_ModStart> struct pmu * pmu , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pmu ) return 0 ; if ( event -> pmu != <S2SV_ModStart> armpmu = to_arm_pmu ( event -> pmu ) ; "
4752,<S2SV_StartBug> BOOL ret = FALSE ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> data = NULL ; <S2SV_EndBug> <S2SV_StartBug> ret = TRUE ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> err <S2SV_ModEnd> <S2SV_ModStart> return TRUE ; err : sud -> directory <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> FALSE <S2SV_ModEnd> 
4753,<S2SV_StartBug> u8 opcode = BPF_OP ( insn -> code ) ; <S2SV_EndBug> <S2SV_StartBug> if ( known && ( ptr_reg -> off + smin_val == <S2SV_EndBug> <S2SV_StartBug> if ( dst_reg == off_reg ) { <S2SV_EndBug> ,"<S2SV_ModStart> ; int ret <S2SV_ModStart> ret = sanitize_ptr_alu ( env , insn , ptr_reg , dst_reg , smin_val < 0 ) ; if ( ret < 0 ) { verbose ( env , ""R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>add<S2SV_blank>from<S2SV_blank>different<S2SV_blank>maps<S2SV_blank>or<S2SV_blank>paths\\n"" , dst ) ; return ret ; } <S2SV_ModStart> ret = sanitize_ptr_alu ( env , insn , ptr_reg , dst_reg , smin_val < 0 ) ; if ( ret < 0 ) { verbose ( env , ""R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>sub<S2SV_blank>from<S2SV_blank>different<S2SV_blank>maps<S2SV_blank>or<S2SV_blank>paths\\n"" , dst ) ; return ret ; } "
4754,"<S2SV_StartBug> struct mb_cache_entry * ce = NULL ; <S2SV_EndBug> <S2SV_StartBug> struct mb_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_get ( ext4_mb_cache , bs -> bh -> b_bdev , <S2SV_EndBug> <S2SV_StartBug> if ( ce ) { <S2SV_EndBug> <S2SV_StartBug> if ( ce ) { <S2SV_EndBug> <S2SV_StartBug> le32_add_cpu ( & BHDR ( new_bh ) -> h_refcount , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_release ( ce ) ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_release ( ce ) ; <S2SV_EndBug> ","<S2SV_ModStart> mb2_cache_entry <S2SV_ModEnd> <S2SV_ModStart> mb2_cache <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> __u32 hash = le32_to_cpu ( BHDR ( bs -> bh ) -> h_hash ) ; mb2_cache_entry_delete_block ( ext4_mb_cache , hash , bs -> bh -> b_blocknr ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( hlist_bl_unhashed ( & ce -> e_hash_list ) ) { unlock_buffer ( new_bh ) ; dquot_free_block ( inode , EXT4_C2B ( EXT4_SB ( sb ) , 1 ) ) ; brelse ( new_bh ) ; mb2_cache_entry_put ( ext4_mb_cache , ce ) ; ce = NULL ; new_bh = NULL ; goto inserted ; } <S2SV_ModStart> mb2_cache_entry_touch ( ext4_mb_cache , ce ) ; mb2_cache_entry_put ( ext4_mb_cache , <S2SV_ModEnd> <S2SV_ModStart> mb2_cache_entry_put ( ext4_mb_cache , <S2SV_ModEnd> "
4755,"
","
"
4756,"<S2SV_StartBug> struct in6_addr * addr , uint32_t * ifindex ) <S2SV_EndBug> <S2SV_StartBug> unsigned char cbuf [ CMSG_SPACE ( sizeof ( struct in6_pktinfo ) ) ] ; <S2SV_EndBug> <S2SV_StartBug> if ( cmsghdr -> cmsg_level == IPPROTO_IPV6 && <S2SV_EndBug> <S2SV_StartBug> cmsghdr -> cmsg_type == IPV6_PKTINFO && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , int * hoplimit <S2SV_ModStart> 2 * <S2SV_ModStart> != IPPROTO_IPV6 ) continue ; switch ( <S2SV_ModEnd> <S2SV_ModStart> ) { case IPV6_PKTINFO : if ( <S2SV_ModEnd> <S2SV_ModStart> break ; case IPV6_HOPLIMIT : if ( cmsghdr -> cmsg_len == CMSG_LEN ( sizeof ( int ) ) ) { int * val ; val = ( int * ) CMSG_DATA ( cmsghdr ) ; * hoplimit = * val ; } break ; } "
4757,<S2SV_StartBug> if ( mode > 0 ) { <S2SV_EndBug> ,<S2SV_ModStart> != MODE_INVALID <S2SV_ModEnd> 
4758,"<S2SV_StartBug> struct address_space * mapping = inode -> i_mapping ; <S2SV_EndBug> <S2SV_StartBug> if ( mapping -> nrpages && mapping_tagged ( mapping , PAGECACHE_TAG_DIRTY ) ) { <S2SV_EndBug> <S2SV_StartBug> truncate_pagecache_range ( inode , start , end - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> flags , mode ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) ; up_write ( & EXT4_I ( inode ) -> i_mmap_sem 
4759,"<S2SV_StartBug> memcpy ( tp -> fw_ver , & vpd_data [ j ] , len ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( tp -> fw_ver , ""<S2SV_blank>bc<S2SV_blank>"" , vpdlen - len - 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( len >= sizeof <S2SV_ModEnd> <S2SV_ModStart> ) ) len = sizeof <S2SV_ModEnd> <S2SV_ModStart> ) - 1 ; memset ( tp -> fw_ver , 0 , sizeof ( tp -> fw_ver ) ) ; snprintf ( tp -> fw_ver , sizeof ( tp -> fw_ver ) , ""%.*s<S2SV_blank>bc<S2SV_blank>"" , len , & vpd_data [ j ] <S2SV_ModEnd> "
4760,<S2SV_StartBug> path -> mnt = mntget ( nd -> path . mnt ) ; <S2SV_EndBug> <S2SV_StartBug> follow_mount ( path ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mntget ( path -> mnt ) ; 
4761,<S2SV_StartBug> i ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( test_bit ( WDM_OVERFLOW , & desc -> flags ) ) { clear_bit ( WDM_OVERFLOW , & desc -> flags ) ; rv = - ENOBUFS ; goto err ; } "
4762,"<S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MIREGADR , address & REG_ADDR_MASK ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MICMD , MICMD_MIIRD ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( enc28j60ReadReg ( interface , ENC28J60_REG_MISTAT ) & MISTAT_BUSY ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MICMD , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> data = enc28j60ReadReg ( interface , ENC28J60_REG_MIRDL ) ; <S2SV_EndBug> <S2SV_StartBug> data |= enc28j60ReadReg ( interface , ENC28J60_REG_MIRDH ) << 8 ; <S2SV_EndBug> ","<S2SV_ModStart> ENC28J60_MIREGADR <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_MICMD , ENC28J60_MICMD_MIIRD <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_MICMD <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_MIRDL <S2SV_ModEnd> <S2SV_ModStart> ENC28J60_MIRDH <S2SV_ModEnd> "
4763,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> sas_destruct_devices ( port ) ; sas_destruct_ports ( port ) ; sas_probe_devices ( port ) ; 
4764,"<S2SV_StartBug> mptctl_readtest ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> MPT_ADAPTER * ioc ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( iocnum = mpt_verify_adapter ( karg . hdr . iocnum , & ioc ) ) < 0 ) || <S2SV_EndBug> ","<S2SV_ModStart> MPT_ADAPTER * ioc , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4765,"<S2SV_StartBug> static void choose_partitioning ( VP9_COMP * cpi , <S2SV_EndBug> <S2SV_StartBug> int mi_row , int mi_col ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> int i , j , k ; <S2SV_EndBug> <S2SV_StartBug> v64x64 vt ; <S2SV_EndBug> <S2SV_StartBug> int_mv nearest_mv , near_mv ; <S2SV_EndBug> <S2SV_StartBug> const struct scale_factors * const sf = & cm -> frame_refs [ LAST_FRAME - 1 ] . sf ; <S2SV_EndBug> <S2SV_StartBug> set_offsets ( cpi , tile , mi_row , mi_col , BLOCK_64X64 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( xd -> mb_to_right_edge < 0 ) <S2SV_EndBug> <S2SV_StartBug> vp9_setup_pre_planes ( xd , 0 , yv12 , mi_row , mi_col , sf ) ; <S2SV_EndBug> <S2SV_StartBug> dp = xd -> plane [ 0 ] . dst . stride ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < 4 ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> const int y16_idx = y32_idx + ( ( j >> 1 ) << 4 ) ; <S2SV_EndBug> <S2SV_StartBug> for ( k = 0 ; k < 4 ; k ++ ) { <S2SV_EndBug> <S2SV_StartBug> int x_idx = x16_idx + ( ( k & 1 ) << 3 ) ; <S2SV_EndBug> <S2SV_StartBug> int y_idx = y16_idx + ( ( k >> 1 ) << 3 ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned int sse = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < 4 ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> fill_variance_tree ( & vt . split [ i ] . split [ j ] , BLOCK_16X16 ) ; <S2SV_EndBug> <S2SV_StartBug> fill_variance_tree ( & vt . split [ i ] , BLOCK_32X32 ) ; <S2SV_EndBug> <S2SV_StartBug> fill_variance_tree ( & vt , BLOCK_64X64 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! set_vt_partitioning ( cpi , & vt , tile , BLOCK_64X64 , <S2SV_EndBug> <S2SV_StartBug> mi_row , mi_col , 8 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! set_vt_partitioning ( cpi , & vt . split [ i ] , tile , BLOCK_32X32 , <S2SV_EndBug> <S2SV_StartBug> ( mi_row + y32_idx ) , ( mi_col + x32_idx ) , 4 ) ) { <S2SV_EndBug> <S2SV_StartBug> # define DISABLE_8X8_VAR_BASED_PARTITION <S2SV_EndBug> <S2SV_StartBug> if ( mi_row + y32_idx + y16_idx + 1 < cm -> mi_rows && <S2SV_EndBug> <S2SV_StartBug> mi_row + x32_idx + x16_idx + 1 < cm -> mi_cols ) { <S2SV_EndBug> <S2SV_StartBug> set_block_size ( cpi , tile , <S2SV_EndBug> <S2SV_StartBug> if ( ! set_vt_partitioning ( cpi , & vt . split [ i ] . split [ j ] , tile , <S2SV_EndBug> <S2SV_StartBug> ( mi_row + y32_idx + y16_idx ) , <S2SV_EndBug> <S2SV_StartBug> ( mi_col + x32_idx + x16_idx ) , 2 ) ) { <S2SV_EndBug> <S2SV_StartBug> set_block_size ( cpi , tile , <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , int mi_row , int mi_col ) { VP9_COMMON * const cm = & cpi -> common <S2SV_ModEnd> <S2SV_ModStart> x -> <S2SV_ModEnd> <S2SV_ModStart> , m <S2SV_ModStart> ; v16x16 vt2 [ 16 ] ; int force_split [ 21 ] <S2SV_ModStart> int64_t thresholds [ 4 ] = { cpi -> vbp_thresholds [ 0 ] , cpi -> vbp_thresholds [ 1 ] , cpi -> vbp_thresholds [ 2 ] , cpi -> vbp_thresholds [ 3 ] } ; const int is_key_frame = ( cm -> frame_type == KEY_FRAME ) ; const int use_4x4_partition = is_key_frame ; const int low_res = ( cm -> width <= 352 && cm -> height <= 288 ) ; int variance4x4downsample [ 16 ] ; int segment_id = CR_SEGMENT_ID_BASE ; if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cm -> seg . enabled ) { const uint8_t * const map = cm -> seg . update_map ? cpi -> segmentation_map : cm -> last_frame_seg_map ; segment_id = get_segment_id ( cm , map , BLOCK_64X64 , mi_row , mi_col ) ; if ( cyclic_refresh_segment_id_boosted ( segment_id ) ) { int q = vp9_get_qindex ( & cm -> seg , segment_id , cm -> base_qindex ) ; set_vbp_thresholds ( cpi , thresholds , q ) ; } } set_offsets ( cpi , tile , x , mi_row , mi_col , BLOCK_64X64 ) ; if ( xd -> mb_to_right_edge < 0 ) pixels_wide += ( xd -> mb_to_right_edge >> 3 ) ; if ( xd -> mb_to_bottom_edge < 0 ) pixels_high += ( xd -> mb_to_bottom_edge >> 3 ) ; s = x -> plane [ 0 ] . src . buf ; sp = x -> plane [ 0 ] . src . stride ; if ( ! is_key_frame && ! ( is_one_pass_cbr_svc ( cpi ) && cpi -> svc . layer_context [ cpi -> svc . temporal_layer_id ] . is_key_frame ) ) { MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; unsigned int uv_sad <S2SV_ModEnd> <S2SV_ModStart> YV12_BUFFER_CONFIG * yv12_g = NULL ; unsigned int y_sad , y_sad_g ; const BLOCK_SIZE bsize = BLOCK_32X32 + ( mi_col + 4 < cm -> mi_cols ) * 2 + ( mi_row + 4 < cm -> mi_rows ) ; assert ( yv12 != NULL ) ; if ( ! ( is_one_pass_cbr_svc ( cpi ) && cpi -> svc . spatial_layer_id ) ) { yv12_g = get_ref_frame_buffer ( cpi , GOLDEN_FRAME ) ; } if ( yv12_g && yv12_g != yv12 && ( cpi -> ref_frame_flags & VP9_GOLD_FLAG ) ) { vp9_setup_pre_planes ( xd , 0 , yv12_g , mi_row , mi_col , & cm -> frame_refs [ GOLDEN_FRAME - 1 ] . sf ) ; y_sad_g = cpi -> fn_ptr [ bsize ] . sdf ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , xd -> plane [ 0 ] . pre [ 0 ] . buf , xd -> plane [ 0 ] . pre [ 0 ] . stride ) ; } else { y_sad_g = UINT_MAX ; } vp9_setup_pre_planes ( xd , 0 , yv12 , mi_row , mi_col , <S2SV_ModEnd> <S2SV_ModStart> ) ; mbmi -> ref_frame [ 0 ] = LAST_FRAME ; mbmi -> ref_frame [ 1 ] = NONE ; mbmi -> sb_type = BLOCK_64X64 ; mbmi -> mv [ 0 ] . as_int = 0 ; mbmi -> interp_filter = BILINEAR ; y_sad = vp9_int_pro_motion_estimation ( cpi , x , bsize <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( y_sad_g < y_sad ) { vp9_setup_pre_planes ( xd , 0 , yv12_g , mi_row , mi_col , & cm -> frame_refs [ GOLDEN_FRAME - 1 ] . sf ) ; mbmi -> ref_frame [ 0 ] = GOLDEN_FRAME ; mbmi -> mv [ 0 ] . as_int = 0 ; y_sad = y_sad_g ; } else { x -> pred_mv [ LAST_FRAME ] = mbmi -> mv [ 0 ] . as_mv ; } vp9_build_inter_predictors_sb ( xd , mi_row , mi_col <S2SV_ModStart> for ( i = 1 ; i <= 2 ; ++ i ) { struct macroblock_plane * p = & x -> plane [ i ] ; struct macroblockd_plane * pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize , pd ) ; if ( bs == BLOCK_INVALID ) uv_sad = UINT_MAX ; else uv_sad = cpi -> fn_ptr [ bs ] . sdf ( p -> src . buf , p -> src . stride , pd -> dst . buf , pd -> dst . stride ) ; x -> color_sensitivity [ i - 1 ] = uv_sad > ( y_sad >> 2 ) ; } d = xd -> plane [ 0 ] . dst . buf ; dp = xd -> plane [ 0 ] . dst . stride ; if ( segment_id == CR_SEGMENT_ID_BASE && y_sad < cpi -> vbp_threshold_sad ) { const int block_width = num_8x8_blocks_wide_lookup [ BLOCK_64X64 ] ; const int block_height = num_8x8_blocks_high_lookup [ BLOCK_64X64 ] ; if ( mi_col + block_width / 2 < cm -> mi_cols && mi_row + block_height / 2 < cm -> mi_rows ) { set_block_size ( cpi , x , xd <S2SV_ModEnd> <S2SV_ModStart> BLOCK_64X64 ) ; return 0 ; } } } else { d = VP9_VAR_OFFS <S2SV_ModEnd> <S2SV_ModStart> 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { switch ( xd -> bd ) { case 10 : d = CONVERT_TO_BYTEPTR ( VP9_HIGH_VAR_OFFS_10 ) ; break ; case 12 : d = CONVERT_TO_BYTEPTR ( VP9_HIGH_VAR_OFFS_12 ) ; break ; case 8 : default : d = CONVERT_TO_BYTEPTR ( VP9_HIGH_VAR_OFFS_8 ) ; break ; } } # endif } force_split [ 0 ] = 0 ; <S2SV_ModEnd> <S2SV_ModStart> const int i2 = i << 2 ; force_split [ i + 1 ] = 0 ; <S2SV_ModStart> ; const int split_index = 5 + i2 + j <S2SV_ModStart> force_split [ split_index ] = 0 ; variance4x4downsample [ i2 + j ] = 0 ; if ( ! is_key_frame ) { fill_variance_8x8avg ( s , sp , d , dp , x16_idx , y16_idx , vst , # if CONFIG_VP9_HIGHBITDEPTH xd -> cur_buf -> flags , # endif pixels_wide , pixels_high , is_key_frame ) ; fill_variance_tree ( & vt . split [ i ] . split [ j ] , BLOCK_16X16 ) ; get_variance ( & vt . split [ i ] . split [ j ] . part_variances . none ) ; if ( vt . split [ i ] . split [ j ] . part_variances . none . variance > thresholds [ 2 ] ) { force_split [ split_index ] = 1 ; force_split [ i + 1 ] = 1 ; force_split [ 0 ] = 1 ; } else if ( vt . split [ i ] . split [ j ] . part_variances . none . variance > thresholds [ 1 ] && ! cyclic_refresh_segment_id_boosted ( segment_id ) ) { int minmax = compute_minmax_8x8 ( s , sp , d , dp , x16_idx , y16_idx , # if CONFIG_VP9_HIGHBITDEPTH xd -> cur_buf -> flags , # endif pixels_wide , pixels_high ) ; if ( minmax > cpi -> vbp_threshold_minmax ) { force_split [ split_index ] = 1 ; force_split [ i + 1 ] = 1 ; force_split [ 0 ] = 1 ; } } } if ( is_key_frame || ( low_res && ! cpi -> use_svc && vt . split [ i ] . split [ j ] . part_variances . none . variance > ( thresholds [ 1 ] << 1 ) ) ) { force_split [ split_index ] = 0 ; variance4x4downsample [ i2 + j ] = 1 ; <S2SV_ModStart> x8_idx <S2SV_ModEnd> <S2SV_ModStart> y8_idx <S2SV_ModEnd> <S2SV_ModStart> v8x8 * vst2 = is_key_frame ? & vst -> split [ k ] : & vt2 [ i2 + j ] . split [ k ] ; fill_variance_4x4avg ( s , sp , d , dp , x8_idx , y8_idx , vst2 , # if CONFIG_VP9_HIGHBITDEPTH xd -> cur_buf -> flags , # endif pixels_wide , pixels_high , is_key_frame ) ; } <S2SV_ModEnd> <S2SV_ModStart> const int i2 = i << 2 ; <S2SV_ModStart> if ( variance4x4downsample [ i2 + j ] == 1 ) { v16x16 * vtemp = ( ! is_key_frame ) ? & vt2 [ i2 + j ] : & vt . split [ i ] . split [ j ] ; for ( m = 0 ; m < 4 ; m ++ ) <S2SV_ModStart> vtemp -> split [ m ] , BLOCK_8X8 ) ; fill_variance_tree ( vtemp , BLOCK_16X16 ) ; } } fill_variance_tree ( & <S2SV_ModStart> , BLOCK_32X32 ) ; if ( ! force_split [ i + 1 ] ) { get_variance ( & vt <S2SV_ModStart> i ] . part_variances . none ) ; if ( vt . split [ i ] . part_variances . none . variance > thresholds [ 1 ] ) { force_split [ i + 1 ] = 1 ; force_split [ 0 ] = 1 ; } } } if ( ! force_split [ 0 ] ) { <S2SV_ModEnd> <S2SV_ModStart> , BLOCK_64X64 ) ; get_variance <S2SV_ModEnd> <S2SV_ModStart> . part_variances . none ) ; } if ( mi_col + 8 > cm -> mi_cols || mi_row + 8 > cm -> mi_rows || <S2SV_ModEnd> <S2SV_ModStart> x , xd , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> thresholds [ 0 ] , BLOCK_16X16 , force_split [ 0 ] <S2SV_ModEnd> <S2SV_ModStart> const int i2 = i << 2 ; <S2SV_ModStart> x , xd , <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> thresholds [ 1 ] , BLOCK_16X16 , force_split [ i + 1 ] <S2SV_ModEnd> <S2SV_ModStart> v16x16 * vtemp = ( ! is_key_frame && variance4x4downsample [ i2 + j ] == 1 ) ? & vt2 [ i2 + j ] : & vt . split [ i ] . split [ j ] ; if ( ! set_vt_partitioning ( cpi , x , xd , vtemp , BLOCK_16X16 , <S2SV_ModEnd> <S2SV_ModStart> , mi_col <S2SV_ModEnd> <S2SV_ModStart> , thresholds [ 2 ] , cpi -> vbp_bsize_min , force_split [ 5 + i2 + j ] ) ) <S2SV_ModEnd> <S2SV_ModStart> if ( use_4x4_partition ) { <S2SV_ModEnd> <S2SV_ModStart> x , xd , & vtemp -> split [ k ] , BLOCK_8X8 , <S2SV_ModEnd> <S2SV_ModStart> + y8_idx , <S2SV_ModEnd> <S2SV_ModStart> + x8_idx , thresholds [ 3 ] , BLOCK_8X8 , 0 ) ) { set_block_size ( cpi , x , xd , ( mi_row + y32_idx + y16_idx + y8_idx ) , ( mi_col + x32_idx + x16_idx + x8_idx ) , BLOCK_4X4 ) ; } } else { <S2SV_ModEnd> <S2SV_ModStart> x , xd <S2SV_ModEnd> <S2SV_ModStart> } } } } } return 0 ; <S2SV_ModEnd> "
4766,"<S2SV_StartBug> struct inode * inode , int regard_xa ) <S2SV_EndBug> <S2SV_StartBug> int cnt , sig ; <S2SV_EndBug> <S2SV_StartBug> if ( regard_xa ) { <S2SV_EndBug> <S2SV_StartBug> ISOFS_I ( inode ) -> i_first_extent = <S2SV_EndBug> <S2SV_StartBug> isofs_iget ( inode -> i_sb , <S2SV_EndBug> <S2SV_StartBug> ISOFS_I ( inode ) -> i_first_extent , <S2SV_EndBug> ","<S2SV_ModStart> flags <S2SV_ModEnd> <S2SV_ModStart> ; unsigned int reloc_block <S2SV_ModStart> flags & RR_REGARD_XA <S2SV_ModEnd> <S2SV_ModStart> if ( flags & RR_RELOC_DE ) { printk ( KERN_ERR ""ISOFS:<S2SV_blank>Recursive<S2SV_blank>directory<S2SV_blank>relocation<S2SV_blank>"" ""is<S2SV_blank>not<S2SV_blank>supported\\n"" ) ; goto eio ; } reloc_block = isonum_733 ( rr -> u . CL . location ) ; if ( reloc_block == <S2SV_ModStart> i_iget5_block && ISOFS_I ( inode ) -> i_iget5_offset == 0 ) { printk ( KERN_ERR ""ISOFS:<S2SV_blank>Directory<S2SV_blank>relocation<S2SV_blank>points<S2SV_blank>to<S2SV_blank>"" ""itself\\n"" ) ; goto eio ; } ISOFS_I ( inode ) -> i_first_extent = reloc_block <S2SV_ModEnd> <S2SV_ModStart> isofs_iget_reloc <S2SV_ModEnd> <S2SV_ModStart> reloc_block , <S2SV_ModEnd> "
4767,"<S2SV_StartBug> if ( perf_event_overflow ( event , 0 , & data , regs ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4768,<S2SV_StartBug> struct pstore * ps = get_info ( store ) ; <S2SV_EndBug> <S2SV_StartBug> stride = ( ps -> exceptions_per_area + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ps -> next_free ++ ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; skip_metadata ( ps ) 
4769,<S2SV_StartBug> return - ETIMEDOUT ; <S2SV_EndBug> ,<S2SV_ModStart> kfree_skb ( skb ) ; 
4770,"<S2SV_StartBug> ND_PRINT ( ( ndo , ""%04x:%04x<S2SV_blank>"" , panid , EXTRACT_LE_16BITS ( p + 2 ) ) ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4771,"<S2SV_StartBug> * decorator_list , expr_ty returns , int lineno , int col_offset , <S2SV_EndBug> <S2SV_StartBug> p -> v . AsyncFunctionDef . returns = returns ; <S2SV_EndBug> ","<S2SV_ModStart> string type_comment , int <S2SV_ModEnd> <S2SV_ModStart> ; p -> v . AsyncFunctionDef . type_comment = type_comment "
4772,<S2SV_StartBug> frag = ( hm_fragment * ) item -> data ; <S2SV_EndBug> ,<S2SV_ModStart> rdata = ( DTLS1_RECORD_DATA * ) item -> data ; if ( rdata -> rbuf . buf ) { OPENSSL_free ( rdata -> rbuf . buf ) ; } OPENSSL_free ( item -> data <S2SV_ModEnd> 
4773,<S2SV_StartBug> && obj [ 0 ] == 0x00 && objlen > 1 ) { <S2SV_EndBug> ,<S2SV_ModStart> objlen > 1 && <S2SV_ModStart>  <S2SV_ModEnd> 
4774,"<S2SV_StartBug> err |= get_user ( length , & up -> length ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( err ) return - EFAULT 
4775,<S2SV_StartBug> if ( map_data ) <S2SV_EndBug> <S2SV_StartBug> rq -> bio = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> ! iter_is_iovec ( iter ) ) goto fail ; if ( <S2SV_ModStart> fail : 
4776,"<S2SV_StartBug> opt = xchg ( & np -> opt , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> <S2SV_StartBug> opt = ipv6_renew_options ( sk , np -> opt , optname , <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> <S2SV_StartBug> opt -> tot_len = sizeof ( * opt ) + optlen ; <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> ","<S2SV_ModStart> ( __force struct ipv6_txoptions * * ) <S2SV_ModStart> { atomic_sub ( opt -> tot_len , & sk -> sk_omem_alloc ) ; txopt_put ( opt ) ; } <S2SV_ModEnd> <S2SV_ModStart> rcu_dereference_protected ( np -> opt , sock_owned_by_user ( sk ) ) ; opt = <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { atomic_sub ( opt -> tot_len , & sk -> sk_omem_alloc ) ; txopt_put ( opt ) ; } <S2SV_ModEnd> <S2SV_ModStart> atomic_set ( & opt -> refcnt , 1 ) ; <S2SV_ModStart> { atomic_sub ( opt -> tot_len , & sk -> sk_omem_alloc ) ; txopt_put ( opt ) ; } <S2SV_ModEnd> "
4777,"<S2SV_StartBug> uint16_t auxsize ; <S2SV_EndBug> <S2SV_StartBug> av_get_packet ( pb , pkt , vsize ) ; <S2SV_EndBug> <S2SV_StartBug> av_get_packet ( pb , pkt , asize ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; int ret <S2SV_ModStart> if ( ( ret = <S2SV_ModStart> ) < 0 ) return ret <S2SV_ModStart> if ( ( ret = <S2SV_ModStart> ) < 0 ) return ret 
4778,<S2SV_StartBug> int buflen = bin -> buf -> length ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! ( ret = r_list_newf ( ( RListFree ) free ) ) ) { return NULL ; } ut8 * buf = bin -> buf -> buf + ( ut32 ) sec -> payload_data ; <S2SV_ModStart> - <S2SV_ModEnd> 
4779,<S2SV_StartBug> if ( ! last_pic_droppable && h0 -> cur_pic_ptr -> tf . owner == h0 -> avctx ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! last_pic_droppable && last_pic_structure != PICT_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! last_pic_droppable && last_pic_structure != PICT_FRAME ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4780,"<S2SV_StartBug> const int v = ( int ) ( .5 + 256 * vp8_gaussian ( sigma , 0 , i ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> gaussian <S2SV_ModEnd> 
4781,"<S2SV_StartBug> uint64 nstrips64 ; <S2SV_EndBug> <S2SV_StartBug> nstrips64 = TIFFhowmany_64 ( bytecount , stripbytes ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( nstrips64 == 0 ) || ( nstrips64 > 0xFFFFFFFF ) ) <S2SV_EndBug> <S2SV_StartBug> newcounts = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips32 , sizeof ( uint64 ) , <S2SV_EndBug> <S2SV_StartBug> newoffsets = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips32 , sizeof ( uint64 ) , <S2SV_EndBug> <S2SV_StartBug> for ( strip = 0 ; strip < nstrips32 ; strip ++ ) { <S2SV_EndBug> <S2SV_StartBug> newoffsets [ strip ] = offset ; <S2SV_EndBug> <S2SV_StartBug> td -> td_stripsperimage = td -> td_nstrips = nstrips32 ; <S2SV_EndBug> ","<S2SV_ModStart> uint32 nstrips <S2SV_ModEnd> <S2SV_ModStart> nstrips = TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip ) ; if ( nstrips <S2SV_ModEnd> <S2SV_ModStart> return ; <S2SV_ModEnd> <S2SV_ModStart> nstrips <S2SV_ModEnd> <S2SV_ModStart> nstrips <S2SV_ModEnd> <S2SV_ModStart> nstrips <S2SV_ModEnd> <S2SV_ModStart> stripbytes ? offset : 0 <S2SV_ModEnd> <S2SV_ModStart> nstrips <S2SV_ModEnd> "
4782,<S2SV_StartBug> assert ( addrsize <= LLDPD_MGMT_MAXADDRSIZE ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4783,"<S2SV_StartBug> int result ; <S2SV_EndBug> <S2SV_StartBug> Newz ( 908 , imp_dbh -> pmysql , 1 , MYSQL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! result ) <S2SV_EndBug> <S2SV_StartBug> Safefree ( imp_dbh -> pmysql ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; int fresh = 0 <S2SV_ModStart> fresh = 1 ; <S2SV_ModStart> fresh && <S2SV_ModStart> { do_error ( dbh , mysql_errno ( imp_dbh -> pmysql ) , mysql_error ( imp_dbh -> pmysql ) , mysql_sqlstate ( imp_dbh -> pmysql ) ) ; <S2SV_ModStart> imp_dbh -> pmysql = NULL ; } "
4784,"<S2SV_StartBug> strcpy ( cat_enum . szPath , fileName ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( cat_enum . szRad1 , fileName ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( cat_enum . szRad1 , sep + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> sep = strchr ( cat_enum . szRad1 , '*' ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( cat_enum . szRad2 , sep + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> sep = strchr ( cat_enum . szRad2 , '%' ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sep ) { <S2SV_EndBug> ","<S2SV_ModStart> if ( strlen ( fileName ) >= sizeof <S2SV_ModEnd> <S2SV_ModStart> ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( ""File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n"" , fileName ) ) ; return GF_NOT_SUPPORTED ; } strcpy ( cat_enum . szPath <S2SV_ModStart> if ( strlen ( fileName ) >= sizeof <S2SV_ModEnd> <S2SV_ModStart> ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( ""File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n"" , fileName ) ) ; return GF_NOT_SUPPORTED ; } strcpy ( cat_enum . szRad1 <S2SV_ModStart> if ( strlen ( <S2SV_ModEnd> <S2SV_ModStart> >= sizeof <S2SV_ModEnd> <S2SV_ModStart> ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( ""File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n"" , ( <S2SV_ModEnd> <S2SV_ModStart> ) ) ; return GF_NOT_SUPPORTED ; } strcpy ( cat_enum . szRad1 , sep + 1 ) <S2SV_ModStart> } <S2SV_ModStart> szRad1 , '*' ) ; if ( strlen ( sep + 1 ) >= sizeof ( cat_enum . szRad2 ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( ""File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n"" , ( sep + 1 ) ) ) ; return GF_NOT_SUPPORTED ; } strcpy ( cat_enum . szRad2 , sep + 1 ) ; sep [ 0 ] = 0 ; sep = strchr ( cat_enum . szRad2 <S2SV_ModEnd> <S2SV_ModStart> if ( strlen ( sep ) >= sizeof ( cat_enum . szOpt ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( ""Invalid<S2SV_blank>option:<S2SV_blank>%s.\\n"" , sep ) ) ; return GF_NOT_SUPPORTED ; } "
4785,"<S2SV_StartBug> ""<message<S2SV_blank>type=\'chat\'<S2SV_blank>to=\'stabber@localhost/profanity\'<S2SV_blank>from=\'buddy1@localhost\'>"" <S2SV_EndBug> ","<S2SV_ModStart> ""<message<S2SV_blank>type=\'chat\'<S2SV_blank>to=\'stabber@localhost/profanity\'<S2SV_blank>from=\'stabber@localhost\'>"" <S2SV_ModEnd> "
4786,<S2SV_StartBug> int n ; <S2SV_EndBug> ,<S2SV_ModStart> ssize_t <S2SV_ModEnd> 
4787,"<S2SV_StartBug> # define EXIFMultipleValues ( size , format , arg ) { ssize_t component ; size_t length ; unsigned char * p1 ; length = 0 ; p1 = p ; for ( component = 0 ; component < components ; component ++ ) { length += FormatLocaleString ( buffer + length , MagickPathExtent - length , format "",<S2SV_blank>"" , arg ) ; if ( length >= ( MagickPathExtent - 1 ) ) length = MagickPathExtent - 1 ; p1 += size ; } if ( length > 1 ) buffer [ length - 2 ] = '\\0' ; value = AcquireString ( buffer ) ; } <S2SV_EndBug> <S2SV_StartBug> # define EXIFMultipleFractions ( size , format , arg1 , arg2 ) { ssize_t component ; size_t length ; unsigned char * p1 ; length = 0 ; p1 = p ; for ( component = 0 ; component < components ; component ++ ) { length += FormatLocaleString ( buffer + length , MagickPathExtent - length , format "",<S2SV_blank>"" , ( arg1 ) , ( arg2 ) ) ; if ( length >= ( MagickPathExtent - 1 ) ) length = MagickPathExtent - 1 ; p1 += size ; } if ( length > 1 ) buffer [ length - 2 ] = '\\0' ; value = AcquireString ( buffer ) ; } <S2SV_EndBug> <S2SV_StartBug> if ( GetValueFromSplayTree ( exif_resources , q ) == q ) <S2SV_EndBug> <S2SV_StartBug> components = ( ssize_t ) ReadPropertySignedLong ( endian , q + 4 ) ; <S2SV_EndBug> ",<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> q > ( exif + length - 12 ) ) break ; if ( <S2SV_ModStart> ; if ( components < 0 ) break 
4788,<S2SV_StartBug> if ( fuji_width ) <S2SV_EndBug> ,<S2SV_ModStart> # ifdef LIBRAW_LIBRARY_BUILD if ( fuji_width && ! dng_version && ! ( imgdata . process_warnings & LIBRAW_WARN_PARSEFUJI_PROCESSED ) ) fuji_width = 0 ; # endif 
4789,<S2SV_StartBug> if ( daddr == 0 || rs -> rs_bound_addr == 0 ) { <S2SV_EndBug> <S2SV_StartBug> ret = - ENOTCONN ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> lock_sock ( sk ) ; <S2SV_ModStart> release_sock ( sk ) ; <S2SV_ModStart> release_sock ( sk ) ; 
4790,<S2SV_StartBug> fptr = ( struct frag_hdr * ) ( ( u8 * ) ipv6h + unfrag_ip6hlen ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; 
4791,"<S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> qcoeff , 0 , sizeof ( xd -> qcoeff ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> eobs , 0 , 25 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> eobs , 0 , 25 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 2 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 16 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 2 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> else ( void ) mb_idx ; # <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
4792,"<S2SV_StartBug> static void show_object ( struct object * object , struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , void * data ) <S2SV_EndBug> <S2SV_StartBug> if ( bitmap_pos < 0 ) { <S2SV_EndBug> <S2SV_StartBug> free ( name ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> name <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4793,"<S2SV_StartBug> s_alDriver = Cvar_Get ( ""s_alDriver"" , ALDRIVER_DEFAULT , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> <S2SV_StartBug> s_alDevice = Cvar_Get ( ""s_alDevice"" , """" , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> ","<S2SV_ModStart> | CVAR_PROTECTED <S2SV_ModStart> if ( COM_CompareExtension ( s_alDriver -> string , "".pk3"" ) ) { Com_Printf ( ""Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\""%s\\"""" , s_alDriver -> string ) ; return qfalse ; } "
4794,"<S2SV_StartBug> if ( g_file_test ( filename , G_FILE_TEST_EXISTS ) || g_path_is_absolute ( filename ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4795,<S2SV_StartBug> if ( ! ctx -> established ) { <S2SV_EndBug> ,<S2SV_ModStart> ctx -> terminated || 
4796,<S2SV_StartBug> slave -> master = master ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irq ( & slave_active_lock ) ; <S2SV_EndBug> ,<S2SV_ModStart> spin_lock ( & master -> timer -> lock ) ; <S2SV_ModStart> spin_unlock ( & master -> timer -> lock ) ; 
4797,<S2SV_StartBug> static char * print_number ( cJSON * item ) <S2SV_EndBug> <S2SV_StartBug> f = item -> valuefloat ; <S2SV_EndBug> <S2SV_StartBug> if ( f2 == f && item -> valueint >= LLONG_MIN && item -> valueint <= LLONG_MAX ) <S2SV_EndBug> ,"<S2SV_ModStart> , printbuffer * p ) { char * str = 0 ; double d <S2SV_ModEnd> <S2SV_ModStart> valuedouble ; if ( d == 0 ) { if ( p ) str = ensure ( p , 2 ) ; else str = ( char * ) cJSON_malloc ( 2 ) ; if ( str ) strcpy ( str , ""0"" ) ; } else if ( fabs ( ( ( double ) <S2SV_ModEnd> <S2SV_ModStart> ) - d ) <= DBL_EPSILON && d <= LLONG_MAX && d >= LLONG_MIN ) { if ( p ) str = ensure ( p , 64 ) ; else str = ( char * ) cJSON_malloc ( 64 ) ; if ( str ) sprintf ( str , ""%lld"" , ( long long ) <S2SV_ModEnd> <S2SV_ModStart> ) ; } else { if ( p ) str = ensure ( p , 64 ) ; else str = ( char * ) cJSON_malloc ( 64 ) ; if ( str ) { if ( fpclassify ( d ) != FP_ZERO && ! isnormal ( d ) ) sprintf ( str , ""null"" ) ; else if ( fabs ( floor ( d ) - d ) <= DBL_EPSILON && fabs ( d ) < 1.0e60 ) sprintf ( str , ""%.0f"" , d ) ; else if ( fabs ( d ) < 1.0e-6 || fabs ( d ) > 1.0e9 ) sprintf ( str , ""%e"" , d ) ; else sprintf ( str , ""%f"" , d ) ; } <S2SV_ModEnd> "
4798,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> r -> iov . iov_len = MIN ( r -> sector_count * 512 , SCSI_DMA_BUF_SIZE ) ; <S2SV_EndBug> ","<S2SV_ModStart> SCSIDiskState * s = DO_UPCAST ( SCSIDiskState , qdev , r -> req . dev ) ; if ( ! r -> iov . iov_base ) { r -> buflen = SCSI_DMA_BUF_SIZE ; r -> iov . iov_base = qemu_blockalign ( s -> bs , r -> buflen ) ; } <S2SV_ModStart> r -> buflen <S2SV_ModEnd> "
4799,<S2SV_StartBug> return headcount ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( datalen > 0 ) ) { r = UIO_MAXIOV + 1 ; goto err ; } 
4800,<S2SV_StartBug> ps_cur_slice -> u1_field_pic_flag = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4801,"<S2SV_StartBug> memcpy ( & priv -> ctrl , p , sizeof ( priv -> ctrl ) ) ; <S2SV_EndBug> <S2SV_StartBug> rc = - ENOMEM ; <S2SV_EndBug> ",<S2SV_ModStart> priv -> ctrl . fname = NULL ; <S2SV_ModStart> return <S2SV_ModEnd> 
4802,"<S2SV_StartBug> if ( c == 0 ) { <S2SV_EndBug> <S2SV_StartBug> xmlFatalErr ( ctxt , XML_ERR_NAME_TOO_LONG , ""Name"" ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) ; return ( NULL ) ; } if ( ctxt -> input -> cur - ctxt -> input -> base < len ) { xmlFatalErr ( ctxt , XML_ERR_INTERNAL_ERROR , ""unexpected<S2SV_blank>change<S2SV_blank>of<S2SV_blank>input<S2SV_blank>buffer"" "
4803,<S2SV_StartBug> return ( ( image -> columns + 7 ) / 8 ) ; <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) * GetPSDPacketSize ( image ) 
4804,"<S2SV_StartBug> p = gf_filter_pid_get_property ( ctx -> ipid , GF_PROP_PID_AUDIO_FORMAT ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( p ) 
4805,"<S2SV_StartBug> bit_set_position ( dat , restartpos ) ; <S2SV_EndBug> <S2SV_StartBug> obj -> supertype = DWG_SUPERTYPE_UNKNOWN ; <S2SV_EndBug> <S2SV_StartBug> if ( klass && ! is_entity ) <S2SV_EndBug> <S2SV_StartBug> if ( err >= DWG_ERR_CRITICAL ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ; obj -> supertype = DWG_SUPERTYPE_UNKNOWN <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> is_entity ) error |= dwg_decode_UNKNOWN_ENT ( dat , obj ) ; else error |= dwg_decode_UNKNOWN_OBJ ( dat , obj ) ; if ( ! <S2SV_ModEnd> <S2SV_ModStart> error <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4806,<S2SV_StartBug> value = ( unsigned short ) ( ( buffer [ 1 ] << 8 ) | buffer [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> return ( ( unsigned short ) ( value & 0xffff ) ) ; <S2SV_EndBug> <S2SV_StartBug> value = ( unsigned short ) ( ( ( ( unsigned char * ) buffer ) [ 0 ] << 8 ) | <S2SV_EndBug> <S2SV_StartBug> return ( ( unsigned short ) ( value & 0xffff ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; value |= ( unsigned short ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> buffer <S2SV_ModEnd> <S2SV_ModStart> ; value |= <S2SV_ModEnd> <S2SV_ModStart> buffer [ 1 ] ; return <S2SV_ModStart>  <S2SV_ModEnd> 
4807,<S2SV_StartBug> libettercap_init ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( write_output ( ) != E_SUCCESS ) <S2SV_EndBug> ,"<S2SV_ModStart> int ret_value = 0 ; <S2SV_ModStart> ret_value = <S2SV_ModEnd> <S2SV_ModStart> ; if ( ret_value == - E_NOTHANDLED ) FATAL_ERROR ( ""Cannot<S2SV_blank>write<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(%s):<S2SV_blank>the<S2SV_blank>filter<S2SV_blank>is<S2SV_blank>not<S2SV_blank>correctly<S2SV_blank>handled."" , EF_GBL_OPTIONS -> output_file ) ; else if ( ret_value == - E_INVALID ) FATAL_ERROR ( ""Cannot<S2SV_blank>write<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(%s):<S2SV_blank>the<S2SV_blank>filter<S2SV_blank>format<S2SV_blank>is<S2SV_blank>not<S2SV_blank>correct.<S2SV_blank>"" <S2SV_ModEnd> "
4808,<S2SV_StartBug> down_write ( & mm -> mmap_sem ) ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & mm -> mmap_sem ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! mmget_still_valid ( mm ) ) goto skip_mm <S2SV_ModStart> skip_mm : 
4809,"<S2SV_StartBug> kref_put ( & reservations -> refs , resv_map_release ) ; <S2SV_EndBug> ",<S2SV_ModStart> resv_map_put ( vma <S2SV_ModEnd> 
4810,<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt != NULL && inet -> opt -> srr ) { <S2SV_EndBug> <S2SV_StartBug> nexthop = inet -> opt -> faddr ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt == NULL || ! inet -> opt -> srr ) <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt != NULL ) <S2SV_EndBug> ,"<S2SV_ModStart> ; struct ip_options_rcu * inet_opt <S2SV_ModStart> inet_opt = rcu_dereference_protected ( inet -> inet_opt , sock_owned_by_user ( sk ) ) ; if ( inet_opt <S2SV_ModEnd> <S2SV_ModStart> inet_opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> inet_opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> inet_opt <S2SV_ModEnd> <S2SV_ModStart> inet_opt -> opt . <S2SV_ModEnd> <S2SV_ModStart> inet_opt ) inet_csk ( sk ) -> icsk_ext_hdr_len = inet_opt -> opt . <S2SV_ModEnd> "
4811,<S2SV_StartBug> ps_dec -> au2_f_code [ 0 ] [ 0 ] = ps_dec -> au2_f_code [ 0 ] [ 1 ] = ps_dec -> u2_forw_f_code ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ps_dec -> u2_forw_f_code < 1 || ps_dec -> u2_forw_f_code > 7 || ps_dec -> u2_back_f_code < 1 || ps_dec -> u2_back_f_code > 7 ) { return IMPEG2D_UNKNOWN_ERROR ; } 
4812,"<S2SV_StartBug> sas_discover_event ( dev -> port , DISCE_PROBE ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4813,"<S2SV_StartBug> if ( ReadDDSInfo ( image , & dds_info ) != MagickTrue ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> for ( n = 0 ; n < num_images ; n ++ ) <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( num_images < 1 ) ThrowReaderException ( CorruptImageError , ""ImproperImageHeader"" ) ; "
4814,<S2SV_StartBug> sin -> sin_family = AF_INET ; <S2SV_EndBug> <S2SV_StartBug> if ( isk -> cmsg_flags ) <S2SV_EndBug> <S2SV_StartBug> sin6 -> sin6_family = AF_INET6 ; <S2SV_EndBug> <S2SV_StartBug> * addr_len = sizeof ( * sin6 ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( sin ) { <S2SV_ModStart> } <S2SV_ModStart> if ( sin6 ) { <S2SV_ModStart> } 
4815,<S2SV_StartBug> pvc . sap_family = AF_ATMPVC ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & pvc , 0 , sizeof ( pvc ) ) ; "
4816,<S2SV_StartBug> char * bufptr ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( cnt < 0 ) { jas_deprecated ( ""negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_read"" ) ; } "
4817,<S2SV_StartBug> if ( ! retval ) { <S2SV_EndBug> ,"<S2SV_ModStart> r = k5memdup0 ( realm , rlen , & retval ) ; <S2SV_ModEnd> "
4818,<S2SV_StartBug> if ( ! ( task -> task_state_flags & SAS_TASK_STATE_DONE ) ) <S2SV_EndBug> <S2SV_StartBug> task -> task_state_flags |= SAS_TASK_STATE_ABORTED ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> { <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> spin_unlock_irqrestore ( & task -> task_state_lock , flags ) ; } "
4819,"<S2SV_StartBug> assert ( ( size_t ) CDF_SHORT_SEC_SIZE ( h ) == len ) ; <S2SV_EndBug> <S2SV_StartBug> ( ( const char * ) sst -> sst_tab ) + CDF_SHORT_SEC_POS ( h , id ) , len ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t ss = <S2SV_ModEnd> <S2SV_ModStart> ; size_t pos = CDF_SHORT_SEC_POS ( h , id ) ; assert ( ss <S2SV_ModStart> if ( sst -> sst_len < ( size_t ) id ) { DPRINTF ( ( ""bad<S2SV_blank>sector<S2SV_blank>id<S2SV_blank>%d<S2SV_blank>><S2SV_blank>%d\\n"" , id , sst -> sst_len ) ) ; return - 1 ; } <S2SV_ModStart> pos <S2SV_ModEnd> "
4820,"<S2SV_StartBug> l2tp_proxy_auth_type_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> const uint16_t * ptr = ( const uint16_t * ) dat ; <S2SV_EndBug> ","<S2SV_ModStart> , u_int length <S2SV_ModStart> if ( length < 2 ) { ND_PRINT ( ( ndo , ""AVP<S2SV_blank>too<S2SV_blank>short"" ) ) ; return ; } "
4821,"<S2SV_StartBug> oe_errno = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! sock ) <S2SV_EndBug> <S2SV_StartBug> if ( optlen ) <S2SV_EndBug> <S2SV_StartBug> & ret , sock -> host_fd , level , optname , optval , optlen_in , optlen ) != <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ",<S2SV_ModStart> oe_socklen_t optlen_out = 0 ; <S2SV_ModStart> || ! optval || ! optlen <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> & optlen_out <S2SV_ModEnd> <S2SV_ModStart> if ( optlen_out > optlen_in ) optlen_out = optlen_in ; * optlen = optlen_out ; 
4822,"<S2SV_StartBug> return crypto_skcipher_setkey ( private , key , keylen ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> struct skcipher_tfm * tfm = private ; int err ; err = crypto_skcipher_setkey ( tfm -> skcipher <S2SV_ModEnd> <S2SV_ModStart> tfm -> has_key = ! err ; return err ; 
4823,"<S2SV_StartBug> if ( l_strnstart ( ""MSG"" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( ""RPY<S2SV_blank>"" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( ""ERR<S2SV_blank>"" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( ""ANS<S2SV_blank>"" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( ""NUL<S2SV_blank>"" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( ""SEQ<S2SV_blank>"" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( ""END"" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> ","<S2SV_ModStart> ndo , <S2SV_ModStart> ndo , <S2SV_ModStart> ndo , <S2SV_ModStart> ndo , <S2SV_ModStart> ndo , <S2SV_ModStart> ndo , <S2SV_ModStart> ndo , "
4824,<S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size * 2 > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug> ,"<S2SV_ModStart> < * object || * object + size <S2SV_ModStart> * object + size < * object || <S2SV_ModStart> < * object || * object + size * 2 <S2SV_ModStart> < * object || * object + size <S2SV_ModStart> < * object || * object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s:<S2SV_blank>BPLIST_DICT<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n"" <S2SV_ModEnd> "
4825,"<S2SV_StartBug> if ( ! inode -> i_op -> set_acl || ! IS_POSIXACL ( inode ) ) <S2SV_EndBug> <S2SV_StartBug> host_error = inode -> i_op -> set_acl ( inode , pacl , ACL_TYPE_ACCESS ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_release ; <S2SV_EndBug> <S2SV_StartBug> host_error = inode -> i_op -> set_acl ( inode , dpacl , <S2SV_EndBug> <S2SV_StartBug> out_release : <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> fh_lock ( fhp ) ; host_error = set_posix_acl ( inode , ACL_TYPE_ACCESS , pacl <S2SV_ModEnd> <S2SV_ModStart> out_drop_lock <S2SV_ModEnd> <S2SV_ModStart> set_posix_acl ( inode , ACL_TYPE_DEFAULT , dpacl <S2SV_ModEnd> <S2SV_ModStart> out_drop_lock : fh_unlock ( fhp ) ; <S2SV_ModEnd> "
4826,"<S2SV_StartBug> sprintf ( descriptor -> msg , ""\\n\\t\\tEntry:\\\n<S2SV_blank>\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n<S2SV_blank>\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n<S2SV_blank>\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d"" , <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_COUNT && ( SQLINTEGER ) value < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_PARAMETER_TYPE && value != SQL_PARAM_INPUT <S2SV_EndBug> <S2SV_StartBug> && value != SQL_PARAM_OUTPUT && value != SQL_PARAM_INPUT_OUTPUT && <S2SV_EndBug> <S2SV_StartBug> value != SQL_PARAM_INPUT_OUTPUT_STREAM && value != SQL_PARAM_OUTPUT_STREAM ) <S2SV_EndBug> ","<S2SV_ModStart> ""\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d"" <S2SV_ModEnd> <S2SV_ModStart> intptr_t <S2SV_ModEnd> <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) <S2SV_ModStart> ( intptr_t ) "
4827,"<S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MIREGADR , MIREGADR_R8 | address ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MIWR , data ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( enc624j600ReadReg ( interface , ENC624J600_REG_MISTAT ) & MISTAT_BUSY ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> ","<S2SV_ModStart> uint16_t status ; <S2SV_ModStart> ENC624J600_MIREGADR , ENC624J600_MIREGADR_R12_8_DEFAULT <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MIWR <S2SV_ModEnd> <S2SV_ModStart> do { status = <S2SV_ModEnd> <S2SV_ModStart> ENC624J600_MISTAT ) ; } while ( ( status & ENC624J600_MISTAT_BUSY <S2SV_ModEnd> <S2SV_ModStart> ; <S2SV_ModEnd> "
4828,<S2SV_StartBug> wStream * s ; <S2SV_EndBug> <S2SV_StartBug> UINT32 flags ; <S2SV_EndBug> <S2SV_StartBug> NTLM_AV_PAIR * AvFlags ; <S2SV_EndBug> <S2SV_StartBug> flags = 0 ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> return SEC_E_INTERNAL_ERROR ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> SECURITY_STATUS status = SEC_E_INVALID_TOKEN ; <S2SV_ModStart> = 0 <S2SV_ModStart> = NULL <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> goto fail ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; if ( Stream_GetRemainingLength ( s ) < 4 ) goto fail ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; if ( message -> NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION ) { if ( ntlm_read_version_info ( s , & ( message -> Version ) ) < 0 ) goto fail ; } PayloadBufferOffset = Stream_GetPosition ( s ) ; status = SEC_E_INTERNAL_ERROR ; if ( ntlm_read_message_fields_buffer ( s , & ( message -> DomainName ) ) < 0 ) goto fail ; if ( ntlm_read_message_fields_buffer ( s , & ( message -> UserName ) ) < 0 ) goto fail ; if ( ntlm_read_message_fields_buffer ( s , & ( message -> Workstation ) ) < 0 ) goto fail ; if ( ntlm_read_message_fields_buffer ( s , & ( message -> LmChallengeResponse ) ) < 0 ) goto fail ; if ( ntlm_read_message_fields_buffer ( s , & ( message -> NtChallengeResponse ) ) < 0 ) goto fail ; if ( message -> NtChallengeResponse . Len > 0 ) { int rc ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; status = SEC_E_INVALID_TOKEN ; rc = ntlm_read_ntlm_v2_response ( snt , & ( context -> NTLMv2Response ) ) ; Stream_Free ( snt <S2SV_ModEnd> <S2SV_ModStart> if ( rc < 0 ) goto fail ; status = SEC_E_INTERNAL_ERROR <S2SV_ModEnd> <S2SV_ModStart> goto fail ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; CopyMemory ( context -> AuthenticateMessage . pvBuffer , Stream_Buffer ( s ) , length ) ; buffer -> cbBuffer = length ; Stream_SetPosition ( s , PayloadBufferOffset ) ; if ( flags & MSV_AV_FLAGS_MESSAGE_INTEGRITY_CHECK ) { context -> MessageIntegrityCheckOffset = ( UINT32 ) Stream_GetPosition ( s ) ; status = SEC_E_INVALID_TOKEN ; if ( Stream_GetRemainingLength ( s ) < 16 ) goto fail ; Stream_Read ( s , message -> MessageIntegrityCheck , 16 ) ; } status = SEC_E_INTERNAL_ERROR ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; <S2SV_ModEnd> <S2SV_ModStart> goto fail ; <S2SV_ModEnd> <S2SV_ModStart> fail : Stream_Free ( s , FALSE ) ; return status ; "
4829,"<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( caught_signal ) <S2SV_EndBug> <S2SV_StartBug> sleep ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , _ ( ""<S2SV_blank>...killed.\\n"" ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> child = ( pid_t ) - 1 ; <S2SV_ModStart> && child != ( pid_t ) - 1 <S2SV_ModStart> if ( child != ( pid_t ) - 1 ) { <S2SV_ModStart> } 
4830,<S2SV_StartBug> saddr . sin_addr . s_addr = htonl ( INADDR_ANY ) ; <S2SV_EndBug> ,<S2SV_ModStart> INADDR_LOOPBACK <S2SV_ModEnd> 
4831,"<S2SV_StartBug> xfs_daddr_t blkno = map [ 0 ] . bm_bn ; <S2SV_EndBug> <S2SV_StartBug> pag = xfs_perag_get ( btp -> bt_mount , <S2SV_EndBug> ","<S2SV_ModStart> ; xfs_daddr_t eofs <S2SV_ModStart> eofs = XFS_FSB_TO_BB ( btp -> bt_mount , btp -> bt_mount -> m_sb . sb_dblocks ) ; if ( blkno >= eofs ) { xfs_alert ( btp -> bt_mount , ""%s:<S2SV_blank>Block<S2SV_blank>out<S2SV_blank>of<S2SV_blank>range:<S2SV_blank>block<S2SV_blank>0x%llx,<S2SV_blank>EOFS<S2SV_blank>0x%llx<S2SV_blank>"" , __func__ , blkno , eofs ) ; return NULL ; } "
4832,"<S2SV_StartBug> int ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( d2i_DSA_SIG ( & s , & sigbuf , siglen ) == NULL ) goto err ; <S2SV_EndBug> <S2SV_StartBug> DSA_SIG_free ( s ) ; <S2SV_EndBug> ","<S2SV_ModStart> const unsigned char * p = sigbuf ; unsigned char * der = NULL ; int derlen = - 1 ; <S2SV_ModStart> p <S2SV_ModEnd> <S2SV_ModStart> goto err ; derlen = i2d_DSA_SIG ( s , & der ) ; if ( derlen != siglen || memcmp ( sigbuf , der , derlen ) ) <S2SV_ModStart> if ( derlen > 0 ) { OPENSSL_cleanse ( der , derlen ) ; OPENSSL_free ( der ) ; } "
4833,<S2SV_StartBug> while ( res == 0 && dev ) { <S2SV_EndBug> <S2SV_StartBug> dev = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4834,<S2SV_StartBug> netdev -> hw_features = NETIF_F_SG | NETIF_F_HW_VLAN_CTAG_RX ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4835,<S2SV_StartBug> goto next_desc ; <S2SV_EndBug> ,"<S2SV_ModStart> ; } if ( ( buflen < elength ) || ( elength < 3 ) ) { dev_err ( & intf -> dev , ""invalid<S2SV_blank>descriptor<S2SV_blank>buffer<S2SV_blank>length\\n"" ) ; break "
4836,"<S2SV_StartBug> f = fopen ( filepath , ""rb"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""r"" <S2SV_ModEnd> "
4837,<S2SV_StartBug> if ( ex && ( flag != EXT4_GET_BLOCKS_PRE_IO ) <S2SV_EndBug> <S2SV_StartBug> if ( flag != EXT4_GET_BLOCKS_PRE_IO ) <S2SV_EndBug> ,<S2SV_ModStart> ! ( flag & <S2SV_ModEnd> <S2SV_ModStart> ! ( flag & EXT4_GET_BLOCKS_PRE_IO ) <S2SV_ModEnd> 
4838,<S2SV_StartBug> evt -> event . lun [ 1 ] = tpg -> tport_tpgt & 0xFF ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4839,"<S2SV_StartBug> struct btrfs_dir_item * di ; <S2SV_EndBug> <S2SV_StartBug> if ( flags & XATTR_REPLACE ) { <S2SV_EndBug> <S2SV_StartBug> di = btrfs_lookup_xattr ( trans , root , path , btrfs_ino ( inode ) , name , <S2SV_EndBug> <S2SV_StartBug> } else if ( ! di ) { <S2SV_EndBug> <S2SV_StartBug> ret = btrfs_delete_one_dir_name ( trans , root , path , di ) ; <S2SV_EndBug> <S2SV_StartBug> btrfs_release_path ( path ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( flags & XATTR_CREATE ) <S2SV_EndBug> <S2SV_StartBug> btrfs_release_path ( path ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( ! di ) { <S2SV_EndBug> <S2SV_StartBug> if ( value ) { <S2SV_EndBug> ","<S2SV_ModStart> = NULL <S2SV_ModStart> path -> skip_release_on_error = 1 ; if ( ! value ) { di = btrfs_lookup_xattr ( trans , root , path , btrfs_ino ( inode ) , name , name_len , - 1 ) ; if ( ! di && <S2SV_ModEnd> <S2SV_ModStart> ) ret = - ENODATA ; else if ( di ) ret = btrfs_delete_one_dir_name <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( flags & XATTR_REPLACE ) { ASSERT ( mutex_is_locked ( & inode -> i_mutex ) ) ; di = btrfs_lookup_xattr ( NULL , root , path , btrfs_ino ( inode ) , name , name_len , 0 ) ; <S2SV_ModEnd> <S2SV_ModStart> btrfs_release_path ( path ) ; di = NULL ; } ret = btrfs_insert_xattr_item <S2SV_ModEnd> <S2SV_ModStart> btrfs_ino ( inode ) , name , name_len , value , size ) ; if ( ret == - EOVERFLOW ) { ret = 0 ; btrfs_assert_tree_locked ( path -> nodes [ 0 ] ) ; di = btrfs_match_dir_item_name ( root , path , name , name_len ) ; if ( ! di && ! ( flags & XATTR_REPLACE ) ) { ret = - ENOSPC ; <S2SV_ModEnd> <S2SV_ModStart> } } else if ( ret == - EEXIST ) { ret = 0 ; di = btrfs_match_dir_item_name ( root , path , name , name_len ) ; ASSERT ( di ) ; } else if ( ret ) { <S2SV_ModEnd> <S2SV_ModStart> if ( di && <S2SV_ModEnd> <S2SV_ModStart> ) { ret = - EEXIST ; <S2SV_ModStart> } if ( di ) { const int slot = path -> slots [ 0 ] ; struct extent_buffer * leaf = path -> nodes [ 0 ] ; const u16 old_data_len = btrfs_dir_data_len ( leaf , di ) ; const u32 item_size = btrfs_item_size_nr ( leaf , slot ) ; const u32 data_size = sizeof ( * di ) + name_len + size ; struct btrfs_item * item ; unsigned long data_ptr ; char * ptr ; if ( size > old_data_len ) { if ( btrfs_leaf_free_space ( root , leaf ) < ( size - old_data_len ) ) { ret = - ENOSPC <S2SV_ModEnd> <S2SV_ModStart> } if ( old_data_len + name_len + sizeof ( * di ) == item_size ) { if ( size > old_data_len ) btrfs_extend_item ( root , path , size - old_data_len ) ; <S2SV_ModStart> size < old_data_len ) btrfs_truncate_item ( root , path , data_size , 1 ) ; } else { <S2SV_ModEnd> <S2SV_ModStart> btrfs_extend_item ( root , path , data_size ) ; } item = btrfs_item_nr ( slot ) ; ptr = btrfs_item_ptr ( leaf , slot , char ) ; ptr += btrfs_item_size ( leaf , item ) - data_size ; di = ( struct btrfs_dir_item * ) ptr ; btrfs_set_dir_data_len ( leaf , di , size ) ; data_ptr = ( ( unsigned long ) ( di + 1 ) ) + name_len ; write_extent_buffer ( leaf , value , data_ptr , size ) ; btrfs_mark_buffer_dirty ( leaf ) ; } else { <S2SV_ModEnd> "
4840,<S2SV_StartBug> newlen = x -> length * 6 / 5 ; <S2SV_EndBug> <S2SV_StartBug> if ( newlen == x -> length ) <S2SV_EndBug> ,<S2SV_ModStart> area_size <S2SV_ModEnd> <S2SV_ModStart> area_size <S2SV_ModEnd> 
4841,<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> msg -> msg_namelen = 0 ; 
4842,<S2SV_StartBug> if ( ( '%' == in ) && ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( alloc > 2 ) && 
4843,"<S2SV_StartBug> res = ip6_xmit ( sk , skb , & fl6 , np -> opt , np -> tclass ) ; <S2SV_EndBug> ",<S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) 
4844,<S2SV_StartBug> skb_dst_drop ( skb ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( unlikely ( IPCB ( skb ) -> opt . optlen ) ) skb_dst_force ( skb ) ; else 
4845,<S2SV_StartBug> if ( ( CUR == '/' ) && ( NXT ( 1 ) == '/' ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ctxt -> error ) return ; if ( 
4846,<S2SV_StartBug> u32 offset ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4847,"<S2SV_StartBug> if ( ( r = ssh_packet_get_compress_state ( m , ssh ) ) != 0 || <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4848,<S2SV_StartBug> bi -> pdwidth = ( bi -> rowbytes * 8 ) / bi -> pixelsize ; <S2SV_EndBug> <S2SV_StartBug> if ( bi -> pdwidth < bi -> npwidth ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( bi -> pixelsize > 0 ) { <S2SV_ModStart> } 
4849,<S2SV_StartBug> sas_port_delete ( phy -> port ) ; <S2SV_EndBug> ,"<S2SV_ModStart> list_add_tail ( & phy -> port -> del_list , & parent -> port -> sas_port_del_list <S2SV_ModEnd> "
4850,"<S2SV_StartBug> static u32 __ipv6_select_ident ( struct net * net , u32 hashrnd , <S2SV_EndBug> <S2SV_StartBug> u32 hash , id ; <S2SV_EndBug> <S2SV_StartBug> hash = __ipv6_addr_jhash ( dst , hashrnd ) ; <S2SV_EndBug> <S2SV_StartBug> hash = __ipv6_addr_jhash ( src , hash ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> const struct { struct in6_addr dst ; struct in6_addr src ; } __aligned ( SIPHASH_ALIGNMENT ) combined = { . dst = * dst , . src = * src , } ; <S2SV_ModStart> if ( unlikely ( siphash_key_is_zero ( & net -> ipv4 . ip_id_key ) ) ) get_random_bytes ( & net -> ipv4 . ip_id_key , sizeof ( net -> ipv4 . ip_id_key ) <S2SV_ModEnd> <S2SV_ModStart> siphash ( & combined , sizeof ( combined ) , & net -> ipv4 . ip_id_key <S2SV_ModEnd> "
4851,"<S2SV_StartBug> if ( unlikely ( ! access_ok ( ! rw , buf , kiocb -> ki_nbytes ) ) ) <S2SV_EndBug> <S2SV_StartBug> iovec -> iov_len = kiocb -> ki_nbytes ; <S2SV_EndBug> ",<S2SV_ModStart> size_t len = kiocb -> ki_nbytes ; if ( len > MAX_RW_COUNT ) len = MAX_RW_COUNT ; <S2SV_ModStart> len <S2SV_ModEnd> <S2SV_ModStart> len <S2SV_ModEnd> 
4852,"<S2SV_StartBug> ( * sp -> encodepfunc ) ( tif , bp , cc ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! <S2SV_ModStart> ) return 0 
4853,"<S2SV_StartBug> vpx_memset ( & next_frame , 0 , sizeof ( next_frame ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( this_frame , & next_frame , sizeof ( * this_frame ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
4854,"<S2SV_StartBug> char * outname = create_output_name ( ( unsigned char * ) f [ i ] -> filename , NULL , 0 , 1 , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4855,"<S2SV_StartBug> uint16_t numChannels , chansSpecified , chanMask = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( numChannels < chansSpecified || numChannels < 1 ) { <S2SV_EndBug> <S2SV_StartBug> total_samples = dff_chunk_header . ckDataSize / config -> num_channels ; <S2SV_EndBug> ","<S2SV_ModStart> = 0 <S2SV_ModStart> || numChannels > 256 <S2SV_ModStart> if ( ! config -> num_channels ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } "
4856,<S2SV_StartBug> return PTR_ERR ( tty ) ; <S2SV_EndBug> ,<S2SV_ModStart> tty_driver_kref_put ( driver ) ; 
4857,"<S2SV_StartBug> ( sctp_paramhdr_t * ) addip_hdr -> params , <S2SV_EndBug> ","<S2SV_ModStart> asconf_ack , false , <S2SV_ModEnd> "
4858,"<S2SV_StartBug> memory_length += extra_length - available_length + BLOCK_QUEUE ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( cp , qp -> d_memory , memory_length ) ; <S2SV_EndBug> ",<S2SV_ModStart> size_t original_length = memory_length ; <S2SV_ModStart> original_length <S2SV_ModEnd> 
4859,<S2SV_StartBug> res . acl_len ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4860,"<S2SV_StartBug> q = QueueAuthenticPixels ( image , x , y , Min ( 4 , dds_info -> width - x ) , <S2SV_EndBug> <S2SV_StartBug> Min ( 4 , dds_info -> height - y ) , exception ) ; <S2SV_EndBug> <S2SV_StartBug> SkipDXTMipmaps ( image , dds_info , 16 ) ; <S2SV_EndBug> ","<S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> MagickMin <S2SV_ModEnd> <S2SV_ModStart> return ( <S2SV_ModStart> , exception ) ) <S2SV_ModEnd> "
4861,"<S2SV_StartBug> id = idr_alloc ( & ids -> ipcs_idr , new , <S2SV_EndBug> <S2SV_StartBug> current_euid_egid ( & euid , & egid ) ; <S2SV_EndBug> ","<S2SV_ModStart> current_euid_egid ( & euid , & egid ) ; new -> cuid = new -> uid = euid ; new -> gid = new -> cgid = egid ; <S2SV_ModStart>  <S2SV_ModEnd> "
4862,<S2SV_StartBug> __be32 * pdata = ( __be32 * ) data ; <S2SV_EndBug> ,<S2SV_ModStart> pdata ; if ( datalen != 4 ) return - EINVAL ; 
4863,<S2SV_StartBug> if ( unlikely ( len > ring -> rx_buffersize ) ) { <S2SV_EndBug> ,<S2SV_ModStart> + ring -> frameoffset 
4864,"<S2SV_StartBug> set_string ( ""foo"" , module_object , ""string_array[%i]"" , 0 ) ; <S2SV_EndBug> ","<S2SV_ModStart> set_integer ( 256 , module_object , ""integer_array[%i]"" , 256 ) ; "
4865,<S2SV_StartBug> WARN_ON_ONCE ( ctx -> parent_ctx ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & ctx -> mutex ) ; <S2SV_EndBug> ,<S2SV_ModStart> lockdep_assert_held <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4866,"<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> nfunc , line , qedi -> host_no , & vaf ) ; <S2SV_EndBug> <S2SV_StartBug> pr_warn ( ""[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV"" , nfunc , line , & vaf ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> 
4867,"<S2SV_StartBug> xcfdata = ( XCFPixelInfo * ) AcquireQuantumMemory ( data_length , sizeof ( * xcfdata ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> MagickMax ( data_length , tile_image -> columns * tile_image -> rows ) <S2SV_ModEnd> "
4868,"<S2SV_StartBug> struct sshbuf * b ; <S2SV_EndBug> <S2SV_StartBug> char * pkalg , * userstyle = NULL , * key_s = NULL , * ca_s = NULL ; <S2SV_EndBug> <S2SV_StartBug> u_char * pkblob , * sig , have_sig ; <S2SV_EndBug> <S2SV_StartBug> if ( ! authctxt -> valid ) { <S2SV_EndBug> <S2SV_StartBug> __func__ , ssh_err ( r ) ) ; <S2SV_EndBug> <S2SV_StartBug> free ( sig ) ; <S2SV_EndBug> <S2SV_StartBug> fatal ( ""%s:<S2SV_blank>%s"" , __func__ , ssh_err ( r ) ) ; <S2SV_EndBug> <S2SV_StartBug> return authenticated ; <S2SV_EndBug> ","<S2SV_ModStart> = NULL <S2SV_ModStart> = NULL <S2SV_ModStart> = NULL <S2SV_ModStart> = NULL <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; } if ( ! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s:<S2SV_blank>disabled<S2SV_blank>because<S2SV_blank>of<S2SV_blank>invalid<S2SV_blank>user"" , __func__ ) ; goto done <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( ! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( ""%s:<S2SV_blank>disabled<S2SV_blank>because<S2SV_blank>of<S2SV_blank>invalid<S2SV_blank>user"" , __func__ ) ; goto done ; } <S2SV_ModStart> free ( sig ) ; "
4869,<S2SV_StartBug> NameContext sNC ; <S2SV_EndBug> <S2SV_StartBug> sNC . pParse = & sParse ; <S2SV_EndBug> ,<S2SV_ModStart> Select * pSelect = pTab -> pSelect ; <S2SV_ModStart> ; assert ( pSelect -> selFlags & SF_View ) ; pSelect -> selFlags &= ~ SF_View 
4870,<S2SV_StartBug> args -> rmtblkno = 0 ; <S2SV_EndBug> <S2SV_StartBug> args -> rmtblkcnt = 0 ; <S2SV_EndBug> <S2SV_StartBug> args -> rmtblkcnt = args -> rmtblkcnt2 ; <S2SV_EndBug> ,<S2SV_ModStart> rmtvaluelen2 = args -> rmtvaluelen ; args -> <S2SV_ModStart> = 0 ; args -> rmtvaluelen <S2SV_ModStart> ; args -> rmtvaluelen = args -> rmtvaluelen2 
4871,"<S2SV_StartBug> int i , j ; <S2SV_EndBug> <S2SV_StartBug> i = ctm -> length ; <S2SV_EndBug> <S2SV_StartBug> if ( ( i < 11 ) || ( i > 17 ) ) <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( i < 13 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> * ( p ++ ) = * ( str ++ ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( * str >= '0' ) && ( * str <= '9' ) ) <S2SV_EndBug> <S2SV_StartBug> if ( * str == 'Z' ) <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug> <S2SV_StartBug> if ( ( * str != '+' ) && ( * str != '-' ) ) <S2SV_EndBug> ","<S2SV_ModStart> , remaining <S2SV_ModStart> remaining <S2SV_ModEnd> <S2SV_ModStart> int min_length = sizeof ( ""YYMMDDHHMMZ"" ) - 1 ; int max_length = sizeof ( ""YYMMDDHHMMSS+hhmm"" ) - 1 ; if ( remaining < min_length || remaining > max_length <S2SV_ModEnd> <S2SV_ModStart> remaining -= 10 ; <S2SV_ModStart> int min_length = sizeof ( ""YYYYMMDDHHMMZ"" ) - 1 ; int max_length = sizeof ( ""YYYYMMDDHHMMSS.fff+hhmm"" ) - 1 ; if ( remaining < min_length || remaining > max_length <S2SV_ModEnd> <S2SV_ModStart> remaining -= 12 ; <S2SV_ModStart> if ( remaining < 2 ) return 0 ; * ( p ++ ) = * ( str ++ ) ; * ( p ++ ) = * ( str ++ ) ; remaining -= 2 ; if ( remaining && <S2SV_ModEnd> <S2SV_ModStart> remaining -- ; for ( i = 0 ; i < 3 && remaining ; i ++ , str ++ , remaining -- ) { if ( * str < '0' || * str > '9' ) break ; } <S2SV_ModEnd> <S2SV_ModStart> ! remaining ) return 0 ; if ( <S2SV_ModStart> { if ( remaining != 1 ) return 0 ; <S2SV_ModStart> } <S2SV_ModStart> ) return 0 ; if ( remaining != 5 ) return 0 ; if ( str [ 1 ] < '0' || str [ 1 ] > '9' || str [ 2 ] < '0' || str [ 2 ] > '9' || str [ 3 ] < '0' || str [ 3 ] > '9' || str [ 4 ] < '0' || str [ 4 ] > '9' "
4872,<S2SV_StartBug> PROFILER_ENTER ( context -> priv -> prof_nsc_rle_decompress_data ) <S2SV_EndBug> <S2SV_StartBug> nsc_rle_decompress_data ( context ) ; <S2SV_EndBug> <S2SV_StartBug> PROFILER_ENTER ( context -> priv -> prof_nsc_decode ) <S2SV_EndBug> <S2SV_StartBug> context -> decode ( context ) ; <S2SV_EndBug> <S2SV_StartBug> PROFILER_EXIT ( context -> priv -> prof_nsc_decode ) <S2SV_EndBug> ,<S2SV_ModStart> { BOOL rc ; <S2SV_ModStart> rc = <S2SV_ModStart> if ( ! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> rc = <S2SV_ModStart> if ( ! rc ) return FALSE ; } 
4873,"<S2SV_StartBug> if ( js_regexec ( re -> prog , a , & m , a > text ? REG_NOTBOL : 0 ) ) <S2SV_EndBug> ","<S2SV_ModStart> js_doregexec ( J , <S2SV_ModEnd> "
4874,"<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = hns_nic_net_xmit_hw ( ndev , skb , <S2SV_EndBug> <S2SV_StartBug> if ( ret == NETDEV_TX_OK ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4875,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> title , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> style_block , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> script , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> object , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> textarea , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> option , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> math , s ) ; <S2SV_EndBug> <S2SV_StartBug> # ifdef USE_PRETTYSRC <S2SV_EndBug> ","<S2SV_ModStart> HTChunk * target = NULL ; <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> target = <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( target != NULL ) { if ( target -> data == s ) { CTRACE ( ( tfp , ""BUG:<S2SV_blank>appending<S2SV_blank>chunk<S2SV_blank>to<S2SV_blank>itself:<S2SV_blank>`%.*s\'\\n"" , target -> size , target -> data ) ) ; } else { HTChunkPuts ( target , s ) ; } } "
4876,<S2SV_StartBug> return error ; <S2SV_EndBug> ,<S2SV_ModStart> < 0 ? error : 0 
4877,<S2SV_StartBug> kiocb -> ki_nr_segs = kiocb -> ki_nbytes ; <S2SV_EndBug> ,"<S2SV_ModStart> ret = rw_verify_area ( type , kiocb -> ki_filp , & kiocb -> ki_pos , ret ) ; if ( ret < 0 ) goto out ; "
4878,"<S2SV_StartBug> sas_discover_event ( dev -> port , DISCE_PROBE ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4879,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> pdo_row_ce -> unserialize = zend_class_unserialize_deny ; 
4880,<S2SV_StartBug> int error ; <S2SV_EndBug> <S2SV_StartBug> if ( ext2_xattr_cache_insert ( bh ) ) <S2SV_EndBug> ,"<S2SV_ModStart> ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( inode -> i_sb ) -> s_mb_cache <S2SV_ModStart> ext2_mb_cache , "
4881,<S2SV_StartBug> if ( client -> type == USER_CLIENT ) <S2SV_EndBug> ,<S2SV_ModStart> && client -> data . user . fifo 
4882,<S2SV_StartBug> if ( ! index_key . type -> match || ! index_key . type -> instantiate || <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
4883,"<S2SV_StartBug> file = fopen ( ""/tmp/keepalived.json"" , ""w"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> fopen_safe <S2SV_ModEnd> 
4884,"<S2SV_StartBug> pdf -> xrefs = calloc ( 1 , sizeof ( xref_t ) * pdf -> n_xrefs ) ; <S2SV_EndBug> ",<S2SV_ModStart> safe_calloc ( <S2SV_ModEnd> 
4885,<S2SV_StartBug> return err ; <S2SV_EndBug> ,<S2SV_ModStart> { kfree_skb ( skb ) ; return err ; } <S2SV_ModEnd> 
4886,<S2SV_StartBug> int delta_munlocked ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> delta_munlocked = - nr + pagevec_count ( & pvec_putback ) ; <S2SV_EndBug> ,<S2SV_ModStart> = - nr <S2SV_ModStart> else { delta_munlocked ++ ; } <S2SV_ModStart>  <S2SV_ModEnd> 
4887,<S2SV_StartBug> skipsize = LOGICAL_BLOCK_SIZE * vd -> location ; <S2SV_EndBug> <S2SV_StartBug> skipsize = LOGICAL_BLOCK_SIZE * vd -> location ; <S2SV_EndBug> ,<S2SV_ModStart> ( int64_t ) <S2SV_ModStart> ( int64_t ) 
4888,<S2SV_StartBug> int val = 1 ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ssocket == NULL ) return - ENOTSOCK 
4889,"<S2SV_StartBug> const int eb_y = MAX ( ALIGN_POWER_OF_TWO ( src -> y_width , 6 ) - src -> y_width , <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_ALPHA <S2SV_EndBug> <S2SV_StartBug> src -> y_width , src -> y_height , <S2SV_EndBug> <S2SV_StartBug> src -> uv_width , src -> uv_height , <S2SV_EndBug> <S2SV_StartBug> src -> uv_width , src -> uv_height , <S2SV_EndBug> ","<S2SV_ModStart> er_y = MAX ( src -> y_width + 16 , ALIGN_POWER_OF_TWO ( src -> y_width , 6 ) ) - src -> y_crop_width ; const int <S2SV_ModStart> src -> y_height + 16 , <S2SV_ModStart> y_height <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> y_crop_height <S2SV_ModEnd> <S2SV_ModStart> CONFIG_VP9_HIGHBITDEPTH if ( src -> flags & YV12_FLAG_HIGHBITDEPTH ) { highbd_copy_and_extend_plane ( src -> y_buffer , src -> y_stride , dst -> y_buffer , dst -> y_stride , src -> y_crop_width , src -> y_crop_height , et_y , el_y , eb_y , er_y ) ; highbd_copy_and_extend_plane ( src -> u_buffer , src -> uv_stride , dst -> u_buffer , dst -> uv_stride , src -> uv_crop_width , src -> uv_crop_height , et_uv , el_uv , eb_uv , er_uv ) ; highbd_copy_and_extend_plane ( src -> v_buffer , src -> uv_stride , dst -> v_buffer , dst -> uv_stride , src -> uv_crop_width , src -> uv_crop_height , et_uv , el_uv , eb_uv , er_uv ) ; return ; } <S2SV_ModEnd> <S2SV_ModStart> y_crop_width , src -> y_crop_height <S2SV_ModEnd> <S2SV_ModStart> uv_crop_width , src -> uv_crop_height <S2SV_ModEnd> <S2SV_ModStart> uv_crop_width , src -> uv_crop_height <S2SV_ModEnd> "
4890,<S2SV_StartBug> void * base = dlmalloc ( bytes + sizeof ( AllocationEntry ) ) ; <S2SV_EndBug> ,<S2SV_ModStart> size_t size = bytes + sizeof ( AllocationEntry ) ; if ( size < bytes ) { return NULL ; } <S2SV_ModStart> size <S2SV_ModEnd> 
4891,<S2SV_StartBug> ps_dec -> u1_mb_idx = 0 ; <S2SV_EndBug> <S2SV_StartBug> ps_dec -> u2_total_mbs_coded ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( u1_tfr_n_mb ) <S2SV_EndBug> ,<S2SV_ModStart> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ps_dec -> u2_total_mbs_coded += u1_num_mbs ; 
4892,"<S2SV_StartBug> ND_TCHECK2 ( tptr [ 0 ] , 3 ) ; <S2SV_EndBug> <S2SV_StartBug> tlen = len ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>TLV<S2SV_blank>(%u),<S2SV_blank>length<S2SV_blank>%u"" , <S2SV_EndBug> <S2SV_StartBug> type , length ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( tptr [ 3 ] , length - 3 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( tptr [ 3 ] , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> EXTRACT_64BITS ( tptr + 3 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , tptr + 3 , ""\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>"" , length - 3 ) ; <S2SV_EndBug> ",<S2SV_ModStart> tlen = len ; while ( tlen >= 3 ) { <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> tptr += 3 ; tlen -= 3 ; <S2SV_ModStart> ; if ( length < 3 ) goto trunc ; length -= 3 <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( length < 8 ) goto trunc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4893,"<S2SV_StartBug> # line 106 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1330 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 115 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1338 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 119 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1351 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 128 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> RE_NODE * leftmost_node = ( yyvsp [ - 1 ] . re_node ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1413 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 190 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1421 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 194 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1434 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 207 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1442 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 211 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1451 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 220 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1468 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 233 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1476 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 237 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1485 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 246 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1512 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 269 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1548 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 301 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1574 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 323 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1594 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 343 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1602 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 347 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> ( yyval . re_node ) = yr_re_node_create ( RE_NODE_ALT , ( yyvsp [ - 2 ] . re_node ) , ( yyvsp [ 0 ] . re_node ) ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1617 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 361 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1629 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 369 ""hex_grammar.y"" <S2SV_EndBug> <S2SV_StartBug> # line 1653 ""hex_grammar.c"" <S2SV_EndBug> <S2SV_StartBug> # line 1657 ""hex_grammar.c"" <S2SV_EndBug> ","<S2SV_ModStart> 113 <S2SV_ModEnd> <S2SV_ModStart> 1337 <S2SV_ModEnd> <S2SV_ModStart> 122 <S2SV_ModEnd> <S2SV_ModStart> 1345 <S2SV_ModEnd> <S2SV_ModStart> 126 ""hex_grammar.y"" { incr_ast_levels ( ) ; <S2SV_ModEnd> <S2SV_ModStart> 1360 <S2SV_ModEnd> <S2SV_ModStart> 137 <S2SV_ModEnd> <S2SV_ModStart> ) ; incr_ast_levels ( <S2SV_ModStart> 1424 <S2SV_ModEnd> <S2SV_ModStart> 201 <S2SV_ModEnd> <S2SV_ModStart> 1432 <S2SV_ModEnd> <S2SV_ModStart> 205 ""hex_grammar.y"" { incr_ast_levels ( ) ; <S2SV_ModEnd> <S2SV_ModStart> 1447 <S2SV_ModEnd> <S2SV_ModStart> 220 <S2SV_ModEnd> <S2SV_ModStart> 1455 <S2SV_ModEnd> <S2SV_ModStart> 224 <S2SV_ModEnd> <S2SV_ModStart> 1464 <S2SV_ModEnd> <S2SV_ModStart> 233 <S2SV_ModEnd> <S2SV_ModStart> 1481 <S2SV_ModEnd> <S2SV_ModStart> 246 <S2SV_ModEnd> <S2SV_ModStart> 1489 <S2SV_ModEnd> <S2SV_ModStart> 250 <S2SV_ModEnd> <S2SV_ModStart> 1498 <S2SV_ModEnd> <S2SV_ModStart> 259 <S2SV_ModEnd> <S2SV_ModStart> 1525 <S2SV_ModEnd> <S2SV_ModStart> 282 <S2SV_ModEnd> <S2SV_ModStart> 1561 <S2SV_ModEnd> <S2SV_ModStart> 314 <S2SV_ModEnd> <S2SV_ModStart> 1587 <S2SV_ModEnd> <S2SV_ModStart> 336 <S2SV_ModEnd> <S2SV_ModStart> 1607 <S2SV_ModEnd> <S2SV_ModStart> 356 <S2SV_ModEnd> <S2SV_ModStart> 1615 <S2SV_ModEnd> <S2SV_ModStart> 360 <S2SV_ModEnd> <S2SV_ModStart> incr_ast_levels ( ) ; <S2SV_ModStart> 1631 <S2SV_ModEnd> <S2SV_ModStart> 375 <S2SV_ModEnd> <S2SV_ModStart> 1643 <S2SV_ModEnd> <S2SV_ModStart> 383 <S2SV_ModEnd> <S2SV_ModStart> 1667 <S2SV_ModEnd> <S2SV_ModStart> 1671 <S2SV_ModEnd> "
4894,"<S2SV_StartBug> char group [ LONG_STRING ] ; <S2SV_EndBug> <S2SV_StartBug> if ( sscanf ( line , ""%s<S2SV_blank>"" ANUM ""<S2SV_blank>"" ANUM ""<S2SV_blank>%c<S2SV_blank>%[^\\n]"" , group , & last , & first , & mod , desc ) < 4 ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> = """" <S2SV_ModStart> ""%1023s<S2SV_blank>"" <S2SV_ModEnd> <S2SV_ModStart> ""<S2SV_blank>%c<S2SV_blank>%8191[^\\n]"" <S2SV_ModEnd> <S2SV_ModStart> { mutt_debug ( 4 , ""Cannot<S2SV_blank>parse<S2SV_blank>server<S2SV_blank>line:<S2SV_blank>%s\\n"" , line ) ; <S2SV_ModStart> } "
4895,<S2SV_StartBug> pStorage -> picSizeInMbs = <S2SV_EndBug> <S2SV_StartBug> pStorage -> activeSps -> picHeightInMbs ; <S2SV_EndBug> ,<S2SV_ModStart> if ( pStorage -> activeSps -> picWidthInMbs == 0 ) { pStorage -> picSizeInMbs = 0 ; } else if ( pStorage -> activeSps -> picHeightInMbs > UINT32_MAX / pStorage -> activeSps -> picWidthInMbs ) { return ( MEMORY_ALLOCATION_ERROR ) ; } else { <S2SV_ModStart> } 
4896,<S2SV_StartBug> if ( BPF_CLASS ( insn -> code ) != BPF_ALU64 ) { <S2SV_EndBug> <S2SV_StartBug> if ( umax_val > 63 ) { <S2SV_EndBug> <S2SV_StartBug> if ( umax_val > 63 ) { <S2SV_EndBug> <S2SV_StartBug> __reg_deduce_bounds ( dst_reg ) ; <S2SV_EndBug> ,"<S2SV_ModStart> u64 insn_bitness = <S2SV_ModEnd> <S2SV_ModStart> == BPF_ALU64 ) ? 64 : 32 ; <S2SV_ModEnd> <S2SV_ModStart> >= insn_bitness <S2SV_ModEnd> <S2SV_ModStart> >= insn_bitness <S2SV_ModEnd> <S2SV_ModStart> if ( BPF_CLASS ( insn -> code ) != BPF_ALU64 ) { coerce_reg_to_size ( dst_reg , 4 ) ; coerce_reg_to_size ( & src_reg , 4 ) ; } "
4897,<S2SV_StartBug> int iskew = imagew - tilew ; <S2SV_EndBug> <S2SV_StartBug> if ( colb + tilew > imagew ) { <S2SV_EndBug> ,<S2SV_ModStart> int64 iskew = ( int64 ) imagew - ( int64 ) <S2SV_ModEnd> <S2SV_ModStart> > iskew <S2SV_ModEnd> 
4898,<S2SV_StartBug> if ( ! ( dev -> flags & IFF_UP ) ) <S2SV_EndBug> <S2SV_StartBug> if ( skb -> len > ( dev -> mtu + dev -> hard_header_len ) ) <S2SV_EndBug> <S2SV_StartBug> return NET_RX_DROP ; <S2SV_EndBug> ,<S2SV_ModStart> || <S2SV_ModEnd> <S2SV_ModStart> ) { kfree_skb ( skb ) ; <S2SV_ModStart> } 
4899,"<S2SV_StartBug> else if ( ! strcasecmp ( target , ""LIST"" ) && myentity_find_ext ( target ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! strcasecmp ( target , ""CLEAR"" ) && myentity_find_ext ( target ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! strcasecmp ( target , ""MODIFY"" ) && myentity_find_ext ( target ) == NULL ) <S2SV_EndBug> ",<S2SV_ModStart> anope_flags_compat && <S2SV_ModStart> anope_flags_compat && <S2SV_ModStart> anope_flags_compat && 
4900,<S2SV_StartBug> user = key_user_lookup ( current_fsuid ( ) ) ; <S2SV_EndBug> <S2SV_StartBug> return ERR_PTR ( - ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> goto couldnt_alloc_key ; <S2SV_EndBug> <S2SV_StartBug> couldnt_alloc_key : <S2SV_EndBug> <S2SV_StartBug> key_put ( dest_keyring ) ; <S2SV_EndBug> ,<S2SV_ModStart> ret = construct_get_dest_keyring ( & dest_keyring ) ; if ( ret ) goto error ; <S2SV_ModStart> { ret = - ENOMEM ; goto error_put_dest_keyring ; } <S2SV_ModEnd> <S2SV_ModStart> error_put_dest_keyring <S2SV_ModEnd> <S2SV_ModStart> error_put_dest_keyring <S2SV_ModEnd> <S2SV_ModStart> error : 
4901,"<S2SV_StartBug> if ( s -> chunksize >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> s -> chunksize = strtoll ( line , NULL , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> av_log ( NULL , AV_LOG_TRACE , ""Chunked<S2SV_blank>encoding<S2SV_blank>data<S2SV_blank>size:<S2SV_blank>%"" PRId64 ""\'\\n"" , <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> int64_t target = h -> is_streamed ? 0 : s -> off ; <S2SV_EndBug> <S2SV_StartBug> av_log ( h , AV_LOG_INFO , ""Will<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%"" PRId64 ""<S2SV_blank>error=%s.\\n"" , s -> off , av_err2str ( read_ret ) ) ; <S2SV_EndBug> <S2SV_StartBug> av_log ( h , AV_LOG_ERROR , ""Failed<S2SV_blank>to<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%"" PRId64 "".\\n"" , target ) ; <S2SV_EndBug> ","<S2SV_ModStart> != UINT64_MAX <S2SV_ModEnd> <S2SV_ModStart> strtoull <S2SV_ModEnd> <S2SV_ModStart> h <S2SV_ModEnd> <S2SV_ModStart> PRIu64 <S2SV_ModEnd> <S2SV_ModStart> else if ( s -> chunksize == UINT64_MAX ) { av_log ( h , AV_LOG_ERROR , ""Invalid<S2SV_blank>chunk<S2SV_blank>size<S2SV_blank>%"" PRIu64 ""\\n"" , s -> chunksize ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> uint64_t <S2SV_ModEnd> <S2SV_ModStart> PRIu64 <S2SV_ModEnd> <S2SV_ModStart> PRIu64 <S2SV_ModEnd> "
4902,<S2SV_StartBug> long tmp = * old ; <S2SV_EndBug> <S2SV_StartBug> return * old == tmp ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( tmp == * old ) { * old = new ; return 1 ; } else { * old = tmp ; return 0 ; } <S2SV_ModEnd> 
4903,"<S2SV_StartBug> static void write_sync_code ( struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , VP9_SYNC_CODE_0 , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , VP9_SYNC_CODE_1 , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , VP9_SYNC_CODE_2 , 8 ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_write_bit_buffer <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_wb_write_literal <S2SV_ModEnd> 
4904,"<S2SV_StartBug> static void nsc_encode_sse2 ( NSC_CONTEXT * context , const BYTE * data , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> return TRUE ; 
4905,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> case RMT_NONE : break ; 
4906,"<S2SV_StartBug> other_branch = push_stack ( env , * insn_idx + insn -> off + 1 , * insn_idx ) ; <S2SV_EndBug> ","<S2SV_ModStart> , false "
4907,"<S2SV_StartBug> if ( fseek ( stats -> file , 0 , SEEK_END ) ) <S2SV_EndBug> ","<S2SV_ModStart> stats -> file == NULL ) fatal ( ""First-pass<S2SV_blank>stats<S2SV_blank>file<S2SV_blank>does<S2SV_blank>not<S2SV_blank>exist!"" ) ; if ( "
4908,"<S2SV_StartBug> if ( name && memchr ( name , '\\0' , namelen ) ) <S2SV_EndBug> ",<S2SV_ModStart> != NULL && namelen == 0 ) namelen = strlen ( name ) ; if ( name 
4909,"<S2SV_StartBug> static int mem_resize ( jas_stream_memobj_t * m , int bufsize ) <S2SV_EndBug> <S2SV_StartBug> assert ( bufsize >= 0 ) ; <S2SV_EndBug> <S2SV_StartBug> JAS_DBGLOG ( 100 , ( ""mem_resize(%p,<S2SV_blank>%d)\\n"" , m , bufsize ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""mem_resize(%p,<S2SV_blank>%zu)\\n"" <S2SV_ModEnd> <S2SV_ModStart> if ( ! bufsize ) { jas_eprintf ( ""mem_resize<S2SV_blank>was<S2SV_blank>not<S2SV_blank>really<S2SV_blank>designed<S2SV_blank>to<S2SV_blank>handle<S2SV_blank>a<S2SV_blank>buffer<S2SV_blank>of<S2SV_blank>size<S2SV_blank>0\\n"" ""This<S2SV_blank>may<S2SV_blank>not<S2SV_blank>work.\\n"" ) ; } "
4910,<S2SV_StartBug> unsigned int i ; <S2SV_EndBug> ,<S2SV_ModStart> ; cmap -> ents = 0 
4911,"<S2SV_StartBug> BITSET_SET_BIT ( cc -> bs , ( int ) ( * vs ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( * vs > 0xff ) return ONIGERR_INVALID_CODE_POINT_VALUE ; 
4912,<S2SV_StartBug> ut8 opcode = * ( p4 ++ ) & 0xff ; <S2SV_EndBug> ,<S2SV_ModStart> if ( p4 <= 0 ) { return ; } 
4913,"<S2SV_StartBug> h = __archive_read_ahead ( a , <S2SV_EndBug> ","<S2SV_ModStart> if ( cpio -> entry_bytes_remaining > 1024 * 1024 ) { archive_set_error ( & a -> archive , ENOMEM , ""Rejecting<S2SV_blank>malformed<S2SV_blank>cpio<S2SV_blank>archive:<S2SV_blank>symlink<S2SV_blank>contents<S2SV_blank>exceed<S2SV_blank>1<S2SV_blank>megabyte"" ) ; return ( ARCHIVE_FATAL ) ; } "
4914,"<S2SV_StartBug> . match_data . cmp = user_match , <S2SV_EndBug> ",<S2SV_ModStart> key_default_cmp <S2SV_ModEnd> 
4915,"<S2SV_StartBug> if ( pos + 8 > len ) { <S2SV_EndBug> <S2SV_StartBug> int min_val = ( ut32 ) ( UINT ( data , pos + 4 ) ) , <S2SV_EndBug> ",<S2SV_ModStart> + 8 <S2SV_ModStart> const <S2SV_ModStart> ; const int <S2SV_ModEnd> 
4916,"<S2SV_StartBug> ber_parse_header ( STREAM s , int tagval , int * length ) <S2SV_EndBug> ",<S2SV_ModStart> uint32 <S2SV_ModEnd> 
4917,"<S2SV_StartBug> if ( cid <= 0 ) <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = avpriv_dnxhd_get_frame_size ( cid ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) { <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = ff_dnxhd_get_hr_frame_size ( cid , dctx -> w , dctx -> h ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) <S2SV_EndBug> <S2SV_StartBug> return dctx -> remaining ; <S2SV_EndBug> ",<S2SV_ModStart> int remaining ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> continue ; } dctx -> remaining = remaining ; <S2SV_ModEnd> 
4918,"<S2SV_StartBug> first_block_offset = round_up ( offset , sb -> s_blocksize ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( last_block_offset > first_block_offset ) <S2SV_EndBug> <S2SV_StartBug> ext4_inode_resume_unlocked_dio ( inode ) ; <S2SV_EndBug> ",<S2SV_ModStart> ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> up_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; 
4919,"<S2SV_StartBug> printf ( ""Using<S2SV_blank>%s\\n"" , vpx_codec_iface_name ( decoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> res = vpx_codec_dec_init ( & codec , decoder -> interface ( ) , NULL , <S2SV_EndBug> ",<S2SV_ModStart> codec_interface <S2SV_ModEnd> <S2SV_ModStart> codec_interface <S2SV_ModEnd> 
4920,"<S2SV_StartBug> if ( strlen ( str ) >= sizeof ( lowstr ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ParseDateTime ( str , lowstr , field , ftype , & nf , ptr ) != 0 || <S2SV_EndBug> ","<S2SV_ModStart> > MAXDATELEN ) { errno = PGTYPES_TS_BAD_TIMESTAMP ; return ( noresult ) ; } if ( ParseDateTime ( str , lowstr , field , ftype , & nf , ptr ) != 0 || DecodeDateTime ( field , ftype , nf , & dtype , tm , & fsec , 0 ) != 0 ) { errno = PGTYPES_TS_BAD_TIMESTAMP ; return ( noresult ) ; } switch ( dtype ) { case DTK_DATE : if ( tm2timestamp ( tm , fsec , NULL , & result <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4921,"<S2SV_StartBug> Huff_transmit ( & huff , ch , seq ) ; <S2SV_EndBug> ","<S2SV_ModStart> , size << 3 "
4922,"<S2SV_StartBug> cmd = kmalloc ( sizeof ( * cmd ) , GFP_ATOMIC ) ; <S2SV_EndBug> ",<S2SV_ModStart> kzalloc <S2SV_ModEnd> 
4923,<S2SV_StartBug> for ( i = 0 ; i <= SERDES_MAX ; i ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> < <S2SV_ModEnd> 
4924,"<S2SV_StartBug> assert ( ( size_t ) CDF_SEC_SIZE ( h ) == len ) ; <S2SV_EndBug> <S2SV_StartBug> return cdf_read ( info , ( off_t ) CDF_SEC_POS ( h , id ) , <S2SV_EndBug> ","<S2SV_ModStart> size_t ss = <S2SV_ModEnd> <S2SV_ModStart> ; size_t pos = CDF_SEC_POS ( h , id ) ; assert ( ss <S2SV_ModStart> pos , <S2SV_ModEnd> "
4925,"<S2SV_StartBug> int client_socket = accept ( listen_socket_ , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> send ( client_socket_ , ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"" , 16 , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) <S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
4926,<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( clk_src ) ; 
4927,<S2SV_StartBug> struct buffer_head * page_bufs ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> ,"<S2SV_ModStart> = NULL <S2SV_ModStart> if ( page_bufs && buffer_uninit ( page_bufs ) ) { ext4_set_bh_endio ( page_bufs , inode ) ; ret = block_write_full_page_endio ( page , noalloc_get_block_write , wbc , ext4_end_io_buffer_write ) ; } else "
4928,<S2SV_StartBug> for ( i = 0 ; i < height ; ++ i ) <S2SV_EndBug> ,<S2SV_ModStart> assert ( width > 0 ) ; assert ( height > 0 ) ; assert ( width2 > 0 ) ; assert ( height2 > 0 ) ; 
4929,<S2SV_StartBug> schedule_work ( & sunkbd -> tq ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( sunkbd -> enabled ) 
4930,"<S2SV_StartBug> # define GIFOutputCode ( code ) { if ( bits > 0 ) datum |= ( size_t ) ( code ) << bits ; else datum = ( size_t ) ( code ) ; bits += number_bits ; while ( bits >= 8 ) { packet [ length ++ ] = ( unsigned char ) ( datum & 0xff ) ; if ( length >= 254 ) { ( void ) WriteBlobByte ( image , ( unsigned char ) length ) ; ( void ) WriteBlob ( image , length , packet ) ; length = 0 ; } datum >>= 8 ; bits -= 8 ; } if ( free_code > max_code ) { number_bits ++ ; if ( number_bits == MaxGIFBits ) max_code = MaxGIFTable ; else max_code = MaxCode ( number_bits ) ; } } <S2SV_EndBug> <S2SV_StartBug> index = ( Quantum ) ( ( size_t ) GetPixelIndex ( image , p ) & 0xff ) ; <S2SV_EndBug> <S2SV_StartBug> next_pixel = MagickFalse ; <S2SV_EndBug> ",<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> if ( k < 0 ) continue <S2SV_ModEnd> 
4931,"<S2SV_StartBug> else umount_tree ( mnt , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> UMOUNT_CONNECTED <S2SV_ModEnd> 
4932,<S2SV_StartBug> if ( ( ulen > SIZE_T_MAX / 2 ) || ( plen > ( SIZE_T_MAX / 2 - 2 ) ) ) <S2SV_EndBug> ,<S2SV_ModStart> 4 <S2SV_ModEnd> 
4933,"<S2SV_StartBug> char buffer [ 4096 ] ; <S2SV_EndBug> <S2SV_StartBug> char * buf = buffer , * buf2 = buffer2 , * d , * d_url ; <S2SV_EndBug> <S2SV_StartBug> if ( name_len > sizeof ( buffer ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( value ) <= sizeof ( buffer2 ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , * buf2 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> efree ( buf ) ; <S2SV_ModEnd> <S2SV_ModStart> buf2 = estrndup ( value , value_len ) ; <S2SV_ModEnd> <S2SV_ModStart> efree ( buf ) ; efree ( buf2 ) ; <S2SV_ModEnd> "
4934,"<S2SV_StartBug> int q ) { <S2SV_EndBug> <S2SV_StartBug> const double power_term = MIN ( vp9_convert_qindex_to_q ( q ) * 0.0125 + pt_low , <S2SV_EndBug> ","<S2SV_ModStart> , vpx_bit_depth_t bit_depth <S2SV_ModStart> , bit_depth ) * 0.01 <S2SV_ModEnd> "
4935,<S2SV_StartBug> tcp_init_send_head ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> icsk -> icsk_ack . rcv_mss = TCP_MIN_MSS ; 
4936,<S2SV_StartBug> return true ; <S2SV_EndBug> ,<S2SV_ModStart> nf_generic_should_process ( nf_ct_protonum ( ct ) ) <S2SV_ModEnd> 
4937,<S2SV_StartBug> parse_input ( conn ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( <S2SV_ModStart> != 0 ) return 
4938,<S2SV_StartBug> MATLAB_KO : <S2SV_EndBug> ,<S2SV_ModStart> if ( clone_info != ( ImageInfo * ) NULL ) 
4939,"<S2SV_StartBug> if ( ! bgp_attr_print ( ndo , atype , p , alen ) ) <S2SV_EndBug> ","<S2SV_ModStart> , 0 "
4940,<S2SV_StartBug> ext2_xattr_put_super ( sb ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( sbi -> s_mb_cache ) { ext2_xattr_destroy_cache ( sbi -> s_mb_cache ) ; sbi -> s_mb_cache = NULL ; } <S2SV_ModEnd> 
4941,<S2SV_StartBug> if ( _payload ) { <S2SV_EndBug> ,<S2SV_ModStart> plen <S2SV_ModEnd> 
4942,"<S2SV_StartBug> sf -> RD = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> thresh_mult [ THR_SPLIT3 ] = speed_map ( Speed , thresh_mult_map_split2 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cpi -> mb . error_bins , 0 , sizeof ( cpi -> mb . error_bins ) ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> mb . quantize_b_pair = vp8_regular_quantize_b_pair ; <S2SV_EndBug> <S2SV_StartBug> cpi -> mb . quantize_b = vp8_fast_quantize_b ; <S2SV_EndBug> ",<S2SV_ModStart> cpi -> mb . mbs_zero_last_dot_suppress = 0 ; <S2SV_ModStart> if ( ( cpi -> Speed <= 6 ) && ( cpi -> oxcf . number_of_layers > 1 ) && ( cpi -> ref_frame_flags & VP8_LAST_FRAME ) && ( cpi -> ref_frame_flags & VP8_GOLD_FRAME ) ) { if ( cpi -> closest_reference_frame == GOLDEN_FRAME ) { sf -> thresh_mult [ THR_ZERO2 ] = sf -> thresh_mult [ THR_ZERO2 ] >> 3 ; sf -> thresh_mult [ THR_NEAREST2 ] = sf -> thresh_mult [ THR_NEAREST2 ] >> 3 ; sf -> thresh_mult [ THR_NEAR2 ] = sf -> thresh_mult [ THR_NEAR2 ] >> 3 ; } else { sf -> thresh_mult [ THR_ZERO2 ] = sf -> thresh_mult [ THR_ZERO2 ] >> 1 ; sf -> thresh_mult [ THR_NEAREST2 ] = sf -> thresh_mult [ THR_NEAREST2 ] >> 1 ; sf -> thresh_mult [ THR_NEAR2 ] = sf -> thresh_mult [ THR_NEAR2 ] >> 1 ; } } <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> } else { <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4943,<S2SV_StartBug> char * bufptr ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( cnt < 0 ) { jas_deprecated ( ""negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_read"" ) ; } "
4944,"<S2SV_StartBug> struct r_bin_dyldcache_obj_t * bin ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( bin = malloc ( sizeof ( struct r_bin_dyldcache_obj_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> memset ( bin , 0 , sizeof ( struct r_bin_dyldcache_obj_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! r_buf_set_bytes ( bin -> b , buf , size ) ) { <S2SV_EndBug> ",<S2SV_ModStart> = R_NEW0 ( struct r_bin_dyldcache_obj_t ) <S2SV_ModStart> bin <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ! bin -> b || 
4945,"<S2SV_StartBug> img = ctx -> iface -> dec . get_frame ( ctx -> priv -> alg_priv , iter ) ; <S2SV_EndBug> ",<S2SV_ModStart> get_alg_priv ( ctx ) <S2SV_ModEnd> 
4946,<S2SV_StartBug> if ( Offset < ( SizeOfHeader + 8 ) ) goto Error ; <S2SV_EndBug> ,<S2SV_ModStart> ) goto Error ; if ( ( Offset + Len ) > SizeOfTag + 8 
4947,"<S2SV_StartBug> static u32 ip_idents_hashrnd __read_mostly ; <S2SV_EndBug> <S2SV_StartBug> net_get_random_once ( & ip_idents_hashrnd , sizeof ( ip_idents_hashrnd ) ) ; <S2SV_EndBug> <S2SV_StartBug> hash = jhash_3words ( ( __force u32 ) iph -> daddr , <S2SV_EndBug> <S2SV_StartBug> iph -> protocol ^ net_hash_mix ( net ) , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( unlikely ( siphash_key_is_zero ( & net -> ipv4 . ip_id_key ) ) ) get_random_bytes ( & net -> ipv4 . ip_id_key <S2SV_ModEnd> <S2SV_ModStart> net -> ipv4 . ip_id_key <S2SV_ModEnd> <S2SV_ModStart> siphash_3u32 <S2SV_ModEnd> <S2SV_ModStart> , & net -> ipv4 . ip_id_key <S2SV_ModEnd> "
4948,"<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_lock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4949,"<S2SV_StartBug> touch_file ( t -> stamp_path , true , t -> last_trigger . realtime , UID_INVALID , GID_INVALID , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> MODE_INVALID <S2SV_ModEnd> 
4950,<S2SV_StartBug> skb_dst_force ( skb ) ; <S2SV_EndBug> ,<S2SV_ModStart> skb_set_err_queue ( skb ) ; 
4951,"<S2SV_StartBug> lua_authz_provider_spec * spec ; <S2SV_EndBug> <S2SV_StartBug> if ( require_line && * require_line ) { <S2SV_EndBug> <S2SV_StartBug> spec -> args = apr_array_make ( cmd -> pool , 2 , sizeof ( const char * ) ) ; <S2SV_EndBug> <S2SV_StartBug> APR_ARRAY_PUSH ( spec -> args , const char * ) = arg ; <S2SV_EndBug> <S2SV_StartBug> * parsed_require_line = spec ; <S2SV_EndBug> ","<S2SV_ModStart> ; lua_authz_provider_func * func = apr_pcalloc ( cmd -> pool , sizeof ( lua_authz_provider_func ) ) <S2SV_ModStart> func -> spec = spec ; <S2SV_ModStart> func <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> <S2SV_ModStart> func <S2SV_ModEnd> "
4952,<S2SV_StartBug> len -= cut ; <S2SV_EndBug> ,<S2SV_ModStart> + 1 
4953,"<S2SV_StartBug> authpending_file_descriptor = open ( cfg -> authpending_file , O_RDONLY | O_CREAT , 0664 ) ; <S2SV_EndBug> <S2SV_StartBug> return retval ; <S2SV_EndBug> ",<S2SV_ModStart> | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY <S2SV_ModStart> if ( cfg -> is_custom_debug_file ) { fclose ( cfg -> debug_file ) ; } 
4954,"<S2SV_StartBug> vpx_memset ( lfi -> lfthr [ lvl ] . lim , block_inside_limit , SIMD_WIDTH ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( lfi -> lfthr [ lvl ] . mblim , ( 2 * ( lvl + 2 ) + block_inside_limit ) , <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> 
4955,"<S2SV_StartBug> recv ( uipc_main . signal_fds [ 0 ] , & sig_recv , sizeof ( sig_recv ) , MSG_WAITALL ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
4956,<S2SV_StartBug> ASSERT ( redir_index < IOAPIC_NUM_PINS ) ; <S2SV_EndBug> <S2SV_StartBug> redir_content = ioapic -> redirtbl [ redir_index ] . bits ; <S2SV_EndBug> ,<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; else redir_content = ~ 0ULL 
4957,"<S2SV_StartBug> void <S2SV_EndBug> <S2SV_StartBug> if ( encrypted ) { <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug> <S2SV_StartBug> cib_send_plaintext ( GPOINTER_TO_INT ( session ) , msg ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> int rc = - 1 ; char * xml_text = NULL ; int len = 0 ; xml_text = dump_xml_unformatted ( <S2SV_ModEnd> <S2SV_ModStart> if ( xml_text ) { len = strlen ( xml_text ) ; <S2SV_ModEnd> <S2SV_ModStart> crm_err ( ""Invalid<S2SV_blank>XML,<S2SV_blank>can<S2SV_blank>not<S2SV_blank>send<S2SV_blank>msg"" ) ; return - 1 ; } rc = crm_send_remote_msg_raw ( session , xml_text , len , encrypted ) ; if ( rc < 0 ) { goto done ; } rc = crm_send_remote_msg_raw ( session , REMOTE_MSG_TERMINATOR , strlen ( REMOTE_MSG_TERMINATOR ) , encrypted ) ; done : if ( rc < 0 ) { crm_err ( ""Failed<S2SV_blank>to<S2SV_blank>send<S2SV_blank>remote<S2SV_blank>msg,<S2SV_blank>rc<S2SV_blank>=<S2SV_blank>%d"" , rc <S2SV_ModEnd> <S2SV_ModStart> free ( xml_text ) ; return rc ; "
4958,<S2SV_StartBug> ps_dec_op = ( ivd_video_decode_op_t * ) pv_api_op ; <S2SV_EndBug> ,"<S2SV_ModStart> { UWORD32 u4_size ; u4_size = ps_dec_op -> u4_size ; memset ( ps_dec_op , 0 , sizeof ( ivd_video_decode_op_t ) ) ; ps_dec_op -> u4_size = u4_size ; } "
4959,<S2SV_StartBug> if ( ( int ) val < 0 ) <S2SV_EndBug> ,<S2SV_ModStart> pmc_overflow ( val ) <S2SV_ModEnd> 
4960,<S2SV_StartBug> } else if ( rsp -> DialectRevision == cpu_to_le16 ( SMB311_PROT_ID ) ) <S2SV_EndBug> <S2SV_StartBug> ses -> server -> ops = & smb311_operations ; <S2SV_EndBug> ,<S2SV_ModStart> ses -> server -> vals = & smb21_values ; <S2SV_ModStart> { <S2SV_ModStart> ses -> server -> vals = & smb311_values ; } 
4961,"<S2SV_StartBug> err = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( err <S2SV_ModEnd> "
4962,<S2SV_StartBug> if ( report -> id == REPORT_KEY_STATE ) { <S2SV_EndBug> ,"<S2SV_ModStart> size > 64 ) { hid_warn ( hdev , ""invalid<S2SV_blank>size<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>for<S2SV_blank>picolcd<S2SV_blank>raw<S2SV_blank>event\\n"" , size ) ; return 0 ; } if ( "
4963,<S2SV_StartBug> struct rt6_info * rt = ( struct rt6_info * ) dst ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( dst -> ops -> family != AF_INET6 ) { dst_release ( dst ) ; return NULL ; } rt = ( struct rt6_info * ) dst 
4964,<S2SV_StartBug> done : <S2SV_EndBug> <S2SV_StartBug> ctxt -> memopp -> addr . mem . ea += ctxt -> _eip ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> done : 
4965,"<S2SV_StartBug> json_t * object , * foo , * bar , * baz ; <S2SV_EndBug> <S2SV_StartBug> void * iter ; <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( json_object_iter_key ( iter ) , ""a"" ) ) <S2SV_EndBug> <S2SV_StartBug> fail ( ""iterating<S2SV_blank>failed:<S2SV_blank>wrong<S2SV_blank>value"" ) ; <S2SV_EndBug> <S2SV_StartBug> iter = json_object_iter_next ( object , iter ) ; <S2SV_EndBug> <S2SV_StartBug> fail ( ""iterating<S2SV_blank>failed:<S2SV_blank>wrong<S2SV_blank>key"" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( json_object_iter_value ( iter ) != bar ) <S2SV_EndBug> <S2SV_StartBug> if ( json_object_iter_value ( iter ) != baz ) <S2SV_EndBug> ","<S2SV_ModStart> int i ; <S2SV_ModStart> const char * iter_keys [ 3 ] ; int have_key [ 3 ] = { 0 , 0 , 0 } ; json_t * iter_values [ 3 ] ; <S2SV_ModStart> iter_keys [ 0 ] = json_object_iter_key ( iter ) ; iter_values [ 0 ] = json_object_iter_value ( iter ) ; iter = json_object_iter_next ( object , iter ) ; if ( ! iter ) fail ( ""unable<S2SV_blank>to<S2SV_blank>increment<S2SV_blank>iterator"" ) ; iter_keys [ 1 ] = json_object_iter_key ( iter ) ; iter_values [ 1 ] = json_object_iter_value ( iter ) ; iter = json_object_iter_next ( object , iter ) ; if ( ! iter ) fail ( ""unable<S2SV_blank>to<S2SV_blank>increment<S2SV_blank>iterator"" ) ; iter_keys [ 2 ] = json_object_iter_key ( iter ) ; iter_values [ 2 ] = json_object_iter_value ( iter ) ; if ( json_object_iter_next ( object , iter ) != NULL ) fail ( ""able<S2SV_blank>to<S2SV_blank>iterate<S2SV_blank>over<S2SV_blank>the<S2SV_blank>end"" ) ; for ( i = 0 ; i < 3 ; i ++ ) { <S2SV_ModStart> iter_keys [ i ] <S2SV_ModEnd> <S2SV_ModStart> == 0 ) { if ( iter_values [ i ] <S2SV_ModEnd> <S2SV_ModStart> ""wrong<S2SV_blank>value<S2SV_blank>for<S2SV_blank>iter<S2SV_blank>key<S2SV_blank>a"" ) ; else have_key [ 0 ] = 1 ; } else if ( strcmp ( iter_keys [ i ] , ""b"" ) == 0 ) { if ( iter_values [ i ] != bar ) fail ( ""wrong<S2SV_blank>value<S2SV_blank>for<S2SV_blank>iter<S2SV_blank>key<S2SV_blank>b"" ) ; else have_key [ 1 ] = 1 ; } else if ( strcmp ( iter_keys [ i ] , ""c"" ) == 0 ) { if ( iter_values [ i ] != baz ) fail ( ""wrong<S2SV_blank>value<S2SV_blank>for<S2SV_blank>iter<S2SV_blank>key<S2SV_blank>c"" ) ; else have_key [ 2 ] = 1 ; } } for ( i = 0 ; i < 3 ; i ++ ) { if ( ! have_key [ i ] ) fail ( ""a<S2SV_blank>key<S2SV_blank>wasn\'t<S2SV_blank>iterated<S2SV_blank>over"" ) ; } if ( json_object_iter_at ( object , ""foo"" ) ) fail ( ""json_object_iter_at()<S2SV_blank>succeeds<S2SV_blank>for<S2SV_blank>non-existent<S2SV_blank>key"" ) ; iter = json_object_iter_at ( object , ""b"" ) ; if ( ! iter ) fail ( ""json_object_iter_at()<S2SV_blank>fails<S2SV_blank>for<S2SV_blank>an<S2SV_blank>existing<S2SV_blank>key"" ) ; if ( strcmp ( json_object_iter_key ( iter ) , ""b"" ) ) fail ( ""iterating<S2SV_blank>failed:<S2SV_blank>wrong<S2SV_blank>key"" ) ; if ( json_object_iter_value ( iter ) != bar ) fail ( <S2SV_ModStart> if ( json_object_iter_set ( object , iter , baz ) ) fail ( ""unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>value<S2SV_blank>at<S2SV_blank>iterator"" <S2SV_ModEnd> <S2SV_ModStart> ""json_object_iter_key()<S2SV_blank>fails<S2SV_blank>after<S2SV_blank>json_object_iter_set()"" <S2SV_ModEnd> <S2SV_ModStart> baz ) fail ( ""json_object_iter_value()<S2SV_blank>fails<S2SV_blank>after<S2SV_blank>json_object_iter_set()"" ) ; if ( json_object_get ( object , ""b"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4966,"<S2SV_StartBug> memcpy ( serial -> value , priv -> cac_id , priv -> cac_id_len ) ; <S2SV_EndBug> ",<S2SV_ModStart> serial -> len <S2SV_ModEnd> 
4967,<S2SV_StartBug> for ( i = 0 ; i < 4 && out -> data [ i ] ; i ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && out -> linesize [ i ] 
4968,<S2SV_StartBug> if ( ( intr_info & INTR_INFO_INTR_TYPE_MASK ) == INTR_TYPE_NMI_INTR ) <S2SV_EndBug> ,<S2SV_ModStart> is_nmi ( intr_info ) <S2SV_ModEnd> 
4969,<S2SV_StartBug> unsigned char * data ; <S2SV_EndBug> <S2SV_StartBug> data32 = ( uint32_t * ) data ; <S2SV_EndBug> <S2SV_StartBug> data32 [ i ] ^= wsctx -> header . mask . u ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> uint32_t tmp ; memcpy ( & tmp , data + i * sizeof ( tmp ) , sizeof ( tmp ) ) ; tmp <S2SV_ModEnd> <S2SV_ModStart> ; memcpy ( data + i * sizeof ( tmp ) , & tmp , sizeof ( tmp ) ) "
4970,"<S2SV_StartBug> return mount_pseudo ( fs_type , ""aio:"" , NULL , & ops , AIO_RING_MAGIC ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> struct dentry * root = <S2SV_ModEnd> <S2SV_ModStart> if ( ! IS_ERR ( root ) ) root -> d_sb -> s_iflags |= SB_I_NOEXEC ; return root ; 
4971,<S2SV_StartBug> * dptr ++ = 0xAA ; <S2SV_EndBug> ,<S2SV_ModStart> ROSE_CALL_REQ_ADDR_LEN_VAL <S2SV_ModEnd> 
4972,<S2SV_StartBug> xmep -> proc = EXTRACT_32BITS ( & rp -> rm_call . cb_proc ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! ND_TTEST ( rp -> rm_call . cb_proc ) ) return ( 0 ) ; <S2SV_ModStart> ) ; if ( ! ND_TTEST ( rp -> rm_call . cb_vers ) ) return ( 0 
4973,"<S2SV_StartBug> vmcs_write32 ( TPR_THRESHOLD , vmcs12 -> tpr_threshold ) ; <S2SV_EndBug> ",<S2SV_ModStart> } else { # ifdef CONFIG_X86_64 exec_control |= CPU_BASED_CR8_LOAD_EXITING | CPU_BASED_CR8_STORE_EXITING ; # endif 
4974,"<S2SV_StartBug> ! ( e -> ip . flags & IPT_F_GOTO ) ) <S2SV_EndBug> <S2SV_StartBug> e = get_entry ( table_base , v ) ; <S2SV_EndBug> ",<S2SV_ModStart> { if ( unlikely ( stackidx >= private -> stacksize ) ) { verdict = NF_DROP ; break ; } <S2SV_ModStart> } 
4975,<S2SV_StartBug> int nNew = pSorter -> nMemory * 2 ; <S2SV_EndBug> ,<S2SV_ModStart> sqlite3_int64 nNew = 2 * ( sqlite3_int64 ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4976,<S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> switch ( EXTRACT_16BITS ( bp ) ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } return ; <S2SV_ModEnd> <S2SV_ModStart> ND_TCHECK_16BITS ( bp ) ; 
4977,<S2SV_StartBug> struct net * net = sock_net ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> bh_lock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_owned_by_user ( asoc -> base . sk ) ) { <S2SV_EndBug> <S2SV_StartBug> asoc -> base . sk -> sk_err = - error ; <S2SV_EndBug> <S2SV_StartBug> bh_unlock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> sock * sk = asoc -> base . sk ; struct <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
4978,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> return TEE_SUCCESS ; <S2SV_EndBug> ,"<S2SV_ModStart> size_t req_size = 0 ; <S2SV_ModStart> if ( ADD_OVERFLOW ( mem -> offs , mem -> size , & req_size ) || mem -> mobj -> size < req_size ) return TEE_ERROR_SECURITY ; "
4979,"<S2SV_StartBug> int ret = proc_dointvec ( table , write , buffer , lenp , ppos ) ; <S2SV_EndBug> ",<S2SV_ModStart> proc_dointvec_minmax <S2SV_ModEnd> 
4980,<S2SV_StartBug> return ret <= 0 ? ret : - EIO ; <S2SV_EndBug> ,<S2SV_ModStart> < <S2SV_ModEnd> 
4981,<S2SV_StartBug> int rc = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! scontext_len ) return - EINVAL 
4982,<S2SV_StartBug> char * identifier ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INSUFFICIENT_MEMORY ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> r1 . o = function -> return_obj ; <S2SV_EndBug> <S2SV_StartBug> yr_modules_unload_all ( context ) ; <S2SV_EndBug> ,"<S2SV_ModStart> YR_OBJECT * * obj_ptr ; YR_ARENA * obj_arena ; <S2SV_ModStart> ; FAIL_ON_ERROR_WITH_CLEANUP ( yr_arena_create ( 1024 , 0 , & obj_arena ) , yr_free ( stack ) ) <S2SV_ModStart> assert ( sp == 0 ) ; <S2SV_ModStart> result = yr_object_copy ( function -> return_obj , & <S2SV_ModEnd> <S2SV_ModStart> ) ; if ( result == ERROR_SUCCESS ) result = yr_arena_write_data ( obj_arena , & r1 . o , sizeof ( r1 . o ) , NULL ) ; stop = ( result != ERROR_SUCCESS ) ; push ( r1 ) ; <S2SV_ModEnd> <S2SV_ModStart> obj_ptr = ( YR_OBJECT * * ) yr_arena_base_address ( obj_arena ) ; while ( obj_ptr != NULL ) { yr_object_destroy ( * obj_ptr ) ; obj_ptr = ( YR_OBJECT * * ) yr_arena_next_address ( obj_arena , obj_ptr , sizeof ( YR_OBJECT * ) ) ; } yr_arena_destroy ( obj_arena ) ; "
4983,<S2SV_StartBug> err = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> ds = salg -> digestsize ; <S2SV_EndBug> <S2SV_StartBug> ss = salg -> statesize ; <S2SV_EndBug> ,<S2SV_ModStart> alg = & salg -> base ; <S2SV_ModStart> if ( crypto_shash_alg_has_setkey ( salg ) ) goto out_put_alg ; <S2SV_ModStart>  <S2SV_ModEnd> 
4984,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
4985,"<S2SV_StartBug> _pam_log ( LOG_DEBUG , ""server[%lu]<S2SV_blank>{<S2SV_blank>addr=%s,<S2SV_blank>key=\'%s\'<S2SV_blank>}"" , n , tac_ntop ( tac_srv [ n ] . addr -> ai_addr ) , <S2SV_EndBug> ","<S2SV_ModStart> ""server[%lu]<S2SV_blank>{<S2SV_blank>addr=%s,<S2SV_blank>key=\'********\'<S2SV_blank>}"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4986,"<S2SV_StartBug> vpx_memcpy ( p , vp8_bmode_prob , sizeof ( vp8_bmode_prob ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> 
4987,<S2SV_StartBug> client -> connectTimeout = DEFAULT_CONNECT_TIMEOUT ; <S2SV_EndBug> ,<S2SV_ModStart> ; client -> readTimeout = DEFAULT_READ_TIMEOUT 
4988,<S2SV_StartBug> for ( plane = 0 ; inpic -> data [ plane ] && plane < 4 ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> && inpic -> data [ plane ] && inpic -> linesize [ plane ] 
4989,"<S2SV_StartBug> map = q -> bufs [ first ] -> map = kmalloc ( sizeof ( struct videobuf_mapping ) , GFP_KERNEL ) ; <S2SV_EndBug> ",<S2SV_ModStart> kzalloc <S2SV_ModEnd> 
4990,<S2SV_StartBug> sock -> sk -> sk_uid = iattr -> ia_uid ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( sock -> sk ) <S2SV_ModStart> else err = - ENOENT ; 
4991,<S2SV_StartBug> struct sk_buff * skb ; <S2SV_EndBug> <S2SV_StartBug> ipc . opt = inet -> opt ; <S2SV_EndBug> <S2SV_StartBug> if ( ipc . opt && ipc . opt -> srr ) { <S2SV_EndBug> <S2SV_StartBug> faddr = ipc . opt -> faddr ; <S2SV_EndBug> <S2SV_StartBug> ( ipc . opt && ipc . opt -> is_strictroute ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> ; struct ip_options_data opt_copy <S2SV_ModStart> { struct ip_options_rcu * inet_opt ; rcu_read_lock ( ) ; inet_opt = rcu_dereference ( inet -> inet_opt ) ; if ( inet_opt ) { memcpy ( & opt_copy , inet_opt , sizeof ( * inet_opt ) + inet_opt -> opt . optlen ) ; ipc . opt = & opt_copy . opt ; } rcu_read_unlock ( ) ; } <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> opt . "
4992,<S2SV_StartBug> for ( vma = mm -> mmap ; vma ; vma = vma -> vm_next ) <S2SV_EndBug> ,<S2SV_ModStart> VM_WARN_ON ( ! mmget_still_valid ( mm ) ) ; 
4993,"<S2SV_StartBug> ret = ext4_convert_unwritten_extents_endio ( handle , inode , <S2SV_EndBug> ","<S2SV_ModStart> map , "
4994,"<S2SV_StartBug> if ( mi < 0 ) <S2SV_EndBug> <S2SV_StartBug> idev -> info -> mem [ mi ] . addr >> PAGE_SHIFT , <S2SV_EndBug> ",<S2SV_ModStart> struct uio_mem * mem ; <S2SV_ModStart> ) return - EINVAL ; mem = idev -> info -> mem + mi ; if ( vma -> vm_end - vma -> vm_start > mem -> size <S2SV_ModStart> mem -> <S2SV_ModEnd> 
4995,"<S2SV_StartBug> mpz_t xdiff , ydiff , lambda ; <S2SV_EndBug> <S2SV_StartBug> mpz_clears ( xdiff , ydiff , lambda , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( pointZZ_pIsIdentityElement ( op1 ) && pointZZ_pIsIdentityElement ( op2 ) ) { return pointZZ_pSetToIdentityElement ( rop ) ; } else if ( pointZZ_pIsIdentityElement ( op1 ) ) { mpz_set ( rop -> x , op2 -> x ) ; mpz_set ( rop -> y , op2 -> y ) ; return ; } else if ( pointZZ_pIsIdentityElement ( op2 ) ) { mpz_set ( rop -> x , op1 -> x ) ; mpz_set ( rop -> y , op1 -> y ) ; return ; } if ( pointZZ_pEqual ( op1 , op2 ) ) { pointZZ_pDouble ( rop , op1 , curve ) ; return ; } mpz_t negy ; mpz_init ( negy ) ; mpz_sub ( negy , curve -> p , op2 -> y ) ; if ( mpz_cmp ( op1 -> x , op2 -> x ) == 0 && mpz_cmp ( op1 -> y , negy ) == 0 ) { mpz_clear ( negy ) ; return pointZZ_pSetToIdentityElement ( rop ) ; } mpz_t <S2SV_ModEnd> <S2SV_ModStart> negy , "
4996,"<S2SV_StartBug> char * ext , szName [ 1000 ] , szExt [ 20 ] ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( szName , url ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ext && strlen ( ext ) > 1 ) { <S2SV_EndBug> ",<S2SV_ModStart> 1024 <S2SV_ModEnd> <S2SV_ModStart> if ( strlen ( url ) >= sizeof ( szName ) ) return GF_FALSE ; <S2SV_ModStart> && strlen ( ext ) <= sizeof ( szExt ) 
4997,"<S2SV_StartBug> vdev -> ctx = kzalloc ( nvec * sizeof ( struct vfio_pci_irq_ctx ) , GFP_KERNEL ) ; <S2SV_EndBug> ","<S2SV_ModStart> kcalloc ( nvec , <S2SV_ModEnd> "
4998,<S2SV_StartBug> int rc = 0 ; <S2SV_EndBug> <S2SV_StartBug> * uaddrlen = sizeof ( sllc ) ; <S2SV_EndBug> ,"<S2SV_ModStart> - EBADF ; memset ( & sllc , 0 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
4999,<S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> if ( vmx_get_cpl ( vcpu ) ) { kvm_queue_exception ( vcpu , UD_VECTOR ) ; return 0 ; } "
5000,<S2SV_StartBug> if ( atomic_dec_and_test ( & ucounts -> count ) ) { <S2SV_EndBug> <S2SV_StartBug> hlist_del_init ( & ucounts -> node ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ucounts -> count -= 1 ; if ( ! ucounts -> count ) <S2SV_ModStart> ; else ucounts = NULL <S2SV_ModStart>  <S2SV_ModEnd> 
5001,<S2SV_StartBug> data = img -> img_data ; <S2SV_EndBug> <S2SV_StartBug> data + x + y * img -> stride [ VPX_PLANE_ALPHA ] ; <S2SV_EndBug> <S2SV_StartBug> img -> planes [ VPX_PLANE_Y ] = data + x + y * img -> stride [ VPX_PLANE_Y ] ; <S2SV_EndBug> <S2SV_StartBug> img -> planes [ VPX_PLANE_U ] = data <S2SV_EndBug> <S2SV_StartBug> + ( y >> img -> y_chroma_shift ) * img -> stride [ VPX_PLANE_U ] ; <S2SV_EndBug> <S2SV_StartBug> img -> planes [ VPX_PLANE_V ] = data <S2SV_EndBug> <S2SV_StartBug> + ( y >> img -> y_chroma_shift ) * img -> stride [ VPX_PLANE_V ] ; <S2SV_EndBug> <S2SV_StartBug> img -> planes [ VPX_PLANE_V ] = data <S2SV_EndBug> <S2SV_StartBug> + ( y >> img -> y_chroma_shift ) * img -> stride [ VPX_PLANE_V ] ; <S2SV_EndBug> <S2SV_StartBug> img -> planes [ VPX_PLANE_U ] = data <S2SV_EndBug> <S2SV_StartBug> + ( y >> img -> y_chroma_shift ) * img -> stride [ VPX_PLANE_U ] ; <S2SV_EndBug> ,<S2SV_ModStart> const int bytes_per_sample = ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 ; <S2SV_ModStart> * bytes_per_sample <S2SV_ModStart> * bytes_per_sample + <S2SV_ModEnd> <S2SV_ModStart> data <S2SV_ModEnd> <S2SV_ModStart> * bytes_per_sample + <S2SV_ModEnd> <S2SV_ModStart> data <S2SV_ModEnd> <S2SV_ModStart> * bytes_per_sample + <S2SV_ModEnd> <S2SV_ModStart> data <S2SV_ModEnd> <S2SV_ModStart> * bytes_per_sample + <S2SV_ModEnd> <S2SV_ModStart> data <S2SV_ModEnd> <S2SV_ModStart> * bytes_per_sample + <S2SV_ModEnd> 
5002,"<S2SV_StartBug> JAS_DBGLOG ( 101 , ( ""jas_realloc<S2SV_blank>called<S2SV_blank>with<S2SV_blank>%x,%zu\\n"" , ptr , size ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""jas_realloc(%x,<S2SV_blank>%zu)\\n"" <S2SV_ModEnd> "
5003,<S2SV_StartBug> passert ( GLOBALS_ARE_RESET ( ) ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5004,"<S2SV_StartBug> vpx_memcpy ( cm -> fc . mvc , vp8_default_mv_context , sizeof ( vp8_default_mv_context ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> 
5005,<S2SV_StartBug> int mapping_address = address - mb_mapping -> start_bits ; <S2SV_EndBug> <S2SV_StartBug> if ( nb < 1 || MODBUS_MAX_WRITE_BITS < nb ) { <S2SV_EndBug> <S2SV_StartBug> int nb = ( req [ offset + 3 ] << 8 ) + req [ offset + 4 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( nb < 1 || MODBUS_MAX_WRITE_REGISTERS < nb ) { <S2SV_EndBug> ,<S2SV_ModStart> nb_bits = req [ offset + 5 ] ; int <S2SV_ModStart> || nb_bits * 8 < nb <S2SV_ModStart> ] ; int nb_bytes = req [ offset + 5 <S2SV_ModStart> < nb || nb_bytes * 8 
5006,"<S2SV_StartBug> int ret = 0 , found = 0 ; <S2SV_EndBug> <S2SV_StartBug> repo_config = perf_pathdup ( ""config"" ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5007,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 4 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""horDiff32"" , ""%s"" , ""(cc%(4*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> return 1 ; "
5008,"<S2SV_StartBug> bestsad = fn_ptr -> sdf ( what , what_stride , in_what , in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5009,<S2SV_StartBug> if ( A > skb -> len - sizeof ( struct nlattr ) ) <S2SV_EndBug> <S2SV_StartBug> if ( nla -> nla_len > A - skb -> len ) <S2SV_EndBug> ,<S2SV_ModStart> skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> - A 
5010,<S2SV_StartBug> total = le32_to_cpu ( raw_super -> segment_count ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( f2fs_cp_error ( sbi ) ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> unsigned int main_segs , blocks_per_seg ; int i ; <S2SV_ModStart> main_segs = le32_to_cpu ( raw_super -> segment_count_main ) ; blocks_per_seg = sbi -> blocks_per_seg ; for ( i = 0 ; i < NR_CURSEG_NODE_TYPE ; i ++ ) { if ( le32_to_cpu ( ckpt -> cur_node_segno [ i ] ) >= main_segs || le16_to_cpu ( ckpt -> cur_node_blkoff [ i ] ) >= blocks_per_seg ) return 1 ; } for ( i = 0 ; i < NR_CURSEG_DATA_TYPE ; i ++ ) { if ( le32_to_cpu ( ckpt -> cur_data_segno [ i ] ) >= main_segs || le16_to_cpu ( ckpt -> cur_data_blkoff [ i ] ) >= blocks_per_seg ) return 1 ; } "
5011,"<S2SV_StartBug> REQ ( n , suite ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 2 ; i < ( NCH ( n ) - 1 ) ; i ++ ) { <S2SV_EndBug> ","<S2SV_ModStart> if ( TYPE ( n ) != func_body_suite ) { <S2SV_ModStart> } <S2SV_ModStart> i = 2 ; if ( TYPE ( CHILD ( n , 1 ) ) == TYPE_COMMENT ) { i += 2 ; REQ ( CHILD ( n , 2 ) , NEWLINE ) ; } for ( <S2SV_ModEnd> "
5012,"<S2SV_StartBug> int status = - 1 ; <S2SV_EndBug> <S2SV_StartBug> ALOGV ( ""%s<S2SV_blank>context<S2SV_blank>%p"" , __func__ , handle ) ; <S2SV_EndBug> <S2SV_StartBug> pthread_mutex_lock ( & vol_listner_init_lock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( memcmp ( & ( context -> desc -> uuid ) , & ( recv_contex -> desc -> uuid ) , sizeof ( effect_uuid_t ) ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> && ( context -> session_id == recv_contex -> session_id ) <S2SV_EndBug> <S2SV_StartBug> && ( context -> stream_type == recv_contex -> stream_type ) ) { <S2SV_EndBug> <S2SV_StartBug> list_remove ( & context -> effect_list_node ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> EINVAL <S2SV_ModEnd> <S2SV_ModStart> uint32_t session_id ; uint32_t stream_type ; effect_uuid_t uuid ; <S2SV_ModStart> if ( recv_contex == NULL ) { return status ; } <S2SV_ModStart> ; session_id = recv_contex -> session_id ; stream_type = recv_contex -> stream_type ; uuid = recv_contex -> desc -> uuid <S2SV_ModStart> uuid <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> node <S2SV_ModEnd> <S2SV_ModStart> pthread_mutex_unlock ( & vol_listner_init_lock ) ; return status ; 
5013,<S2SV_StartBug> w -> linebreak = 1 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( w -> linebreak || w == text_info -> glyphs ) text_info -> n_lines -- ; if ( w != text_info -> glyphs ) 
5014,<S2SV_StartBug> if ( state -> expr_list . size == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( seq -> size == 1 ) <S2SV_EndBug> ,<S2SV_ModStart> ! state -> fmode ) { assert ( ! <S2SV_ModStart> ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5015,<S2SV_StartBug> if ( vma -> vm_flags & ( VM_DONTEXPAND | VM_PFNMAP ) ) { <S2SV_EndBug> ,<S2SV_ModStart> new_len > old_len ) { unsigned long pgoff ; if ( <S2SV_ModStart> goto Efault ; pgoff = ( addr - vma -> vm_start ) >> PAGE_SHIFT ; pgoff += vma -> vm_pgoff ; if ( pgoff + ( new_len >> PAGE_SHIFT ) < pgoff ) goto Einval <S2SV_ModEnd> 
5016,<S2SV_StartBug> kvm_async_pf_hash_reset ( vcpu ) ; <S2SV_EndBug> ,<S2SV_ModStart> vcpu -> arch . pv_time_enabled = false ; 
5017,<S2SV_StartBug> tfrc . tfrctx_x = hc -> tx_x ; <S2SV_EndBug> ,"<S2SV_ModStart> memset ( & tfrc , 0 , sizeof ( tfrc ) ) ; "
5018,<S2SV_StartBug> if ( ! is_exception ( intr_info ) ) <S2SV_EndBug> ,<S2SV_ModStart> is_nmi <S2SV_ModEnd> 
5019,<S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> n ++ ; <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> if ( n == nitems ( p ) ) { free ( copy ) ; return ; } } 
5020,<S2SV_StartBug> void ext4_xattr_destroy_cache ( struct mb_cache * cache ) <S2SV_EndBug> <S2SV_StartBug> mb_cache_destroy ( cache ) ; <S2SV_EndBug> ,<S2SV_ModStart> mb2_cache <S2SV_ModEnd> <S2SV_ModStart> mb2_cache_destroy <S2SV_ModEnd> 
5021,"<S2SV_StartBug> static bool dump_fd_info ( const char * dest_filename , char * source_filename , int source_base_ofs ) <S2SV_EndBug> <S2SV_StartBug> fclose ( fp ) ; <S2SV_EndBug> ","<S2SV_ModStart> , uid_t uid , gid_t gid <S2SV_ModStart> const int dest_fd = fileno ( fp ) ; if ( fchown ( dest_fd , uid , gid ) < 0 ) { perror_msg ( ""Can\'t<S2SV_blank>change<S2SV_blank>\'%s\'<S2SV_blank>ownership<S2SV_blank>to<S2SV_blank>%lu:%lu"" , dest_filename , ( long ) uid , ( long ) gid ) ; fclose ( fp ) ; unlink ( dest_filename ) ; return false ; } "
5022,<S2SV_StartBug> u1_nal_unit_type = NAL_UNIT_TYPE ( u1_first_byte ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ( ps_dec -> u2_total_mbs_coded != 0 ) && ( u1_nal_unit_type > IDR_SLICE_NAL ) ) { return ERROR_INCOMPLETE_FRAME ; } 
5023,"<S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
5024,"<S2SV_StartBug> PHP_VAR_UNSERIALIZE_INIT ( var_hash ) ; <S2SV_EndBug> <S2SV_StartBug> zval * * tmp ; <S2SV_EndBug> <S2SV_StartBug> efree ( name ) ; <S2SV_EndBug> <S2SV_StartBug> php_set_session_var ( name , namelen , current , & var_hash TSRMLS_CC ) ; <S2SV_EndBug> <S2SV_StartBug> PS_ADD_VARL ( name , namelen ) ; <S2SV_EndBug> ",<S2SV_ModStart> int skip = 0 ; <S2SV_ModStart> ; skip = 0 <S2SV_ModStart> skip = 1 <S2SV_ModEnd> <S2SV_ModStart> if ( ! skip ) { <S2SV_ModStart> } <S2SV_ModStart> if ( ! skip ) { <S2SV_ModStart> } 
5025,<S2SV_StartBug> if ( mode > 0 ) { <S2SV_EndBug> ,<S2SV_ModStart> != MODE_INVALID <S2SV_ModEnd> 
5026,"<S2SV_StartBug> if ( sk_filter ( sk , skb ) ) <S2SV_EndBug> ",<S2SV_ModStart> tcp_filter <S2SV_ModEnd> 
5027,"<S2SV_StartBug> uint32_t bcount ; <S2SV_EndBug> <S2SV_StartBug> int supported = TRUE , format ; <S2SV_EndBug> ","<S2SV_ModStart> int format_chunk = 0 ; <S2SV_ModStart> if ( format_chunk ++ ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.W64<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } "
5028,<S2SV_StartBug> static int get_max_filter_level ( VP9_COMP * cpi ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> const <S2SV_ModStart> ) { if ( cpi -> oxcf . pass == 2 <S2SV_ModStart> else { return MAX_LOOP_FILTER ; } } 
5029,<S2SV_StartBug> for ( ifa1 = in_dev -> ifa_list ; ifa1 ; ifa1 = ifa1 -> ifa_next ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( in_dev -> dead ) goto no_promotions ; <S2SV_ModStart> no_promotions : 
5030,<S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> sysctl_head_finish ( head ) ; <S2SV_EndBug> ,<S2SV_ModStart> goto out <S2SV_ModEnd> <S2SV_ModStart> out : 
5031,<S2SV_StartBug> char * tmp_str ; <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp_str [ i ] ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> int j = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp_str [ j ] ) <S2SV_EndBug> <S2SV_StartBug> if ( j ) { <S2SV_EndBug> <S2SV_StartBug> int j = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp_str [ j ] ) <S2SV_EndBug> <S2SV_StartBug> if ( j ) { <S2SV_EndBug> <S2SV_StartBug> while ( tmp_strsize ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp_str [ i ] ) <S2SV_EndBug> <S2SV_StartBug> if ( i ) { <S2SV_EndBug> <S2SV_StartBug> while ( tmp_strsize ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp_str [ i ] ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ; Bool zfound = GF_FALSE <S2SV_ModStart> { zfound = GF_TRUE ; break ; } <S2SV_ModEnd> <S2SV_ModStart> if ( ! zfound ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> ; zfound = GF_FALSE <S2SV_ModStart> { zfound = GF_TRUE ; break ; } <S2SV_ModEnd> <S2SV_ModStart> ! zfound ) return GF_ISOM_INVALID_FILE ; if ( <S2SV_ModStart> ; zfound = GF_FALSE <S2SV_ModStart> { zfound = GF_TRUE ; break ; } <S2SV_ModEnd> <S2SV_ModStart> ! zfound ) return GF_ISOM_INVALID_FILE ; if ( <S2SV_ModStart> zfound = GF_FALSE ; <S2SV_ModStart> { zfound = GF_TRUE ; break ; } <S2SV_ModEnd> <S2SV_ModStart> ! zfound ) return GF_ISOM_INVALID_FILE ; if ( <S2SV_ModStart> zfound = GF_FALSE ; <S2SV_ModStart> { zfound = GF_TRUE ; break ; } <S2SV_ModEnd> <S2SV_ModStart> if ( ! zfound ) return GF_ISOM_INVALID_FILE ; 
5032,<S2SV_StartBug> struct mb_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; <S2SV_EndBug> ,<S2SV_ModStart> mb2_cache <S2SV_ModEnd> 
5033,<S2SV_StartBug> for ( s = 0 ; s < ns ; s ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && row < imagelength 
5034,<S2SV_StartBug> if ( len < 0 || addr . nl_pid ) { <S2SV_EndBug> <S2SV_StartBug> incoming_msg = ( struct nlmsghdr * ) kvp_recv_buffer ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( addr . nl_pid ) { syslog ( LOG_WARNING , ""Received<S2SV_blank>packet<S2SV_blank>from<S2SV_blank>untrusted<S2SV_blank>pid:%u"" , addr . nl_pid ) ; continue ; } "
5035,"<S2SV_StartBug> int ntlm_read_message_header ( wStream * s , NTLM_MESSAGE_HEADER * header ) <S2SV_EndBug> ",<S2SV_ModStart> static 
5036,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> av_assert1 ( avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ; <S2SV_EndBug> ,<S2SV_ModStart> MpegEncContext * s = avctx -> priv_data ; <S2SV_ModStart> s -> studio_profile <S2SV_ModEnd> 
5037,"<S2SV_StartBug> struct in6_addr * saddr = NULL , * final_p , final ; <S2SV_EndBug> <S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> if ( np -> opt != NULL ) <S2SV_EndBug> <S2SV_StartBug> icsk -> icsk_ext_hdr_len = ( np -> opt -> opt_flen + <S2SV_EndBug> <S2SV_StartBug> np -> opt -> opt_nflen ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; struct ipv6_txoptions * opt <S2SV_ModStart> opt = rcu_dereference_protected ( np -> opt , sock_owned_by_user ( sk ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> opt <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5038,"<S2SV_StartBug> cpi -> ref_frame_flags = VP8_ALTR_FRAME | VP8_GOLD_FRAME | VP8_LAST_FRAME ; <S2SV_EndBug> <S2SV_StartBug> cpi -> temporal_pattern_counter = 0 ; <S2SV_EndBug> <S2SV_StartBug> cm -> Width = cpi -> oxcf . Width ; <S2SV_EndBug> <S2SV_StartBug> cm -> Height = cpi -> oxcf . Height ; <S2SV_EndBug> <S2SV_StartBug> vp8_denoiser_allocate ( & cpi -> denoiser , width , height ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> temporal_layer_id > 0 ) { cpi -> temporal_layer_id = 0 ; } <S2SV_ModStart> if ( ! cpi -> initial_width ) { cpi -> initial_width = cpi -> oxcf . Width ; cpi -> initial_height = cpi -> oxcf . Height ; } cm -> Width = cpi -> oxcf . Width <S2SV_ModEnd> <S2SV_ModStart> ; assert ( cm -> Width <= cpi -> initial_width ) ; assert ( cm -> Height <= cpi -> initial_height ) <S2SV_ModStart> , cm -> mb_rows , cm -> mb_cols , cpi -> oxcf . noise_sensitivity "
5039,<S2SV_StartBug> if ( tcp -> csty & J2K_CP_CSTY_SOP ) { <S2SV_EndBug> <S2SV_StartBug> if ( tcp -> csty & J2K_CP_CSTY_EPH ) { <S2SV_EndBug> ,"<S2SV_ModStart> if ( length < 6 ) { if ( p_t2_mode == FINAL_PASS ) { opj_event_msg ( p_manager , EVT_ERROR , ""opj_t2_encode_packet():<S2SV_blank>only<S2SV_blank>%u<S2SV_blank>bytes<S2SV_blank>remaining<S2SV_blank>in<S2SV_blank>"" ""output<S2SV_blank>buffer.<S2SV_blank>%u<S2SV_blank>needed.\\n"" , length , 6 ) ; } return OPJ_FALSE ; } <S2SV_ModStart> if ( length < 2 ) { if ( p_t2_mode == FINAL_PASS ) { opj_event_msg ( p_manager , EVT_ERROR , ""opj_t2_encode_packet():<S2SV_blank>only<S2SV_blank>%u<S2SV_blank>bytes<S2SV_blank>remaining<S2SV_blank>in<S2SV_blank>"" ""output<S2SV_blank>buffer.<S2SV_blank>%u<S2SV_blank>needed.\\n"" , length , 2 ) ; } return OPJ_FALSE ; } "
5040,<S2SV_StartBug> if ( sum_calculated != headersum ) { <S2SV_EndBug> ,<S2SV_ModStart> lha -> compsize < 0 ) goto invalid ; if ( 
5041,<S2SV_StartBug> ( * size ) ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! allocate_field ( stream , field -> pField , field -> data_size , ( size_t ) ( * size + 1 ) ) ) return false ; field -> pData = * ( char * * ) field -> pField + field -> data_size * ( * size ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
5042,<S2SV_StartBug> rfcomm_dlc_accept ( d ) ; <S2SV_EndBug> ,<S2SV_ModStart> ; msg -> msg_namelen = 0 
5043,"<S2SV_StartBug> static vpx_codec_err_t vp8e_update_reference ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
5044,"<S2SV_StartBug> memcpy ( & bss_cfg -> wmm_info , wmm_ie + <S2SV_EndBug> <S2SV_StartBug> sizeof ( struct ieee_types_header ) , * ( wmm_ie + 1 ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> > sizeof ( struct mwifiex_types_wmm_info ) ) return ; memcpy ( & bss_cfg -> wmm_info , wmm_ie + sizeof ( struct ieee_types_header ) , * ( wmm_ie + 1 ) "
5045,"<S2SV_StartBug> FILE * file = fopen ( dump_file , ""w"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> fopen_safe <S2SV_ModEnd> 
5046,<S2SV_StartBug> if ( d_mountpoint ( dentry ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ( exp -> ex_flags & NFSEXP_V4ROOT ) ) <S2SV_EndBug> <S2SV_StartBug> return d_inode ( dentry ) != NULL ; <S2SV_EndBug> ,<S2SV_ModStart> ! d_inode <S2SV_ModEnd> <S2SV_ModStart> ) return 0 ; if ( exp -> ex_flags & NFSEXP_V4ROOT <S2SV_ModStart> d_mountpoint ( dentry ) ) return 2 ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5047,<S2SV_StartBug> StringValue ( data ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! RTEST ( rb_attr_get ( self , id_key_set ) ) ) ossl_raise ( eCipherError , ""key<S2SV_blank>not<S2SV_blank>set"" ) ; "
5048,"<S2SV_StartBug> p = strchr ( context -> buffer , '<S2SV_blank>' ) ; <S2SV_EndBug> ",<S2SV_ModStart> osStrchr <S2SV_ModEnd> 
5049,"<S2SV_StartBug> int pkt_len , pktnum , hr , min , sec , csec ; <S2SV_EndBug> <S2SV_StartBug> num_items_scanned = sscanf ( line + 64 , ""LEN=%9d"" , & pkt_len ) ; <S2SV_EndBug> <S2SV_StartBug> phdr -> rec_type = REC_TYPE_PACKET ; <S2SV_EndBug> <S2SV_StartBug> ws_buffer_assure_space ( buf , TOSHIBA_MAX_PACKET_LEN ) ; <S2SV_EndBug> ","<S2SV_ModStart> guint pkt_len ; int <S2SV_ModEnd> <S2SV_ModStart> ""LEN=%9u"" <S2SV_ModEnd> <S2SV_ModStart> if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup_printf ( ""toshiba:<S2SV_blank>File<S2SV_blank>has<S2SV_blank>%u-byte<S2SV_blank>packet,<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>maximum<S2SV_blank>of<S2SV_blank>%u"" , pkt_len , WTAP_MAX_PACKET_SIZE ) ; return FALSE ; } <S2SV_ModStart> pkt_len <S2SV_ModEnd> "
5050,<S2SV_StartBug> long timeo ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5051,"<S2SV_StartBug> int nNew = MAX ( 128 , p -> nAlloc * 2 ) ; <S2SV_EndBug> ",<S2SV_ModStart> sqlite3_int64 <S2SV_ModEnd> <S2SV_ModStart> 2 * ( sqlite3_int64 ) <S2SV_ModStart>  <S2SV_ModEnd> 
5052,"<S2SV_StartBug> void vp9_iht16x16_add ( TX_TYPE tx_type , const int16_t * input , uint8_t * dest , <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> 
5053,"<S2SV_StartBug> xfs_daddr_t blkno = map [ 0 ] . bm_bn ; <S2SV_EndBug> <S2SV_StartBug> pag = xfs_perag_get ( btp -> bt_mount , <S2SV_EndBug> ","<S2SV_ModStart> ; xfs_daddr_t eofs <S2SV_ModStart> eofs = XFS_FSB_TO_BB ( btp -> bt_mount , btp -> bt_mount -> m_sb . sb_dblocks ) ; if ( blkno >= eofs ) { xfs_alert ( btp -> bt_mount , ""%s:<S2SV_blank>Block<S2SV_blank>out<S2SV_blank>of<S2SV_blank>range:<S2SV_blank>block<S2SV_blank>0x%llx,<S2SV_blank>EOFS<S2SV_blank>0x%llx<S2SV_blank>"" , __func__ , blkno , eofs ) ; return NULL ; } "
5054,<S2SV_StartBug> fptr_copy = ( struct mrb_io * ) DATA_PTR ( copy ) ; <S2SV_EndBug> <S2SV_StartBug> fptr_copy = ( struct mrb_io * ) mrb_io_alloc ( mrb ) ; <S2SV_EndBug> ,"<S2SV_ModStart> fptr_orig = io_get_open_fptr ( mrb , orig ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
5055,"<S2SV_StartBug> ret = poll ( pfds , 1 , 50 ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
5056,<S2SV_StartBug> struct flowi6 * fl6 = & inet -> cork . fl . u . ip6 ; <S2SV_EndBug> <S2SV_StartBug> int err = 0 ; <S2SV_EndBug> ,<S2SV_ModStart> fl6 ; int err = 0 ; int is_udplite = IS_UDPLITE ( sk ) ; __wsum csum = 0 ; if ( up -> pending == AF_INET ) return udp_push_pending_frames ( sk ) ; <S2SV_ModStart>  <S2SV_ModEnd> 
5057,"<S2SV_StartBug> while ( c && cJSON_strcasecmp ( c -> string , string ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> i ++ , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5058,<S2SV_StartBug> # if ENABLE_BGP_VNC <S2SV_EndBug> ,<S2SV_ModStart> ENABLE_BGP_VNC_ATTR <S2SV_ModEnd> 
5059,<S2SV_StartBug> upperdentry = ovl_dentry_upper ( dentry ) ; <S2SV_EndBug> <S2SV_StartBug> if ( upperdentry ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> ,<S2SV_ModStart> err = ovl_copy_up ( dentry ) ; if ( ! err ) { <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5060,<S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! tls_desc_okay ( & info ) ) return - EINVAL 
5061,<S2SV_StartBug> if ( rc == - 1 ) <S2SV_EndBug> ,<S2SV_ModStart> mutt_socket_empty ( adata -> conn ) ; 
5062,<S2SV_StartBug> char data [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> * data ; data = kmalloc ( 8 , GFP_KERNEL ) ; if ( ! data ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> ret = - EIO ; goto out <S2SV_ModEnd> <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> goto out ; } ret = snprintf ( buf , PAGE_SIZE , ""%d\\n"" , current_profile ) ; out : kfree ( data ) ; return ret <S2SV_ModEnd> "
5063,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> fdc = FDC ( drive ) ; <S2SV_EndBug> <S2SV_StartBug> if ( fdc != 1 && fdc != 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> unsigned int new_fdc = fdc ; <S2SV_ModStart> new_fdc <S2SV_ModEnd> <S2SV_ModStart> new_fdc >= N_FDC <S2SV_ModEnd> <S2SV_ModStart> fdc = new_fdc ; 
5064,<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> kfree ( pool ) ; 
5065,<S2SV_StartBug> # if ! ( CONFIG_FAST_UNALIGNED ) <S2SV_EndBug> ,"<S2SV_ModStart> memcpy ( dst , src , 16 ) ; <S2SV_ModEnd> "
5066,"<S2SV_StartBug> spin_lock ( & desc -> iuspin ) ; <S2SV_EndBug> <S2SV_StartBug> desc -> reslength = urb -> actual_length ; <S2SV_EndBug> <S2SV_StartBug> memmove ( desc -> ubuf + desc -> length , desc -> inbuf , desc -> reslength ) ; <S2SV_EndBug> ","<S2SV_ModStart> int length = urb -> actual_length ; <S2SV_ModStart> if ( length + desc -> length > desc -> wMaxCommand ) { set_bit ( WDM_OVERFLOW , & desc -> flags ) ; } else { if ( ! test_bit ( WDM_OVERFLOW , & desc -> flags ) ) { <S2SV_ModEnd> <S2SV_ModStart> length ) ; desc -> length += length ; <S2SV_ModStart> = length ; } } <S2SV_ModEnd> "
5067,"<S2SV_StartBug> timr -> it_overrun += ( int ) kc -> timer_forward ( timr , now ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
5068,"<S2SV_StartBug> av_log ( avctx , AV_LOG_DEBUG , <S2SV_EndBug> ","<S2SV_ModStart> if ( s -> diff_start + s -> diff_height > cur_blk_height ) { av_log ( avctx , AV_LOG_ERROR , ""Block<S2SV_blank>parameters<S2SV_blank>invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } "
5069,<S2SV_StartBug> struct sshcomp * comp ; <S2SV_EndBug> <S2SV_StartBug> for ( mode = 0 ; mode < MODE_MAX ; mode ++ ) { <S2SV_EndBug> <S2SV_StartBug> ( r = ssh_packet_init_compression ( ssh ) ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> int r <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> ssh_packet_enable_delayed_compress <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5070,"<S2SV_StartBug> logger ( Protocol , Debug , ""rdpdr_process()"" ) ; <S2SV_EndBug> <S2SV_StartBug> in_uint32_le ( s , g_client_id ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct stream packet = * s ; <S2SV_ModStart> if ( ! s_check ( s ) ) { rdp_protocol_error ( ""rdpdr_process(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>g_client_id<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>did<S2SV_blank>overrun"" , & packet ) ; } "
5071,"<S2SV_StartBug> static void filter_selectively_vert_row2 ( PLANE_TYPE plane_type , <S2SV_EndBug> <S2SV_StartBug> const int mask_shift = plane_type ? 4 : 8 ; <S2SV_EndBug> <S2SV_StartBug> const int mask_cutoff = plane_type ? 0xf : 0xff ; <S2SV_EndBug> <S2SV_StartBug> const int lfl_forward = plane_type ? 4 : 8 ; <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_16_dual ( s , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_16 ( s , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_16 ( s + 8 * pitch , pitch , lfi1 -> mblim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_8_dual ( s , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_8 ( s , pitch , lfi0 -> mblim , lfi0 -> lim , lfi0 -> hev_thr , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_8 ( s + 8 * pitch , pitch , lfi1 -> mblim , lfi1 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4_dual ( s , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4 ( s , pitch , lfi0 -> mblim , lfi0 -> lim , lfi0 -> hev_thr , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4 ( s + 8 * pitch , pitch , lfi1 -> mblim , lfi1 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4_dual ( s + 4 , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4 ( s + 4 , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4 ( s + 8 * pitch + 4 , pitch , lfi1 -> mblim , lfi1 -> lim , <S2SV_EndBug> ",<S2SV_ModStart> int subsampling_factor <S2SV_ModEnd> <S2SV_ModStart> subsampling_factor <S2SV_ModEnd> <S2SV_ModStart> subsampling_factor <S2SV_ModEnd> <S2SV_ModStart> subsampling_factor <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_16_dual <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_16 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_16 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_8_dual <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_8 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_8 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_4_dual <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_4 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_4 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_4_dual <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_4 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_vertical_4 <S2SV_ModEnd> 
5072,"<S2SV_StartBug> struct mii_data * miidata = ( struct mii_data * ) & rq -> ifr_ifru ; <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE : <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE + 1 : <S2SV_EndBug> <S2SV_StartBug> miidata -> out_value = mii_read ( dev , phy_addr , miidata -> reg_num ) ; <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE + 2 : <S2SV_EndBug> <S2SV_StartBug> mii_write ( dev , phy_addr , miidata -> reg_num , miidata -> in_value ) ; <S2SV_EndBug> ",<S2SV_ModStart> mii_ioctl_data <S2SV_ModEnd> <S2SV_ModStart> if_mii ( rq ) <S2SV_ModEnd> <S2SV_ModStart> SIOCGMIIPHY : miidata -> phy_id = phy_addr ; <S2SV_ModEnd> <S2SV_ModStart> SIOCGMIIREG <S2SV_ModEnd> <S2SV_ModStart> val_out <S2SV_ModEnd> <S2SV_ModStart> SIOCSMIIREG : if ( ! capable ( CAP_NET_ADMIN ) ) return - EPERM ; <S2SV_ModEnd> <S2SV_ModStart> val_in <S2SV_ModEnd> 
5073,"<S2SV_StartBug> if ( fread ( buf , 1 , 4 , reader -> fhd ) != 4 || strncmp ( buf , ""FHDB"" , 4 ) ) { <S2SV_EndBug> <S2SV_StartBug> log ( ""%08"" PRIX64 ""<S2SV_blank>%.4s\\n"" , ( uint64_t ) ftell ( reader -> fhd ) - 4 , buf ) ; <S2SV_EndBug> <S2SV_StartBug> return MYSOFA_OK ; <S2SV_EndBug> ","<S2SV_ModStart> reader -> recursive_counter >= 10 ) return MYSOFA_INVALID_FORMAT ; else reader -> recursive_counter ++ ; if ( <S2SV_ModStart> ""<S2SV_blank>%.4s<S2SV_blank>stack<S2SV_blank>%d\\n"" <S2SV_ModEnd> <S2SV_ModStart> , reader -> recursive_counter <S2SV_ModStart> reader -> recursive_counter -- ; "
5074,<S2SV_StartBug> rhost_old [ 0 ] = '\\0' ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( desc == NULL ) desc = """" ; "
5075,"<S2SV_StartBug> _PyMemoTable_ResizeTable ( PyMemoTable * self , Py_ssize_t min_size ) <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t new_size = MT_MINSIZE ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t to_process ; <S2SV_EndBug> <S2SV_StartBug> while ( new_size < min_size && new_size > 0 ) <S2SV_EndBug> ",<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> if ( min_size > PY_SSIZE_T_MAX ) { PyErr_NoMemory ( ) ; return - 1 ; } <S2SV_ModStart> ) { new_size <<= <S2SV_ModEnd> 
5076,"<S2SV_StartBug> struct stat st ; <S2SV_EndBug> <S2SV_StartBug> pr_fs_clear_cache ( ) ; <S2SV_EndBug> <S2SV_StartBug> xerrno = errno ; <S2SV_EndBug> <S2SV_StartBug> pr_log_pri ( PR_LOG_WARNING , ""error:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>check<S2SV_blank>%s:<S2SV_blank>%s"" , path , <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> res = is_symlink_path ( p , path , pathlen <S2SV_ModEnd> <S2SV_ModStart> if ( errno == EPERM ) { <S2SV_ModEnd> <S2SV_ModStart> ""error:<S2SV_blank>DefaultRoot<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>a<S2SV_blank>symlink<S2SV_blank>"" ""(denied<S2SV_blank>by<S2SV_blank>AllowChrootSymlinks<S2SV_blank>config)"" , path ) ; } <S2SV_ModEnd> "
5077,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> dec_tables . counter_head ++ ; dec_tables . counter_tail ++ ; 
5078,"<S2SV_StartBug> gdImageWBMPCtx ( im , fg , out ) ; <S2SV_EndBug> <S2SV_StartBug> rv = gdDPExtractData ( out , size ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! _gdImageWBMPCtx <S2SV_ModEnd> <S2SV_ModStart> ) { <S2SV_ModEnd> <S2SV_ModStart> } else { rv = NULL ; } 
5079,<S2SV_StartBug> parameters -> res_spec = parameters -> numresolution - 1 ; <S2SV_EndBug> <S2SV_StartBug> parameters -> prch_init [ i ] = 256 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( parameters -> numresolution == 1 ) { parameters -> res_spec = 1 ; parameters -> prcw_init [ 0 ] = 128 ; parameters -> prch_init [ 0 ] = 128 ; } else { <S2SV_ModStart> } 
5080,"<S2SV_StartBug> int copied , error = - EINVAL ; <S2SV_EndBug> ",<S2SV_ModStart> ; msg -> msg_namelen = 0 
5081,"<S2SV_StartBug> status = usb_ep_queue ( hidg -> in_ep , req , GFP_ATOMIC ) ; <S2SV_EndBug> <S2SV_StartBug> goto release_write_pending_unlocked ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & hidg -> write_spinlock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> release_write_pending_unlocked : <S2SV_EndBug> ","<S2SV_ModStart> spin_unlock_irqrestore ( & hidg -> write_spinlock , flags ) ; <S2SV_ModStart> release_write_pending <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5082,"<S2SV_StartBug> struct usmStateReference * old_ref = ( struct usmStateReference * ) old ; <S2SV_EndBug> <S2SV_StartBug> if ( old_ref ) { <S2SV_EndBug> <S2SV_StartBug> if ( old_ref -> usr_engine_id_length ) <S2SV_EndBug> <S2SV_StartBug> if ( old_ref -> usr_auth_protocol_length ) <S2SV_EndBug> <S2SV_StartBug> if ( old_ref -> usr_priv_protocol_length ) <S2SV_EndBug> <S2SV_StartBug> if ( old_ref -> usr_auth_key_length && old_ref -> usr_auth_key ) { <S2SV_EndBug> <S2SV_StartBug> SNMP_ZERO ( old_ref -> usr_auth_key , old_ref -> usr_auth_key_length ) ; <S2SV_EndBug> <S2SV_StartBug> SNMP_FREE ( old_ref -> usr_auth_key ) ; <S2SV_EndBug> <S2SV_StartBug> if ( old_ref -> usr_priv_key_length && old_ref -> usr_priv_key ) { <S2SV_EndBug> <S2SV_StartBug> SNMP_ZERO ( old_ref -> usr_priv_key , old_ref -> usr_priv_key_length ) ; <S2SV_EndBug> <S2SV_StartBug> SNMP_FREE ( old_ref -> usr_priv_key ) ; <S2SV_EndBug> <S2SV_StartBug> SNMP_ZERO ( old_ref , sizeof ( * old_ref ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> ref = <S2SV_ModEnd> <S2SV_ModStart> ! ref ) return ; if ( -- ref -> refcnt > 0 ) return ; SNMP_FREE ( ref <S2SV_ModEnd> <S2SV_ModStart> SNMP_FREE ( ref <S2SV_ModEnd> <S2SV_ModStart> SNMP_FREE ( ref <S2SV_ModEnd> <S2SV_ModStart> SNMP_FREE ( ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> ref <S2SV_ModEnd> <S2SV_ModStart> SNMP_FREE ( ref <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5083,<S2SV_StartBug> if ( status ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( data [ 0 ] == WHITEHEAT_GET_DTR_RTS ) { <S2SV_EndBug> <S2SV_StartBug> urb -> actual_length - 1 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ! urb -> actual_length ) { dev_dbg ( & urb -> dev -> dev , ""%s<S2SV_blank>-<S2SV_blank>empty<S2SV_blank>response,<S2SV_blank>exiting.\\n"" , __func__ ) ; return ; } if ( <S2SV_ModStart> ( <S2SV_ModStart> && ( <S2SV_ModEnd> <S2SV_ModStart> <= sizeof ( command_info -> result_buffer ) ) ) { memcpy ( command_info -> result_buffer , & data [ 1 ] , urb -> actual_length - 1 "
5084,"<S2SV_StartBug> void ptrace_triggered ( struct perf_event * bp , int nmi , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
5085,<S2SV_StartBug> if ( _payload ) { <S2SV_EndBug> ,<S2SV_ModStart> plen <S2SV_ModEnd> 
5086,"<S2SV_StartBug> static void save_context ( VP9_COMP * cpi , int mi_row , int mi_col , <S2SV_EndBug> <S2SV_StartBug> const MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( sa , xd -> above_seg_context + mi_col , <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( sl , xd -> left_seg_context + ( mi_row & MI_MASK ) , <S2SV_EndBug> ",<S2SV_ModStart> MACROBLOCK * const x <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
5087,"<S2SV_StartBug> int blockstodecode ; <S2SV_EndBug> <S2SV_StartBug> if ( ! nblocks || nblocks > INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> av_fast_malloc ( & s -> decoded_buffer , & s -> decoded_size , <S2SV_EndBug> <S2SV_StartBug> 2 * FFALIGN ( blockstodecode , 8 ) * sizeof ( * s -> decoded_buffer ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; uint64_t decoded_buffer_size <S2SV_ModStart> / 2 / sizeof ( * s -> decoded_buffer ) - 8 <S2SV_ModStart> decoded_buffer_size = 2LL * FFALIGN ( blockstodecode , 8 ) * sizeof ( * s -> decoded_buffer ) ; av_assert0 ( decoded_buffer_size <= INT_MAX ) ; <S2SV_ModStart> decoded_buffer_size <S2SV_ModEnd> "
5088,"<S2SV_StartBug> int chroma_planes , chroma_h_shift , chroma_v_shift , transparency ; <S2SV_EndBug> <S2SV_StartBug> f -> colorspace = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( f -> version > 0 ) <S2SV_EndBug> <S2SV_StartBug> f -> avctx -> bits_per_raw_sample = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> chroma_planes = get_rac ( c , state ) ; <S2SV_EndBug> <S2SV_StartBug> chroma_h_shift = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chroma_planes != f -> chroma_planes <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> , colorspace , bits_per_raw_sample <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> bits_per_raw_sample = <S2SV_ModEnd> <S2SV_ModStart> ? get_symbol ( c , state , 0 ) : <S2SV_ModEnd> <S2SV_ModStart> ; chroma_planes = get_rac ( c , state ) ; chroma_h_shift <S2SV_ModStart> chroma_v_shift = get_symbol ( c , state , 0 ) ; transparency <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> colorspace != f -> colorspace || bits_per_raw_sample != f -> avctx -> bits_per_raw_sample || <S2SV_ModStart> f -> colorspace = colorspace ; f -> avctx -> bits_per_raw_sample = bits_per_raw_sample ; "
5089,<S2SV_StartBug> frame_end : <S2SV_EndBug> ,<S2SV_ModStart> if ( ! s -> studio_profile ) 
5090,<S2SV_StartBug> sas_port_delete ( port -> port ) ; <S2SV_EndBug> ,<S2SV_ModStart> sas_destruct_devices ( port ) ; 
5091,<S2SV_StartBug> ( ( YR_OBJECT_INTEGER * ) copy ) -> value = UNDEFINED ; <S2SV_EndBug> <S2SV_StartBug> ( ( YR_OBJECT_STRING * ) copy ) -> value = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> ( ( YR_OBJECT_INTEGER * ) object ) -> value <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModStart> object ) -> value != NULL ) { ( ( YR_OBJECT_STRING * ) copy ) -> value = sized_string_dup ( ( ( YR_OBJECT_STRING * ) object ) -> value ) ; } else { ( ( YR_OBJECT_STRING * ) copy ) -> value = NULL ; } break ; case OBJECT_TYPE_FLOAT : ( ( YR_OBJECT_DOUBLE * ) copy ) -> value = ( ( YR_OBJECT_DOUBLE * ) object ) -> value <S2SV_ModEnd> 
5092,<S2SV_StartBug> if ( ! vct_iscrlf ( * r ) ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5093,<S2SV_StartBug> unsigned int random_variable = 0 ; <S2SV_EndBug> <S2SV_StartBug> random_variable = get_random_int ( ) & STACK_RND_MASK ; <S2SV_EndBug> ,<S2SV_ModStart> long <S2SV_ModEnd> <S2SV_ModStart> ( unsigned long ) <S2SV_ModStart> ; random_variable &= <S2SV_ModEnd> 
5094,"<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_lock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5095,"<S2SV_StartBug> spin_lock ( & inode -> i_lock ) ; <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( inode -> i_mapping , ( chg - freed ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> struct hugepage_subpool * spool = subpool_inode ( inode ) ; <S2SV_ModStart> hugepage_subpool_put_pages ( spool <S2SV_ModEnd> 
5096,<S2SV_StartBug> if ( keyring_key -> type != & key_type_logon ) { <S2SV_EndBug> <S2SV_StartBug> down_read ( & keyring_key -> sem ) ; <S2SV_EndBug> <S2SV_StartBug> ukp = user_key_payload ( keyring_key ) ; <S2SV_EndBug> ,"<S2SV_ModStart> down_read ( & keyring_key -> sem ) ; <S2SV_ModStart> ukp = user_key_payload ( keyring_key ) ; if ( ukp -> datalen != sizeof ( struct fscrypt_key ) ) { res = - EINVAL ; goto out ; } master_key = ( struct fscrypt_key * ) ukp -> data ; BUILD_BUG_ON ( FS_AES_128_ECB_KEY_SIZE != FS_KEY_DERIVATION_NONCE_SIZE ) ; if ( master_key -> size != FS_AES_256_XTS_KEY_SIZE ) { printk_once ( KERN_WARNING ""%s:<S2SV_blank>key<S2SV_blank>size<S2SV_blank>incorrect:<S2SV_blank>%d\\n"" , __func__ , master_key -> size ) ; res = - ENOKEY ; goto out ; } res = derive_key_aes ( ctx -> nonce , master_key -> raw , raw_key ) ; out : up_read <S2SV_ModEnd> <S2SV_ModStart> key_put ( keyring_key ) ; return <S2SV_ModEnd> "
5097,"<S2SV_StartBug> memcpy ( res , dbg_data , nb10sz ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
5098,"<S2SV_StartBug> int need_error_free = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( inbuf . data , sendauth_version ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( appl_version && strcmp ( inbuf . data , appl_version ) ) { <S2SV_EndBug> ","<S2SV_ModStart> krb5_data d ; <S2SV_ModStart> d = make_data ( ( char * ) sendauth_version , strlen ( sendauth_version ) + 1 ) ; if ( ! data_eq ( inbuf , d <S2SV_ModEnd> <S2SV_ModStart> != NULL && ! problem ) { d = make_data ( appl_version , strlen ( appl_version ) + 1 ) ; if ( ! data_eq ( inbuf , d ) <S2SV_ModEnd> "
5099,<S2SV_StartBug> list = lptr = ( nodeitem * ) palloc ( sizeof ( nodeitem ) * ( num + 1 ) ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( num + 1 > MaxAllocSize / sizeof ( nodeitem ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( ""number<S2SV_blank>of<S2SV_blank>levels<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)"" , num + 1 , ( int ) ( MaxAllocSize / sizeof ( nodeitem ) ) ) ) ) ; "
5100,<S2SV_StartBug> hwc -> event_base = MSR_ARCH_PERFMON_FIXED_CTR0 ; <S2SV_EndBug> ,<S2SV_ModStart> + ( hwc -> idx - X86_PMC_IDX_FIXED ) 
5101,<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( qid > NVMET_NR_QUEUES ) return NULL 
5102,"<S2SV_StartBug> if ( msg -> maxsize - msg -> cursize < 4 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bits == 8 ) { <S2SV_EndBug> <S2SV_StartBug> nbits = bits & 7 ; <S2SV_EndBug> <S2SV_StartBug> Huff_offsetTransmit ( & msgHuff . compressor , ( value & 0xff ) , msg -> data , & msg -> bit ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> overflowed ) { <S2SV_ModEnd> <S2SV_ModStart> msg -> cursize + ( bits >> 3 ) > msg -> maxsize ) { msg -> overflowed = qtrue ; return ; } if ( <S2SV_ModStart> if ( msg -> bit + nbits > msg -> maxsize << 3 ) { msg -> overflowed = qtrue ; return ; } <S2SV_ModStart> , msg -> maxsize << 3 <S2SV_ModStart> if ( msg -> bit > msg -> maxsize << 3 ) { msg -> overflowed = qtrue ; return ; } "
5103,<S2SV_StartBug> && ( NULL != ptr -> line ) <S2SV_EndBug> <S2SV_StartBug> && ( ( '+' != ptr -> line [ 0 ] ) <S2SV_EndBug> <S2SV_StartBug> && ( '-' != ptr -> line [ 0 ] ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( NULL != ptr ) && ( NULL != ptr -> line ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( NULL == <S2SV_ModEnd> <S2SV_ModStart> || ( ( '+' != ptr -> line [ 0 ] ) && ( '-' <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> NULL != ptr <S2SV_ModEnd> 
5104,"<S2SV_StartBug> vpx_memcpy ( temp_area , temp_area + source_band_height * dest_pitch , dest_width ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( temp_area + i * dest_pitch , temp_area + ( i - 1 ) * dest_pitch , dest_pitch ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( temp_area , temp_area + source_band_height * dest_pitch , dest_pitch ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
5105,<S2SV_StartBug> if ( ack -> subh . addip_hdr -> serial == serial ) { <S2SV_EndBug> ,<S2SV_ModStart> sctp_chunk_pending ( ack ) ) continue ; if ( 
5106,<S2SV_StartBug> if ( IS_ERR ( blkg ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5107,"<S2SV_StartBug> mptctl_do_fw_download ( int ioc , char __user * ufwbuf , size_t fwlen ) <S2SV_EndBug> <S2SV_StartBug> MPT_FRAME_HDR * mf ; <S2SV_EndBug> <S2SV_StartBug> if ( mpt_verify_adapter ( ioc , & iocp ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> iocp -> name , ( int ) fwlen ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> MPT_ADAPTER * iocp <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5108,<S2SV_StartBug> skb -> sk = sk ; <S2SV_EndBug> ,<S2SV_ModStart> skb_orphan ( skb ) ; sock_hold ( sk ) ; <S2SV_ModStart> ; skb -> destructor = sock_efree 
5109,"<S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_CORRUPT_FRAME ; <S2SV_EndBug> <S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> <S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . number_of_layers > 1 ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < cpi -> oxcf . number_of_layers ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> layer = cpi -> oxcf . layer_id [ <S2SV_EndBug> <S2SV_StartBug> cpi -> temporal_pattern_counter % cpi -> oxcf . periodicity ] ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cm -> fc , & cm -> lfc , sizeof ( cm -> fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cpi -> lfc_a , & cm -> fc , sizeof ( cm -> fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cpi -> lfc_g , & cm -> fc , sizeof ( cm -> fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cpi -> lfc_n , & cm -> fc , sizeof ( cm -> fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> int y_samples = orig -> y_height * orig -> y_width ; <S2SV_EndBug> <S2SV_StartBug> int uv_samples = orig -> uv_height * orig -> uv_width ; <S2SV_EndBug> <S2SV_StartBug> double sq_error , sq_error2 ; <S2SV_EndBug> <S2SV_StartBug> recon -> y_buffer , recon -> y_stride , orig -> y_width , orig -> y_height ) ; <S2SV_EndBug> <S2SV_StartBug> ue = calc_plane_error ( orig -> u_buffer , orig -> uv_stride , <S2SV_EndBug> <S2SV_StartBug> recon -> u_buffer , recon -> uv_stride , orig -> uv_width , orig -> uv_height ) ; <S2SV_EndBug> <S2SV_StartBug> double frame_psnr2 , frame_ssim2 = 0 ; <S2SV_EndBug> <S2SV_StartBug> pp -> y_buffer , pp -> y_stride , orig -> y_width , orig -> y_height ) ; <S2SV_EndBug> <S2SV_StartBug> ue = calc_plane_error ( orig -> u_buffer , orig -> uv_stride , <S2SV_EndBug> <S2SV_StartBug> pp -> u_buffer , pp -> uv_stride , orig -> uv_width , orig -> uv_height ) ; <S2SV_EndBug> <S2SV_StartBug> frame_ssim2 = vp8_calc_ssim ( cpi -> Source , <S2SV_EndBug> <S2SV_StartBug> & cm -> post_proc_buffer , 1 , & weight ) ; <S2SV_EndBug> <S2SV_StartBug> frame_all = vp8_calc_ssimg ( cpi -> Source , cm -> frame_to_show , <S2SV_EndBug> <S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vp8_clear_system_state ( ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_MULTI_RES_ENCODING if ( cpi -> oxcf . mr_total_resolutions > 1 ) { LOWER_RES_FRAME_INFO * low_res_frame_info = ( LOWER_RES_FRAME_INFO * ) cpi -> oxcf . mr_low_res_mode_info ; if ( cpi -> oxcf . mr_encoder_id ) { cpi -> ref_framerate = low_res_frame_info -> low_res_framerate ; } else { low_res_frame_info -> low_res_framerate = cpi -> ref_framerate ; } } # endif <S2SV_ModStart> && i < VPX_TS_MAX_LAYERS ; ++ i <S2SV_ModEnd> <S2SV_ModStart> if ( cpi -> temporal_layer_id >= 0 ) { layer = cpi -> temporal_layer_id ; } else { <S2SV_ModStart> } <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> unsigned int y_width = cpi -> common . Width ; unsigned int y_height = cpi -> common . Height ; unsigned int uv_width = ( y_width + 1 ) / 2 ; unsigned int uv_height = ( y_height + 1 ) / 2 ; <S2SV_ModStart> y_height * <S2SV_ModEnd> <S2SV_ModStart> uv_height * <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> y_width , y_height ) ; ue = calc_plane_error ( orig -> u_buffer <S2SV_ModEnd> <S2SV_ModStart> uv_stride , recon -> u_buffer , recon -> uv_stride , uv_width , uv_height ) ; ve <S2SV_ModEnd> <S2SV_ModStart> v_buffer <S2SV_ModEnd> <S2SV_ModStart> v_buffer <S2SV_ModEnd> <S2SV_ModStart> uv_width , <S2SV_ModEnd> <S2SV_ModStart> sq_error2 ; double <S2SV_ModStart> y_width , y_height ) ; ue = calc_plane_error ( orig -> u_buffer <S2SV_ModEnd> <S2SV_ModStart> uv_stride , pp -> u_buffer , pp -> uv_stride , uv_width , uv_height ) ; ve <S2SV_ModEnd> <S2SV_ModStart> v_buffer <S2SV_ModEnd> <S2SV_ModStart> v_buffer <S2SV_ModEnd> <S2SV_ModStart> uv_width , <S2SV_ModEnd> <S2SV_ModStart> vpx_calc_ssim <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vpx_calc_ssimg <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5110,"<S2SV_StartBug> ""InvalidGeometry"" , ""`%s\'"" , option ) ; <S2SV_EndBug> ",<S2SV_ModStart> ) ; page_geometry = DestroyString ( page_geometry 
5111,"<S2SV_StartBug> if ( ! memcmp ( data -> schemadata + data -> schemata [ cid ] , schema , len * sizeof ( Id ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! memcmp ( data -> schemadata + data -> schemata [ cid ] , schema , len * sizeof ( Id ) ) ) <S2SV_EndBug> ",<S2SV_ModStart> ( data -> schemata [ cid ] + len <= data -> schemadatalen ) && <S2SV_ModStart> ( data -> schemata [ cid ] + len <= data -> schemadatalen ) && 
5112,<S2SV_StartBug> exit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exit ( - 1 ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5113,"<S2SV_StartBug> struct efx_nic * efx = netdev_priv ( net_dev ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ring -> rx_pending < EFX_MIN_RING_SIZE || <S2SV_EndBug> <S2SV_StartBug> ""TX<S2SV_blank>and<S2SV_blank>RX<S2SV_blank>queues<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>smaller<S2SV_blank>than<S2SV_blank>%ld\\n"" , <S2SV_EndBug> <S2SV_StartBug> return efx_realloc_channels ( efx , ring -> rx_pending , ring -> tx_pending ) ; <S2SV_EndBug> ","<S2SV_ModStart> ; u32 txq_entries <S2SV_ModStart> EFX_RXQ_MIN_ENT <S2SV_ModEnd> <S2SV_ModStart> ""RX<S2SV_blank>queues<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>smaller<S2SV_blank>than<S2SV_blank>%u\\n"" , EFX_RXQ_MIN_ENT <S2SV_ModEnd> <S2SV_ModStart> txq_entries = max ( ring -> tx_pending , EFX_TXQ_MIN_ENT ( efx ) ) ; if ( txq_entries != ring -> tx_pending ) netif_warn ( efx , drv , efx -> net_dev , ""increasing<S2SV_blank>TX<S2SV_blank>queue<S2SV_blank>size<S2SV_blank>to<S2SV_blank>minimum<S2SV_blank>of<S2SV_blank>%u\\n"" , txq_entries ) ; <S2SV_ModStart> txq_entries <S2SV_ModEnd> "
5114,"<S2SV_StartBug> bitmap_zero ( ioapic -> rtc_status . dest_map . map , KVM_MAX_VCPUS ) ; <S2SV_EndBug> ",<S2SV_ModStart> KVM_MAX_VCPU_ID <S2SV_ModEnd> 
5115,<S2SV_StartBug> if ( shdr -> sh_size < 1 ) { <S2SV_EndBug> ,<S2SV_ModStart> || shdr -> sh_size > SIZE_MAX 
5116,<S2SV_StartBug> if ( header_len > LEVEL_3_MAX_HEADER_LEN ) { <S2SV_EndBug> ,<S2SV_ModStart> || header_len < RAW_DATA_LEN ( header ) 
5117,<S2SV_StartBug> image -> columns = image -> rows = 0 ; <S2SV_EndBug> <S2SV_StartBug> BImgBuff = ( unsigned char * ) RelinquishMagickMemory ( BImgBuff ) ; ; <S2SV_EndBug> ,<S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5118,"<S2SV_StartBug> opt = xchg ( & inet6_sk ( sk ) -> opt , opt ) ; <S2SV_EndBug> ",<S2SV_ModStart> ( __force struct ipv6_txoptions * * ) 
5119,<S2SV_StartBug> s -> cur_pic . field_picture || <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5120,<S2SV_StartBug> char build [ ATUSB_BUILD_SIZE + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ,"<S2SV_ModStart> * build <S2SV_ModEnd> <S2SV_ModStart> ; build = kmalloc ( ATUSB_BUILD_SIZE + 1 , GFP_KERNEL ) ; if ( ! build ) return - ENOMEM <S2SV_ModStart> kfree ( build ) ; "
5121,<S2SV_StartBug> if ( ( flags & FOLL_WRITE ) && ! pte_write ( pte ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> can_follow_write_pte ( pte , flags <S2SV_ModEnd> "
5122,<S2SV_StartBug> xmalloc ( size_t size ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> void * ptr = malloc ( size ) ; <S2SV_EndBug> ,"<S2SV_ModStart> num , size_t <S2SV_ModStart> size_t res ; if ( check_mul_overflow ( num , size , & res ) ) abort ( ) ; <S2SV_ModStart> res <S2SV_ModEnd> "
5123,"<S2SV_StartBug> long mtemp , save_adjust , rem ; <S2SV_EndBug> <S2SV_StartBug> time_offset = div_long_long_rem_signed ( time_offset , <S2SV_EndBug> <S2SV_StartBug> NTP_INTERVAL_FREQ , <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> div_s64 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5124,"<S2SV_StartBug> # ifdef CONFIG_SMP <S2SV_EndBug> <S2SV_StartBug> for_each_possible_cpu ( i ) <S2SV_EndBug> <S2SV_StartBug> lockdep_init_map ( & s -> s_writers . lock_map [ i ] , sb_writers_name [ i ] , <S2SV_EndBug> <S2SV_StartBug> if ( list_lru_init ( & s -> s_dentry_lru ) ) <S2SV_EndBug> <S2SV_StartBug> if ( list_lru_init ( & s -> s_inode_lru ) ) <S2SV_EndBug> ","<S2SV_ModStart> for ( i = 0 ; i < SB_FREEZE_LEVELS ; i ++ ) { if ( percpu_counter_init ( & s -> s_writers . counter [ i ] , 0 ) < 0 <S2SV_ModEnd> <S2SV_ModStart> lockdep_init_map ( & s -> s_writers . lock_map [ i ] , sb_writers_name [ i ] , & type -> s_writers_key [ i ] , 0 ) ; } init_waitqueue_head ( & s -> s_writers . wait ) ; init_waitqueue_head ( & s -> s_writers . wait_unfrozen ) ; s -> s_flags = flags ; s -> s_bdi = & default_backing_dev_info ; INIT_HLIST_NODE ( & s -> s_instances ) ; INIT_HLIST_BL_HEAD ( & s -> s_anon ) ; INIT_LIST_HEAD ( & s -> s_inodes ) ; if ( list_lru_init ( & s -> s_dentry_lru ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> s_inode_lru <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5125,<S2SV_StartBug> if ( log_fp ) <S2SV_EndBug> <S2SV_StartBug> if ( daemon_mode == FALSE ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int fh ; struct stat st ; if ( log_fp ) return log_fp ; if ( ( fh = open ( log_file , O_RDWR | O_APPEND | O_CREAT | O_NOFOLLOW , S_IRUSR | S_IWUSR ) ) == - 1 ) { if ( daemon_mode == FALSE ) printf ( ""Warning:<S2SV_blank>Cannot<S2SV_blank>open<S2SV_blank>log<S2SV_blank>file<S2SV_blank>\'%s\'<S2SV_blank>for<S2SV_blank>writing\\n"" , log_file ) ; return NULL ; } log_fp = fdopen ( fh <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return NULL ; } if ( ( fstat ( fh , & st ) ) == - 1 ) { log_fp = NULL ; close ( fh ) ; if ( daemon_mode == FALSE ) printf ( ""Warning:<S2SV_blank>Cannot<S2SV_blank>fstat<S2SV_blank>log<S2SV_blank>file<S2SV_blank>\'%s\'\\n"" , log_file ) ; return NULL ; } if ( st . st_nlink != 1 || ( st . st_mode & S_IFMT ) != S_IFREG ) { log_fp = NULL ; close ( fh ) ; if ( daemon_mode == FALSE ) printf ( ""Warning:<S2SV_blank>log<S2SV_blank>file<S2SV_blank>\'%s\'<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>mode\\n"" , log_file ) ; <S2SV_ModEnd> "
5126,"<S2SV_StartBug> r = do_write_pids ( fc -> pid , f -> controller , f -> cgroup , f -> file , localbuf ) ; <S2SV_EndBug> ","<S2SV_ModStart> fc -> uid , "
5127,<S2SV_StartBug> if ( sec_attr == NULL ) { <S2SV_EndBug> ,<S2SV_ModStart> || sec_attr_len 
5128,"<S2SV_StartBug> pop3c -> mailbox = curl_easy_unescape ( data , path , 0 , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! pop3c -> mailbox ) <S2SV_EndBug> ","<S2SV_ModStart> return Curl_urldecode <S2SV_ModEnd> <S2SV_ModStart> & <S2SV_ModEnd> <S2SV_ModStart> , NULL , TRUE ) <S2SV_ModEnd> "
5129,<S2SV_StartBug> sock_put ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart> sk_nulls_node_init ( & sk -> sk_nulls_node ) ; 
5130,<S2SV_StartBug> if ( par -> color_primaries != AVCOL_PRI_UNSPECIFIED ) <S2SV_EndBug> ,"<S2SV_ModStart> print_primaries ( w , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5131,<S2SV_StartBug> if ( p -> io_context ) <S2SV_EndBug> <S2SV_StartBug> out : <S2SV_EndBug> ,<S2SV_ModStart> task_lock ( p ) ; <S2SV_ModStart> task_unlock ( p ) ; 
5132,<S2SV_StartBug> monitor_sync ( pmonitor ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5133,"<S2SV_StartBug> void generic_pipe_buf_get ( struct pipe_inode_info * pipe , struct pipe_buffer * buf ) <S2SV_EndBug> <S2SV_StartBug> get_page ( buf -> page ) ; <S2SV_EndBug> ",<S2SV_ModStart> bool <S2SV_ModEnd> <S2SV_ModStart> return try_get_page <S2SV_ModEnd> 
5134,"<S2SV_StartBug> r_cons_printf ( ""k<S2SV_blank>bin/pe/%s/%d=%s.%s\\n"" , <S2SV_EndBug> <S2SV_StartBug> r_cons_printf ( ""k<S2SV_blank>bin/pe/%s/%d=%s\\n"" , <S2SV_EndBug> ","<S2SV_ModStart> ""\\""k<S2SV_blank>bin/pe/%s/%d=%s.%s\\""\\n"" <S2SV_ModEnd> <S2SV_ModStart> ""\\""k<S2SV_blank>bin/pe/%s/%d=%s\\""\\n"" <S2SV_ModEnd> "
5135,"<S2SV_StartBug> ALOGE ( ""b/26366256"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; android_errorWriteLog ( 0x534e4554 , ""26366256"" "
5136,<S2SV_StartBug> cdf_secid_t maxsector = ( cdf_secid_t ) ( sat -> sat_len * size ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sid > maxsector ) { <S2SV_EndBug> ,"<S2SV_ModStart> ( <S2SV_ModStart> / sizeof ( maxsector ) ) <S2SV_ModStart> >= maxsector ) { DPRINTF ( ( ""Sector<S2SV_blank>%d<S2SV_blank>>=<S2SV_blank>%d\\n"" <S2SV_ModEnd> "
5137,<S2SV_StartBug> aio_free_ring ( ctx ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5138,<S2SV_StartBug> bool compat ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> , struct iov_iter * iter <S2SV_ModStart> iov_iter_init ( iter , rw , * iovec , * nr_segs , * len ) ; "
5139,<S2SV_StartBug> if ( IS_NOT_NULL ( Else ) ) { <S2SV_EndBug> <S2SV_StartBug> len += SIZE_OP_JUMP ; <S2SV_EndBug> ,<S2SV_ModStart> len += SIZE_OP_JUMP + SIZE_OP_ATOMIC_END ; <S2SV_ModStart>  <S2SV_ModEnd> 
5140,"<S2SV_StartBug> if ( vmx_set_msr ( vcpu , & msr ) != 0 ) { <S2SV_EndBug> ",<S2SV_ModStart> kvm_set_msr <S2SV_ModEnd> 
5141,<S2SV_StartBug> rc = smtp_get_resp ( conn ) ; <S2SV_EndBug> ,<S2SV_ModStart> ( conn ) ; mutt_socket_empty 
5142,"<S2SV_StartBug> signal_remove ( ""message<S2SV_blank>quit"" , ( SIGNAL_FUNC ) msg_quit ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""server<S2SV_blank>disconnected"" , ( SIGNAL_FUNC ) sig_server_disconnected ) ; signal_remove ( "
5143,"<S2SV_StartBug> static int may_create_in_sticky ( struct dentry * const dir , <S2SV_EndBug> <S2SV_StartBug> likely ( ! ( dir -> d_inode -> i_mode & S_ISVTX ) ) || <S2SV_EndBug> <S2SV_StartBug> uid_eq ( inode -> i_uid , dir -> d_inode -> i_uid ) || <S2SV_EndBug> <S2SV_StartBug> if ( likely ( dir -> d_inode -> i_mode & 0002 ) || <S2SV_EndBug> <S2SV_StartBug> ( dir -> d_inode -> i_mode & 0020 && <S2SV_EndBug> ","<S2SV_ModStart> umode_t dir_mode , kuid_t dir_uid <S2SV_ModEnd> <S2SV_ModStart> dir_mode <S2SV_ModEnd> <S2SV_ModStart> dir_uid <S2SV_ModEnd> <S2SV_ModStart> dir_mode <S2SV_ModEnd> <S2SV_ModStart> dir_mode <S2SV_ModEnd> "
5144,"<S2SV_StartBug> mptctl_fw_download ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> return mptctl_do_fw_download ( kfwdl . iocnum , kfwdl . bufp , kfwdl . fwlen ) ; <S2SV_EndBug> ","<S2SV_ModStart> MPT_ADAPTER * iocp , <S2SV_ModStart> iocp <S2SV_ModEnd> "
5145,<S2SV_StartBug> dt -> vlan_id [ 0 ] = p -> vlan_id [ 0 ] ; <S2SV_EndBug> ,<S2SV_ModStart> proto = IP_GET_IPPROTO ( p ) ; dt -> 
5146,<S2SV_StartBug> while ( collen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( replen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( collen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( replen > 0 ) <S2SV_EndBug> ,<S2SV_ModStart> indexw < width && <S2SV_ModStart> indexw < width && <S2SV_ModStart> indexw < width && <S2SV_ModStart> indexw < width && 
5147,<S2SV_StartBug> void <S2SV_EndBug> <S2SV_StartBug> assert ( ( msgnum & ( msgnum - 1 ) ) == 0 && msgnum >= 1 && msgnum <= 32 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> != 0 ) || msgnum < 1 || msgnum > 32 ) { pr_err ( ""%s:<S2SV_blank>invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>msi<S2SV_blank>messages!\\n"" , __func__ ) ; return - 1 ; } <S2SV_ModEnd> <S2SV_ModStart> return 0 ; "
5148,"<S2SV_StartBug> memcpy ( & priv -> ctrl , p , sizeof ( priv -> ctrl ) ) ; <S2SV_EndBug> <S2SV_StartBug> rc = - ENOMEM ; <S2SV_EndBug> ",<S2SV_ModStart> priv -> ctrl . fname = NULL ; <S2SV_ModStart> return <S2SV_ModEnd> 
5149,"<S2SV_StartBug> ret = ca8210_get_platform_data ( priv -> spi , pdata ) ; <S2SV_EndBug> <S2SV_StartBug> ret = ca8210_dev_com_init ( priv ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ca8210_get_platform_data ( priv -> spi , pdata ) ; if ( ret ) { dev_crit ( & spi_device -> dev , ""ca8210_get_platform_data<S2SV_blank>failed\\n"" ) ; goto error ; } ret = "
5150,<S2SV_StartBug> while ( offset < end_offset ) <S2SV_EndBug> <S2SV_StartBug> return offset ; <S2SV_EndBug> ,<S2SV_ModStart> > 0 && offset <S2SV_ModStart> { <S2SV_ModStart> } 
5151,"<S2SV_StartBug> if ( libfvalue_value_type_initialize ( <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> # if defined ( HAVE_DEBUG_OUTPUT ) <S2SV_EndBug> <S2SV_StartBug> & ( record_data [ data_offset ] ) , <S2SV_EndBug> ","<S2SV_ModStart> user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error , LIBCERROR_ERROR_DOMAIN_RUNTIME , LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , ""%s:<S2SV_blank>user<S2SV_blank>SID<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds."" , function ) ; goto on_error ; } if ( <S2SV_ModStart> if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error , LIBCERROR_ERROR_DOMAIN_RUNTIME , LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , ""%s:<S2SV_blank>strings<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds."" , function ) ; goto on_error ; } <S2SV_ModStart> if ( data_size > ( ( record_data_size - 4 ) - data_offset ) ) { libcerror_error_set ( error , LIBCERROR_ERROR_DOMAIN_RUNTIME , LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , ""%s:<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds."" , function ) ; goto on_error ; } <S2SV_ModStart> record_data_offset <S2SV_ModEnd> "
5152,"<S2SV_StartBug> int received = recv ( slot -> fd , buf , size , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
5153,"<S2SV_StartBug> if ( strncmp ( handle -> params . realm , realm -> data , realm -> length ) == 0 <S2SV_EndBug> ","<S2SV_ModStart> success = data_eq_string ( * realm , <S2SV_ModEnd> <S2SV_ModStart> ) && data_eq_string ( * c1 , ""kadmin"" ) && ! data_eq_string ( * c2 , ""history"" ) ; <S2SV_ModEnd> "
5154,"<S2SV_StartBug> struct scatterlist sg [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> sg_init_one ( sg , buf , count ) ; <S2SV_EndBug> <S2SV_StartBug> return __send_to_port ( port , sg , 1 , count , ( void * ) buf , false ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> ; void * data ; int ret <S2SV_ModStart> data = kmemdup ( buf , count , GFP_ATOMIC ) ; if ( ! data ) return - ENOMEM ; <S2SV_ModStart> data <S2SV_ModEnd> <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> data <S2SV_ModEnd> <S2SV_ModStart> kfree ( data ) ; return ret ; "
5155,<S2SV_StartBug> if ( ! encoding && c -> palette_size && c -> bpp <= 8 ) { <S2SV_EndBug> ,<S2SV_ModStart> && c -> format != CHUNKY 
5156,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> rdp -> nego -> transport -> credssp = NULL ; 
5157,<S2SV_StartBug> struct free_nid * i ; <S2SV_EndBug> <S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> if ( build ) { <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> ,"<S2SV_ModStart> , * e <S2SV_ModStart> = - EINVAL ; bool ret = false <S2SV_ModStart> i = f2fs_kmem_cache_alloc ( free_nid_slab , GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) goto err ; spin_lock ( & nm_i -> nid_list_lock ) ; <S2SV_ModStart> goto err_out ; e = __lookup_free_nid_list ( nm_i , nid ) ; if ( e ) { if ( e -> state == NID_NEW ) ret = true ; goto err_out ; } } ret = true ; err = __insert_nid_to_list ( sbi , i , FREE_NID_LIST , true ) ; err_out : spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; err : if ( err ) kmem_cache_free ( free_nid_slab , i ) ; return ret <S2SV_ModEnd> "
5158,<S2SV_StartBug> file_sb_list_del ( file ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5159,"<S2SV_StartBug> gdImageWBMPCtx ( im , fg , out ) ; <S2SV_EndBug> <S2SV_StartBug> rv = gdDPExtractData ( out , size ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ! _gdImageWBMPCtx <S2SV_ModEnd> <S2SV_ModStart> ) { <S2SV_ModEnd> <S2SV_ModStart> } else { rv = NULL ; } 
5160,<S2SV_StartBug> if ( image_info -> ping ) <S2SV_EndBug> <S2SV_StartBug> return ( image ) ; <S2SV_EndBug> ,"<S2SV_ModStart> != MagickFalse <S2SV_ModStart> ) ; } status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) "
5161,"<S2SV_StartBug> size_t l = 0 ; <S2SV_EndBug> <S2SV_StartBug> ptr += strspn ( ptr , ""\\r\\n\\t<S2SV_blank>"" ) ; <S2SV_EndBug> <S2SV_StartBug> l = strcspn ( ptr , ""\\r\\n\\t<S2SV_blank>"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> int wv , w1 , w2 , w3 , w4 ; int tmpval [ 4 ] ; int tmpcnt <S2SV_ModEnd> <S2SV_ModStart> while ( ptr < buf + len && ( * ptr == '<S2SV_blank>' || * ptr == '\\t' || * ptr == '\\n' || * ptr == '\\r' ) ) { ptr ++ ; } <S2SV_ModEnd> <S2SV_ModStart> if ( ( wv = base64_table [ ( int ) ( unsigned char ) * ptr ++ ] ) == - 1 ) { continue ; } tmpval [ tmpcnt ++ ] = wv ; if ( tmpcnt == 4 ) { tmpcnt = 0 ; w1 = tmpval [ 0 ] ; w2 = tmpval [ 1 ] ; w3 = tmpval [ 2 ] ; w4 = tmpval [ 3 ] ; if ( w2 >= 0 ) { outbuf [ p ++ ] = ( unsigned char ) ( ( ( w1 << 2 ) + ( w2 >> 4 ) ) & 0xFF ) ; } if ( w3 >= 0 ) { outbuf [ p ++ ] = ( unsigned char ) ( ( ( w2 << 4 ) + ( w3 >> 2 ) ) & 0xFF ) ; } if ( w4 >= 0 ) { outbuf [ p ++ ] = ( unsigned char ) ( ( ( w3 << 6 ) + w4 ) & 0xFF ) ; } <S2SV_ModEnd> "
5162,<S2SV_StartBug> return tmp ; <S2SV_EndBug> <S2SV_StartBug> return tmp ; <S2SV_EndBug> <S2SV_StartBug> return state -> ptr = tmp ; <S2SV_EndBug> ,<S2SV_ModStart> goto softfail <S2SV_ModEnd> <S2SV_ModStart> goto softfail <S2SV_ModEnd> <S2SV_ModStart> softfail : state -> offset = 0 ; 
5163,"<S2SV_StartBug> ""Unknown<S2SV_blank>Transfer-Encoding:<S2SV_blank>%s;"" <S2SV_EndBug> <S2SV_StartBug> return APR_ENOSPC ; <S2SV_EndBug> <S2SV_StartBug> if ( rv != APR_SUCCESS ) { <S2SV_EndBug> <S2SV_StartBug> case BODY_CHUNK_END : { <S2SV_EndBug> <S2SV_StartBug> int merge_trailers = <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ","<S2SV_ModStart> ""Unknown<S2SV_blank>Transfer-Encoding:<S2SV_blank>%s;<S2SV_blank>"" ""using<S2SV_blank>read-until-close"" <S2SV_ModEnd> <S2SV_ModStart> APR_EINVAL <S2SV_ModEnd> <S2SV_ModStart> apr_brigade_cleanup ( bb ) ; <S2SV_ModStart> BODY_CHUNK_LF : case BODY_CHUNK_END : case BODY_CHUNK_END_LF <S2SV_ModEnd> <S2SV_ModStart> return read_chunked_trailers ( ctx , f , b , conf -> merge_trailers == AP_MERGE_TRAILERS_ENABLE <S2SV_ModEnd> <S2SV_ModStart> ap_log_rerror ( APLOG_MARK , APLOG_ERR , 0 , f -> r , APLOGNO ( 02901 ) ""Unexpected<S2SV_blank>body<S2SV_blank>state<S2SV_blank>(%i)"" , ( int ) ctx -> state ) ; return APR_EGENERAL <S2SV_ModEnd> "
5164,"
","
"
5165,"<S2SV_StartBug> memcpy ( name , fp + n , name_len ) ; n += name_len ; <S2SV_EndBug> <S2SV_StartBug> attr_len = fp [ n ++ ] ; <S2SV_EndBug> ","<S2SV_ModStart> IRDA_ASSERT ( name_len < IAS_MAX_CLASSNAME + 1 , return ; ) ; <S2SV_ModStart> ; IRDA_ASSERT ( attr_len < IAS_MAX_ATTRIBNAME + 1 , return ; ) "
5166,<S2SV_StartBug> if ( errcode != 0 ) <S2SV_EndBug> ,"<S2SV_ModStart> && state -> status == NULL ) state -> status = ""UNKNOWN_REASON"" <S2SV_ModEnd> "
5167,<S2SV_StartBug> if ( ret == - EEXIST ) <S2SV_EndBug> ,<S2SV_ModStart> || ret == - EOVERFLOW 
5168,"<S2SV_StartBug> static void fadst8 ( const int16_t * input , int16_t * output ) { <S2SV_EndBug> <S2SV_StartBug> int s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; <S2SV_EndBug> <S2SV_StartBug> int x1 = input [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> int x2 = input [ 5 ] ; <S2SV_EndBug> <S2SV_StartBug> int x3 = input [ 2 ] ; <S2SV_EndBug> <S2SV_StartBug> int x4 = input [ 3 ] ; <S2SV_EndBug> <S2SV_StartBug> int x5 = input [ 4 ] ; <S2SV_EndBug> <S2SV_StartBug> int x6 = input [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> int x7 = input [ 6 ] ; <S2SV_EndBug> <S2SV_StartBug> output [ 0 ] = x0 ; <S2SV_EndBug> <S2SV_StartBug> output [ 1 ] = - x4 ; <S2SV_EndBug> <S2SV_StartBug> output [ 2 ] = x6 ; <S2SV_EndBug> <S2SV_StartBug> output [ 3 ] = - x2 ; <S2SV_EndBug> <S2SV_StartBug> output [ 4 ] = x3 ; <S2SV_EndBug> <S2SV_StartBug> output [ 5 ] = - x7 ; <S2SV_EndBug> <S2SV_StartBug> output [ 6 ] = x5 ; <S2SV_EndBug> <S2SV_StartBug> output [ 7 ] = - x1 ; <S2SV_EndBug> ","<S2SV_ModStart> tran_low_t * input , tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> tran_high_t <S2SV_ModEnd> <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) <S2SV_ModStart> ( tran_low_t ) "
5169,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( bps * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""fpDiff"" , ""%s"" , ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModStart> return 1 ; "
5170,<S2SV_StartBug> if ( dataSize > MAX_DLS_WAVE_SIZE ) <S2SV_EndBug> ,<S2SV_ModStart> dataSize < 0 || 
5171,"<S2SV_StartBug> char * bufp , * commentp , * altp ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( strlen ( buf ) >= BUFSZ ) buf [ BUFSZ - 1 ] = '\\0' 
5172,"<S2SV_StartBug> int ctrl_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> pbi ) <S2SV_EndBug> <S2SV_StartBug> * corrupted = ctx -> pbi -> common . frame_to_show -> corrupted ; <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_INVALID_PARAM ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> frame_workers ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; RefCntBuffer * const frame_bufs = frame_worker_data -> pbi -> common . buffer_pool -> frame_bufs ; if ( frame_worker_data <S2SV_ModEnd> <S2SV_ModStart> == NULL ) return VPX_CODEC_ERROR ; if ( ctx -> last_show_frame >= 0 ) * corrupted = frame_bufs [ ctx -> last_show_frame ] . buf . corrupted <S2SV_ModEnd> <S2SV_ModStart> VPX_CODEC_ERROR <S2SV_ModEnd> <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; } 
5173,"<S2SV_StartBug> char * name , int rep_quick ) <S2SV_EndBug> <S2SV_StartBug> mysql_file_close ( new_file , MYF ( 0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( param -> testflag & T_BACKUP_DATA ? <S2SV_EndBug> ","<S2SV_ModStart> , my_bool no_copy_stat <S2SV_ModStart> myf flags = 0 ; if ( param -> testflag & T_BACKUP_DATA ) flags |= MY_REDEL_MAKE_BACKUP ; if ( no_copy_stat ) flags |= MY_REDEL_NO_COPY_STAT ; <S2SV_ModStart> flags <S2SV_ModEnd> "
5174,<S2SV_StartBug> # ifdef HAVE_OPENSSL <S2SV_EndBug> ,<S2SV_ModStart> SSL_SET_OPTIONS ( & mysql_connection ) ; <S2SV_ModEnd> 
5175,"<S2SV_StartBug> av_log ( mxf , AV_LOG_TRACE , ""could<S2SV_blank>not<S2SV_blank>resolve<S2SV_blank>essence<S2SV_blank>container<S2SV_blank>data<S2SV_blank>strong<S2SV_blank>ref\\n"" ) ; <S2SV_EndBug> ",<S2SV_ModStart> -> fc 
5176,<S2SV_StartBug> assert ( ops != NULL ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! ops ) { pr_warn ( ""No<S2SV_blank>driver<S2SV_blank>for<S2SV_blank>device<S2SV_blank>[%s]\\n"" , fi -> fi_name ) ; continue ; } <S2SV_ModEnd> "
5177,<S2SV_StartBug> ut8 opcode = * ( p4 ++ ) & 0xff ; <S2SV_EndBug> ,<S2SV_ModStart> if ( p4 <= 0 ) { return ; } 
5178,"<S2SV_StartBug> change = ue -> tlv_data_size != size ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> return - ENXIO ; <S2SV_EndBug> <S2SV_StartBug> if ( size < ue -> tlv_data_size ) <S2SV_EndBug> <S2SV_StartBug> return - ENOSPC ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_to_user ( tlv , ue -> tlv_data , ue -> tlv_data_size ) ) <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> mutex_lock ( & ue -> card -> user_ctl_lock ) ; <S2SV_ModStart> mutex_unlock ( & ue -> card -> user_ctl_lock ) ; <S2SV_ModStart> int ret = 0 ; mutex_lock ( & ue -> card -> user_ctl_lock ) ; <S2SV_ModStart> { ret = <S2SV_ModEnd> <S2SV_ModStart> goto err_unlock ; } <S2SV_ModStart> { ret = <S2SV_ModEnd> <S2SV_ModStart> goto err_unlock ; } <S2SV_ModStart> ret = <S2SV_ModEnd> <S2SV_ModStart> err_unlock : mutex_unlock ( & ue -> card -> user_ctl_lock ) ; if ( ret ) return ret ; 
5179,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> usb_conv_info -> class_data_type = USB_CONV_MASS_STORAGE ; } else if ( usb_conv_info -> class_data_type != USB_CONV_MASS_STORAGE ) { return 0 ; 
5180,"<S2SV_StartBug> ND_TCHECK2 ( dp [ 0 ] , 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ND_TCHECK <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5181,"<S2SV_StartBug> static void encode_b ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int output_enabled , BLOCK_SIZE bsize ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize < BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> set_offsets ( cpi , tile , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> update_state ( cpi , get_block_context ( x , bsize ) , mi_row , mi_col , bsize , <S2SV_EndBug> <S2SV_StartBug> encode_superblock ( cpi , tp , output_enabled , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> update_stats ( cpi ) ; <S2SV_EndBug> ","<S2SV_ModStart> , ThreadData * td <S2SV_ModStart> , PICK_MODE_CONTEXT * ctx <S2SV_ModStart> td <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , x <S2SV_ModStart> td , ctx <S2SV_ModEnd> <S2SV_ModStart> , td <S2SV_ModStart> , ctx <S2SV_ModStart> & cpi -> common , td <S2SV_ModEnd> "
5182,"<S2SV_StartBug> if ( CHECKOVERFLOW ( o , buf_size , 12 ) ) { <S2SV_EndBug> ","<S2SV_ModStart> memset ( & n -> entries [ tcount ] , 0 , sizeof ( MnotePentaxEntry ) ) ; "
5183,<S2SV_StartBug> if ( ! object || object -> list . length != 2 || ! object -> list . objects [ 0 ] || object -> list . objects [ 1 ] -> list . length != 1 ) { <S2SV_EndBug> ,<S2SV_ModStart> || ! object -> list . objects [ 0 ] || ! object -> list . objects [ 1 ] || <S2SV_ModEnd> 
5184,<S2SV_StartBug> struct task_struct * task = current ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5185,"<S2SV_StartBug> unsigned int ds , unsigned int offset , unsigned int recursion_depth ) <S2SV_EndBug> <S2SV_StartBug> if ( recursion_depth > 12 ) { <S2SV_EndBug> <S2SV_StartBug> ""Deep<S2SV_blank>recursion<S2SV_blank>detected!"" ) ; <S2SV_EndBug> <S2SV_StartBug> exif_data_load_data_content ( data , EXIF_IFD_EXIF , d , ds , o , recursion_depth + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exif_data_load_data_content ( data , EXIF_IFD_GPS , d , ds , o , recursion_depth + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exif_data_load_data_content ( data , EXIF_IFD_INTEROPERABILITY , d , ds , o , recursion_depth + 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> recursion_cost <S2SV_ModEnd> <S2SV_ModStart> recursion_cost > 170 <S2SV_ModEnd> <S2SV_ModStart> ""Deep/expensive<S2SV_blank>recursion<S2SV_blank>detected!"" <S2SV_ModEnd> <S2SV_ModStart> recursion_cost + level_cost ( n ) <S2SV_ModEnd> <S2SV_ModStart> recursion_cost + level_cost ( n ) <S2SV_ModEnd> <S2SV_ModStart> recursion_cost + level_cost ( n ) <S2SV_ModEnd> "
5186,"<S2SV_StartBug> int n ; <S2SV_EndBug> <S2SV_StartBug> long newbufsize ; <S2SV_EndBug> <S2SV_StartBug> newbufsize <<= 1 ; <S2SV_EndBug> <S2SV_StartBug> JAS_DBGLOG ( 100 , ( ""mem_write<S2SV_blank>resizing<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%z\\n"" , m -> bufsize_ , <S2SV_EndBug> <S2SV_StartBug> if ( m -> pos_ > m -> len_ ) { <S2SV_EndBug> ","<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> size_t newbufsize ; size_t <S2SV_ModEnd> <S2SV_ModStart> if ( ! jas_safe_size_mul ( newbufsize , 2 , & newbufsize ) ) { <S2SV_ModEnd> <S2SV_ModStart> ""new<S2SV_blank>buffer<S2SV_blank>size<S2SV_blank>would<S2SV_blank>cause<S2SV_blank>overflow\\n"" ) ) ; <S2SV_ModEnd> <S2SV_ModStart> JAS_DBGLOG ( 100 , ( ""mem_write<S2SV_blank>resizing<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%zu\\n"" , m -> bufsize_ , newbufsize ) ) ; assert ( newbufsize > 0 ) ; if ( mem_resize ( m , newbufsize ) ) { return - 1 ; } } "
5187,<S2SV_StartBug> down_read ( & BTRFS_I ( dir ) -> root -> fs_info -> subvol_sem ) ; <S2SV_EndBug> ,"<S2SV_ModStart> error = btrfs_check_dir_item_collision ( BTRFS_I ( dir ) -> root , dir -> i_ino , name , namelen ) ; if ( error ) goto out_dput ; "
5188,<S2SV_StartBug> dst [ y * linesize + x ] = clr ; <S2SV_EndBug> ,<S2SV_ModStart> if ( y >= avctx -> height ) return AVERROR_INVALIDDATA ; 
5189,<S2SV_StartBug> int bind_ports ( void ) { <S2SV_EndBug> ,<S2SV_ModStart> NOEXPORT 
5190,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( length <= 0 ) return ; 
5191,<S2SV_StartBug> const int kBufferFrameCount = 65536 ; <S2SV_EndBug> <S2SV_StartBug> void * buffer = malloc ( kBufferFrameCount * frameSize ) ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; int bufferSize ; while ( multiplyCheckOverflow ( kBufferFrameCount , frameSize , & bufferSize ) ) kBufferFrameCount /= 2 <S2SV_ModStart> bufferSize <S2SV_ModEnd> "
5192,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> new_fpl -> user = get_uid ( fpl -> user ) ; 
5193,"<S2SV_StartBug> vpx_memset ( dst -> y_buffer + i * dst -> y_stride + dw - 1 , dst -> y_buffer [ i * dst -> y_stride + dw - 2 ] , dst -> y_width - dw + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst -> y_buffer + i * dst -> y_stride , dst -> y_buffer + ( dh - 2 ) * dst -> y_stride , dst -> y_width + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( dst -> u_buffer + i * dst -> uv_stride + dw / 2 - 1 , dst -> u_buffer [ i * dst -> uv_stride + dw / 2 - 2 ] , dst -> uv_width - dw / 2 + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst -> u_buffer + i * dst -> uv_stride , dst -> u_buffer + ( dh / 2 - 2 ) * dst -> uv_stride , dst -> uv_width ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( dst -> v_buffer + i * dst -> uv_stride + dw / 2 - 1 , dst -> v_buffer [ i * dst -> uv_stride + dw / 2 - 2 ] , dst -> uv_width - dw / 2 + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst -> v_buffer + i * dst -> uv_stride , dst -> v_buffer + ( dh / 2 - 2 ) * dst -> uv_stride , dst -> uv_width ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
5194,"<S2SV_StartBug> if ( ( job = cupsdAddJob ( priority , printer -> name ) ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> apply_printer_defaults ( printer , job ) ; <S2SV_EndBug> ","<S2SV_ModStart> attr = ippFindAttribute ( con -> request , ""requesting-user-name"" , IPP_TAG_NAME ) ; if ( attr && ! ippValidateAttribute ( attr ) ) { send_ipp_status ( con , IPP_ATTRIBUTES , _ ( ""Bad<S2SV_blank>requesting-user-name<S2SV_blank>value:<S2SV_blank>%s"" ) , cupsLastErrorString ( ) ) ; if ( ( attr = ippCopyAttribute ( con -> response , attr , 0 ) ) != NULL ) attr -> group_tag = IPP_TAG_UNSUPPORTED_GROUP ; return ( NULL ) ; } <S2SV_ModStart>  <S2SV_ModEnd> "
5195,<S2SV_StartBug> struct dentry * dentry = path -> dentry ; <S2SV_EndBug> <S2SV_StartBug> struct inode * inode = dentry -> d_inode ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> vfs_select_inode ( path -> <S2SV_ModEnd> <S2SV_ModStart> file -> f_path = * path ; <S2SV_ModEnd> 
5196,"<S2SV_StartBug> static inline bool unconditional ( const struct ip6t_ip6 * ipv6 ) <S2SV_EndBug> <S2SV_StartBug> return memcmp ( ipv6 , & uncond , sizeof ( uncond ) ) == 0 ; <S2SV_EndBug> ",<S2SV_ModStart> ip6t_entry * e <S2SV_ModEnd> <S2SV_ModStart> e -> target_offset == sizeof ( struct ip6t_entry ) && memcmp ( & e -> <S2SV_ModEnd> 
5197,<S2SV_StartBug> return - ETIMEDOUT ; <S2SV_EndBug> ,<S2SV_ModStart> kfree_skb ( skb ) ; 
5198,"<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> indx , & data , 1 , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart> u8 * buf ; int ret ; buf = kmemdup ( & data , 1 , GFP_NOIO ) ; if ( ! buf ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> buf <S2SV_ModEnd> <S2SV_ModStart> kfree ( buf ) ; "
5199,<S2SV_StartBug> static gboolean <S2SV_EndBug> <S2SV_StartBug> ice_conn -> context = client ; <S2SV_EndBug> ,"<S2SV_ModStart> typedef struct { guint watch_id ; guint protocol_timeout ; } GsmIceConnectionWatch ; static void disconnect_ice_connection ( IceConn ice_conn ) { IceSetShutdownNegotiation ( ice_conn , FALSE ) ; IceCloseConnection <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5200,<S2SV_StartBug> tp -> prr_delivered += newly_acked_sacked ; <S2SV_EndBug> ,<S2SV_ModStart> if ( newly_acked_sacked <= 0 || WARN_ON_ONCE ( ! tp -> prior_cwnd ) ) return ; 
5201,"<S2SV_StartBug> ND_TCHECK ( bp [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( bp [ 4 ] ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( bp [ 4 ] & 0x3 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp [ 4 ] & 0xfc ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>[rsvd=0x%02x]"" , bp [ 4 ] & 0xfc ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( bp [ 5 ] ) ; <S2SV_EndBug> <S2SV_StartBug> nentries = bp [ 5 ] ; <S2SV_EndBug> <S2SV_StartBug> bp += 6 ; len -= 6 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , 6 ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( len < 8 ) goto trunc ; <S2SV_ModStart> if ( len < 4 ) goto trunc ; <S2SV_ModStart> bp += 4 ; len -= 4 ; if ( len < 1 ) goto trunc ; <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> bp += 1 ; len -= 1 ; if ( len < 1 ) goto trunc ; <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> 1 ; len -= 1 <S2SV_ModEnd> <S2SV_ModStart> if ( len < 6 ) goto trunc ; 
5202,<S2SV_StartBug> if ( num < 0 ) return ONIGERR_TOO_BIG_NUMBER ; <S2SV_EndBug> ,<S2SV_ModStart> || num >= 256 
5203,"<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , rel ) ; <S2SV_EndBug> ",<S2SV_ModStart> int rc ; <S2SV_ModStart> rc = <S2SV_ModStart> ; if ( rc != X86EMUL_CONTINUE ) return rc 
5204,<S2SV_StartBug> calldata -> arg . open_flags = FMODE_READ ; <S2SV_EndBug> <S2SV_StartBug> calldata -> arg . open_flags = FMODE_WRITE ; <S2SV_EndBug> ,<S2SV_ModStart> fmode <S2SV_ModEnd> <S2SV_ModStart> fmode <S2SV_ModEnd> 
5205,<S2SV_StartBug> int nBytes = sizeof ( sqlite3_vtab * ) * ( db -> nVTrans + ARRAY_INCR ) ; <S2SV_EndBug> ,<S2SV_ModStart> sqlite3_int64 <S2SV_ModEnd> <S2SV_ModStart> ( sqlite3_int64 ) 
5206,<S2SV_StartBug> static void follow_dotdot ( struct nameidata * nd ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if ( unlikely ( ! path_connected ( & nd -> path ) ) ) return - ENOENT ; <S2SV_ModStart> return 0 ; 
5207,<S2SV_StartBug> update_db_bp_intercept ( vcpu ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5208,<S2SV_StartBug> nd -> last_type = LAST_BIND ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5209,<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> tcp_rcv_space_adjust ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> } tp -> copied_seq = seq ; 
5210,"<S2SV_StartBug> if ( ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ) , index_key ) ) { <S2SV_EndBug> ",<S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && 
5211,<S2SV_StartBug> if ( fv -> b . nextsame != NULL || fv -> b . sf -> fv != & fv -> b ) { <S2SV_EndBug> ,<S2SV_ModStart> } else if ( warn_script_unsaved && fv -> script_unsaved && AskScriptChanged ( ) == 2 ) { return false ; 
5212,<S2SV_StartBug> conn -> sasl_username = ircnet -> sasl_username ; <S2SV_EndBug> ,<S2SV_ModStart> g_strdup ( ircnet -> sasl_username ) ; conn -> sasl_password = g_strdup ( ircnet -> sasl_password ) <S2SV_ModEnd> 
5213,"<S2SV_StartBug> request_buf . length = mutt_b64_decode ( buf2 , idata -> buf + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> request_buf . length = mutt_b64_decode ( buf2 , idata -> buf + 2 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , sizeof ( buf2 ) <S2SV_ModStart> , sizeof ( buf2 ) "
5214,<S2SV_StartBug> void * dllhandle ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( COM_CompareExtension ( name , "".pk3"" ) ) { Com_Printf ( ""Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\""%s\\"""" , name ) ; return NULL ; } "
5215,<S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> ,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) return - ENOKEY "
5216,<S2SV_StartBug> char * prop_chunk = malloc ( ( size_t ) dff_chunk_header . ckDataSize ) ; <S2SV_EndBug> ,"<S2SV_ModStart> prop_chunk ; if ( dff_chunk_header . ckDataSize < 4 || dff_chunk_header . ckDataSize > 1024 ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""got<S2SV_blank>PROP<S2SV_blank>chunk<S2SV_blank>of<S2SV_blank>%d<S2SV_blank>bytes<S2SV_blank>total"" , ( int ) dff_chunk_header . ckDataSize ) ; "
5217,"<S2SV_StartBug> vp9_lpf_horizontal_16 ( s , pitch , lfi -> mblim , lfi -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_16 ( s , pitch , lfi -> mblim , lfi -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_8_dual ( s , pitch , lfi -> mblim , lfi -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4_dual ( s + 4 * pitch , pitch , lfi -> mblim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4 ( s + 8 + 4 * pitch , pitch , lfin -> mblim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_8 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4_dual ( s , pitch , lfi -> mblim , lfi -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4_dual ( s + 4 * pitch , pitch , lfi -> mblim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4 ( s + 8 + 4 * pitch , pitch , lfin -> mblim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; <S2SV_EndBug> ","<S2SV_ModStart> vpx_lpf_horizontal_16 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_horizontal_16 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_horizontal_8_dual <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_horizontal_4_dual ( s + 4 * pitch , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , lfin -> mblim , lfin -> lim , lfin -> hev_thr ) ; } else { if ( mask_4x4_int & 1 ) vpx_lpf_horizontal_4 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_horizontal_4 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_horizontal_8 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; if ( mask_4x4_int & 1 ) vpx_lpf_horizontal_4 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_horizontal_4_dual <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_horizontal_4_dual ( s + 4 * pitch , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , lfin -> mblim , lfin -> lim , lfin -> hev_thr ) ; } else { if ( mask_4x4_int & 1 ) vpx_lpf_horizontal_4 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_horizontal_4 <S2SV_ModEnd> <S2SV_ModStart> vpx_lpf_horizontal_4 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; if ( mask_4x4_int & 1 ) vpx_lpf_horizontal_4 ( s + 4 * pitch , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; } } else if ( mask_4x4_int & 1 ) { vpx_lpf_horizontal_4 <S2SV_ModEnd> "
5218,"<S2SV_StartBug> return perf_read_hw ( event , buf , count ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> struct perf_event_context * ctx ; int ret ; ctx = perf_event_ctx_lock ( event ) ; ret = <S2SV_ModEnd> <S2SV_ModStart> perf_event_ctx_unlock ( event , ctx ) ; return ret ; "
5219,<S2SV_StartBug> return SQLITE_NOMEM ; <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug> ,"<S2SV_ModStart> sqlite3ErrorToParser ( db , SQLITE_NOMEM ) <S2SV_ModEnd> <S2SV_ModStart> if ( rc && pParse -> nErr == 0 ) { assert ( pParse -> db -> mallocFailed ) ; return sqlite3ErrorToParser ( pParse -> db , SQLITE_NOMEM ) ; } "
5220,"<S2SV_StartBug> vpx_codec_ctx_t codec [ NUM_ENCODERS ] ; <S2SV_EndBug> <S2SV_StartBug> vpx_codec_pts_t frame_cnt = 0 ; <S2SV_EndBug> <S2SV_StartBug> int frame_avail ; <S2SV_EndBug> <S2SV_StartBug> int arg_deadline = VPX_DL_REALTIME ; <S2SV_EndBug> <S2SV_StartBug> uint64_t psnr_sse_total [ NUM_ENCODERS ] = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> int psnr_count [ NUM_ENCODERS ] = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> if ( argc != ( 5 + NUM_ENCODERS ) ) <S2SV_EndBug> <S2SV_StartBug> die ( ""Usage:<S2SV_blank>%s<S2SV_blank><width><S2SV_blank><height><S2SV_blank><infile><S2SV_blank><outfile(s)><S2SV_blank><output<S2SV_blank>psnr?>\\n"" , <S2SV_EndBug> <S2SV_StartBug> height = strtol ( argv [ 2 ] , NULL , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( infile = fopen ( argv [ 3 ] , ""rb"" ) ) ) <S2SV_EndBug> <S2SV_StartBug> die ( ""Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>reading"" , argv [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( outfile [ i ] = fopen ( argv [ i + 4 ] , ""wb"" ) ) ) <S2SV_EndBug> <S2SV_StartBug> show_psnr = strtol ( argv [ NUM_ENCODERS + 4 ] , NULL , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> res [ i ] = vpx_codec_enc_config_default ( interface , & cfg [ i ] , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> cfg [ 0 ] . g_threads = 1 ; <S2SV_EndBug> <S2SV_StartBug> cfg [ 0 ] . rc_min_quantizer = 4 ; <S2SV_EndBug> <S2SV_StartBug> cfg [ 0 ] . rc_undershoot_pct = 98 ; <S2SV_EndBug> <S2SV_StartBug> cfg [ 0 ] . rc_overshoot_pct = 100 ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & cfg [ i ] , & cfg [ 0 ] , sizeof ( vpx_codec_enc_cfg_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> write_ivf_file_header ( outfile [ i ] , & cfg [ i ] , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_control ( & codec [ i ] , VP8E_SET_CPUUSED , speed ) ) <S2SV_EndBug> <S2SV_StartBug> die_codec ( & codec [ i ] , ""Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>cpu_used"" ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned int static_thresh = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_control ( & codec [ i ] , VP8E_SET_STATIC_THRESHOLD , static_thresh ) ) <S2SV_EndBug> <S2SV_StartBug> die_codec ( & codec [ i ] , ""Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>static<S2SV_blank>threshold"" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> frame_cnt , 1 , flags , arg_deadline ) ) <S2SV_EndBug> <S2SV_StartBug> die_codec ( & codec [ 0 ] , ""Failed<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>frame"" ) ; <S2SV_EndBug> <S2SV_StartBug> && ( pkt [ i ] -> data . frame . flags & VPX_FRAME_IS_KEY ) ? ""K"" : ""."" ) ; <S2SV_EndBug> <S2SV_StartBug> printf ( ""\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> FILE * downsampled_input [ NUM_ENCODERS - 1 ] ; char filename [ 50 ] ; <S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> length_frame ; int <S2SV_ModStart> layer_id = 0 ; int layer_flags [ VPX_TS_MAX_PERIODICITY * NUM_ENCODERS ] = { 0 } ; int flag_periodicity ; int <S2SV_ModStart> int key_frame_insert = 0 ; <S2SV_ModStart> ; double cx_time = 0 ; struct timeval tv1 , tv2 , difftv <S2SV_ModStart> unsigned int num_temporal_layers [ NUM_ENCODERS ] = { 3 , 3 , 3 } ; <S2SV_ModStart> 7 + 3 * <S2SV_ModEnd> <S2SV_ModStart> ""Usage:<S2SV_blank>%s<S2SV_blank><width><S2SV_blank><height><S2SV_blank><frame_rate><S2SV_blank><S2SV_blank><infile><S2SV_blank><outfile(s)><S2SV_blank>"" ""<rate_encoder(s)><S2SV_blank><temporal_layer(s)><S2SV_blank><key_frame_insert><S2SV_blank><output<S2SV_blank>psnr?><S2SV_blank>\\n"" <S2SV_ModEnd> <S2SV_ModStart> ] , NULL , 0 ) ; framerate = strtol ( argv [ 3 <S2SV_ModStart> 4 <S2SV_ModEnd> <S2SV_ModStart> 4 <S2SV_ModEnd> <S2SV_ModStart> 5 <S2SV_ModEnd> <S2SV_ModStart> for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { target_bitrate [ i ] <S2SV_ModEnd> <S2SV_ModStart> 5 + i <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModStart> num_temporal_layers [ i ] = strtol ( argv [ 2 * NUM_ENCODERS + 5 + i ] , NULL , 0 ) ; if ( num_temporal_layers [ i ] < 1 || num_temporal_layers [ i ] > 3 ) die ( ""Invalid<S2SV_blank>temporal<S2SV_blank>layers:<S2SV_blank>%d,<S2SV_blank>Must<S2SV_blank>be<S2SV_blank>1,<S2SV_blank>2,<S2SV_blank>or<S2SV_blank>3.<S2SV_blank>\\n"" , num_temporal_layers ) ; } for ( i = 0 ; i < NUM_ENCODERS - 1 ; i ++ ) { if ( sprintf ( filename , ""ds%d.yuv"" , NUM_ENCODERS - i ) < 0 ) { <S2SV_ModEnd> <S2SV_ModStart> downsampled_input [ i ] = fopen ( filename , ""wb"" ) ; } key_frame_insert = strtol ( argv [ 3 * NUM_ENCODERS + 5 ] , NULL , 0 ) ; show_psnr = strtol ( argv [ 3 * NUM_ENCODERS + 6 ] , NULL , 0 ) ; for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { res [ i ] = vpx_codec_enc_config_default ( interface , & cfg [ i ] , 0 ) ; if ( res [ i ] ) { printf ( ""Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>config:<S2SV_blank>%s\\n"" , vpx_codec_err_to_string ( res [ i ] ) ) ; return EXIT_FAILURE ; } <S2SV_ModStart> rc_dropframe_thresh = 0 <S2SV_ModEnd> <S2SV_ModStart> 2 <S2SV_ModEnd> <S2SV_ModStart> 100 <S2SV_ModEnd> <S2SV_ModStart> 15 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cfg [ 0 ] . g_threads = 2 ; cfg [ 1 ] . g_threads = 1 ; cfg [ 2 ] . g_threads = 1 ; <S2SV_ModStart> for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { set_temporal_layer_pattern ( num_temporal_layers [ i ] , & cfg [ i ] , cfg [ i ] . rc_target_bitrate , & layer_flags [ i * VPX_TS_MAX_PERIODICITY ] ) ; } <S2SV_ModStart> i == NUM_ENCODERS - 1 ) speed = - 4 ; if ( <S2SV_ModStart> ) ; } for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { if ( vpx_codec_control ( & codec [ i ] , VP8E_SET_STATIC_THRESHOLD , 1 ) ) die_codec ( & codec [ i ] , ""Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>static<S2SV_blank>threshold"" ) ; } if ( vpx_codec_control ( & codec [ 0 ] , VP8E_SET_NOISE_SENSITIVITY , 1 ) ) die_codec ( & codec [ 0 ] , ""Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>noise_sensitivity"" ) ; for ( i = 1 ; i < NUM_ENCODERS ; i ++ ) { if ( vpx_codec_control ( & codec [ i ] , VP8E_SET_NOISE_SENSITIVITY , 0 ) ) die_codec ( & codec [ i ] , ""Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>noise_sensitivity"" ) ; } for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { if ( vpx_codec_control ( & codec [ i ] , VP8E_SET_TOKEN_PARTITIONS , 1 ) ) die_codec ( & codec [ i ] , ""Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>static<S2SV_blank>threshold"" <S2SV_ModStart> max_intra_size_pct = ( int ) ( ( ( double ) cfg [ 0 ] . rc_buf_optimal_sz * 0.5 ) * framerate / 10 ) <S2SV_ModEnd> <S2SV_ModStart> VP8E_SET_MAX_INTRA_BITRATE_PCT , max_intra_size_pct <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> length_frame = cfg [ i ] . g_w * cfg [ i ] . g_h * 3 / 2 ; if ( fwrite ( raw [ i ] . planes [ 0 ] , 1 , length_frame , downsampled_input [ NUM_ENCODERS - i - 1 ] ) != length_frame ) { return EXIT_FAILURE ; } } } for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { layer_id = cfg [ i ] . ts_layer_id [ frame_cnt % cfg [ i ] . ts_periodicity ] ; flags = 0 ; flag_periodicity = periodicity_to_num_layers [ num_temporal_layers [ i ] - 1 ] ; flags = layer_flags [ i * VPX_TS_MAX_PERIODICITY + frame_cnt % flag_periodicity ] ; if ( frame_cnt == 0 ) { flags |= VPX_EFLAG_FORCE_KF ; } if ( frame_cnt > 0 && frame_cnt == key_frame_insert ) { flags = VPX_EFLAG_FORCE_KF ; } vpx_codec_control ( & codec [ i ] , VP8E_SET_FRAME_FLAGS , flags ) ; vpx_codec_control ( & codec [ i ] , VP8E_SET_TEMPORAL_LAYER_ID , layer_id ) ; } gettimeofday ( & tv1 , NULL ) ; <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> ) ; } gettimeofday ( & tv2 , NULL ) ; timersub ( & tv2 , & tv1 , & difftv ) ; cx_time += ( double ) ( difftv . tv_sec * 1000000 + difftv . tv_usec <S2SV_ModStart> """" <S2SV_ModEnd> <S2SV_ModStart> ) ; printf ( ""FPS<S2SV_blank>for<S2SV_blank>encoding<S2SV_blank>%d<S2SV_blank>%f<S2SV_blank>%f<S2SV_blank>\\n"" , frame_cnt , ( float ) cx_time / 1000000 , 1000000 * ( double ) frame_cnt / ( double ) cx_time "
5221,"<S2SV_StartBug> int i , retval ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> ",<S2SV_ModStart> test_parser_param ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5222,"<S2SV_StartBug> in_uint16_le ( s , length ) ; <S2SV_EndBug> <S2SV_StartBug> in_uint8 ( s , type ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct stream packet = * s ; <S2SV_ModStart> if ( ! s_check_rem ( s , length + 7 ) ) { rdp_protocol_error ( ""process_secondary_order(),<S2SV_blank>next<S2SV_blank>order<S2SV_blank>pointer<S2SV_blank>would<S2SV_blank>overrun<S2SV_blank>stream"" , & packet ) ; } "
5223,"<S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> number_threads = ( size_t ) GetMagickResourceLimit ( ThreadResource ) ; <S2SV_EndBug> <S2SV_StartBug> pixels = ( PixelChannels * * ) AcquireQuantumMemory ( number_threads , <S2SV_EndBug> <S2SV_StartBug> ( void ) memset ( pixels , 0 , number_threads * sizeof ( * pixels ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug> ","<S2SV_ModStart> rows ; rows = MagickMax ( GetImageListLength ( images ) , <S2SV_ModEnd> <S2SV_ModStart> ) <S2SV_ModStart> rows , <S2SV_ModEnd> <S2SV_ModStart> columns = MaxPixelChannels ; for ( next = images ; next != ( Image * ) NULL ; next = next -> next ) columns = MagickMax ( next -> columns , columns ) ; for ( i = 0 <S2SV_ModEnd> <S2SV_ModStart> rows <S2SV_ModEnd> "
5224,<S2SV_StartBug> conn -> c_trans = trans ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab , conn ) ; conn = ERR_PTR ( - ENODEV ) ; goto out ; } "
5225,<S2SV_StartBug> ni6 = ( const struct icmp6_nodeinfo * ) dp ; <S2SV_EndBug> <S2SV_StartBug> cp = ( const u_char * ) ( ni6 + 1 ) + 4 ; <S2SV_EndBug> ,"<S2SV_ModStart> ND_TCHECK2 ( * dp , sizeof ( * ni6 ) ) ; <S2SV_ModStart> ; ND_TCHECK ( cp [ 0 ] ) "
5226,<S2SV_StartBug> Py_ssize_t new_memo_size = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < new_memo_size ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> i = new_memo_size ; <S2SV_EndBug> ,<S2SV_ModStart> size_t new_memo_size = 0 <S2SV_ModEnd> <S2SV_ModStart> size_t <S2SV_ModStart> for ( size_t i = new_memo_size - 1 ; i != SIZE_MAX ; i -- <S2SV_ModEnd> 
5227,"<S2SV_StartBug> cJSON_AddIntToObject ( j , ""omit"" , test -> omit ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j , ""server_affinity"" , test -> server_affinity ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddStringToObject ( j , ""title"" , test -> title ) ; <S2SV_EndBug> ","<S2SV_ModStart> cJSON_AddNumberToObject <S2SV_ModEnd> <S2SV_ModStart> cJSON_AddNumberToObject ( j , ""server_affinity"" , test -> server_affinity ) ; if ( test -> duration ) cJSON_AddNumberToObject ( j , ""time"" , test -> duration ) ; if ( test -> settings -> bytes ) cJSON_AddNumberToObject ( j , ""num"" , test -> settings -> bytes ) ; if ( test -> settings -> blocks ) cJSON_AddNumberToObject ( j , ""blockcount"" , test -> settings -> blocks ) ; if ( test -> settings -> mss ) cJSON_AddNumberToObject ( j , ""MSS"" , test -> settings -> mss ) ; if ( test -> no_delay ) cJSON_AddTrueToObject ( j , ""nodelay"" ) ; cJSON_AddNumberToObject ( j , ""parallel"" , test -> num_streams ) ; if ( test -> reverse ) cJSON_AddTrueToObject ( j , ""reverse"" ) ; if ( test -> settings -> socket_bufsize ) cJSON_AddNumberToObject ( j , ""window"" , test -> settings -> socket_bufsize ) ; if ( test -> settings -> blksize ) cJSON_AddNumberToObject ( j , ""len"" , test -> settings -> blksize ) ; if ( test -> settings -> rate ) cJSON_AddNumberToObject ( j , ""bandwidth"" , test -> settings -> rate ) ; if ( test -> settings -> burst ) cJSON_AddNumberToObject ( j , ""burst"" , test -> settings -> burst ) ; if ( test -> settings -> tos ) cJSON_AddNumberToObject ( j , ""TOS"" , test -> settings -> tos ) ; if ( test -> settings -> flowlabel ) cJSON_AddNumberToObject ( j , ""flowlabel"" , test -> settings -> flowlabel ) ; if ( test -> title ) cJSON_AddStringToObject ( j , ""title"" , test -> title ) ; if ( test -> congestion ) cJSON_AddStringToObject ( j , ""congestion"" , test -> congestion ) ; if ( test -> get_server_output ) << << << < HEAD <S2SV_ModStart> ""get_server_output"" , iperf_get_test_get_server_output ( test ) ) ; == == == = cJSON_AddNumberToObject ( j , ""get_server_output"" , iperf_get_test_get_server_output ( test ) ) ; if ( test -> udp_counters_64bit ) cJSON_AddNumberToObject ( j , ""udp_counters_64bit"" , iperf_get_test_udp_counters_64bit ( test ) ) ; if ( test -> no_fq_socket_pacing ) cJSON_AddNumberToObject ( j , ""no_fq_socket_pacing"" , iperf_get_no_fq_socket_pacing ( test ) ) ; <S2SV_ModEnd> <S2SV_ModStart> ""client_version"" , IPERF_VERSION ) ; >> >> >> > ed94082 ... Fix a buffer overflow / heap corruption issue that could occur if a <S2SV_ModEnd> "
5228,"<S2SV_StartBug> if ( timeri -> master ) <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & slave_active_lock , flags ) ; <S2SV_EndBug> ",<S2SV_ModStart> && timeri -> timer ) { spin_lock ( & timeri -> timer -> lock ) ; <S2SV_ModEnd> <S2SV_ModStart> spin_unlock ( & timeri -> timer -> lock ) ; } 
5229,<S2SV_StartBug> spin_lock_irq ( & tu -> qlock ) ; <S2SV_EndBug> <S2SV_StartBug> schedule ( ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & tu -> ioctl_lock ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & tu -> ioctl_lock ) ; <S2SV_EndBug> <S2SV_StartBug> return result > 0 ? result : err ; <S2SV_EndBug> ,<S2SV_ModStart> mutex_lock ( & tu -> ioctl_lock ) ; <S2SV_ModStart> mutex_unlock ( & tu -> ioctl_lock ) ; schedule ( ) ; mutex_lock ( & tu -> ioctl_lock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & tu -> ioctl_lock ) ; 
5230,<S2SV_StartBug> ( target -> doc -> dict == ctxt -> dict ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> && xmlDictOwns ( ctxt -> dict , value ) "
5231,"<S2SV_StartBug> return send ( ts [ thread_handle ] . cmd_fdw , & cmd , sizeof ( cmd ) , 0 ) == sizeof ( cmd ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
5232,"<S2SV_StartBug> if ( sock -> ops ) { <S2SV_EndBug> <S2SV_StartBug> if ( rcu_dereference_protected ( sock -> wq , 1 ) -> fasync_list ) <S2SV_EndBug> ","<S2SV_ModStart> __sock_release ( sock , NULL <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5233,"<S2SV_StartBug> return g_NPN_GetValue_real ( instance , variable , value ) ; <S2SV_EndBug> ",<S2SV_ModStart> case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling : 
5234,<S2SV_StartBug> ps_dec -> u2_total_mbs_coded ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( u1_tfr_n_mb ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ps_dec -> u2_total_mbs_coded += u1_num_mbs ; 
5235,"<S2SV_StartBug> memcpy ( new , ours , sizeof ( * new ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ) ; memset ( dte , 0 , sizeof ( * dte "
5236,"<S2SV_StartBug> c -> tile_stride = FFALIGN ( c -> tile_width * 3 , 16 ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> * 3 
5237,<S2SV_StartBug> ) { <S2SV_EndBug> ,<S2SV_ModStart> && p -> pWin == 0 
5238,<S2SV_StartBug> c -> cblk_style = bytestream2_get_byteu ( & s -> g ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx , ""cblk<S2SV_blank>size<S2SV_blank>><S2SV_blank>64"" ) ; return AVERROR_PATCHWELCOME ; } "
5239,<S2SV_StartBug> kfree ( fpl ) ; <S2SV_EndBug> ,<S2SV_ModStart> free_uid ( fpl -> user ) ; 
5240,"<S2SV_StartBug> BLOCK_SIZE bsize , int use_rd ) { <S2SV_EndBug> <S2SV_StartBug> const int refresh_this_block = candidate_refresh_aq ( cr , mbmi , bsize , use_rd ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mbmi -> segment_id > 0 && ! refresh_this_block ) <S2SV_EndBug> <S2SV_StartBug> if ( mbmi -> segment_id == 1 ) { <S2SV_EndBug> <S2SV_StartBug> cr -> map [ block_index + y * cm -> mi_cols + x ] = new_map_value ; <S2SV_EndBug> <S2SV_StartBug> cpi -> segmentation_map [ block_index + y * cm -> mi_cols + x ] = <S2SV_EndBug> ","<S2SV_ModStart> int64_t rate , int64_t dist , int skip <S2SV_ModEnd> <S2SV_ModStart> rate , dist , bsize <S2SV_ModEnd> <S2SV_ModStart> cyclic_refresh_segment_id_boosted ( mbmi -> segment_id ) ) { mbmi -> segment_id = refresh_this_block ; if ( skip ) mbmi -> segment_id = CR_SEGMENT_ID_BASE ; } if ( cyclic_refresh_segment_id_boosted ( mbmi -> segment_id ) ) { new_map_value = - cr -> time_for_refresh ; } else if ( refresh_this_block ) { if ( cr -> map [ block_index ] <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> int map_offset = <S2SV_ModEnd> <S2SV_ModStart> ; cr -> map [ map_offset <S2SV_ModStart> map_offset ] = mbmi -> segment_id ; if ( ! is_inter_block ( mbmi ) || ! skip ) cr -> last_coded_q_map [ map_offset ] = clamp ( cm -> base_qindex + cr -> qindex_delta [ mbmi -> segment_id ] , 0 , MAXQ ) ; } <S2SV_ModEnd> "
5241,"<S2SV_StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <S2SV_EndBug> <S2SV_StartBug> if ( utf8 ) x *= 3 ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , ""out<S2SV_blank>of<S2SV_blank>memory!\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> while ( * fname == sep ) fname ++ ; <S2SV_EndBug> <S2SV_StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <S2SV_EndBug> <S2SV_StartBug> if ( fname >= fe ) { <S2SV_EndBug> <S2SV_StartBug> x = ( c & 0x1F ) << 6 ; <S2SV_EndBug> <S2SV_StartBug> } while ( x ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) { char * out , * p <S2SV_ModEnd> <S2SV_ModStart> ( out = malloc ( strlen ( fname ) + 1 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> '/' || * fname == '\\\\' <S2SV_ModEnd> <S2SV_ModStart> strcpy ( out , ( * fname ) ? fname : ""x"" ) ; for ( p = out ; * p ; p ++ ) <S2SV_ModEnd> <S2SV_ModStart> p [ 0 ] == '.' && p [ 1 ] == '.' && ( p [ 2 ] == '/' || p [ 2 ] == '\\\\' <S2SV_ModEnd> <S2SV_ModStart> p [ 0 ] = p [ 1 ] = 'x' <S2SV_ModEnd> <S2SV_ModStart> } return out <S2SV_ModEnd> "
5242,"<S2SV_StartBug> ERR ( ""callocing<S2SV_blank>this<S2SV_blank>failed"" ) ; <S2SV_EndBug> <S2SV_StartBug> this -> sd = socket ( AF_INET6 , SOCK_STREAM , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> ERR ( ""sockect<S2SV_blank>open<S2SV_blank>failed"" ) ; <S2SV_EndBug> <S2SV_StartBug> addr . sin6_family = AF_INET6 ; <S2SV_EndBug> <S2SV_StartBug> addr . sin6_addr = in6addr_any ; <S2SV_EndBug> <S2SV_StartBug> ERR ( ""Bind<S2SV_blank>on<S2SV_blank>port<S2SV_blank>failed.<S2SV_blank>"" <S2SV_EndBug> <S2SV_StartBug> ERR ( ""listen<S2SV_blank>failed<S2SV_blank>on<S2SV_blank>socket"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""IPv4:<S2SV_blank>callocing<S2SV_blank>this<S2SV_blank>failed"" <S2SV_ModEnd> <S2SV_ModStart> AF_INET <S2SV_ModEnd> <S2SV_ModStart> ""IPv4<S2SV_blank>socket<S2SV_blank>open<S2SV_blank>failed"" ) ; goto error ; } struct sockaddr_in <S2SV_ModEnd> <S2SV_ModStart> sin_family = AF_INET ; addr . sin_port <S2SV_ModEnd> <S2SV_ModStart> sin_addr . s_addr = htonl ( 0x7F000001 ) <S2SV_ModEnd> <S2SV_ModStart> ""IPv4<S2SV_blank>bind<S2SV_blank>on<S2SV_blank>port<S2SV_blank>failed.<S2SV_blank>"" <S2SV_ModEnd> <S2SV_ModStart> ""IPv4<S2SV_blank>listen<S2SV_blank>failed<S2SV_blank>on<S2SV_blank>socket"" <S2SV_ModEnd> "
5243,<S2SV_StartBug> redisAssert ( server . vm_enabled ) ; <S2SV_EndBug> <S2SV_StartBug> server . vm_blocked_clients -- ; <S2SV_EndBug> ,<S2SV_ModStart> ds_enabled <S2SV_ModEnd> <S2SV_ModStart> cache_blocked_clients <S2SV_ModEnd> 
5244,"<S2SV_StartBug> void oz_hcd_get_desc_cnf ( void * hport , u8 req_id , int status , const u8 * desc , <S2SV_EndBug> <S2SV_StartBug> int length , int offset , int total_size ) <S2SV_EndBug> <S2SV_StartBug> int copy_len ; <S2SV_EndBug> <S2SV_StartBug> int required_size = urb -> transfer_buffer_length ; <S2SV_EndBug> ","<S2SV_ModStart> u8 <S2SV_ModEnd> <S2SV_ModStart> u8 length , u16 offset , u16 <S2SV_ModEnd> <S2SV_ModStart> unsigned <S2SV_ModStart> unsigned "
5245,<S2SV_StartBug> u8 * data = NULL ; <S2SV_EndBug> <S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> hdr . flags & ~ ( VFIO_IRQ_SET_DATA_TYPE_MASK | <S2SV_EndBug> <S2SV_StartBug> if ( ! ( hdr . flags & VFIO_IRQ_SET_DATA_NONE ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( hdr . flags & VFIO_IRQ_SET_DATA_BOOL ) <S2SV_EndBug> <S2SV_StartBug> hdr . start >= max || hdr . start + hdr . count > max ) <S2SV_EndBug> ,"<S2SV_ModStart> size_t size ; <S2SV_ModStart> max , <S2SV_ModStart> count >= ( U32_MAX - hdr . start ) || hdr . <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ) return - EINVAL ; switch ( hdr . flags & VFIO_IRQ_SET_DATA_TYPE_MASK ) { case VFIO_IRQ_SET_DATA_NONE : size = 0 ; break ; case VFIO_IRQ_SET_DATA_BOOL : size = sizeof ( uint8_t ) ; break ; case VFIO_IRQ_SET_DATA_EVENTFD : size = sizeof ( int32_t ) ; break ; default : return - EINVAL ; } if ( size ) { if ( hdr . argsz - minsz < hdr . count * size "
5246,<S2SV_StartBug> if ( envs [ h_env -> envc ] . env == HTML_DL_COMPACT ) { <S2SV_EndBug> ,<S2SV_ModStart> h_env -> envc == 0 || ( h_env -> envc_real < h_env -> nenv && envs [ h_env -> envc ] . env != HTML_DL && envs [ h_env -> envc ] . env != HTML_DL_COMPACT ) ) { PUSH_ENV ( HTML_DL ) ; } if ( 
5247,<S2SV_StartBug> while ( buflen > 0 ) { <S2SV_EndBug> <S2SV_StartBug> return union_desc ; <S2SV_EndBug> ,"<S2SV_ModStart> >= sizeof ( * union_desc ) ) { union_desc = ( struct usb_cdc_union_desc * ) buf ; if ( union_desc -> bLength > buflen ) { dev_err ( & intf -> dev , ""Too<S2SV_blank>large<S2SV_blank>descriptor\\n"" ) ; return NULL ; } <S2SV_ModEnd> <S2SV_ModStart> if ( union_desc -> bLength >= sizeof ( * union_desc ) ) return union_desc ; dev_err ( & intf -> dev , ""Union<S2SV_blank>descriptor<S2SV_blank>to<S2SV_blank>short<S2SV_blank>(%d<S2SV_blank>vs<S2SV_blank>%zd\\n)"" , union_desc -> bLength , sizeof ( * union_desc ) ) ; return NULL <S2SV_ModEnd> "
5248,<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> alt = & gspca_dev -> dev -> actconfig -> intf_cache [ 0 ] -> altsetting [ 1 ] ; <S2SV_EndBug> ,<S2SV_ModStart> struct usb_interface_cache * intfc ; <S2SV_ModStart> intfc = <S2SV_ModEnd> <S2SV_ModStart> ; if ( intfc -> num_altsetting < 2 ) return - ENODEV ; alt = & intfc <S2SV_ModStart> ; if ( alt -> desc . bNumEndpoints < 1 ) return - ENODEV 
5249,<S2SV_StartBug> head_shift = ( F_SECT_PER_TRACK + 5 ) / 6 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! F_SECT_PER_TRACK ) return ; 
5250,"<S2SV_StartBug> if ( copy_from_user ( & sas , optval , len ) ) <S2SV_EndBug> <S2SV_StartBug> len = min_t ( size_t , len , sizeof ( sas ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> len = min_t ( size_t , len , sizeof ( sas ) ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
5251,"<S2SV_StartBug> if ( buf ) <S2SV_EndBug> <S2SV_StartBug> _copy_from_pages ( buf , pages , res . acl_data_offset , res . acl_len ) ; <S2SV_EndBug> ",<S2SV_ModStart> { if ( res . acl_len > buflen ) { ret = - ERANGE ; goto out_free ; } <S2SV_ModStart> } 
5252,"<S2SV_StartBug> pid_t child = fork ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rv ) <S2SV_EndBug> <S2SV_StartBug> fs_logger2 ( ""clone"" , dest ) ; <S2SV_EndBug> ",<S2SV_ModStart> copy_file_as_user <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5253,"<S2SV_StartBug> if ( copy_from_user ( buf , ( void * ) arg , hdr . size_in ) ) { <S2SV_EndBug> ","<S2SV_ModStart> * ( ( struct vbg_ioctl_hdr * ) buf ) = hdr ; <S2SV_ModStart> + sizeof ( hdr ) <S2SV_ModStart> + sizeof ( hdr ) , hdr . size_in - sizeof ( hdr ) <S2SV_ModEnd> "
5254,"<S2SV_StartBug> static int bson_string_is_db_ref ( const unsigned char * string , const int length ) { <S2SV_EndBug> ",<S2SV_ModStart> size_t <S2SV_ModEnd> 
5255,"<S2SV_StartBug> # define ThrowDCMException ( exception , message ) { if ( info . scale != ( Quantum * ) NULL ) info . scale = ( Quantum * ) RelinquishMagickMemory ( info . scale ) ; if ( data != ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap != ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( bluemap != ( int * ) NULL ) bluemap = ( int * ) RelinquishMagickMemory ( bluemap ) ; if ( greenmap != ( int * ) NULL ) greenmap = ( int * ) RelinquishMagickMemory ( greenmap ) ; if ( redmap != ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( stream_info -> offsets != ( ssize_t * ) NULL ) stream_info -> offsets = ( ssize_t * ) RelinquishMagickMemory ( stream_info -> offsets ) ; if ( stream_info != ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> ( void ) fputc ( c , file ) ; <S2SV_EndBug> ",<S2SV_ModStart> \\\n{ <S2SV_ModEnd> <S2SV_ModStart> \\\n} <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> != c ) break 
5256,"<S2SV_StartBug> static int detect_flash ( const struct twopass_rc * twopass , int offset ) { <S2SV_EndBug> <S2SV_StartBug> FIRSTPASS_STATS next_frame ; <S2SV_EndBug> <S2SV_StartBug> if ( read_frame_stats ( twopass , & next_frame , offset ) != EOF ) { <S2SV_EndBug> <S2SV_StartBug> if ( next_frame . pcnt_second_ref > next_frame . pcnt_inter && <S2SV_EndBug> <S2SV_StartBug> next_frame . pcnt_second_ref >= 0.5 ) <S2SV_EndBug> ",<S2SV_ModStart> TWO_PASS <S2SV_ModEnd> <S2SV_ModStart> const FIRSTPASS_STATS * const next_frame = <S2SV_ModEnd> <S2SV_ModStart> offset ) ; return next_frame != NULL && next_frame -> <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart> -> <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5257,<S2SV_StartBug> } else <S2SV_EndBug> ,"<S2SV_ModStart> else if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) && ! in_group_p ( inode -> i_gid ) && ! capable_wrt_inode_uidgid ( dir , CAP_FSETID ) ) mode &= ~ S_ISGID ; "
5258,<S2SV_StartBug> cl -> wsctx = ( wsCtx * ) wsctx ; <S2SV_EndBug> ,<S2SV_ModStart> hybiDecodeCleanup ( wsctx ) ; 
5259,<S2SV_StartBug> out_release_nounlock : <S2SV_EndBug> ,<S2SV_ModStart> if ( vm_shared ) unlock_page ( page ) ; out_release_nounlock : <S2SV_ModEnd> 
5260,"<S2SV_StartBug> DEBUG ( ""snmp<S2SV_blank>plugin:<S2SV_blank>all<S2SV_blank>variables<S2SV_blank>have<S2SV_blank>left<S2SV_blank>their<S2SV_blank>subtree"" ) ; <S2SV_EndBug> <S2SV_StartBug> req = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( req != NULL ) <S2SV_EndBug> ",<S2SV_ModStart> ) ; snmp_free_pdu ( req <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5261,<S2SV_StartBug> int m ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( n < 0 ) { jas_deprecated ( ""negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_pad"" ) ; } "
5262,<S2SV_StartBug> if ( section -> cipher_list ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! section -> option . client ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> # if OPENSSL_VERSION_NUMBER >= 0x10100000L if ( section -> security_level >= 0 ) { SSL_CTX_set_security_level ( section -> ctx , section -> security_level ) ; s_log ( LOG_INFO , ""User-specified<S2SV_blank>security<S2SV_blank>level<S2SV_blank>set:<S2SV_blank>%d"" , section -> security_level ) ; } else if ( SSL_CTX_get_security_level ( section -> ctx ) < DEFAULT_SECURITY_LEVEL ) { SSL_CTX_set_security_level ( section -> ctx , DEFAULT_SECURITY_LEVEL ) ; s_log ( LOG_INFO , ""stunnel<S2SV_blank>default<S2SV_blank>security<S2SV_blank>level<S2SV_blank>set:<S2SV_blank>%d"" , DEFAULT_SECURITY_LEVEL ) ; } else { s_log ( LOG_INFO , ""OpenSSL<S2SV_blank>security<S2SV_blank>level<S2SV_blank>is<S2SV_blank>used:<S2SV_blank>%d"" , SSL_CTX_get_security_level ( section -> ctx ) ) ; } # endif <S2SV_ModStart> # ifndef OPENSSL_NO_TLSEXT <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5263,"<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>[bad<S2SV_blank>length<S2SV_blank>%u]"" , length ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""<S2SV_blank>%s"" , ipaddr_string ( ndo , & cp [ len ] ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> ( 0 ) <S2SV_ModStart> ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> ND_TCHECK2 ( cp [ len ] , 4 ) ; <S2SV_ModStart> return ( 0 ) ; trunc : return ( - 1 ) ; "
5264,<S2SV_StartBug> cpi -> this_frame_target += ( ( cpi -> current_gf_interval - 1 ) * Adjustment ) ; <S2SV_EndBug> ,<S2SV_ModStart> { Adjustment = <S2SV_ModEnd> <S2SV_ModStart> ; if ( Adjustment > ( 10 * cpi -> this_frame_target ) / 100 ) Adjustment = ( 10 * cpi -> this_frame_target ) / 100 ; cpi -> this_frame_target += Adjustment ; } <S2SV_ModEnd> 
5265,"<S2SV_StartBug> if ( check_anon ( kdc_active_realm , request -> client , request -> server ) != 0 ) { <S2SV_EndBug> ",<S2SV_ModStart> client . princ <S2SV_ModEnd> 
5266,<S2SV_StartBug> facilities_len -= len + 1 ; <S2SV_EndBug> <S2SV_StartBug> facilities_len -= len + 1 ; <S2SV_EndBug> ,<S2SV_ModStart> if ( len < 0 ) return 0 ; <S2SV_ModStart> if ( len < 0 ) return 0 ; 
5267,"<S2SV_StartBug> if ( ! capable ( CAP_NET_ADMIN ) ) <S2SV_EndBug> <S2SV_StartBug> return - EPERM ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( arg , user , get_arglen [ GET_CMDID ( cmd ) ] ) != 0 ) <S2SV_EndBug> ",<S2SV_ModStart> unsigned int copylen ; <S2SV_ModStart> ; if ( cmd < IP_VS_BASE_CTL || cmd > IP_VS_SO_GET_MAX ) return - EINVAL <S2SV_ModStart> copylen = get_arglen [ GET_CMDID ( cmd ) ] ; if ( copylen > 128 ) return - EINVAL ; <S2SV_ModStart> copylen <S2SV_ModEnd> 
5268,<S2SV_StartBug> opt_type = * bp ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ! ND_TTEST2 ( * bp , 2 ) ) { ND_PRINT ( ( ndo , ""<S2SV_blank>[|OPT]"" ) ) ; return ; } "
5269,"<S2SV_StartBug> int * returnrate , int64_t * returndist , <S2SV_EndBug> <S2SV_StartBug> int rate_y = 0 , rate_uv = 0 , rate_y_tokenonly = 0 , rate_uv_tokenonly = 0 ; <S2SV_EndBug> <S2SV_StartBug> int64_t dist_y = 0 , dist_uv = 0 , tx_cache [ TX_MODES ] = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize >= BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> & dist_y , & y_skip , bsize , tx_cache , <S2SV_EndBug> <S2SV_StartBug> * returnrate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> max_uv_tx_size = get_uv_tx_size_impl ( xd -> mi [ 0 ] -> mbmi . tx_size , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> & dist_uv , & uv_skip , bsize , max_uv_tx_size ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> * returnrate = rate_y + rate_uv - rate_y_tokenonly - rate_uv_tokenonly + <S2SV_EndBug> <S2SV_StartBug> * returndist = dist_y + dist_uv ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( ctx -> tx_rd_diff ) ; <S2SV_EndBug> ","<S2SV_ModStart> RD_COST * rd_cost , <S2SV_ModEnd> <S2SV_ModStart> struct macroblockd_plane * const pd = xd -> plane ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> xd -> mi [ 0 ] -> mbmi . ref_frame [ 1 ] = NONE ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rd_cost -> rate <S2SV_ModEnd> <S2SV_ModStart> } } else { y_skip = 0 ; if ( rd_pick_intra_sub_8x8_y_mode ( cpi , x , & rate_y , & rate_y_tokenonly , & dist_y , best_rd ) >= best_rd ) { rd_cost -> rate = INT_MAX ; return ; } <S2SV_ModStart> , pd [ 1 ] . subsampling_x , pd [ 1 ] . subsampling_y <S2SV_ModStart> MAX ( BLOCK_8X8 , bsize ) , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rd_cost -> rate <S2SV_ModEnd> <S2SV_ModStart> rd_cost -> dist <S2SV_ModEnd> <S2SV_ModStart> } else { rd_cost -> rate = rate_y + rate_uv + vp9_cost_bit ( vp9_get_skip_prob ( cm , xd ) , 0 ) ; rd_cost -> dist = dist_y + dist_uv ; } ctx -> mic = * xd -> mi [ 0 ] ; ctx -> mbmi_ext = * x -> mbmi_ext ; rd_cost -> rdcost = RDCOST ( x -> rdmult , x -> rddiv , rd_cost -> rate , rd_cost -> dist ) <S2SV_ModEnd> "
5270,<S2SV_StartBug> kern_msg -> msg_name = kern_address ; <S2SV_EndBug> ,<S2SV_ModStart> if ( kern_msg -> msg_name ) 
5271,"<S2SV_StartBug> ( void ) fputc ( c , file ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> != c ) break 
5272,"<S2SV_StartBug> pgprot_t prot = __get_dma_pgprot ( attrs , pgprot_kernel ) ; <S2SV_EndBug> ",<S2SV_ModStart> PAGE_KERNEL <S2SV_ModEnd> 
5273,<S2SV_StartBug> assert ( bidx <= PCI_BARMAX ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( pdi -> bar [ bidx ] . type == PCIBAR_MEM32 || <S2SV_EndBug> <S2SV_StartBug> pdi -> bar [ bidx ] . type == PCIBAR_MEM64 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( addr + size > <S2SV_ModEnd> <S2SV_ModStart> addr + <S2SV_ModEnd> <S2SV_ModStart> size ) { printf ( ""%s,<S2SV_blank>Out<S2SV_blank>of<S2SV_blank>emulated<S2SV_blank>memory<S2SV_blank>range.\\n"" , __func__ ) ; return - ESRCH ; } <S2SV_ModEnd> "
5274,<S2SV_StartBug> if ( sk != asoc -> base . sk ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5275,<S2SV_StartBug> if ( image_info -> ping ) goto Finish ; <S2SV_EndBug> ,"<S2SV_ModStart> != MagickFalse <S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
5276,<S2SV_StartBug> for ( col = 0 ; col < imagewidth ; col += tw ) { <S2SV_EndBug> ,<S2SV_ModStart> && colb < imagew 
5277,<S2SV_StartBug> number_planes_filled * sizeof ( * pixels ) ) ; <S2SV_EndBug> <S2SV_StartBug> pixel_info_length = image -> columns * image -> rows * number_planes_filled ; <S2SV_EndBug> ,"<S2SV_ModStart> MagickMax ( number_planes_filled , 4 ) <S2SV_ModEnd> <S2SV_ModStart> MagickMax ( number_planes_filled , 4 ) <S2SV_ModEnd> "
5278,<S2SV_StartBug> m -> msg_name = address ; <S2SV_EndBug> ,<S2SV_ModStart> if ( m -> msg_name ) 
5279,<S2SV_StartBug> * sent = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5280,"
","
"
5281,<S2SV_StartBug> u8 smac [ ETH_ALEN ] ; <S2SV_EndBug> <S2SV_StartBug> if ( is_iboe ) { <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & lock ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5282,"<S2SV_StartBug> static int t220_frontend_attach ( struct dvb_usb_adapter * d ) <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x86 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x80 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> msleep ( 50 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> err ( ""command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed."" ) ; <S2SV_EndBug> <S2SV_StartBug> d -> fe_adap [ 0 ] . fe = dvb_attach ( cxd2820r_attach , & cxd2820r_config , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( d -> fe_adap [ 0 ] . fe != NULL ) { <S2SV_EndBug> <S2SV_StartBug> if ( dvb_attach ( tda18271_attach , d -> fe_adap [ 0 ] . fe , 0x60 , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap , & tda18271_config ) ) { <S2SV_EndBug> ","<S2SV_ModStart> adap ) { struct dvb_usb_device * d = adap -> dev ; struct dw2102_state * state = d -> priv ; mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x87 ; state -> data [ 2 ] = 0x0 ; if ( dvb_usb_generic_rw ( d , state -> data , 3 , state -> data , 1 , 0 ) < 0 ) err ( ""command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed."" ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x86 ; state -> data [ 2 ] = 1 <S2SV_ModEnd> <S2SV_ModStart> , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data [ 1 ] = 0x80 ; state -> data <S2SV_ModEnd> <S2SV_ModStart> 0 <S2SV_ModEnd> <S2SV_ModStart> , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> msleep ( 50 ) ; state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> 1 <S2SV_ModEnd> <S2SV_ModStart> , state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data [ 0 ] = 0x51 <S2SV_ModEnd> <S2SV_ModStart> , state -> data , 1 , state -> data <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_unlock ( & d -> data_mutex ) ; adap <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> adap <S2SV_ModEnd> <S2SV_ModStart> adap <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5283,"<S2SV_StartBug> size = DIV_ROUND_UP ( size , BUF_PAGE_SIZE ) ; <S2SV_EndBug> ","<S2SV_ModStart> nr_pages = DIV_ROUND_UP ( size , BUF_PAGE_SIZE ) ; if ( nr_pages < 2 ) nr_pages = 2 ; size = nr_pages * BUF_PAGE_SIZE <S2SV_ModEnd> "
5284,<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 2 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , ""horAcc16"" , ""%s"" , ""cc%(2*stride))!=0"" ) ; return 0 ; } <S2SV_ModEnd> <S2SV_ModStart> return 1 ; "
5285,<S2SV_StartBug> if ( ! * passwd || ! * user -> passwd ) <S2SV_EndBug> ,"<S2SV_ModStart> user ) { slog_error ( client , ""Password<S2SV_blank>packet<S2SV_blank>before<S2SV_blank>auth<S2SV_blank>packet?"" ) ; return false ; } if ( ! "
5286,<S2SV_StartBug> char * buf ; <S2SV_EndBug> ,"<S2SV_ModStart> struct stream packet = * s ; if ( ! s_check ( s ) ) { rdp_protocol_error ( ""lspci_process(),<S2SV_blank>stream<S2SV_blank>is<S2SV_blank>in<S2SV_blank>unstable<S2SV_blank>state"" , & packet ) ; } "
5287,<S2SV_StartBug> for ( col = 0 ; col < imagewidth ; col += tw ) { <S2SV_EndBug> ,<S2SV_ModStart> && colb < imagew 
5288,"<S2SV_StartBug> write_webm_file_footer ( & stream -> ebml , stream -> hash ) ; <S2SV_EndBug> ",<S2SV_ModStart> ) <S2SV_ModEnd> 
5289,"<S2SV_StartBug> static void encode_uniform ( vp9_writer * w , int v ) { <S2SV_EndBug> <S2SV_StartBug> vp9_write_literal ( w , v , l - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_literal ( w , m + ( ( v - m ) >> 1 ) , l - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_literal ( w , ( v - m ) & 1 , 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart> vpx_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_write_literal <S2SV_ModEnd> <S2SV_ModStart> vpx_write_literal <S2SV_ModEnd> 
5290,"<S2SV_StartBug> k -> get_config ( vdev , vdev -> config ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart>  <S2SV_ModEnd> 
5291,"<S2SV_StartBug> strcpy ( link_info . str , nla_data ( link [ TIPC_NLA_LINK_NAME ] ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> nla_strlcpy <S2SV_ModEnd> <S2SV_ModStart> , TIPC_MAX_LINK_NAME "
5292,"<S2SV_StartBug> gpio_dev -> pctrl = pinctrl_register ( & amd_pinctrl_desc , <S2SV_EndBug> <S2SV_StartBug> & pdev -> dev , gpio_dev ) ; <S2SV_EndBug> <S2SV_StartBug> goto out1 ; <S2SV_EndBug> <S2SV_StartBug> out1 : <S2SV_EndBug> ","<S2SV_ModStart> devm_pinctrl_register ( & pdev -> dev , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> return ret <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5293,"<S2SV_StartBug> if ( mount ( console -> name , lxcpath , ""none"" , MS_BIND , 0 ) ) { <S2SV_EndBug> ","<S2SV_ModStart> safe_mount ( console -> name , lxcpath , ""none"" , MS_BIND , 0 , rootfs -> mount ) ) { ERROR ( ""failed<S2SV_blank>to<S2SV_blank>mount<S2SV_blank>\'%s\'<S2SV_blank>on<S2SV_blank>\'%s\'"" , <S2SV_ModEnd> <S2SV_ModStart> ) ; return - 1 ; } ret = snprintf ( lxcpath , sizeof ( lxcpath ) , ""%s/console"" , ttydir ) ; if ( ret >= sizeof ( lxcpath ) ) { ERROR ( ""lxc/console<S2SV_blank>path<S2SV_blank>too<S2SV_blank>long"" ) ; return - 1 ; } ret = symlink ( lxcpath , path ) ; if ( ret ) { SYSERROR ( ""failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>symlink<S2SV_blank>for<S2SV_blank>console"" ) ; return - 1 ; } INFO ( ""console<S2SV_blank>has<S2SV_blank>been<S2SV_blank>setup<S2SV_blank>on<S2SV_blank>%s"" , lxcpath ) ; return 0 <S2SV_ModEnd> "
5294,"<S2SV_StartBug> static void nsc_decode ( NSC_CONTEXT * context ) <S2SV_EndBug> <S2SV_StartBug> UINT16 rw = ROUND_UP_TO ( context -> width , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> BYTE shift = context -> ColorLossLevel - 1 ; <S2SV_EndBug> <S2SV_StartBug> BYTE * bmpdata = context -> BitmapData ; <S2SV_EndBug> <S2SV_StartBug> * bmpdata ++ = MINMAX ( b_val , 0 , 0xFF ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> BOOL <S2SV_ModEnd> <S2SV_ModStart> ; BYTE shift ; BYTE * bmpdata ; size_t pos = 0 ; if ( ! context ) return FALSE ; rw <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; if ( ! bmpdata ) return FALSE <S2SV_ModStart> if ( pos + 4 > context -> BitmapDataLength ) return FALSE ; pos += 4 ; <S2SV_ModStart> return TRUE ; 
5295,"<S2SV_StartBug> static void atomic2gen ( lua_State * L , global_State * g ) { <S2SV_EndBug> ",<S2SV_ModStart> g -> gcstate = GCSswpallgc ; 
5296,"<S2SV_StartBug> vp8_decrypt_cb * decrypt_cb , <S2SV_EndBug> ",<S2SV_ModStart> vpx_decrypt_cb <S2SV_ModEnd> 
5297,<S2SV_StartBug> if ( REMAIN > INT_MAX ) <S2SV_EndBug> ,<S2SV_ModStart> == 0 || REMAIN 
5298,<S2SV_StartBug> regs [ insn -> dst_reg ] . var_off = tnum_cast ( <S2SV_EndBug> <S2SV_StartBug> __update_reg_bounds ( & regs [ insn -> dst_reg ] ) ; <S2SV_EndBug> ,"<S2SV_ModStart> coerce_reg_to_size <S2SV_ModEnd> <S2SV_ModStart> , 4 "
5299,"<S2SV_StartBug> WORD32 ih264d_end_of_pic ( dec_struct_t * ps_dec , <S2SV_EndBug> <S2SV_StartBug> WORD32 ret ; <S2SV_EndBug> <S2SV_StartBug> ps_dec -> u2_total_mbs_coded = 0 ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5300,<S2SV_StartBug> if ( ! file ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug> ,<S2SV_ModStart> || count > OE_SSIZE_MAX <S2SV_ModStart> if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } 
5301,"<S2SV_StartBug> DRM_DEBUG ( ""clip<S2SV_blank>rectangles<S2SV_blank>are<S2SV_blank>only<S2SV_blank>valid<S2SV_blank>with<S2SV_blank>the<S2SV_blank>render<S2SV_blank>ring\\n"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; return - EINVAL ; } if ( args -> num_cliprects > UINT_MAX / sizeof ( * cliprects ) ) { DRM_DEBUG ( ""execbuf<S2SV_blank>with<S2SV_blank>%u<S2SV_blank>cliprects\\n"" , args -> num_cliprects "
5302,<S2SV_StartBug> long tmp = * old ; <S2SV_EndBug> <S2SV_StartBug> return * old == tmp ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> if ( tmp == * old ) { * old = new ; return 1 ; } else { * old = tmp ; return 0 ; } <S2SV_ModEnd> 
5303,"<S2SV_StartBug> char buf [ 32 ] , * e ; <S2SV_EndBug> ",<S2SV_ModStart> 50 <S2SV_ModEnd> 
5304,<S2SV_StartBug> nfcf_poll -> sensf_res_len = * data ++ ; <S2SV_EndBug> ,"<S2SV_ModStart> min_t ( __u8 , <S2SV_ModStart> , NFC_SENSF_RES_MAXSIZE ) "
5305,<S2SV_StartBug> mutex_unlock ( & file -> mut ) ; <S2SV_EndBug> ,"<S2SV_ModStart> mutex_lock ( & mut ) ; idr_replace ( & multicast_idr , mc , mc -> id ) ; mutex_unlock ( & mut ) ; "
5306,"<S2SV_StartBug> if ( db -> mallocFailed || sqliteProcessJoin ( pParse , p ) ) { <S2SV_EndBug> ",<S2SV_ModStart> pParse -> nErr || 
5307,"<S2SV_StartBug> u64 msr_data ; <S2SV_EndBug> <S2SV_StartBug> cs . dpl = 3 ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = reg_read ( ctxt , VCPU_REGS_RDX ) ; <S2SV_EndBug> <S2SV_StartBug> * reg_write ( ctxt , VCPU_REGS_RSP ) = reg_read ( ctxt , VCPU_REGS_RCX ) ; <S2SV_EndBug> ","<S2SV_ModStart> , rcx , rdx <S2SV_ModStart> rcx = reg_read ( ctxt , VCPU_REGS_RCX ) ; rdx = reg_read ( ctxt , VCPU_REGS_RDX ) ; <S2SV_ModStart> if ( is_noncanonical_address ( rcx ) || is_noncanonical_address ( rdx ) ) return emulate_gp ( ctxt , 0 ) ; <S2SV_ModStart> rdx <S2SV_ModEnd> <S2SV_ModStart> rcx <S2SV_ModEnd> "
5308,"<S2SV_StartBug> struct packet_sock * po = pkt_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! po -> running ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> return - EALREADY ; <S2SV_EndBug> <S2SV_StartBug> po -> rollover = kzalloc ( sizeof ( * po -> rollover ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! po -> rollover ) <S2SV_EndBug> <S2SV_StartBug> atomic_long_set ( & po -> rollover -> num , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> atomic_long_set ( & po -> rollover -> num_huge , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> atomic_long_set ( & po -> rollover -> num_failed , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & fanout_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> if ( err ) { <S2SV_EndBug> ",<S2SV_ModStart> packet_rollover * rollover = NULL ; struct <S2SV_ModStart> mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; <S2SV_ModStart> goto out ; err = - EALREADY <S2SV_ModEnd> <S2SV_ModStart> goto out <S2SV_ModEnd> <S2SV_ModStart> err = - ENOMEM ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rollover ) goto out <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> po -> rollover = rollover ; } <S2SV_ModEnd> <S2SV_ModStart> if ( err && rollover ) { kfree ( rollover ) ; po -> rollover = NULL ; } <S2SV_ModStart>  <S2SV_ModEnd> 
5309,<S2SV_StartBug> return fd ; <S2SV_EndBug> ,<S2SV_ModStart> sr -> fd_is_fdt = MK_TRUE ; 
5310,"<S2SV_StartBug> int vp8_denoiser_allocate ( VP8_DENOISER * denoiser , int width , int height ) <S2SV_EndBug> <S2SV_StartBug> assert ( denoiser ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( denoiser -> yv12_running_avg [ i ] . buffer_alloc , 0 , <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( denoiser -> yv12_mc_running_avg . buffer_alloc , 0 , <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> , int num_mb_rows , int num_mb_cols , int mode <S2SV_ModStart> ; denoiser -> num_mb_cols = num_mb_cols <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> memset <S2SV_ModEnd> <S2SV_ModStart> if ( vp8_yv12_alloc_frame_buffer ( & denoiser -> yv12_last_source , width , height , VP8BORDERINPIXELS ) < 0 ) { vp8_denoiser_free ( denoiser ) ; return 1 ; } memset ( denoiser -> yv12_last_source . buffer_alloc , 0 , denoiser -> yv12_last_source . frame_size ) ; denoiser -> denoise_state = vpx_calloc ( ( num_mb_rows * num_mb_cols ) , 1 ) ; memset ( denoiser -> denoise_state , 0 , ( num_mb_rows * num_mb_cols ) ) ; vp8_denoiser_set_parameters ( denoiser , mode ) ; denoiser -> nmse_source_diff = 0 ; denoiser -> nmse_source_diff_count = 0 ; denoiser -> qp_avg = 0 ; denoiser -> qp_threshold_up = 80 ; denoiser -> qp_threshold_down = 128 ; denoiser -> bitrate_threshold = 400000 ; denoiser -> threshold_aggressive_mode = 80 ; if ( width * height > 1280 * 720 ) { denoiser -> bitrate_threshold = 3000000 ; denoiser -> threshold_aggressive_mode = 200 ; } else if ( width * height > 960 * 540 ) { denoiser -> bitrate_threshold = 1200000 ; denoiser -> threshold_aggressive_mode = 120 ; } else if ( width * height > 640 * 480 ) { denoiser -> bitrate_threshold = 600000 ; denoiser -> threshold_aggressive_mode = 100 ; } return <S2SV_ModEnd> "
5311,<S2SV_StartBug> struct mct_u232_private * priv ; <S2SV_EndBug> <S2SV_StartBug> priv -> read_urb = port -> serial -> port [ 1 ] -> interrupt_in_urb ; <S2SV_EndBug> ,"<S2SV_ModStart> usb_serial * serial = port -> serial ; struct <S2SV_ModStart> if ( ! serial -> port [ 1 ] || ! serial -> port [ 1 ] -> interrupt_in_urb ) { dev_err ( & port -> dev , ""expected<S2SV_blank>endpoint<S2SV_blank>missing\\n"" ) ; return - ENODEV ; } <S2SV_ModStart>  <S2SV_ModEnd> "
5312,"<S2SV_StartBug> ptr = sshpkt_ptr ( ssh , & dlen ) ; <S2SV_EndBug> ","<S2SV_ModStart> ssh_dispatch_set ( ssh , SSH2_MSG_KEXINIT , NULL ) ; "
5313,<S2SV_StartBug> if ( ( temp_buffer & 0xffffff00 ) != 0x100 ) <S2SV_EndBug> <S2SV_StartBug> else if ( temp_buffer < 0x120 ) <S2SV_EndBug> <S2SV_StartBug> else if ( temp_buffer < 0x130 ) <S2SV_EndBug> ,<S2SV_ModStart> temp_buffer & 0xfffffe00 ) continue ; if ( temp_buffer < 2 <S2SV_ModEnd> <S2SV_ModStart> >= 0x100 && temp_buffer <S2SV_ModStart> temp_buffer >= 0x120 && 
5314,"<S2SV_StartBug> unsigned short sel ; <S2SV_EndBug> <S2SV_StartBug> rc = load_segment_descriptor ( ctxt , sel , VCPU_SREG_CS ) ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = 0 ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ctxt -> _eip , ctxt -> src . valptr , ctxt -> op_bytes ) ; <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug> ","<S2SV_ModStart> , old_sel ; struct desc_struct old_desc , new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; u8 cpl = ctxt -> ops -> cpl ( ctxt ) ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> get_segment ( ctxt , & old_sel , & old_desc , NULL , VCPU_SREG_CS ) <S2SV_ModStart> __load_segment_descriptor <S2SV_ModEnd> <S2SV_ModStart> , cpl , false , & new_desc <S2SV_ModStart> rc = assign_eip_far ( ctxt <S2SV_ModEnd> <S2SV_ModStart> val , new_desc . l ) ; if ( rc != X86EMUL_CONTINUE ) { WARN_ON ( ! ctxt -> mode != X86EMUL_MODE_PROT64 ) ; ops -> set_segment ( ctxt , old_sel , & old_desc , 0 , VCPU_SREG_CS <S2SV_ModEnd> <S2SV_ModStart> rc ; } return rc <S2SV_ModEnd> "
5315,<S2SV_StartBug> if ( x & ( 1 << i ) ) return i ; <S2SV_EndBug> ,<S2SV_ModStart> 1U << ( unsigned int ) <S2SV_ModEnd> 
5316,"<S2SV_StartBug> or_circuit_t * or_circ = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! CIRCUIT_IS_ORIGIN ( circ ) ) <S2SV_EndBug> <S2SV_StartBug> or_circ = TO_OR_CIRCUIT ( circ ) ; <S2SV_EndBug> <S2SV_StartBug> relay_send_end_cell_from_edge ( rh . stream_id , circ , end_reason , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> END_STREAM_REASON_NOTDIRECTORY , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> END_STREAM_REASON_INTERNAL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> END_STREAM_REASON_EXITPOLICY , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> origin_circuit_t * origin_circ = TO_ORIGIN_CIRCUIT ( circ ) ; <S2SV_EndBug> <S2SV_StartBug> origin_circ -> cpath -> prev ) ; <S2SV_EndBug> ",<S2SV_ModStart> = NULL ; origin_circuit_t * origin_circ = NULL ; crypt_path_t * layer_hint <S2SV_ModStart> { <S2SV_ModStart> } else { tor_assert ( circ -> purpose == CIRCUIT_PURPOSE_S_REND_JOINED ) ; origin_circ = TO_ORIGIN_CIRCUIT ( circ ) ; layer_hint = origin_circ -> cpath -> prev ; } <S2SV_ModStart> layer_hint <S2SV_ModEnd> <S2SV_ModStart> layer_hint <S2SV_ModEnd> <S2SV_ModStart> layer_hint <S2SV_ModEnd> <S2SV_ModStart> layer_hint <S2SV_ModEnd> <S2SV_ModStart> tor_assert ( origin_circ <S2SV_ModEnd> <S2SV_ModStart> layer_hint <S2SV_ModEnd> 
5317,<S2SV_StartBug> struct unix_sock * u = unix_sk ( sk ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5318,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( ! ret && xsave -> header . xcomp_bv ) ret = - EINVAL ; 
5319,<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> struct iattr iattr ; retval = posix_acl_update_mode ( inode , & iattr . ia_mode , & acl ) ; if ( retval <S2SV_ModEnd> <S2SV_ModStart> if ( ! acl ) { value = NULL ; size = 0 ; } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5320,<S2SV_StartBug> # ifdef __linux <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5321,<S2SV_StartBug> if ( num < 0 ) return ONIGERR_TOO_BIG_NUMBER ; <S2SV_EndBug> ,<S2SV_ModStart> || num >= 256 
5322,<S2SV_StartBug> INST_HANDLER ( lds ) { <S2SV_EndBug> ,<S2SV_ModStart> if ( len < 4 ) { return ; } 
5323,<S2SV_StartBug> for ( col = 0 ; col < imagewidth ; col += tw ) { <S2SV_EndBug> ,<S2SV_ModStart> && colb < imagew 
5324,<S2SV_StartBug> } else <S2SV_EndBug> ,"<S2SV_ModStart> if ( len < 0 ) { log_ppp_warn ( ""radius:packet<S2SV_blank>invalid<S2SV_blank>vendor<S2SV_blank>attribute<S2SV_blank>len<S2SV_blank>received\\n"" ) ; goto out_err ; } if ( 2 + len > n ) { log_ppp_warn ( ""radius:packet:<S2SV_blank>too<S2SV_blank>long<S2SV_blank>vendor<S2SV_blank>attribute<S2SV_blank>received<S2SV_blank>(%i,<S2SV_blank>%i)\\n"" , id , len ) ; goto out_err ; } "
5325,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> ca . name [ sizeof ( ca . name ) - 1 ] = 0 ; 
5326,<S2SV_StartBug> goto out ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5327,<S2SV_StartBug> atomic_inc ( & prog -> aux -> refcnt ) ; <S2SV_EndBug> ,<S2SV_ModStart> prog = bpf_prog_inc ( prog <S2SV_ModEnd> 
5328,<S2SV_StartBug> if ( len < tcp_hdrlen ) <S2SV_EndBug> <S2SV_StartBug> if ( skb_tailroom ( skb ) < TCPOLEN_MSS ) { <S2SV_EndBug> ,<S2SV_ModStart> || tcp_hdrlen < sizeof ( struct tcphdr ) <S2SV_ModStart> tcp_hdrlen >= 15 * 4 ) return 0 ; if ( 
5329,<S2SV_StartBug> up_read ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> & control -> id ) ; <S2SV_EndBug> ,<S2SV_ModStart> struct snd_ctl_elem_id id = control -> id ; <S2SV_ModStart> & <S2SV_ModEnd> 
5330,"<S2SV_StartBug> memmove ( s + j , s + qs , blen - qs ) ; <S2SV_EndBug> <S2SV_StartBug> j += blen - qs ; <S2SV_EndBug> ",<S2SV_ModStart> const int qslen = blen - qs ; <S2SV_ModStart> ( size_t ) qslen ) ; qs = j <S2SV_ModEnd> <S2SV_ModStart> qslen <S2SV_ModEnd> 
5331,"<S2SV_StartBug> ok = ExprResolveBoolean ( ctx , expr , set_rtrn ) ; <S2SV_EndBug> ",<S2SV_ModStart> -> unary . child 
5332,<S2SV_StartBug> if ( UNEXPECTED ( Z_ISUNDEF_P ( data ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5333,<S2SV_StartBug> return - EEXIST ; <S2SV_EndBug> ,<S2SV_ModStart> 0 <S2SV_ModEnd> 
5334,"<S2SV_StartBug> memcpy ( & b [ 4 ] , cmd -> msg , cmd -> msg_len ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( cmd -> msg_len > sizeof ( b ) - 4 ) return - EINVAL ; 
5335,"<S2SV_StartBug> void vp9_idct32x32_add ( const int16_t * input , uint8_t * dest , int stride , <S2SV_EndBug> <S2SV_StartBug> vp9_idct32x32_1_add ( input , dest , stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_idct32x32_34_add ( input , dest , stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_idct32x32_1024_add ( input , dest , stride ) ; <S2SV_EndBug> ",<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> vpx_idct32x32_1_add <S2SV_ModEnd> <S2SV_ModStart> vpx_idct32x32_34_add <S2SV_ModEnd> <S2SV_ModStart> vpx_idct32x32_1024_add <S2SV_ModEnd> 
5336,"<S2SV_StartBug> static inline void assign_eip_near ( struct x86_emulate_ctxt * ctxt , ulong dst ) <S2SV_EndBug> <S2SV_StartBug> switch ( ctxt -> op_bytes ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> return assign_eip_far ( ctxt , dst , ctxt -> mode == X86EMUL_MODE_PROT64 <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5337,"<S2SV_StartBug> smb_flush_file ( sr , sr -> fid_ofile ) ; <S2SV_EndBug> <S2SV_StartBug> smb_flush_file ( sr , file ) ; <S2SV_EndBug> ",<S2SV_ModStart> smb_ofile_flush <S2SV_ModEnd> <S2SV_ModStart> smb_ofile_flush <S2SV_ModEnd> 
5338,"<S2SV_StartBug> static void print_bpf_insn ( struct bpf_insn * insn ) <S2SV_EndBug> <S2SV_StartBug> } else if ( BPF_MODE ( insn -> code ) == BPF_IMM ) { <S2SV_EndBug> <S2SV_StartBug> insn -> code , insn -> dst_reg , insn -> imm ) ; <S2SV_EndBug> ","<S2SV_ModStart> const struct bpf_verifier_env * env , const <S2SV_ModStart> && BPF_SIZE ( insn -> code ) == BPF_DW ) { u64 imm = ( ( u64 ) ( insn + 1 ) -> imm << 32 ) | ( u32 ) insn -> imm ; bool map_ptr = insn -> src_reg == BPF_PSEUDO_MAP_FD ; if ( map_ptr && ! env -> allow_ptr_leaks ) imm = 0 ; verbose ( ""(%02x)<S2SV_blank>r%d<S2SV_blank>=<S2SV_blank>0x%llx\\n"" , insn -> code , <S2SV_ModEnd> <S2SV_ModStart> ( unsigned long long ) <S2SV_ModEnd> "
5339,<S2SV_StartBug> if ( net != & init_net ) <S2SV_EndBug> ,<S2SV_ModStart> protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if ( 
5340,"<S2SV_StartBug> uint16 strip , nstrips = TIFFNumberOfStrips ( in ) ; <S2SV_EndBug> ",<S2SV_ModStart> uint32 <S2SV_ModEnd> 
5341,"<S2SV_StartBug> s = tcp_recv ( NULL , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ber_in_header ( s , & tagval , & length ) || <S2SV_EndBug> <S2SV_StartBug> in_uint8s ( s , length ) ; <S2SV_EndBug> <S2SV_StartBug> token -> end = token -> p = token -> data ; <S2SV_EndBug> ","<S2SV_ModStart> struct stream packet ; <S2SV_ModStart> packet = * s ; <S2SV_ModStart> if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>version<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } <S2SV_ModStart> if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>token<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun"" , & packet ) ; } s_realloc ( token , length ) ; s_reset ( token ) <S2SV_ModEnd> "
5342,<S2SV_StartBug> addr . sin_addr . s_addr = htonl ( INADDR_ANY ) ; <S2SV_EndBug> ,<S2SV_ModStart> INADDR_LOOPBACK <S2SV_ModEnd> 
5343,<S2SV_StartBug> return ret ; <S2SV_EndBug> ,<S2SV_ModStart> { kfree ( bo ) ; return ret ; } <S2SV_ModEnd> 
5344,"<S2SV_StartBug> char * fpath = NULL , * path1 , * cgdir = NULL , * controller ; <S2SV_EndBug> <S2SV_StartBug> if ( ! fc_may_access ( fc , controller , path1 , NULL , O_RDWR ) ) { <S2SV_EndBug> <S2SV_StartBug> ret = - EACCES ; <S2SV_EndBug> <S2SV_StartBug> if ( ! caller_is_in_ancestor ( fc -> pid , controller , path1 , NULL ) ) { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> ","<S2SV_ModStart> , * next = NULL <S2SV_ModStart> caller_is_in_ancestor ( fc -> pid , controller , path1 , & next <S2SV_ModEnd> <S2SV_ModStart> if ( fpath && strcmp ( next , fpath ) == 0 ) ret = - EEXIST ; else ret = - ENOENT <S2SV_ModEnd> <S2SV_ModStart> fc_may_access ( fc , controller , path1 , NULL , O_RDWR ) ) { ret = - EACCES ; goto out ; } if ( ! <S2SV_ModStart> free ( next ) ; "
5345,<S2SV_StartBug> bool_t status ; <S2SV_EndBug> <S2SV_StartBug> # if ( TRACE_LEVEL >= TRACE_LEVEL_DEBUG ) <S2SV_EndBug> ,"<S2SV_ModStart> # if ( TRACE_LEVEL >= TRACE_LEVEL_DEBUG ) size_t length = netBufferGetLength ( buffer ) - offset ; TRACE_DEBUG ( ""Sending<S2SV_blank>packet<S2SV_blank>(%"" PRIuSIZE ""<S2SV_blank>bytes)...\\r\\n"" , length ) ; TRACE_DEBUG_NET_BUFFER ( ""<S2SV_blank><S2SV_blank>"" , buffer , offset , length ) ; # endif <S2SV_ModStart>  <S2SV_ModEnd> "
5346,<S2SV_StartBug> if ( ( ( int ) arg >= cdi -> capacity ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5347,<S2SV_StartBug> unsigned int random_variable = 0 ; <S2SV_EndBug> <S2SV_StartBug> random_variable = get_random_int ( ) & STACK_RND_MASK ; <S2SV_EndBug> ,<S2SV_ModStart> long <S2SV_ModEnd> <S2SV_ModStart> ( unsigned long ) <S2SV_ModStart> ; random_variable &= <S2SV_ModEnd> 
5348,"<S2SV_StartBug> SCSIDiskReq * r ; <S2SV_EndBug> <S2SV_StartBug> r = DO_UPCAST ( SCSIDiskReq , req , req ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5349,<S2SV_StartBug> if ( getClientTypeByName ( v [ j ] ) == - 1 ) { <S2SV_EndBug> ,<S2SV_ModStart> int class = <S2SV_ModEnd> <S2SV_ModStart> ; if ( class <S2SV_ModStart> || class == CLIENT_TYPE_MASTER 
5350,"<S2SV_StartBug> return send ( ts [ h ] . cmd_fdw , & cmd , sizeof ( cmd ) , 0 ) == sizeof ( cmd ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
5351,<S2SV_StartBug> const metadata_uptrdiff_t entries_end = <S2SV_EndBug> ,"<S2SV_ModStart> if ( metadata -> data_count > metadata -> data_capacity ) { ALOGE ( ""%s:<S2SV_blank>Data<S2SV_blank>count<S2SV_blank>(%"" PRIu32 "")<S2SV_blank>should<S2SV_blank>be<S2SV_blank><=<S2SV_blank>data<S2SV_blank>capacity<S2SV_blank>"" ""(%"" PRIu32 "")"" , __FUNCTION__ , metadata -> data_count , metadata -> data_capacity ) ; android_errorWriteLog ( SN_EVENT_LOG_ID , ""30591838"" ) ; return ERROR ; } "
5352,"<S2SV_StartBug> dprintk ( 2 , ""vm_close<S2SV_blank>%p<S2SV_blank>[count=%d,vma=%08lx-%08lx]\\n"" , map , <S2SV_EndBug> ","<S2SV_ModStart> ""vm_close<S2SV_blank>%p<S2SV_blank>[count=%u,vma=%08lx-%08lx]\\n"" <S2SV_ModEnd> "
5353,<S2SV_StartBug> const uint32_t c_w = <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < img1 -> d_h ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> img1 -> d_w ) == 0 ) ; <S2SV_EndBug> ,<S2SV_ModStart> uint32_t l_w = img1 -> d_w ; <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( img1 -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) { l_w *= 2 ; c_w *= 2 ; } # endif <S2SV_ModStart> l_w <S2SV_ModEnd> 
5354,"<S2SV_StartBug> unsigned int blocks ; <S2SV_EndBug> <S2SV_StartBug> blocks = ( ( size - 1 ) / blksize ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> pMap -> range_count = range_count ; <S2SV_EndBug> <S2SV_StartBug> pMap -> ranges = malloc ( range_count * sizeof ( MappedRange ) ) ; <S2SV_EndBug> <S2SV_StartBug> memset ( pMap -> ranges , 0 , range_count * sizeof ( MappedRange ) ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> pMap -> ranges [ range_count - 1 ] . addr = reserve ; <S2SV_EndBug> <S2SV_StartBug> pMap -> ranges [ range_count - 1 ] . length = blocks * blksize ; <S2SV_EndBug> <S2SV_StartBug> next += pMap -> ranges [ i ] . length ; <S2SV_EndBug> ","<S2SV_ModStart> size_t <S2SV_ModEnd> <S2SV_ModStart> if ( blksize != 0 ) { <S2SV_ModStart> } if ( size == 0 || blksize == 0 || blocks > SIZE_MAX / blksize || range_count == 0 ) { LOGE ( ""invalid<S2SV_blank>data<S2SV_blank>in<S2SV_blank>block<S2SV_blank>map<S2SV_blank>file:<S2SV_blank>size<S2SV_blank>%zu,<S2SV_blank>blksize<S2SV_blank>%u,<S2SV_blank>range_count<S2SV_blank>%u\\n"" , size , blksize , range_count ) ; return - 1 ; } <S2SV_ModStart> calloc ( range_count , <S2SV_ModEnd> <S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> == NULL ) { LOGE ( ""calloc(%u,<S2SV_blank>%zu)<S2SV_blank>failed:<S2SV_blank>%s\\n"" , range_count , <S2SV_ModEnd> <S2SV_ModStart> , strerror ( errno ) ) ; return - 1 ; } <S2SV_ModEnd> <S2SV_ModStart> free ( pMap -> ranges ) ; <S2SV_ModStart> ; } int fd = open ( block_dev , O_RDONLY ) ; if ( fd < 0 ) { LOGW ( ""failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>block<S2SV_blank>device<S2SV_blank>%s:<S2SV_blank>%s\\n"" , block_dev , strerror ( errno ) ) ; munmap ( reserve , blocks * blksize ) ; free ( pMap -> ranges ) ; return - 1 ; } unsigned char * next = reserve ; size_t remaining_size = blocks * blksize ; bool success = true ; for ( i = 0 ; i < range_count ; ++ i ) { size_t start , end ; if ( fscanf ( mapf , ""%zu<S2SV_blank>%zu\\n"" , & start , & end ) != 2 ) { LOGW ( ""failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>range<S2SV_blank>%d<S2SV_blank>in<S2SV_blank>block<S2SV_blank>map\\n"" , i ) ; success = false ; break ; } size_t length = ( end - start ) * blksize ; if ( end <= start || ( end - start ) > SIZE_MAX / blksize || length > remaining_size ) { LOGE ( ""unexpected<S2SV_blank>range<S2SV_blank>in<S2SV_blank>block<S2SV_blank>map:<S2SV_blank>%zu<S2SV_blank>%zu\\n"" , start , end ) ; success = false ; break ; } void * addr = mmap64 ( next , length , PROT_READ , MAP_PRIVATE | MAP_FIXED , fd , ( ( off64_t ) start ) * blksize ) ; if ( addr == MAP_FAILED ) { LOGW ( ""failed<S2SV_blank>to<S2SV_blank>map<S2SV_blank>block<S2SV_blank>%d:<S2SV_blank>%s\\n"" , i , strerror ( errno ) ) ; success = false ; break <S2SV_ModStart> i <S2SV_ModEnd> <S2SV_ModStart> addr <S2SV_ModEnd> <S2SV_ModStart> i <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> <S2SV_ModStart> length ; remaining_size -= length ; } if ( success && remaining_size != 0 ) { LOGE ( ""ranges<S2SV_blank>in<S2SV_blank>block<S2SV_blank>map<S2SV_blank>are<S2SV_blank>invalid:<S2SV_blank>remaining_size<S2SV_blank>=<S2SV_blank>%zu\\n"" , remaining_size ) ; success = false ; } if ( ! success ) { close ( fd ) ; munmap ( reserve , blocks * blksize ) ; free ( <S2SV_ModStart> ) ; return - 1 ; } close ( fd ) ; pMap -> addr = reserve ; pMap -> length <S2SV_ModEnd> "
5355,"<S2SV_StartBug> sprintf ( url_address , ""%.*s"" , url_len , url_begin ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( url_len >= sizeof ( url_address ) ) { applog ( LOG_WARNING , ""%s:<S2SV_blank>Truncating<S2SV_blank>overflowed<S2SV_blank>address<S2SV_blank>\'%.*s\'"" , __func__ , url_len , url_begin ) ; url_len = sizeof ( url_address ) - 1 ; } "
5356,"<S2SV_StartBug> pid_t child = fork ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rv ) <S2SV_EndBug> <S2SV_StartBug> fs_logger2 ( ""clone"" , dest ) ; <S2SV_EndBug> ",<S2SV_ModStart> copy_file_as_user <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5357,"<S2SV_StartBug> re -> flags | RE_FLAGS_SCAN , <S2SV_EndBug> ","<S2SV_ModStart> 0 , "
5358,"<S2SV_StartBug> void vp9_tokenize_sb ( VP9_COMP * cpi , TOKENEXTRA * * t , int dry_run , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> const int skip_inc = ! vp9_segfeature_active ( & cm -> seg , mbmi -> segment_id , <S2SV_EndBug> <S2SV_StartBug> struct tokenize_b_args arg = { cpi , xd , t } ; <S2SV_EndBug> <S2SV_StartBug> cm -> counts . skip [ ctx ] [ 1 ] += skip_inc ; <S2SV_EndBug> <S2SV_StartBug> if ( dry_run ) <S2SV_EndBug> <S2SV_StartBug> cm -> counts . skip [ ctx ] [ 0 ] += skip_inc ; <S2SV_EndBug> <S2SV_StartBug> * t = t_backup ; <S2SV_EndBug> ","<S2SV_ModStart> ThreadData * td , <S2SV_ModStart> MACROBLOCK * const x = & td -> mb ; <S2SV_ModStart> x -> <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> segfeature_active <S2SV_ModEnd> <S2SV_ModStart> td <S2SV_ModEnd> <S2SV_ModStart> td -> counts -> <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> td -> counts -> <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5359,<S2SV_StartBug> if ( cmd & 0x08 ) off |= * delta ++ << 24UL ; <S2SV_EndBug> ,<S2SV_ModStart> ( ( unsigned ) <S2SV_ModStart> ) 
5360,"<S2SV_StartBug> if ( ( setup_ret = _WM_SetupMidiEvent ( xmi_mdi , xmi_data , 0 ) ) == 0 ) { <S2SV_EndBug> ","<S2SV_ModStart> xmi_size , "
5361,<S2SV_StartBug> return KRB5KDC_ERR_BADOPTION ; <S2SV_EndBug> <S2SV_StartBug> server_princ ) ) { <S2SV_EndBug> ,"<S2SV_ModStart> * status = ""INVALID_S4U2PROXY_OPTIONS"" ; <S2SV_ModStart> * status = ""EVIDENCE_TICKET_MISMATCH"" ; "
5362,"<S2SV_StartBug> struct pt_regs * regs , int nmi ) <S2SV_EndBug> <S2SV_StartBug> if ( perf_event_overflow ( event , nmi , & data , regs ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5363,"<S2SV_StartBug> av_log ( avctx , AV_LOG_DEBUG , <S2SV_EndBug> ","<S2SV_ModStart> if ( s -> diff_start + s -> diff_height > cur_blk_height ) { av_log ( avctx , AV_LOG_ERROR , ""Block<S2SV_blank>parameters<S2SV_blank>invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } "
5364,"<S2SV_StartBug> ret = vfs_dedupe_file_range ( file , same ) ; <S2SV_EndBug> ",<S2SV_ModStart> same -> dest_count = count ; 
5365,"<S2SV_StartBug> cp = ikev1_attrmap_print ( ndo , cp , ( ep < ep2 ) ? ep : ep2 , <S2SV_EndBug> ","<S2SV_ModStart> ep2 , map , nmap ) ; } else cp = ikev1_attr_print ( ndo , cp , ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart>  <S2SV_ModEnd> "
5366,<S2SV_StartBug> struct cpuinfo_x86 * c ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( ! capable ( CAP_SYS_RAWIO ) ) return - EPERM 
5367,<S2SV_StartBug> bond_dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug> ,<S2SV_ModStart> ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> 
5368,"<S2SV_StartBug> size_t size , const uint8_t * * psource , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * const cm = & pbi -> common ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_refs [ 0 ] . idx != INT_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( cm -> new_fb_idx >= 0 && cm -> frame_bufs [ cm -> new_fb_idx ] . ref_count == 0 ) <S2SV_EndBug> <S2SV_StartBug> cm -> release_fb_cb ( cm -> cb_priv , <S2SV_EndBug> <S2SV_StartBug> & cm -> frame_bufs [ cm -> new_fb_idx ] . raw_frame_buffer ) ; <S2SV_EndBug> <S2SV_StartBug> if ( setjmp ( cm -> error . jmp ) ) { <S2SV_EndBug> <S2SV_StartBug> cm -> error . setjmp = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_refs [ 0 ] . idx != INT_MAX ) <S2SV_EndBug> <S2SV_StartBug> retcode = vp9_decode_frame ( pbi , source , source + size , psource ) ; <S2SV_EndBug> <S2SV_StartBug> if ( retcode < 0 ) { <S2SV_EndBug> <S2SV_StartBug> cm -> error . error_code = VPX_CODEC_ERROR ; <S2SV_EndBug> <S2SV_StartBug> cm -> error . setjmp = 0 ; <S2SV_EndBug> <S2SV_StartBug> swap_frame_buffers ( pbi ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> volatile <S2SV_ModStart> ; BufferPool * volatile const pool = cm -> buffer_pool ; RefCntBuffer * volatile const frame_bufs = cm -> buffer_pool -> frame_bufs <S2SV_ModStart> > 0 ) { assert ( cm -> frame_refs [ 0 ] . buf != NULL ) ; <S2SV_ModEnd> <S2SV_ModStart> } pbi -> ready_for_new_data = 0 ; if ( ! pbi -> frame_parallel_decode && <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pool <S2SV_ModEnd> <S2SV_ModStart> pool <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> cm -> new_fb_idx == INVALID_IDX ) return VPX_CODEC_MEM_ERROR ; cm -> cur_frame = & pool -> frame_bufs [ cm -> new_fb_idx ] ; pbi -> hold_ref_buf = 0 ; if ( pbi -> frame_parallel_decode ) { VPxWorker * const worker = pbi -> frame_worker_owner ; vp9_frameworker_lock_stats ( worker ) ; frame_bufs [ cm -> new_fb_idx ] . frame_worker_owner = worker ; pbi -> cur_buf = & frame_bufs [ cm -> new_fb_idx ] ; pbi -> cur_buf -> row = - 1 ; pbi -> cur_buf -> col = - 1 ; vp9_frameworker_unlock_stats ( worker ) ; } else { pbi -> cur_buf = & frame_bufs [ cm -> new_fb_idx ] ; } if ( <S2SV_ModStart> const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) ; int i ; <S2SV_ModStart> pbi -> ready_for_new_data = 1 ; winterface -> sync ( & pbi -> lf_worker ) ; for ( i = 0 ; i < pbi -> num_tile_workers ; ++ i ) { winterface -> sync ( & pbi -> tile_workers [ i ] ) ; } lock_buffer_pool ( pool ) ; if ( pbi -> hold_ref_buf == 1 ) { int ref_index = 0 , mask ; for ( mask = pbi -> refresh_frame_flags ; mask ; mask >>= 1 ) { const int old_idx = cm -> ref_frame_map [ ref_index ] ; decrease_ref_count ( old_idx , frame_bufs , pool ) ; if ( ( mask & 1 ) && old_idx >= 0 ) { decrease_ref_count ( old_idx , frame_bufs , pool ) ; } ++ ref_index ; } for ( ; ref_index < REF_FRAMES && ! cm -> show_existing_frame ; ++ ref_index ) { const int old_idx = cm -> ref_frame_map [ ref_index ] ; decrease_ref_count ( old_idx , frame_bufs , pool ) ; } pbi -> hold_ref_buf = 0 ; } decrease_ref_count ( cm -> new_fb_idx , frame_bufs , pool ) ; unlock_buffer_pool ( pool ) ; vpx_clear_system_state ( ) <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> swap_frame_buffers ( pbi ) ; vpx_clear_system_state ( ) ; if ( ! cm -> show_existing_frame ) { cm -> last_show_frame = cm -> show_frame ; cm -> prev_frame = cm -> cur_frame ; if ( cm -> seg . enabled && ! pbi -> frame_parallel_decode ) vp9_swap_current_and_last_seg_map ( cm ) ; } if ( pbi -> frame_parallel_decode ) { VPxWorker * const worker = pbi -> frame_worker_owner ; FrameWorkerData * const frame_worker_data = worker -> data1 ; vp9_frameworker_lock_stats ( worker ) ; if ( cm -> show_frame ) { cm -> current_video_frame ++ ; } frame_worker_data -> frame_decoded = 1 ; frame_worker_data -> frame_context_ready = 1 ; vp9_frameworker_signal_stats ( worker ) ; vp9_frameworker_unlock_stats ( worker ) ; } else { cm -> last_width = cm -> width ; cm -> last_height = cm -> height ; if ( cm -> show_frame ) { cm -> current_video_frame ++ ; } } <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5369,"<S2SV_StartBug> r2 . re -> flags | RE_FLAGS_SCAN , <S2SV_EndBug> ","<S2SV_ModStart> 0 , "
5370,"<S2SV_StartBug> int_mv * prev_golden_ref_mv , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> ",<S2SV_ModStart> const MV <S2SV_ModEnd> <S2SV_ModStart> td . 
5371,<S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> ,<S2SV_ModStart> { ret = <S2SV_ModEnd> <S2SV_ModStart> goto free_kbuf ; } 
5372,"<S2SV_StartBug> void ntlm_write_message_header ( wStream * s , NTLM_MESSAGE_HEADER * header ) <S2SV_EndBug> ",<S2SV_ModStart> static 
5373,<S2SV_StartBug> return TRUE ; <S2SV_EndBug> ,<S2SV_ModStart> if ( iter -> start == iter -> end ) iter -> end = g_utf8_next_char ( iter -> end ) ; 
5374,<S2SV_StartBug> for ( ( pad = w % 4 ) ? ( 4 - w % 4 ) : 0 ; pad > 0 ; pad -- ) <S2SV_EndBug> ,<S2SV_ModStart> pad = ( <S2SV_ModEnd> 
5375,<S2SV_StartBug> while ( c && which > 0 ) { <S2SV_EndBug> <S2SV_StartBug> c = c -> next ; <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> , which -- ; <S2SV_ModEnd> "
5376,<S2SV_StartBug> set_caps ( ) ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> fs_rdonly ( RUN_SECCOMP_DIR ) ; # endif set_caps ( ) ; <S2SV_ModEnd> 
5377,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> if ( info_ptr == NULL ) return ; 
5378,"<S2SV_StartBug> opj_write_bytes ( p_data , J2K_MS_SOD , <S2SV_EndBug> ","<S2SV_ModStart> if ( p_total_data_size < 4 ) { opj_event_msg ( p_manager , EVT_ERROR , ""Not<S2SV_blank>enough<S2SV_blank>bytes<S2SV_blank>in<S2SV_blank>output<S2SV_blank>buffer<S2SV_blank>to<S2SV_blank>write<S2SV_blank>SOD<S2SV_blank>marker\\n"" ) ; return OPJ_FALSE ; } "
5379,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> snd_usb_mixer_disconnect ( mixer ) ; 
5380,<S2SV_StartBug> memcpy ( ( u8 * ) & priv -> curr_bss_params . bss_descriptor . <S2SV_EndBug> ,<S2SV_ModStart> if ( wmm_param_ie -> vend_hdr . len + 2 > sizeof ( struct ieee_types_wmm_parameter ) ) break ; 
5381,<S2SV_StartBug> usleep ( 200000 ) ; <S2SV_EndBug> ,<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
5382,<S2SV_StartBug> if ( ! del_timer ( & task -> slow_task -> timer ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5383,"<S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug> ",<S2SV_ModStart> rcu_dereference ( <S2SV_ModStart> ) 
5384,<S2SV_StartBug> ue -> info = * info ; <S2SV_EndBug> ,<S2SV_ModStart> card = card ; ue -> 
5385,"<S2SV_StartBug> truncate_pagecache ( inode , inode -> i_size ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_truncate ( inode ) ; <S2SV_EndBug> ",<S2SV_ModStart> down_write ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ) ; up_write ( & EXT4_I ( inode ) -> i_mmap_sem 
5386,<S2SV_StartBug> pid_t my_pid = getpid ( ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( g_settings_privatereports ) { if ( ( g_opts & OPT_x ) ) log ( ""Not<S2SV_blank>going<S2SV_blank>to<S2SV_blank>make<S2SV_blank>dump<S2SV_blank>directories<S2SV_blank>world<S2SV_blank>readable<S2SV_blank>because<S2SV_blank>PrivateReports<S2SV_blank>is<S2SV_blank>on"" ) ; mode = DEFAULT_DUMP_DIR_MODE ; my_euid = 0 ; } "
5387,"<S2SV_StartBug> UEV_PARSE ( ""num_reorder_pics"" , value , ps_bitstrm ) ; <S2SV_EndBug> <S2SV_StartBug> UEV_PARSE ( ""max_latency_increase"" , value , ps_bitstrm ) ; <S2SV_EndBug> ",<S2SV_ModStart> if ( ps_sps -> ai1_sps_max_dec_pic_buffering [ i ] > MAX_DPB_SIZE ) { return IHEVCD_INVALID_PARAMETER ; } <S2SV_ModStart> if ( ps_sps -> ai1_sps_max_num_reorder_pics [ i ] > ps_sps -> ai1_sps_max_dec_pic_buffering [ i ] ) { return IHEVCD_INVALID_PARAMETER ; } 
5388,<S2SV_StartBug> key_put ( ci -> ci_keyring_key ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5389,"<S2SV_StartBug> if ( ! mx_is_imap ( path ) || imap_parse_path ( path , & mx ) || ! mx . mbox ) <S2SV_EndBug> <S2SV_StartBug> snprintf ( mbox , sizeof ( mbox ) , ""%smailboxes<S2SV_blank>\\""%s\\"""" , subscribe ? """" : ""un"" , path ) ; <S2SV_EndBug> ","<S2SV_ModStart> size_t len = 0 ; <S2SV_ModStart> len = <S2SV_ModStart> ""%smailboxes<S2SV_blank>"" <S2SV_ModEnd> <S2SV_ModStart> ) ; imap_quote_string ( mbox + len , sizeof ( mbox ) - len , path , true <S2SV_ModEnd> "
5390,<S2SV_StartBug> if ( key_is_instantiated ( key ) ) <S2SV_EndBug> ,<S2SV_ModStart> key_is_positive <S2SV_ModEnd> 
5391,<S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> skip_metadata ( ps ) ; 
5392,<S2SV_StartBug> if ( nsops < 1 ) <S2SV_EndBug> ,<S2SV_ModStart> || nsops > SEMOPM 
5393,"<S2SV_StartBug> vp8_sub_pixel_variance8x8 ( uptr , pre_stride , <S2SV_EndBug> <S2SV_StartBug> vp8_sub_pixel_variance8x8 ( vptr , pre_stride , <S2SV_EndBug> <S2SV_StartBug> vp8_variance8x8 ( uptr , pre_stride , <S2SV_EndBug> <S2SV_StartBug> vp8_variance8x8 ( vptr , pre_stride , <S2SV_EndBug> ",<S2SV_ModStart> vpx_sub_pixel_variance8x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_sub_pixel_variance8x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_variance8x8 <S2SV_ModEnd> <S2SV_ModStart> vpx_variance8x8 <S2SV_ModEnd> 
5394,"<S2SV_StartBug> static void super_block_uvrd ( const VP9_COMP * cpi , MACROBLOCK * x , <S2SV_EndBug> <S2SV_StartBug> TX_SIZE uv_txfm_size = get_uv_tx_size ( mbmi ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ref_best_rd < 0 ) <S2SV_EndBug> <S2SV_StartBug> goto term ; <S2SV_EndBug> <S2SV_StartBug> if ( is_inter_block ( mbmi ) ) { <S2SV_EndBug> <S2SV_StartBug> ref_best_rd , plane , bsize , uv_txfm_size , <S2SV_EndBug> <S2SV_StartBug> goto term ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> ","<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> const TX_SIZE uv_tx_size <S2SV_ModEnd> <S2SV_ModStart> , & xd -> plane [ 1 ] <S2SV_ModStart> int is_cost_valid = 1 ; <S2SV_ModStart> is_cost_valid = 0 <S2SV_ModEnd> <S2SV_ModStart> && is_cost_valid <S2SV_ModStart> uv_tx_size <S2SV_ModEnd> <S2SV_ModStart> { is_cost_valid = 0 ; break ; } <S2SV_ModEnd> <S2SV_ModStart> if ( ! is_cost_valid ) { * rate = INT_MAX ; * distortion = INT64_MAX ; * sse = INT64_MAX ; * skippable = 0 ; } return is_cost_valid <S2SV_ModEnd> "
5395,"<S2SV_StartBug> int sctp_verify_asconf ( const struct sctp_association * asoc , <S2SV_EndBug> <S2SV_StartBug> struct sctp_paramhdr * param_hdr , void * chunk_end , <S2SV_EndBug> <S2SV_StartBug> sctp_addip_param_t * asconf_param ; <S2SV_EndBug> <S2SV_StartBug> int length , plen ; <S2SV_EndBug> <S2SV_StartBug> param . v = ( sctp_paramhdr_t * ) param_hdr ; <S2SV_EndBug> ","<S2SV_ModStart> bool <S2SV_ModEnd> <S2SV_ModStart> sctp_chunk * chunk , bool addr_param_needed <S2SV_ModEnd> <S2SV_ModStart> sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) chunk -> chunk_hdr <S2SV_ModEnd> <S2SV_ModStart> bool addr_param_seen = false ; sctp_walk_params ( param , addip , addip_hdr . params ) { size_t length = ntohs ( param . p -> length ) ; * errp = param . p ; switch ( param . p -> type ) { case SCTP_PARAM_ERR_CAUSE : break ; case SCTP_PARAM_IPV4_ADDRESS : if ( length != sizeof ( sctp_ipv4addr_param_t ) ) return false ; addr_param_seen = true ; break ; case SCTP_PARAM_IPV6_ADDRESS : if ( length != sizeof ( sctp_ipv6addr_param_t ) ) return false ; addr_param_seen = true ; break ; case SCTP_PARAM_ADD_IP : case SCTP_PARAM_DEL_IP : case SCTP_PARAM_SET_PRIMARY : if ( addr_param_needed && ! addr_param_seen ) return false ; length = ntohs ( param . addip -> param_hdr . length ) ; if ( length < sizeof ( sctp_addip_param_t ) + sizeof ( sctp_paramhdr_t ) ) return false ; break ; case SCTP_PARAM_SUCCESS_REPORT : case SCTP_PARAM_ADAPTATION_LAYER_IND : if ( length != sizeof ( sctp_addip_param_t ) ) return false ; break ; default : return false ; } } if ( addr_param_needed && ! addr_param_seen ) return false ; if ( ! addr_param_needed && addr_param_seen ) return false ; if ( <S2SV_ModEnd> <S2SV_ModStart> != chunk -> chunk_end ) return false ; return true <S2SV_ModEnd> "
5396,<S2SV_StartBug> assert ( ! vct_iscrlf ( * p ) ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( ! vct_iscrlf ( * p ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vct_iscrlf ( * p ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( ! vct_iscrlf ( * p ) ) <S2SV_EndBug> <S2SV_StartBug> if ( vct_iscrlf ( * p ) ) <S2SV_EndBug> <S2SV_StartBug> while ( * p != '\\0' && ! vct_iscrlf ( * p ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5397,"<S2SV_StartBug> spin_lock_irqsave ( & mpu -> input_lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> while ( readw ( mpu -> dev -> MIDQ + JQS_wTail ) != <S2SV_EndBug> <S2SV_StartBug> wTmp = readw ( mpu -> dev -> MIDQ + JQS_wHead ) + 1 ; <S2SV_EndBug> ","<S2SV_ModStart> u16 head , tail , size ; <S2SV_ModStart> head = readw ( mpu -> dev -> MIDQ + JQS_wHead ) ; tail = readw ( mpu -> dev -> MIDQ + JQS_wTail ) ; size = readw ( mpu -> dev -> MIDQ + JQS_wSize ) ; if ( head > size || tail > size ) goto out ; while ( head != tail ) { unsigned char val = readw ( pwMIDQData + 2 * head ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER , & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input , & val <S2SV_ModEnd> <S2SV_ModStart> if ( ++ head > size ) head = 0 ; writew ( head , <S2SV_ModEnd> <S2SV_ModStart> ; } out : <S2SV_ModEnd> "
5398,"<S2SV_StartBug> if ( vma -> vm_ops ) { <S2SV_EndBug> <S2SV_StartBug> pmd , flags , entry ) ; <S2SV_EndBug> <S2SV_StartBug> pte , pmd , flags ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> pmd , flags , entry ) ; <S2SV_ModEnd> <S2SV_ModStart> pte , pmd , <S2SV_ModEnd> "
5399,<S2SV_StartBug> switch ( dip -> di_format ) { <S2SV_EndBug> ,"<S2SV_ModStart> fa = xfs_dinode_verify_fork ( dip , mp , XFS_DATA_FORK ) ; if ( fa ) return fa ; break ; case 0 : break ; default : return __this_address ; } if ( XFS_DFORK_Q ( dip ) ) { fa = xfs_dinode_verify_fork ( dip , mp , XFS_ATTR_FORK ) ; if ( fa ) return fa ; <S2SV_ModEnd> "
5400,"<S2SV_StartBug> it = item_get ( key , nkey , c , DO_UPDATE ) ; <S2SV_EndBug> ",<S2SV_ModStart> limited_get <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5401,"<S2SV_StartBug> strncpy ( hid -> name , req -> name , 128 ) ; <S2SV_EndBug> ",<S2SV_ModStart> sizeof ( req -> name ) - 1 <S2SV_ModEnd> 
5402,"<S2SV_StartBug> jas_matrix_t * jas_matrix_create ( int numrows , int numcols ) <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> ","<S2SV_ModStart> jas_matind_t numrows , jas_matind_t <S2SV_ModEnd> <S2SV_ModStart> jas_matind_t <S2SV_ModEnd> "
5403,"<S2SV_StartBug> struct ext4_ext_path * path ) <S2SV_EndBug> <S2SV_StartBug> struct ext4_extent * ex ; <S2SV_EndBug> <S2SV_StartBug> ext_debug ( ""ext4_convert_unwritten_extents_endio:<S2SV_blank>inode<S2SV_blank>%lu,<S2SV_blank>logical"" <S2SV_EndBug> <S2SV_StartBug> ( unsigned long long ) le32_to_cpu ( ex -> ee_block ) , <S2SV_EndBug> ","<S2SV_ModStart> ext4_map_blocks * map , struct <S2SV_ModStart> ; ext4_lblk_t ee_block ; unsigned int ee_len <S2SV_ModStart> ee_block = le32_to_cpu ( ex -> ee_block ) ; ee_len = ext4_ext_get_actual_len ( ex ) ; <S2SV_ModStart> ee_block , ee_len ) ; if ( ee_block != map -> m_lblk || ee_len > map -> m_len ) { err = ext4_split_unwritten_extents ( handle , inode , map , path , EXT4_GET_BLOCKS_CONVERT ) ; if ( err < 0 ) goto out ; ext4_ext_drop_refs ( path ) ; path = ext4_ext_find_extent ( inode , map -> m_lblk , path ) ; if ( IS_ERR ( path ) ) { err = PTR_ERR ( path ) ; goto out ; } depth = ext_depth ( inode ) ; ex = path [ depth ] . p_ext ; } <S2SV_ModEnd> "
5404,<S2SV_StartBug> char * prop_chunk = malloc ( ( size_t ) dff_chunk_header . ckDataSize ) ; <S2SV_EndBug> ,"<S2SV_ModStart> prop_chunk ; if ( dff_chunk_header . ckDataSize < 4 || dff_chunk_header . ckDataSize > 1024 ) { error_line ( ""%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!"" , infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""got<S2SV_blank>PROP<S2SV_blank>chunk<S2SV_blank>of<S2SV_blank>%d<S2SV_blank>bytes<S2SV_blank>total"" , ( int ) dff_chunk_header . ckDataSize ) ; "
5405,<S2SV_StartBug> int family = sk -> sk_family ; <S2SV_EndBug> <S2SV_StartBug> if ( addr_len ) { <S2SV_EndBug> <S2SV_StartBug> sin = ( struct sockaddr_in * ) msg -> msg_name ; <S2SV_EndBug> <S2SV_StartBug> if ( isk -> cmsg_flags ) <S2SV_EndBug> <S2SV_StartBug> sin6 = ( struct sockaddr_in6 * ) msg -> msg_name ; <S2SV_EndBug> <S2SV_StartBug> IP6CB ( skb ) -> iif ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> struct sockaddr_in * <S2SV_ModStart> * addr_len = sizeof ( * sin ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> sin6 = ( struct sockaddr_in6 * <S2SV_ModStart> ) ; * addr_len = sizeof ( * sin6 
5406,<S2SV_StartBug> if ( ! port -> interrupt_in_urb ) { <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5407,"<S2SV_StartBug> if ( po -> rx_ring . pg_vec || po -> tx_ring . pg_vec ) <S2SV_EndBug> <S2SV_StartBug> return - EBUSY ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> copy_from_user ( & val , optval , sizeof ( val ) ) ) return - EFAULT ; switch ( val ) { case TPACKET_V1 : case TPACKET_V2 : case TPACKET_V3 : break ; default : return - EINVAL ; } lock_sock ( sk ) ; if ( <S2SV_ModStart> { ret = <S2SV_ModEnd> <S2SV_ModStart> } else { <S2SV_ModEnd> <S2SV_ModStart> ret = 0 ; } release_sock ( sk ) ; return ret ; <S2SV_ModEnd> "
5408,"<S2SV_StartBug> addModuleArgument ( db , pTab , sqlite3DbStrDup ( db , pTab -> zName ) ) ; <S2SV_EndBug> <S2SV_StartBug> addModuleArgument ( db , pTab , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> addModuleArgument ( db , pTab , sqlite3DbStrDup ( db , pTab -> zName ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> pParse <S2SV_ModEnd> <S2SV_ModStart> pParse <S2SV_ModEnd> <S2SV_ModStart> pParse <S2SV_ModEnd> 
5409,"<S2SV_StartBug> return write ( fd , & event , sizeof ( event ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
5410,"<S2SV_StartBug> str = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) count , sizeof ( * str ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> + 1 
5411,"<S2SV_StartBug> struct ip_options * opt = inet_rsk ( req ) -> opt ; <S2SV_EndBug> <S2SV_StartBug> ( opt && opt -> srr ) ? opt -> faddr : ireq -> rmt_addr , <S2SV_EndBug> <S2SV_StartBug> if ( opt && opt -> is_strictroute && rt -> rt_dst != rt -> rt_gateway ) <S2SV_EndBug> ",<S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> opt . <S2SV_ModStart> opt . <S2SV_ModStart> opt . 
5412,<S2SV_StartBug> field [ nf ] = lp ; <S2SV_EndBug> <S2SV_StartBug> if ( nf > MAXDATEFIELDS ) <S2SV_EndBug> ,<S2SV_ModStart> ; if ( nf >= MAXDATEFIELDS ) return - 1 <S2SV_ModStart>  <S2SV_ModEnd> 
5413,"<S2SV_StartBug> int a = getnum ( L , fmt , MAXALIGN ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
5414,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> <S2SV_StartBug> for ( plane = 1 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) <S2SV_EndBug> ,<S2SV_ModStart> [ plane ] && frame -> linesize <S2SV_ModStart> && frame -> linesize [ plane ] 
5415,<S2SV_StartBug> if ( i > ( sizeof ( outbuff ) - 20 ) ) { <S2SV_EndBug> ,<S2SV_ModStart> 128 <S2SV_ModEnd> 
5416,"<S2SV_StartBug> static int test_candidate_kf ( struct twopass_rc * twopass , <S2SV_EndBug> <S2SV_StartBug> if ( ( this_frame -> pcnt_second_ref < 0.10 ) && <S2SV_EndBug> <S2SV_StartBug> ( next_frame -> pcnt_second_ref < 0.10 ) && <S2SV_EndBug> <S2SV_StartBug> DOUBLE_DIVIDE_CHECK ( this_frame -> coded_error ) ) < 2.5 ) && <S2SV_EndBug> <S2SV_StartBug> DOUBLE_DIVIDE_CHECK ( this_frame -> coded_error ) > 0.40 ) || <S2SV_EndBug> <S2SV_StartBug> DOUBLE_DIVIDE_CHECK ( this_frame -> intra_error ) > 0.40 ) || <S2SV_EndBug> <S2SV_StartBug> DOUBLE_DIVIDE_CHECK ( next_frame -> coded_error ) ) > 3.5 ) ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> double next_iiratio = ( IIKFACTOR1 * local_next_frame . intra_error / <S2SV_EndBug> <S2SV_StartBug> if ( next_iiratio > RMAX ) <S2SV_EndBug> ",<S2SV_ModStart> TWO_PASS <S2SV_ModEnd> <S2SV_ModStart> double pcnt_intra = 1.0 - this_frame -> pcnt_inter ; double modified_pcnt_inter = this_frame -> pcnt_inter - this_frame -> pcnt_neutral ; <S2SV_ModStart> SECOND_REF_USEAGE_THRESH <S2SV_ModEnd> <S2SV_ModStart> SECOND_REF_USEAGE_THRESH ) && ( ( this_frame -> pcnt_inter < VERY_LOW_INTER_THRESH ) || ( ( pcnt_intra > MIN_INTRA_LEVEL ) && ( pcnt_intra > ( INTRA_VS_INTER_THRESH * modified_pcnt_inter ) <S2SV_ModEnd> <S2SV_ModStart> KF_II_ERR_THRESHOLD <S2SV_ModEnd> <S2SV_ModStart> ERR_CHANGE_THRESHOLD <S2SV_ModEnd> <S2SV_ModStart> ERR_CHANGE_THRESHOLD <S2SV_ModEnd> <S2SV_ModStart> II_IMPROVEMENT_THRESHOLD <S2SV_ModEnd> <S2SV_ModStart> BOOST_FACTOR <S2SV_ModEnd> <S2SV_ModStart> KF_II_MAX ) next_iiratio = KF_II_MAX <S2SV_ModEnd> 
5417,<S2SV_StartBug> for ( j = 1 ; j <= len ; j ++ ) { <S2SV_EndBug> ,"<S2SV_ModStart> luaL_checkstack ( L , 1 , ""in<S2SV_blank>function<S2SV_blank>mp_encode_lua_table_as_array"" ) ; "
5418,<S2SV_StartBug> size_t maxlen = 3 * len ; <S2SV_EndBug> ,<S2SV_ModStart> + 8 
5419,<S2SV_StartBug> if ( data -> multi_easy ) <S2SV_EndBug> <S2SV_StartBug> curl_multi_cleanup ( data -> multi_easy ) ; <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> data -> multi_easy = NULL ; } 
5420,<S2SV_StartBug> while ( readw ( chip -> DSPQ + JQS_wTail ) != readw ( chip -> DSPQ + JQS_wHead ) ) { <S2SV_EndBug> <S2SV_StartBug> wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> u16 head , tail , size ; head <S2SV_ModEnd> <S2SV_ModStart> ; tail = readw ( chip -> DSPQ + JQS_wTail ) ; size = <S2SV_ModEnd> <S2SV_ModStart> ; if ( head > size || tail > size ) goto out ; while ( head != tail ) { snd_msnd_eval_dsp_msg ( chip , readw ( pwDSPQData + 2 * head ) ) ; if ( ++ head > size ) head = 0 ; writew ( head <S2SV_ModEnd> <S2SV_ModStart> out : "
5421,<S2SV_StartBug> m = PyModule_Create ( & _astmodule3 ) ; <S2SV_EndBug> ,<S2SV_ModStart> _astmodule <S2SV_ModEnd> 
5422,"<S2SV_StartBug> if ( ( child -> ptrace & PT_PTRACED ) && child -> parent == current ) { <S2SV_EndBug> <S2SV_StartBug> spin_lock_irq ( & child -> sighand -> siglock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ignore_state || ( task_is_traced ( child ) && <S2SV_EndBug> <S2SV_StartBug> ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ret && ! ignore_state ) <S2SV_EndBug> <S2SV_StartBug> ret = wait_task_inactive ( child , TASK_TRACED ) ? 0 : - ESRCH ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> WARN_ON ( child -> state == __TASK_TRACED <S2SV_ModEnd> <S2SV_ModStart> ptrace_freeze_traced ( child <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> { if ( ! <S2SV_ModEnd> <S2SV_ModStart> __TASK_TRACED ) ) { WARN_ON ( child -> state == __TASK_TRACED ) ; ret = <S2SV_ModEnd> <S2SV_ModStart> } } 
5423,<S2SV_StartBug> kfree ( user ) ; <S2SV_EndBug> ,<S2SV_ModStart> cleanup_srcu_struct ( & user -> release_barrier ) ; 
5424,"<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error == 0 ) <S2SV_EndBug> ","<S2SV_ModStart> posix_acl_update_mode ( inode <S2SV_ModEnd> <S2SV_ModStart> , & acl ) ; if ( error ) return error ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5425,"<S2SV_StartBug> char * curl_cmd = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! checkCurl ( ) ) { <S2SV_EndBug> <S2SV_StartBug> symbol_store_path = r_str_escape ( opt -> symbol_store_path ) ; <S2SV_EndBug> <S2SV_StartBug> abspath_to_archive = r_str_newf ( ""%s%s%s%s%s%s%s"" , <S2SV_EndBug> <S2SV_StartBug> const char * cabextractor = ""cabextract"" ; <S2SV_EndBug> <S2SV_StartBug> extractor_cmd = r_str_newf ( format , cabextractor , abspath_to_dir , abspath_to_archive ) ; <S2SV_EndBug> <S2SV_StartBug> eprintf ( ""Attempting<S2SV_blank>to<S2SV_blank>download<S2SV_blank>compressed<S2SV_blank>pdb<S2SV_blank>in<S2SV_blank>%s\\n"" , abspath_to_archive ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt -> extract > 0 ) { <S2SV_EndBug> <S2SV_StartBug> R_FREE ( curl_cmd ) ; <S2SV_EndBug> <S2SV_StartBug> res = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( cmd_ret = r_sys_cmd ( curl_cmd ) != 0 ) ) { <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> char * abspath_to_file = r_str_newf ( ""%s%s%s%s%s%s%s"" , opt -> symbol_store_path , R_SYS_DIR , opt -> dbg_file , R_SYS_DIR , opt -> guid , R_SYS_DIR , opt -> dbg_file ) ; if ( r_file_exists ( abspath_to_file ) ) { eprintf ( ""File<S2SV_blank>already<S2SV_blank>downloaded.\\n"" ) ; free ( abspath_to_file ) ; return 1 ; } if ( checkExtract ( ) || opt -> extract == 0 ) { char * extractor_cmd = NULL ; char * archive_name = strdup ( opt -> dbg_file ) ; archive_name [ strlen ( archive_name ) <S2SV_ModEnd> <S2SV_ModStart> char * abspath_to_archive = r_str_newf ( ""%s%s%s%s%s%s%s"" , opt -> symbol_store_path , R_SYS_DIR , opt -> dbg_file , R_SYS_DIR , opt -> guid , R_SYS_DIR , archive_name ) ; eprintf ( ""Attempting<S2SV_blank>to<S2SV_blank>download<S2SV_blank>compressed<S2SV_blank>pdb<S2SV_blank>in<S2SV_blank>%s\\n"" , abspath_to_archive ) ; char * abs_arch_esc = r_str_escape_sh ( abspath_to_archive ) ; # if __WINDOWS__ char * abs_file_esc = r_str_escape_sh ( abspath_to_file ) ; extractor_cmd <S2SV_ModEnd> <S2SV_ModStart> ""expand<S2SV_blank>\\""%s\\""<S2SV_blank>\\""%s\\"""" , abs_arch_esc , abs_file_esc ) ; free ( abs_file_esc <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> char * abs_dir_esc = r_str_escape_sh ( abspath_to_dir ) ; <S2SV_ModStart> ""cabextract<S2SV_blank>-d<S2SV_blank>\\""%s\\""<S2SV_blank>\\""%s\\"""" , abs_arch_esc , abs_dir_esc ) ; free ( abs_dir_esc ) ; free <S2SV_ModEnd> <S2SV_ModStart> free ( abs_arch_esc ) ; res = download_and_write ( opt , archive_name <S2SV_ModEnd> <S2SV_ModStart> && res ) { eprintf ( ""Attempting<S2SV_blank>to<S2SV_blank>decompress<S2SV_blank>pdb\\n"" ) ; if ( res && <S2SV_ModEnd> <S2SV_ModStart> free ( archive_name ) ; free ( abspath_to_archive <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> res = download_and_write ( opt , opt -> dbg_file ) ; } free ( abspath_to_file <S2SV_ModEnd> "
5426,<S2SV_StartBug> spl_handler_ArrayObject . get_debug_info = spl_array_get_debug_info ; <S2SV_EndBug> ,<S2SV_ModStart> ; spl_handler_ArrayObject . get_gc = spl_array_get_gc 
5427,<S2SV_StartBug> kfree ( cmd ) ; <S2SV_EndBug> ,"<S2SV_ModStart> kfree_skb ( ack_skb ) ; error_msg_to_dev : error_alloc : d_fnend ( 4 , dev , ""(wimax_dev<S2SV_blank>%p<S2SV_blank>state<S2SV_blank>%d)<S2SV_blank>=<S2SV_blank>%d\\n"" , wimax_dev , state , result ) ; <S2SV_ModStart>  <S2SV_ModEnd> "
5428,"<S2SV_StartBug> } else if ( strcmp ( tokens [ 1 ] . value , ""mode"" ) == 0 && ntokens >= 3 && <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( tokens [ 1 ] . value , ""temp_ttl"" ) == 0 && ntokens >= 3 && <S2SV_EndBug> ",<S2SV_ModStart> 4 <S2SV_ModEnd> <S2SV_ModStart> 4 <S2SV_ModEnd> 
5429,"<S2SV_StartBug> ZeroMemory ( & credssp -> authInfo , sizeof ( SecBuffer ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> ) ; SecInvalidateHandle ( & credssp -> context 
5430,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && src -> data [ plane ] ; plane ++ ) <S2SV_EndBug> ,<S2SV_ModStart> [ plane ] && src -> linesize 
5431,"<S2SV_StartBug> int aff = sqlite3TableColumnAffinity ( pExpr -> y . pTab , pExpr -> iColumn ) ; <S2SV_EndBug> ",<S2SV_ModStart> ; if ( pExpr -> y . pTab ) { aff <S2SV_ModStart> } else { aff = pExpr -> affExpr ; } 
5432,<S2SV_StartBug> kfree ( inet -> opt ) ; <S2SV_EndBug> ,"<S2SV_ModStart> rcu_dereference_protected ( inet -> inet_opt , 1 ) <S2SV_ModEnd> "
5433,"<S2SV_StartBug> if ( ! c -> c_normalize && ! init_normalization ( c ) ) { <S2SV_EndBug> <S2SV_StartBug> PyTuple_SET_ITEM ( c -> c_normalize_args , 1 , id ) ; <S2SV_EndBug> <S2SV_StartBug> id2 = PyObject_Call ( c -> c_normalize , c -> c_normalize_args , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> PyObject * form ; PyObject * args [ 2 ] ; _Py_IDENTIFIER ( NFKC ) ; <S2SV_ModStart> form = _PyUnicode_FromId ( & PyId_NFKC ) ; if ( form == NULL ) { Py_DECREF ( id ) ; return NULL ; } args [ 0 ] = form ; args [ 1 ] = id ; id2 = _PyObject_FastCall <S2SV_ModEnd> <S2SV_ModStart> args , 2 ) ; Py_DECREF ( id ) ; if ( ! id2 ) return NULL ; if ( ! PyUnicode_Check ( id2 ) ) { PyErr_Format ( PyExc_TypeError , ""unicodedata.normalize()<S2SV_blank>must<S2SV_blank>return<S2SV_blank>a<S2SV_blank>string,<S2SV_blank>not<S2SV_blank>"" ""%.200s"" , Py_TYPE ( id2 ) -> tp_name ) ; Py_DECREF ( id2 ) ; return NULL ; } <S2SV_ModEnd> "
5434,<S2SV_StartBug> if ( pdu -> securityStateRef && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> sptr = find_sec_mod ( newpdu -> securityModel ) ; if ( sptr && sptr -> pdu_clone ) { ret = sptr -> pdu_clone ( pdu , newpdu <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5435,"<S2SV_StartBug> while ( impeg2d_bit_stream_nxt ( ps_stream , MB_ESCAPE_CODE_LEN ) == MB_ESCAPE_CODE ) <S2SV_EndBug> ",<S2SV_ModStart> && ps_stream -> u4_offset < ps_stream -> u4_max_offset 
5436,"<S2SV_StartBug> struct dw2102_state * state = d -> priv ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x02 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x83 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x83 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x51 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 1 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> err ( ""command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed."" ) ; <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> mutex_lock ( & d -> data_mutex ) ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0x80 ; state -> data [ 2 ] = 0x0 ; <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data <S2SV_ModEnd> <S2SV_ModStart> state -> data , 1 , state -> data <S2SV_ModEnd> <S2SV_ModStart> ) ; mutex_unlock ( & d -> data_mutex "
5437,"<S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug> <S2SV_StartBug> * val = ( tmp & 0x80000000 ) ? ( - JAS_CAST ( longlong , ( ( ( ~ tmp ) & <S2SV_EndBug> <S2SV_StartBug> 0x7fffffff ) + 1 ) ) ) : JAS_CAST ( longlong , tmp ) ; <S2SV_EndBug> ",<S2SV_ModStart> jas_ulonglong <S2SV_ModEnd> <S2SV_ModStart> jas_longlong <S2SV_ModEnd> <S2SV_ModStart> jas_longlong <S2SV_ModEnd> 
5438,"<S2SV_StartBug> if ( perf_event_overflow ( event , 0 , data , regs ) ) <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
5439,"<S2SV_StartBug> mrb_value value ; <S2SV_EndBug> <S2SV_StartBug> fiber_check_cfunc ( mrb , c ) ; <S2SV_EndBug> <S2SV_StartBug> if ( resume && c -> status == MRB_FIBER_TRANSFERRED ) { <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_RUNNING || c -> status == MRB_FIBER_RESUMED ) { <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_TERMINATED ) { <S2SV_EndBug> <S2SV_StartBug> mrb -> c -> status = resume ? MRB_FIBER_RESUMED : MRB_FIBER_TRANSFERRED ; <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_CREATED ) { <S2SV_EndBug> <S2SV_StartBug> if ( len >= c -> stend - c -> stack ) { <S2SV_EndBug> <S2SV_StartBug> fiber_switch_context ( mrb , c ) ; <S2SV_EndBug> ","<S2SV_ModStart> enum mrb_fiber_state status ; <S2SV_ModStart> ; status = c -> status <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> old_c <S2SV_ModEnd> <S2SV_ModStart> fiber_switch_context ( mrb , c ) ; if ( <S2SV_ModEnd> <S2SV_ModStart> mrb_stack_extend ( mrb , len + 2 ) ; <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5440,"<S2SV_StartBug> n = s -> method -> ssl_get_message ( s , <S2SV_EndBug> <S2SV_StartBug> if ( ! ok ) return ( ( int ) n ) ; <S2SV_EndBug> <S2SV_StartBug> # ifndef OPENSSL_NO_PSK <S2SV_EndBug> <S2SV_StartBug> if ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kPSK ) <S2SV_EndBug> ","<S2SV_ModStart> EVP_MD_CTX_init ( & md_ctx ) ; <S2SV_ModStart> ; alg_k = s -> s3 -> tmp . new_cipher -> algorithm_mkey <S2SV_ModStart> if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } <S2SV_ModStart> alg_k & SSL_kPSK ) { s -> session -> sess_cert = ssl_sess_cert_new ( ) ; if ( s -> ctx -> psk_identity_hint ) OPENSSL_free ( s -> ctx -> psk_identity_hint ) ; s -> ctx -> psk_identity_hint = NULL ; } # endif s -> s3 -> tmp . reuse_message = 1 ; return ( 1 ) ; } param = p = ( unsigned char * ) s -> init_msg ; if ( s -> session -> sess_cert != NULL ) { # ifndef OPENSSL_NO_RSA if ( s -> session -> sess_cert -> peer_rsa_tmp != NULL ) { RSA_free ( s -> session -> sess_cert -> peer_rsa_tmp ) ; s -> session -> sess_cert -> peer_rsa_tmp = NULL ; } # endif # ifndef OPENSSL_NO_DH if ( s -> session -> sess_cert -> peer_dh_tmp ) { DH_free ( s -> session -> sess_cert -> peer_dh_tmp ) ; s -> session -> sess_cert -> peer_dh_tmp = NULL ; } # endif # ifndef OPENSSL_NO_ECDH if ( s -> session -> sess_cert -> peer_ecdh_tmp ) { EC_KEY_free ( s -> session -> sess_cert -> peer_ecdh_tmp ) ; s -> session -> sess_cert -> peer_ecdh_tmp = NULL ; } # endif } else { s -> session -> sess_cert = ssl_sess_cert_new ( ) ; } param_len = 0 ; alg_a = <S2SV_ModStart> algorithm_auth <S2SV_ModEnd> "
5441,"<S2SV_StartBug> static void write_mv_update ( const vp9_tree_index * tree , <S2SV_EndBug> <S2SV_StartBug> vp9_prob probs [ ] , <S2SV_EndBug> <S2SV_StartBug> int n , vp9_writer * w ) { <S2SV_EndBug> ",<S2SV_ModStart> vpx_tree_index <S2SV_ModEnd> <S2SV_ModStart> vpx_prob <S2SV_ModEnd> <S2SV_ModStart> vpx_writer <S2SV_ModEnd> 
5442,<S2SV_StartBug> if ( val == 0 && sp -> do_auto_asconf ) { <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ,<S2SV_ModStart> spin_lock_bh ( & sock_net ( sk ) -> sctp . addr_wq_lock ) ; <S2SV_ModStart> spin_unlock_bh ( & sock_net ( sk ) -> sctp . addr_wq_lock ) ; 
5443,"<S2SV_StartBug> int len = mutt_b64_decode ( buffer , encoded ) ; <S2SV_EndBug> ","<S2SV_ModStart> , sizeof ( buffer ) "
5444,<S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5445,"<S2SV_StartBug> void vp9_iht4x4_16_add_c ( const int16_t * input , uint8_t * dest , int stride , <S2SV_EndBug> <S2SV_StartBug> { idct4 , idct4 } , <S2SV_EndBug> <S2SV_StartBug> int16_t out [ 4 * 4 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t * outptr = out ; <S2SV_EndBug> <S2SV_StartBug> int16_t temp_in [ 4 ] , temp_out [ 4 ] ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < 4 ; ++ j ) <S2SV_EndBug> <S2SV_StartBug> dest [ j * stride + i ] = clip_pixel ( ROUND_POWER_OF_TWO ( temp_out [ j ] , 4 ) <S2SV_EndBug> <S2SV_StartBug> + dest [ j * stride + i ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> idct4_c , idct4_c } , { iadst4_c , idct4_c } , { idct4_c , iadst4_c } , { iadst4_c , iadst4_c <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> clip_pixel_add ( <S2SV_ModEnd> <S2SV_ModStart> , ROUND_POWER_OF_TWO ( temp_out [ j ] , 4 ) ) ; } <S2SV_ModEnd> "
5446,"<S2SV_StartBug> if ( ! chrooted && strncmp ( dir , home , strlen ( home ) ) ) { <S2SV_EndBug> ",<S2SV_ModStart> rpath <S2SV_ModEnd> 
5447,<S2SV_StartBug> pinctrl_unregister ( gpio_dev -> pctrl ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5448,"<S2SV_StartBug> size_t l = 0 ; <S2SV_EndBug> <S2SV_StartBug> ptr += strspn ( ptr , ""\\r\\n\\t<S2SV_blank>"" ) ; <S2SV_EndBug> <S2SV_StartBug> l = strcspn ( ptr , ""\\r\\n\\t<S2SV_blank>"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> int wv , w1 , w2 , w3 , w4 ; int tmpval [ 4 ] ; int tmpcnt <S2SV_ModEnd> <S2SV_ModStart> while ( ptr < buf + len && ( * ptr == '<S2SV_blank>' || * ptr == '\\t' || * ptr == '\\n' || * ptr == '\\r' ) ) { ptr ++ ; } <S2SV_ModEnd> <S2SV_ModStart> if ( ( wv = base64_table [ ( int ) ( unsigned char ) * ptr ++ ] ) == - 1 ) { continue ; } tmpval [ tmpcnt ++ ] = wv ; if ( tmpcnt == 4 ) { tmpcnt = 0 ; w1 = tmpval [ 0 ] ; w2 = tmpval [ 1 ] ; w3 = tmpval [ 2 ] ; w4 = tmpval [ 3 ] ; if ( w2 >= 0 ) { outbuf [ p ++ ] = ( unsigned char ) ( ( ( w1 << 2 ) + ( w2 >> 4 ) ) & 0xFF ) ; } if ( w3 >= 0 ) { outbuf [ p ++ ] = ( unsigned char ) ( ( ( w2 << 4 ) + ( w3 >> 2 ) ) & 0xFF ) ; } if ( w4 >= 0 ) { outbuf [ p ++ ] = ( unsigned char ) ( ( ( w3 << 6 ) + w4 ) & 0xFF ) ; } <S2SV_ModEnd> "
5449,<S2SV_StartBug> if ( likely ( walk . nbytes == nbytes ) ) <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5450,<S2SV_StartBug> rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ] ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx , ""Invalid<S2SV_blank>image<S2SV_blank>dimensions"" ) ; goto done ; } "
5451,"<S2SV_StartBug> int tlen ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( * vqp_common_header ) ; <S2SV_EndBug> <S2SV_StartBug> vqp_obj_type = EXTRACT_32BITS ( vqp_obj_tlv -> obj_type ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( vqp_obj_type ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""%s<S2SV_blank>(0x%08x)"" , ipaddr_string ( ndo , tptr ) , EXTRACT_32BITS ( tptr ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> case VQP_OBJ_MAC_NULL : <S2SV_EndBug> ",<S2SV_ModStart> u_int <S2SV_ModEnd> <S2SV_ModStart> ; if ( sizeof ( struct vqp_common_header_t ) > tlen ) goto trunc <S2SV_ModStart> ND_TCHECK ( * vqp_obj_tlv ) ; if ( sizeof ( struct vqp_obj_tlv_t ) > tlen ) goto trunc ; <S2SV_ModStart> if ( vqp_obj_len > tlen ) goto trunc ; <S2SV_ModStart> if ( vqp_obj_len != 4 ) goto trunc ; <S2SV_ModStart> if ( vqp_obj_len != ETHER_ADDR_LEN ) goto trunc ; 
5452,<S2SV_StartBug> for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> ,<S2SV_ModStart> && frame -> linesize [ plane ] 
5453,<S2SV_StartBug> exit_io_context ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> tsk 
5454,<S2SV_StartBug> if ( key_is_instantiated ( key ) ) { <S2SV_EndBug> ,<S2SV_ModStart> key_is_positive <S2SV_ModEnd> 
5455,<S2SV_StartBug> static void pcrypt_free ( struct crypto_instance * inst ) <S2SV_EndBug> <S2SV_StartBug> struct pcrypt_instance_ctx * ctx = crypto_instance_ctx ( inst ) ; <S2SV_EndBug> ,<S2SV_ModStart> aead_instance <S2SV_ModEnd> <S2SV_ModStart> aead_instance_ctx <S2SV_ModEnd> 
5456,"<S2SV_StartBug> uint8_t value ; <S2SV_EndBug> <S2SV_StartBug> 0 , reg , & value , 1 , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret >= 0 ? value : ret ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> * buffer ; uint8_t value ; buffer = kmalloc ( 1 , GFP_KERNEL ) ; if ( ! buffer ) return - ENOMEM <S2SV_ModEnd> <S2SV_ModStart> buffer <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> ) { value = buffer [ 0 ] ; kfree ( buffer ) ; return value ; } else { kfree ( buffer ) ; return <S2SV_ModEnd> <S2SV_ModStart> } "
5457,"<S2SV_StartBug> int main_loop ( int argc , const char * * argv_ ) { <S2SV_EndBug> <S2SV_StartBug> int do_md5 = 0 , progress = 0 ; <S2SV_EndBug> <S2SV_StartBug> int ec_enabled = 0 ; <S2SV_EndBug> <S2SV_StartBug> vpx_codec_dec_cfg_t cfg = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> int frame_avail , got_data ; <S2SV_EndBug> <S2SV_StartBug> struct ExternalFrameBufferList ext_fb_list = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> struct VpxDecInputContext input = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> struct VpxInputContext vpx_input_ctx = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> struct WebmInputContext webm_ctx = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> input . vpx_input_ctx = & vpx_input_ctx ; <S2SV_EndBug> <S2SV_StartBug> } else if ( arg_match ( & arg , & use_i420 , argi ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( arg_match ( & arg , & flipuvarg , argi ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( arg_match ( & arg , & verbosearg , argi ) ) <S2SV_EndBug> <S2SV_StartBug> num_external_frame_buffers = arg_parse_uint ( & arg ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! fn ) <S2SV_EndBug> <S2SV_StartBug> usage_exit ( ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , ""Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>file<S2SV_blank>\'%s\'"" , strcmp ( fn , ""-"" ) ? fn : ""stdin"" ) ; <S2SV_EndBug> <S2SV_StartBug> ""<S2SV_blank>try<S2SV_blank>--i420<S2SV_blank>or<S2SV_blank>--yv12.\\n"" ) ; <S2SV_EndBug> <S2SV_StartBug> ( ec_enabled ? VPX_CODEC_USE_ERROR_CONCEALMENT : 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_dec_init ( & decoder , interface -> interface ( ) , & cfg , dec_flags ) ) { <S2SV_EndBug> <S2SV_StartBug> int corrupted ; <S2SV_EndBug> <S2SV_StartBug> goto fail ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> vpx_usec_timer_start ( & timer ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_control ( & decoder , VP8D_GET_FRAME_CORRUPTED , & corrupted ) ) { <S2SV_EndBug> <S2SV_StartBug> warn ( ""Failed<S2SV_blank>VP8_GET_FRAME_CORRUPTED:<S2SV_blank>%s"" , vpx_codec_error ( & decoder ) ) ; <S2SV_EndBug> <S2SV_StartBug> scaled_img = vpx_img_alloc ( NULL , VPX_IMG_FMT_I420 , display_width , <S2SV_EndBug> <S2SV_StartBug> display_height , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_image_scale ( img , scaled_img , kFilterBox ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( frame_out == 1 ) { <S2SV_EndBug> <S2SV_StartBug> & vpx_input_ctx . framerate , img -> fmt ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( stop_after && frame_in >= stop_after ) <S2SV_EndBug> <S2SV_StartBug> if ( scaled_img ) vpx_img_free ( scaled_img ) ; <S2SV_EndBug> ","<S2SV_ModStart> static <S2SV_ModStart> , frame_parallel = 0 <S2SV_ModStart> = 0 ; int keep_going <S2SV_ModStart> int opt_yv12 = 0 ; int opt_i420 = 0 ; <S2SV_ModStart> , 0 , 0 } ; # if CONFIG_VP9_HIGHBITDEPTH int output_bit_depth = 0 ; # endif <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH vpx_image_t * img_shifted = NULL ; # endif <S2SV_ModStart> , flush_decoder = 0 <S2SV_ModStart> , NULL <S2SV_ModStart> NULL , NULL <S2SV_ModEnd> <S2SV_ModStart> ; # if CONFIG_WEBM_IO <S2SV_ModEnd> <S2SV_ModStart> ; memset ( & ( webm_ctx ) , 0 , sizeof ( webm_ctx ) ) <S2SV_ModEnd> <S2SV_ModStart> webm_ctx = & webm_ctx ; # endif input . <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> opt_yv12 = 1 ; # if CONFIG_VP9_HIGHBITDEPTH output_bit_depth = 8 ; # endif <S2SV_ModStart> opt_i420 = 1 ; <S2SV_ModStart> rawvideo , argi ) ) { use_y4m = 0 ; } else if ( arg_match ( & arg , & <S2SV_ModStart> # if CONFIG_VP9_DECODER || CONFIG_VP10_DECODER <S2SV_ModStart> frameparallelarg , argi ) ) frame_parallel = 1 ; # endif else if ( arg_match ( & arg , & <S2SV_ModStart> else if ( arg_match ( & arg , & continuearg , argi ) ) keep_going = 1 ; # if CONFIG_VP9_HIGHBITDEPTH else if ( arg_match ( & arg , & outbitdeptharg , argi ) ) { output_bit_depth = arg_parse_uint ( & arg ) ; } # endif <S2SV_ModStart> { free ( argv ) ; <S2SV_ModStart> } <S2SV_ModStart> fatal ( ""Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>input<S2SV_blank>file<S2SV_blank>\'%s\'"" <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ""<S2SV_blank>try<S2SV_blank>--i420<S2SV_blank>or<S2SV_blank>--yv12<S2SV_blank>or<S2SV_blank>--rawvideo.\\n"" <S2SV_ModEnd> <S2SV_ModStart> | ( frame_parallel ? VPX_CODEC_USE_FRAME_THREADING : 0 ) <S2SV_ModStart> codec_interface ( ) , <S2SV_ModEnd> <S2SV_ModStart> = 0 <S2SV_ModStart> if ( ! keep_going ) <S2SV_ModStart> else { flush_decoder = 1 ; } } else { flush_decoder = 1 ; <S2SV_ModStart> if ( flush_decoder ) { if ( vpx_codec_decode ( & decoder , NULL , 0 , NULL , 0 ) ) { warn ( ""Failed<S2SV_blank>to<S2SV_blank>flush<S2SV_blank>decoder:<S2SV_blank>%s"" , vpx_codec_error ( & decoder ) ) ; } } <S2SV_ModStart> ! frame_parallel && <S2SV_ModStart> if ( ! keep_going ) <S2SV_ModStart> img -> fmt <S2SV_ModEnd> <S2SV_ModStart> ; scaled_img -> bit_depth = img -> bit_depth <S2SV_ModStart> # if CONFIG_LIBYUV libyuv_scale <S2SV_ModEnd> <S2SV_ModStart> # else fprintf ( stderr , ""Failed<S2SV_blank><S2SV_blank>to<S2SV_blank>scale<S2SV_blank>output<S2SV_blank>frame:<S2SV_blank>%s.\\n"" ""Scaling<S2SV_blank>is<S2SV_blank>disabled<S2SV_blank>in<S2SV_blank>this<S2SV_blank>configuration.<S2SV_blank>"" ""To<S2SV_blank>enable<S2SV_blank>scaling,<S2SV_blank>configure<S2SV_blank>with<S2SV_blank>--enable-libyuv\\n"" , vpx_codec_error ( & decoder ) ) ; return EXIT_FAILURE ; # endif } } # if CONFIG_VP9_HIGHBITDEPTH if ( ! output_bit_depth ) { output_bit_depth = img -> bit_depth ; } if ( output_bit_depth != img -> bit_depth ) { const vpx_img_fmt_t shifted_fmt = output_bit_depth == 8 ? img -> fmt ^ ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) : img -> fmt | VPX_IMG_FMT_HIGHBITDEPTH ; if ( img_shifted && img_shifted_realloc_required ( img , img_shifted , shifted_fmt ) ) { vpx_img_free ( img_shifted ) ; img_shifted = NULL ; } if ( ! img_shifted ) { img_shifted = vpx_img_alloc ( NULL , shifted_fmt , img -> d_w , img -> d_h , 16 ) ; img_shifted -> bit_depth = output_bit_depth ; } if ( output_bit_depth > img -> bit_depth ) { vpx_img_upshift ( img_shifted , img , output_bit_depth - img -> bit_depth ) ; } else { vpx_img_downshift ( img_shifted , img , img -> bit_depth - output_bit_depth ) ; } img = img_shifted ; } # endif <S2SV_ModEnd> <S2SV_ModStart> img -> fmt == VPX_IMG_FMT_I440 || img -> fmt == VPX_IMG_FMT_I44016 ) { fprintf ( stderr , ""Cannot<S2SV_blank>produce<S2SV_blank>y4m<S2SV_blank>output<S2SV_blank>for<S2SV_blank>440<S2SV_blank>sampling.\\n"" ) ; goto fail ; } if ( <S2SV_ModStart> , img -> bit_depth <S2SV_ModStart> else { if ( frame_out == 1 ) { if ( opt_i420 ) { if ( img -> fmt != VPX_IMG_FMT_I420 && img -> fmt != VPX_IMG_FMT_I42016 ) { fprintf ( stderr , ""Cannot<S2SV_blank>produce<S2SV_blank>i420<S2SV_blank>output<S2SV_blank>for<S2SV_blank>bit-stream.\\n"" ) ; goto fail ; } } if ( opt_yv12 ) { if ( ( img -> fmt != VPX_IMG_FMT_I420 && img -> fmt != VPX_IMG_FMT_YV12 ) || img -> bit_depth != 8 ) { fprintf ( stderr , ""Cannot<S2SV_blank>produce<S2SV_blank>yv12<S2SV_blank>output<S2SV_blank>for<S2SV_blank>bit-stream.\\n"" ) ; goto fail ; } } } } <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( img_shifted ) vpx_img_free ( img_shifted ) ; # endif "
5458,"<S2SV_StartBug> if ( copy_from_user ( & tx32 , utp , sizeof ( struct compat_timex ) ) ) <S2SV_EndBug> ","<S2SV_ModStart> memset ( txc , 0 , sizeof ( struct timex ) ) ; "
5459,<S2SV_StartBug> if ( key_is_instantiated ( key ) ) { <S2SV_EndBug> ,<S2SV_ModStart> key_is_positive <S2SV_ModEnd> 
5460,"<S2SV_StartBug> return __blkdev_driver_ioctl ( fc -> dev -> bdev , fc -> dev -> mode , cmd , arg ) ; <S2SV_EndBug> ","<S2SV_ModStart> struct dm_dev * dev = fc -> dev ; int r = 0 ; if <S2SV_ModEnd> <S2SV_ModStart> start || ti -> len != i_size_read ( dev -> bdev -> bd_inode ) >> SECTOR_SHIFT ) r = scsi_verify_blk_ioctl ( NULL , cmd ) ; return r ? : __blkdev_driver_ioctl ( <S2SV_ModStart>  <S2SV_ModEnd> "
5461,"<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> ret = sscanf ( argv [ i ] + 1 , ""prestring=%s"" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( len = strlen ( buf ) ) > L_BUF_SIZE - 3 ) { <S2SV_EndBug> <S2SV_StartBug> ret = sscanf ( argv [ i ] + 1 , ""protos=%s"" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""cpp<S2SV_blank>-ansi<S2SV_blank>-DNO_PROTOS<S2SV_blank>%s<S2SV_blank>%s"" , <S2SV_EndBug> ","<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> ""prestring=%490s"" <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> ""protos=%490s"" <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> "
5462,"<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%s.data.%d"" , gplot -> rootname , gplot -> nplots ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , ""%f<S2SV_blank>%f\\n"" , valx , valy ) ; <S2SV_EndBug> ",<S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> L_BUFSIZE <S2SV_ModEnd> 
5463,"<S2SV_StartBug> struct mount * n , * p ; <S2SV_EndBug> <S2SV_StartBug> if ( p == dest_master || IS_MNT_MARKED ( p ) ) { <S2SV_EndBug> ","<S2SV_ModStart> ; bool done <S2SV_ModStart> break ; } do { struct mount * parent = last_source -> mnt_parent ; if ( last_source == first_source ) break ; done = parent -> mnt_master == p ; if ( done && peers ( n , parent ) ) break ; last_source = last_source -> mnt_master ; } while ( ! done ) ; <S2SV_ModEnd> "
5464,"<S2SV_StartBug> slapi_send_ldap_result ( pb , LDAP_NO_SUCH_OBJECT , NULL , NULL , 0 , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> slapi_send_ldap_result ( pb , LDAP_INAPPROPRIATE_AUTH , NULL , NULL , 0 , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> slapi_send_ldap_result ( pb , LDAP_INVALID_CREDENTIALS , NULL , NULL , 0 , NULL ) ; <S2SV_EndBug> ","<S2SV_ModStart> slapi_pblock_set ( pb , SLAPI_PB_RESULT_TEXT , ""Entry<S2SV_blank>does<S2SV_blank>not<S2SV_blank>exist"" ) ; slapi_send_ldap_result ( pb , LDAP_INVALID_CREDENTIALS <S2SV_ModEnd> <S2SV_ModStart> slapi_pblock_set ( pb , SLAPI_PB_RESULT_TEXT , ""Entry<S2SV_blank>does<S2SV_blank>not<S2SV_blank>have<S2SV_blank>userpassword<S2SV_blank>set"" ) ; slapi_send_ldap_result ( pb , LDAP_INVALID_CREDENTIALS <S2SV_ModEnd> <S2SV_ModStart> slapi_pblock_set ( pb , SLAPI_PB_RESULT_TEXT , ""Invalid<S2SV_blank>credentials"" ) ; "
5465,<S2SV_StartBug> vpn_packet_t outpkt ; <S2SV_EndBug> ,<S2SV_ModStart> ; if ( len > sizeof outpkt . data ) return 
5466,<S2SV_StartBug> last_source = source_mnt ; <S2SV_EndBug> ,<S2SV_ModStart> first_source = source_mnt ; 
5467,"<S2SV_StartBug> if ( ! inode -> i_op -> set_acl || ! IS_POSIXACL ( inode ) ) <S2SV_EndBug> <S2SV_StartBug> host_error = inode -> i_op -> set_acl ( inode , pacl , ACL_TYPE_ACCESS ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_release ; <S2SV_EndBug> <S2SV_StartBug> host_error = inode -> i_op -> set_acl ( inode , dpacl , <S2SV_EndBug> <S2SV_StartBug> out_release : <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> fh_lock ( fhp ) ; host_error = set_posix_acl ( inode , ACL_TYPE_ACCESS , pacl <S2SV_ModEnd> <S2SV_ModStart> out_drop_lock <S2SV_ModEnd> <S2SV_ModStart> set_posix_acl ( inode , ACL_TYPE_DEFAULT , dpacl <S2SV_ModEnd> <S2SV_ModStart> out_drop_lock : fh_unlock ( fhp ) ; <S2SV_ModEnd> "
5468,<S2SV_StartBug> assert ( bi != NULL ) ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5469,"<S2SV_StartBug> unsigned long off ; <S2SV_EndBug> <S2SV_StartBug> if ( vma -> vm_pgoff > ( ~ 0UL >> PAGE_SHIFT ) ) <S2SV_EndBug> <S2SV_StartBug> off = vma -> vm_pgoff << PAGE_SHIFT ; <S2SV_EndBug> <S2SV_StartBug> if ( fb -> fb_mmap ) { <S2SV_EndBug> <S2SV_StartBug> fb_pgprotect ( file , vma , off ) ; <S2SV_EndBug> ","<S2SV_ModStart> mmio_pgoff <S2SV_ModEnd> <S2SV_ModStart> fb = info -> fbops ; if ( ! fb ) return - ENODEV ; mutex_lock ( & info -> mm_lock ) ; if ( fb -> fb_mmap ) { int res ; res = fb -> fb_mmap ( info , vma ) ; mutex_unlock ( & info -> mm_lock ) ; return res ; } start = info -> fix . smem_start ; len = info -> fix . smem_len ; mmio_pgoff = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + len ) >> PAGE_SHIFT ; if ( <S2SV_ModEnd> <S2SV_ModStart> >= mmio_pgoff ) { vma -> vm_pgoff -= mmio_pgoff ; start = info -> fix . mmio_start ; len = info -> fix . mmio_len ; } mutex_unlock <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> start ) ; return vm_iomap_memory ( vma , start , len ) <S2SV_ModEnd> "
5470,<S2SV_StartBug> spl_handler_ArrayObject . get_debug_info = spl_array_get_debug_info ; <S2SV_EndBug> ,<S2SV_ModStart> ; spl_handler_ArrayObject . get_gc = spl_array_get_gc 
5471,<S2SV_StartBug> if ( mainprog_ptr -> width > INT_MAX / mainprog_ptr -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( mainprog_ptr -> rgba_data = malloc ( rowbytes * mainprog_ptr -> height ) ) == NULL ) { <S2SV_EndBug> ,"<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> rowbytes > INT_MAX / mainprog_ptr -> height ) { png_destroy_read_struct ( & png_ptr , & info_ptr , NULL ) ; return PNG_OUT_OF_MEMORY_ERROR ; } if ( "
5472,"<S2SV_StartBug> const uint8_t * p , u_int length , u_int caplen ) <S2SV_EndBug> <S2SV_StartBug> if ( caplen <= 1 ) { <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , ""\\n\\t"" , caplen ) ; <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , ""\\n\\t"" , caplen ) ; <S2SV_EndBug> <S2SV_StartBug> if ( caplen > 1 ) <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , ""\\n\\t"" , caplen ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ! ND_TTEST ( * p ) <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> <S2SV_ModStart> length <S2SV_ModEnd> 
5473,<S2SV_StartBug> xmep -> proc = EXTRACT_32BITS ( & rp -> rm_call . cb_proc ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! ND_TTEST ( rp -> rm_call . cb_proc ) ) return ( 0 ) ; <S2SV_ModStart> ) ; if ( ! ND_TTEST ( rp -> rm_call . cb_vers ) ) return ( 0 
5474,<S2SV_StartBug> flush_rq -> mq_ctx = first_rq -> mq_ctx ; <S2SV_EndBug> <S2SV_StartBug> flush_rq -> tag = first_rq -> tag ; <S2SV_EndBug> ,"<S2SV_ModStart> struct blk_mq_hw_ctx * hctx ; <S2SV_ModStart> ; fq -> orig_rq = first_rq ; hctx = q -> mq_ops -> map_queue ( q , first_rq -> mq_ctx -> cpu ) ; blk_mq_tag_set_rq ( hctx , first_rq -> tag , flush_rq ) "
5475,<S2SV_StartBug> overrun = timr -> it_overrun_last ; <S2SV_EndBug> ,"<S2SV_ModStart> timer_overrun_to_int ( timr , 0 ) <S2SV_ModEnd> "
5476,<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5477,<S2SV_StartBug> skipsize = LOGICAL_BLOCK_SIZE * vd -> location ; <S2SV_EndBug> <S2SV_StartBug> skipsize = LOGICAL_BLOCK_SIZE * vd -> location ; <S2SV_EndBug> ,<S2SV_ModStart> ( int64_t ) <S2SV_ModStart> ( int64_t ) 
5478,<S2SV_StartBug> if ( key_bytes_len < GROUP_KEY_MIN_LEN || key_bytes_len > eapol_len - sizeof ( EAPOL_RSN_KEY ) ) { <S2SV_EndBug> ,<S2SV_ModStart> ( <S2SV_ModStart> ) || ( eapol_len < sizeof ( EAPOL_RSN_KEY ) ) || ( <S2SV_ModEnd> <S2SV_ModStart> ) 
5479,"<S2SV_StartBug> memcpy ( & ualg -> cru_name , & alg -> cra_name , sizeof ( ualg -> cru_name ) ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ualg -> cru_driver_name , & alg -> cra_driver_name , <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ualg -> cru_module_name , module_name ( alg -> cra_module ) , <S2SV_EndBug> <S2SV_StartBug> CRYPTO_MAX_ALG_NAME ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( rl . type , CRYPTO_MAX_ALG_NAME , ""%s"" , ""larval"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> strncpy ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strncpy ( <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> strncpy ( <S2SV_ModEnd> <S2SV_ModStart> sizeof ( ualg -> cru_module_name ) ) ; ualg -> cru_type = 0 ; ualg -> cru_mask = 0 <S2SV_ModEnd> <S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> ""larval"" , sizeof ( rl . type ) <S2SV_ModEnd> "
5480,"<S2SV_StartBug> entries = kmalloc ( sizeof ( * entries ) * cmap -> len , GFP_KERNEL ) ; <S2SV_EndBug> ","<S2SV_ModStart> kmalloc_array ( cmap -> len , <S2SV_ModEnd> <S2SV_ModStart> , <S2SV_ModEnd> "
5481,<S2SV_StartBug> case LZX_BLOCKTYPE_UNCOMPRESSED : <S2SV_EndBug> ,"<S2SV_ModStart> if ( window_posn + this_run > lzx -> window_size ) { D ( ( ""match<S2SV_blank>ran<S2SV_blank>over<S2SV_blank>window<S2SV_blank>boundary"" ) ) return lzx -> error = MSPACK_ERR_DECRUNCH ; } "
5482,"<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> vp8_postproc_cfg_t * config = va_arg ( args , vp8_postproc_cfg_t * ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ctr_id ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
5483,"<S2SV_StartBug> vpx_memset ( seg -> tree_probs , 255 , sizeof ( seg -> tree_probs ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memset <S2SV_ModEnd> 
5484,"<S2SV_StartBug> jas_eprintf ( ""box<S2SV_blank>type<S2SV_blank>%s\\n"" , box -> info -> name ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""got<S2SV_blank>box<S2SV_blank>type<S2SV_blank>%s\\n"" <S2SV_ModEnd> "
5485,"<S2SV_StartBug> pgprot_t prot = __get_dma_pgprot ( attrs , pgprot_kernel ) ; <S2SV_EndBug> ",<S2SV_ModStart> PAGE_KERNEL <S2SV_ModEnd> 
5486,"<S2SV_StartBug> wait_for_unix_gc ( ) ; <S2SV_EndBug> <S2SV_StartBug> unix_state_lock ( other ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_flag ( other , SOCK_DEAD ) ) { <S2SV_EndBug> <S2SV_StartBug> err = 0 ; <S2SV_EndBug> <S2SV_StartBug> unix_state_lock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> unix_peer ( sk ) = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( unix_peer ( other ) != sk && unix_recvq_full ( other ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! timeo ) { <S2SV_EndBug> <S2SV_StartBug> goto out_unlock ; <S2SV_EndBug> <S2SV_StartBug> timeo = unix_wait_for_peer ( other , timeo ) ; <S2SV_EndBug> <S2SV_StartBug> unix_state_unlock ( other ) ; <S2SV_EndBug> ","<S2SV_ModStart> int sk_locked ; <S2SV_ModStart> sk_locked = 0 ; <S2SV_ModStart> restart_locked : <S2SV_ModStart> unlikely ( <S2SV_ModStart> ) <S2SV_ModStart> if ( ! sk_locked ) unix_state_lock ( sk ) ; <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; unix_dgram_peer_wake_disconnect_wakeup ( sk , other ) <S2SV_ModStart> unlikely ( <S2SV_ModStart> ) { if ( timeo ) { timeo = unix_wait_for_peer ( other , timeo ) ; err = sock_intr_errno ( timeo ) ; if ( signal_pending ( current ) ) goto out_free ; goto restart ; } <S2SV_ModEnd> <S2SV_ModStart> sk_locked ) { unix_state_unlock ( other ) ; unix_state_double_lock ( sk , other ) ; } if ( unix_peer ( sk ) != other || unix_dgram_peer_wake_me ( sk , other ) <S2SV_ModEnd> <S2SV_ModStart> sk_locked = 1 ; <S2SV_ModStart> if ( ! sk_locked ) { sk_locked = 1 ; goto restart_locked ; } } if ( unlikely ( sk_locked ) ) unix_state_unlock ( sk ) ; <S2SV_ModEnd> <S2SV_ModStart> if ( sk_locked ) unix_state_unlock ( sk ) ; "
5487,<S2SV_StartBug> alarm_timer = alarm_new ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( ! is_restricted_mode ( ) ) btif_config_remove_restricted ( config ) ; 
5488,"<S2SV_StartBug> # line 52 ""dt_test2.pgc"" <S2SV_EndBug> <S2SV_StartBug> # line 53 ""dt_test2.pgc"" <S2SV_EndBug> <S2SV_StartBug> # line 54 ""dt_test2.pgc"" <S2SV_EndBug> <S2SV_StartBug> # line 55 ""dt_test2.pgc"" <S2SV_EndBug> <S2SV_StartBug> # line 56 ""dt_test2.pgc"" <S2SV_EndBug> <S2SV_StartBug> # line 57 ""dt_test2.pgc"" <S2SV_EndBug> ",<S2SV_ModStart> 62 <S2SV_ModEnd> <S2SV_ModStart> 63 <S2SV_ModEnd> <S2SV_ModStart> 64 <S2SV_ModEnd> <S2SV_ModStart> 65 <S2SV_ModEnd> <S2SV_ModStart> 66 <S2SV_ModEnd> <S2SV_ModStart> 67 <S2SV_ModEnd> 
5489,"<S2SV_StartBug> if ( netal == 0 ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>%s"" , etheraddr_string ( ndo , snpa ) ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> snpal == 6 ) ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>SNPA<S2SV_blank>(length:<S2SV_blank>%u):<S2SV_blank>%s"" , snpal , etheraddr_string ( ndo , snpa ) ) ) ; else ND_PRINT ( ( ndo , ""\\n\\t<S2SV_blank><S2SV_blank>SNPA<S2SV_blank>(length:<S2SV_blank>%u):<S2SV_blank>%s"" , snpal , linkaddr_string ( ndo , snpa , LINKADDR_OTHER , snpal ) ) ) ; if ( netal != <S2SV_ModEnd> <S2SV_ModStart> ""\\n\\t<S2SV_blank><S2SV_blank>NET<S2SV_blank>(length:<S2SV_blank>%u)<S2SV_blank>%s"" , netal , <S2SV_ModEnd> "
5490,<S2SV_StartBug> lua_newtable ( L ) ; <S2SV_EndBug> ,"<S2SV_ModStart> ) ; luaL_checkstack ( L , 1 , ""in<S2SV_blank>function<S2SV_blank>mp_decode_to_lua_array"" "
5491,<S2SV_StartBug> struct hns_roce_ib_alloc_ucontext_resp resp ; <S2SV_EndBug> ,<S2SV_ModStart> = { } 
5492,<S2SV_StartBug> EXT4_DESC_PER_BLOCK ( sb ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if ( ext4_has_feature_meta_bg ( sb ) ) { if ( le32_to_cpu ( es -> s_first_meta_bg ) >= db_count ) { ext4_msg ( sb , KERN_WARNING , ""first<S2SV_blank>meta<S2SV_blank>block<S2SV_blank>group<S2SV_blank>too<S2SV_blank>large:<S2SV_blank>%u<S2SV_blank>"" ""(group<S2SV_blank>descriptor<S2SV_blank>block<S2SV_blank>count<S2SV_blank>%u)"" , le32_to_cpu ( es -> s_first_meta_bg ) , db_count ) ; goto failed_mount ; } } "
5493,<S2SV_StartBug> packet_size = le16_to_cpu ( alt -> endpoint [ 0 ] . desc . wMaxPacketSize ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( alt -> desc . bNumEndpoints < 1 ) { sd -> gspca_dev . usb_err = - ENODEV ; return ; } 
5494,"<S2SV_StartBug> fd = open ( path , O_WRONLY | O_CREAT | O_CLOEXEC | O_NOCTTY , mode > 0 ? mode : 0644 ) ; <S2SV_EndBug> ",<S2SV_ModStart> ( mode == 0 || mode == MODE_INVALID ) ? 0644 : mode <S2SV_ModEnd> 
5495,<S2SV_StartBug> dev -> header_ops = NULL ; <S2SV_EndBug> ,<S2SV_ModStart> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> 
5496,<S2SV_StartBug> if ( rdf_parser -> uri_filter ) <S2SV_EndBug> ,"<S2SV_ModStart> raptor_sax2_set_option ( rdf_xml_parser -> sax2 , RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES , NULL , RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser , RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ; "
5497,"<S2SV_StartBug> if ( fd == - 1 ) ABRT ( EBADF , ""Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>file<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>graphics<S2SV_blank>transmission<S2SV_blank>with<S2SV_blank>error:<S2SV_blank>[%d]<S2SV_blank>%s"" , fname , errno , strerror ( errno ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> ""Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>file<S2SV_blank>for<S2SV_blank>graphics<S2SV_blank>transmission<S2SV_blank>with<S2SV_blank>error:<S2SV_blank>[%d]<S2SV_blank>%s"" <S2SV_ModEnd> "
5498,"<S2SV_StartBug> rds_info_copy ( iter , & minfo , sizeof ( minfo ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> minfo . flags = 0 ; 
5499,"<S2SV_StartBug> struct ip_options * opt ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( cork -> opt , opt , sizeof ( struct ip_options ) + opt -> optlen ) ; <S2SV_EndBug> ",<S2SV_ModStart> ip_options_rcu <S2SV_ModEnd> <S2SV_ModStart> & opt -> <S2SV_ModStart> opt . 
5500,"<S2SV_StartBug> if ( snprintf ( spath , sizeof ( spath ) , var , iface ) >= sizeof ( spath ) ) <S2SV_EndBug> ","<S2SV_ModStart> ) ) return - 1 ; if ( strstr ( name , "".."" ) || strchr ( name , '/' "
5501,<S2SV_StartBug> { <S2SV_EndBug> ,"<S2SV_ModStart> memset ( p , 0 , sizeof ( * p ) ) ; "
5502,"<S2SV_StartBug> assert_se ( touch_file ( path , true , USEC_INFINITY , UID_INVALID , GID_INVALID , 0 ) == 0 ) ; <S2SV_EndBug> ",<S2SV_ModStart> MODE_INVALID <S2SV_ModEnd> 
5503,"<S2SV_StartBug> const vp9_prob * context_tree , <S2SV_EndBug> ",<S2SV_ModStart> vpx_prob <S2SV_ModEnd> 
5504,"<S2SV_StartBug> strlcpy ( ualg -> cru_name , alg -> cra_name , sizeof ( ualg -> cru_name ) ) ; <S2SV_EndBug> <S2SV_StartBug> strlcpy ( ualg -> cru_driver_name , alg -> cra_driver_name , <S2SV_EndBug> <S2SV_StartBug> strlcpy ( ualg -> cru_module_name , module_name ( alg -> cra_module ) , <S2SV_EndBug> <S2SV_StartBug> strlcpy ( rl . type , ""larval"" , sizeof ( rl . type ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> strncpy <S2SV_ModEnd> <S2SV_ModStart> strncpy <S2SV_ModEnd> 
5505,"<S2SV_StartBug> if ( po -> rx_ring . pg_vec || po -> tx_ring . pg_vec ) <S2SV_EndBug> <S2SV_StartBug> return - EBUSY ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> ","<S2SV_ModStart> copy_from_user ( & val , optval , sizeof ( val ) ) ) return - EFAULT ; switch ( val ) { case TPACKET_V1 : case TPACKET_V2 : case TPACKET_V3 : break ; default : return - EINVAL ; } lock_sock ( sk ) ; if ( <S2SV_ModStart> { ret = <S2SV_ModEnd> <S2SV_ModStart> } else { <S2SV_ModEnd> <S2SV_ModStart> ret = 0 ; } release_sock ( sk ) ; return ret ; <S2SV_ModEnd> "
5506,<S2SV_StartBug> usb_conv_info -> class_data = u3v_conv_info ; <S2SV_EndBug> ,<S2SV_ModStart> ; usb_conv_info -> class_data_type = USB_CONV_U3V ; } else if ( usb_conv_info -> class_data_type != USB_CONV_U3V ) { return 0 
5507,<S2SV_StartBug> len -= cut ; <S2SV_EndBug> ,<S2SV_ModStart> + 1 
5508,"<S2SV_StartBug> void vp9_iht8x8_64_add_c ( const int16_t * input , uint8_t * dest , int stride , <S2SV_EndBug> <S2SV_StartBug> int16_t out [ 8 * 8 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t * outptr = out ; <S2SV_EndBug> <S2SV_StartBug> int16_t temp_in [ 8 ] , temp_out [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < 8 ; ++ j ) <S2SV_EndBug> <S2SV_StartBug> dest [ j * stride + i ] = clip_pixel ( ROUND_POWER_OF_TWO ( temp_out [ j ] , 5 ) <S2SV_EndBug> <S2SV_StartBug> + dest [ j * stride + i ] ) ; <S2SV_EndBug> ","<S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> tran_low_t <S2SV_ModEnd> <S2SV_ModStart> { <S2SV_ModStart> clip_pixel_add ( <S2SV_ModEnd> <S2SV_ModStart> , ROUND_POWER_OF_TWO ( temp_out [ j ] , 5 ) ) ; } <S2SV_ModEnd> "
5509,<S2SV_StartBug> static size_t scanned ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> 
5510,"<S2SV_StartBug> if ( test_opt ( sbi , FLUSH_MERGE ) && ! f2fs_readonly ( sbi -> sb ) ) { <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
5511,"<S2SV_StartBug> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , <S2SV_EndBug> <S2SV_StartBug> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , <S2SV_EndBug> <S2SV_StartBug> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , <S2SV_EndBug> <S2SV_StartBug> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , <S2SV_EndBug> ","<S2SV_ModStart> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.foo<S2SV_blank>==<S2SV_blank>\\""foo\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.empty<S2SV_blank>==<S2SV_blank>\\""\\""<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.empty()<S2SV_blank>==<S2SV_blank>\\""\\""<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[1].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>or<S2SV_blank>true<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[0]<S2SV_blank>==<S2SV_blank>0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[1]<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[256]<S2SV_blank>==<S2SV_blank>256<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[0]<S2SV_blank>==<S2SV_blank>\\""foo\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[2]<S2SV_blank>==<S2SV_blank>\\""baz\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\""foo\\""]<S2SV_blank>==<S2SV_blank>\\""foo\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\""bar\\""]<S2SV_blank>==<S2SV_blank>\\""bar\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2,3)<S2SV_blank>==<S2SV_blank>6<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0,3.0)<S2SV_blank>==<S2SV_blank>6.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>==<S2SV_blank>tests.foobar(1)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>!=<S2SV_blank>tests.foobar(2)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.length(\\""dummy\\"")<S2SV_blank>==<S2SV_blank>5<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" <S2SV_ModEnd> <S2SV_ModStart> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" <S2SV_ModEnd> <S2SV_ModStart> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" <S2SV_ModEnd> <S2SV_ModStart> ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\""foo\\"")<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\""bar\\"")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/i,\\""FOO\\\\nBAR\\"")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" , NULL ) ; assert_true_rule ( ""import<S2SV_blank>\\""tests\\""<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/is,\\""FOO\\\\nBAR\\"")<S2SV_blank>==<S2SV_blank>7\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}"" <S2SV_ModEnd> "
5512,<S2SV_StartBug> len = file ? file -> size : 4096 ; <S2SV_EndBug> ,<S2SV_ModStart> && file -> size > 0 
5513,"<S2SV_StartBug> skb = skb_recv_datagram ( sk , flags & ~ MSG_DONTWAIT , <S2SV_EndBug> ",<S2SV_ModStart> msg -> msg_namelen = 0 ; 
5514,"<S2SV_StartBug> static int set_registers ( rtl8150_t * dev , u16 indx , u16 size , void * data ) <S2SV_EndBug> <S2SV_StartBug> return usb_control_msg ( dev -> udev , usb_sndctrlpipe ( dev -> udev , 0 ) , <S2SV_EndBug> <S2SV_StartBug> indx , 0 , data , size , 500 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ","<S2SV_ModStart> const <S2SV_ModStart> void * buf ; int ret ; buf = kmemdup ( data , size , GFP_NOIO ) ; if ( ! buf ) return - ENOMEM ; ret = <S2SV_ModEnd> <S2SV_ModStart> buf <S2SV_ModEnd> <S2SV_ModStart> kfree ( buf ) ; return ret ; "
5515,<S2SV_StartBug> if ( * rsize >= 30 && rdesc [ 29 ] == 0x05 && rdesc [ 30 ] == 0x09 ) { <S2SV_EndBug> ,<S2SV_ModStart> 31 <S2SV_ModEnd> 
5516,<S2SV_StartBug> scratch = newscratch = malloc ( 2 * data -> set . buffer_size ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> UPLOAD_BUFSIZE <S2SV_ModEnd> <S2SV_ModStart> DEBUGASSERT ( UPLOAD_BUFSIZE >= nread ) ; 
5517,"<S2SV_StartBug> char * req_name [ ] = { ""Module"" , ""Expression"" , ""Interactive"" } ; <S2SV_EndBug> <S2SV_StartBug> assert ( 0 <= mode && mode <= 2 ) ; <S2SV_EndBug> ","<S2SV_ModStart> , ""FunctionType"" <S2SV_ModStart> 3 <S2SV_ModEnd> "
5518,"<S2SV_StartBug> int n , len ; <S2SV_EndBug> <S2SV_StartBug> memset ( & facilities , 0x00 , sizeof ( struct rose_facilities_struct ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! rose_parse_facilities ( skb -> data + len + 4 , & facilities ) ) { <S2SV_EndBug> ","<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ROSE_CALL_REQ_FACILITIES_OFF , skb -> len - ROSE_CALL_REQ_FACILITIES_OFF , <S2SV_ModEnd> "
5519,<S2SV_StartBug> case BGP_CAPCODE_MP : <S2SV_EndBug> ,<S2SV_ModStart> ND_TCHECK_8BITS ( opt + i + 5 ) ; 
5520,<S2SV_StartBug> iPinCount = iACLen - 1 ; <S2SV_EndBug> ,<S2SV_ModStart> > 0 ? iACLen - 1 : 0 <S2SV_ModEnd> 
5521,<S2SV_StartBug> if ( ctx -> state == BODY_CHUNK_END ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> state = BODY_CHUNK ; <S2SV_EndBug> <S2SV_StartBug> return APR_EGENERAL ; <S2SV_EndBug> <S2SV_StartBug> ctx -> chunkbits = sizeof ( long ) * 8 ; <S2SV_EndBug> <S2SV_StartBug> if ( c == ';' || c == CR ) { <S2SV_EndBug> <S2SV_StartBug> else if ( c == LF ) { <S2SV_EndBug> <S2SV_StartBug> int xvalue = 0 ; <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> return APR_EGENERAL ; <S2SV_EndBug> <S2SV_StartBug> ctx -> chunkbits -= 4 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,<S2SV_ModStart> || ctx -> state == BODY_CHUNK_END_LF <S2SV_ModStart> ; } else if ( c == CR && ctx -> state == BODY_CHUNK_END ) { ctx -> state = BODY_CHUNK_END_LF ; } else { return APR_EINVAL <S2SV_ModStart> APR_EINVAL <S2SV_ModEnd> <S2SV_ModStart> apr_off_t <S2SV_ModEnd> <S2SV_ModStart> LF ) { if ( ctx -> remaining ) { ctx -> state = BODY_CHUNK_DATA ; } else { ctx -> state = BODY_CHUNK_TRAILER ; } } else if ( ctx -> state == BODY_CHUNK_LF ) { return APR_EINVAL ; } else if ( c == CR ) { ctx -> state = BODY_CHUNK_LF ; } else if ( c == ';' <S2SV_ModEnd> <S2SV_ModStart> ctx -> state == BODY_CHUNK_EXT ) { if ( c != '\\t' && apr_iscntrl ( c ) ) { return APR_EINVAL ; } } else if ( ctx -> state == BODY_CHUNK_PART <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> ; } ctx -> chunkbits -= 4 ; if ( ctx -> chunkbits < 0 ) { return APR_ENOSPC <S2SV_ModStart> APR_EINVAL <S2SV_ModEnd> <S2SV_ModStart> if ( <S2SV_ModEnd> <S2SV_ModStart> } else { return APR_EGENERAL ; 
5522,"<S2SV_StartBug> pdf = calloc ( 1 , sizeof ( pdf_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> pdf -> name = malloc ( strlen ( n ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> pdf -> name = malloc ( strlen ( ""Unknown"" ) + 1 ) ; <S2SV_EndBug> ",<S2SV_ModStart> safe_calloc ( <S2SV_ModEnd> <S2SV_ModStart> safe_calloc <S2SV_ModEnd> <S2SV_ModStart> safe_calloc <S2SV_ModEnd> 
5523,<S2SV_StartBug> assert ( ( size & ( size - 1 ) ) == 0 ) ; <S2SV_EndBug> ,"<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> != 0 ) { pr_err ( ""%s:<S2SV_blank>Cannot<S2SV_blank>alloc<S2SV_blank>invalid<S2SV_blank>size<S2SV_blank>%lld<S2SV_blank>resource\\n"" , __func__ , size ) ; return - 1 ; } <S2SV_ModEnd> "
5524,"<S2SV_StartBug> krb5_data rspac ; <S2SV_EndBug> <S2SV_StartBug> krbtgt_out , <S2SV_EndBug> ","<S2SV_ModStart> ; const char * tgt_realm = krb5_principal_get_realm ( context , krbtgt -> entry . principal ) <S2SV_ModStart> tgt_realm , "
5525,<S2SV_StartBug> int is_valid ; <S2SV_EndBug> <S2SV_StartBug> giterr_clear ( ) ; <S2SV_EndBug> ,<S2SV_ModStart> = ( error == GIT_OK ) <S2SV_ModStart>  <S2SV_ModEnd> 
5526,"<S2SV_StartBug> if ( ioctl ( slot -> fd , FIONREAD , size ) == 0 ) { <S2SV_EndBug> ",<S2SV_ModStart> TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) 
5527,<S2SV_StartBug> if ( ret != ARCHIVE_OK && ret != ARCHIVE_WARN ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> ,<S2SV_ModStart> { <S2SV_ModStart> rar -> start_new_table = 1 ; } 
5528,"<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , sfar ) ; <S2SV_EndBug> ",<S2SV_ModStart>  <S2SV_ModEnd> 
5529,"<S2SV_StartBug> pkt = ctx -> iface -> enc . get_cx_data ( ctx -> priv -> alg_priv , iter ) ; <S2SV_EndBug> ",<S2SV_ModStart> get_alg_priv ( ctx ) <S2SV_ModEnd> 
5530,"<S2SV_StartBug> if ( vp9_segfeature_active ( seg , segment_id , SEG_LVL_ALT_Q ) ) { <S2SV_EndBug> <S2SV_StartBug> const int data = vp9_get_segdata ( seg , segment_id , SEG_LVL_ALT_Q ) ; <S2SV_EndBug> ",<S2SV_ModStart> segfeature_active <S2SV_ModEnd> <S2SV_ModStart> get_segdata <S2SV_ModEnd> 
5531,<S2SV_StartBug> config -> listeners [ config -> listener_count - 1 ] . security_options . password_file = config -> default_listener . security_options . password_file ; <S2SV_EndBug> ,<S2SV_ModStart> acl_file = config -> default_listener . security_options . acl_file ; config -> listeners [ config -> listener_count - 1 ] . security_options . 
5532,"<S2SV_StartBug> vpx_memcpy ( dest_ptr2 , src_ptr2 , plane_stride ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr2 , src_ptr2 , plane_stride ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr2 , src_ptr2 , plane_stride ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
5533,"<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horDiff32 ( tif , cp0 , cc ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if ( ! <S2SV_ModStart> ) return 0 <S2SV_ModStart> return 1 ; 
5534,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( ( UWORD8 * ) ps_bitstrm -> pu4_buf > ps_bitstrm -> pu1_buf_max ) { return IHEVCD_INVALID_PARAMETER ; } 
5535,"<S2SV_StartBug> void vp9_encode_mv ( VP9_COMP * cpi , vp9_writer * w , <S2SV_EndBug> <S2SV_StartBug> if ( ! cpi -> dummy_packing && cpi -> sf . auto_mv_step_size ) { <S2SV_EndBug> ",<S2SV_ModStart> vpx_writer <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart> . mv 
5536,"<S2SV_StartBug> for ( out = escaped , len = 0 ; * text ; ++ len , ++ out , ++ text ) { <S2SV_EndBug> ","<S2SV_ModStart> if ( ! strlen ( text ) ) return ""empty<S2SV_blank>string"" ; "
5537,"<S2SV_StartBug> if ( cm -> last_frame_seg_map ) <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cm -> last_frame_seg_map , 0 , ( cm -> mi_rows * cm -> mi_cols ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_init_mode_probs ( & cm -> fc ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_init_mv_probs ( cm ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_contexts [ i ] = cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_contexts [ cm -> frame_context_idx ] = cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> if ( frame_is_intra_only ( cm ) ) <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cm -> prev_mip , 0 , cm -> mi_stride * ( cm -> mi_rows + 1 ) * <S2SV_EndBug> <S2SV_StartBug> sizeof ( * cm -> prev_mip ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> && ! cm -> frame_parallel_decode ) memset <S2SV_ModEnd> <S2SV_ModStart> , 0 , ( cm -> mi_rows * cm -> mi_cols ) ) ; if ( cm -> current_frame_seg_map ) memset ( cm -> current_frame_seg_map <S2SV_ModStart> init_mode_probs ( <S2SV_ModEnd> <S2SV_ModStart> ; cm -> fc -> initialized = 1 <S2SV_ModStart> * <S2SV_ModStart> * <S2SV_ModStart> && <S2SV_ModEnd> <S2SV_ModStart> && ! cm -> frame_parallel_decode ) memset ( cm -> prev_mip , 0 , <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5538,<S2SV_StartBug> rcu_read_lock ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! head -> dev ) <S2SV_EndBug> <S2SV_StartBug> if ( qp -> user == IP_DEFRAG_CONNTRACK_IN && ! skb_dst ( head ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ,"<S2SV_ModStart> const struct iphdr * iph ; int err ; <S2SV_ModStart> ) goto out_rcu_unlock ; skb_dst_drop ( head ) ; iph = ip_hdr ( head ) ; err = ip_route_input_noref ( head , iph -> daddr , iph -> saddr , iph -> tos , head -> dev ) ; if ( err <S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> "
5539,<S2SV_StartBug> if ( track -> timescale > UINT16_MAX ) { <S2SV_EndBug> ,<S2SV_ModStart> || ! track -> par -> channels 
5540,<S2SV_StartBug> break ; <S2SV_EndBug> ,"<S2SV_ModStart> status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } "
5541,"<S2SV_StartBug> timag = ixheaacd_add32 ( i1 , r1 ) ; <S2SV_EndBug> <S2SV_StartBug> treal = ixheaacd_sub32 ( i2 , r2 ) ; <S2SV_EndBug> ","<S2SV_ModStart> ixheaacd_add32_sat <S2SV_ModEnd> <S2SV_ModStart> ixheaacd_sub32_sat ( i2 , r2 ) ; treal = ( ixheaacd_shl32_sat ( treal , shift ) ) ; filter_states [ j ] = treal ; treal = ixheaacd_sub32_sat ( i1 , r1 ) ; treal = ( ixheaacd_shl32_sat ( treal , shift ) ) ; * filter_states ++ = treal ; timag = ixheaacd_add32_sat <S2SV_ModEnd> "
5542,"<S2SV_StartBug> assert ( ybf -> y_height - ybf -> y_crop_height < 16 ) ; <S2SV_EndBug> <S2SV_StartBug> extend_plane ( ybf -> y_buffer , ybf -> y_stride , <S2SV_EndBug> <S2SV_StartBug> ( ybf -> y_crop_width + 1 ) / 2 , ( ybf -> y_crop_height + 1 ) / 2 , <S2SV_EndBug> <S2SV_StartBug> ( ybf -> y_crop_width + 1 ) / 2 , ( ybf -> y_crop_height + 1 ) / 2 , <S2SV_EndBug> ","<S2SV_ModStart> const int uv_border = ybf -> border / 2 ; assert ( ybf -> border % 2 == 0 ) ; <S2SV_ModStart> # if CONFIG_VP9_HIGHBITDEPTH if ( ybf -> flags & YV12_FLAG_HIGHBITDEPTH ) { extend_plane_high ( ybf -> y_buffer , ybf -> y_stride , ybf -> y_crop_width , ybf -> y_crop_height , ybf -> border , ybf -> border , ybf -> border + ybf -> y_height - ybf -> y_crop_height , ybf -> border + ybf -> y_width - ybf -> y_crop_width ) ; extend_plane_high ( ybf -> u_buffer , ybf -> uv_stride , ybf -> uv_crop_width , ybf -> uv_crop_height , uv_border , uv_border , uv_border + ybf -> uv_height - ybf -> uv_crop_height , uv_border + ybf -> uv_width - ybf -> uv_crop_width ) ; extend_plane_high ( ybf -> v_buffer , ybf -> uv_stride , ybf -> uv_crop_width , ybf -> uv_crop_height , uv_border , uv_border , uv_border + ybf -> uv_height - ybf -> uv_crop_height , uv_border + ybf -> uv_width - ybf -> uv_crop_width ) ; return ; } # endif <S2SV_ModStart> ybf -> uv_crop_width , ybf -> uv_crop_height , uv_border , uv_border , uv_border + ybf -> uv_height - ybf -> uv_crop_height , uv_border + ybf -> uv_width - ybf -> uv_crop_width <S2SV_ModEnd> <S2SV_ModStart> ybf -> uv_crop_width , ybf -> uv_crop_height , uv_border , uv_border , uv_border + ybf -> uv_height - ybf -> uv_crop_height , uv_border + ybf -> uv_width - ybf -> uv_crop_width <S2SV_ModEnd> "
5543,<S2SV_StartBug> usb_autopm_put_interface ( serial -> interface ) ; <S2SV_EndBug> ,<S2SV_ModStart> info -> port = NULL ; 
5544,"<S2SV_StartBug> ""Key<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>the<S2SV_blank>null<S2SV_blank>string"" ) ; <S2SV_EndBug> ","<S2SV_ModStart> ) ; return NULL ; } if ( IVlen != 0 && mode == MODE_ECB ) { PyErr_Format ( PyExc_ValueError , ""ECB<S2SV_blank>mode<S2SV_blank>does<S2SV_blank>not<S2SV_blank>use<S2SV_blank>IV"" ) ; return NULL ; } if ( IVlen != 0 && mode == MODE_CTR ) { PyErr_Format ( PyExc_ValueError , ""CTR<S2SV_blank>mode<S2SV_blank>needs<S2SV_blank>counter<S2SV_blank>parameter,<S2SV_blank>not<S2SV_blank>IV"" "
5545,"<S2SV_StartBug> cmd = kmalloc ( sizeof ( * cmd ) , GFP_KERNEL ) ; <S2SV_EndBug> ",<S2SV_ModStart> kzalloc <S2SV_ModEnd> 
5546,<S2SV_StartBug> assert ( proto != LLDP_MGMT_ADDR_NONE ) ; <S2SV_EndBug> ,<S2SV_ModStart> if ( proto == LLDP_MGMT_ADDR_NONE ) continue <S2SV_ModEnd> 
5547,<S2SV_StartBug> if ( tgt_clobbers & ~ site_clobbers ) <S2SV_EndBug> <S2SV_StartBug> if ( len < 5 ) <S2SV_EndBug> ,"<S2SV_ModStart> len < 5 ) { # ifdef CONFIG_RETPOLINE WARN_ONCE ( ""Failing<S2SV_blank>to<S2SV_blank>patch<S2SV_blank>indirect<S2SV_blank>CALL<S2SV_blank>in<S2SV_blank>%ps\\n"" , ( void * ) addr ) ; # endif <S2SV_ModEnd> <S2SV_ModStart> } <S2SV_ModEnd> "
5548,<S2SV_StartBug> put_io_context ( p -> io_context ) ; <S2SV_EndBug> ,<S2SV_ModStart> if <S2SV_ModEnd> <S2SV_ModStart> ) exit_io_context ( p 
5549,<S2SV_StartBug> if ( frame_end - frame < width + 3 ) <S2SV_EndBug> ,<S2SV_ModStart> 4 <S2SV_ModEnd> 
5550,<S2SV_StartBug> if ( mk_security_check_url ( sr -> uri ) < 0 ) { <S2SV_EndBug> ,<S2SV_ModStart> uri_processed <S2SV_ModEnd> 
5551,<S2SV_StartBug> { <S2SV_EndBug> ,<S2SV_ModStart> if ( s == 0 ) return ( ( void * ) NULL ) ; 
5552,"<S2SV_StartBug> static void read_quant_matrix_ext ( MpegEncContext * s , GetBitContext * gb ) <S2SV_EndBug> <S2SV_StartBug> if ( get_bits1 ( gb ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 64 ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> if ( get_bits1 ( gb ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 64 ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> ",<S2SV_ModStart> int <S2SV_ModEnd> <S2SV_ModStart> if ( get_bits_left ( gb ) < 64 * 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> if ( get_bits_left ( gb ) < 64 * 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> if ( get_bits_left ( gb ) < 64 * 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> if ( get_bits_left ( gb ) < 64 * 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> return 0 ; 
5553,<S2SV_StartBug> if ( peer ) { <S2SV_EndBug> ,<S2SV_ModStart> lsa -> l2tp_unused = 0 ; 
5554,"<S2SV_StartBug> super_block_uvrd ( cpi , x , rate_tokenonly , distortion , <S2SV_EndBug> <S2SV_StartBug> * rate = * rate_tokenonly + x -> intra_uv_mode_cost [ cm -> frame_type ] [ DC_PRED ] ; <S2SV_EndBug> ","<S2SV_ModStart> memset ( x -> skip_txfm , SKIP_TXFM_NONE , sizeof ( x -> skip_txfm ) ) ; <S2SV_ModStart> cpi <S2SV_ModEnd> "
5555,<S2SV_StartBug> if ( isspace ( * s ) ) <S2SV_EndBug> ,<S2SV_ModStart> ( unsigned char ) 
5556,"<S2SV_StartBug> vpx_memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & best_mode -> partition , x -> partition_info , sizeof ( PARTITION_INFO ) ) ; <S2SV_EndBug> ",<S2SV_ModStart> memcpy <S2SV_ModEnd> <S2SV_ModStart> memcpy <S2SV_ModEnd> 
5557,"<S2SV_StartBug> im = ( gdImage * ) gdCalloc ( 1 , sizeof ( gdImage ) ) ; <S2SV_EndBug> ","<S2SV_ModStart> if ( overflow2 ( sizeof ( unsigned char * ) , sx ) ) { return NULL ; } "
5558,<S2SV_StartBug> # if 0 <S2SV_EndBug> <S2SV_StartBug> p ++ ; s ++ ; <S2SV_EndBug> ,<S2SV_ModStart>  <S2SV_ModEnd> <S2SV_ModStart>  <S2SV_ModEnd> 
